{
    "abstractText": "Automatically generating high-quality step-by-step solutions to math word problems has many applications in education. Recently, combining large language models (LLMs) with external tools to perform complex reasoning and calculation has emerged as a promising direction for solving math word problems, but prior approaches such as Program-Aided Language model (PAL) are biased towards simple procedural problems and less effective for problems that require declarative reasoning. We propose an approach that combines an LLM that can incrementally formalize word problems as a set of variables and equations with an external symbolic solver that can solve the equations. Our approach achieves comparable accuracy to the original PAL on the GSM8K benchmark of math word problems and outperforms PAL by an absolute 20% on ALGEBRA, a new dataset of more challenging word problems extracted from Algebra textbooks. Our work highlights the benefits of using declarative and incremental representations when interfacing with an external tool for solving complex math word problems. Our data and prompts are publicly available at https://github.com/joyheyueya/declarative-mathword-problem.",
    "authors": [
        {
            "affiliations": [],
            "name": "Joy He-Yueya"
        }
    ],
    "id": "SP:fb0882aaed3bf3d7fa667314cf8da31059c13dfa",
    "references": [
        {
            "authors": [
                "T. Brown",
                "B. Mann",
                "N. Ryder",
                "M. Subbiah",
                "J.D. Kaplan",
                "P. Dhariwal",
                "A. Neelakantan",
                "P. Shyam",
                "G. Sastry",
                "A. Askell"
            ],
            "title": "Language models are few-shot learners",
            "venue": "Advances in neural information processing systems,",
            "year": 2020
        },
        {
            "authors": [
                "M. Chen",
                "J. Tworek",
                "H. Jun",
                "Q. Yuan",
                "H.P. d. O. Pinto",
                "J. Kaplan",
                "H. Edwards",
                "Y. Burda",
                "N. Joseph",
                "G. Brockman"
            ],
            "title": "Evaluating large language models trained on code",
            "venue": "arXiv preprint arXiv:2107.03374,",
            "year": 2021
        },
        {
            "authors": [
                "A. Chowdhery",
                "S. Narang",
                "J. Devlin",
                "M. Bosma",
                "G. Mishra",
                "A. Roberts",
                "P. Barham",
                "H.W. Chung",
                "C. Sutton",
                "S. Gehrmann"
            ],
            "title": "Palm: Scaling language modeling with pathways",
            "venue": "arXiv preprint arXiv:2204.02311,",
            "year": 2022
        },
        {
            "authors": [
                "K. Cobbe",
                "V. Kosaraju",
                "M. Bavarian",
                "M. Chen",
                "H. Jun",
                "L. Kaiser",
                "M. Plappert",
                "J. Tworek",
                "J. Hilton",
                "R. Nakano"
            ],
            "title": "Training verifiers to solve math word problems",
            "venue": "arXiv preprint arXiv:2110.14168,",
            "year": 2021
        },
        {
            "authors": [
                "D.D. Cummins"
            ],
            "title": "Children\u2019s interpretations of arithmetic word problems",
            "venue": "Cognition and instruction,",
            "year": 1991
        },
        {
            "authors": [
                "J. del Olmo-Mu\u00f1oz",
                "J.A. Gonz\u00e1lez-Calero",
                "P.D. Diago",
                "D. Arnau",
                "M. Arevalillo-Herr\u00e1ez"
            ],
            "title": "Intelligent tutoring systems for word problem solving in covid-19 days: could they have been (part of) the solution",
            "venue": "ZDM\u2013Mathematics Education,",
            "year": 2022
        },
        {
            "authors": [
                "L. Gao",
                "A. Madaan",
                "S. Zhou",
                "U. Alon",
                "P. Liu",
                "Y. Yang",
                "J. Callan",
                "G. Neubig"
            ],
            "title": "Pal: Programaided language models",
            "venue": "arXiv preprint arXiv:2211.10435,",
            "year": 2022
        },
        {
            "authors": [
                "D. Hendrycks",
                "C. Burns",
                "S. Kadavath",
                "A. Arora",
                "S. Basart",
                "E. Tang",
                "D. Song",
                "J. Steinhardt"
            ],
            "title": "Measuring mathematical problem solving with the math dataset",
            "venue": "arXiv preprint arXiv:2103.03874,",
            "year": 2021
        },
        {
            "authors": [
                "A. Lewkowycz",
                "A. Andreassen",
                "D. Dohan",
                "E. Dyer",
                "H. Michalewski",
                "V. Ramasesh",
                "A. Slone",
                "C. Anil",
                "I. Schlag",
                "T. Gutman-Solo"
            ],
            "title": "Solving quantitative reasoning problems with language models",
            "venue": "arXiv preprint arXiv:2206.14858,",
            "year": 2022
        },
        {
            "authors": [
                "L. Marecek",
                "M. Anthony-Smith",
                "A.H. Mathis"
            ],
            "title": "Elementary Algebra 2E",
            "venue": "OpenStax,",
            "year": 2020
        },
        {
            "authors": [
                "A. Meurer",
                "C.P. Smith",
                "M. Paprocki",
                "O. \u010cert\u00edk",
                "S.B. Kirpichev",
                "M. Rocklin",
                "A. Kumar",
                "S. Ivanov",
                "J.K. Moore",
                "S. Singh"
            ],
            "title": "Sympy: symbolic computing in python",
            "venue": "PeerJ Computer Science,",
            "year": 2017
        },
        {
            "authors": [
                "O. Polozov",
                "E. O\u2019Rourke",
                "A.M. Smith",
                "L. Zettlemoyer",
                "S. Gulwani",
                "Z. Popovi\u0107"
            ],
            "title": "Personalized mathematical word problem generation",
            "venue": "In Twenty-Fourth International Joint Conference on Artificial Intelligence,",
            "year": 2015
        },
        {
            "authors": [
                "N. Pongsakdi",
                "A. Kajamies",
                "K. Veermans",
                "K. Lertola",
                "M. Vauras",
                "E. Lehtinen"
            ],
            "title": "What makes mathematical word problem solving challenging? exploring the roles of word problem characteristics, text comprehension, and arithmetic skills",
            "venue": "ZDM, 52:33\u201344,",
            "year": 2020
        },
        {
            "authors": [
                "S. Ritter",
                "J.R. Anderson",
                "K.R. Koedinger",
                "A. Corbett"
            ],
            "title": "Cognitive tutor: Applied research in mathematics education",
            "venue": "Psychonomic bulletin & review,",
            "year": 2007
        },
        {
            "authors": [
                "J. Wei",
                "X. Wang",
                "D. Schuurmans",
                "M. Bosma",
                "E. Chi",
                "Q. Le",
                "D. Zhou"
            ],
            "title": "Chain of thought prompting elicits reasoning in large language models",
            "year": 2022
        },
        {
            "authors": [
                "G. I"
            ],
            "title": "Zaigralin. Basic Algebra with Applications",
            "venue": "Ivan G. Zaigralin,",
            "year": 2018
        },
        {
            "authors": [
                "D. Zhou",
                "N. Sch\u00e4rli",
                "L. Hou",
                "J. Wei",
                "N. Scales",
                "X. Wang",
                "D. Schuurmans",
                "O. Bousquet",
                "Q. Le",
                "E. Chi"
            ],
            "title": "Least-to-most prompting enables complex reasoning in large language models",
            "venue": "arXiv preprint arXiv:2205.10625,",
            "year": 2022
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "Learning to solve mathematical word problems (see an example in Figure 1) is an important skill but can be challenging for students. [5, 13]. A tool that can automatically generate step-by-step solutions to such problems has the potential to provide personalized support for students working through word problems [14, 6] and help educators with curriculum development [12].\nUsing few-shot prompting over large language models (LLMs) has recently emerged as a promising approach for solving math word problems [15, 17, 7]. The chain-of-thought (COT) [15] prompting method presents explicit intermediate reasoning steps to the LLM to further enhance its reasoning capability. However, LLMs often struggle with performing arithmetic operations [8, 9, 15]. To address this, [15] uses an external calculator to evaluate the arithmetic operations in the generated reasoning steps. Program-Aided Language model (PAL) [7] extends this idea by generating Python programs as reasoning steps, offloading all calculations to a Python interpreter. Although programs offer a direct representation of procedures, they require special devices to represent more abstract mathematical declarations. For example, a statement like a = b+ 1 can be directly interpreted as a variable assignment in Python if b is known, but not if b is unknown. Nonetheless, the equation remains a valid mathematical expression even when b is unknown, suggesting that we instead want to\nPreprint.\nar X\niv :2\n30 4.\n09 10\n2v 1\n[ cs\n.C L\n] 1\n6 A\nallow models to perform mathematical declarations beyond those that yield a procedure (for a full example, see the problem in Figure 4).\nIn this work, we present an approach that combines an LLM, which can incrementally formalize word problems as a set of variables and equations, with an external symbolic solver that can solve the equations. Our approach achieves comparable performance to the original PAL on the GSM8K [4] benchmark of math word problems. To evaluate current approaches on more challenging word problems, we introduce ALGEBRA, a dataset of 222 word problems collected from open access Algebra textbooks. We show that our approach outperforms PAL by an absolute 20% on ALGEBRA. Our work highlights the effectiveness of incrementally generating declarative formalizations when interfacing with an external tool for solving complex math word problems."
        },
        {
            "heading": "2 Related work",
            "text": "Recent studies have explored the use of few-shot prompting over LLMs for solving math word problems [15, 17, 7]. The chain-of-thought [15] prompting method presents explicit intermediate reasoning steps to the LLM to improve its reasoning capability. Since LLMs often make arithmetic errors [8, 9, 15], several prior works [15, 3] have experimented with using an external calculator to carry out the operations generated by LLMs. This generally improves final performance by less than 5% on GSM8K. Program-Aided Language model [7] extends to more complex arithmetic by generating Python programs as reasoning steps and using a Python interpreter to perform the calculations. However, generating Python programs carries a strong bias toward procedural calculations and does not work well for word problems that do not have a straightforward procedural solution."
        },
        {
            "heading": "3 Our Approach: Equipping an LLM With an External Symbolic Solver",
            "text": "Our approach for solving a math word problem consists of two steps: (1) declarative and incremental formalization using an LLM and (2) solving equations using a symbolic solver."
        },
        {
            "heading": "3.1 Declarative and incremental formalization using an LLM",
            "text": "To solve a math word problem, we first use an LLM to formalize the problem as a set of variables and equations. Recently, using few-shot prompting over LLMs has emerged as an effective approach for natural language understanding and decomposition."
        },
        {
            "heading": "3.1.1 Few-shot prompting",
            "text": "Few-shot prompting is a technique that uses LLMs to solve a task by providing the LLMs with a few demonstrations of the task as part of the input at inference time [1]. In this technique, the demonstrations (i.e., examples of input-output pairs) are concatenated into a prompt, which is passed to the model along with the new input to generate an output. Formally, a set of k input-output examples {(xi, yi)}ki=1 are concatenated in a prompt p \u2261 (x1, y2)||(x1, y2)||...||(xk, yk) where || denotes the concatenation of examples. At inference time, p||xtest is passed to the model where xtest denotes a new input instance, and the model attempts to complete p||xtest by generating the output ytest."
        },
        {
            "heading": "3.1.2 Crafting the DECLARATIVE prompt",
            "text": "To formalize word problems using few-shot prompting, we introduce the DECLARATIVE prompt p \u2261 (x1, y2)||(x1, y2)||...||(xk, yk) where xi is the word problem in natural language, and yi is the step-by-step solution to xi. In the DECLARATIVE prompt, yi consists of interleaved natural language statements and formal variable or equation declarations in double-square brackets. Our approach aims to generate solutions that formalize word problems based on a set of principles listed in Table 1. Figure 1 shows an example used in the DECLARATIVE prompt that we created according to these principles. The full prompt is publicly available at https://github.com/joyheyueya/declarative-mathword-problem. To solve a new word problem, xtest, we append it to p and pass p||xtest to an LLM, which generates ytest as the solution for xtest."
        },
        {
            "heading": "3.2 Solving equations using a symbolic solver",
            "text": "The step-by-step solution generated by the LLM using the DECLARATIVE prompt includes the list of variables and equations that describe the word problem but does not provide the final answer (see Figure 1). Instead of relying on the LLM to solve the equations directly, we pass the equations to an external symbolic solver to do the calculation. In this work, we use SymPy [11], a Python library for symbolic computation, to algebraically solve a system of equations extracted from the solution generated by the LLM."
        },
        {
            "heading": "4 Experimental Setup",
            "text": ""
        },
        {
            "heading": "4.1 Datasets",
            "text": "We evaluate our approach on two math word problem datasets: GSM8K [4] and a new dataset called ALGEBRA 1. We use the GSM8K test set, which contains 1319 math word problems at grade-school level. To evaluate our approach on more challenging problems, we curated ALGEBRA, which consists of 222 word problems from two open-access Algebra textbooks: Basic Algebra with Applications ([16]; released under the Creative Commons Attribution-ShareAlike license) and Elementary Algebra 2e ([10]; released under the Creative Commons Attribution license). The resulting dataset includes word problems covering all topics leading up to System of Equations, with the exception of problems related to geometry, graphing, or inequalities.\n1The ALGEBRA dataset is publically available at https://github.com/joyheyueya/declarative-math-wordproblem.\n(a) Adding principles to the beginning of the DECLARATIVE prompt. (b) Adding principles to the beginning of the DECLARATIVE prompt and calculating the final answer. The final answer is in red.\nFigure 2: The difference between \u201cDECLARATIVE3-shot + principles + SymPy\u201d and \u201cDECLARATIVE3-shot + principles\u201d is that \u201cDECLARATIVE3-shot + principles + SymPy\u201d passes the equations to SymPy to solve, but \u201cDECLARATIVE3-shot + principles\u201d asks the LLM to solve the equations directly.\nFigure 3: An example of formalizing a math word problem in a single equation."
        },
        {
            "heading": "4.2 Baselines and variants of the DECLARATIVE prompting",
            "text": "We consider three methods: chain-of-thought (COT) prompting [15], Program-Aided Language model (PAL) [7], and our DECLARATIVE prompting combined with SymPy (DECLARATIVE + SymPy). We created two different prompts for each prompting method. The first prompt (8-shot) uses the same set of eight examples used in prior work [15]. The second prompt (3-shot) uses three examples that we designed to help illustrate step-by-step and declarative thinking and the formalization format we expect.\nFor our DECLARATIVE prompting method, we experimented with three variants.\n1. DECLARATIVE3-shot + principles + SymPy: adding the list of principles in Table 1 at the beginning of the prompt (see an example in Figure 2a).\n2. DECLARATIVE3-shot + principles: using the LLM to directly calculate the value of the goal variable (see an example in Figure 2b).\n3. ONE-STEP DECLARATIVE3-shot + SymPy: formalizing the word problem in a single step instead of incrementally (see an example in Figure 3).\nAll the prompts used in this work are publicly available at https://github.com/joyheyueya/declarativemath-word-problem.\nWe use Codex (code-davinci-002) [2] as the LLM for all methods. We use top-1 decoding and a temperature of 0. We set max_tokens to be 600."
        },
        {
            "heading": "5 Results",
            "text": "5.1 Results on GSM8K and ALGEBRA\nOn GSM8K (Table 2), our 3-shot prompt leads to a better performance than the original 8-shot prompt for PAL and DECLARATIVE. PAL outperforms DECLARATIVE across both sets of comparable examples, but using our DECLARATIVE prompting method with the 3-shot prompt (DECLARATIVE3-shot + principles + SymPy) gives a performance equivalent to the original PAL (PAL8-shot (original)).\nInterestingly, prepending the list of principles to the DECLARATIVE prompt (DECLARATIVE3-shot + principles + SymPy) leads to a better performance on GSM8K than DECLARATIVE3-shot + SymPy. Asking the LLM to solve the equations directly leads to a dramatic drop in accuracy (from 69.4%\nto 22.4%), which highlights the benefit of using an external solver. Additionally, our DECLARATIVE prompting benefits from incremental formalization, as shown by the performance gap between the incremental version (DECLARATIVE3-shot + principles+SymPy) and the non-incremental variant (ONE-STEP DECLARATIVE3-shot + SymPy).\nOn ALGEBRA (Table 2), our approach (DECLARATIVE3-shot + principles + SymPy) achieves the highest accuracy among all methods, outperforming PAL by an absolute 20%. The accuracy of the original COT drops from 62.5% on GSM8K to 45.3% on ALGEBRA, which demonstrates that problems in ALGEBRA are generally harder than those in GSM8K. The main reason that the DECLARATIVE prompting method works better than COT and PAL on ALGEBRA is that it is less intuitive to generate procedural solutions to Algebra problems that require declarative reasoning (see an example in Figure 4). Although our 3-shot prompt improves the performance of COT and PAL on ALGEBRA compared to the original 8-shot prompt, our DECLARATIVE method is still much more effective than COT and PAL."
        },
        {
            "heading": "6 Conclusion",
            "text": "We present an approach for automatically generating step-by-step solutions to math word problems by equipping an LLM with an external symbolic solver. Our approach uses an LLM to incrementally formalize word problems as variables and equations and avoids arithmetic errors by using an external symbolic solver that can solve the equations. Our approach achieves comparable accuracy to the original PAL on GSM8K and improves over PAL by an absolute 20% on a new dataset consisting of harder word problems from Algebra textbooks.\nWe demonstrate the effectiveness of using declarative formalization when interfacing with an external tool for solving complex math word problems. Additionally, encouraging incremental formalization is beneficial, especially when using declarative representations. Our approach is particularly useful for math education since many advanced math problems can be divided into separate conceptual pieces, with one piece being declarative and the other involving procedural knowledge."
        }
    ],
    "title": "Solving Math Word Problems by Combining Language Models With Symbolic Solvers",
    "year": 2023
}