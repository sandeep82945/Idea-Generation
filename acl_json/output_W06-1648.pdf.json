{
    "abstractText": "This paper explores the use of a character segment based character correction model, language modeling, and shallow morphology for Arabic OCR error correction. Experimentation shows that character segment based correction is superior to single character correction and that language modeling boosts correction, by improving the ranking of candidate corrections, while shallow morphology had a small adverse effect. Further, given sufficiently large corpus to extract a dictionary and to train a language model, word based correction works well for a morphologically rich language such as Arabic.",
    "authors": [
        {
            "affiliations": [],
            "name": "Walid Magdy"
        },
        {
            "affiliations": [],
            "name": "Kareem Darwish"
        }
    ],
    "id": "SP:ede91293b088007fb992fb7a423cc90aa222b4ed",
    "references": [
        {
            "authors": [
                "E. Agirre",
                "K. Gojenola",
                "K. Sarasola",
                "A. Voutilainen"
            ],
            "title": "Towards a Single Proposal in Spelling Correction",
            "year": 1998
        },
        {
            "authors": [
                "M. Ahmed"
            ],
            "title": "A Large-Scale Computational Processor of Arabic Morphology and Applications. MSc. Thesis, in Faculty of Engineering Cairo University: Cairo, Egypt",
            "year": 2000
        },
        {
            "authors": [
                "R. Baeza-Yates",
                "G. Navarro"
            ],
            "title": "A Faster Algorithm for Approximate String Matching",
            "venue": "In Combinatorial Pattern Matching (CPM'96),",
            "year": 1996
        },
        {
            "authors": [
                "E. Brill",
                "R. Moore"
            ],
            "title": "An improved error model for noisy channel spelling correction",
            "venue": "In the proceedings of the 38th Annual Meeting on Association for Computational Linguistics, pages",
            "year": 2000
        },
        {
            "authors": [
                "K. Church",
                "W. Gale"
            ],
            "title": "Probability Scoringfor Spelling Correction.",
            "venue": "Statistics and Computing,",
            "year": 1991
        },
        {
            "authors": [
                "K. Darwish",
                "D. Oard"
            ],
            "title": "Term Selection for Searching Printed Arabic",
            "year": 2002
        },
        {
            "authors": [
                "K. Darwish",
                "H. Hassan",
                "O. Emam"
            ],
            "title": "Examining the Effect of Improved Context Sensitive Morphology on Arabic Information Retrieval",
            "venue": "In ACL Workshop on Computation Approaches to Semitic Languages, Ann Arbor,",
            "year": 2005
        },
        {
            "authors": [
                "A. De Roeck",
                "W. Al-Fares"
            ],
            "title": "A Morphologically Sensitive Clustering Algorithm for Identifying Arabic Roots",
            "venue": "In the 38th Annual Meeting of the ACL, Hong Kong,",
            "year": 2000
        },
        {
            "authors": [
                "R. Domeij",
                "J. Hollman",
                "V. Kann"
            ],
            "title": "Detection of spelling errors in Swedish not using a word list en clair",
            "venue": "Journal of Quantitative Linguistics",
            "year": 1994
        },
        {
            "authors": [
                "S. Harding",
                "W. Croft",
                "C. Weir"
            ],
            "title": "Probabilistic Retrieval of OCR-degraded Text Using N-Grams",
            "venue": "In European Conference on Digital Libraries",
            "year": 1997
        },
        {
            "authors": [
                "T. Hong"
            ],
            "title": "Degraded Text Recognition Using Visual and Linguistic Context",
            "venue": "Ph.D. Thesis,",
            "year": 1995
        },
        {
            "authors": [
                "D. Jurafsky",
                "J. Martin"
            ],
            "title": "Speech and Language Processing. Chapter 5: pages 141-163",
            "year": 2000
        },
        {
            "authors": [
                "L. Larkey",
                "L. Ballesteros",
                "M. Connell"
            ],
            "title": "Improving stemming for Arabic information retrieval: light stemming and cooccurrence analysis",
            "venue": "In proceedings of the 25th annual international ACM SIGIR conference,",
            "year": 2002
        },
        {
            "authors": [
                "Y. Lee",
                "K. Papineni",
                "S. Roukos",
                "O. Emam",
                "H. Hassan"
            ],
            "title": "Language Model Based Arabic Word Segmentation",
            "venue": "In the Proceedings of the 41st Annual Meeting of the Association for Computational Linguistics,",
            "year": 2003
        },
        {
            "authors": [
                "Z. Lu",
                "I. Bazzi",
                "A. Kornai",
                "J. Makhoul",
                "P. Natarajan",
                "R. Schwartz"
            ],
            "title": "A Robust, Language-Independent OCR System",
            "venue": "In the 27th AIPR Workshop: Advances in Computer Assisted Recognition,",
            "year": 1999
        },
        {
            "authors": [
                "Moussa B",
                "M. Maamouri",
                "H. Jin",
                "A. Bies",
                "X. Ma"
            ],
            "title": "Arabic Treebank: Part 1 - 10Kword English Translation",
            "venue": "Linguistic Data Consortium",
            "year": 2003
        },
        {
            "authors": [
                "K. Oflazer"
            ],
            "title": "Error-Tolerant Finite State Recognition with Applications to Morphological Analysis and Spelling Correction",
            "venue": "Computational Linguistics",
            "year": 1996
        },
        {
            "authors": [
                "K. Taghva",
                "J. Borsack",
                "A. Condit"
            ],
            "title": "An Expert System for Automatically Correcting OCR Output",
            "venue": "In SPIE - Document Recognition",
            "year": 1994
        },
        {
            "authors": [
                "M. Tillenius"
            ],
            "title": "Efficient generation and ranking of spelling error corrections",
            "venue": "NADA",
            "year": 1996
        },
        {
            "authors": [
                "Y. Tseng",
                "D. Oard"
            ],
            "title": "Document Image Retrieval Techniques for Chinese",
            "venue": "In Symposium on Document Image Understanding",
            "year": 2001
        }
    ],
    "sections": [
        {
            "text": "Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP 2006), pages 408\u2013414, Sydney, July 2006.c\u00a92006 Association for Computational Linguistics"
        },
        {
            "heading": "1 Introduction",
            "text": "Recent advances in printed document digitization and processing led to large scale digitization efforts of legacy printed documents producing document images. To enable subsequent processing and retrieval, the document images are often transformed to character-coded text using Optical Character Recognition (OCR). Although OCR is fast, OCR output typically contains errors. The errors are even more pronounced in OCR\u2019ed Arabic text due to Arabic\u2019s orthographic and morphological properties. The introduced errors adversely affect linguistic processing and retrieval of OCR\u2019ed documents. This paper explores the effectiveness post-OCR error correction. The correction uses an improved character segment based noisy channel model, language modeling, and shallow morphological processing to correct OCR errors. The paper will be organized as follows: Section 2 provides background information on Arabic OCR and OCR error correction; Section 3 presents the error correction\nmethodology; Section 4 reports and discusses experimental results; and Section 5 concludes the paper and provides possible future directions."
        },
        {
            "heading": "2 Background",
            "text": "This section reviews prior work on Arabic OCR for Arabic and OCR error correction."
        },
        {
            "heading": "2.1 Arabic OCR",
            "text": "The goal of OCR is to transform a document image into character-coded text. The usual process is to automatically segment a document image into character images in the proper reading order using image analysis heuristics, apply an automatic classifier to determine the character codes that most likely correspond to each character image, and then exploit sequential context (e.g., preceding and following characters and a list of possible words) to select the most likely character in each position. The character error rate can be influenced by reproduction quality (e.g., original documents are typically better than photocopies), the resolution at which a document was scanned, and any mismatch between the instances on which the character image classifier was trained and the rendering of the characters in the printed document. Arabic OCR presents several challenges, including: \u2022 Arabic\u2019s cursive script in which most characters are connected and their shape vary with position in the word. \u2022 The optional use of word elongations and ligatures, which are special forms of certain letter sequences. \u2022 The presence of dots in 15 of the 28 letters to distinguish between different letters and the optional use of diacritic which can be confused with dirt, dust, and speckle (Darwish and Oard, 2002). \u2022 The morphological complexity of Arabic, which results in an estimated 60 billion possible\n408\nsurface forms, complicates dictionary-based error correction. Arabic words are built from a closed set of about 10,000 root forms that typically contain 3 characters, although 4-character roots are not uncommon, and some 5-character roots do exist. Arabic stems are derived from these root forms by fitting the root letters into a small set of regular patterns, which sometimes includes addition of \u201cinfix\u201d characters between two letters of the root (Ahmed, 2000). There is a number of commercial Arabic OCR systems, with Sakhr\u2019s Automatic Reader and Shonut\u2019s Omni Page being perhaps the most widely used. Retrieval of OCR degraded text documents has been reported for many languages, including English (Harding et al., 1997), Chinese (Tseng and Oard, 2001), and Arabic (Darwish and Oard, 2002)."
        },
        {
            "heading": "2.2 OCR Error Correction",
            "text": "Much research has been done to correct recognition errors in OCR-degraded collections. There are two main categories of determining how to correct these errors. They are word-level and passage-level post-OCR processing. Some of the kinds of word level post-processing include the use of dictionary lookup, probabilistic relaxation, character and word n-gram frequency analysis (Hong, 1995), and morphological analysis (Oflazer, 1996). Passage-level postprocessing techniques include the use of word ngrams, word collocations, grammar, conceptual closeness, passage level word clustering, linguistic context, and visual context. The following introduces some of the error correction techniques. \u2022 Dictionary Lookup: Dictionary Lookup, which is the basis for the correction reported in this paper, is used to compare recognized words with words in a term list (Church and Gale, 1991; Hong, 1995; Jurafsky and Martin, 2000). If a word is found in the dictionary, then it is considered correct. Otherwise, a checker attempts to find a dictionary word that might be the correct spelling of the misrecognized word. Jurafsky and Martin (2000) illustrate the use of a noisy channel model to find the correct spelling of misspelled or misrecognized words. The model assumes that text errors are due to edit operations namely insertions, deletions, and substitutions. Given two words, the number of edit operations required to transform one of the words to the other is called the Levenshtein edit distance (Baeza-Yates and Navarro, 1996). To\ncapture the probabilities associated with different edit operations, confusion matrices are employed. Another source of evidence is the relative probabilities that candidate word corrections would be observed. These probabilities can be obtained using word frequency in text corpus (Jurafsky and Martin, 2000). However, the dictionary lookup approach has the following problems (Hong, 1995): a) A correctly recognized word might not be in the dictionary. This problem could surface if the dictionary is small, if the correct word is an acronym or a named entity that would not normally appear in a dictionary, or if the language being recognized is morphologically complex. In a morphological complex language such as Arabic, German, and Turkish the number of valid word surface forms is arbitrarily large which complicates building dictionaries for spell checking. b) A word that is misrecognized is in the dictionary. An example of that is the recognition of the word \u201ctear\u201d instead of \u201cfear\u201d. This problem is particularly acute in a language such as Arabic where a large fraction of three letters sequences are valid words. \u2022 Character N-Grams: Character n-grams maybe used alone or in combination with dictionary lookup (Lu et al., 1999; Taghva et al., 1994). The premise for using n-grams is that some letter sequences are more common than others and other letter sequences are rare or impossible. For example, the trigram \u201cxzx\u201d is rare in the English language, while the trigram \u201cies\u201d is common. Using this method, an unusual sequence of letters can point to the position of an error in a misrecognized word. This technique is employed by BBN\u2019s Arabic OCR system (Lu et al., 1999). \u2022 Using Morphology: Many morphologically complex languages, such as Arabic, Swedish, Finnish, Turkish, and German, have enormous numbers of possible words. Accounting for and listing all the possible words is not feasible for purposes of error correction. Domeij proposed a method to build a spell checker that utilizes a stem lists and orthographic rules, which govern how a word is written, and morphotactic rules, which govern how morphemes (building blocks of meanings) are allowed to combine, to accept legal combinations of stems (Domeij et al., 1994). By breaking up compound words, dictionary lookup can be applied to individual constituent stems. Similar work was done for Turkish in which an error tolerant finite state\nrecognizer was employed (Oflazer, 1996). The finite state recognizer tolerated a maximum number of edit operations away from correctly spelled candidate words. This approach was initially developed to perform morphological analysis for Turkish and was extended to perform spelling correction. The techniques used for Swedish and Turkish can potentially be applied to Arabic. Much work has been done on Arabic morphology and can be potentially extended for spelling correction. \u2022 Word Clustering: Another approach tries to cluster different spellings of a word based on a weighted Levenshtein edit distance. The insight is that an important word, specially acronyms and named-entities, are likely to appear more than once in a passage. Taghva described an English recognizer that identifies acronyms and named-entities, clusters them, and then treats the words in each cluster as one word (Taghva, 1994). Applying this technique for Arabic requires accounting for morphology, because prefixes or suffixes might be affixed to instances of named entities. DeRoeck introduced a clustering technique tolerant of Arabic\u2019s complex morphology (De Roeck and Al-Fares, 2000). Perhaps the technique can be modified to make it tolerant of errors. \u2022 Using Grammar: In this approach, a passage containing spelling errors is parsed based on a language specific grammar. In a system described by Agirre (1998), an English grammar was used to parse sentences with spelling mistakes. Parsing such sentences gives clues to the expected part of speech of the word that should replace the misspelled word. Thus candidates produced by the spell checker can be filtered. Applying this technique to Arabic might prove challenging because the work on Arabic parsing has been very limited (Moussa et al., 2003). \u2022 Word N-Grams (Language Modeling): A Word n-gram is a sequence of n consecutive words in text. The word n-gram technique is a flexible method that can be used to calculate the likelihood that a word sequence would appear (Tillenius, 1996). Using this method, the candidate correction of a misspelled word might be successfully picked. For example, in the sentence \u201cI bought a peece of land,\u201d the possible corrections for the word peece might be \u201cpiece\u201d and \u201cpeace\u201d. However, using the n-gram method will likely indicate that the word trigram \u201cpiece of land\u201d is much more likely than the trigram\n\u201cpeace of land.\u201d Thus the word \u201cpiece\u201d is a more likely correction than \u201cpeace\u201d."
        },
        {
            "heading": "3 Error Correction Methodology",
            "text": "This section describes the character level modeling, the language modeling, and shallow morphological analysis."
        },
        {
            "heading": "3.1 OCR Character Level Model",
            "text": "A noisy channel model was used to learn how OCR corrupts single characters or character segments, producing a character level confusion model. To train the model, 6,000 OCR corrupted words were obtained from a modern printing of a medieval religious Arabic book (called \u201cThe Provisions of the Return\u201d or \u201cProvisions\u201d for short by Ibn Al-Qayim). The words were then manually corrected, and the corrupted and manually corrected versions were aligned. The Provisions book was scanned at 300x300 dots per inch (dpi), and Sakhr\u2019s Automatic Reader was used to OCR the scanned pages. From the 6,000 words, 4,000 were used for training and the remaining words were set aside for later testing. The Word Error Rate (WER) for the 2,000 testing words was 39%. For all words (in training and testing), the different forms of alef (hamza, alef, alef maad, alef with hamza on top, hamza on wa, alef with hamza on the bottom, and hamza on ya) were normalized to alef, and ya and alef maqsoura were normalized to ya. Subsequently, the characters in the aligned words can aligned in two different ways, namely: 1:1 (one-to-one) character alignment, where each character is mapped to no more than one character (Church and Gale, 1991); or using m:n alignment, where a character segment of length m is aligned to a character segment of length n (Brill and Moore, 2000). The second method is more general and potentially more accurate especially for Arabic where a character can be confused with as many as three or four characters. The following example highlights the difference between the 1:1 and the m:n alignment approaches. Given the training pair (rnacle, made):\n1:1 alignment :\nr n a c l e\nm \u03b5 a d \u03b5 e\nm:n alignment:\nFor alignment, Levenstein dynamic programming minimum edit distance algorithm was used to produce 1:1 alignments. The algorithm computes the minimum number of edit operations required to transform one string into another. Given the output alignments of the algorithm, properly aligned characters (such as a a and e\ne) are used as anchors, \u03b5\u2019s (null characters) are combined to misaligned adjacent characters producing m:n alignments, and \u03b5\u2019s between correctly aligned characters are counted as deletions or insertions. To formalize the error model, given a clean word \u03c7 = #C1..Ck.. Cl..Cn# and the resulting OCR degraded word \u03b4 = #D1..Dx.. Dy..Dm#, where Dx.. Dy resulted from Ck.. Cl, \u03b5 representing the null character, and # marking word boundaries, the probability estimates for the three edit operations for the models are:\nPsubstitution (Ck..Cl \u2212> Dx.. Dy) =\n)..(\n)....(\nlk\nyxlk\nCCcount\nDDCCcount \u2192\nPdeletion (Ck..Cl \u2212> \u03b5) = )..(\n)..(\nlk\nlk\nCCcount\nCCcount \u03b5\u2192\nPinsertion (\u03b5 \u2212> Dx.. Dy) = )(\n)..(\nCcount\nDDcount yx\u2192\u03b5\nWhen decoding a corrupted string \u03b4 composed of the characters D1..Dx.. Dy..Dm, the goal is to find a string \u03c7 composed of the characters C1..Ck.. Cl..Cn such that P(\u03b4|\u03c7)\u00b7P(\u03c7) is maximum. P(\u03c7) is the prior probability of observing \u03c7 in text and P(\u03b4|\u03c7) is the probability of producing \u03b4 from \u03c7. P(\u03c7) was computed from a web-mined collection of religious text by Ibn Taymiya, the main teacher of the medieval author of the \u201cProvisions\u201d book. The collection contained approximately 16 million words, with 278,877 unique surface forms. P(\u03b4|\u03c7) is calculated using the trained model, as follows:\n\u220f= yx DDall lkyx CCDDPP ..: )..|..()|( \u03c7\u03b4\nThe segments Dx.. Dy are generated by finding all possible 2n-1 segmentations of the word \u03b4. For example, given \u201cmacle\u201d then all possible segmentations are (m,a,c,l,e), (ma,c,l,e), (m,ac,l,e), (mac,l,e), (m,a,cl,e), (ma,cl,e), (m,acl,e), (macl,e), (m,a,c,le), (ma,c,le), (m,ac,le), (mac,le), (m,a,cle), (ma,cle), (m,acle), (macle). All segment sequences Ck.. Cl known to produce Dx.. Dy for each of the possible segmentations are produced. If a sequence of C1.. Cn segments generates a valid word \u03c7 which exists in the webmined collection, then argmax\u03c7 P(\u03b4|\u03c7)\u00b7P(\u03c7) is computed, otherwise the sequence is discarded. Possible corrections are subsequently ranked. For all the experiments reported in this paper, the top 10 corrections are generated. Note that error correction reported in this paper does not assume that a word is correct because it exists in the web-mined collection and assumes that all words are possibly incorrect. The effect of two modifications to the m:n character model mentioned above were examined. The first modification involved making the character model account for the position of letters in a word. The intuition for this model is that since Arabic letters change their shape based on their positions in words and would hence affect the letters with which they would be confused. Formally, given L denoting the positions of the letter at the boundaries of character segments, whether start, middle, end, or isolated, the character model would be:\nPsubstitution (Ck..Cl \u2212> Dx.. Dy | L) =\n)|..(\n)|....(\nLCCcount\nLDDCCcount\nlk\nyxlk \u2192\nPdeletion (Ck..Cl \u2212> \u03b5 | L) = )|..(\n)|..(\nLCCcount\nLCCcount\nlk\nlk \u03b5\u2192\nPinsertion (\u03b5 \u2212> Dx.. Dy) = )|(\n)|..(\nLCcount\nLDDcount yx\u2192\u03b5\nThe second modification involved giving a small uniform probability to single character substiutions that are unseen in the training data. This was done in accordance to Lidstone\u2019s law to smooth probabilities. The probability was set to be 100 times smaller than the probability of the smallest seen single character substitution*.\n* Other uniform probability estimates were examined for the training data and the one reported here seemed to work best\nr n a c l e\nm a d e"
        },
        {
            "heading": "3.2 Language Modeling",
            "text": "For language modeling, a trigram language model was trained on the same web-mined collection that was mentioned in the previous subsection without any kind of morphological processing. Like the text extracted from the \u201cProvisions\u201d book, alef and ya letter normalizations were performed. The language model was built using SRILM toolkit with Good-Turing smoothing and default backoff. Given a corrupted word sequence \u2206 = {\u03b41 .. \u03b4i .. \u03b4n} and \u039e = {\u03a71 .. \u03a7i .. \u03a7n}, where \u03a7i ={\u03c7i0 .. \u03c7im} are possible corrections of \u03b4i (m = 10 for all the experiments reported in the paper), the aim was to find a sequence \u2126 = {\u03c91 .. \u03c9i .. \u03c9n}, where \u03c9i \u2208 \u03a7i, that maximizes:\n( ) 4342144444 344444 21 odelCharacterM iji\ndelLanguageMo\njijiij mjni PP )|(,| ,2,1 ..1,..1 \u03c7\u03b4\u03c7\u03c7\u03c7 \u22c5     \u03a0 \u2212\u2212=="
        },
        {
            "heading": "3.3 Language Modeling and Shallow Morphological Analysis",
            "text": "Two paths were pursued to explore the combined effect of language modeling and shallow morphological analysis. In the first, a 6-gram language model was trained on the same web-mined collection after each of the words in the collection was segmented into its constituent prefix, stem, and suffix (in this order) using language model based stemmer (Lee et al., 2003). For example, \u201c \u0648PQR\u0622TU \u2013 wktAbhm\u201d was replaced by \u201cw# ktAb +hm\u201d where # and + were used to mark prefixes and suffixes respectively and to distinguish them from stems. Like before, alef and ya letter normalizations were performed and the language model was built using SRILM toolkit with the same parameters. Formally, the only difference between this model and the one before is that \u03a7i ={\u03c7i0 .. \u03c7im} are the {prefix, stem, suffix} tuples of the possible corrections of \u03b4i (a tuple is treated as a block). Otherwise everything else is identical. In the second, a trigram language model was trained on the same collection after the language modeling based stemming was used on all the tokens in the collection (Lee et al., 2003). The top n generated corrections were subsequently stemmed and the stems were reranked using the language model. The top resulting stem was compared to the condition in which language modeling was used without morphological analysis (as in the previous subsection) and then the top resulting correction were stemmed. This\npath was pursued to examine the effect of correction on applications where stems are more useful than words such as Arabic information retrieval (Darwish et al., 2005; Larkey et al., 2002)."
        },
        {
            "heading": "3.4 Testing the Models",
            "text": "The 1:1 and m:n character mapping models were tested while enabling or disabling character position training (CP), smoothing by the assignment of small probabilities to unseen single character substitutions (UP), language modeling (LM), and shallow morphological processing (SM) using the 6-gram model. As mentioned earlier, all models were tested using sentences containing 2,000 words in total."
        },
        {
            "heading": "4 Experimental Results",
            "text": "Table 1 reports on the percentage of words for which a proper correction was found in the top n generated corrections using different models. The percentage of words for which a proper correction exists in the top 10 proposed correction is the upper limit accuracy we can achieve given than we can rerank the correction using language modeling. Table 2 reports the word error rate for the 1:1 and m:n models with and without CP, UP, LM, and SM. Further, the before and after stemming error rates are reported for setups that use language modeling. Table 3 reports on the stem error rate when using the stem trigram language model. The best model was able to find the proper correction within the top 10 proposed correction for 90% of the words. The failure to find a proper correction within the proposed corrections was generally due to grossly misrecognized words and was rarely due to words that do not exist in web-mined collection. Perhaps, more training examples for the character based models would improve correction. Corrections 1 2 3 4 5 10\n1:1 75.3 80.3 83.1 84.5 85 86.5\n1:1 + CP 76.9 82.1 83.5 83.2 85 86\n1:1 + UP 76 81 83.6 84.6 85.2 86.7\nm:n 78.3 83.5 85.4 86.7 87.1 88.5\nm:n + CP 79.9 83.9 84.0 85.5 85.9 86.8\nm:n + UP 78.4 83.7 85.6 84.1 87.0 90.0\nTable 1: Percentage of words for which a proper correction was found in the top n generated corrections\nThe results indicate that the m:n character model is better than the 1:1 model in two ways. The first is that the m:n model yielded a greater percentage of proper corrections in the top 10 generated corrections, and the second is that the scores of the top 10 corrections were better which led to better results compared to the 1:1 model when used in combination with language modeling. For the m:n model with language modeling, the language model properly picked the proper correction from the proposed correction 98% of the time (for the cases where a proper correction was within the proposed corrections). Also the use of smoothing, UP, produced better corrections, while accounting for character positions had an adverse effect on correction. This might be an indication that the character segment correction training data was sparse. Using the 6- gram language model on the segmented words had a severely negative impact on correction accuracy. Perhaps is due to insufficient training data for the model. This situation lends itself to using a factored language model using the surface form of words as well as other linguistic features of the word such as part of speech tags, prefixes, and suffixes. As for training a language model on words versus stems, the results suggest that word based correction is slightly better than stem based correction. The authors\u2019 intuition is that this resulted from having a sufficiently large corpus to train the language model and that this might have been reversed if the training corpus for the language model was smaller. Perhaps further investigation would prove or disprove the authors\u2019 intuition."
        },
        {
            "heading": "5 Conclusion and Future Work",
            "text": "The paper examined the use of single character and character segment models based correction of Arabic OCR text combined with language modeling and shallow morphological analysis. Further, character position and smoothing issues were also examined. The results show the superiority of the character segment based model compared to the single character based model. Further, the use of language modeling yielded improved error correction particularly for the character segment based model. Accounting for character position and shallow morphological analysis had a negative impact on correction, while smoothing had a positive impact. Lastly, given a large in-domain corpus to extract a correction dictionary and to train a language model is a sufficient strategy for correcting a morphologically rich language such as Arabic with a 70% reduction in word error rate. For future work, a factor language model might prove beneficial to incorporate morphological information and other factors such as part of speech tags while overcoming training data sparseness problems. Also, determining the size of a sufficiently large corpus to generate a correction dictionary and to train a language model is desirable. Finally, word prediction might prove useful for cases where OCR grossly misrecognized words.\nReference\nAgirre, E., K. Gojenola, K. Sarasola, and A. Voutilainen. Towards a Single Proposal in Spelling Correction. In COLING-ACL'98 (1998).\nAhmed, M. A Large-Scale Computational Processor of Arabic Morphology and Applications. MSc. Thesis, in Faculty of Engineering Cairo University:\nCairo, Egypt. (2000).\nBaeza-Yates, R. and G. Navarro. A Faster Algorithm for Approximate String Matching. In Combinatorial Pattern Matching (CPM'96), Springer-Verlag\nLNCS (1996).\nBrill, E. and R. Moore. An improved error model for noisy channel spelling correction. In the proceedings of the 38th Annual Meeting on Association for\nComputational Linguistics, pages 286 \u2013 293 (2000).\nChurch, K. and W. Gale. \u201cProbability Scoringfor Spelling Correction.\u201d Statistics and Computing, 1: 93-103 (1991).\nDarwish, K. and D. Oard. Term Selection for Searching Printed Arabic. In SIGIR-2002 (2002).\nDarwish, K., H. Hassan, and O. Emam. Examining the Effect of Improved Context Sensitive Morphology on Arabic Information Retrieval. In ACL Workshop on Computation Approaches to Semitic Lan-\nguages, Ann Arbor, (2005).\nDe Roeck, A. and W. Al-Fares. A Morphologically Sensitive Clustering Algorithm for Identifying Arabic Roots. In the 38th Annual Meeting of the ACL, Hong Kong, (2000).\nDomeij, R., J. Hollman, V. Kann. Detection of spelling errors in Swedish not using a word list en clair. Journal of Quantitative Linguistics (1994) 195-201.\nHarding, S., W. Croft, and C. Weir. Probabilistic Retrieval of OCR-degraded Text Using N-Grams. In European Conference on Digital Libraries (1997).\nHong, T. Degraded Text Recognition Using Visual and Linguistic Context. Ph.D. Thesis, Computer Science Department, SUNY Buffalo: Buffalo (1995).\nJurafsky, D. and J. Martin. Speech and Language Processing. Chapter 5: pages 141-163. Prentice Hall (2000).\nLarkey, L., L. Ballesteros, and M. Connell. Improving stemming for Arabic information retrieval: light stemming and cooccurrence analysis. In proceedings of the 25th annual international ACM SIGIR\nconference, pages 275-282 (2002).\nLee, Y., K. Papineni, S. Roukos, O. Emam, and H. Hassan. Language Model Based Arabic Word Segmentation. In the Proceedings of the 41st Annual Meeting of the Association for Computational Lin-\nguistics, pages 399 - 406 (2003).\nLu, Z., I. Bazzi, A. Kornai, J. Makhoul, P. Natarajan, and R. Schwartz. A Robust, Language-Independent OCR System. In the 27th AIPR Workshop: Advances in Computer Assisted Recognition, SPIE (1999).\nMoussa B., M. Maamouri, H. Jin, A. Bies, X. Ma. Arabic Treebank: Part 1 - 10Kword English Translation. Linguistic Data Consortium (2003).\nOflazer, K. Error-Tolerant Finite State Recognition with Applications to Morphological Analysis and Spelling Correction. Computational Linguistics 22(1), 73-90 (1996).\nTaghva, K., J. Borsack, and A. Condit. An Expert System for Automatically Correcting OCR Output. In SPIE - Document Recognition (1994).\nTillenius, M., Efficient generation and ranking of spelling error corrections. NADA (1996).\nTseng, Y. and D. Oard. Document Image Retrieval Techniques for Chinese. In Symposium on Document Image Understanding Technology, Columbia,\nMD (2001)."
        }
    ],
    "title": "Arabic OCR Error Correction Using Character Segment Correction, Language Modeling, and Shallow Morphology",
    "year": 2006
}