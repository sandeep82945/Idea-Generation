{
    "abstractText": "The graph partitioning problem (GPP) is among the most challenging models in optimization. Because of its NP-hardness, the researchers directed their interest towards approximate methods such as the genetic algorithms (GA). The edge-based GA has shown promising results when solving GPP. However, for big dense instances, the size of the encoding representation becomes too huge and affects GA\u2019s efficiency. In this paper, we investigate the impact of modifying the size of the chromosomes on the edge based GA by reducing the GPP edge set. We study the GA performance with different levels of reductions, and we report the obtained results.",
    "authors": [
        {
            "affiliations": [],
            "name": "Ali CHAOUCHE"
        },
        {
            "affiliations": [],
            "name": "Menouar BOULIF"
        }
    ],
    "id": "SP:9eec96a326676c105474078a453809f581fd1885",
    "references": [
        {
            "authors": [
                "M. Boulif"
            ],
            "title": "Genetic algorithm encoding representations for graph partitioning problems",
            "venue": "International Conference on Machine and Web Intelligence",
            "year": 2010
        },
        {
            "authors": [
                "M. Boulif",
                "K. Atif"
            ],
            "title": "A new branch-&-bound-enhanced genetic algorithm for the manufacturing cell formation problem",
            "venue": "Computers & Operations Research",
            "year": 2006
        },
        {
            "authors": [
                "A. Chaouche",
                "M. Boulif"
            ],
            "title": "Solving the unsupervised graph partitioning problem with genetic algorithms: classical and new encoding representations",
            "year": 2019
        },
        {
            "authors": [
                "D.E. Goldberg"
            ],
            "title": "Genetic Algorithms in Search, Optimization and Machine Learning",
            "year": 1989
        },
        {
            "authors": [
                "J.F. Gon\u00e7alves",
                "M.G. Resende"
            ],
            "title": "A hybrid genetic algorithm for manufacturing cell formation",
            "venue": "AT&T Labs Research Technical Report",
            "year": 2002
        },
        {
            "authors": [
                "J.H. Holland"
            ],
            "title": "Adaptation in Natural and Artificial Systems - An Introductory: Analysis with Applications to Biology, Control, and Artificial: Intelligence",
            "year": 1975
        },
        {
            "authors": [
                "A.B. Kahng",
                "J. Lienig",
                "I.L. Markov",
                "J. Hu"
            ],
            "title": "VLSI physical design: from graph partitioning to timing closure",
            "year": 2011
        },
        {
            "authors": [
                "J. Li",
                "C.C. Liu",
                "K.P. Schneider"
            ],
            "title": "Controlled partitioning of a power network considering real and reactive power balance",
            "venue": "IEEE Transactions on Smart grid 1,",
            "year": 2010
        },
        {
            "authors": [
                "D. Luxen",
                "D. Schieferdecker"
            ],
            "title": "Candidate sets for alternative routes in road networks",
            "venue": "in: International Symposium on Experimental Algorithms,",
            "year": 2012
        },
        {
            "authors": [
                "Murni",
                "A. Bustamam",
                "Ernastuti",
                "T. Handhika",
                "D. Kerami"
            ],
            "title": "Hypergraph partitioning implementation for parallelizing matrix-vector multiplication using cuda gpu-based parallel computing",
            "venue": "in: AIP Conference Proceedings, AIP Publishing LLC",
            "year": 2017
        },
        {
            "authors": [
                "B. Peng",
                "L. Zhang",
                "D. Zhang"
            ],
            "title": "A survey of graph theoretical approaches to image segmentation",
            "venue": "Pattern Recognition",
            "year": 2013
        },
        {
            "authors": [
                "V. Venugopal",
                "T. Narendran"
            ],
            "title": "A genetic algorithm approach to the machine-component grouping problem with multiple objectives",
            "venue": "Computers & Industrial Engineering",
            "year": 1992
        }
    ],
    "sections": [
        {
            "text": "The graph partitioning problem (GPP) is among the most challenging models in optimization. Because of its NP-hardness, the researchers directed their interest towards approximate methods such as the genetic algorithms (GA). The edge-based GA has shown promising results when solving GPP. However, for big dense instances, the size of the encoding representation becomes too huge and affects GA\u2019s efficiency. In this paper, we investigate the impact of modifying the size of the chromosomes on the edge based GA by reducing the GPP edge set. We study the GA performance with different levels of reductions, and we report the obtained results.\nKeywords: Graph partitioning problem, Genetic algorithm, Encoding representation, Edge-based encoding, Edge set reduction."
        },
        {
            "heading": "1. Introduction",
            "text": "The graph partitioning problem (GPP) is one of the combinatorial optimization problems whose applicability spectrum covers a huge number of quite dissimilar domains [3]. GPP seeks to partition the vertices of a graph into moderately-sized disjoint subsets so as to optimize the cost of the overall cut weight. GPP ubiquitousness stems from a key factor. Indeed, GPP can be used to materialize the \u201ddivide to conquer\u201d philosophy, which by decomposing complex systems into less complicated subsystems eases their handling in order to solve the entire problem. Therefore, GPP has been used in many areas including parallel\nPreprint submitted to XXXX July 21, 2023\nar X\niv :2\n30 7.\n10 41\n0v 1\n[ cs\n.N E\n] 1\n9 Ju\ncomputing [10], power network design [8], VLSI design [7], image processing [11], road networks [9], etc. Being NP-Complete, the use of exact methods to solve GPP was not considered as a first concern by the research community. As a consequence, the use of approximate methods such as genetic algorithms (GA) seems to be the most promising path. The performance of the GA is closely related to the encoding scheme used to represent the solutions of the problem. Therefore, several encodings have been proposed in the literature [1, 3] such as the integer encoding [12], the fractional representation [5], the edge based encoding (EE) [2], etc. This latter presents a set of promising features such as reduced alphabet, good redundancy, etc. [1]. EE representation, in contrast to the widespread used encodings, doesn\u2019t use vertex but edge assignment to define a graph partition. Although the associated reported results were promising, the authors noticed that the performance varied from one instance to another. In this paper we trial the assertion that such a behaviour is essentially governed by the density of the graph. That is, EE performs well when this density is moderate. Hence, when a graph has an important density, we can take out some edges from being considered in the encoding representation. The rest of this work is organized as follows: in section 2 a formal description of the graph partitioning problem is given. The third section is devoted to the presentation of genetic algorithms and their principles. Section 4 outlines the EE representation. The next section explains the reduction approach. In section 6, we present the results of the empirical analysis. Finally, in the last section, we draw some conclusions."
        },
        {
            "heading": "2. Formal definition of the graph partitioning problem",
            "text": "We consider an undirected graphG = (V,E) such that V = {v1, v2, . . . , v|V |} is the set of vertices, and E = {e1, e2, . . . , e|E|} is the set of edges. Each edge e \u2208 E has a positive weight \u03c9(e). Partitioning G consists of finding a partition P = {C1, C2, . . . , C|P |} of V into |P | disjoint clusters, i.e .:\n\u2200i, j \u2208 {1, 2, . . . , |P |}, i \u0338= j : Ci \u2229 Cj = \u2205 (1)\nC1 \u222a C2 \u222a . . . C|P | = V (2) The objective is to minimize the total cut size. That is,\u2211\neij\u2208{{u,v}\u2208E:u\u2208Ci,v\u2208Cj ,,i \u0338=j}\n\u03c9(eij) (3)\nIn order to be accepted, the partition must satisfy the following constraints:\n\u2022 Moderate cluster size : the number of vertices per cluster has an upper bound.\n\u2022 Cohabitation constraints: some vertices must be put in the same cluster.\n\u2022 Non cohabitation constraints: some vertices must be put in different clusters."
        },
        {
            "heading": "3. Genetic algorithms",
            "text": "With his publication \u201dAdaptation in Natural and Artificial Systems\u201d [6] John Holland is considered the father of the genetic algorithms. After that, David Goldberg came in 1989 to vulgarize their concepts [4]. Since then, GAs enjoyed much attention due to their ability to solve complex problems. Genetic algorithms imitate the principle of evolution of natural species by evolving a set of chromosomes (individuals) that represent solutions of the problem to be solved. Two primary processes are used to ensure this evolution: natural selection and sexual reproduction. The first determines the most fitted individuals to their environment to survive and reproduce, and the second ensures mixing and recombination of the individuals to make offspring. To solve optimization problems using GAs, we proceed as follow : first an encoding scheme is defined to represent candidate solutions (the individuals of the population). After that, each individual in the population is evaluated according to the objective function. Then, the higher-ranking individuals mate to produce a new generation. With a low probability, the offspring can be modified by a mutation operator. This process is iterated until a certain stopping criterion is reached. Among the genetic representations, we use the edge based encoding for which the following section is devoted."
        },
        {
            "heading": "4. Edge based representation",
            "text": "In their work [2], the authors proposed a binary edge based encoding scheme to represent the individuals of the population (chromosomes) in order to solve the GPP. The principle of this encoding scheme is given as follow :\n\u2022 Step 1. The edges are lexicographically sorted according to their incident vertices. See for example how the edges are indexed in Fig. 1.\n\u2022 Step 2. Each individual of the population are then represented by a binary chain of length |E| where each component corresponds to an edge. The corresponding allele is either 0 for an intra-cluster (the two extremities of the edge are in the same cluster) or 1 for an inter-cluster edge (the extremities are in different clusters).\nIn the example of figure 1, the intra-cluster edges e1 = {v1, v2}, e6 = {v3, v4}, e8 = {v4, v5} form the first and the second cluster of the partition, the third cluster is formed only by v6. The rest of edges are inter-clusters and the sum of their weights gives the cut size of the partition."
        },
        {
            "heading": "5. Edge set reduction",
            "text": "The EE representation proposed in [2] uses the overall set of edges to represent solutions. Unfortunately, this definition may hinder the performance of the GA, especially for dense graph instances, that is, when there is a considerable number of edges. In fact, the representation of a partition using this encoding scheme does not need to use the entire set of edges, but only a subset that yields a partial graph. For this purpose, we consider a threshold T on the edge weights to be considered for the construction of the solutions. Every edge whose weight is lesser that T will not take part of the\nrepresentation. Then, by varying T , we can analyse the impact on the GA performance to find the most suitable threshold. To make thigs more clear, let us take for example the graph instance of figure 2.a. Applying different threshold values yields the graphs of figure 2.d to j.\nThe weight thresholding technique removes all the edges with a value that is lower than or equal to the threshold. However, if the removal of an edge\naffects the graph connectivity, the edge is kept back. The following algorithm describes the edge reduction procedure.\n\u2022 Step1: Delete all the edges whose weight is lower than or equal to the threshold.\n\u2022 Step2: Check the connectivity of the graph resulting from Step 1. If it is not connected, restore the removed edge with the greatest weight. An edge is restored only if the number of connected components decreases. This process is repeated until the graph becomes connected.\nIn figure 2, dashed lines represent edges with weights lower than or equal to the threshold that have been restored because their removal disconnected the graph."
        },
        {
            "heading": "6. Results and analysis",
            "text": "In order to perform a fast analysis, we have used the same parameters when applying the GA to all the graph instances. Table 1 summarizes the associated values and descriptions.\nTo measure the performances of the GA, we have used three metrics. The first one is the Average Best Fitness over thirty runs (ABF), used to evaluate the efficiency of the GA. The Number of the Visited Solutions (NVS) metric is used to estimate the effort made by the algorithm to reach its best solution. The speed of the AG is measured using the Mean Best Run Time (MRT). Among the benchmarks we used in our experiments, we have chosen three\ninstances to show the impact of our approach on the performances of the EE GA. Table 2 illustrates the features of the benchmarks.\nThe results of our experiments confirm the impact of the edge set modification on both GA effectiveness (solution quality) and efficiency (algorithm speed). However, there is no straightforward formula that determines the exact number of the removed edges since taking away a large amount of edges hinders the efficiency of the GA too. Indeed, the behavior of the GA changes from an instance to another. In fact, removing certain edges can make the edge EE encoding incapable to represent some solutions of the search space. This situation becomes more critical if the encoding scheme cannot represent optimal solutions [2, 1]. For example, the optimal solution for the graph of figure 6 cannot be encoded with the EE representation for a threshold equal to 4.\nOn the other hand, increasing the threshold does not always mean decreasing the number of edges in the graph. For example, if we set the threshold to 4, we get the same graph, because removing the edge v3, v4 disconnects the graph. Therefore, the performances of the GA using the EE representation are boosted for a compromise threshold for which the GA reaches its peak in terms of efficiency. Nevertheless, the value of this threshold seems not to be only linked to the number of edges. The experimental results show that not only the number of edges but their weights influences the definition of the sought threshold. This can be confirmed by Fig. 5. Indeed, for a threshold equal to 10 the GA reaches its best score in terms of ABF, whereas for a very small number of edges the GA gives a poor performance."
        },
        {
            "heading": "7. Conclusion",
            "text": "In this work we propose an enhancement for the edge- encoding representation in the genetic algorithm to solve the graph partitioning problem, for graphs with quite dissimilar edge weights. In order to enhance the efficiency of the GA, a threshold value enables to reduce the number of edges to be considered in representing the solutions. By using different threshold values, the experimental results show that the GA efficiency is not only governed by the number of edges, but also by how\ntheir weights are spread throughout the graph. Further experimental investigations are needed to directly estimate the compromise threshold value based on the edge-weight underneath structure of the input graph. For future work, we are interested by investigating how the thresholding approach impacts the dynamic version of the graph partitioning problem."
        }
    ],
    "title": "Edge-set reduction to efficiently solve the graph partitioning problem with the genetic algorithm",
    "year": 2023
}