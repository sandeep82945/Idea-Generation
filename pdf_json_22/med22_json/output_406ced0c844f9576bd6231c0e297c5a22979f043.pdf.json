{
    "abstractText": "Background: Breast cancer is a multifactorial disease, genetic and environmental factors will affect its incidence probability. Breast cancer metastasis is one of the main cause of breast cancer related deaths reported by the American Cancer Society (ACS). Method: the iMedBot is a web application that we developed using the python Flask web framework and deployed on Amazon Web Services. It contains a frontend and a backend. The backend is supported by a python program we developed using the python Keras and scikit-learn packages, which can be used to learn deep feedforward neural network (DFNN) models. Result: the iMedBot can provide two main services: 1. it can predict 5-, 10-, or 15-year breast cancer metastasis based on a set of clinical information provided by a user. The prediction is done by using a set of DFNN models that were pretrained, and 2. It can train DFNN models for a user using user-provided dataset. The model trained will be evaluated using AUC and both the AUC value and the AUC ROC curve will be provided. Conclusion: The iMedBot web application provides a user-friendly interface for useragent interaction in conducting personalized prediction and model training. It is an initial attempt to convert results of deep learning research into an online tool that may stir further research interests in this direction.",
    "authors": [
        {
            "affiliations": [],
            "name": "Chuhan Xu"
        },
        {
            "affiliations": [],
            "name": "Xia Jiang"
        }
    ],
    "id": "SP:b24d792dec1cba4a17bd332bb5af7b326093b90b",
    "references": [
        {
            "authors": [
                "X. Jiang",
                "A. Wells",
                "A. Brufsky",
                "D. Shetty",
                "K. Shajihan",
                "R.E. Neapolitan"
            ],
            "title": "Leveraging Bayesian networks and information theory to learn risk factors for breast cancer metastasis",
            "venue": "BMC Bioinformatics, vol. 21, no. 1, pp. 1\u201317, Jul. 2020, doi: 10.1186/S12859-020-03638- 8/FIGURES/5.",
            "year": 2020
        },
        {
            "authors": [
                "X. Jiang",
                "A. Wells",
                "A. Brufsky",
                "R. Neapolitan"
            ],
            "title": "A clinical decision support system learned from data to personalize treatment recommendations towards preventing breast cancer metastasis",
            "venue": "PLoS One, vol. 14, no. 3, p. e0213292, Mar. 2019, doi: 10.1371/JOURNAL.PONE.0213292.",
            "year": 2019
        },
        {
            "authors": [
                "X. Jiang",
                "C. Xu"
            ],
            "title": "Improving Clinical Prediction of Later Occurrence of Breast Cancer Metastasis Using Deep Learning and Machine Learning with Grid Search",
            "venue": "Jun. 2022, doi: 10.20944/PREPRINTS202206.0394.V1.",
            "year": 2022
        },
        {
            "authors": [
                "Z.H. Hoo",
                "J. Candlish",
                "D. Teare"
            ],
            "title": "What is an ROC curve",
            "venue": "Emergency Medicine Journal, vol. 34, no. 6, pp. 357\u2013359, Jun. 2017, doi: 10.1136/EMERMED-2017-206735.",
            "year": 2017
        },
        {
            "authors": [
                "X. Mo",
                "S. Cho",
                "X. Jiang"
            ],
            "title": "Improve Ubiquitination-site Prediction Using Physicochemical Properties and Machine Learning with Grid Search",
            "venue": "Jun. 2022, doi: 10.20944/PREPRINTS202206.0397.V1.",
            "year": 2022
        },
        {
            "authors": [
                "C. Xu",
                "P. Coen-Pirani",
                "X. Jiang"
            ],
            "title": "Empirical Study of Overfitting in Deep FNN Prediction Models for Breast Cancer Metastasis",
            "venue": "Aug. 2022, doi: 10.48550/arxiv.2208.02150.",
            "year": 2022
        },
        {
            "authors": [
                "J. Moolayil"
            ],
            "title": "An Introduction to Deep Learning and Keras",
            "venue": "Learn Keras for Deep Neural Networks, pp. 1\u201316, 2019, doi: 10.1007/978-1-4842-4240-7_1.",
            "year": 2019
        },
        {
            "authors": [
                "J.D. Blischak",
                "E.R. Davenport",
                "G. Wilson"
            ],
            "title": "A Quick Introduction to Version Control with Git and GitHub",
            "venue": "PLoS Comput Biol, vol. 12, no. 1, p. e1004668, 2016, doi: 10.1371/JOURNAL.PCBI.1004668.",
            "year": 2016
        },
        {
            "authors": [
                "P. Dalbhanjan"
            ],
            "title": "Overview of Deployment Options on AWS",
            "venue": "2015.",
            "year": 2015
        },
        {
            "authors": [
                "J. Huang",
                "C.X. Ling"
            ],
            "title": "Using AUC and accuracy in evaluating learning algorithms",
            "venue": "IEEE Trans Knowl Data Eng, vol. 17, no. 3, pp. 299\u2013310, Mar. 2005, doi: 10.1109/TKDE.2005.50.",
            "year": 2005
        },
        {
            "authors": [
                "A. Chandra Sekhar",
                "R. Praveen Sam"
            ],
            "title": "A WALK THROUGH OF AWS (AMAZON WEB SERVICES)",
            "venue": "International Research Journal of Engineering and Technology, 2015.",
            "year": 2015
        },
        {
            "authors": [
                "E.M. Malta",
                "S. Avila",
                "E. Borin"
            ],
            "title": "Exploring the Cost-benefit of AWS EC2 GPU Instances for Deep Learning Applications",
            "venue": "Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing, doi: 10.1145/3344341.",
            "year": 1145
        },
        {
            "authors": [
                "M. Brantner",
                "D. Florescu",
                "D. Graf",
                "D. Kossmann",
                "T. Kraska"
            ],
            "title": "Building a database on S3",
            "venue": "Proceedings of the ACM SIGMOD International Conference on Management of Data, pp. 251\u2013 263, 2008, doi: 10.1145/1376616.1376645.",
            "year": 2008
        }
    ],
    "sections": [
        {
            "text": "Background: Breast cancer is a multifactorial disease, genetic and environmental factors will affect its incidence probability. Breast cancer metastasis is one of the main cause of breast cancer related deaths reported by the American Cancer Society (ACS). Method: the iMedBot is a web application that we developed using the python Flask web framework and deployed on Amazon Web Services. It contains a frontend and a backend. The backend is supported by a python program we developed using the python Keras and scikit-learn packages, which can be used to learn deep feedforward neural network (DFNN) models. Result: the iMedBot can provide two main services: 1. it can predict 5-, 10-, or 15-year breast cancer metastasis based on a set of clinical information provided by a user. The prediction is done by using a set of DFNN models that were pretrained, and 2. It can train DFNN models for a user using user-provided dataset. The model trained will be evaluated using AUC and both the AUC value and the AUC ROC curve will be provided. Conclusion: The iMedBot web application provides a user-friendly interface for useragent interaction in conducting personalized prediction and model training. It is an initial attempt to convert results of deep learning research into an online tool that may stir further research interests in this direction.\nKeywords: Deep learning, Breast Cancer, Web application, Model training."
        },
        {
            "heading": "1. Introduction",
            "text": "This paper focuses on an introduction of the iMedBot \u2013 A web-based Intelligent Agent, which was initially developed as an user friendly and interactive online agent for predicting n-year breast cancer metastasis. The use of the current version of iMedBot is limited to the research community for the purpose of boosting the deployment and dissemination of research results concerning deep learning, machine learning, and other methods of artificial intelligence (AI), further stirring research interests in AI in medicine, and setting an example of a web-based intelligent agent that can assist medical activities such as prognosis and decision support. As shown in Figure 1, the iMedBot is a full-stack web application that consists of both a\nfront end a back end. The back end contains the model training service module, the model prediction\nservice model, the serialized model object, and the KerasClassifier module. The later two S3 isare the supporting hardware components developed by using the resources provided by the Amazon web services (AWS). The current core services provided by the back end include 1) Model training service; and 2) personalized prediction of 5-, 10-, and 15-year breast cancer metastasis. The front end of the iMedBot consists of the client, the domain name server (DNS), and a load Balancer. The route53, ELB, EC2later two are also developed usiAWS services resources to support the main functions of the front end. The client module provides the agent-user interface, which supports the agent-user interaction by a set of \u201cconversation\u201d windows. The main window hosts the sequence of dialogues once the \u201cconversation\u201d between the again and user begins.\nFigure 1. The system structure of the iMedBot.\nClient Load Balancer (AWS ELB) DNS (AWS route53) Web Server (AWS EC2) Model Training Service Model Prediction Service KerasClassifier Module (AWS S3) Serialized Model Object (AWS S3) The System Structure of iMedBot FrontEnd BackEnd"
        },
        {
            "heading": "2. The Backend Services",
            "text": "The model training service is provided by our python deep feedforward neural network (DFNN) programs [1], [2], which were developed by using the Keras python package [3]. We included this service in the iMedBot because we assume there are scenarios in which the users prefer training prediction models using their own data. When a model training service call is initialized in the front end and passed to the back end, the dataset provided by the user will be split in stratified manner: 80% of the data will be used to train models following the 5-fold cross validation strategies and 20% of the data will be used as the validation dataset. The validation AUC is one of the output of the model training service, which will be displayed by the [4].which will be generated by testing the best output model of a grid search using the validation dataset. Grid search is a systematic way of conduct hyperparameter tuning to identify the best performing models in deep learning [3]. Our DFNN models have 13 hyperparameters. We call one particular value assignment of the set of hyperparameters of our DFNN models a hyperparameter setting. So each DFNN model has a unique hyperparameter setting. Before a grid search, each of the hyperparameters is given a range of values the hyperparameter can take. Grid search will train all DFNN models corresponding to all possible hyperparameter settings determined by the preselected ranges of values for the hyperparameters. The results returned by the model training service include the validation AUC, the ROC curve plot [4], and the best prediction model found by grid search.\nThe prediction service is provided by a set of deep feedforward neural network (DFNN) models\nthat were pretrained with our DFNN programs [3] by Grid search strategy.[3] Grid search will train all DFNN models corresponding to all possible hyperparameter settings determined by the preselected ranges of values for the hyperparameters. The same procedures used in model training service were used for pretraining these models. The difference between these two kinds of services is that the model training service is meant to train models using user-provided datasets, while the pretrained DFNN models were trained using the LSM 5-, 10-, 15-year datasets that are publicly available [3], [5]. The pretrained DFNN models are the best performing models selected from a large set of models trained via grid search. A detailed description of the DFNN model training, grid search, and model evaluation is provided in [3], [6]. The pretrained DFNN models contain a set of predictors [3], which are the clinical features defined by the datasets from which these models were trained; These models can be used to conduct personalized prediction once the patient-specific values of the predictors are received.\nIn addition to the two core services, the back end contains other python tools that we developed for\ntasks such as processing input data, analyzing results, and evaluating the prediction performance of models. These tools provide some of the assistant services such as generating the ROC curves based on the 5-fold cross validation to compare the prediction performance of different models [3]. The iMedBot is currently hosted at the AWS (Amazon Web Services), and therefore there are other supporting system components in the backend, which are provided by AWS S3."
        },
        {
            "heading": "3. The Front End",
            "text": "The front end of the iMedBot has a main user friendly agent-user interaction window, which hosts the sequence of dialogues once the \u201cconversion\u201d between the again and user begins. The possible dialogues are designed based on the current two core back end services that the iMedBot can provide: the prediction and model training. For example, to provide the personalized prediction service, the iMedBot will initialize a sequence of dialogues to go through with the user the set of the predictors of the back end DFNN models one after another. For each of the predictors, the iMedBot will provide to the user a list of all possible values of the predictor, from which ana user can select his/her patient specific value with an action as simple as clicking a button. Once the iMedBot receives the user input/responses, it will communicate with the proper back end components, pass over the user input collected through the \u201cconversation\u201d to the best model object that we deployed in our S3 bucket in the backend, and then receive and display the results from the back end. Figure 2, 3 show two examples of these agent-user interaction dialogues. The first example shows the\ndialogue with which the iMedBot prompts a user to enter (select) the specific value of the user\u2019s patient for a predictor called DCIS_ level(type of ductal carcinoma in situ), when the prediction service is called by\nthe user. Towards the end of the prediction service call, the iMedBot will ask the users to do a simple survey about their experience with the prediction service call.\nTo provide the model training\nservice, the iMedBot will initialize the dialogues for user dataset upload, conduct error checking of the dataset, and allow the user to review the dataset once it is uploaded. The iMedBot also prompt a user to enter their preferred hyperparameter settings that can be tuned via grid search to improve the prediction performance of the output models. The next step is to set the hyperparameters for the deep learning model including learning rate, epochs, batchsize and so on, we also provide default settings. Once users finish uploading dataset and hyperparameter setting assignment, the\nbackend model training service will be called. The output of the service call, currently including the validation AUC, a ROC curve plot, and the prediction model will be returned to the frontend and displayed in a dialogue. Then, the current model training service call ends, and the iMedBot will prompt the user for more actions that the user can take2. The second example in Figure 3 shows one of the output display dialog towards the end of a model training service call, in which the iMedBot presents to the user the validation AUC and ROC curve for the model trained using the user provided data, when the model training service is called by the user. The usage case flow charts for both the prediction and model training service calls in the front end are shown in Figure 4 below."
        },
        {
            "heading": "4. The main software development and storage tools/services",
            "text": "Flask is a lightweight customizable framework written in Python [7]. The reason we chose Flask as our main framework is because we also used the Keras python package [8] to develop our DFNN programs, and the consistency of the language can help to reduce errors and make development and deployment more compatible. We mainly used HTML, CSS, JavaScript for front-end development and python for the backend. For the model prediction part, we applied model serialization technology to save our model to h5\n3. Example of user friendly agent-user interaction dialogue for prediction service.\nformat [9]. Github [10] provides free storage and version control services of our software. Our local development work is pushed to github [10] on daily basis, and any update of the work will be deployed automatically via a pipeline to the AWS platform provided by the paid Elastic Beanstalk Service [11]. The\npipeline is also provided by a paid AWS service called [12]. As previously described our FDNN programs and other service tools are mainly developed in python using exiting python packages such as the Keras python package provided in scikit-learn [13] and the matplotlib package [14] for generating figures."
        },
        {
            "heading": "5. The main supporting hardware components",
            "text": "Figure 1 also illustrates the main supporting hardware components of the iMedBot , provided by AWS. The four main components include DNS, Load Balancer, Web Server, and model objects. AWS Route53 is a scalable and highly available Domain Name System service (DNS) which provides simple and short URL to help our clients easily get access to the iMedBot web application [15]. AWS Load Balancer is used to automatically distributes clients\u2019 incoming traffic across multiple targets to decrease the risk of break down when a lot of users access the iMedBot on the same time. The important component is AWS EC2 where we put our source code in, EC2 is the AWS computing service, which offers computing capacity on demand [16]. Because the iMedBot needs to support the deep learning model training service which requires the EC2 instance has the powerful ability of CPU and memory, we changed our EC2 instance to medium type. The trained model will be saved into AWS S3 bucket, for the model prediction service, the model will be the best model based on breast cancer LSM dataset trained by ourselves. For the model training service, the model trained by users will be saveds as serialized model object, both of these two kinds of model will be stored in AWS S3 bucket [17]."
        },
        {
            "heading": "6. Limitations",
            "text": "The reason we used Keras module is that all the data in the LSM (LSDS for Metastasis) dataset are category data [17]. According to the grid search experiment results, the current validation AUC of the best model is 84.3% according to our grid search experiment results, but we are continue doing more experiments now to further improve the model accuracy in the future. We have strict limitation of the dataset size which requires that the user can\u2019t uploaded dataset whose size is more than 500kb, because we need to make sure our current AWS EC2 instance can support the training computing work, and the dataset must be category dataset, maybe we can deploy more training methods in the backend in addition to only supporting one KerasClassifier module."
        },
        {
            "heading": "7. Conclusion",
            "text": "So far, the iMedBot application can be accessed by using URL http://iMedBot.odpac.net/. The iMedBot web application provides a user-friendly interface for user-agent interaction in conducting personalized prediction and model training. It is an initial attempt to convert results of deep learning research into an online tool that may stir further research interests in this direction. We plan on further expanding the backend of iMedBot to include other services such as risk factor learning (both single and interactive), causing learning, and clinical decision support.\nAuthors\u2019 Contribution: All authors contributed to the preparation and revision of the manuscript.\nFunding: Research reported in this paper was supported by the U.S. Department of Defense through the Breast Cancer Research Program under Award No. W81XWH1910495 (to XJ). Other than supplying funds, the funding agencies played no role in the research.\nEthics approval and consent to participate: Not applicable.\nConflicts of Interest: The authors declare no conflict of interest.\nReference\n[1] X. Jiang, A. Wells, A. Brufsky, D. Shetty, K. Shajihan, and R. E. Neapolitan, \u201cLeveraging\nBayesian networks and information theory to learn risk factors for breast cancer metastasis,\u201d BMC Bioinformatics, vol. 21, no. 1, pp. 1\u201317, Jul. 2020, doi: 10.1186/S12859-020-036388/FIGURES/5.\n[2] X. Jiang, A. Wells, A. Brufsky, and R. Neapolitan, \u201cA clinical decision support system learned\nfrom data to personalize treatment recommendations towards preventing breast cancer metastasis,\u201d\nPLoS One, vol. 14, no. 3, p. e0213292, Mar. 2019, doi: 10.1371/JOURNAL.PONE.0213292. [3] X. Jiang and C. Xu, \u201cImproving Clinical Prediction of Later Occurrence of Breast Cancer\nMetastasis Using Deep Learning and Machine Learning with Grid Search,\u201d Jun. 2022, doi: 10.20944/PREPRINTS202206.0394.V1.\n[4] Z. H. Hoo, J. Candlish, and D. Teare, \u201cWhat is an ROC curve?,\u201d Emergency Medicine Journal,\nvol. 34, no. 6, pp. 357\u2013359, Jun. 2017, doi: 10.1136/EMERMED-2017-206735.\n[5] X. Mo, S. Cho, and X. Jiang, \u201cImprove Ubiquitination-site Prediction Using Physicochemical\nProperties and Machine Learning with Grid Search,\u201d Jun. 2022, doi: 10.20944/PREPRINTS202206.0397.V1.\n[6] C. Xu, P. Coen-Pirani, and X. Jiang, \u201cEmpirical Study of Overfitting in Deep FNN Prediction\nModels for Breast Cancer Metastasis,\u201d Aug. 2022, doi: 10.48550/arxiv.2208.02150.\n[7] M. Grinberg, \u201cFlask web development\u202f: developing web applications with Python\u201d.\n[8] J. Moolayil, \u201cAn Introduction to Deep Learning and Keras,\u201d Learn Keras for Deep Neural Networks, pp. 1\u201316, 2019, doi: 10.1007/978-1-4842-4240-7_1. [9] \u201cDeep Learning With Python - Google Books.\u201d\nhttps://www.google.com/books/edition/Deep_Learning_With_Python/KipDwAAQBAJ?hl=en&gbpv=1&dq=model+serialization+h5&pg=PP1&printsec=frontcover (accessed Sep. 01, 2022).\n[10] J. D. Blischak, E. R. Davenport, and G. Wilson, \u201cA Quick Introduction to Version Control with\nGit and GitHub,\u201d PLoS Comput Biol, vol. 12, no. 1, p. e1004668, 2016, doi: 10.1371/JOURNAL.PCBI.1004668.\n[11] P. Dalbhanjan, \u201cOverview of Deployment Options on AWS,\u201d 2015. [12] Y. Raheja, N. Felsen, and G. Borgese, \u201cEffective DevOps with AWS\u202f: implement continuous\ndelivery and integration in the AWS environment\u201d.\n[13] J. Brownlee, \u201cHow to Grid Search Hyperparameters for Deep Learning Models in Python With\nKeras\u201d.\n[14] J. Huang and C. X. Ling, \u201cUsing AUC and accuracy in evaluating learning algorithms,\u201d IEEE\nTrans Knowl Data Eng, vol. 17, no. 3, pp. 299\u2013310, Mar. 2005, doi: 10.1109/TKDE.2005.50.\n[15] A. Chandra Sekhar and R. Praveen Sam, \u201cA WALK THROUGH OF AWS (AMAZON WEB SERVICES),\u201d International Research Journal of Engineering and Technology, 2015. [16] E. M. Malta, S. Avila, and E. Borin, \u201cExploring the Cost-benefit of AWS EC2 GPU Instances for\nDeep Learning Applications,\u201d Proceedings of the 12th IEEE/ACM International Conference on\nUtility and Cloud Computing, doi: 10.1145/3344341. [17] M. Brantner, D. Florescu, D. Graf, D. Kossmann, and T. Kraska, \u201cBuilding a database on S3,\u201d\nProceedings of the ACM SIGMOD International Conference on Management of Data, pp. 251\u2013 263, 2008, doi: 10.1145/1376616.1376645."
        }
    ],
    "title": "iMedBot: A Web-based Intelligent Agent for Healthcare Related Prediction and Deep Learning",
    "year": 2022
}