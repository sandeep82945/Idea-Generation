{
    "abstractText": "Sudoku is a complicated multidimensional mathematical structure with several applications in various computer science domains. 3D Sudoku, compared to 2D, has one more dimension that can potentially provide an extra edge to the different applications of this puzzle game. Various researchers have developed various types of 2D Sudoku solver using different methodologies. But there is very limited research in the area of developing 3D Sudoku solver. We have proposed two different solvers for solving 3D Sudoku puzzles of size 9\u00d79\u00d79. Both the solvers providing all possible solutions for a 3D Sudoku instance. 2D Sudoku puzzles are applied in different research domains with different purposes. Recently 3D structure of Sudoku is also applying in several areas to achieve more effectiveness compared to 2D Sudoku. As well as it can also be used to solve problem in 3D space. Again, solving an NP-complete puzzle by considering its 3D structure is a challenging job. Thus, we have endeavoured to achieve all possible solutions for a 3D Sudoku instance in this work. In the first version of our proposed algorithm all probable values for each blank cell have been computed and stored. Subsequently, few elimination-based methods have been used to reduce the number of probable values (if possible) for each blank cell. Finally, the solutions have been computed using the backtracking method. In the second version of our proposed algorithm, the nine 2D Sudoku puzzles lying in the xz-plane one above the other, which form the 3D puzzle, have been fed as the input. All possible solutions have been obtained for each of the nine puzzles. Then, the obtained solutions have been mapped to achieve one or more solutions for the 3D Sudoku instance. Thus, our proposed techniques provide a new approach for solving 3D Sudoku. In addition, applying the obtained solutions provides us with an advantage over 2D Sudoku, in solving problem of 3D space and where more data is required. INDEX TERMS Backtracking, Cell, Grid, Minigrid, Minicube, Puzzle, Sudoku.",
    "authors": [
        {
            "affiliations": [],
            "name": "SUNANDA JANA"
        },
        {
            "affiliations": [],
            "name": "MANJARINI MALLIK"
        },
        {
            "affiliations": [],
            "name": "ABHINANDAN KHAN"
        }
    ],
    "id": "SP:1edf4308d586321ab36be13fd8da57b5bd6d8e73",
    "references": [
        {
            "authors": [
                "S. Jana",
                "N. Dutta",
                "A.K. Maji"
            ],
            "title": "and R",
            "venue": "K. Pal, \u201cA novel time-stamp-based audio encryption scheme using sudoku puzzle,\u201d in Proceedings of International Conference on Frontiers in Computing and Systems. Springer",
            "year": 2023
        },
        {
            "authors": [
                "S. Jana",
                "M. Mallik",
                "A.K. Maji"
            ],
            "title": "and R",
            "venue": "K. Pal, \u201cA novel search treebased 3d sudoku solver,\u201d in Proceedings of the International Conference on Computing and Communication Systems. Springer",
            "year": 2021
        },
        {
            "authors": [
                "N. Ikeo",
                "H. Fukuda",
                "A. Matsugaki",
                "T. Inoue",
                "A. Serizawa",
                "T. Matsuzaka",
                "T. Ishimoto",
                "R. Ozasa",
                "O. Gokcekaya"
            ],
            "title": "and T",
            "venue": "Nakano, \u201c3d puzzle in cube pattern for anisotropic/isotropic mechanical control of structure fabricated by metal additive manufacturing,\u201d Crystals, vol. 11, no. 8, p. 959",
            "year": 2021
        },
        {
            "authors": [
                "N. Capece",
                "U. Erra",
                "M. Gruosso"
            ],
            "title": "and M",
            "venue": "Anastasio, \u201cArchaeo Puzzle: An Educational Game Using Natural User Interface for Historical Artifacts,\u201d in Eurographics Workshop on Graphics and Cultural Heritage, M. Spagnuolo and F. J. Melero, Eds. The Eurographics Association",
            "year": 2020
        },
        {
            "authors": [
                "B. Xia",
                "A. Wang",
                "C.-C. Chang"
            ],
            "title": "and L",
            "venue": "Liu, \u201cAn image steganography scheme using 3d-sudoku.\u201d J. Inf. Hiding Multim. Signal Process., vol. 7, no. 4, pp. 836\u2013845",
            "year": 2016
        },
        {
            "authors": [
                "A.K. Maji",
                "R.K. Pal"
            ],
            "title": "Sudoku solver using minigrid based backtracking,",
            "venue": "IEEE International Advance Computing Conference (IACC). IEEE,",
            "year": 2014
        },
        {
            "authors": [
                "A.K. Maji",
                "S. Jana"
            ],
            "title": "and R",
            "venue": "K. Pal, \u201cA comprehensive sudoku instance generator,\u201d in Advanced Computing and Systems for Security. Springer",
            "year": 2016
        },
        {
            "authors": [
                "T. Yato",
                "T. Seta"
            ],
            "title": "Complexity and completeness of finding another solution and its application to puzzles,",
            "venue": "IEICE transactions on fundamentals of electronics, communications and computer sciences,",
            "year": 2003
        },
        {
            "authors": [
                "G. McGuire",
                "B. Tugemann"
            ],
            "title": "and G",
            "venue": "Civario, \u201cThere is no 16-clue sudoku: Solving the sudoku minimum number of clues problem via hitting set enumeration,\u201d Experimental Mathematics, vol. 23, no. 2, pp. 190\u2013217",
            "year": 2014
        },
        {
            "authors": [
                "R. Lewis"
            ],
            "title": "Metaheuristics can solve sudoku puzzles,",
            "venue": "Journal of heuristics,",
            "year": 2007
        },
        {
            "authors": [
                "J.A. Pacurib",
                "G.M.M. Seno"
            ],
            "title": "and J",
            "venue": "P. T. Yusiong, \u201cSolving sudoku puzzles using improved artificial bee colony algorithm,\u201d in 2009 fourth international conference on innovative computing, information and control (ICICIC). IEEE",
            "year": 2009
        },
        {
            "authors": [
                "D. Weyland"
            ],
            "title": "A critical analysis of the harmony search algorithm\u2014how not to solve sudoku,",
            "venue": "Operations Research Perspectives,",
            "year": 2015
        },
        {
            "authors": [
                "K.G. Singh"
            ],
            "title": "Deep, \u201cA new membrane algorithm using the rules of particle swarm optimization incorporated within the framework of cell-like p-systems to solve sudoku,",
            "venue": "Applied Soft Computing,",
            "year": 2016
        },
        {
            "authors": [
                "K.A. Assad"
            ],
            "title": "Deep, \u201cHarmony search based memetic algorithms for solving sudoku,",
            "venue": "International Journal of System Assurance Engineering and Management,",
            "year": 2018
        },
        {
            "authors": [
                "R. Soto",
                "B. Crawford",
                "C. Galleguillos",
                "E. Monfroy"
            ],
            "title": "and F",
            "venue": "Paredes, \u201cA hybrid ac3-tabu search algorithm for solving sudoku puzzles,\u201d Expert Systems with Applications, vol. 40, no. 15, pp. 5817\u20135821",
            "year": 2013
        },
        {
            "authors": [
                "T. Mantere",
                "J. Koljonen"
            ],
            "title": "Solving",
            "venue": "rating and generating sudoku puzzles with ga,\u201d in 2007 IEEE congress on evolutionary computation. IEEE",
            "year": 2007
        },
        {
            "authors": [
                "S. Jana",
                "A. Dey",
                "A.K. Maji"
            ],
            "title": "and R",
            "venue": "K. Pal, \u201cA novel hybrid genetic algorithm-based firefly mating algorithm for solving sudoku,\u201d Innovations in Systems and Software Engineering, vol. 17, no. 3, pp. 261\u2013275",
            "year": 2021
        },
        {
            "authors": [
                "H. Okagbue",
                "Z. Omogbadegun",
                "F. Olajide"
            ],
            "title": "and A",
            "venue": "Opanuga, \u201cOn some suggested applications of sudoku in information systems security,\u201d Asian J Inform Technol, vol. 14, no. 4, pp. 117\u2013121",
            "year": 2015
        },
        {
            "authors": [
                "A.K. Maji",
                "R.K. Pal"
            ],
            "title": "and S",
            "venue": "Roy, \u201cA novel steganographic scheme using sudoku,\u201d in 2013 International Conference on Electrical Information and Communication Technology (EICT). IEEE",
            "year": 2014
        },
        {
            "authors": [
                "M.H. Shirali-Shahreza",
                "M. Shirali-Shahreza"
            ],
            "title": "Steganography in sms by sudoku puzzle,",
            "venue": "IEEE/ACS International Conference on Computer Systems and Applications. IEEE,",
            "year": 2008
        },
        {
            "authors": [
                "W.-C. Wu",
                "G.-R. Ren"
            ],
            "title": "A new approach to image authentication using chaotic map and sudoku puzzle,",
            "venue": "Fifth International Conference on Intelligent Information Hiding and Multimedia Signal Processing",
            "year": 2009
        },
        {
            "authors": [
                "A.K. Maji",
                "R.K. Pal"
            ],
            "title": "A novel biometric template encryption scheme using sudoku puzzle,",
            "venue": "Applied Computation and Security Systems. Springer,",
            "year": 2015
        },
        {
            "authors": [
                "P.M. Naini",
                "S.M. Fakhraie"
            ],
            "title": "and A",
            "venue": "N. Avanaki, \u201cSudoku bit arrangement for combined demosaicking and watermarking in digital camera,\u201d in 2010 Second International Conference on Advances in Databases, Knowledge, and Data Applications. IEEE",
            "year": 2010
        },
        {
            "authors": [
                "M. Yang",
                "N. Bourbakis"
            ],
            "title": "and S",
            "venue": "Li, \u201cData-image-video encryption,\u201d IEEE potentials, vol. 23, no. 3, pp. 28\u201334",
            "year": 2004
        },
        {
            "authors": [
                "Y. Erlich",
                "K. Chang",
                "A. Gordon",
                "R. Ronen",
                "O. Navon",
                "M. Rooks"
            ],
            "title": "and G",
            "venue": "J. Hannon, \u201cDna sudoku\u2014harnessing high-throughput sequencing for multiplexed specimen analysis,\u201d Genome research, vol. 19, no. 7, pp. 1243\u20131253",
            "year": 2009
        },
        {
            "authors": [
                "C.-C. Chang",
                "P.-Y. Lin",
                "Z.-H. Wang"
            ],
            "title": "and M",
            "venue": "Li, \u201cA sudoku-based secret image sharing scheme with reversibility,\u201d J. Commun., vol. 5, no. 1, pp. 5\u201312",
            "year": 2010
        },
        {
            "authors": [
                "R. Lewis"
            ],
            "title": "A guide to graph colouring,",
            "year": 2015
        },
        {
            "authors": [
                "J.F. Franco",
                "O.G. Carmona"
            ],
            "title": "and R",
            "venue": "A. Gallego, \u201cAplicaci\u00f3n de t\u00e9cnicas de optimizaci\u00f3n combinatorial a la soluci\u00f3n del sudoku,\u201d Scientia et technica, vol. 13, no. 37, pp. 151\u2013156",
            "year": 2007
        },
        {
            "authors": [
                "A.M. Herzberg",
                "M.R. Murty"
            ],
            "title": "Sudoku squares and chromatic polynomials,",
            "venue": "Notices of the AMS,",
            "year": 2007
        },
        {
            "authors": [
                "G.-C. Lau",
                "J.M. Jeyaseeli",
                "W.-C. Shiu"
            ],
            "title": "and S",
            "venue": "Arumugam, \u201cSudoku number of graphs,\u201d arXiv preprint arXiv:2206.08106",
            "year": 2022
        },
        {
            "authors": [
                "N. Jussien"
            ],
            "title": "A to Z of Sudoku",
            "venue": "ISTE",
            "year": 2007
        }
    ],
    "sections": [
        {
            "text": "INDEX TERMS Backtracking, Cell, Grid, Minigrid, Minicube, Puzzle, Sudoku.\nI. INTRODUCTION SUDOKU puzzle is represented by n \u00d7 n grid (in 2D),where n must be a perfect square integer so that we can get n number of minigrids each of size \u221a n \u00d7 \u221a n. The logic behind solving this puzzle is that each row, column, and minigrid contains integers, 1 to n, without repetition. Some of the possible sizes of Sudoku [1] are: \u2022 4\u00d74 \u2022 9\u00d79, also called standard Sudoku \u2022 16\u00d716, also known as Super Sudoku \u2022 25\u00d725, also known as Giant Sudoku\nApart from these, there are also several other types of Sudoku [2], which are not so familiar, namely three-\ndimensional Sudoku invented by Dion Church was first published in The Daily Telegraph in May 2005 and Wordoku, also known as Godoku, where alphabetical placement is required instead of numerical placement.\nSudoku nowadays not only treated as a puzzle game but it has become popular because of its application in various field. Again, in some application area 3D can perform more efficiently compared to 2D specially for solving 3D related problems. For example, in aircraft scheduling, the challenge is to maximise the number of aeroplanes in a limited 3D space. We can divide the 64 planes into four groups based on speed and place them in four elevations so that their positions do not conflict using a 4\u00d74\u00d74 Sudoku structure.\nVOLUME 4, 2016 1\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nUntil recently, no extensive research work has been done on 3D Sudoku, even though its application can potentially revolutionise different application areas. Various 3D puzzles are being applied in ongoing research, including structural control in metal additive manufacturing [3], historical artefacts [4], image steganography [5] and security. Hence, an increase in the dimension of a Sudoku puzzle may also enhance many research areas.\nA disadvantage of the 2D Sudoku problem is its limited number of elements. The grid size has to be increased for some application domains like encryption of massive data. Hence, in such cases, implementing the compact structure of a 3D Sudoku would prove to be very useful for handling enormous data. Especially in data security, 3D Sudoku solutions are much more effective than 2D Sudoku. Again, solving a 3D Sudoku is challenging. We have proposed two versions of an algorithm that can solve 3D Sudoku in a simple and effective way. Our proposed solver can solve easy, moderate and hard instances of 3D Sudoku in comparatively lesser time and with lower complexity.\nThe rest of the paper is structured in following way. In Section II, we briefly describe preliminaries, which reflect the 2D and 3D structures, and a literature survey on the recent works related to Sudoku puzzle. The physical storage structure of the 3D Sudoku instance is described in Section III. Sections IV and V elaborate our proposed algorithms, i.e., versions 1 and 2, with their respective pseudo code. In Section VI, we present the experimental results and statistical analysis of the proposed algorithms. The paper concludes with Section VII, we discuss the findings of our methods and future work possible in this area.\nII. PRELIMINARIES In this section, we will elaborate basic Sudoku structure of 2D as well as 3D Sudoku.\nA. TWO-DIMENSIONAL SUDOKU The most used Sudoku structure is a two-dimensional or 2D structure. Each Sudoku constraint is applied in each row, column, and minigrid. An example of such a Sudoku puzzle has been shown in Fig. 1, along with its solution.\nThe 2D Sudoku structure can be extended to 16\u00d716, 25\u00d725, etc. Additionally, a 2D Sudoku can be extended by another dimension, resulting in a 3D Sudoku [2]. Adding an extra dimension will lead to a solid cubic structure of n \u00d7 n \u00d7 n elements, where n itself is a perfect square integer."
        },
        {
            "heading": "B. THREE-DIMENSIONAL SUDOKU",
            "text": "Our proposed 3D Sudoku is represented as a solid cubic structure with n\u00d7n\u00d7n elements, where n is a perfect square integer. Let us consider as an example, a 9\u00d79\u00d79 Sudoku. In this case, we need to view nine 2D Sudoku maps, each of grid size 9\u00d79. Each Sudoku puzzle lies in the xz-plane, one above another along the y-direction (as shown in Fig. 2).\nIf all elements in the ith (1 \u2264 i \u2264 9) row of a 3D Sudoku map lying along the xy-plane are combined, a new 2D Sudoku will be obtained along the xy-plane. This new Sudoku is the ith 2D Sudoku along the xy-plane, as shown in Fig. 5. Similarly, if the elements in the ith (1 \u2264 i \u2264 9) column of a 3D Sudoku map, (), lying in the xz-plane, are combined, the ith 2D Sudoku map along the yz-plane will be achieved. Thus, the 3D Sudoku of dimension 9\u00d79\u00d79 contains 33 = 27 2D Sudoku grids. An example solution of a 3D Sudoku of dimension 9\u00d79\u00d79 has been presented in Fig. 2.\nNine grids represent the 2D Sudoku grids lying in the xzplane, one above another (as shown in Fig. 2). Grid 1 is the topmost layer; grid 2 lies below grid 1; grid 3 lies below grid 2; etc. Grid 9 is the layer at the bottom. Each cell [i, j] of each grid has a different value. This is because by combining each [i, j] cell of each grid, a column of another 2D Sudoku is obtained for the third dimension; e.g., cell [2,3] of grids 1 through 9 contains the values 5, 7, 6, 4, 2, 8, 3, 1, 9, respectively (see Fig. 2).\nIt is clear that all nine elements/integers are present, and they form a row in the third dimension. Therefore, there are 27 (3\u00d73\u00d73) minicubes in the 3D Sudoku of dimension: 9\u00d79\u00d79, and each minicube is of dimension: 3\u00d73\u00d73. Consequently, each minicube contains 9 (i.e., 32) 2D minigrids of size 3\u00d73. Each minicube has six neighbouring minicubes, two each, in the x-, y-, and z-directions. The values already placed in the neighbouring minicubes (in their appropriate positions) are considered for computing the value for a blank cell in a minicube. The connectivity graph of 27 minicubes has been presented in Fig. 3. Each minicube is connected with its six neighbouring minicubes by edges. The minicube S1 with its six neighbours have been shown in Fig. 4 to elaborate this connectivity further.\nMoreover, grids 1, 2, and 3 form the three topmost layers lying in the xz-plane (according to Fig. 5), the first minicube S1 can be obtained from the first minigrid (the topmost and leftmost) of these three layers (for the 3D Sudoku solution shown in Fig. 2), as shown in Fig. 6."
        },
        {
            "heading": "C. LITERATURE SURVEY",
            "text": "Nowadays, extensive research work is going on considering Sudoku. However, many current 2D Sudoku solvers are guess-based and hence highly time-consuming. Therefore, a"
        },
        {
            "heading": "2 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n9 2 6 7 1 4 8 5 3 7 8 4 6 5 3 9 2 1 1 5 3 9 2 8 7 6 4 3 6 9 1 4 2 5 7 8 8 4 2 5 7 6 3 1 9 5 7 1 3 8 9 6 4 2 6 9 7 4 3 1 2 8 5 4 3 8 2 6 5 1 9 7 2 1 5 8 9 7 4 3 6\n(a) Grid 1\n3 1 5 8 9 2 4 7 6 6 9 2 4 7 1 3 8 5 4 7 8 3 6 5 1 9 2 1 5 7 9 3 8 2 6 4 9 3 6 2 1 4 8 5 7 2 8 4 6 5 7 9 3 1 5 2 1 7 8 9 6 4 3 7 6 9 1 4 3 5 2 8 8 4 3 5 2 6 7 1 9\n(b) Grid 2\n5 3 1 2 8 9 6 4 7 8 4 7 5 3 6 2 1 9 2 6 9 1 4 7 5 3 8 4 2 8 7 6 5 1 9 3 7 1 5 8 9 3 4 2 6 6 9 3 4 2 1 7 8 5 3 8 4 6 5 2 9 7 1 1 5 2 9 7 8 3 6 4 9 7 6 3 1 4 8 5 2\n(c) Grid 3\n5 8 3 6 7 4 2 9 1 1 3 5 7 4 8 9 6 2 3 5 6 4 1 7 8 2 9 6 2 4 3 9 1 5 8 7 2 4 8 9 6 3 1 7 5 4 1 2 8 3 9 7 5 6 8 7 9 2 5 6 4 1 3 9 6 7 1 2 5 3 4 8 7 9 1 5 8 2 6 3 4\n(d) Grid 4\n7 4 6 9 1 2 8 3 5 9 1 3 8 7 5 2 4 6 8 2 5 3 4 6 9 1 7\n4 8 7 6 2 9 3 5 1 6 3 9 7 8 1 4 8 2 2 5 1 4 8 3 6 7 9\n1 7 4 2 9 8 5 6 3 3 9 8 5 6 7 1 2 4 5 6 2 1 3 4 7 8 9\n(e) Grid 5\n1 2 9 3 5 8 4 6 7 7 5 8 4 6 2 1 3 9 4 6 3 1 7 9 2 5 8\n2 9 6 5 1 3 8 7 4 5 1 7 8 2 4 3 9 6 8 3 4 7 9 6 5 1 2\n9 8 2 6 3 5 7 4 1 6 7 5 2 4 1 9 8 3 3 4 1 9 8 7 6 2 5\n(f) Grid 6\n5 2 8 3 6 4 1 9 7 7 6 4 1 9 2 5 3 8 1 9 3 5 7 8 2 6 4\n6 5 2 4 3 1 7 8 9 4 7 1 2 8 9 6 5 3 3 8 9 6 5 7 4 2 1\n2 1 5 8 4 3 9 7 6 8 4 7 9 2 6 3 1 5 9 3 6 7 1 5 8 4 2\n(g) Grid 7\n4 3 6 8 5 2 7 1 9 2 1 9 4 7 6 8 5 3 8 5 7 3 1 9 4 2 6\n9 7 8 2 6 5 2 6 5 3 6 5 1 4 7 9 2 8 1 4 2 9 3 8 7 6 5\n6 9 7 5 2 1 3 8 4 5 3 1 7 8 4 6 9 2 2 8 4 6 9 3 5 7 1\n(h) Grid 8\n4 3 8 7 6 9 1 5 2 2 6 9 1 5 3 4 7 8 1 5 7 4 2 8 3 6 9\n6 4 3 9 7 1 2 8 5\n3 1 4 8 9 7 5 2 6 8 9 2 5 3 6 7 1 4 5 7 6 2 1 4 8 9 3\n9 2 1 3 8 5 6 4 7 7 8 5 6 4 2 9 3 1\n(i) Grid 9\nFIGURE 2: 2D layers of a 3D Sudoku solution each lying in the xz-plane one above another. Grid 1 is the topmost layer and Grid 9 is the layer at the bottom [2].\nguess free Sudoku solver algorithm was designed in 2014 [6], which guaranteed all possible solutions for a valid 2D Sudoku instance. Thus, it is advantageous in different fields like cryptography, where 2D Sudoku puzzles with more than one solutions are appreciated.\nThere is no well-known existing algorithm for solving 3D Sudoku. Initially, a brute force algorithm using the backtracking method for 3D Sudoku was developed in 2020 [1]. Here, in this work, we have proposed an improve version, compared to that developed by the authors [1], by applying specific methods and implementing a modified and updated interpretation. In addition, we have also proposed a second algorithm for hard Sudoku puzzles that guarantees all possible solutions for a given valid Sudoku instance.\nIt is possible to get more than one solution for a valid\nSudoku instance, and because of this, it is very popular in the field of security. Again, in the case of 3D Sudoku, it has been observed that a more significant number of possible solutions are usually obtained compared to 2D Sudoku. For this reason, the application of 3D Sudoku in the field of security has the potential of adding extra weight. There are no such rules that a Sudoku instance has to have only one solution [7].\nThe ASP-completeness (another solution possible completeness) of the Sudoku problem has been proved by some researchers [8]. According to the authors [9], a minimum of 17 clues is needed to obtain at least one solution for a particular 2D Sudoku instance. However, it is possible to obtain more than one solution when 17 or more clues are given. Different metaheuristic [10] techniques are there to solve sudoku. In 2009, a new approach in solving Sudoku\nVOLUME 4, 2016 3\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\npuzzles was presented by exploring the idea of using the improved artificial bee colony (ABC) algorithm [11] which produced efficient results.\nMethods based on soft computing have been developed to solve computational problems, leading to design solutions for Sudoku puzzles. Weyland et al. [12] presented a critical analysis of the harmony search algorithm for Sudoku. Although the Sudoku solving capability was enhanced with the help of the harmony search algorithm, it tends to get trapped in local minima. Singh et al. [13] have presented a membrane algorithm using particle swarm optimisation rules for solving Sudoku puzzles. The algorithm was attached with mutation operators in cell-like P-systems. The search space was identified and used for solving the Sudoku problem.\nAssad et al. [14] proposed a hybrid method that combined the harmony search and hill climbing algorithms. The authors further modified their harmony search hill climber (HSHC) to create three different versions of the HSHC. The main aim of the authors was to improve HSHC. The authors claimed that one of the modified HSHCs performed better than the other two modified versions, the standard HSHC and GA. The performance was comparable to a hybrid AC3-tabu search algorithm [15].\nGA tends to converge prematurely at local optima [16]. Thus, Jana et al. [17] developed a new hybrid technique where the firefly mating algorithm was embedded with GA. The hybridisation was done primarily to control the premature convergence at local optima. The proposed method required a lesser population and a lower number of generations. The application of 2D Sudoku instances with single or multiple solutions can be observed in many fields, such as artificial intelligence, cryptography: to generate OTP (one time password) [18], steganography [5], [19], SMS encryption [20], [21], biometric template encryption [22], digital watermarking [23], image-video encryption [24], DNA computing [25], visual cryptography [26], image authentication [21], and in many other areas. Extending the Sudoku structure with one more dimension can lead it to a superior application level.\nConsequently, researchers are trying to explore Sudoku by\nconsidering its extra dimension. However, no such exploration has yet been observed as the third dimension makes Sudoku more complex and trickier. Motivated by this research gap, we have developed a 3D Sudoku solver in this work. We are sure that applying it in different fields, where more data is required, can give outstanding performance compared to 2D Sudoku."
        },
        {
            "heading": "D. MATHEMATICAL CHARACTERIZATION OF 3D SUDOKU SOLVING PROBLEM",
            "text": "A Sudoku puzzle is solved based on logical constraints, and mathematical operations or functions are not directly involved in solving a Sudoku puzzle. Still, it poses a variety of interesting mathematical problems. To represent this puzzle using a mathematical concept, researchers have reinterpreted it as the well-known vertex colouring problem [27] of graph theory [28], [29]. The vertex colouring or graph colouring problem has been revisited with a new perspective from the point-of-view of solving a Sudoku puzzle [30]. However, all of these reinterpretations using mathematical concepts have been carried out for 2D Sudoku puzzles. In a similar way, we have reinterpreted the problem of 3D Sudoku in the mathematical context of graph colouring in this work.\nA 9\u00d79\u00d79 3D Sudoku puzzle can be represented as a graph colouring problem. The goal is to build a 9-colouring of a specific graph, with 9 specific given colours. The graph corresponding to a 9\u00d79\u00d79 3D Sudoku has 729 vertices, each representing one unique cell. All the vertices are labelled using an ordered triplet (x, y, z), where x, y, and z are integers within [1, 9]. Here, x, y, and z represent the index numbers of a 3D puzzle in the x-, y-, and z-dimensions, respectively. In the graph, two distinct vertices having labels (x1, y1, z1) and (x2, y2, z2) are connected with an edge, if and only if:\n\u2022 x1 = x2, i.e., same row in the x-dimension, or \u2022 y1 = y2, i.e., same row in the y-dimension, or \u2022 z1 = z2, i.e., same row in the z-dimension, or \u2022 \u2308x13 \u2309 = \u2308 x2 3 \u2309 and \u2308 y1 3 \u2309 = \u2308 y2 3 \u2309, i.e., same 3\u00d73 minigrid\nin dimension 1, or \u2022 \u2308x13 \u2309 = \u2308 x2 3 \u2309 and \u2308 z1 3 \u2309 = \u2308 z2 3 \u2309, i.e., same 3\u00d73 minigrid\nin dimension 2, or \u2022 \u2308y13 \u2309 = \u2308 y2 3 \u2309 and \u2308 z1 3 \u2309 = \u2308 z2 3 \u2309, i.e., same 3\u00d73 minigrid\nin dimension 3.\nA 3D Sudoku puzzle can be solved by assigning an integer within [1, 9] in each vertex, maintaining the rule that the connected vertices do not have the same integer assigned to them."
        },
        {
            "heading": "E. PHYSICAL STORAGE STRUCTURE OF THE 3D",
            "text": "SUDOKU INSTANCE Table 1 represents the 3D array storage structure of the 3D Sudoku [2], shown in Fig. 2. This is a 2D visualisation of the 3D array. Each row of the table contains elements of a particular 2D Sudoku. For example, row 1 represents all the elements of grid 1, row 2 represents all the elements of grid"
        },
        {
            "heading": "4 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nS1\nS10\nS19\nS2\nS11\nS20\nS3\nS12\nS21\nS4\nS13\nS22\nS5\nS14\nS23\nS6\nS15\nS24\nS7\nS16\nS25\nS8\nS17\nS26\nS9\nS18\nS27\nFIGURE 4: Connectivity graph of a 3D Sudoku of dimension 9\u00d79\u00d79 that represents relationships among the 27 minicubes, S1 through S27 [2].\n7 1 9\n4 3 6\n8 5 2\n5 9 8\n1 2 7\n3 6 4\n6 4 3\n2 8 5\n9 7 1\nFIGURE 5: Minicube of position S1 (according to Fig. 3) of the Sudoku represented in Fig. 2 [2].\n2, and so on. Again, each row of each 2D Sudoku is stored in a single cell. Thus, each cell contains nine elements. For example, row 1 of grid 1 is stored in the first cell of row 1 of Table 1.\nSimilarly, row 9 of grid 4 is stored in the ninth cell of row 4 in Table 1. In this way, all the nine 2D Sudoku maps lying in the xz-plane are stored in the individual rows of this table.\nS1 S2\nS3S4\nS7\nS19 S10\nFIGURE 6: Connectivity graph of minicube S1 [2] (Fig. 4).\nThe nine elements in each cell represent the nine elements in the third dimension, (following the structure shown in Fig. 6). In this way, the elements of all the 27 minicubes can be distributed in a 3D array. For example, the minicubes S1 through S27 are according to positions shown in Fig. 3. Six minicubes can be identified in Table 1 with the colour reference of Fig. 7."
        },
        {
            "heading": "III. PROPOSED ALGORITHM VERSION 1",
            "text": "We have improved the version of the algorithm developed by Jana et al. [2], using some functional constraints and\nVOLUME 4, 2016 5\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nAlgorithm 1 Pseudocode of Algorithm Version 1\nInput: M: input 3D Sudoku matrix of dimension 9\u00d79\u00d79 Output: S: Set of solutions\n1: Initialise l = 1 2: Initialise a matrix P = [pq,r]l\u00d713 to \u2205 for storing all probable\nvalues pertaining to each blank cell mi,j,k 3: for i = 1 to 9 do \u25b7 loop for the x-dimension 4: for j = 1 to 9 do \u25b7 loop for the y-dimension 5: for k = 1 to 9 do \u25b7 loop for the z-dimension 6: if mi,j,k = 0 then 7: Assign [pl,1, pl,2, pl,3]\u2190 [i, j, k] 8: Compute all probable values for mi,j,k and store them in [pl,4, pl,5, pl,6, . . . , pl,12] 9: Store the count of probable values for mi,j,k in\npl,13 10: Increment l by 1 11: end if 12: end for 13: end for 14: end for 15: Sort P in ascending order of [pi,13] \u2200i, where i = 1, 2, . . . , l 16: Implement Naked Single, Hidden Single, Lone Ranger, Twin,\nand Triplet on P 17: Sort P in ascending order of [pi,13] \u2200i, where i = 1, 2, . . . , l 18: Create a new node that will act as the head of the search tree\naccording to the structure defined in Fig. 10. 19: Initialise all values and pointers of the head to \u2205 20: Create a new node with all empty fields and assign a pointer\ntemp to point to that node 21: for i = 1 to l do 22: for j = 3 to 11 do 23: if pi,j \u0338= 0 then 24: a\u2190 pi,1, b\u2190 pi,2, and c\u2190 pi,3 25: id\u2190 (a\u00d7 100) + (b\u00d7 10) + c 26: Create a new node 27: Store pi,j to the VAL field of the node 28: Store id to the INDEX field of the node 29: Initialise all pointers of the node to \u2205 30: if DOWN pointer of head points to \u2205 then 31: Link node to DOWN pointer of head 32: else\n33: Initialise a temporary 3D array T _M toM 34: end if 35: for each branch in the search tree do \u25b7 traversal by backtracking 36: if leaf node of the branch points to \u2205 by NEXT pointer then \u25b7 i.e., open path 37: for each node N in the branch do 38: x\u2190 1st digit of INDEX of N 39: y \u2190 2nd digit of INDEX of N 40: z \u2190 3rd digit of INDEX of N 41: Place VAL of N to t_mx,y,z 42: end for 43: t_ma,b,c \u2190 pi,j 44: if 3D Sudoku constraints are satisfied on T _M then 45: if INDEX of the leaf node is id then 46: Traverse by DOWN pointer of the leaf node that points to \u2205 47: Link node to that DOWN pointer pointing to \u2205 48: else 49: Link node to the NEXT pointer of the leaf node 50: end if 51: else 52: if INDEX of the leaf node \u0338= id then \u25b7 i.e., this probable value leads to an END 53: Create a new node N_end 54: Store END to INDEX of N_end and assign all other fields to \u2205 55: link N_end to the NEXT pointer of the leaf node 56: end if 57: end if 58: end if 59: end for 60: end if 61: end for 62: end for\ndesigned the improved version. In the proposed version of the algorithm, a 3D instance [2] has been considered the input stored in a 3D array. After storing the input, each blank cell is visited one by one, and all probable values for that particular cell are computed. Finally, the possible values of all empty cells are stored in a matrix named P , which has been further explained in detail in the next section with the help of Algorithm 1.\nA. PHYSICAL STORAGE STRUCTURE OF THE PROBABLE VALUES OF BLANK CELLS\nIn P , each row contains the probable values for an individual blank cell. The first three columns indicate the x-, y-, and zindex values (in italics). The following nine columns store the nine possible values. Finally, the last column holds the number of probable values (in bold). Here, one thing that needs to be noted is that a blank cell may have less than\nnine possible values. In that case, the probable values are stored starting from the fourth column, and after all potential values have been stored, the remaining columns are filled with zeroes.\nLet us consider the input puzzle in Table 2 and the matrix shown in Fig. 8(a). There are 16 blank cells in the input puzzle. Thus, there are 16 rows in the matrix. Each row refers to one individual blank cell. The first blank cell is indexed at [0,3,2], i.e., row 0, column 3, position 2 in cell [0,3]. For this particular blank cell, there are three probable values, 4, 8, and 9. The count, i.e., 3 (three), is stored in the last column.\nIn this way, all the probable values are stored for every blank cell. Subsequently, the matrix data is sorted according to the count of probable values. This is done because when the algorithm begins implementing the ultimate tree structure using backtracking, it considers the blank cells stored in the proposed P row-by-row. According to the rule of minimum"
        },
        {
            "heading": "6 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nremaining value, the blank cells with the minimum number of probable values must be considered every time, as it helps in reducing the extent of backtracking. The tree structure usually contains a small number of branches at the upper level while a higher number at the lower level. Hence, in this way, backtracking is reduced.\nFigure 8(b) represents the P after sorting according to the count of probable values. After this, the five functional constraints, namely, naked single, hidden single, lone ranger, twin, and triplet, are applied, i.e., every blank cell is considered row by row from the generated P and the constraints applied. After using the five methods, the number of probable values is reduced for some blank cells. The updated P has been shown in Fig. 9. A backtracking tree is generated based on the reduced number of values, as shown in Fig. 12. Two solutions have been highlighted in yellow in Fig. 12. Comparing the linked list structure given in Fig. 12 with the one shown in Fig. 11 (highlighted in blue), the reduction in the number of branches can be observed. This reduction has been achieved by implementing the five functional constraints, i.e., naked single, hidden single, lone ranger, twin, and triplet. The\nresult is the same in both cases.\nWe can observe that each node containing each possible value for each of the blank cell is connected by a right arrow to the first possible value of the next blank cell. Now, this first possible value may or may not contribute to a solution path. For example, the first possible value 3 of the blank cell 051 does not contribute to a solution path. However, the second possible value 8 of cell 050 is not directly connected by a link to the next contributing possible value 4 of the node 051. In this context, a question may arise that how we can traverse the solution path every time after identifying the path. This is the reason why we need to store the different solution paths in the path-matrix, at the time they are being identified one by one.\nHowever, as the blank cells are visited in a different order in the work done by Jana et al. [2] compared to the proposed versions of the algorithm, the solutions in the figures may look different. Both solutions have been presented in Table 3 with the index values mentioned to clear this confusion. Table 3 provides a comparative view of the proposed algorithm (Version 1) and the one developed by Jana et al. [2].\nVOLUME 4, 2016 7\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n0 3 2 4 8 9 0 0 0 0 0 0 3 0 3 6 4 0 0 0 0 0 0 0 0 1 0 3 8 8 0 0 0 0 0 0 0 0 1 0 4 1 5 0 0 0 0 0 0 0 0 1 0 5 0 4 8 0 0 0 0 0 0 0 2 0 5 1 3 4 0 0 0 0 0 0 0 2 0 5 2 3 4 8 0 0 0 0 0 0 3 1 3 0 4 5 2 0 0 0 0 0 0 3 1 3 1 3 4 5 0 0 0 0 0 0 3 1 3 2 3 4 5 8 0 0 0 0 0 4 1 3 8 3 5 0 0 0 0 0 0 0 2 1 5 2 3 5 0 0 0 0 0 0 0 2 1 5 7 3 0 0 0 0 0 0 0 0 1 2 3 0 5 0 0 0 0 0 0 0 0 1 2 3 8 3 0 0 0 0 0 0 0 0 1 2 4 2 4 0 0 0 0 0 0 0 0 1\n(a)\n0 3 6 4 0 0 0 0 0 0 0 0 1 0 3 8 8 0 0 0 0 0 0 0 0 1 0 4 1 5 0 0 0 0 0 0 0 0 1 1 5 7 3 0 0 0 0 0 0 0 0 1 2 3 0 5 0 0 0 0 0 0 0 0 1 2 3 8 3 0 0 0 0 0 0 0 0 1 2 4 2 4 0 0 0 0 0 0 0 0 1 0 5 0 4 8 0 0 0 0 0 0 0 2 0 5 1 3 4 0 0 0 0 0 0 0 2 1 3 8 3 5 0 0 0 0 0 0 0 2 1 5 2 3 5 0 0 0 0 0 0 0 2 0 3 2 4 8 9 0 0 0 0 0 0 3 0 5 2 3 4 8 0 0 0 0 0 0 3 1 3 0 4 5 8 0 0 0 0 0 0 3 1 3 1 3 4 5 0 0 0 0 0 0 3 1 3 2 3 4 5 8 0 0 0 0 0 4\n(b)\nFIGURE 8: (a) Initial P for the puzzle shown in Table 1. (b) P for the puzzle shown in Table 2 after sorting.\nB. APPLIED FUNCTIONAL CONSTRAINTS In the first version of our proposed algorithm (i.e., Version 1), some functional constraints [31] have been applied: naked single, hidden single, lone ranger, twin, and triplet. These constraints have been explained below."
        },
        {
            "heading": "1) NAKED SINGLE AND HIDDEN SINGLE",
            "text": "Sometimes, when the probable values for each blank cell are computed, only one value is obtained for a specific empty\ncell. After placing that value in that blank cell permanently, other blank cells may remain in the same row in any three"
        },
        {
            "heading": "8 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n4\nHEAD\nEND\n8 4 END\n9 4 8 5 4 3 8 5 4 3 END\n8 4 3 5 5 3 5 3 4\n5 3\n8 3 4 4\n5 4 3\n8 3\n4 3 4 3 5\n8 5 5 3 5 3 4\n5 3 4\n8\nFIGURE 12: The linked list structure to store the solutions for the puzzle shown in Table 2.\n5 3 4,7 9 6 8 7 2 1\n5 3 4 9 6 8 7 2 1\nFIGURE 13: Example of Naked single and Hidden Single.\n1 8 5,4 6 7 3 2 9 3,5\n1 8 4 6 7 3 2 9 5\nFIGURE 14: Example of Long Ranger.\nVOLUME 4, 2016 9\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n5 2,3 1 4 2,7 2,3 8 3,6 9\n5 2,3 1 4 7 2,3 8 6 9\nFIGURE 15: Example of Twin.\ndimensions. Any such cell may hold the same value as its probable values, and thus, the particular value can be eliminated from the list of possible values for that blank cell. This condition is known as naked single. After this elimination, there may be only one probable value left in an empty cell. That value is known as a hidden single. For example, in Fig. 13, in the top row, cell 3 has two probable values, among which 4 is a hidden single because present in any of the x-, y-, z- directions in a 3D Sudoku."
        },
        {
            "heading": "2) LONE RANGER",
            "text": "Sometimes, a particular value is present as the probable value for only one blank cell in an entire row in any of the three dimensions. This situation is known as a lone ranger. The other potential values can be eliminated from that particular cell. For example, in Fig. 14, 4 is present only in cell 3 as one of its probable values. Thus, 4 can be placed in cell 3, and 5 can be eliminated from its list of possible values. This concept also holds in any of the x, y, z directions in a 3D Sudoku."
        },
        {
            "heading": "3) TWIN",
            "text": "In a row in any of the three dimensions, two blank cells may hold a pair of probable values, say, v1 and v2 only. Hence, it is evident that v1 and v2 can only be placed in these two cells and eliminated from all other cells in the related row. This occurrence is known as a twin. For example, in Fig. 15, cells 2 and 6 contain the pair of values (2,3) as their only probable values. Thus, it is evident that one of these cells will have 2 while the other will contain 3. Hence, 2 and 3 can be eliminated from the probable values of cells 5 and 8. This example row can be represented in any of the x, y, or z directions in a 3D Sudoku."
        },
        {
            "heading": "4) TRIPLET",
            "text": "Similar to the occurrence of a twin, in a row in any of the three dimensions, three blank cells can hold a triplet of values, say, v1, v2, and v3 as their probable values only. Therefore, v1, v2, and v3 can be placed in these three cells only and can be eliminated from all other cells in the related row. This occurrence is known as a triplet. For example, in Fig. 16, the three cells 2, 5, and 6 contain the triplet (2,3,6) as their only probable values. Therefore, 6 can be eliminated from the list of possible values in cell 8. This example row can be implemented in any of the x-, y-, and z-directions in a 3D Sudoku.\nIV. PROPOSED ALGORITHM VERSION 2 A naive algorithm was proposed by Jana et al. [2] for solving 3D Sudoku using backtracking. We have proposed an"
        },
        {
            "heading": "5 2,3,6 1 4 2,3,6 2,3,6 8 6,5 9",
            "text": ""
        },
        {
            "heading": "5 2,3,6 1 4 2,3,6 2,3,6 8 5 9",
            "text": "FIGURE 16: Example of Triplet.\nimproved version of the same (Version 1 explained in the previous sections). A second version (Version 2) has been introduced in this section to solve 3D Sudoku puzzles, essentially using a bottom-up approach. In this case, the inputs are the nine individual 2D Sudoku puzzles lying in the xz-plane (as shown in Fig. 5), one above the other to form a 3D Sudoku puzzle. Each of these 2D Sudoku puzzles is stored separately in nine matrices. The term bottom-up refers to the fact that, at first, all possible solutions are obtained for an individual 2D Sudoku problem. Then, all possible combinations of these solutions are analysed by considering one solution at a time for each 2D Sudoku. This is done to check which combination of solutions works for the complete 3D Sudoku problem, maintaining all the necessary constraints. Finally, backtracking is used to obtain the solutions to the individual 2D Sudoku puzzles."
        },
        {
            "heading": "A. PHYSICAL STORAGE STRUCTURE OF INPUT AND INTERMEDIATE STRUCTURES",
            "text": "Simple 9\u00d79 matrices have been utilised in this work to store 2D Sudoku puzzles as input (Fig. 16). To solve one 2D Sudoku, all probable values for each blank cell are computed. These computed values are stored in the corresponding P (Fig. 8a). Thus, nine P structures are generated, which hold all probable values of all blank cells for a 2D Sudoku problem. Next, empty cells in these matrices are sorted (in non-descending order) according to the number of possible values (Fig. 8b). Finally, solutions are obtained by applying backtracking.After backtracking, nine linked lists (one for each 2D Sudoku) are obtained, similar to Fig. 11, and the corresponding linked list is considered. All solutions are fetched from the linked list and stored in a matrix, where each row stores a new solution. The number of columns is the same as the number of blank cells. The first row stores the indices of empty cells. From the second row onwards, accepted values of the blank cells are stored for each new solution. Nine matrices hold the solutions to the nine 2D Sudoku puzzles (Fig. 18). The structure of the solution matrix for each 2D Sudoku has been shown in Fig. 17.Finally, each possible combination of solutions from these nine matrices is considered (as shown in Fig. 19) and checked for necessary 3D constraints. In other words, all the accepted values are placed in their respective blank cells. Then, for each established value, it is checked whether distinct values from 1 through 9 are present in the corresponding rows, columns, and minigrids in all three dimensions. Since no 3D structure is used, a question may arise about how the rules for the third dimension can be checked. This is possible as the relation among all the 2D Sudoku puzzles, i.e., how the 2D Sudokus"
        },
        {
            "heading": "10 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nAlgorithm 2 Pseudocode of Algorithm Version 2 1\nInput: M: input 3D Sudoku matrix of dimension 9\u00d79\u00d79 Output: S: Set of solutions\n1: Extract nine 2D Sudoku puzzles along any one dimension from M and store each of them in SPi = [spij,k]9\u00d79 where i = 1, 2, . . . , 9 2: Initialise l =1 3: Initialise a matrix Pi = [ piq,r ] l\u00d712 to \u2205 for storing all probable\nvalues pertaining to each SPi 4: Initialise individual SMi for each puzzle SPi, as represented\nin Table. 4 5: for i =1 to 9 do \u25b7 each 2D matrix / Sudoku puzzle 6: for j =1 to 9 do 7: for k =1 to 9 do 8: if spij,k = 0 then 9: Assign [ pil,1, p i l,2 ] \u2190 [j, k] 10: Compute all probable values for spij,k and store them in [ pil,3, p i l,4, p i l,5, . . . , p i l,11\n] 11: Store the count of probable values for spij,k in pil,12 12: Increment l by 1 13: end if 14: end for 15: end for 16: Sort Pi in ascending order of [ pij,12 ] \u2200j, where j = 1, 2, . . . , l 17: end for 18: for i =1 to 9 do 19: Compute all possible solutions of SPi using the corresponding Pi by backtracking 20: Store all solutions in SMi 21: end for 22: for each solution in SM1 do \u25b7 each row represents a solution,\nexcept the 0th row 23: Initialise a new matrix T _M1 = SP1 24: Fill each blank cell of T _M1 with the current solution 25: for each solution in SM2 do 26: Initialise a new matrix T _M2 = SP2 27: Fill each blank cell of T _M2 with the current solution 28: for each solution in SM3 do 29: Initialise a new matrix T _M3 = SP3 30: Fill each blank cell of T _M3 with the current solution 31: for each solution in SM4 do\n32: Initialise a new matrix T _M4 = SP4 33: Fill each blank cell of T _M4 with the current solution 34: for each solution in SM5 do 35: Initialise a new matrix T _M5 = SP5 36: Fill each blank cell of T _M5 with the current solution 37: for each solution in SM6 do 38: Initialise a new matrix T _M6 = SP6 39: Fill each blank cell of T _M6 with the current solution 40: for each solution in SM7 do 41: Initialise a new matrix T _M7 = SP7 42: Fill each blank cell of T _M7 with the current solution 43: for each solution in SM8 do 44: Initialise a new matrix T _M8 = SP8 45: Fill each blank cell of T _M8 with the current solution 46: for each solution in SM9 do 47: Initialise a new matrix T _M9 = SP9 48: Fill each blank cell of\nT _M9 with the current solution\n49: if T _M1 through T _M9 validate 3D Sudoku rule then 50: Store T _M1 through T _M1 to S as a new 3D solution 51: end if 52: end for 53: end for 54: end for 55: end for 56: end for 57: end for 58: end for 59: end for 60: end for\nlie on one another, is known. For example, if 7 is placed in blank cell [2,3] in Sudoku 4, all the values in cell [2,3] in all the other eight Sudoku instances are checked, and it is made sure that 7 is not present in any other cell. Cell [2,3] is present\nin the first column and the last row of the second minigrid of Sudoku 4. Therefore, the first columns and last rows of the respective second minigrids of Sudokus 5 and 6 also need to be checked as these groups of three sub-rows and three sub-\nVOLUME 4, 2016 11\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n8\n2\n5\n3\n6\n1\n7\n2\n7 3 9\n8 5 2\n7\n2\n5\n6\n5\n3\n7\n9\n(a) Grid 1\n9\n8\n4\n3\n6 1\n5 7\n7 3\n5\n9 2\n2\n7\n4\n9\n5 6\n4\n8 9\n9 7\n1 4\n8\n2\n3\n6\n(b) Grid 2\n6\n4\n7\n5\n8 5\n9 6\n3 4\n5 2\n5\n8\n9\n1\n(c) Grid 3\n4 9 3\n2 7\n6 2 4 9 8 3\n6 6 5 4 3 1\n1 8 6\n5 4\n(d) Grid 4\n3 7 6\n7 5\n3 8 1 7\n4\n9 5 1\n(e) Grid 5\n3 1 2 7 9 5\n7 6 4\n8 3\n4 9 1\n7 6 1 8 6 2 4 9\n(f) Grid 6\n2 7 1 8\n3 8\n2 6\n2 6\n4 5\n4 9 7 6\n(g) Grid 7\n9 3 8\n2 6 7\n2 1 6 7 5 9 4\n3 8\n6 7\n7 8 1\n5 9 4\n3 9 2 6 8 1 3\n(h) Grid 8\n5 9\n3 1 9\n3 8\n2\n9\n1 3\n6 2\n1 8 5\n9\n7 8\n3\n2 6\n(i) Grid 9\nFIGURE 17: 2D Sudoku layers that form the 3D puzzle fed as the input to Algorithm 2.\ncolumns form minigrids in the other two dimensions. In this way, at least one solution can be obtained for any valid 3D puzzle using our proposed algorithm, Version 2.\nV. EXPERIMENTAL RESULTS In this section, experimental results have been presented. The performance of the proposed algorithms has been compared based on the Sudoku instances available at http://www. menneske.no/sudoku3d. The comparison has been made with respect to the time required and the number of blank cells in the input puzzle. The results have been presented in Tables 5 through 7. To the best of our knowledge, no such work has yet been implemented in 3D Sudoku. The current research works focus on 2D Sudoku only. Consequently, the results obtained by our proposed methodology could not be compared with other such techniques.\nEach row of the table indicates an experiment with a specific instance of 3D Sudoku and a certain number of blank cells, which are fed as inputs to the three algorithms. For some instances (easy), we obtain output (s) for all three algorithms, and for some cases (moderate and hard), we do not. This fact indicates the improvement in the algorithms, as represented in Fig. 21.\nAnother interesting fact is, the number of solutions for a single puzzle is increased with an increase in the hardness of the puzzle. In Fig. 22, it can be observed that, for easy puzzles maximum number of solutions obtained is 8, and for most (29) of the easy Sudoku puzzles, only one solution is obtained. In case of moderate Sudoku puzzles, number of solutions is increased up to 64, although maximum numbers (14) of puzzles provide single solution, as represented in Fig. 23."
        },
        {
            "heading": "12 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nIn Fig. 24, we can observe that number of solutions is increased by huge amount for the hard puzzles. Despite our best efforts, no 3D Sudoku solver algorithm could be\nfound except [2], our previous work. There exist different algorithms for solving 2D Sudoku instances with varying difficulty levels. However, the instances they have used are not\nVOLUME 4, 2016 13\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nTABLE 7: Comparative experimental results analysis for 3D Sudoku instances between our proposed methods and Jana et al. [2] for hard puzzles. NW indicates Not Working.\nInstance # # Blank Cells Level of Difficulty Jana et al. [2] Algorithm 1 Algorithm 2\nTime (seconds) # Solution(s) Time (seconds) # Solution(s) Time in seconds # Solution(s)\n56 500 Hard NW NW 4.08 6 57 524 Hard NW NW 7.26 8 58 524 Hard NW NW 5.29 2 59 525 Hard NW NW 4.70 2 60 527 Hard NW NW 5.69 2 61 527 Hard NW NW 6.62 2 62 528 Hard NW NW 8.85 12 63 529 Hard NW NW 142.13 720 64 529 Hard NW NW 6.95 16 65 531 Hard NW NW 2.40 3 66 531 Hard NW NW 7.58 4 67 532 Hard NW NW 4.36 3 68 533 Hard NW NW 5.71 1 69 533 Hard NW NW 6.72 1 70 533 Hard NW NW 160.40 768 71 534 Hard NW NW 6.62 1 72 536 Hard NW NW 8.87 3 73 537 Hard NW NW 7.48 15 74 540 Hard NW NW 7.71 3 75 542 Hard NW NW 8.26 3\n2D Sudoku 9 P9 SM9 S9_1\n2D Sudoku 8 P8 SM8 S8_1\n2D Sudoku 7 P7 SM7 S7_1\n2D Sudoku 6 P6 SM6 S6_1\n2D Sudoku 5 P5 SM5 S5_1\n2D Sudoku 4 P4 SM4 S4_3 S4_2 S4_1\n2D Sudoku 3 P3 SM3 S3_1\n2D Sudoku 2 P2 SM2 S2_1\n2D Sudoku 1 P1 SM1 S1_2 S1_1\nFIGURE 18: Flow of the algorithm, where Si_j denotes the jth solution of the ith 2D Sudoku.\npublicly available in many cases. Furthermore, even if they are available, we cannot feed 3D instances in infrastructure for solving 2D Sudoku puzzles. Hence, our comparison is limited to the three algorithms only.\nThough the number of empty cells does not solely determine the difficulty level (the difficulty also depends on the positions of blank cells), we have divided the inputs into three clusters according to three difficulty levels based on the number of empty cells. The experimental results show\nS1_1 S2_1 S3_1 S4_1 S5_1 S6_1 S7_1 S8_1 S9_1\nS1_1 S2_1 S3_1 S4_2 S5_1 S6_1 S7_1 S8_1 S9_1\nS1_1 S2_1 S3_1 S4_3 S5_1 S6_1 S7_1 S8_1 S9_1\nS1_2 S2_1 S3_1 S4_1 S5_1 S6_1 S7_1 S8_1 S9_1\nS1_2 S2_1 S3_1 S4_2 S5_1 S6_1 S7_1 S8_1 S9_1\nS1_2 S2_1 S3_1 S4_3 S5_1 S6_1 S7_1 S8_1 S9_1\nFIGURE 19: All possible combinations of solutions of 2D Sudoku puzzles of Fig. 18.\nFIGURE 20: A 9-ary Tree Structure.\nthat the algorithm proposed by Jana et al. [2] works only for easy instances. However, our proposed algorithm (Version 1) works for easy and moderate examples. The second version of our proposed algorithm (i.e., Algorithm 2) works for easy, moderate, and hard instances."
        },
        {
            "heading": "VI. COMPUTATIONAL COMPLEXITY",
            "text": "A full N -ary tree of height h contains\nNh+1 \u2212 1 N \u2212 1\nnodes. The number of branches is thus\nNh+1 \u2212 1 N \u2212 1 \u2212 1"
        },
        {
            "heading": "14 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n1\n2\n4\n8\n29\n3\n1\n1\nNo. of Puzzles\nN o.\nof So\nlu tio\nns\nFIGURE 22: Number of solutions with respect to the number of easy puzzles.\nIn the case of Sudoku, the permutation tree contains h levels, where h\u22121 is the number of blank cells. The root node at level 0 is the head node. Nodes present at level 1 denote the probable values of the first blank cell, nodes present at level 2 denote the possible values of the second empty cell, and so on. Therefore, the maximum number of branches is\n9h+1 \u2212 1 9\u2212 1 \u2212 1,\nsimplifying which we get:\n9h+1 \u2212 9 8\nNow, for a completely blank 3D Sudoku, h =729. Therefore, in the worst-case scenario, the number of branches is\n9730 \u2212 9 8 ,\nwhich is enormous. The brute force algorithm proposed in [2] faces this situation, thus working for only very easy instances. The number\n1\n2\n16\n32\n64\n14\n3\n1\n2\n1\nNo. of Puzzles\nN o.\nof So\nlu tio\nns\nFIGURE 24: Number of solutions with respect to the number of hard puzzles.\nof probable values for each blank cell can be reduced so that the number of branches is also lowered. Whenever a new possible value is discovered for a particular empty cell, all the paths need to be traversed one-by-one to insert the found value at the end of each path.\nTheoretically, each path may contain a valid solution for a 2D Sudoku puzzle. All combinations of such solutions are compared to achieve the final answer to a 3D Sudoku problem. Practically, all cells are not blank in a 2D Sudoku, and thus, a limited number of solutions exist for each such 2D Sudoku. As a result, checking all possible combinations of solutions becomes much less time consuming than the previous methods. The second version of the algorithm follows a different way. For each permutation tree of a 2D Sudoku, in the worst case, 81 cells are blank. In that case, the number of branches is\n982 \u2212 9 8"
        },
        {
            "heading": "VII. CONCLUSION AND FUTURE WORK",
            "text": "It can be concluded that by developing 3D Sudoku solvers using different methodologies not only enriches the research field of solving NP-complete constraint satisfaction problems, but also immense benefit can be achieved by applying\nVOLUME 4, 2016 15\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\nthis solution in different application areas. In this work, the backtracking-based algorithm proposed by Jana et al. [2] works well only for easy 3D Sudoku puzzles. However, the algorithm does not perform well in the case of moderate or hard puzzles due to the vast number of complicated computations and recursions. To solve this issue, we have proposed an improved algorithm (Algorithm 1), and the improvement has been achieved by including five functional constraints. This has helped our proposed algorithm work better for Sudoku puzzles with a higher number of blank cells and a higher difficulty level. However, Algorithm 1 does not perform well in the case of hard Sudoku puzzles. Although backtracking has been reduced, it is unable to make the algorithm suitable for more complex instances. Some methodologies do exist that are specifically designed for solving hard Sudoku puzzles in 2D [32]. However, we have proposed another algorithm capable of solving easy, medium, and hard instances in 3D, in this work.\nThe proposed second version of the algorithm (Algorithm 2) follows a bottom-up approach, and backtracking is applied to individual 2D Sudoku puzzles rather than the whole 3D puzzle. For this reason, the quantum of backtracking required is not huge. Thus, many hard puzzles can be solved by Algorithm 2, along with easy and moderate puzzles. However, Algorithm 2 may not work if any puzzle (among the nine input 2D Sudoku puzzles) is blank, almost empty, or has very few clues.\nFinally, it can be stated that the proposed algorithms, to the best of our knowledge, are the first ever to have been designed for solving 3D Sudoku puzzles. Compared to other algorithms, our proposed algorithms (both Algorithms 1 and 2) can solve many easy, medium, and hard 3D Sudoku puzzles with controlled computational complexity. Furthermore, for any valid Sudoku instance, our proposed algorithms guarantee at least one solution, and if more than one solution exists, our proposed algorithms succeed in finding them.\nIn future, we plan to generate a 3D Sudoku solver by using evolutionary algorithms, like genetic algorithm, ant colony optimisation, to check the effectiveness of evolutionary algorithms in developing a 3D Sudoku solver.\nREFERENCES [1] S. Jana, N. Dutta, A. K. Maji, and R. K. Pal, \u201cA novel time-stamp-based\naudio encryption scheme using sudoku puzzle,\u201d in Proceedings of International Conference on Frontiers in Computing and Systems. Springer, 2023, pp. 159\u2013169. [2] S. Jana, M. Mallik, A. K. Maji, and R. K. Pal, \u201cA novel search treebased 3d sudoku solver,\u201d in Proceedings of the International Conference on Computing and Communication Systems. Springer, 2021, pp. 709\u2013 718. [3] N. Ikeo, H. Fukuda, A. Matsugaki, T. Inoue, A. Serizawa, T. Matsuzaka, T. Ishimoto, R. Ozasa, O. Gokcekaya, and T. Nakano, \u201c3d puzzle in cube pattern for anisotropic/isotropic mechanical control of structure fabricated by metal additive manufacturing,\u201d Crystals, vol. 11, no. 8, p. 959, 2021. [4] N. Capece, U. Erra, M. Gruosso, and M. Anastasio, \u201cArchaeo Puzzle: An Educational Game Using Natural User Interface for Historical Artifacts,\u201d in Eurographics Workshop on Graphics and Cultural Heritage, M. Spagnuolo and F. J. Melero, Eds. The Eurographics Association, 2020. [5] B. Xia, A. Wang, C.-C. Chang, and L. Liu, \u201cAn image steganography\nscheme using 3d-sudoku.\u201d J. Inf. Hiding Multim. Signal Process., vol. 7, no. 4, pp. 836\u2013845, 2016. [6] A. K. Maji and R. K. Pal, \u201cSudoku solver using minigrid based backtracking,\u201d in 2014 IEEE International Advance Computing Conference (IACC). IEEE, 2014, pp. 36\u201344. [7] A. K. Maji, S. Jana, and R. K. Pal, \u201cA comprehensive sudoku instance generator,\u201d in Advanced Computing and Systems for Security. Springer, 2016, pp. 215\u2013233. [8] T. Yato and T. Seta, \u201cComplexity and completeness of finding another solution and its application to puzzles,\u201d IEICE transactions on fundamentals of electronics, communications and computer sciences, vol. 86, no. 5, pp. 1052\u20131060, 2003. [9] G. McGuire, B. Tugemann, and G. Civario, \u201cThere is no 16-clue sudoku: Solving the sudoku minimum number of clues problem via hitting set enumeration,\u201d Experimental Mathematics, vol. 23, no. 2, pp. 190\u2013217, 2014. [10] R. Lewis, \u201cMetaheuristics can solve sudoku puzzles,\u201d Journal of heuristics, vol. 13, no. 4, pp. 387\u2013401, 2007. [11] J. A. Pacurib, G. M. M. Seno, and J. P. T. Yusiong, \u201cSolving sudoku puzzles using improved artificial bee colony algorithm,\u201d in 2009 fourth international conference on innovative computing, information and control (ICICIC). IEEE, 2009, pp. 885\u2013888. [12] D. Weyland, \u201cA critical analysis of the harmony search algorithm\u2014how not to solve sudoku,\u201d Operations Research Perspectives, vol. 2, pp. 97\u2013 105, 2015. [13] G. Singh and K. Deep, \u201cA new membrane algorithm using the rules of particle swarm optimization incorporated within the framework of cell-like p-systems to solve sudoku,\u201d Applied Soft Computing, vol. 45, pp. 27\u201339, 2016. [14] A. Assad and K. Deep, \u201cHarmony search based memetic algorithms for solving sudoku,\u201d International Journal of System Assurance Engineering and Management, vol. 9, no. 4, pp. 741\u2013754, 2018. [15] R. Soto, B. Crawford, C. Galleguillos, E. Monfroy, and F. Paredes, \u201cA hybrid ac3-tabu search algorithm for solving sudoku puzzles,\u201d Expert Systems with Applications, vol. 40, no. 15, pp. 5817\u20135821, 2013. [16] T. Mantere and J. Koljonen, \u201cSolving, rating and generating sudoku puzzles with ga,\u201d in 2007 IEEE congress on evolutionary computation. IEEE, 2007, pp. 1382\u20131389. [17] S. Jana, A. Dey, A. K. Maji, and R. K. Pal, \u201cA novel hybrid genetic algorithm-based firefly mating algorithm for solving sudoku,\u201d Innovations in Systems and Software Engineering, vol. 17, no. 3, pp. 261\u2013275, 2021. [18] H. Okagbue, Z. Omogbadegun, F. Olajide, and A. Opanuga, \u201cOn some suggested applications of sudoku in information systems security,\u201d Asian J Inform Technol, vol. 14, no. 4, pp. 117\u2013121, 2015. [19] A. K. Maji, R. K. Pal, and S. Roy, \u201cA novel steganographic scheme using sudoku,\u201d in 2013 International Conference on Electrical Information and Communication Technology (EICT). IEEE, 2014, pp. 1\u20136. [20] M. H. Shirali-Shahreza and M. Shirali-Shahreza, \u201cSteganography in sms by sudoku puzzle,\u201d in 2008 IEEE/ACS International Conference on Computer Systems and Applications. IEEE, 2008, pp. 844\u2013847. [21] W.-C. Wu and G.-R. Ren, \u201cA new approach to image authentication using chaotic map and sudoku puzzle,\u201d in 2009 Fifth International Conference on Intelligent Information Hiding and Multimedia Signal Processing. IEEE, 2009, pp. 628\u2013631. [22] A. K. Maji and R. K. Pal, \u201cA novel biometric template encryption scheme using sudoku puzzle,\u201d in Applied Computation and Security Systems. Springer, 2015, pp. 109\u2013128. [23] P. M. Naini, S. M. Fakhraie, and A. N. Avanaki, \u201cSudoku bit arrangement for combined demosaicking and watermarking in digital camera,\u201d in 2010 Second International Conference on Advances in Databases, Knowledge, and Data Applications. IEEE, 2010, pp. 41\u201344. [24] M. Yang, N. Bourbakis, and S. Li, \u201cData-image-video encryption,\u201d IEEE potentials, vol. 23, no. 3, pp. 28\u201334, 2004. [25] Y. Erlich, K. Chang, A. Gordon, R. Ronen, O. Navon, M. Rooks, and G. J. Hannon, \u201cDna sudoku\u2014harnessing high-throughput sequencing for multiplexed specimen analysis,\u201d Genome research, vol. 19, no. 7, pp. 1243\u20131253, 2009. [26] C.-C. Chang, P.-Y. Lin, Z.-H. Wang, and M. Li, \u201cA sudoku-based secret image sharing scheme with reversibility,\u201d J. Commun., vol. 5, no. 1, pp. 5\u201312, 2010. [27] R. Lewis, \u201cA guide to graph colouring,\u201d Springer, vol. 10, pp. 978\u20133, 2015. [28] J. F. Franco, O. G. Carmona, and R. A. Gallego, \u201cAplicaci\u00f3n de t\u00e9cnicas de\noptimizaci\u00f3n combinatorial a la soluci\u00f3n del sudoku,\u201d Scientia et technica, vol. 13, no. 37, pp. 151\u2013156, 2007."
        },
        {
            "heading": "16 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: Design and Analysis of a Modified 3D Sudoku Solver\n[29] A. M. Herzberg and M. R. Murty, \u201cSudoku squares and chromatic polynomials,\u201d Notices of the AMS, vol. 54, no. 6, pp. 708\u2013717, 2007. [30] G.-C. Lau, J. M. Jeyaseeli, W.-C. Shiu, and S. Arumugam, \u201cSudoku number of graphs,\u201d arXiv preprint arXiv:2206.08106, 2022. [31] N. Jussien, A to Z of Sudoku. ISTE, 2007. [32] H. Lloyd and M. Amos, \u201cSolving sudoku with ant colony optimization,\u201d\nIEEE Transactions on Games, vol. 12, no. 3, pp. 302\u2013311, 2019.\nSUNANDA JANA received her B.Tech. and M.Tech. degrees from Biju Patnaik University of Technology, Orissa, India, in 2007, and Berhampur University, Orissa, India, in 2010. Presently, she is working as an Assistant Professor at the Haldia Institute of Technology, West Bengal, India. Her research interests include the design and analysis of algorithms and network security.\nMANJARINI MALLIK has received her B.Sc. and M.Sc. degrees in Computer Science from the University of Calcutta, Kolkata, India, in 2016 and 2018, respectively, and her M.Tech. degree in Computer Science and Engineering from the University of Calcutta, Kolkata, India, in 2020. Presently, she is working as a Junior Research Fellow in a DST sponsored project at Jadavpur University. Her research interests include the design and analysis of algorithms, machine learning,\ndeep learning, indoor localisation, etc.\nABHINANDAN KHAN (Member, IEEE) received his B.Tech. degree in Electronics and Communication Engineering from the West Bengal University of Technology, Kolkata, India, in 2011, his M.E. degree in Electronics and Tele-Communication Engineering from Jadavpur University, Kolkata, India, in 2013, and his PhD degree from the University of Calcutta, Kolkata, India in 2020. He received the University Gold Medal for securing the highest marks among all post-graduate engi-\nneering courses at Jadavpur University. He is also a recipient of the Junior and Senior Research Fellowships (NET) from the Council of Scientific & Industrial Research (CSIR), Government of India. He is presently the Head of Product Development and Diversification at ARP Engineering, Kolkata, India. His research interests include computational biology, bioinformatics, artificial intelligence, natural language processing, etc. He has published more than 25 research articles.\nARNAB KUMAR MAJI (Senior Member, IEEE) received his B.E. degree in Information Science and Engineering from Visvesvaraya Technological University in 2003, his M.Tech. degree in Information Technology from Bengal Engineering and Science University, Shibpur, in 2006, and his Ph.D. degree from Assam University, Silchar, India, in 2016. He has approximately 18 years of professional experience. He is currently working as an Associate Professor in the Department of\nInformation Technology, North-Eastern Hill University, Shillong, India. He has published around 80 nos. of articles in reputed international journals, conferences, and book chapters. Dr. Maji has also co-authored three books from Springer. His research interests include Computer Vision, NPComplete Puzzle, and Natural Language Processing. He has also served as Guest Editor of one of the Springer journal.\nRAJAT KUMAR PAL (Member, IEEE) received his B.E. degree in Electrical Engineering from Bengal Engineering College, Shibpur, under the University of Calcutta, India, the MTech degree in Computer Science and Engineering from the University of Calcutta, India, in 1985 and 1988, respectively, and the PhD degree from the Indian Institute of Technology, Kharagpur, India, in 1996. Since 1994, he has been working as a faculty with the Department of Computer Science and\nEngineering, University of Calcutta. He took a leave of absence to become a Professor with the Department of Information Technology, Assam University, India, from 2010 to 2012. Presently, he is working as a professor with the Department of Computer Science and Engineering, University of Calcutta, India. His major research interests include VLSI design, graph theory and its applications, perfect graphs, logic synthesis, design and analysis of algorithms, computational geometry, and parallel computation and algorithms. He has published nearly 250 research articles and has authored and co-authored two books. He also holds several international patents.\nVOLUME 4, 2016 17\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/"
        }
    ],
    "title": "Design and Analysis of a Modified 3D Sudoku Solver",
    "year": 2023
}