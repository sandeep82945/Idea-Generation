{
    "abstractText": "In this note, we first introduce a new problem called the longest common subsequence and substring problem. Let X and Y be two strings over an alphabet \u03a3. The longest common subsequence and substring problem for X and Y is to find the longest string which is a subsequence of X and a substring of Y . We propose an algorithm to solve the problem.",
    "authors": [
        {
            "affiliations": [],
            "name": "Rao Li"
        }
    ],
    "id": "SP:27bbd99e086e79297dd718b0f191550e61d0e734",
    "references": [
        {
            "authors": [
                "A. Apostolico"
            ],
            "title": "String editing and longest common subsequences",
            "venue": "in: G. Rozenberg and A. Salomaa (Eds.), Linear Modeling: Background and Application, in: Handbook of Formal Languages, Vol. 2, Springer- Verlag, Berlin",
            "year": 1997
        },
        {
            "authors": [
                "A. Apostolico"
            ],
            "title": "Chapter 13: General pattern matching",
            "venue": "in: M. J. Atallah (Ed.), Handbook of Algorithms and Theory of Computation, CRC, Boca Raton, FL",
            "year": 1998
        },
        {
            "authors": [
                "D. Gusfield"
            ],
            "title": "II: Suffix Trees and Their Uses",
            "venue": "Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology, Cambridge University Press",
            "year": 1997
        },
        {
            "authors": [
                "L. Bergroth",
                "H. Hakonen",
                "T. Raita"
            ],
            "title": "A survey of longest common subsequence algorithms",
            "venue": "in: SPIRE, A Coru\u00f1a, Spain",
            "year": 2000
        },
        {
            "authors": [
                "T. Cormen",
                "C. Leiserson",
                "R. Rivest"
            ],
            "title": "and C",
            "venue": "Stein, Section 15.4: Longest common subsequence, Introduction to Algorithms (second edition), MIT Press, Cambridge, MA",
            "year": 2001
        },
        {
            "authors": [
                "D. Hirschberg"
            ],
            "title": "A linear space algorithm for computing maximal common subsequences",
            "venue": "Comm. ACM 18 ",
            "year": 1975
        },
        {
            "authors": [
                "D. Hirschberg"
            ],
            "title": "Serial computations of Levenshtein distances",
            "venue": "in: A. Apostolico and Z. Galil (Eds.), Pattern Matching Algorithms, Oxford University Press, Oxford",
            "year": 1997
        },
        {
            "authors": [
                "C. Rick"
            ],
            "title": "New algorithms for the longest common subsequence problem",
            "venue": "Research Report No. 85123-CS, University of Bonn",
            "year": 1994
        },
        {
            "authors": [
                "P. Weiner"
            ],
            "title": "Linear pattern matching algorithms",
            "venue": "In: 14th Annual Symposium on Switching and Automata Theory, Iowa City, Iowa, USA, October 1517, 1973, pp. 111 ",
            "year": 1973
        }
    ],
    "sections": [
        {
            "text": "In this note, we first introduce a new problem called the longest common subsequence and substring problem. Let X and Y be two strings over an alphabet \u03a3. The longest common subsequence and substring problem for X and Y is to find the longest string which is a subsequence of X and a substring of Y . We propose an algorithm to solve the problem.\nKeywords : Algorithm, the longest common subsequence,\nthe longest common substring"
        },
        {
            "heading": "1. Introduction",
            "text": "Let \u03a3 be an alphabet and S a string over \u03a3. A subsequence of a string S is obtained by deleting zero or more letters of S. A substring of a string S is a subsequence of S consists of consecutive letters in S. Let X and Y be two strings over an alphabet \u03a3. The longest common subsequence problem for X and Y is to find the longest string which is a subsequence of both X and Y . The longest common substring problem for X and Y is to find the longest string which is a substring of both X and Y . Both the longest common subsequence problem and the longest common substring problem have been well-studied in last several decades. They have applications in different fields, for example, in molecular biology, the lengths of the longest common subsequence and the longest common substring are the suitable measurements for the similarity between two biological sequences. More details on the algorithms for the first problem can be found in [1], [2], [4], [5], [7], and [8] and the second problem can be found in [3] and [9]. Motivated by the two problems above, we introduce a new problem called the longest common subsequence and substring problem. The longest common subsequence and substring problem for X and Y is to find the longest string which is a subsequence of X and a substring of Y . In this note, we propose an algorithm to solve this problem."
        },
        {
            "heading": "2. The Foundations of the Algorithm",
            "text": "In order to present our algorithm, we need to prove some facts which are the foundations for our algorithm. Before proving the facts, we need some\nnotations as follows. For a given string S = s1s2...sl over an alphabet \u03a3, the size of S, denoted |S|, is defined as the number of letters in S. The i prefix of S is defined as Si = s1s2...si, where 1 \u2264 i \u2264 l. Conventionally, S0 is defined as an empty string. The l suffixes of S are the strings of s1s2...sl, s2s3...sl, ..., sl\u22121sl, and sl. Let X = x1x2...xm and Y = y1y2...yn be two strings. We define Z[i, j] as a string satisfying the following conditions, where 1 \u2264 i \u2264 m and 1 \u2264 j \u2264 n.\n(1) It is a subsequence of Xi. (2) It is a suffix of Yj. (3) Under (1) and (2), its length is as large as possible.\nFact 1. Let U = u1u2...ur be a longest string which is a subsequence of X and substring of Y . Then r = max{ |Z[i, j]| : 1 \u2264 i \u2264 m, 1 \u2264 j \u2264 n }.\nProof of Fact 1. For each i with 1 \u2264 i \u2264 m and each j with 1 \u2264 j \u2264 n, we, from the definition of Z[i, j], have that Z[i, j] is a subsequence of X and substring of Y . By the definition of U , we have that |Z[i, j]| \u2264 |U | = r. Thus max{ |Z[i, j]| : 1 \u2264 i \u2264 m, 1 \u2264 j \u2264 n } \u2264 r.\nSince U = u1u2...ur is a longest string which is a subsequence of X and a substring of Y , there is an index s and an index t such that ur = xs and ur = yt such that U = u1u2...ur is a subsequence of Xs and a suffix of Yt. From the definition of Z[i, j], we have that r \u2264 |Z[s, t]| \u2264 max{ |Z[i, j]| : 1 \u2264 i \u2264 m, 1 \u2264 j \u2264 n }.\nHence r = max{ |Z[i, j]| : 1 \u2264 i \u2264 m, 1 \u2264 j \u2264 n } and the proof of Fact 1 is complete.\nFact 2. Suppose that Xi = x1x2...xi and Yj = y1y2...yj, where 1 \u2264 i \u2264 m and 1 \u2264 j \u2264 n. If Z[i, j] = z1z2...za is a string satisfying conditions (1), (2), and (3) above. Then we have\n[1]. If xi = yj, then a = 1 + the length of a longest string which is a subsequence of Xi\u22121 and a suffix of Yj\u22121.\n[2]. If xi 6= yj, then a = the length of the longest string which is a subse-\nquence of Xi\u22121 and a suffix of Yj. .\nProof of [1] in Fact 2. Suppose W = w1w2...wb is a string satisfying the following conditions.\n(1) It is a subsequence of Xi\u22121. (2) It is a suffix of Yj\u22121. (3) Under (1) and (2), its length is as large as possible.\nSince W = w1w2...wb is a subsequence of Xi\u22121, a suffix of Yj\u22121, and xi = yj, W = w1w2...wbxi is a subsequence of Xi and a suffix of Yj. From the definition of Z[i, j], we have |W |+ 1 = b+ 1 \u2264 |Z[i, j]| = a.\nSince Z[i, j] = z1z2...za is a string satisfying conditions (1), (2), and (3) above, we have that za = yj = xi. We further have that z1z2...za\u22121 is a string which is a subsequence of Xi\u22121 and a suffix of Yj\u22121. From the definition of W = w1w2...wb, we have that a \u2212 1 \u2264 b. Thus a = 1 + b and a = 1 + the length of a longest string which is a subsequence of Xi\u22121 and a suffix of Yj\u22121.\nProof of [2] in Fact 2. Suppose U = u1u2...uc is a string satisfying the following conditions.\n(1) It is a subsequence of Xi\u22121. (2) It is a suffix of Yj. (3) Under (1) and (2), its length is as large as possible.\nSince U = u1u2...uc is a subsequence of Xi\u22121 and a suffix of Yj , U = u1u2...uc is a subsequence of Xi and a suffix of Yj. From the definition of Z[i, j], we have |U | = c \u2264 |Z[i, j]| = a.\nSince Z[i, j] = z1z2...za is a string satisfying conditions (1), (2), and (3) above, we have that za = yj 6= xi. Thus z1z2...za is a string which is a subsequence of Xi\u22121 and a suffix of Yj. From the definition of U = u1u2...uc, we have that a \u2264 c. Thus a = c and a = the length of a longest string which is a subsequence of Xi\u22121 and a suffix of Yj.\nHence the proof of Fact 2 is complete."
        },
        {
            "heading": "3. An Algorithm for the Longest Common Subsequence and Substring Problem",
            "text": "Based on the Fact 1 and Fact 2 in Section2, we can design an algorithm for the longest common subsequence and substring problem. Once again, we assume that X = x1x2...xm and Y = y1y2...yn are two strings over an alphabet \u03a3. In the following Algorithm A, W is an (m+ 1)\u00d7 (n + 1) array and the cells W (i, j), where 1 \u2264 i \u2264 m and 1 \u2264 j \u2264 n, store the lengths of strings such that each of them satisfies the following conditions.\n(1) It is a subsequence of Xi. (2) It is a suffix of Yj. (3) Under (1) and (2), its length is as large as possible.\nALGA(X, Y,m, n,W ) 1. Initialization: W (i, 0)\u2190 0, where i = 0, 1, ..., m\nW (0, j)\u2190 0, where j = 0, 1, ..., n maxLength = 0 lastIndexOnY = n\n2. for i\u2190 1 to m 3. for j \u2190 1 to n\nif xi = yj W (i, j)\u2190W (i\u2212 1, j \u2212 1) + 1 else W (i, j)\u2190W (i\u2212 1, j) if W (i, j) > maxLength\nmaxLength = W (i, j) lastIndexOnY = j\n4. return A substring of Y between (lastIndexOnY \u2212 maxLength) and lastIndexOnY\nBecause of the Fact 1 and Fact 2 in Section 2, it is clear that Algorithm A is correct. Obviously, the time complexity of Algorithm A is O(mn) and the space complexity of Algorithm A is also O(mn).\nWe implemented Algorithm A in Java and the program can be found at \u201chttps://sciences.usca.edu/math/\u02dcmathdept/rli/LCSSeqSStr/LCSS.pdf\u201d."
        }
    ],
    "title": "An Algorithm for the Longest Common Subsequence and Substring Problem",
    "year": 2023
}