{
    "abstractText": "Pre-trained large language models (LLMs) capture procedural knowledge about the world. Recent work has leveraged LLM\u2019s ability to generate abstract plans to simplify challenging control tasks, either by action scoring, or action modeling (fine-tuning). However, the transformer architecture inherits several constraints that make it difficult for the LLM to directly serve as the agent: e.g. limited input lengths, fine-tuning inefficiency, bias from pre-training, and incompatibility with nontext environments. To maintain compatibility with a low-level trainable actor, we propose to instead use the knowledge in LLMs to simplify the control problem, rather than solving it. We propose the Plan, Eliminate, and Track (PET) framework. The Plan module translates a task description into a list of high-level sub-tasks. The Eliminate module masks out irrelevant objects and receptacles from the observation for the current sub-task. Finally, the Track module determines whether the agent has accomplished each sub-task. On the AlfWorld instruction following benchmark, the PET framework leads to a significant 15% improvement over SOTA for generalization to human goal specifications.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yue Wu"
        },
        {
            "affiliations": [],
            "name": "So Yeon Min"
        },
        {
            "affiliations": [],
            "name": "Yonatan Bisk"
        },
        {
            "affiliations": [],
            "name": "Ruslan Salakhutdinov"
        },
        {
            "affiliations": [],
            "name": "Amos Azaria"
        },
        {
            "affiliations": [],
            "name": "Yuanzhi Li"
        },
        {
            "affiliations": [],
            "name": "Tom M. Mitchell"
        },
        {
            "affiliations": [],
            "name": "Shrimai Prabhumoye"
        }
    ],
    "id": "SP:d190f97f88526a376c4001d096b5ccf76df0d7ea",
    "references": [
        {
            "authors": [
                "A. Zeng"
            ],
            "title": "Do as i can, not as i say: Grounding language in robotic affordances, 2022",
            "venue": "URL https: //arxiv.org/abs/2204.01691",
            "year": 2022
        },
        {
            "authors": [
                "A. Akakzia",
                "C. Colas",
                "Oudeyer",
                "P.-Y",
                "M. Chetouani",
                "O. Sigaud"
            ],
            "title": "Grounding language to autonomously-acquired skills via goal generation",
            "venue": "arXiv preprint arXiv:2006.07185,",
            "year": 2020
        },
        {
            "authors": [
                "J. Andreas",
                "D. Klein",
                "S. Levine"
            ],
            "title": "Modular multitask reinforcement learning with policy sketches",
            "venue": "In International Conference on Machine Learning,",
            "year": 2017
        },
        {
            "authors": [
                "S. Black",
                "L. Gao",
                "P. Wang",
                "C. Leahy",
                "S. Biderman"
            ],
            "title": "GPT-Neo: Large Scale Autoregressive Language Modeling with Mesh-Tensorflow, March 2021",
            "venue": "URL https://doi.org/10.5281/zenodo.5297715",
            "year": 2021
        },
        {
            "authors": [
                "V. Blukis",
                "C. Paxton",
                "D. Fox",
                "A. Garg",
                "Y. Artzi"
            ],
            "title": "A persistent spatial semantic representation for highlevel natural language instruction execution, 2021",
            "venue": "URL https://arxiv.org/abs/2107.05612",
            "year": 2021
        },
        {
            "authors": [
                "T. Brown",
                "B. Mann",
                "N. Ryder",
                "M. Subbiah",
                "J.D. Kaplan",
                "P. Dhariwal",
                "A. Neelakantan",
                "P. Shyam",
                "G. Sastry",
                "A Askell"
            ],
            "title": "Language models are few-shot learners",
            "venue": "Advances in neural information processing systems,",
            "year": 2020
        },
        {
            "authors": [
                "D.S. Chaplot",
                "D. Gandhi",
                "A. Gupta",
                "R. Salakhutdinov"
            ],
            "title": "Object goal navigation using goal-oriented semantic exploration, 2020",
            "venue": "URL https://arxiv",
            "year": 2007
        },
        {
            "authors": [
                "G. Cideron",
                "M. Seurin",
                "F. Strub",
                "O. Pietquin"
            ],
            "title": "Higher: Improving instruction following with hindsight generation for experience replay",
            "venue": "IEEE Symposium Series on Computational Intelligence (SSCI),",
            "year": 2020
        },
        {
            "authors": [
                "C\u00f4t\u00e9",
                "M.-A",
                "A. K\u00e1d\u00e1r",
                "X. Yuan",
                "B. Kybartas",
                "T. Barnes",
                "E. Fine",
                "J. Moore",
                "M. Hausknecht",
                "L.E. Asri",
                "M Adada"
            ],
            "title": "Textworld: A learning environment for text-based games",
            "venue": "In Workshop on Computer Games,",
            "year": 2018
        },
        {
            "authors": [
                "C\u00f4t\u00e9",
                "M.-A",
                "A. K\u00e1d\u00e1r",
                "X. Yuan",
                "B. Kybartas",
                "T. Barnes",
                "E. Fine",
                "J. Moore",
                "M. Hausknecht",
                "L.E. Asri",
                "M Adada"
            ],
            "title": "Textworld: A learning environment for text-based games",
            "venue": "In Workshop on Computer Games,",
            "year": 2018
        },
        {
            "authors": [
                "N. Fulda",
                "D. Ricks",
                "B. Murdoch",
                "D. Wingate"
            ],
            "title": "What can you do with a rock? affordance extraction via word embeddings",
            "venue": "arXiv preprint arXiv:1703.03429,",
            "year": 2017
        },
        {
            "authors": [
                "P. Goyal",
                "S. Niekum",
                "R. Mooney"
            ],
            "title": "Pixl2r: Guiding reinforcement learning using natural language by mapping pixels to rewards",
            "venue": "In Conference on Robot Learning,",
            "year": 2021
        },
        {
            "authors": [
                "W. Huang",
                "P. Abbeel",
                "D. Pathak",
                "I. Mordatch"
            ],
            "title": "Language models as zero-shot planners: Extracting actionable knowledge for embodied agents, 2022a. URL https://arxiv.org/abs/2201.07207",
            "year": 2022
        },
        {
            "authors": [
                "E. Jang",
                "A. Irpan",
                "M. Khansari",
                "D. Kappler",
                "F. Ebert",
                "C. Lynch",
                "S. Levine",
                "C. Finn"
            ],
            "title": "Bc-z: Zeroshot task generalization with robotic imitation learning",
            "venue": "In Conference on Robot Learning,",
            "year": 2022
        },
        {
            "authors": [
                "Y. Jiang",
                "S.S. Gu",
                "K.P. Murphy",
                "C. Finn"
            ],
            "title": "Language as an abstraction for hierarchical deep reinforcement learning",
            "venue": "Advances in Neural Information Processing Systems,",
            "year": 2019
        },
        {
            "authors": [
                "T. Kollar",
                "S. Tellex",
                "D. Roy",
                "N. Roy"
            ],
            "title": "Toward understanding natural language directions",
            "venue": "In 2010 5th ACM/IEEE International Conference on HumanRobot Interaction (HRI),",
            "year": 2010
        },
        {
            "authors": [
                "B.Y. Lin",
                "C. Huang",
                "Q. Liu",
                "W. Gu",
                "S. Sommerer",
                "X. Ren"
            ],
            "title": "On grounded planning for embodied tasks with language models",
            "venue": "arXiv preprint arXiv:2209.00465,",
            "year": 2022
        },
        {
            "authors": [
                "Y. Liu",
                "M. Ott",
                "N. Goyal",
                "J. Du",
                "M. Joshi",
                "D. Chen",
                "O. Levy",
                "M. Lewis",
                "L. Zettlemoyer",
                "Stoyanov",
                "V. Roberta"
            ],
            "title": "A robustly optimized bert pretraining approach",
            "year": 1907
        },
        {
            "authors": [
                "M. MacMahon",
                "B. Stankiewicz",
                "B. Kuipers"
            ],
            "title": "Walk the talk: Connecting language, knowledge, and action in route",
            "venue": "instructions. Def,",
            "year": 2006
        },
        {
            "authors": [
                "H. Mei",
                "M. Bansal",
                "M.R. Walter"
            ],
            "title": "Listen, attend, and walk: Neural mapping of navigational instructions to action sequences",
            "venue": "In Thirtieth AAAI Conference on Artificial Intelligence,",
            "year": 2016
        },
        {
            "authors": [
                "V. Micheli",
                "F. Fleuret"
            ],
            "title": "Language models are fewshot butlers",
            "venue": "arXiv preprint arXiv:2104.07972,",
            "year": 2021
        },
        {
            "authors": [
                "S.Y. Min",
                "D.S. Chaplot",
                "P. Ravikumar",
                "Y. Bisk",
                "R. Salakhutdinov"
            ],
            "title": "Film: Following instructions in language with modular methods, 2021",
            "year": 2021
        },
        {
            "authors": [
                "D. Misra",
                "J. Langford",
                "Y. Artzi"
            ],
            "title": "Mapping instructions and visual observations to actions with reinforcement learning",
            "venue": "arXiv preprint arXiv:1704.08795,",
            "year": 2017
        },
        {
            "authors": [
                "S. Nair",
                "E. Mitchell",
                "K. Chen",
                "S. Savarese",
                "C Finn"
            ],
            "title": "Learning language-conditioned robot behavior from offline data and crowd-sourced annotation",
            "venue": "In Conference on Robot Learning,",
            "year": 2022
        },
        {
            "authors": [
                "J. Oh",
                "S. Singh",
                "H. Lee",
                "P. Kohli"
            ],
            "title": "Zero-shot task generalization with multi-task deep reinforcement learning",
            "venue": "In International Conference on Machine Learning,",
            "year": 2017
        },
        {
            "authors": [
                "A. Radford",
                "J. Wu",
                "R. Child",
                "D. Luan",
                "D. Amodei",
                "I. Sutskever"
            ],
            "title": "Language models are unsupervised multitask learners",
            "year": 2019
        },
        {
            "authors": [
                "A. See",
                "P.J. Liu",
                "C.D. Manning"
            ],
            "title": "Get to the point: Summarization with pointer-generator networks",
            "venue": "arXiv preprint arXiv:1704.04368,",
            "year": 2017
        },
        {
            "authors": [
                "P. Sharma",
                "A. Torralba",
                "J. Andreas"
            ],
            "title": "Skill induction and planning with latent language",
            "venue": "arXiv preprint arXiv:2110.01517,",
            "year": 2021
        },
        {
            "authors": [
                "M. Shridhar",
                "X. Yuan",
                "C\u00f4t\u00e9",
                "M.-A",
                "Y. Bisk",
                "A. Trischler",
                "M. Hausknecht"
            ],
            "title": "Alfworld: Aligning text and embodied environments for interactive learning",
            "venue": "arXiv preprint arXiv:2010.03768,",
            "year": 2020
        },
        {
            "authors": [
                "M. Shridhar",
                "L. Manuelli",
                "D. Fox"
            ],
            "title": "Cliport: What and where pathways for robotic manipulation",
            "venue": "In Conference on Robot Learning,",
            "year": 2022
        },
        {
            "authors": [
                "B. zaro"
            ],
            "title": "Using deepspeed and megatron to train megatron-turing NLG 530b, A large-scale generative language model",
            "venue": "CoRR, abs/2201.11990,",
            "year": 2022
        },
        {
            "authors": [
                "S. Stepputtis",
                "J. Campbell",
                "M. Phielipp",
                "S. Lee",
                "C. Baral",
                "H. Ben Amor"
            ],
            "title": "Language-conditioned imitation learning for robot manipulation tasks",
            "venue": "Advances in Neural Information Processing Systems,",
            "year": 2020
        },
        {
            "authors": [
                "O. Tafjord",
                "P. Clark"
            ],
            "title": "General-purpose question-answering with macaw",
            "venue": "arXiv preprint arXiv:2109.02593,",
            "year": 2021
        },
        {
            "authors": [
                "S. Yao",
                "R. Rao",
                "M. Hausknecht",
                "K. Narasimhan"
            ],
            "title": "Keep calm and explore: Language models for action generation in text-based games, 2020",
            "venue": "URL https://arxiv.org/abs/2010.02903",
            "year": 2010
        },
        {
            "authors": [
                "T. Zahavy",
                "M. Haroush",
                "N. Merlis",
                "D.J. Mankowitz",
                "S. Mannor"
            ],
            "title": "Learn what not to learn: Action elimination with deep reinforcement learning",
            "venue": "Advances in neural information processing systems,",
            "year": 2018
        }
    ],
    "sections": [
        {
            "text": "We propose the Plan, Eliminate, and Track (PET) framework. The Plan module translates a task description into a list of high-level sub-tasks. The Eliminate module masks out irrelevant objects and receptacles from the observation for the current sub-task. Finally, the Track module determines whether the agent has accomplished each sub-task. On the AlfWorld instruction following benchmark, the PET framework leads to a significant 15% improvement over SOTA for generalization to human goal specifications."
        },
        {
            "heading": "1. Introduction",
            "text": "Humans can abstractly plan their everyday tasks without execution; for example, given the task \u201cMake breakfast\u201d, we can roughly plan to first pick up a mug and make coffee, before grabbing eggs to scramble. Embodied agents, endowed with this capability will generalize more effectively by leveraging common-sense reasoning.\n1Carnegie Mellon University 2Ariel University 3Microsoft Research 4Nvidia Research. Correspondence to: Yue Wu <ywu5@andrew.cmu.edu>.\nFigure 1. PET framework. Plan module uses LLM to generate a high-level plan. Eliminate Module uses a QA model to mask irrelevant objects in observation. Track module uses a QA model to track the completion of sub-tasks.\nRecent work (Huang et al., 2022a;b; Ahn et al., 2022; Yao et al., 2020) has used LLMs (Bommasani et al., 2021) for abstract planning for embodied or gaming agents. These have shown incipient success in extracting procedural world knowledge from LLMs in linguistic form with posthoc alignment to executable actions in the environment. However, they treat LLMs as the actor, and focus on adapting LLM outputs to executable actions either through fine-tuning (Micheli & Fleuret, 2021) or constraints (Ahn et al., 2022). Using LLM as the actor works for pure-text environments with limited interactions (Huang et al., 2022b; Ahn et al., 2022) (just consisting of \u201cpicking/placing\u201d objects), but limits generalization to other modalities. In addition, the scenarios considered have been largely simplified from the real world. Ahn et al. (2022) provides all available objects and possible interactions at the start and limits tasks to the set of provided objects/interactions. Huang et al. (2022b) limits the environment to objects on a single table.\nOn the other hand, to successfully \u201ccut some lettuce\u201d in a real-world room, one has to \u201cfind a knife\u201d, which can be non-trivial since there can be multiple drawers or cabinets (Chaplot et al., 2020; Min et al., 2021; Blukis et al., 2021). A more realistic scenario leads to a\nar X\niv :2\n30 5.\n02 41\n2v 2\n[ cs\n.C L\n] 7\nM ay\n2 02\n3\ndiverse, complicated set of tasks or large and changing action space. Furthermore, the text description of the observation increases as a function of the number of receptacles and objects the agent sees. Combined with growing roll-outs, the state becomes too verbose to fit into any LLM.\nIn this work, we explore alternative mechanisms to leverage the prior knowledge encoded in LLMs without impacting the trainable nature of the actor. We propose a 3-step framework (Figure 1): Plan, Eliminate, and Track (PET). Plan module simplifies complex tasks by breaking them down into sub-tasks. It uses a pretrained LLM to generate a list of sub-tasks for an input task description employing example prompts from the training set similar to Huang et al. (2022a); Ahn et al. (2022). The Eliminate module addresses the challenge of long observations. It uses a zero-shot QA language model to score and mask objects and receptacles that are irrelevant to the current sub-task. The Track module uses a zero-shot QA language model to determine if the current sub-task is complete and moves to the next sub-task. Finally, the Action Attention agent uses a transformer-based architecture to accommodate for long roll-out and variable length action space. The agent observes the masked observation and takes an action conditioned on the current sub-task.\nWe focus on instruction following in indoor households on the AlfWorld (Shridhar et al., 2020b) interactive text environment benchmark. Our experiments and analysis demonstrate that LLMs not only remove 40% of taskirrelevant objects in observation through common-sense QA, but also generate high-level sub-tasks with 99% accuracy. In addition, multiple LLMs may be used in coordination with each other to assist the agent from different aspects.\nOur contributions are as follows:\n1. PET: A novel framework for leveraging pretrained LLMs with embodied agents; our work shows that each of P, E, T serves a complementary role and should be simultaneously addressed to tackle control tasks. 2. An Action Attention agent that handles the changing action space for text environments. 3. A 15% improvement over SOTA for generalization to human goals via sub-task planning and tracking."
        },
        {
            "heading": "2. Related Work",
            "text": "Language Conditioned Policies A considerable portion of prior work studies imitation learning (Tellex et al., 2011; Mei et al., 2016; Nair et al., 2022; Stepputtis et al., 2020; Jang et al., 2022; Shridhar et al., 2022;\nSharma et al., 2021) or reinforcement learning (Misra et al., 2017; Jiang et al., 2019; Cideron et al., 2020; Goyal et al., 2021; Nair et al., 2022; Akakzia et al., 2020) policies conditioned on natural language instruction or goal (MacMahon et al., 2006; Kollar et al., 2010). While some prior research has used pre-trained language embeddings to improve generalization to new instructions (Nair et al., 2022), they lack domain knowledge that is captured in LLMs. Our PET framework enables planning, progress tracking, and observation filtering through the use of LLMs, and is designed to be compatible with any language conditional policies above.\nLLMs for Control LLMs have recently achieved success in high-level planning. Huang et al. (2022a) shows that pre-trained LLMs can generate plausible plans for day-to-day tasks, but the generated sub-tasks cannot be directly executed in an end-to-end control environment. Ahn et al. (2022) solves the executability issue by training an action scoring model to re-weigh LLM action choices and demonstrates success on a robot. However, LLM scores work for simple environments with actions limited to pick/place (Ahn et al., 2022), but fails with environments with more objects and diverse actions (Shridhar et al., 2020b). Song et al. (2022) uses GPT3 to generate step-by-step lowlevel commands, which are then executed by respective control policies. the work improves Ahn et al. (2022) with more action diversity and on-the-fly re-plan. In addition, all the above LLMs require few-shot demonstrations of up to 17 examples, making the length of the prompt infeasible for AlfWorld. Micheli & Fleuret (2021) fine-tuned a GPT2-medium model on expert trajectories in AlfWorld and demonstrated impressive evaluation results. However, LM fine-tuning requires a fully text-based environment, consistent expert trajectories, and a fully text-based action space. Such requirements greatly limit the generalization to other domains, and even to other forms of task specification. We show that our PET framework achieves better generalization to human goal specifications which the agents were not trained on.\nHierarchical Planning with Natural Language Due to the structured nature of natural language, Andreas et al. (2017) explored associating each task description to a modular sub-policy. Later works extend the above approach by using a single conditional policy (Mei et al., 2016), or by matching sub-tasks to templates (Oh et al., 2017). Recent works have shown that LLMs are proficient high-level planners (Huang et al., 2022a; Ahn et al., 2022; Lin et al., 2022), and therefore motivates us to revisit the idea of hierarchical task plan-\nning with progress tracking. To our knowledge, PET is the first work combining a zero-shot subtask-level LLM planner and zero-shot LLM progress tracker with a low-level conditional sub-task policy.\nText Games Text-based games are complex, interactive simulations where the game state and action space are in natural lanugage. They are fertile ground for language-focused machine learning research. In addition to language understanding, successful play requires skills like memory and planning, exploration (trial and error), and common sense. The AlfWorld (Shridhar et al., 2020b) simulator extends a common text-based game simulator, TextWorld Co\u0302te\u0301 et al. (2018a), to create text-based analogs of each ALFRED scene.\nAgents for Large Action Space He et al. (2015) learns representation for state and actions with two different models and computes the Q function as the inner product of the representations. While this could generalize to large action space, they only considered a small number of actions.\nFulda et al. (2017); Ahn et al. (2022) explore action elimination in the setting of affordances. Zahavy et al. (2018) trains a model to eliminate invalid actions on Zork from external environment signals. However, the functionality depends on the existence of external elimination signal."
        },
        {
            "heading": "3. Plan, Eliminate, and Track",
            "text": "In this section, we explain our 3-step framework: Plan, Eliminate, and Track (PET). In Plan module (MP), a pre-trained LLM generates a list of sub-tasks for an input task description using samples from the training set as in-context examples. The Eliminate module (ME) uses a zero-shot QA language model to score and mask objects and receptacles that are irrelevant to the current sub-task. The Track module (MT) uses a zeroshot QA language model to determine if the current sub-task is complete and moves to the next sub-task. Note that Plan is a generative task and Eliminate and Track are classification tasks.\nWe also implement an attention-based agent (Action Attention), which scores each permissible action and is trained on imitation learning on the expert. The agent observes the masked observation and takes an action conditioned on the current sub-task.\nProblem Setting We define the task description as T , the observation string at time step t as Ot, and the list of permissible actions {ati|ati can be executed} as At. For each observation string Ot, we define the\nreceptacles and objects within the observation as rti and oti respectively. The classification between receptacles and objects is defined by the environment (Shridhar et al., 2020b). For a task T , we assume there exists a list of sub-tasks ST = {s1, . . . sk} that solves T ."
        },
        {
            "heading": "3.1. Plan",
            "text": "Tasks in the real world are often complex and need more than one step to be completed. Motivated by the ability of humans to plan high-level sub-tasks given a complex task, we design the Plan module (MP) to generate a list of high-level sub-tasks for a task description T .\nInspired by the contextual prompting techniques for planning with LLMs (Huang et al., 2022a), we use an LLM as our plan module MP. For a given task description T , we compose the query question QT as \u201cWhat are the middle steps required to T ?\u201d, and require MP to generate a list sub-tasks ST = {s1, . . . sk}.\nSpecifically, we select the top 5 example tasks T E from the training set based on RoBERTa (Liu et al., 2019) embedding similarity with the query task T . We then concatenate the example tasks with example sub-tasks in a query-answer format to build the prompt PT for MP (Fig. 2):\nPT = concat(QT E1 ,ST E1 , . . . ,QT E5 ,ST E5 ,QT )\nAn illustration of our prompt format is shown in Figure 2, where T =\u201cheat some apple and put it in fridge\u201d, and QT E1 =\u201cWhat are the middle steps required to put two spraybottles on toilet\u201d, ST E1 =\u201ctake a spraybottle,\nplace the spraybottle in/on toilet, take a spraybottle, place the spraybottle in/on toilet\u201d. The expected list of sub-tasks to achieve this task T is s1 =\u2018take an apple\u2019, s2 =\u2018heat the apple\u2019, and s3 =\u2018place the apple in/on fridge\u2019"
        },
        {
            "heading": "3.2. Eliminate",
            "text": "Typical Alfworld scenes can start with around 15 receptacles, each containing up to 15 objects. In some close-to-worst cases, there can be around 30 open-able receptacles (e.g. a kitchen with many cabinets and drawers), and it easily takes an agent with no prior knowledge more than 50 steps for the agent to find the desired object (repeating the process of visiting each receptacle, opening it, closing it). We observe that many receptacles and objects are irrelevant to specific tasks during both training and evaluation, and can be easily filtered with common-sense knowledge about the tasks. For example, in Fig. 3 the task is to heat some apple. By removing the irrelevant receptacles like the coffeemachine, garbagecan, or objects like knife, we could significantly shorten our observation. We therefore propose to leverage commonsense knowledge captured by large pre-trained QA models to design our Eliminate module ME to mask out irrelevant receptacles and objects.\nFor task T , we create prompts in the format Pr =\u201cYour task is to: T . Where should you go to?\u201d for receptacles and Po =\u201cYour task is to: T . Which objects will be relevant?\u201d for objects. Using the pre-trained QA model ME in a zero-shot manner, we compute score \u00b5oi = ME(Po, oi) for each object oi and \u00b5ri = ME(Po, ri) for each receptacle rj in observation at every step. \u00b5 represents the belief score of whether the common-sense QA model believes the object/receptacle is relevant to\nT . We then remove oi from observation if \u00b5oi < \u03c4o, and remove ri if \u00b5ri < \u03c4r. Threshold \u03c4o, \u03c4r are hyperparameters."
        },
        {
            "heading": "3.3. Track",
            "text": "For the agent to utilize the high-level plan, it first needs to know which sub-task to execute. A human actor typically starts from the first item and check-off the tasks one by one until completion. Therefore, similar to Section 3.2, we use a pre-trained QA model to design the Track module MT to perform zero-shot sub-task completion detection.1\nSpecifically, as illustrated in Figure 4, for sub-task list ST = {s1, . . . sk}, we keep track of a progress tracker p (initialized at 1) that indicates the sub-task the agent is currently working on (sp). We then compose the context as the last d steps of the agent observation\n1Note that the current system design does not allow re-visiting finished sub-tasks, so the agent has no means to recover if it undoes its previous sub-task at test time.\nfor the current sub-task and the question as \u201cDid you finish the task of sp?\u201d. For efficiency, we set d := min(d + 1, 3) at each step. Note that d is reset to 1 whenever the progress tracker updates. Hence, the template Pa = concat(Ot\u2212d, . . . ,Ot\u22121, \u201cDid you finish the task of sp?\u201d). We feed Pa to a pre-trained zeroshot QA model MT and compute the probability of tokens \u2018Yes\u2019 and \u2018No\u2019 as follows: pMT(\u201cY es\u201d|Pa) and pMT(\u201cNo\u201d|Pa). If pMT(\u201cY es\u201d|Pa) > pMT(\u201cNo\u201d|Pa) then we increment the tracker p to track the next subtask.\nIf the tracking ends prematurely, meaning that p > len(ST ) but the environment has not returned \u201cdone\u201d, we fall back to conditioning with T . We study the rate of pre-mature ends in Section 4.4 in terms of precision and recall."
        },
        {
            "heading": "3.4. Agent",
            "text": "Since the number of permissible actions can vary a lot by the environment, the agent needs to handle arbitrary dimensions of action space. While Shridhar et al. (2020b) addresses this challenge by generating actions token-by-token, such a generation process leads to degenerate performance even on the training set.\nWe draw inspiration from the field of text summarization, where models are built to handle variable input lengths. See et al. (2017) generates a summary through an attention-like \u201cpointing\u201d mechanism that extracts the output word by word. Similarly, an attention-like \u201cpointing\u201d model could be used to select an action from the list of permissible actions.\nAction Attention We are interested in learning a policy \u03c0 that outputs the optimal action among permissible actions. We eschew the long rollout/ large action space problems by (1) representing observations by averaging over history, and (2) individually encoding actions (Fig 5). In our proposed action attention framework, we first represent historical observations Ht as the average of embeddings of all individual observations through history (Eq. 1), and HA as the list of embeddings of all the current permissible actions (Eq. 2). Then, in Eq. 3, we compute the query Q using a transformer with a \u201cquery\u201d head (MQ) on task embedding (Ht), the current observation embedding (Ot), and the list of action embeddings (HA). In Eq. 4 we compute the key Ki for each action ai using the same transformer with a \u201ckey\u201d head (MK) on task embedding (Ht), the current observation embedding (Ot), and embedding of action (ai).\nFinally, we compute the dot-product of the query and\nkeys as action scores for the policy \u03c0 (Eq. 5).\nHt = avgj\u2208[1,t\u22121]Embed(Oj) (1) HA = [ Embed(at1), ...,Embed(a t n) ] (2)\nQ =MQ ( Embed(T ), Ht,Embed(Ot), HA ) (3)\nKi =MK ( Embed(T ), Ht,Embed(Ot),Embed(ati) ) (4)\n\u03c0 = softmax ([Q \u00b7Ki|i \u2208 all permissible actions]) (5)"
        },
        {
            "heading": "4. Experiments and Results",
            "text": "We present our experiments as follows. First, we explain the environment setup and baselines for our experiments. Then we compare PET to the baselines on different splits of the environment. Finally, we conduct ablation studies and analyze the PET framework part by part. We show that PET generalizes better to human goal specification under efficient behavior cloning training."
        },
        {
            "heading": "4.1. Experimental Details",
            "text": "AlfWorld Environment ALFWorld (Shridhar et al., 2020b) is a set of TextWorld environments (Co\u0302te\u0301 et al., 2018b) that are parallels of the ALFRED embodied dataset (Shridhar et al., 2020a). ALFWorld includes 6 task types that each require solving multiple compositional sub-goals. There are 3553 training task instances ({tasktype, object, receptacle, room}), 140 in-distribution evaluation task instances (seen split - tasks themselves are novel but take place in rooms seen during training) and 134 out-of-distribution evaluation task instances (unseen split - tasks take place in novels rooms). An example of the task could be: \u201cRinse the egg to put it in the microwave.\u201d Each training instance in AlfWorld comes with an expert, from which we collected our training demonstration.\nHuman Goal Specification The crowd-sourced human goal specifications for evaluation contain 66 unseen verbs and 189 unseen nouns (Shridhar et al., 2020b). In comparison, the template goals use only 12 ways of goal specification. In addition, the sentence structure for human goal specification is more diverse compared to the template goals. Therefore, human goal experiments are good for testing the generalization of models to out-of-distribution scenarios.\nPre-trained LMs. For the Plan module (sub-task generation), we experimented with the open-source GPT-Neo-2.7B (Black et al., 2021), and an industryscale LLM with 530B parameters (Smith et al., 2022).\nFor the Eliminate module (receptacle/object masking), we choose Macaw-11b (Tafjord & Clark, 2021), which is reported to have common sense QA performance on par with GPT3 (Brown et al., 2020) while being orders of magnitudes smaller. We use a decision threshold of 0.4 for Macaw score below which the objects are masked out. For the Track module (progress tracking), we use the same Macaw-11b model as the Eliminate module answer to Yes/No questions.\nActor Model Design. Our Action Attention agent (MQ and MK) is a 12-layer transformer with 12 heads and hidden dimension 384. The last layer is then fed into two linear heads to generate K and Q. For embedding of actions and observations, we use pre-trained RoBERTa-large (Liu et al., 2019) with embedding dimension 1024. For sub-task generation, we use ground-truth sub-tasks for training, and generated sub-tasks from Plan module for evaluation.\nExperimental Setup. Unlike the original benchmark (Shridhar et al., 2020b), we experiment with models trained with behavior cloning. Although Shridhar et al. (2020b) observe that models benefit greatly from DAgger training, DAgger assumes an expert that is well-defined at all possible states, which is inefficient and impractical. In our experiments, training is 100x slower with DAgger compared to behavior cloning (3\nweeks for DAgger v.s. 6 hours for Behavior Cloning). In addition, we demonstrate that our models surpass the DAgger training performance of the BUTLER (Shridhar et al., 2020b) agents trained with DAgger, even when our agent does not have the option to interact with the environment.\nBaselines. Our first baseline is the BUTLER::BRAIN (BUTLER) agent (Shridhar et al., 2020b), which consists of an encoder, an aggregator, and a decoder. At each time step t, the encoder takes initial observation s0, current observation st, and task string stask and generates representation rt. The recurrent aggregator combines rt with the last recurrent state ht\u22121 to produce ht, which is then decoded into a string at representing action. In addition, the BUTLER agent uses beam search to get out of stuck conditions in the event of a failed action. Our second baseline GPT (Micheli & Fleuret, 2021) is a fine-tuned GPT2-medium on 3553 demonstrations from the AlfWorld training set. Specifically, the GPT is fined-tuned to generate each action step word-by-word to mimic the rule-based expert using the standard maximum likelihood loss."
        },
        {
            "heading": "4.2. Overall Results on Template and Human Goals",
            "text": "We compare the performance of action attention assisted by PET with BUTLER (Shridhar et al., 2020b) and fine-tuned GPT (Micheli & Fleuret, 2021) in Table 1. For human goal specifications, PET outperforms SOTA (GPT) by 25% on seen and 5% on the unseen split.\nAlthough PET under-performs GPT on Template goal specifications, GPT requires fine-tuning on fully textbased expert trajectory and thus loses adaptability to different environment settings. Qualitatively, on human goal specification tasks, where the goal specifications are out-of-distribution, GPT often gets stuck repeating the same action after producing a single wrong move. On the other hand, since the Plan module of PET is not trained on the task, it generalizes to the variations for human goal specifications as shown in Section 4.5. Quantitatively, GPT suffers from a relative 50% performance drop transferring from template to human-goal specifications, whereas PET incurs only a 15 \u223c 25% drop.\nThe setting closest to PET is BUTLER with behavior cloning (BUTLER + BC). Since BUTLER + BC performs poorly, we also include DAgger training results. Nevertheless, action attention assisted by PET outperforms BUTLER with DAgger by more than 2x while being much more efficient. (Section 4.1)"
        },
        {
            "heading": "4.3. Ablations for Plan, Eliminate, and Track",
            "text": "In Table 3, we analyze the contribution of each PET module by sequentially adding each component to the action attention agent on 140 training trajectories sampled from the training set. The data set size is chosen to match the size of the seen validation set, for an efficient and sparse setting. Note that we treat Plan and Track as a single module for this ablation since they cannot work separately.\nAdding Plan and Track greatly improves the completion rate relatively by 60%, which provides evidence to our hypothesis that solving some embodied tasks stepby-step reduces the complexity. We observe a relatively insignificant 3% improvement in absolute performance when adding Eliminate without sub-task tracking. On the other hand, when applying Eliminate to sub-tasks with Plan and Track, we observe more than 60% relative improvement over just Plan and Track alone. We, therefore, deduce that Plan and Track boost the performance of Eliminate during evaluation, since it is easier to remove irrelevant objects when the objective is more focused on sub-tasks."
        },
        {
            "heading": "4.4. Automated Analysis of PET modules",
            "text": "Plan Module We experiment with different LLMs such as GPT2-XL (Radford et al., 2019), GPT-Neo2.7B (Black et al., 2021), and the 530B parameter MT-NLG (Smith et al., 2022) models. Table 2 reports the generation accuracy and the RoBERTa (Liu et al., 2019) embedding cosine similarity against ground-truth sub-tasks. We observe that all LLMs achieve high accuracy on template goal specifications, where there is no variation in sentence structures. For human goal specification, MT-NLG generates subtasks similar to ground truth in terms of embedding similarity, while the other smaller models perform significantly worse.\nEliminate module We evaluate the zero-shot receptacle/object masking performance of Macaw on the three splits of AlfWorld. In Fig 6, we illustrate the AUC curve of the relevance score that the model assigns to the objects v.s. objects that the rule-based expert interacted with when completing each task. Since the Macaw QA model is queried in a zero-shot manner, it demonstrates consistent masking performance on all three splits of the environment, even on the unseen split. In addition, we note that object receptacle accuracy is generally lower than object accuracy because of the counter-intuitive spawning locations described in Section 4.5. In our experiments, a decision threshold of 0.4 has a recall of 0.91 and reduces the number of objects in observation by 40% on average.\nTrack module Since sub-task alignment information is not provided by the environment, we explore an alternative performance metric for the detection of the event of completion. Ideally, a sub-task tracker should record the last sub-task as \u201cfinished\u201d if and only if the environment is \u201cfully solved\u201d by the expert. As an agreement measure, we report a precision of 0.99 and a recall of 0.78 for Macaw-11B and a precision of 0.96 and a recall of 0.96 for Macaw-large. The larger model (Macaw-11b) is more precise but misses more detection, therefore limiting the theoretical performance to 78%. The smaller model is much less accurate according to human evaluation but does not limit the overall model performance in theory. In our experiments, we find that both models produce similar overall results, which may suggest that the overall results could be improved with LLMs doing better on both precision and recall."
        },
        {
            "heading": "4.5. Qualitative Analysis",
            "text": "Plan Module We show two types of failure examples for sub-task generation in Table 4. The first type of error is caused by generating synonyms of the ground truth, and the second type of error is caused by inaccu-\nracies in the human goal specifications. Note that our Action Attention framework uses RoBERTa (Liu et al., 2019) embedding for sub-tasks, known to be robust to synonym variations.\nEliminate Module We observe that the main source of elimination error occurs when the module\nincorrectly masks a receptacle that contains the object of interest so the agent fails to find such receptacles. This is often because some objects in the AI2Thor simulator do not spawn according to common sense. As noted in the documentation of the environment2, objects like Apple or Egg has a chance of spawning in unexpected receptacles like GarbageCan, or TVStand. However, such generations in AI2Thor are unlikely in real deployment; thus, the \u201cmistakes\u201d of our Eliminate module are reasonable.\nTrack Module Experimentally, we find that subtask planning/tracking is particularly helpful for tasks that require counting procedures. As shown in Table ??, PET breaks the task of \u201cPlace two soapbar in cabinet\u201d into two repeating set of sub-tasks: \u201ctake soapbar\u2192place soapbar in/on cabinet\u201d. Sub-task planning and tracking, therefore, simplify the hard problem of counting.\n2ai2thor.allenai.org/ithor/documentation/objects/objecttypes/\nHuman Goal Specification Examples\nTask Chill a cup and place it in the cabinet. GT cool the mug\u2192place the mug in/on coffeemachine Gen chill the mug\u2192return the mug to coffeemachine"
        },
        {
            "heading": "5. Conclusion, Limitations, and Future Work",
            "text": "In this work, we propose the Plan, Eliminate, and Track (PET) framework that uses pre-trained LLMs to assist an embodied agent in three steps. Our PET framework requires no fine-tuning and is designed to be compatible with any goal-conditional embodied agents.\nIn our experiments, we combine PET with a novel Action Attention agent that handles the dynamic action space in AlfWorld. Our Action Attention agent greatly outperforms the BUTLER baseline. In addition, since the PET framework is not trained to fit the training set tasks, it demonstrates better generalization to unseen human goal specification tasks. Finally, our ablation studies show the Plan and Track modules together improve the performance of Eliminate module to achieve the best performance.\nOur results show that LLMs can be a good source of common sense and procedural knowledge for embodied agents, and multiple LLMs may be used in coordination with each other to further improve effectiveness.\nOne of the major limitations of our current system design is that the Track module (progress tracker) does not re-visit finished sub-tasks. If for example, the agent is executing sub-tasks [picked up a pan, put the pan on countertop], and it picked up a pan but put it in the fridge (undo pickup action). Since the progress tracker does not take into consideration previous progress being undone, the system may break in this situation. Future work can focus on adding sub-task-level dynamic replanning to address this limitation or explore other ways in which LLMs can assist the learning of the\npolicy (i.e., reading an instruction manual about the environment)."
        }
    ],
    "title": "Plan, Eliminate, and Track \u2014 Language Models are Good Teachers for Embodied Agents",
    "year": 2023
}