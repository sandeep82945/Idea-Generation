{
    "abstractText": "We investigate preprocessing for vertex-subset problems on graphs. While the notion of kernelization, originating in parameterized complexity theory, is a formalization of provably effective preprocessing aimed at reducing the total instance size, our focus is on finding a non-empty vertex set that belongs to an optimal solution. This decreases the size of the remaining part of the solution which still has to be found, and therefore shrinks the search space of fixed-parameter tractable algorithms for parameterizations based on the solution size. We introduce the notion of a c-essential vertex as one that is contained in all c-approximate solutions. For several classic combinatorial problems such as Odd Cycle Transversal and Directed Feedback Vertex Set, we show that under mild conditions a polynomial-time preprocessing algorithm can find a subset of an optimal solution that contains all 2-essential vertices, by exploiting packing/covering duality. This leads to FPT algorithms to solve these problems where the exponential term in the running time depends only on the number of non-essential vertices in the solution. 2012 ACM Subject Classification Theory of computation \u2192 Graph algorithms analysis; Theory of computation \u2192 Packing and covering problems; Theory of computation \u2192 Linear programming; Theory of computation \u2192 Fixed parameter tractability",
    "authors": [
        {
            "affiliations": [],
            "name": "Benjamin Merlin Bumpus"
        },
        {
            "affiliations": [],
            "name": "Bart M.P. Jansen"
        },
        {
            "affiliations": [],
            "name": "Jari J.H. de Kroon"
        }
    ],
    "id": "SP:3d890eda93e78f4a9afbcb8ae034821e44cd1f5c",
    "references": [
        {
            "authors": [
                "Tobias Achterberg",
                "Robert E. Bixby",
                "Zonghao Gu",
                "Edward Rothberg",
                "Dieter Weninger"
            ],
            "title": "Presolve reductions in mixed integer programming",
            "venue": "Technical Report 16-44, ZIB,",
            "year": 2016
        },
        {
            "authors": [
                "Takuya Akiba",
                "Yoichi Iwata"
            ],
            "title": "Branch-and-reduce exponential/FPT algorithms in practice: A case study of vertex cover",
            "venue": "Theor. Comput. Sci.,",
            "year": 2016
        },
        {
            "authors": [
                "Jochen Alber",
                "Nadja Betzler",
                "Rolf Niedermeier"
            ],
            "title": "Experiments on data reduction for optimal domination in networks",
            "venue": "Annals OR,",
            "year": 2006
        },
        {
            "authors": [
                "Claude Berge"
            ],
            "title": "Hypergraphs - Combinatorics of finite sets, volume 45 of North-Holland mathematical library",
            "year": 1989
        },
        {
            "authors": [
                "Hans L. Bodlaender"
            ],
            "title": "Lower bounds for kernelization",
            "venue": "IPEC",
            "year": 2014
        },
        {
            "authors": [
                "Hans L. Bodlaender",
                "Fedor V. Fomin",
                "Daniel Lokshtanov",
                "Eelko Penninkx",
                "Saket Saurabh",
                "Dimitrios M. Thilikos"
            ],
            "title": "Meta) Kernelization",
            "venue": "In 50th Annual IEEE Symposium on Foundations of Computer Science,",
            "year": 2009
        },
        {
            "authors": [
                "Hans L. Bodlaender",
                "Thomas C. van Dijk"
            ],
            "title": "A cubic kernel for feedback vertex set and loop cutset",
            "venue": "Theory Comput. Syst.,",
            "year": 2010
        },
        {
            "authors": [
                "Yixin Cao",
                "D\u00e1niel Marx"
            ],
            "title": "Chordal editing is fixed-parameter",
            "venue": "tractable. Algorithmica,",
            "year": 2016
        },
        {
            "authors": [
                "Jianer Chen",
                "Iyad A. Kanj",
                "Ge Xia"
            ],
            "title": "Improved upper bounds for vertex cover",
            "venue": "Theor. Comput. Sci.,",
            "year": 2010
        },
        {
            "authors": [
                "Jianer Chen",
                "Yang Liu",
                "Songjian Lu",
                "Barry O\u2019Sullivan",
                "Igor Razgon"
            ],
            "title": "A fixed-parameter algorithm for the directed feedback vertex set problem",
            "venue": "J. ACM,",
            "year": 2008
        },
        {
            "authors": [
                "Maria Chudnovsky",
                "Jim Geelen",
                "Bert Gerards",
                "Luis A. Goddyn",
                "Michael Lohman",
                "Paul D. Seymour"
            ],
            "title": "Packing non-zero A-paths in group-labelled",
            "venue": "graphs. Comb.,",
            "year": 2006
        },
        {
            "authors": [
                "Holger Dell",
                "Dieter van Melkebeek"
            ],
            "title": "Satisfiability allows no nontrivial sparsification unless the polynomial-time hierarchy collapses",
            "venue": "J. ACM,",
            "year": 2014
        },
        {
            "authors": [
                "Huib Donkers",
                "Bart M.P. Jansen"
            ],
            "title": "Preprocessing to reduce the search space: Antler structures for feedback vertex set",
            "venue": "Graph-Theoretic Concepts in Computer Science - 47th International Workshop,",
            "year": 2021
        },
        {
            "authors": [
                "Rodney G. Downey",
                "M.R. Fellows"
            ],
            "title": "Parameterized Complexity",
            "year": 2012
        },
        {
            "authors": [
                "Andrew Drucker"
            ],
            "title": "New limits to classical and quantum instance compression",
            "venue": "SIAM J. Comput.,",
            "year": 2015
        },
        {
            "authors": [
                "Eduard Eiben",
                "Robert Ganian",
                "Thekla Hamm",
                "O-joung Kwon"
            ],
            "title": "Measuring what matters: A hybrid approach to dynamic programming with treewidth",
            "venue": "J. Comput. Syst. Sci.,",
            "year": 2021
        },
        {
            "authors": [
                "P. Erd\u00f6s",
                "L. P\u00f3sa"
            ],
            "title": "On independent circuits contained in a graph",
            "venue": "Canadian Journal of Mathematics,",
            "year": 1965
        },
        {
            "authors": [
                "Andreas Emil Feldmann",
                "Karthik C. S",
                "Euiwoong Lee",
                "Pasin Manurangsi"
            ],
            "title": "A survey on approximation in parameterized complexity",
            "venue": "Hardness and algorithms. Algorithms,",
            "year": 2020
        },
        {
            "authors": [
                "Michael R. Fellows"
            ],
            "title": "The lost continent of polynomial time: Preprocessing and kernelization",
            "venue": "In Proc. 2nd IWPEC, pages 276\u2013277,",
            "year": 2006
        },
        {
            "authors": [
                "Rudolf Fleischer",
                "Xi Wu",
                "Liwei Yuan"
            ],
            "title": "Experimental study of FPT algorithms for the directed feedback vertex set problem",
            "venue": "Algorithms ESA 2009, 17th Annual European Symposium,",
            "year": 2009
        },
        {
            "authors": [
                "Fedor Fomin",
                "Daniel Lokshtanov",
                "Saket Saurabh",
                "Meirav Zehavi"
            ],
            "title": "Kernelization: theory of parameterized preprocessing",
            "year": 2019
        },
        {
            "authors": [
                "Fedor V. Fomin",
                "Daniel Lokshtanov",
                "Neeldhara Misra",
                "Saket Saurabh"
            ],
            "title": "Planar F-deletion: Approximation, kernelization and optimal FPT algorithms",
            "venue": "In 53rd Annual IEEE Symposium on Foundations of Computer Science,",
            "year": 2012
        },
        {
            "authors": [
                "Jim Geelen",
                "Bert Gerards",
                "Bruce A. Reed",
                "Paul D. Seymour",
                "Adrian Vetta"
            ],
            "title": "On the odd-minor variant of Hadwiger\u2019s conjecture",
            "venue": "J. Comb. Theory, Ser. B,",
            "year": 2009
        },
        {
            "authors": [
                "M.C. Golumbic"
            ],
            "title": "Algorithmic Graph Theory and Perfect Graphs. ISSN",
            "venue": "Elsevier Science,",
            "year": 2004
        },
        {
            "authors": [
                "Jiong Guo",
                "Rolf Niedermeier"
            ],
            "title": "Invitation to data reduction and problem kernelization",
            "venue": "SIGACT News,",
            "year": 2007
        },
        {
            "authors": [
                "Pinar Heggernes",
                "Pim van \u2019t Hof",
                "Bart M.P. Jansen",
                "Stefan Kratsch",
                "Yngve Villanger"
            ],
            "title": "Parameterized complexity of vertex deletion into perfect graph classes",
            "venue": "Theor. Comput. Sci.,",
            "year": 2013
        },
        {
            "authors": [
                "Bart M.P. Jansen",
                "Jari J.H. de Kroon",
                "Michal Wlodarczyk"
            ],
            "title": "Vertex deletion parameterized by elimination distance and even less",
            "venue": "STOC \u201921: 53rd Annual ACM SIGACT Symposium on Theory of Computing, Virtual Event,",
            "year": 2021
        },
        {
            "authors": [
                "Bart M.P. Jansen",
                "Marcin Pilipczuk"
            ],
            "title": "Approximation and kernelization for chordal vertex deletion",
            "venue": "SIAM J. Discret. Math.,",
            "year": 1120
        },
        {
            "authors": [
                "Subhash Khot"
            ],
            "title": "On the power of unique 2-prover 1-round games",
            "venue": "Proceedings on 34th Annual ACM Symposium on Theory of Computing, May 19-21,",
            "year": 2002
        },
        {
            "authors": [
                "Stefan Kratsch"
            ],
            "title": "Recent developments in kernelization: A survey",
            "venue": "Bull. EATCS,",
            "year": 2014
        },
        {
            "authors": [
                "Stefan Kratsch",
                "Magnus Wahlstr\u00f6m"
            ],
            "title": "Representative sets and irrelevant vertices: New tools for kernelization",
            "venue": "J. ACM,",
            "year": 2020
        },
        {
            "authors": [
                "Jason Li",
                "Jesper Nederlof"
            ],
            "title": "Detecting feedback vertex sets of size k in O\u2217(2.7k) time",
            "venue": "Proceedings of the 2020 ACM-SIAM Symposium on Discrete Algorithms,",
            "year": 2020
        },
        {
            "authors": [
                "Daniel Lokshtanov"
            ],
            "title": "Wheel-free deletion is W[2]-hard",
            "venue": "Parameterized and Exact Computation, Third International Workshop,",
            "year": 2008
        },
        {
            "authors": [
                "Daniel Lokshtanov",
                "Neeldhara Misra",
                "Saket Saurabh"
            ],
            "title": "Kernelization - preprocessing with a guarantee",
            "venue": "The Multivariate Algorithmic Revolution and Beyond - Essays Dedicated to Michael R. Fellows on the Occasion of His 60th Birthday,",
            "year": 2012
        },
        {
            "authors": [
                "Daniel Lokshtanov",
                "N.S. Narayanaswamy",
                "Venkatesh Raman",
                "M.S. Ramanujan",
                "Saket Saurabh"
            ],
            "title": "Faster parameterized algorithms using linear programming",
            "venue": "ACM Trans. Algorithms,",
            "year": 2014
        },
        {
            "authors": [
                "Daniel Lokshtanov",
                "M.S. Ramanujan",
                "Saket Saurabh",
                "Meirav Zehavi"
            ],
            "title": "Parameterized complexity and approximability of directed odd cycle transversal",
            "venue": "Proceedings of the 2020 ACM-SIAM Symposium on Discrete Algorithms,",
            "year": 2020
        },
        {
            "authors": [
                "Konstantin Makarychev",
                "Yury Makarychev"
            ],
            "title": "Perturbation resilience",
            "venue": "URL: https://doi.org/10.1017/9781108637435.008,",
            "year": 2020
        },
        {
            "authors": [
                "George L. Nemhauser",
                "Leslie E. Trotter Jr."
            ],
            "title": "Vertex packings: Structural properties and algorithms",
            "venue": "Math. Program.,",
            "year": 1975
        },
        {
            "authors": [
                "Bruce A. Reed",
                "Kaleigh Smith",
                "Adrian Vetta"
            ],
            "title": "Finding odd cycle transversals",
            "venue": "Oper. Res. Lett.,",
            "year": 2004
        },
        {
            "authors": [
                "Neil Robertson",
                "Paul D. Seymour"
            ],
            "title": "Graph minors. XIII. The disjoint paths problem",
            "venue": "J. Comb. Theory, Ser. B,",
            "year": 1995
        },
        {
            "authors": [
                "Karthik C. S",
                "Bundit Laekhanukit",
                "Pasin Manurangsi"
            ],
            "title": "On the parameterized complexity of approximating dominating set",
            "venue": "J. ACM,",
            "year": 2019
        },
        {
            "authors": [
                "A. Schrijver"
            ],
            "title": "Combinatorial Optimization - Polyhedra and Efficiency",
            "year": 2003
        },
        {
            "authors": [
                "Leslie G. Valiant",
                "Vijay V. Vazirani"
            ],
            "title": "NP is as easy as detecting unique solutions",
            "venue": "Theor. Comput. Sci.,",
            "year": 1986
        },
        {
            "authors": [
                "Karsten Weihe"
            ],
            "title": "Covering trains by stations or the power of data reduction",
            "venue": "In Algorithms and Experiments (ALEX98),",
            "year": 1998
        },
        {
            "authors": [
                "Karsten Weihe"
            ],
            "title": "On the differences between \u201cpractical\u201d and \u201capplied",
            "venue": "In Algorithm Engineering, volume 1982 of Lecture Notes in Computer Science,",
            "year": 2000
        },
        {
            "authors": [
                "Sebastian Wernicke"
            ],
            "title": "On the algorithmic tractability of single nucleotide polymorphism (SNP) analysis and related problems",
            "venue": "diplom.de,",
            "year": 2014
        }
    ],
    "sections": [
        {
            "text": "2012 ACM Subject Classification Theory of computation \u2192 Graph algorithms analysis; Theory of computation \u2192 Packing and covering problems; Theory of computation \u2192 Linear programming; Theory of computation \u2192 Fixed parameter tractability\nKeywords and phrases fixed-parameter tractability, essential vertices, covering versus packing\nFunding Funded by the European Research Council (ERC) under the European Union\u2019s Horizon 2020 research and innovation programme (grant agreement No 803421, ReduceSearch).\n1 Introduction\nBackground and motivation Due to the enormous potential of preprocessing to speed up the algorithmic solution to combinatorial problems [1, 2, 3, 46, 47], a large body of work in theoretical computer science is devoted to understanding its power and limitations. Using the notion of kernelization [6, 21, 23, 27, 36, 32] from parameterized complexity [13, 16] it is possible to formulate a guarantee on the size of the instance after preprocessing based on the parameter of the original instance. Under this model, a good preprocessing algorithm is a kernelization algorithm: given a parameterized instance (x, k), it outputs an equivalent instance (x\u2032, k\u2032) of the same decision problem such that |x\u2032|+ k\u2032 \u2264 f(k) for some function f that bounds the size of the kernel. Research into kernelization led to deep algorithmic insights, including connections to protrusions and finite-state properties [7], well-quasi ordering [24], and matroids [33]; these positive results were complemented by impossibility results [14, 17, 33] delineating the boundaries of tractability.\nResults on kernelization led to profound insights into the limitations of polynomial-time data compression for NP-hard problems. However, as recently advocated [15], the definition of kernelization only gives guarantees on the size of the instance after preprocessing, which does not directly correspond to the running time of subsequently applied algorithms. If the preprocessed instance is not solved by brute force, but via a fixed-parameter tractable algorithm whose running time is of the form f(k) \u00b7 nO(1), then the exponential dependence\nar X\niv :2\n20 7.\n00 38\n6v 1\n[ cs\n.D S]\n1 J\nul 2\n02 2\nin the running time is on the value of the parameter k, which is not guaranteed to decrease via kernelization. In fact, if P 6= NP then no polynomial-time preprocessing algorithm can guarantee to always decrease the parameter of an NP-hard fixed-parameter tractable problem, as iterating the preprocessing algorithm would lead to its solution in polynomial time. In this work, we develop a new analysis of preprocessing aimed at reducing the search space of the follow-up algorithm. We apply this framework to combinatorial optimization problems on graphs, whose goal is to find a minimum vertex-subset satisfying certain properties. The main idea behind the framework is to define formally what it means for a vertex to be essential for making reasonable solutions to the problem, and to prove that an efficient preprocessing algorithm can detect a subset of an optimal solution that contains all such essential vertices.\nBefore stating our results, we introduce and motivate the model. We consider vertexsubset minimization problems on (possibly directed) graphs, in which the goal is to find a minimum vertex subset having a certain property. Examples of the problems we study include Vertex Cover, Odd Cycle Transversal, and Dominating Set. The analysis of such minimization problems, parameterized by the size of the solution, has played an important role in the literature (cf. [10, 18, 29, 41, 43]). Our starting point is the thesis that a good preprocessing algorithm should reduce the search space. Since many graph problems are known to be fixed-parameter tractable when parameterized by the size of the solution, we can reduce the search space of these FPT algorithms by finding one or more vertices which are part of an optimal solution, thereby decreasing the size of the solution still to be found in the reduced instance (i.e. the parameter value).\nSince in general no polynomial-time algorithm can guarantee to identify at least one vertex that belongs to an optimal solution, the guarantee of the effectiveness of the preprocessing algorithm should be stated in a more subtle way. When solving problems by hand, one sometimes finds that certain vertices v are easily identified to belong to an optimal solution, as avoiding them would force the solution to contain a prohibitively large number of alternative vertices and therefore be suboptimal. Can an efficient preprocessing algorithm identify those vertices that cannot be avoided when making an optimal solution?\nSince many NP-hard problems remain hard even when there is a unique solution [45], this turns out to be too much to ask as it would allow instances with unique solutions to be solved in polynomial time, which leads to NP = RP . We therefore have to relax the requirements on the preprocessing guarantee slightly, as follows. For an instance of a vertex-subset minimization problem \u03a0 on a graph G, we denote the minimum size of a solution on G by OPT\u03a0(G). For a fixed c \u2208 R\u22651, we say a vertex v \u2208 V (G) is c-essential for \u03a0 on G if all feasible solutions S \u2286 V (G) for \u03a0 whose total size is at most c \u00b7OPT\u03a0(G) contain v. Based on this notion, we can ask ourselves: can an efficient preprocessing algorithm identify part of an optimal solution if there is at least one c-essential vertex?\nPhrased in this way, the algorithmic task becomes more tractable. For example, for the Vertex Cover problem, selecting all vertices that receive the value 1 in an optimal half-integral solution to the LP-relaxation results in a set S which is contained in some optimal solution (by the Nemhauser-Trotter theorem [40], cf [13, \u00a72.5]), and at the same time includes all 2-essential vertices: any vertex v /\u2208 S only has neighbors of value 12 and 1, which implies that the set X of vertices other than v whose value in the LP relaxation is at least 12 , forms a feasible solution which avoids v. Its cardinality is at most twice the cost of the LP relaxation and therefore X is a 2-approximation. Hence S contains all 2-essential vertices.\nThis example shows that a preprocessing step that detects c-essential vertices without any additional information is sometimes possible. However, to be able to extend the scope of our results also to problems which do not have polynomial-time constant-factor approximations,\nwe slightly relax the requirements on the preprocessing algorithm as follows. Let \u03a0 be a minimization problem on graphs whose solutions are vertex subsets and let c \u2208 R\u22651.\nc-Essential detection for \u03a0 Input: A graph G and integer k. Task: Find a vertex set S \u2286 V (G) such that:\nG1 if OPT\u03a0(G) \u2264 k, then there is an optimal solution in G containing all of S, and G2 if OPT\u03a0(G) = k, then S contains all c-essential vertices.\nIn this model, the preprocessing task is facilitated by supplying an additional integer k in the input. The correctness properties of the output S are formulated in terms of k. If OPT\u03a0(G) \u2264 k, then the set S is required to be part of an optimal solution. The upper bound on OPT\u03a0(G) is useful to the algorithm: whenever the algorithm establishes that avoiding v would incur a cost of more than k, it is safe to add v to S. If OPT\u03a0(G) = k, then the algorithm should guarantee that S contains all c-essential vertices. Knowing a lower bound on OPT\u03a0(G) is useful to the algorithm in case it can establish that any optimal solution containing v can be transformed into one avoiding v whose cost is (c\u2212 1) \u00b7 k larger, which yields a c-approximation if (c\u2212 1) \u00b7 k \u2264 (c\u2212 1) OPT\u03a0(G). Hence vertices for which such a replacement exists are not c-essential and may safely be left out of S.\nResults We present polynomial-time algorithms for c-Essential detection for \u03a0 for a range of vertex-deletion problems \u03a0 and small values of c; typically c \u2208 {2, 3}. Example applications include Vertex Cover and Feedback Vertex Set, and also Chordal Vertex Deletion (for which no O(1)-approximation is known), Odd Cycle Transversal (for which no O(1)-approximation exists, assuming the Unique Games Conjecture [31, 48]), and even Directed Odd Cycle Transversal (which is W [1]-hard parameterized by solution size [38]).\nThe model of c-Essential detection for \u03a0 is chosen such that the detection algorithms whose correctness is formulated with respect to the value of k, can be used as a preprocessing step to optimally solve vertex-subset problems without any knowledge of the optimum. Let E\u03a0c (G) denote the set of c-essential vertices in G, which is well-defined since all optimal solutions contain all c-essential vertices. By using a preprocessing step that detects a superset of the c-essential vertices in the solution, we can effectively improve the running-time guarantee for FPT algorithms parameterized by solution size from f(OPT\u03a0(G)) \u00b7 |V (G)|O(1), to f(OPT\u03a0(G)\u2212 |E\u03a0c (G)|) \u00b7 |V (G)|O(1). This leads to the following results.\nI Theorem 1.1. For each problem \u03a0 with coefficient c and parameter dependence f listed in Table 1 that is not W [1]-hard, there is an algorithm that, given a graph G, outputs an optimal solution in time f(`) \u00b7 |V (G)|O(1), where ` := OPT\u03a0(G)\u2212 |E\u03a0c (G)| is the number of vertices in an optimal solution which are not c-essential.\nHence the running time for solving these problems does not depend on the total size of an optimal solution, only on the part of the solution that does not consist of c-essential vertices. The theorem effectively shows that by employing c-Essential detection for \u03a0 as a preprocessing step, the size of the search space no longer depends on the total solution size but only on its non-essential vertices.\nWe also prove limitations to this approach. Assuming FPT 6= W [1], for Dominating Set, Perfect Deletion (in which the goal is to obtain a perfect graph by vertex deletions) and Wheel-Free Deletion, there is no polynomial-time algorithm for c-Essential detection for any c \u2208 R\u22651. In fact, we can even rule out such algorithms running in time f(k)\u00b7|V (G)|O(1).\nThese results are based on FPT-inapproximability results for Dominating Set [43] and existing reductions [28, 35] to the mentioned vertex-deletion problems.\nTechniques The main work lies in the algorithms for c-Essential detection, which are all based on covering/packing duality for forbidden induced subgraphs to certain graph classes, or variations thereof in terms of (integer) solutions to certain linear programs and their (integer) duals. To understand the relation between detecting essential vertices and covering/packing duality, consider the Odd Cycle Transversal problem (OCT). Following the argumentation for the classic Erd\u0151s-P\u00f3sa theorem [19], in general there is no constant c such that any graph either has an odd cycle transversal of size c \u00b7 k, or a packing of k vertex-disjoint odd cycles. However, we show that a linear packing/covering relation holds in the following slightly different setting. If G \u2212 v is bipartite (so all odd cycles of G intersect v), then the minimum size of an OCT avoiding v equals the maximum cardinality of a packing of odd cycles which pairwise intersect only at v. We can leverage this statement to prove that any vertex v which is not at the center of a flower (see Definition 3.1) of more than OPToct(G) odd cycles, is not 2-essential: for any optimal solution X containing v, the graph G\u2032 := G \u2212 (X \\ {v}) becomes bipartite after removal of v and by assumption does not contain a packing of more than OPToct(G) odd cycles pairwise intersecting at v. So by covering/packing duality on G\u2032, it has an OCT X \u2032 of size at most OPToct(G) avoiding v, so that (X \\ {v}) \u222a X \u2032 is a 2-approximation in G which avoids v, showing that v is not 2-essential. Since v is clearly contained in an optimal solution whenever there is a flower of more than OPToct(G) odd cycles centered at v, this yields a method for c-Essential detection when using a known reduction [25] to Maximum Matching to test for a flower of odd cycles.\nOrganization After presenting preliminaries in Section 2, we give algorithms to detect essential vertices based on covering/packing duality in Section 3 and based on integrality gaps in Section 4. In Section 5 we show how these detection subroutines can be used to improve the parameter dependence of FPT algorithms parameterized by solution size. The lower bounds are presented in Section 6. The investigation of c-essential vertices has close connections to the area of perturbation stability, which we briefly explore in Section 7. We conclude in Section 8.\n2 Preliminaries\nWe consider finite simple graphs, some of which are directed. We use standard notation for graph algorithms; any terms not defined here can be found in the textbook by Cygan et al. [13]. We consider vertex-deletion problems on graphs. For a graph class C, a C-modulator in a graph G is a vertex set S \u2286 V (G) such that G \u2212 S \u2208 C. The minimum size of a C-modulator in G is denoted OPTC(G). The corresponding minimization problem is defined as follows. C-Deletion Input: A graph G. Task: Find a minimum-size vertex-subset S \u2286 V (G) such that G\u2212 S \u2208 C. Throughout this paper we consider hereditary graph classes C. These can be characterized by a (possibly infinite) set of forbidden induced subgraphs denoted forb(C). The C-Deletion problem is equivalent to finding a minimum set S \u2286 V (G) such that no induced subgraph of G \u2212 S is isomorphic to a graph in forb(C). We say that such a set S hits all graphs from forb(C) in G. For these classes the vertex set V (G) is a trivial C-modulator (since the empty graph is in all hereditary classes), which ensures that the task of finding a smallest modulator is always well-defined.\nA graph is perfect if for every induced subgraph the size of a largest clique is equivalent to its chromatic number. Equivalently, a graph is perfect if it has no induced cycle of odd length at least five or its edge complement (cf. [26]). A graph is chordal if it has no induced cycle of length at least four. A graph is bipartite if its vertex set can be partitioned into two independent sets, or equivalently, it does not contain an odd-length cycle. Given a graph G and a set T \u2286 V (G), a T -path is a path with at least one edge with both endpoints contained in T . A T -path is odd if it has an odd number of edges. For u, v \u2208 V (G), a (u, v)-separator is a set S \u2286 V (G) \\ {u, v} that disconnects u from v. If G is a directed graph, then in G\u2212 S there is no directed path from u to v instead.\n3 Positive results via Packing Covering\nIn this section we provide polynomial-time algorithms for c-Essential detection for \u03a0 for various problems \u03a0. The case for the Vertex Cover problem was given in Section 1. The results in this section are all based on packing/covering duality (cf. [12], [44, \u00a773]). Towards this end, we generalize the notion of flowers, which played a key role in kernelization for Feedback Vertex Set [8]. While flowers were originally formulated as systems of cycles (forbidden structures for Feedback Vertex Set) pairwise intersecting in a single common vertex, we generalize the notion to near-packings of arbitrary structures here.\nI Definition 3.1. Let F be a set of graphs. For a graph G and v \u2208 V (G), a (v,F)-flower with p petals in G is a set {C1, C2, . . . , Cp} of induced subgraphs of G such that each Ci (with i \u2208 [p]) is isomorphic to some member of Fand such that V (Ci) \u2229 V (Cj) = {v} for all distinct i, j \u2208 [p]. The F-flower number of a vertex v \u2208 V (G), denoted \u0393F (G, v), is the largest integer p for which there is a (v,F)-flower in G with p petals.\nWe show a general theorem for finding 2-essential vertices for C-deletion if a maximum (v,forb(C))-flower can be computed in polynomial-time. It applies to those classes C where graphs with G \u2212 v \u2208 C obey a min-max relation between C-modulators avoiding v and packings of forbidden induced subgraphs intersecting only at v.\nI Theorem 3.2. Let C be a hereditary graph class such that, for any graph G and vertex v \u2208 V (G) with G \u2212 v \u2208 C, the minimum size of a C-modulator avoiding v in G equals \u0393forb(C)(G, v). Suppose there exists a polynomial-time algorithm A that, given a graph G and vertex v \u2208 V (G), computes \u0393forb(C)(G, v). Then there is a polynomial-time algorithm that solves 2-Essential detection for C-Deletion.\nProof. Apply algorithm A to each vertex v \u2208 V (G) and let S be the set of vertices for which it finds that \u0393forb(C)(G, v) > k. We argue that Properties G1 and G2 are satisfied. If OPTC(G) \u2264 k, then every vertex in S is contained in every optimal solution for G since a size-k solution cannot hit a flower of k + 1 petals from forb(C) without using v. Therefore Property G1 is satisfied. Next suppose that OPTC(G) = k and let X be an optimal solution. We argue that each vertex v /\u2208 S is not 2-essential. Clearly this holds for any vertex v /\u2208 X, so suppose that v \u2208 X. Note that for every vertex v /\u2208 S we have \u0393forb(C)(G, v) \u2264 k, which implies that \u0393forb(C)(G\u2032, v) \u2264 k where G\u2032 := G\u2212 (X \\ {v}). Note that since G\u2032 \u2212 v \u2208 C, by assumption there exists a C-modulator X \u2032 \u2286 V (G\u2032) \\ {v} in G\u2032 of size \u0393forb(C)(G\u2032, v) \u2264 k. Observe that (X \\ {v}) \u222a X \u2032 is a C-modulator in G of size at most 2k that avoids v and therefore v is not 2-essential. J\nTheorem 3.2 allows us to conclude the following result for Feedback Vertex Set (FVS) and its directed variant (DFVS) using Gallai\u2019s theorem and Menger\u2019s theorem, respectively.\nI Lemma 3.3. There are polynomial-time algorithms for 2-Essential detection for \u03a0 for \u03a0 \u2208 {FVS, DFVS}.\nProof. The FVS problem corresponds to C-Deletion where C is the set of acyclic graphs and forb(C) is the set of cycles. We argue that the preconditions of Theorem 3.2 hold. The existence of a polynomial-time algorithm that computes \u0393forb(C)(G, v) is implied by Gallai\u2019s theorem (as written in Cygan et al. [13, Theorem 9.2]), since a flower of cycles through v corresponds to a collection of paths connecting pairs of distinct vertices of NG(v) to each other in the graph G\u2212 v. By applying Gallai\u2019s theorem to G\u2212 v with T = NG(v), we get that \u0393forb(C)(G, v) is the largest integer k such that the outcome of Gallai\u2019s theorem applied with the integer k\u2212 1 is a family of k pairwise vertex-disjoint T -paths in G\u2212 v. For the first precondition of Theorem 3.2, we argue that when G\u2212 v is acyclic, the maximum number of petals in a (v,forb(C))-flower is equivalent to the minimum cardinality of a set S that hits all cycles through v.\nB Claim 3.4 ([5, page 67]). Let T be a tree and let F be a collection of connected subgraphs of T . The maximum size packing of vertex-disjoint members of F equals the minimum size of a vertex set intersecting all of F .\nBy noting that any cycle through v in G corresponds to a path between two neighbors in a connected component of G\u2212 v which is a tree, the claim above directly implies the desired result. It follows there is a polynomial-time algorithm for 2-Essential detection for FVS by Theorem 3.2.\nThe DFVS problem corresponds to C-Deletion where C is the set of directed acyclic graphs and forb(C) is the set of directed cycles. The preconditions of Theorem 3.2 follow from known results, see for instance the work of Fleischer et al. [22], we repeat it for completeness. Consider any directed graph D and vertex v \u2208 V (D). Obtain a graph D\u2032 by splitting v into vi and vo. Attach every incoming arc of v to vi and every outgoing arc to vo. Compute a minimum (vi, vo)-separator S \u2286 V (D\u2032) \\ {vi, vo} in D\u2032. By Menger\u2019s theorem, its size is equivalent to the maximum number of internally vertex-disjoint paths from vi to vo. Since\nany (vi, vo)-path in D\u2032 is a directed cycle containing v in D, it follows that \u0393forb(C)(D, v) can be computed in polynomial time. Finally, suppose that D \u2212 v is a directed acyclic graph. Note that then S is a C-modulator avoiding v of size \u0393forb(C)(D, v). By Theorem 3.2 it follows that there is a polynomial-time algorithm for 2-Essential detection for DFVS. J"
        },
        {
            "heading": "3.1 Odd cycle transversal",
            "text": "Next, we consider Odd Cycle Transversal (OCT), which corresponds to C-Deletion where C is the class of bipartite graphs and forb(C) is consists of all odd cycles. In order to apply Theorem 3.2 to OCT, we first argue that the class of bipartite graphs satisfies the preconditions. The proof is similar to that of Geelen et al. [25, Lemma 11] who reduce the problem of packing odd cycles containing v to a matching problem. We note that, although their result can be used to obtain a 3-essential detection algorithm, we will show (Lemma 3.8) how to efficiently detect 2-essential vertices as well. If the graph resulting from their construction has a large matching, then there is a large (v,forb(C))-flower. If on the other hand there is no large matching, then the Tutte-Berge formula is used to obtain a set of size 2k that hits all the odd cycles passing through v. We show that if the graph G\u2212 v is bipartite instead, then this second argument can be improved to obtain a hitting set of size k by noting that the lack of a large matching implies that there is a small vertex cover due to K\u0151nig\u2019s theorem. This is below, using the viewpoint that odd cycles in G correspond to odd T -paths in G\u2212 v for T = NG(v).\nI Lemma 3.5. For any undirected graph G and set T \u2286 V (G), a maximum packing of odd T -paths can be computed in polynomial time. Moreover, if G is bipartite then the cardinality of a maximum packing of odd T -paths is equal to the minimum size of a vertex set which intersects all odd T -paths.\nProof. We reduce to matching as in [25, Lemma 11]. Construct a graph H as follows. For each v \u2208 V (G) \\ T , let v\u2032 /\u2208 V (G) be a copy of v. Let V (H) = V (G) \u222a {v\u2032 | v \u2208 V (G) \\ T} and E(H) = E(G) \u222a {u\u2032v\u2032 | uv \u2208 E(G \u2212 T )} \u222a {vv\u2032 | v \u2208 V (G) \\ T}. Note that the graph H consists of the disjoint union of G and a copy of G \u2212 T , with an added edge between v \u2208 V (G) \\ T and its copy v\u2032. Geelen et al. [25] mention that there is a 1-1 correspondence between odd T -paths in G and certain augmenting paths in H. For completeness we give a self-contained argument.\nB Claim 3.6. Graph G contains k vertex-disjoint odd T -paths if and only if H has a matching M of size |V (G) \\ T |+ k. Furthermore, given a matching M in H of size |V (G) \\ T |+ k we can compute a set of k vertex-disjoint odd T -paths in polynomial time.\nProof. (\u21d2) Let P = (P1, . . . , Pk) be a set of k vertex-disjoint odd T -paths in G. Consider a path P = (v1, . . . , v2`) \u2208 P, where ` \u2265 1. First note that we can assume that V (P ) \u2229 T = {v1, v2`}, since if vi \u2208 T for some 1 < i < 2`, then either (v1, . . . , vi) or (vi, . . . , v2`) is an odd T -path and we can update P accordingly. Construct a matching M in H as follows. For any path P = (v1, . . . , v2`) \u2208 P, add the edges v1v2, v\u20322v\u20323, . . . , v2`\u22121v2`, alternating between original vertices and copy vertices. This is possible as P is of odd length. For any vertex in u \u2208 V (G) \\ T that is not contained in an odd T -path, we add uu\u2032 to M . Observe that at least 2|V (G) \\ T |+ 2k vertices are matched, therefore |M | \u2265 |V (G) \\ T |+ k as desired.\n(\u21d0) Let M be a matching of size |V (G) \\ T | + k. If M contains both uv and u\u2032v\u2032 for u, v \u2208 V (G) \\ T , then update M by removing them and inserting uu\u2032 and vv\u2032 instead. If for v \u2208 V (G) \\ T only one of v and v\u2032 is matched, and it is not matched to its copy, then match it to its copy instead. Afterwards let E\u2032 := {uv \u2208 E(G) | uv \u2208M \u2228 u\u2032v\u2032 \u2208M}. Observe that\nin G[E\u2032], each vertex in V (G) \\ T has degree 0 or 2. For each v \u2208 V (G) \\ T such that v has degree 0 in G[E\u2032], add vv\u2032 to M if it is not in already. Note that all vertices of H \u2212 T are matched. It follows that at least 2k vertices in T are matched by M and they have degree 1 in G[E\u2032]. Observe that G[E\u2032] is a collection of paths and cycles with all degree-1 vertices in T . We get that there are k T -paths in G that are of odd length by construction (every even numbered edge in G[E\u2032] originated from the copy part of H). Note that we can find them in polynomial time. C\nSince a maximum matching can be computed in polynomial time, by the claim above we get that a maximum packing of vertex-disjoint odd T -paths can be computed in polynomial time. Next we prove the second part of the statement.\nB Claim 3.7. If G is bipartite and a maximum matching M in H has size |V (G) \\ T |+ k, then there is a set S \u2286 V (G) of size at most k such that G\u2212 S has no odd-length T -path.\nProof. Observe that since G is bipartite, the graph H is bipartite as well. By K\u0151nig\u2019s theorem [44, Theorem 16.2], H has a vertex cover X of size |V (G) \\ T | + k. Let S = (X \u2229 T ) \u222a {u | {u, u\u2032} \u2286 X}. Note that for each u \u2208 V (G) \\ T , at least one of u \u2208 X or u\u2032 \u2208 X must hold to cover the edge uu\u2032, thereby already accounting for |V (G) \\ T | vertices of the cover. It follows that |S| \u2264 k. We argue that S hits all odd-length T -paths in G.\nFor the sake of contradiction suppose there is some odd-length T -path from t1 \u2208 T to t2 \u2208 T \\ {t1} in G\u2212 S. Let P = (t1, v1, . . . , v2`, t2) be a (not necessarily induced) shortest odd T -path. Note that neither of t1 and t2 belong to X by construction of S. Furthermore P \\ {t1, t2} \u2286 V (G) \\ T , as otherwise we could construct a shorter odd-length T -path. Consider the vertices V (P ) \u222a {v\u20321, . . . , v\u20322`} \u2286 V (H). By construction of S, the vertex cover X has exactly one of vi and v\u2032i for each i \u2208 [2`]. Observe that for it to be a vertex cover, X must contain vertices of P \\ {t1, t2} and their copies in an alternating fashion since for each edge vi, vi+1 of P , the graph H contains edges viv\u2032i, vi+1v\u2032i+1, vivi+1, v\u2032iv\u2032i+1. Without loss of generality, let v1 \u2208 X. It follows that v2` /\u2208 X. But this contradicts that X is a vertex cover as v2`t2 is not covered. We conclude that S hits all odd-length T -paths in G. C\nBy Claim 3.6, a maximum packing of k of vertex-disjoint odd T -paths in G implies a matching in H of size |V (G) \\ T |+ k. By Claim 3.7, we can create a set of size at most k that intersects all odd T -paths in the bipartite graph G. Clearly such a set has size at least k. It follows that if G is bipartite, then the cardinality of a maximum packing of odd T -paths is equal to the minimum size of a vertex set which intersects all odd T -paths. (For completeness, we remark that this last property can also be derived from Menger\u2019s theorem: in a bipartite graph with bipartition into A \u222aB, a T -path is odd if and only if its endpoints belong to different partite sets, so a maximum packing of odd T -paths is equivalent to a maximum set of vertex-disjoint paths between A \u2229 T and B \u2229 T .) J\nBy observing that odd T -paths in G\u2212 v directly correspond to flowers with odd cycles pairwise intersecting at v in G, Lemma 3.5 and Theorem 3.2 imply the following.\nI Lemma 3.8. There is a polynomial-time algorithm for 2-Essential detection for OCT."
        },
        {
            "heading": "3.2 Directed odd cycle transversal",
            "text": "The DOCT problem corresponds to C-deletion where forb(C) consists of all directed cycles of odd length. Using Menger\u2019s theorem on an auxiliary graph, we can detect 3-essential vertices for this problem.\nI Lemma 3.9. There is a polynomial-time algorithm for 3-Essential detection for DOCT.\nProof. Consider an instance (D, k) of 3-Essential detection for DOCT. Construct the so called label-extended graph (cf. [4, Section 3.1]) D\u2032 (initially empty) as follows. For each v \u2208 V (D), add v\u2032 and v\u2032\u2032 to V (D\u2032). For each directed arc (u, v) \u2208 E(D), add the arcs (u\u2032, v\u2032\u2032) and (u\u2032\u2032, v\u2032) to E(D\u2032). For each vertex v \u2208 V (D), compute a minimum (v\u2032, v\u2032\u2032)-separator Sv in D\u2032. Let Q \u2286 V (D) be the set of vertices with v \u2208 Q if and only if |Sv| \u2265 2k + 1. We argue that Q satisfies the output requirements G1 and G2.\nFirst, suppose that OPTDOCT(G) \u2264 k. Consider a vertex v \u2208 Q. Since |Sv| \u2265 2k + 1, by Menger\u2019s theorem there is a collection P \u20321, . . . , P \u2032|Sv| of internally vertex-disjoint (v\n\u2032, v\u2032\u2032)-paths in D\u2032. Let Pi = {u | {u\u2032, u\u2032\u2032} \u2229 V (P \u2032i ) 6= \u2205} and P = \u22c3 i{Pi}.\nB Claim 3.10. D[Pi] contains an odd directed cycle for each i \u2208 [|Sv|]. Furthermore, each u \u2208 V (D) \\ {v} intersects at most two vertex sets of P.\nProof. Each (v\u2032, v\u2032\u2032)-path P \u2032i in D\u2032 corresponds to a directed odd walk Pi in D, which contains a directed odd cycle. To see the second point, note that the paths in D\u2032 are vertex-disjoint and since we created two copies of each vertex, it follows that each vertex of V (D) \\ {v} intersects at most two vertex sets of P. C\nBy the claim above, any solution to DOCT avoiding v \u2208 Q has size at least k + 1. It follows that each vertex in Q belongs to every optimal solution and therefore Property G1 is satisfied. Next, suppose that OPTDOCT(G) = k. We argue that Q contains all 3-essential vertices. Consider an optimal solution X a vertex v /\u2208 Q. If v /\u2208 X, then clearly v is not 3-essential and there is nothing to show, so suppose that v \u2208 X. Let X \u2032 = {u \u2208 V (D) | {u\u2032, u\u2032\u2032} \u2229 Sv 6= \u2205}. Note that |X \u2032| \u2264 |Sv|. Since any odd cycle containing v corresponds to a (v\u2032, v\u2032\u2032)-path in D\u2032, and since Sv is a (v\u2032, v\u2032\u2032)-separator in D\u2032, it follows that (X \\ {v}) \u222aX \u2032 is a solution of size at most k \u2212 1 + 2k + 1 = 3k that avoids v. It follows that v is not 3-essential, therefore Q contains all 3-essential vertices and Property G2 is satisfied. J\nWe cannot use the approach based on computing a maximum (v,F)-flower for the Chordal Deletion problem; a simple reduction1 from Disjoint Paths [42] shows that it is NP-hard to compute a maximum (v,F)-flower when F is the set of chordless cycles of length at least four. In the next section, we will therefore use an approach based on the linear-programming relaxation to deal with Chordal Deletion.\n4 Positive results via Linear Programming\nConsider the following natural linear program for C-Deletion for hereditary graph classes C. The LP corresponding to an input graph G is defined on the variables (xu)u\u2208V (G), as follows.\nC-Deletion LP Objective: minimize \u2211 u\u2208V (G) xu. Subject to:\u2211 u\u2208V (H) xu \u2265 1 for each induced subgraph H of G isomorphic to a graph in forb(C),\n0 \u2264 xu \u2264 1 for each u \u2208 V (G).\n1 Starting from an instance (G, (s1, t1), . . . , (s`, t`)) of Disjoint Paths satisfying siti /\u2208 E(G) for all i \u2208 [`] (which is without loss of generality), insert a vertex v adjacent to A = \u22c3` i=1{si, ti} and insert all edges\nbetween vertices in A except siti for each i \u2208 [`].\nIn the corresponding integer program, the constraint 0 \u2264 xu \u2264 1 is replaced by xu \u2208 {0, 1}. We say that a minimization LP has integrality gap at most c for some c \u2208 R if the cost of an integer optimum is at most c times the cost of a fractional optimum. In general, the number of constraints in the C-Deletion LP can be exponential in the size of the graph. Using the ellipsoid method (cf. [44]), this can be handled using a separation oracle: a polynomial-time algorithm that, given an assignment to the variables, outputs a violated constraint if one exists. It is well-known (cf. [44, Thm. 5.10]) that linear programs with an exponential number of constraints can be solved in polynomial time using a polynomial-time separation oracle. To detect essential vertices, the integrality gap of a slightly extended LP will be crucial. We define the v-Avoiding C-Deletion LP for a graph G and distinguished vertex v \u2208 V (G) as the C-Deletion LP with the additional constraint that xv = 0. Hence its integral solutions correspond to C-modulators avoiding v.\nI Theorem 4.1. Let C be a hereditary graph class such that for each graph G and v \u2208 V (G) satisfying G\u2212v \u2208 C, the integrality gap of v-Avoiding C-Deletion on G is at most c \u2208 R\u22651. If there is a polynomial-time separation oracle for the C-Deletion LP, then there is a polynomial-time algorithm for (c + 1)-Essential detection for C-Deletion.\nProof. Given G and k, the detection algorithm initializes an empty vertex set S and proceeds as follows. For each v \u2208 V (G), it solves the v-Avoiding C-Deletion LP on G in polynomial time using the ellipsoid method via the polynomial-time separation oracle. If the linear program has cost more than k, we add v to S. After having considered all vertices v \u2208 V (G), the resulting set S is given as the output.\nTo see that the output satisfies Property G1, assume that OPTC(G) \u2264 k and consider some optimal C-modulator X of size at most k. If v /\u2208 X then X induces an integer feasible solution to the C-Deletion LP that satisfies the additional constraint xv = 0, so that the cost of the v-Avoiding C-Deletion LP is at most k and therefore v /\u2208 S. By contraposition, all vertices of S are indeed contained in some minimum C-modulator, namely X.\nTo see that the algorithm also satisfies Property G2, assume OPTC(G) = k and let X be a minimum C-modulator of size k. We prove that S contains all (c + 1)-essential vertices. Consider an arbitrary v /\u2208 S; we will argue it is not (c + 1)-essential by exhibiting a (c + 1)-approximate modulator avoiding v. Since v /\u2208 S, the v-Avoiding C-Deletion LP has a (fractional) solution x = (xu)u\u2208V (G) of cost at most k. If v /\u2208 X then v was not (c + 1)-essential, and there is nothing to show. So assume v \u2208 X.\nRestricting the assignment x to the vertices of the graph G\u2032 := G\u2212 (X \\ {v}) yields a feasible solution x\u2032 for the v-Avoiding C-Deletion LP on G\u2032, whose cost is at most that of x and therefore at most k. Note that G\u2032 \u2212 v equals G\u2212X and therefore belongs to C. So by the precondition to the theorem, the integrality gap for v-Avoiding C-Deletion on G\u2032 is at most c. Hence the solution x\u2032 can be rounded to an integral solution X \u2032 on G\u2032 of cost at most c \u00b7k and v /\u2208 X \u2032 due to the constraint xv = 0. Since G\u2212 ((X \\{v})\u222aX \u2032) = G\u2032\u2212X \u2032 \u2208 C, it follows that (X \\ {v})\u222aX \u2032 is a C-modulator of size at most c \u00b7 k + k = (c + 1)k avoiding v, which is therefore a (c+1)-approximation. Hence v is not (c+1)-essential whenever v /\u2208 S. J\nUsing known results on covering versus packing for chordless cycles in near-chordal graphs, the approach above can be used to detect essential vertices for Chordal Deletion. For the class of chordal graphs, the corresponding set of forbidden induced subgraphs is the class hole of all holes, i.e., induced chordless cycles of length at least four.\nI Lemma 4.2 ([30, Lemma 1.3]). There is a polynomial-time algorithm that, given a graph G and a vertex v such that G\u2212 v is chordal, outputs a (v,hole)-flower with p-petals and a set S \u2286 V (G) \\ {v} of size at most 12p such that G\u2212 S is chordal.\nUsing this covering/packing statement, we can bound the relevant integrality gap and thereby detect essential vertices for Chordal Deletion.\nI Lemma 4.3. There is a polynomial-time algorithm for 13-Essential detection for Chordal Deletion.\nProof. We first argue that the integrality gap for v-Avoiding Chordal Deletion is bounded by 12 when G\u2212v is chordal. By Lemma 4.2, there is a value of p such that G contains both a (v, hole)-flower {C1, . . . , Cp} with p-petals and a v-avoiding chordal modulator S of size at most 12p. Due to the constraint xv = 0, any fractional solution to the linear program has a cost of at least p, since \u2211 u\u2208Ci xu \u2265 1 while xv = 0 and the holes only intersect at v. At the same time, an integral solution has cost at most 12p as S is such a solution. Hence the integrality gap is at most 12.\nTo invoke Theorem 4.1, it suffices to argue that there is a polynomial-time separation oracle for the linear program. Such a separation oracle is known (cf. [30, \u00a710.1]); we repeat it here for completeness. To test whether an assignment x = (xu)u\u2208V (G) satisfies all constraints, it suffices to do the following. For each u \u2208 V (G) we find the minimum total weight of any hole involving u, as follows. For each pair of distinct non-adjacent p, q \u2208 NG(u) we use Dijkstra\u2019s algorithm to find the minimum weight W of a path P from p to q in the graph G\u2212 (NG[u] \\ {p, q}) where the values of x are used as the vertex weights. There is a hole of weight less than 1 through (p, u, q) if and only if W +xu < 1. Moreover, if W +xu < 1 then by extending path P with the vertex u we find a hole whose total weight is less than 1 and therefore a violated constraint. The fact that we remove all vertices of NG[u] other than p and q ensures that the cycle we get in this way is induced, while the non-adjacency of p and q ensures it has at least four vertices. Hence after iterating over all choices of u, p, q we either find a violated constraint or conclude that the assignment is feasible. This shows that Theorem 4.1 is applicable and concludes the proof. J\n5 Consequences for Parameterized Algorithms\nIn this section we show how the algorithms for c-Essential detection from the previous section can be used to solve C-Deletion for various classes C, despite the fact that the detection algorithms only work when certain guarantees on k are met. The main theorem connecting the detection problem to solving C-Deletion is the following.\nI Theorem 5.1. Let A be an algorithm that, given a graph G and an integer k, runs in time f(k) \u00b7 |V (G)|O(1) for some non-decreasing function f and returns a minimum-size C-modulator if there is one of size at most k. Let B be a polynomial-time algorithm for cEssential detection for C-Deletion. Then there is an algorithm that, given a graph G, outputs a minimum-size C-modulator in time f(`) \u00b7 |V (G)|O(1), where ` = OPTC(G)\u2212|Ec(G)| is the c-non-essentiality.\nProof. First we describe the algorithm as follows. For each 0 \u2264 k \u2264 |V (G)|, let Sk be the result of running B on (G, k), let Gk := G\u2212 Sk, and let bk := k \u2212 |Sk|.\nLetting L be the list of all triples (Gk, Sk, bk) sorted in increasing order by their third component bk, proceed as follows. For each (Gk, Sk, bk) \u2208 L, run A on (Gk, bk) to find a minimum C-modulator SA of size at most bk, if one exists. If |SA| = bk, then output SA \u222aSk as a minimum C-modulator in G.\nTo analyze the algorithm, we first argue it always outputs a solution. For the call with k\u2217 = OPTC(G), both conditions of the detection problem are met. Hence by Property G1\nthe set Sk\u2217 is contained in a minimum modulator in G, so that OPTC(G \u2212 Sk\u2217) = OPTC(G) \u2212 |Sk\u2217 | = k\u2217 \u2212 |Sk\u2217 |. Therefore graph Gk\u2217 = G \u2212 Sk\u2217 has a modulator of size at most bk\u2217 = OPTC(G\u2212 Sk\u2217) and none which are smaller, so that A correctly outputs a modulator of size bk\u2217 . In turn, this causes the overall algorithm to terminate with a solution.\nHaving established that the algorithm outputs a solution, we proceed to show that it outputs a minimum-size modulator whenever it outputs a solution (which may be in an earlier iteration than for k\u2217 = OPTC(G)). Let k\u2032 be the value of k that is reached when the algorithm outputs a solution SA \u222a Sk\u2032 . Then we know:\n1. algorithm A found a minimum-size modulator SA in Gk\u2032 of size at most bk\u2032 , and 2. the set SA \u222a Sk\u2032 is a modulator in G, since SA is a modulator in Gk\u2032 = G \u2212 Sk\u2032 , and\ntherefore OPTC(G) \u2264 bk\u2032 + |Sk\u2032 | = k\u2032.\nTo see that the algorithm is correct, notice that, since OPTC(G) \u2264 k\u2032, the set Sk\u2032 is contained in some minimum-size modulator for G (Property G1 of B). Hence OPTC(Gk\u2032) = OPTC(G) \u2212 |Sk\u2032 |. Since A outputs a minimum-size modulator if there is one of size at most bk, we have |SA| = OPTC(G)\u2212 |Sk\u2032 |, so that A(Gk\u2032) \u222a Sk\u2032 is a feasible modulator of size OPTC(G) and therefore optimal.\nNow we prove the desired running-time bound. First of all, notice that we can determine the list L in polynomial time by running B once for each value of k (which is at most |V (G)|). By how we sorted L, we compute A(Gk, bk) only when bk \u2264 bk\u2217 , as we argued above that if the algorithm has not already terminated, it does so after reaching k\u2217 = OPTC(G). Hence the calls to algorithm A are for values of the budget bk which satisfy bk \u2264 bk\u2217 . We bound the latter, as follows.\nSince k\u2217 = OPTC(G), the set Sk\u2217 found by B is a superset of the set Ec(G) of all of the c-essential vertices in G (Property G2). This means that we have\nbk\u2217 = OPTC(G)\u2212 |Sk\u2217 | \u2264 OPTC(G)\u2212 |Ec(G)| = `,\nso the parameter of each call toA is at most `, giving the total time bound f(`)\u00b7|V (G)|O(1). J\nTheorem 1.1 now follows from Theorem 5.1 via the algorithms for c-Essential detection given in the previous sections and the state-of-the-art algorithms for the natural parameterizations listed in Table 1. Although the latter may be originally stated for the decision version, using self-reduction they can easily be adapted to output a minimum solution if there is one of size at most k.\n6 Hardness results\nGiven the positive results we saw in Sections 3 and 4, it is natural to seek problems \u03a0 for which c-Essential detection for \u03a0 is intractable. Here we show that c-Essential detection for Dominating Set is intractable for any c \u2208 O(1) and then use this as a starting point to prove similar results for Hitting Set, Perfect Deletion, and Wheel-free Deletion.\nA dominating set is a vertex set whose closed neighborhood is the entire graph. The domination number of a graph is the size of a minimum dominating set. The starting point for our reductions is the following result which states that it is W [1]-hard to solve Dominating set parameterized by solution size even on instances which have \u2018solution-size gaps\u2019.\nI Lemma 6.1 ([43], cf. [20, Thm. 4]). Let F, f : N \u2192 N be any computable functions. Assuming FPT 6= W[1], there does not exist an algorithm that, given a graph G and integer k, runs in time f(k) \u00b7 |V (G)|O(1) and distinguishes between the following two cases:\nCompleteness: G has a dominating set of size k. Soundness: Every dominating set of G is of size at least k \u00b7 F (k).\nAll of our reductions in this section share a leitmotif. We start with a gap instance (G, k) of Dominating Set and map it to an instance G\u2032 of c-Essential detection for \u03a0 (for appropriate \u03a0) equipped with a distinguished vertex v\u2217 with the following property: (1) if G has domination number at most k, then no optimal solution in G\u2032 contains v\u2217; (2) if G has domination number strictly greater than c \u00b7 F (k) (for some appropriate F ), then v\u2217 is contained in every solution of size at most c \u00b7 F (k) in G\u2032. Thus our hardness results will follow by combining reductions of this kind with Lemma 6.1.\nI Lemma 6.2. There is a polynomial-time algorithm R that, given a graph G and integer k, outputs a graph R(G, k) containing a distinguished vertex v\u2217 such that:\nif G has dominating number at most k, then the domination number of R(G, k) is exactly k and every optimal dominating set avoids v\u2217; if G has domination number strictly greater than c \u00b7 (k + 1) for some c \u2208 R\u22651, then R(G, k) has domination number k + 1 and the distinguished vertex v\u2217 is contained in all R(G, k)-dominating sets of size at most c \u00b7 (k + 1).\nProof. The graph R(G, k) (see Figure 1) is defined formally as follows:\nInitialize R(G, k) as the graph on vertex set {vi | v \u2208 V (G), 0 \u2264 i \u2264 k} with edges {viuj | uv \u2208 E(G), 0 \u2264 i, j \u2264 k}. For each i \u2208 {1, . . . , k} insert an apex ai which is adjacent to {vi | v \u2208 V (G)}. Insert a vertex v\u2217 which is adjacent to {vi | v \u2208 V (G), 0 \u2264 i \u2264 k}.\nFor our notational convenience, notice that the graph R(G, k) contains k + 1 isomorphic copies of G denoted as G0, . . . , Gk where each Gi is defined as the induced subgraph R(G, k)[{vi | v \u2208 V (G)}] of R(G, k).\nNotice that R(G, k) has domination number at least k: since {a1, . . . , ak} is an independent set and the neighborhoods of each ai are disjoint in R(G, k), we have that any dominating set of R(G, k) is forced to pick at least one vertex from V (Gi) \u222a {ai} for each 1 \u2264 i \u2264 k. In particular, this means that every dominating set that contains v\u2217 must have cardinality at least k + 1 (since v\u2217 does not dominate a1, . . . , ak).\nNow, to prove that R(G, k) has the desired properties, start by supposing that G has a dominating set {s1, . . . s`} with ` at most k. We claim that, by \u2018spreading-out\u2019 this dominating set over G1, . . . , G` (i.e. pick the copy of si in Gi for each i) we obtain a vertex-subset S\u2032\nof R(G, k) which dominates v\u2217, {a1, . . . , a`} and every vertex of G0, . . . , G`. The first two observations are immediate and the last follows since each Gi is a \u2018twin\u2019 of Gj in R(G, k): any vertex y in G is dominated by at least one vertex, si of S and, by the construction of R(G, k), the copy of si in Gi dominates all of the copies y0, . . . , y` of y in G0, . . . , G`. It follows immediately from the definition of R(G, k) that S\u2032 \u222a {ai : ` < i \u2264 k} is a dominating set of R(G, k) of size k (which is smallest-possible by our previous arguments). Thus, by our previous discussion, all minimum-size dominating sets of R(G, k) avoid v\u2217.\nNow suppose there exists a constant c \u2265 1 such that G has domination number greater than c \u00b7 (k + 1). Take any dominating set S of R(G, k) not containing v\u2217. Since G0 is not adjacent to any one of the vertices a1, . . . , ak and v\u2217 6\u2208 S, every vertex of G0 must be dominated by some vertex of G0 ] \u00b7 \u00b7 \u00b7 ]Gk in R(G, k). Thus the obvious projection of S\\{a1, . . . , ak, v\u2217} onto G is a dominating set for G. Hence, if S avoids v\u2217, then |S| > c\u00b7(k+1) by our assumption on the domination number of G. In other words, every dominating set of size at most c \u00b7 (k + 1) must contain v\u2217. This, combined with the fact that any dominating set of R(G, k) is forced to pick at least one vertex from V (Gi) \u222a {ai} for each 1 \u2264 i \u2264 k (as we observe earlier), implies that {v\u2217, a1, . . . , ak} is a minimum-size dominating set of R(G, k) (where each ai dominates itself and v\u2217 dominates everything else) which has size k + 1. J\nLemma 6.1 combined with the reduction provided by Lemma 6.2 yields the following.\nI Theorem 6.3. Unless FPT = W [1], there is no FPT-time algorithm for c-Essential detection for Dominating Set parameterized by k for any c \u2208 R\u22651.\nProof. Suppose such an algorithm A exists for c; we will use it with Lemma 6.1 to show FPT = W [1] for the function F (k) = c(k + 1).\nGiven an input (G, k) in which the goal is to distinguish between the completeness and soundness cases, the algorithm proceeds as follows. Using the reduction R of Lemma 6.2, consider the graph R(G, k) and let S be the output of an algorithm for c-Essential detection for Dominating Set on the pair (R(G, k), k + 1); note that the solution size for which we ask is k + 1 rather than k. Without loss of generality we may assume k \u2265 2, as the distinction can trivially be made otherwise. We will show that in the completeness case we have v\u2217 /\u2208 S, while in the soundness case we have v\u2217 \u2208 S, which allows us to distinguish between these cases by checking whether v\u2217 belongs to the output of A(R(G, k), k + 1).\nFor the completeness case, suppose G has domination number at most k. Then, by Lemma 6.2, so does R(G, k). This means that Property G1 holds for the call to A(R(G, k), k+ 1), so that there is some optimal solution S\u2032 of size k which contains S and hence we have v\u2217 6\u2208 S by Lemma 6.2.\nFor the soundness case, suppose G has domination number at least k \u00b7F (k) = c(k + 1)k > c(k + 1) (we use k \u2265 2 here). Then by Lemma 6.2, graph R(G, k) has domination number k + 1 and v\u2217 is contained in all its dominating sets of size at most c(k + 1). In other words: v\u2217 is c-essential in R(G, k). Consequently, v\u2217 \u2208 S by Property G2 since the argument k + 1 we supplied to A coincides with the optimum in R(G, k) in this case.\nIf A runs in FPT-time, then the overall procedure runs in FPT-time which implies FPT = W [1] by Lemma 6.1. J\nConsider the closed-neighborhood mapping S: i.e. the standard polynomial-time reduction from Dominating Set to Hitting Set which maps each graph G to the hypergraph\nS(G) := ( V (G), {N(x) \u222a {x} : x \u2208 V (G)} ) . (1)\nThe following observation captures the relation between dominating sets of G and hitting sets of S(G).\nI Observation 6.4. Let G be a graph and X \u2286 V (G). Then X is a dominating set of G if and only if X is a hitting set of S(G).\nNote that, given the reduction R of Lemma 6.2, the composite mapping S \u25e6 R relates c-essentiality to gaps in solution quality in much the same way as R did.\nNow consider the parameter-preserving polynomial-time parameterized reduction P (due to Heggernes et al. [28, Thm. 1]) taking instances (H, k) of Hitting Set (parameterized by solution size) to Perfect Deletion (also parameterized by solution size) defined as follows. For each hyperedge e = {x1, . . . , x`} in H, create ` + 1 new vertices ce,1, . . . , ce,`+1 \u2013 called gadget vertices \u2013 and an odd cycle\nCe = ( e \u222a {ce,1, . . . , ce,`+1}, {ce,1ce,`+1} \u222a {xice,j : xi \u2208 e, j \u2208 {i, i + 1}} ) so that we may define P (H) as the graph obtained by adding all possible edges between gadget-vertices of different cycles; formally we have\nP (H) := ( \u22c3\ne\u2208E(H)\nV (Ce), \u228e\ne\u2208E(H)\nE(Ce) \u222a {ce,ice\u2032,j | e 6= e\u2032 \u2208 E(H), i, j \u2208 [` + 1]} ) . (2)\nI Lemma 6.5 ([28, Thm. 1 and Claims 1\u20133]). Given any Hitting Set instance (H, k) with each hyperedge of size at least 2, the graph P (H) defined in Equation (2) satisfies the following properties:\nP1 given any vertex-subset X of P (H) such that P (H)\u2212X is perfect; if there is an x \u2208 X such that x 6\u2208 V (P (H)) \u2229 V (H), then x lies on exactly one odd-hole Ce, and, for any vertex y \u2208 V (Ce) \u2229 V (H) we have that P (H)\u2212 (X \u222a {y}) \\ {x} is perfect, P2 for any X \u2286 V (H), the set X is a hitting set in H if and only if P (H)\u2212X is perfect.\nLemma 6.5 ensures that we can chain the reductions R, S and P (found respectively in Lemma 6.2 and Equations (1) and (2)) to obtain a polynomial-time reduction from Dominating Set to the detection problem c-Essential detection for PerfDel with sufficient guarantees to be able to then infer the intractability of the latter problem using Lemma 6.1.\nI Theorem 6.6. Unless FPT = W [1], there is no FPT-time algorithm for c-Essential detection for PerfDel parameterized by k for any c \u2265 1.\nProof. Fix any instance (G, k) with k \u2265 2 of Dominating Set which has domination number at most k or at least ck(k + 1) > c(k + 1). Then, by Observation 6.4, the hypergraph S(R(G, k)) has a distinguished vertex v\u2217 such that following properties are satisfied:\nC1 if G has domination number at most k, then S(R(G, k)) has hitting set number k and all of its minimum hitting sets avoid v\u2217; C2 if G has domination number strictly greater than c(k + 1), then S(R(G, k)) has hitting set number k + 1 and its distinguished vertex v\u2217 is contained in every solution of size at most c(k + 1).\nLet Q be the set returned by any algorithm for c-Essential detection for PerfDel on input ( (P \u25e6 S \u25e6R)(G, k), k + 1 ) . Notice that, by Lemma 6.5, in both Case C1 and Case C2 we have that the optimum for PerfDel on (P \u25e6 S \u25e6R)(G, k) coincides with the optimum for HittingSet on S(R(G, k)).\nWith this observation in mind, consider Case C1. Here we have that Q is contained in an optimum solution Q\u2032 of size k (by Property G1). However, by the second point in Lemma 6.5 (and since all size-k hitting sets of S(R(G, k)) avoid v\u2217) we deduce that any such Q\u2032 (and hence Q) cannot contain v\u2217 (which is a vertex of S(R(G, k)) and hence also a vertex of (P \u25e6 S \u25e6R)(G, k)).\nFor Case C2, consider any perfect deletion set X in (P \u25e6 S \u25e6 R)(G, k) of size at most c(k + 1). If we can show that X must always contain v\u2217, then we are done since it would imply that v\u2217 is c-essential which, by Property G2 would allows us to decide whether G has domination number either k or greater than c(k + 1) simply by checking whether v\u2217 is in Q or not. So, seeking a contradiction, suppose v\u2217 6\u2208 X. By Property P1 of Lemma 2 and since each hyperedge S(R(G, k)) has size at least 2, we can find a subset Y of the vertices of S(R(G, k)) \u2212 v\u2217 of size at most |X| such that (P \u25e6 S \u25e6 R)(G, k) \u2212 Y is perfect. But then, by Property P2 of Lemma 6.5, we have that Y is a hitting set of size at most |X| = c(k + 1) \u2264 ck(k + 1) in S(R(G, k)) which avoids v\u2217. However, this is a contradiction since Observation 6.4 guarantees that v\u2217 is contained in every hitting set for S(R(G, k)) of size at most ck(k + 1). J\nIn a similar vein to Heggernes et al.\u2019s [28, Thm. 1] reduction P (Equation 2)) one can define a reduction L (Figure 2) from Hitting Set to Wheel-free Edge-Deletion. This is due to Lokshtanov [35] and it is defined as follows. Given an instance (H, k) of Hitting Set, for each hyperedge e \u2208 E(H) with e = {x1, . . . , x`}, construct the wheel We with 3` spokes and, picking some cyclic order of its rim-edges (i.e. the edges of the 3`-cycle in the wheel) denote them as\nex1 , e \u2032 1, e \u2032\u2032 1 , ex2 , e \u2032 2, e \u2032\u2032 2 , . . . , ex` , e \u2032 `, e \u2032\u2032 ` .\nWe say that the edges ex1 , ex2 , . . . ex3 correspond to the vertices x1, x2, . . . , x` respectively. Then, define the equivalence relation \u223c on the edges of the disjoint union of all such wheels so that any two edges that correspond to the same vertex become equivalent under \u223c (stating this formally, given any two distinct hyperedges e, f in H, for all vertices x \u2208 e \u2229 f , set ex \u223c fx). Finally define L(H) (see Figure 2) to be the quotient\nL(H) := \u228e\ne\u2208E(H)\nWe/\u223c. (3)\nGiven Lokshtanov\u2019s parameter-preserving reduction [35] L from Hitting Set to Wheelfree Edge-Deletion, we can argue in similar vein to Theorem 6.6 to show the intractability of c-Essential detection for WheelDelE.\nSince we have so far focused on vertex-deletion problems, rather than proving this for the edge-deletion case, we will focus on showing the intractability of c-Essential detection for WheelDel. To that end, we need the following slight modification of Lokshtanov\u2019s reduction. Given any hypergraph H, and wheels We for each hyperedge e of H (as defined earlier), make a new wheel W \u2032e from We by subdividing each one of its edges and adding appropriate spokes. We shall say that a vertex of W \u2032e which subdivides an edge ex of We corresponds to a vertex x in H if and only if the edge ex corresponds to the vertex x. Finally we define \u039b(H) as the quotient \u039b(H) := \u228e e\u2208E(H) W \u2032 e/\u223cV where \u223cV identifies those vertices of W \u2032e which correspond to the same vertex in H.\nI Lemma 6.7. For any HittingSet instance H and any integer k \u2264 |V (H)| we have that H has a hitting set of size k if and only if \u039b(H) has a vertex-modulator to wheel-freeness X of size k such that every vertex of X corresponds to a vertex in H.\nProof. By Lokshtanov\u2019s reduction [35], we have for all k that: H has a hitting set of size k if and only if L(H) has an edge-modulator to wheel-freeness F of size k such that every edge of F corresponds to a vertex in H. Note that, given any such F , we can turn this into a vertex-modulator for wheel-freeness (of the same size as F and whose elements also all correspond to vertices of H) on \u039b(H) by mapping each edge in F to its subdividing vertex. Furthermore, since (by construction) the only vertices of \u039b(H) that can be in more than one wheel are those in V (\u039b(H)) \\ V (L(H)), every solution of \u039b(H) can be assumed to consist solely of vertices in V (\u039b(H)) \\ V (L(H)). Thus, if \u039b(H) has a solution of size k \u2264 |V (H)|, then we can turn it into a solution of size at most k whose elements all correspond to vertices of H (i.e. a solution in H). J\nI Theorem 6.8. Unless FPT = W [1], there is no FPT-time algorithm for c-Essential detection for WheelDel parameterized by k for any c.\nProof. Once again, starting with any instance (G, k) with k \u2265 2 of Dominating Set which has domination number either k or at least ck(k + 1), we apply the closed-neighborhood mapping S (Equation (1)) so that we may proceed by case distinction on the same cases C1 and C2 as we did in the proof of Theorem 6.6.\nNotice that, for any vertex x in (\u039b \u25e6S \u25e6R)(G, k) which does not correspond to any vertex of S(R(G, k)), x is contained in exactly one wheel of (\u039b \u25e6 S \u25e6R)(G, k). This, combined with Lemma 6.7, implies that the optimum for WheelDel on (\u039b \u25e6 S \u25e6R)(G, k) always coincides with the optimum for HittingSet on S(R(G, k)).\nLet Q be the set returned by any algorithm for c-Essential detection for WheelDel on input (\u039b \u25e6 S \u25e6R)(G, k).\nIn Case C1, since (G, k) is a yes-instance, S(R(G, k)) has a minimum hitting set of size k and every such minimum hitting set avoids the distinguished vertex v\u2217. Thus, by Lemma 6.7, we have that (\u039b \u25e6 S \u25e6 R)(G, k) has wheel-free deletion number k and every witness X of this fact satisfies the following property: no vertex in X corresponds to v\u2217 in any wheel of (\u039b \u25e6 S \u25e6R)(G, k). Consequently, since the returned set Q satisfies Property G1, Q does not contain any edge corresponding to v\u2217 either.\nIn Case C2, since G has domination number strictly greater than ck(k + 1), S(R(G, k)) has hitting set number k + 1 and its distinguished vertex v\u2217 is contained in every solution of size at most c(k + 1). Now take any wheel-free deletion set X of size at most c(k + 1) =\nc\u00b7OPT ( (\u039b\u25e6S\u25e6R)(G, k) ) (recall that the optimum for WheelDel on (\u039b\u25e6S\u25e6R)(G, k) always coincides with the optimum for HittingSet on S(R(G, k))). Now, seeking a contradiction, suppose that no element of X corresponds to v\u2217. Since any element x in X is contained in precisely one wheel whenever it does not correspond to any vertex of S(R(G, k)), we can find always find a modulator Y of size at most that of X whose elements all correspond to vertices of S(R(G, k)). Furthermore, since we can assume that G contains no isolated vertices, we can also assume that all hyperedges of S(R(G, k)) have size at least 2. Thus every wheel in (L \u25e6 S \u25e6R)(G, k) has at least two vertices corresponding to vertices of S(R(G, k)) and hence we can further assume that no vertex in Y corresponds to v\u2217 (if it does, we can modify Y ). But then the vertices corresponding to those of Y form a hitting set of S(R(G, k)) which:\nhas size at most |Y | \u2264 |X| \u2264 c(k + 1) and avoids v\u2217,\ncontradicting the fact that v\u2217 is contained in every solution of size at most c(k + 1) in S(R(G, k)). Thus we have that v\u2217 \u2208 Q if and only if v\u2217 is c(k + 1)-essential in S(R(G, k)) which is enough to distinguish whether G has domination number at most k or at least ck(k + 1). J\n7 Connections to Perturbation Resilience\nIn the area of perturbation resilience [39] there is a notion of so-called c-perturbation resilient instances to optimization problems. Roughly, these are instances G in which there is a unique optimal solution S which far outperforms (by a factor of c) every other solution S\u2032 in G. More formally, for a vertex-weighted graph minimization problem \u03a0 whose solution is a vertex-subset, we say that an instance (G, w : V (G)\u2192 N) with a unique optimal solution S is cperturbation resilient if for any perturbed weight function w\u2032 satisfying w(v) \u2264 w\u2032(v) \u2264 c\u00b7w(v) for all v \u2208 V (G), the instance (G, w\u2032(x)) has a unique optimal solution and furthermore this solution is S. (Of course, one can define an analogous notion for maximization problems as well and what follows in this section applies to both.)\nClasses of c-perturbation resilient instances have been shown to be \u2018islands of tractability\u2019 where many intractable problems become polynomial-time-solvable [39] and the suggestive intuition behind this fact is that perturbation resilient instances have unique optima which \u2018stand out\u2019 and are \u2018obvious\u2019 in some sense. Viewing stability through the lens of parameterized complexity, it is natural to ask whether one can quantify in an algorithmically useful way how distant an input is from being stable. The following proposition supports our claim that the non-essentiality (recall Theorem 5.1) is a good such measure since on (> c)-stable inputs, the c-non-essentiality is smallest possible (namely it is 0).\nI Proposition 7.1. Given constants c\u2032 > c \u2265 1, if G is a c\u2032-stable input to a graph optimization problem \u03a0 whose solutions are vertex-subsets, then E\u03a0c (G) is the unique optimum of G.\nProof. Consider the unique optimum S for \u03a0 on G. If S\u2032 is a c-approximation for \u03a0 on G, then we must have S\u2032 = S (since otherwise G would not be c\u2032-stable). As a consequence we know that every vertex of S must be c-essential and hence we have S \u2286 Ec(G) \u2286 S. J\nProposition 7.1 and Theorem 5.1 allow us to immediately deduce that any algorithm for c-Essential detection solves all (> c)-perturbation resilient instances exactly.\nI Corollary 7.2. Given a minimization problem \u03a0, any algorithm for c-Essential detection for \u03a0 solves (> c)-stable instances exactly.\n8 Conclusion\nWe introduced the notion of c-essential vertices for vertex-subset minimization problems on graphs, to formalize the idea that a vertex belongs to all reasonable solutions. Using a variety of approaches centered around the theme of covering/packing duality, we gave polynomialtime algorithms that detect a subset of an optimal solution containing all c-essential vertices, which decreased the search space of parameterized algorithms from exponential in the size of the solution, to exponential in the number of non-essential vertices in the solution.\nThroughout the paper we have restricted ourselves to working with unweighted problems. However, many of the same ideas can be applied in the setting where each vertex has a positive integer weight of magnitude O(|V (G)|O(1)) and we search for a minimum-weight solution. Since integral vertex weights can be simulated for many problems by making twin-copies of a vertex, our approach can be extended to Weighted Vertex Cover, Weighted Odd Cycle Transversal, and Weighted Chordal Deletion.\nOur results shed a new light on which instances of NP-hard problems can be solved efficiently. FPT algorithms for parameterizations by solution size show that instances are easy when their optimal solutions are small. Theorem 1.1 refines this view: it shows that instances with large optimal solutions can still be easy, as long as only a small number of vertices in the optimum is not c-essential.\nWe remark that there is an alternative route to algorithms for c-Essential detection, which is applicable to C-Deletion problems which admit a constant-factor approximation. If there is a polynomial-time algorithm that, given a graph G and vertex v, outputs a c-approximation for the problem of finding a minimum-size C-modulator avoiding v, it can be used for c-Essential detection. A valid output S for the detection problem with input (G, k) is obtained by letting S contain all vertices for which the approximation algorithm outputs a v-avoiding modulator of size more than c \u00b7 k. Using this approach (cf. [24]) one can solve maxF\u2208F |V (F )|O(1)-Essential detection for F-Minor-Free Deletion for any finite family F containing a planar graph. As the results for problems for which no constant-factor approximation exists are more interesting, we focused on those.\nOur work opens up several questions for future work. Is the integrality gap for vAvoiding Planar Vertex Deletion constant, when G\u2212v is planar? Can O(1)-Essential detection for Planar Vertex Deletion be solved in polynomial time? Can 2- Essential detection for Chordal Deletion be solved in polynomial time? Can the constant c for which we can detect c-essential vertices be lowered below 2?\nConsidering a broader horizon, it would be interesting to investigate whether there are less restrictive notions than c-essentiality which can be used as the basis for guaranteed search-space reduction.\nReferences 1 Tobias Achterberg, Robert E. Bixby, Zonghao Gu, Edward Rothberg, and Dieter Weninger.\nPresolve reductions in mixed integer programming. Technical Report 16-44, ZIB, Takustr.7, 14195 Berlin, 2016. URL: http://nbn-resolving.de/urn:nbn:de:0297-zib-60370.\n2 Takuya Akiba and Yoichi Iwata. Branch-and-reduce exponential/FPT algorithms in practice: A case study of vertex cover. Theor. Comput. Sci., 609:211\u2013225, 2016. doi:10.1016/j.tcs. 2015.09.023. 3 Jochen Alber, Nadja Betzler, and Rolf Niedermeier. Experiments on data reduction for optimal domination in networks. Annals OR, 146(1):105\u2013117, 2006. doi:10.1007/s10479-006-0045-4. 4 Vedat Levi Alev and Lap Chi Lau. Approximating unique games using low diameter graph decomposition. In Klaus Jansen, Jos\u00e9 D. P. Rolim, David Williamson, and San-\ntosh S. Vempala, editors, Approximation, Randomization, and Combinatorial Optimization. Algorithms and Techniques, APPROX/RANDOM 2017, August 16-18, 2017, Berkeley, CA, USA, volume 81 of LIPIcs, pages 18:1\u201318:15. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2017. URL: https://doi.org/10.4230/LIPIcs.APPROX-RANDOM.2017.18, doi:10.4230/LIPIcs.APPROX-RANDOM.2017.18.\n5 Claude Berge. Hypergraphs - Combinatorics of finite sets, volume 45 of North-Holland mathematical library. North-Holland, 1989.\n6 Hans L. Bodlaender. Lower bounds for kernelization. In Marek Cygan and Pinar Heggernes, editors, Parameterized and Exact Computation - 9th International Symposium, IPEC 2014, Wroclaw, Poland, September 10-12, 2014. Revised Selected Papers, volume 8894 of Lecture Notes in Computer Science, pages 1\u201314. Springer, 2014. doi:10.1007/978-3-319-13524-3\\_1.\n7 Hans L. Bodlaender, Fedor V. Fomin, Daniel Lokshtanov, Eelko Penninkx, Saket Saurabh, and Dimitrios M. Thilikos. (Meta) Kernelization. In 50th Annual IEEE Symposium on Foundations of Computer Science, FOCS 2009, October 25-27, 2009, Atlanta, Georgia, USA, pages 629\u2013638. IEEE Computer Society, 2009. doi:10.1109/FOCS.2009.46.\n8 Hans L. Bodlaender and Thomas C. van Dijk. A cubic kernel for feedback vertex set and loop cutset. Theory Comput. Syst., 46(3):566\u2013597, 2010. doi:10.1007/s00224-009-9234-2.\n9 Yixin Cao and D\u00e1niel Marx. Chordal editing is fixed-parameter tractable. Algorithmica, 75(1):118\u2013137, 2016. URL: https://doi.org/10.1007/s00453-015-0014-x, doi:10.1007/ s00453-015-0014-x.\n10 Jianer Chen, Iyad A. Kanj, and Ge Xia. Improved upper bounds for vertex cover. Theor. Comput. Sci., 411(40-42):3736\u20133756, 2010. URL: https://doi.org/10.1016/j.tcs.2010.06. 026, doi:10.1016/j.tcs.2010.06.026.\n11 Jianer Chen, Yang Liu, Songjian Lu, Barry O\u2019Sullivan, and Igor Razgon. A fixed-parameter algorithm for the directed feedback vertex set problem. J. ACM, 55(5):21:1\u201321:19, 2008. URL: https://doi.org/10.1145/1411509.1411511, doi:10.1145/1411509.1411511.\n12 Maria Chudnovsky, Jim Geelen, Bert Gerards, Luis A. Goddyn, Michael Lohman, and Paul D. Seymour. Packing non-zero A-paths in group-labelled graphs. Comb., 26(5):521\u2013532, 2006. doi:10.1007/s00493-006-0030-1.\n13 Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, D\u00e1niel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh. Parameterized Algorithms. Springer, 2015. doi:10.1007/978-3-319-21275-3.\n14 Holger Dell and Dieter van Melkebeek. Satisfiability allows no nontrivial sparsification unless the polynomial-time hierarchy collapses. J. ACM, 61(4):23:1\u201323:27, 2014. doi:10.1145/2629620.\n15 Huib Donkers and Bart M. P. Jansen. Preprocessing to reduce the search space: Antler structures for feedback vertex set. In Lukasz Kowalik, Michal Pilipczuk, and Pawel Rzazewski, editors, Graph-Theoretic Concepts in Computer Science - 47th International Workshop, WG 2021, Warsaw, Poland, June 23-25, 2021, Revised Selected Papers, volume 12911 of Lecture Notes in Computer Science, pages 1\u201314. Springer, 2021. doi:10.1007/978-3-030-86838-3\\_1.\n16 Rodney G. Downey and M. R. Fellows. Parameterized Complexity. Springer Publishing Company, Incorporated, 2012.\n17 Andrew Drucker. New limits to classical and quantum instance compression. SIAM J. Comput., 44(5):1443\u20131479, 2015. doi:10.1137/130927115.\n18 Eduard Eiben, Robert Ganian, Thekla Hamm, and O-joung Kwon. Measuring what matters: A hybrid approach to dynamic programming with treewidth. J. Comput. Syst. Sci., 121:57\u201375, 2021. doi:10.1016/j.jcss.2021.04.005.\n19 P. Erd\u00f6s and L. P\u00f3sa. On independent circuits contained in a graph. Canadian Journal of Mathematics, 17:347\u2013352, 1965. doi:10.4153/CJM-1965-035-8.\n20 Andreas Emil Feldmann, Karthik C. S., Euiwoong Lee, and Pasin Manurangsi. A survey on approximation in parameterized complexity: Hardness and algorithms. Algorithms, 13(6):146, 2020. URL: https://doi.org/10.3390/a13060146, doi:10.3390/a13060146.\n21 Michael R. Fellows. The lost continent of polynomial time: Preprocessing and kernelization. In Proc. 2nd IWPEC, pages 276\u2013277, 2006. doi:10.1007/11847250_25.\n22 Rudolf Fleischer, Xi Wu, and Liwei Yuan. Experimental study of FPT algorithms for the directed feedback vertex set problem. In Amos Fiat and Peter Sanders, editors, Algorithms - ESA 2009, 17th Annual European Symposium, Copenhagen, Denmark, September 7-9, 2009. Proceedings, volume 5757 of Lecture Notes in Computer Science, pages 611\u2013622. Springer, 2009. doi:10.1007/978-3-642-04128-0\\_55.\n23 Fedor Fomin, Daniel Lokshtanov, Saket Saurabh, and Meirav Zehavi. Kernelization: theory of parameterized preprocessing. Cambridge University Press, 2019.\n24 Fedor V. Fomin, Daniel Lokshtanov, Neeldhara Misra, and Saket Saurabh. Planar F-deletion: Approximation, kernelization and optimal FPT algorithms. In 53rd Annual IEEE Symposium on Foundations of Computer Science, FOCS 2012, New Brunswick, NJ, USA, October 20-23, 2012, pages 470\u2013479. IEEE Computer Society, 2012. doi:10.1109/FOCS.2012.62.\n25 Jim Geelen, Bert Gerards, Bruce A. Reed, Paul D. Seymour, and Adrian Vetta. On the odd-minor variant of Hadwiger\u2019s conjecture. J. Comb. Theory, Ser. B, 99(1):20\u201329, 2009. URL: https://doi.org/10.1016/j.jctb.2008.03.006, doi:10.1016/j.jctb.2008.03.006.\n26 M.C. Golumbic. Algorithmic Graph Theory and Perfect Graphs. ISSN. Elsevier Science, 2004. 27 Jiong Guo and Rolf Niedermeier. Invitation to data reduction and problem kernelization. SIGACT News, 38(1):31\u201345, 2007. doi:10.1145/1233481.1233493. 28 Pinar Heggernes, Pim van \u2019t Hof, Bart M. P. Jansen, Stefan Kratsch, and Yngve Villanger.\nParameterized complexity of vertex deletion into perfect graph classes. Theor. Comput. Sci., 511:172\u2013180, 2013. doi:10.1016/j.tcs.2012.03.013.\n29 Bart M. P. Jansen, Jari J. H. de Kroon, and Michal Wlodarczyk. Vertex deletion parameterized by elimination distance and even less. In Samir Khuller and Virginia Vassilevska Williams, editors, STOC \u201921: 53rd Annual ACM SIGACT Symposium on Theory of Computing, Virtual Event, Italy, June 21-25, 2021, pages 1757\u20131769. ACM, 2021. doi:10.1145/3406325.3451068.\n30 Bart M. P. Jansen and Marcin Pilipczuk. Approximation and kernelization for chordal vertex deletion. SIAM J. Discret. Math., 32(3):2258\u20132301, 2018. doi:10.1137/17M112035X.\n31 Subhash Khot. On the power of unique 2-prover 1-round games. In John H. Reif, editor, Proceedings on 34th Annual ACM Symposium on Theory of Computing, May 19-21, 2002, Montr\u00e9al, Qu\u00e9bec, Canada, pages 767\u2013775. ACM, 2002. URL: https://doi.org/10.1145/ 509907.510017, doi:10.1145/509907.510017.\n32 Stefan Kratsch. Recent developments in kernelization: A survey. Bull. EATCS, 113, 2014. URL: http://eatcs.org/beatcs/index.php/beatcs/article/view/285.\n33 Stefan Kratsch and Magnus Wahlstr\u00f6m. Representative sets and irrelevant vertices: New tools for kernelization. J. ACM, 67(3):16:1\u201316:50, 2020. doi:10.1145/3390887. 34 Jason Li and Jesper Nederlof. Detecting feedback vertex sets of size k in O\u2217(2.7k) time. In Shuchi Chawla, editor, Proceedings of the 2020 ACM-SIAM Symposium on Discrete Algorithms, SODA 2020, Salt Lake City, UT, USA, January 5-8, 2020, pages 971\u2013989. SIAM, 2020. URL: https://doi.org/10.1137/1.9781611975994.58, doi:10.1137/1.9781611975994.58.\n35 Daniel Lokshtanov. Wheel-free deletion is W[2]-hard. In Martin Grohe and Rolf Niedermeier, editors, Parameterized and Exact Computation, Third International Workshop, IWPEC 2008, Victoria, Canada, May 14-16, 2008. Proceedings, volume 5018 of Lecture Notes in Computer Science, pages 141\u2013147. Springer, 2008. URL: https://doi.org/10.1007/978-3-540-79723-4_ 14, doi:10.1007/978-3-540-79723-4\\_14.\n36 Daniel Lokshtanov, Neeldhara Misra, and Saket Saurabh. Kernelization - preprocessing with a guarantee. In Hans L. Bodlaender, Rod Downey, Fedor V. Fomin, and D\u00e1niel Marx, editors, The Multivariate Algorithmic Revolution and Beyond - Essays Dedicated to Michael R. Fellows on the Occasion of His 60th Birthday, volume 7370 of Lecture Notes in Computer Science, pages 129\u2013161. Springer, 2012. doi:10.1007/978-3-642-30891-8\\_10.\n37 Daniel Lokshtanov, N. S. Narayanaswamy, Venkatesh Raman, M. S. Ramanujan, and Saket Saurabh. Faster parameterized algorithms using linear programming. ACM Trans. Algorithms, 11(2):15:1\u201315:31, 2014. URL: https://doi.org/10.1145/2566616, doi:10.1145/2566616. 38 Daniel Lokshtanov, M. S. Ramanujan, Saket Saurabh, and Meirav Zehavi. Parameterized complexity and approximability of directed odd cycle transversal. In Shuchi Chawla, editor, Proceedings of the 2020 ACM-SIAM Symposium on Discrete Algorithms, SODA 2020, Salt Lake City, UT, USA, January 5-8, 2020, pages 2181\u20132200. SIAM, 2020. doi:10.1137/1. 9781611975994.134. 39 Konstantin Makarychev and Yury Makarychev. Perturbation resilience. In Tim Roughgarden, editor, Beyond the Worst-Case Analysis of Algorithms, pages 95\u2013119. Cambridge University Press, 2020. URL: https://doi.org/10.1017/9781108637435.008, doi:10.1017/ 9781108637435.008. 40 George L. Nemhauser and Leslie E. Trotter Jr. Vertex packings: Structural properties and algorithms. Math. Program., 8(1):232\u2013248, 1975. doi:10.1007/BF01580444. 41 Bruce A. Reed, Kaleigh Smith, and Adrian Vetta. Finding odd cycle transversals. Oper. Res. Lett., 32(4):299\u2013301, 2004. URL: https://doi.org/10.1016/j.orl.2003.10.009, doi: 10.1016/j.orl.2003.10.009. 42 Neil Robertson and Paul D. Seymour. Graph minors. XIII. The disjoint paths problem. J. Comb. Theory, Ser. B, 63(1):65\u2013110, 1995. doi:10.1006/jctb.1995.1006. 43 Karthik C. S., Bundit Laekhanukit, and Pasin Manurangsi. On the parameterized complexity of approximating dominating set. J. ACM, 66(5):33:1\u201333:38, 2019. URL: https://doi.org/ 10.1145/3325116, doi:10.1145/3325116. 44 A. Schrijver. Combinatorial Optimization - Polyhedra and Efficiency. Springer, 2003. 45 Leslie G. Valiant and Vijay V. Vazirani. NP is as easy as detecting unique solutions. Theor. Comput. Sci., 47(3):85\u201393, 1986. doi:10.1016/0304-3975(86)90135-0. 46 Karsten Weihe. Covering trains by stations or the power of data reduction. In Algorithms and\nExperiments (ALEX98), pages 1\u20138, 1998. URL: https://citeseerx.ist.psu.edu/viewdoc/ summary?doi=10.1.1.57.2173.\n47 Karsten Weihe. On the differences between \u201cpractical\u201d and \u201capplied\u201d. In Algorithm Engineering, volume 1982 of Lecture Notes in Computer Science, pages 1\u201310, 2000. doi: 10.1007/3-540-44691-5_1. 48 Sebastian Wernicke. On the algorithmic tractability of single nucleotide polymorphism (SNP) analysis and related problems. diplom.de, 2014."
        }
    ],
    "title": "Search-Space Reduction via Essential Vertices",
    "year": 2022
}