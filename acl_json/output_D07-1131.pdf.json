{
    "abstractText": "In this paper, we present a three-step multilingual dependency parser based on a deterministic shift-reduce parsing algorithm. Different from last year, we separate the root-parsing strategy as sequential labeling task and try to link the neighbor word dependences via a near neighbor parsing. The outputs of the root and neighbor parsers were encoded as features for the shift-reduce parser. In addition, the learners we used for the two parsers and the shift-reduce parser are quite different (conditional random fields and the modified finite-Newton method support vector machines). We found that our method could benefit from the two-preprocessing stages. To speed up training, in this year, we employ the MFN-SVM (modified finite-Newton method support vector machines) which can be learned in linear time. The experimental results show that our method achieved the middle rank over the 23 teams. We expect that our method could be further improved via well-tuned parameter validations for different languages.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yu-Chieh Wu"
        },
        {
            "affiliations": [],
            "name": "Jie-Chi Yang"
        },
        {
            "affiliations": [],
            "name": "Yue-Shi Lee"
        }
    ],
    "id": "SP:9dddb7ecba814fbef35f30f7f0a52eebf70c84c4",
    "references": [
        {
            "authors": [
                "A. Abeill\u00e9",
                "editor"
            ],
            "title": "Treebanks: Building and Using Parsed Corpora",
            "year": 2003
        },
        {
            "authors": [
                "I. Aduriz",
                "M.J. Aranzabe",
                "J.M. Arriola",
                "A. Atutxa",
                "A. Diaz de Ilarraza",
                "A. Garmendia",
                "M. Oronoz."
            ],
            "title": "Construction of a Basque Dependency Treebank",
            "venue": "Proc. of the 2nd Workshop on Treebanks and Linguistic Theories (TLT), pages 201\u2013204.",
            "year": 2003
        },
        {
            "authors": [
                "A. B\u00f6hmov\u00e1",
                "J. Hajic",
                "E. Hajicov\u00e1",
                "B. Hladk\u00e1."
            ],
            "title": "The PDT: a 3-level annotation scenario",
            "venue": "Abeill\u00e9 (2003), chapter 7, 103\u2013127.",
            "year": 2003
        },
        {
            "authors": [
                "R. Brown."
            ],
            "title": "A First Language: The Early Stages",
            "venue": "Harvard University Press.",
            "year": 1973
        },
        {
            "authors": [
                "M.W. Chang",
                "Q. Do",
                "D. Roth."
            ],
            "title": "Multilingual Dependency Parsing: A Pipeline Approach",
            "venue": "Recent Advances in Natural Language Processing, pages 195-204.",
            "year": 2006
        },
        {
            "authors": [
                "K. Chen",
                "C. Luo",
                "M. Chang",
                "F. Chen",
                "C. Chen",
                "C. Huang",
                "Z. Gao."
            ],
            "title": "Sinica Treebank: Design Criteria, Representational Issues and Implementation",
            "venue": "Abeill\u00e9 (2003), chapter 13, pages 231\u2013248.",
            "year": 2003
        },
        {
            "authors": [
                "Y. Cheng",
                "M. Asahara",
                "Y. Matsumoto."
            ],
            "title": "Multilingual Dependency Parsing at NAIST",
            "venue": "Proc. of the 10th Conference on Natural Language Learning, pages 191-195.",
            "year": 2006
        },
        {
            "authors": [
                "D. Czendes",
                "J. Csirik",
                "T. Gyim\u00f3thy",
                "A. Kocsor."
            ],
            "title": "The Szeged Treebank",
            "venue": "Springer.",
            "year": 2005
        },
        {
            "authors": [
                "J. Hajic",
                "O. Smrz",
                "P. Zem\u00e1nek",
                "J. Snaidauf",
                "E. Beska."
            ],
            "title": "Prague Arabic Dependency Treebank: Development in Data and Tools",
            "venue": "Proc. of the NEMLAR Intern. Conf. on Arabic Language Resources and Tools, pages 110\u2013117.",
            "year": 2004
        },
        {
            "authors": [
                "H. Isozaki",
                "H. Kazawa",
                "T. Hirao."
            ],
            "title": "A Deterministic Word Dependency Analyzer Enhanced With Preference Learning",
            "venue": "Proc. of the 20th International Conference on Computational Linguistics, pages 275-281.",
            "year": 2004
        },
        {
            "authors": [
                "R. Johansson",
                "P. Nugues."
            ],
            "title": "Extended constituent-to-dependency conversion for English",
            "venue": "Proc. of the 16th Nordic Conference on Computational Linguistics (NODALIDA).",
            "year": 2007
        },
        {
            "authors": [
                "S. Keerthi",
                "D. DeCoste."
            ],
            "title": "A modified finite Newton method for fast solution of large scale linear SVMs",
            "venue": "Journal of Machine Learning Research. 6: 341-361.",
            "year": 2005
        },
        {
            "authors": [
                "S. Kulick",
                "A. Bies",
                "M. Liberman",
                "M. Mandel",
                "R. McDonald",
                "M. Palmer",
                "A. Schein",
                "L. Ungar."
            ],
            "title": "Integrated annotation for biomedical information extraction",
            "venue": "Proc. of the Human Language Technology Conference and the Annual Meeting of",
            "year": 2004
        },
        {
            "authors": [
                "B. MacWhinney."
            ],
            "title": "The CHILDES Project: Tools for Analyzing Talk",
            "venue": "Lawrence Erlbaum.",
            "year": 2000
        },
        {
            "authors": [
                "M. Marcus",
                "B. Santorini",
                "M. Marcinkiewicz."
            ],
            "title": "Building a large annotated corpus of English: the Penn Treebank",
            "venue": "Computational Linguistics, 19(2):313\u2013330.",
            "year": 1993
        },
        {
            "authors": [
                "M.A. Mart\u00ed",
                "M. Taul\u00e9",
                "L. M\u00e0rquez",
                "M. Bertran."
            ],
            "title": "CESS-ECE: A Multilingual and Multilevel Annotated Corpus",
            "venue": "Available for download from: http://www.lsi.upc.edu/~mbertran/cess-ece/.",
            "year": 2007
        },
        {
            "authors": [
                "R. McDonald",
                "K. Lerman",
                "F. Pereira."
            ],
            "title": "Multilingual Dependency Analysis with a Two-Stage Discriminative",
            "venue": "Proc. of the 10th Conference on Natural Language Learning, pages 216-220.",
            "year": 2006
        },
        {
            "authors": [
                "S. Montemagni",
                "F. Barsotti",
                "M. Battista",
                "N. Calzolari",
                "O. Corazzari",
                "A. Lenci",
                "A. Zampolli",
                "F. Fanciulli",
                "M. Massetani",
                "R. Raffaelli",
                "R. Basili",
                "M.T. Pazienza",
                "D. Saracino",
                "F. Zanzotto",
                "N. Nana",
                "F. Pianesi",
                "R. Delmonte"
            ],
            "title": "Building the Italian Syntactic",
            "year": 2003
        },
        {
            "authors": [
                "J. Nivre."
            ],
            "title": "An efficient algorithm for projective dependency parsing",
            "venue": "Proc. of the International Workshop on Parsing Technology, pages 149-160.",
            "year": 2003
        },
        {
            "authors": [
                "J. Nivre",
                "J. Nilsson."
            ],
            "title": "Pseudo-projective dependency Parsing",
            "venue": "Proc. of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL), pages 99-106.",
            "year": 2005
        },
        {
            "authors": [
                "J. Nivre",
                "J. Hall",
                "J. Nilsson",
                "G. Eryigit",
                "S. Marinov."
            ],
            "title": "Labeled pseudo-projective dependency parsing with support vector machines",
            "venue": "Proc. of the 10th Conference on Natural Language Learning, pages 221-225.",
            "year": 2006
        },
        {
            "authors": [
                "J. Nivre",
                "J. Hall",
                "S. K\u00fcbler",
                "R. McDonald",
                "J. Nilsson",
                "S. Riedel",
                "D. Yuret."
            ],
            "title": "The CoNLL 2007 shared task on dependency parsing",
            "venue": "Proc. of the Joint Conf. on Empirical Methods in Natural Language Processing and Computational Natural Language",
            "year": 2007
        },
        {
            "authors": [
                "K. Oflazer",
                "B. Say",
                "D. Zeynep Hakkani-T\u00fcr",
                "G. T\u00fcr."
            ],
            "title": "Building a Turkish treebank",
            "venue": "Abeill\u00e9 (2003), chapter 15, pages 261\u2013277.",
            "year": 2003
        },
        {
            "authors": [
                "P. Prokopidis",
                "E. Desypri",
                "M. Koutsombogera",
                "H. Papageorgiou",
                "S. Piperidis."
            ],
            "title": "Theoretical and practical issues in the construction of a Greek depen- dency treebank",
            "venue": "Proc. of the 4th Workshop on Treebanks and Linguistic Theories (TLT), pages",
            "year": 2005
        },
        {
            "authors": [
                "K T. Kudo",
                "Yamamoto",
                "Y. Matsumoto"
            ],
            "title": "Appliying conditional random fields to Japanese morphological analysis",
            "venue": "In Proc. of the 2004 Conference on Empirical Methods in Natural Language Processing",
            "year": 2004
        },
        {
            "authors": [
                "Y.C. Wu",
                "Y.S. Lee",
                "J.C. Yang."
            ],
            "title": "The exploration of deterministic and efficient dependency parsing",
            "venue": "Proc. of the 10th Conference on Computational Natural Language Learning, pages 241-245.",
            "year": 2006
        },
        {
            "authors": [
                "Y.C. Wu",
                "J.C. Yang",
                "Q.X. Lin."
            ],
            "title": "Description of the NCU Chinese word segmentation and named entity recognition system for SIGHAN bakeoff 2006",
            "venue": "Proc. of the 5th SIGHAN Workshop on Chinese Language Processing, pages 209-212.",
            "year": 2006
        },
        {
            "authors": [
                "Y.C. Wu",
                "J.C. Yang",
                "Y.S. Lee."
            ],
            "title": "An Approximate Approach for Training Polynomial Kernel SVMs in Linear Time",
            "venue": "Proc. of the 45th Annual Meeting of the Association for Computational Linguistics (ACL), in press.",
            "year": 2007
        },
        {
            "authors": [
                "H. Yamada",
                "Y. Matsumoto."
            ],
            "title": "Statistical dependency analysis with support vector machines",
            "venue": "Proc. of the 8th International Workshop on Parsing Technologies, pages 195\u2013206. 1181",
            "year": 2003
        }
    ],
    "sections": [
        {
            "text": "Proceedings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007, pp. 1175\u20131181, Prague, June 2007. c\u00a92007 Association for Computational Linguistics"
        },
        {
            "heading": "1 Introduction",
            "text": "The target of dependency parsing is to automatically recognize the head-modifier relationships between words in natural language sentences. Usually, a dependency parser can construct a similar grammar tree with the dependency graph. In this year, CoNLL-2007 shared task (Nivre et al., 2007) focuses on\nmultilingual dependency parsing based on ten different languages (Hajic et al., 2004; Aduriz et al., 2003; Mart\u00ed et al., 2007; Chen et al., 2003; B\u00f6hmova et al., 2003; Marcus et al., 1993; Johansson and Nugues, 2007; Prokopidis et al., 2005; Czendes et al., 2005; Montemagni et al., 2003; Oflazer et al., 2003) and domain adaptation for English (Marcus et al., 1993; Johansson and Nugues, 2007; Kulick et al., 2004; MacWhinney, 2000; Brown, 1973) without taking the languagespecific knowledge into consideration. The ultimate goal of them is to design ideal multilingual and domain portable dependency parsing systems.\nTo accomplish the multilingual and domain adaptation tasks, we present a three-pass parsing model based on a shift-reducing algorithm (Yamada and Matsumoto, 2003; Chang et al., 2006), namely, neighbor parsing, root relation parsing, and shift-reduce parsing. Our method favors examining the \u201cun-parsed\u201d tokens, which incrementally shrink. At the beginning, the parsing direction is mainly determined by the amount of un-parsed tokens in the sentence with either forward or backward parse. In this step, the projective parsing method can be used to evaluate most of the nonprojective Treebank datasets. Once the direction is determined, the pseudo-projectivize transformation algorithm (Nivre and Nilsson, 2005) converts most non-projective training data into projective and decodes the parsed text into non-projective. Hereafter, both neighbor-parser and root-parser were trained to discovery additional features for the downstream shift-reduce parse model. We found that the two additional features could improve the performance. Subsequently, the modified shiftreduce parsing algorithm starts to parse the final dependencies with two-pass processing, i.e., predict parse action and label the relations.\n1175\nIn the remainder of this paper, Section 2 describes the proposed parsing model, and Section 3 lists the experimental settings and results. Section 4 presents the discussion and analysis of our parser. In Section 5, we draw the future direction and conclusion."
        },
        {
            "heading": "2 System Description",
            "text": "Over the past decades, many state-of-the-art parsing algorithm were proposed, such as head-word lexicalized PCFG (Collins, 1998), Maximum Entropy (Charniak, 2000), Maximum/Minimum spanning tree (MST) (McDonald et al., 2005), shift-reduce-based deterministic parsing (Yamada and Matsumoto, 2003; Chang et al., 2006; Nivre, 2003). Among them, the shift-reduce methods were shown to be the most efficient method, which only costs at most 2n~3n actions to parse a sentence (Chang et al., 2006; Nivre, 2003). Chang et al. (2006) further added the \u201cwait-right\u201d action to the words that had children and could not be reduced in current state. This could avoid the socalled \u201ctoo early reduce\u201d problems.\nThe overall parsing model can be found in Figure 1. Figure 2 illustrates the detail system spec of our parsing model."
        },
        {
            "heading": "2.1 Neighbor Parser",
            "text": "As shown in Figure 1, the first step is to identify the neighbor head-modifier relations between two consecutive words. Cheng et al. (2006) also reported that the use of neighboring dependency attachment tagger enhance the unlabeled attachment scores from 84.38 to 84.6 for 13 languages. Usually, it is the case that the select features are fixed and could not be tuned to capture the second order features (McDonald et al., 2006). At each location, there the focus and next words are always compared. It may fail to link the next and next+1 word pair since the next word might be reduced due to an earlier wrong decision.\nHowever, starting parsing based on the result of neighbor parsing is not a good idea since it could produce error propagation problems. Rather, we include the result of our neighbor parsing as features to increase the original feature set. In the preliminary study, we found that the derived features are very useful for most languages.\nAs conventional sequential tagging problems, such part-of-speech tagging and phrase chunking, we employ the conditional random fields (CRF) as learners (Kudo et al., 2004). The basic idea of the neighbor parsing can be shown in Figure 3.\nThe first and second colums in Figure 3 represents the basic word and fine-grained POS froms, while the third column indicates if this word has the LH (left-head) or RH (right-head) with associated relations or O (no neighbor head in either left or right neighbor word). The used features are: Word, fine-grained POS, bigram, and bi-POS with context window = 2(left) and 4(right)\nUnfortunately, for some languages, like Chinese and Czech, training with CRF is because of the large number of features and the head relations. To make it practical, we focus on just three types: left head, right head, and out-of-neighbor. This effectively reduces most of the feature space for the CRF. The training time for the neighbor parser with only three categories is less than 5 minutes while it takes three days with taking all the relation tag into account."
        },
        {
            "heading": "2.2 Root Parser",
            "text": "After the neighbor parse, the tagged labels are good features for the root parse. In the second stage, the root parser identifies the root words in the sentence. Nevertheless, for some languages, such as Arabic and Czech, the roots might be several types as against to Chinese and English in which the number of labels of roots is merely one. Similar to the neighbor parser, we also take the root label into account. As noted, for Chinese and English, the goal of the root parser can be reduced to determine whether the current word is root or not.\nSimilar to the neighbor parse, the root parsing task can also be treated as a sequential tagging problem. Figure 4 shows the basic concept of the root parser. The third column is mainly derived from the neighbor parser, while the fourth column represents whether the current word is a root with relation or not."
        },
        {
            "heading": "2.3 Parsing Algorithm",
            "text": "After adding the neighbor and root parser output as features, in the final stage, the modified Yamada\u2019s shift-reduce parsing algorithm (Yamada and Matsumoto, 2003) is then run. This method is deterministic and can deal with projective data only. There are three basic operation (action) types: Shift (S), Left (L), and Right (R). The operation is mainly determined via the classifier according to the selected features (see 2.4). Each time, the operation is applied to two unparsed words, namely, focus and next. If there exists an arc between the two words (either left or right), then the head of focus or next word is found; otherwise (i.e., shift), next two words are considered at next stage. This method could be economically performed via maintaining two pointers, focus, and next without an explicit stack. The parse operation is iteratively run until no more relation can be found in the sentence.\nIn 2006, Chang et al. (2006) further reported that the use of \u201cstep-back\u201d in comparison to the original \u201cstay\u201d. Furthermore, they also add the \u201cwait-left\u201d operations to prevent the \u201ctoo early reduce\u201d problems. In this way, the parse actions can be reduced to be bound in 3n where n is the number of words in a sentence.\nNow we compare the adopted parsing algorithm in this year to the one we employed last year (Wu et al., 2006a). The common characteristics are:\n1. the same number of parse operations (4) 2. shift-reduce 3. linearly scaled 4. deterministic and projective\nOn the contrary, their parse actions are quite different. Therefore these two methods have different run time. This gives the two methods rise to different iterative times. The main reason is that the step-back might trace back to previous words, which can be viewed as pop the top words on the stack back to the unparsed strings, while the Nivre\u2019s method does not trace-back any two words\nin the stack. In other words, if a word is pushed into the stack, it will no longer be compared with the other deeper words inside the stack. Hence some of the non-root words in the stack remain to be parsed. A simple solution is to adopt an exhaustive post-processing step for the unparsed words in the stack (details in (Wu et al., 2006a, 2006b)).\nA good advantage of the step-back is that it can trace back to the unparsed words in the stack. But theoretically, the required parse actions still more than the Nivre\u2019s algorithm (2n vs. 3n).\nBy adopting the projectivized en/de-coding over the modified Yamada\u2019s algorithm, we can treat the words that do not have a parent as roots. Thus, for some languages (e.g. Czech and Arabic), the multiple root problem can be easily solved. In this year we separate the parse action and the relation label into two stages as opposed to having one pass last year. In this way, we can simply adopt a sequential tagger to auto-assign the relation labels after the whole sentence is parsed."
        },
        {
            "heading": "2.4 Features and Learners",
            "text": "Unlike last year, we did separate the action prediction and the label recognition into two stages where the one of the learners could provide more information to another. The used features of the two learners are quite similar and listed as follows: Basic feature type (for previous 2 and next 3 words): Word, POS (fine-grained), Lemma, FEAT, NParse, RParse Enhanced feature type: Bigram, BiPOS for focus and next words previous two parse actions For label recognition: Label tag to its head, label tags for previous two words\nIn this paper, we replicate and modify the modified finite Newton support vector machines (MFNSVM) (Keerthi and DeCoste, 2005) as the learner.\nThe MFN-SVM is a very efficient SVM optimization method which linearly scales with the number of training examples. Usually, the trained models from MFN-SVM are quite large that could not be processed in practice. We therefore defined the positive lower bound (10-10) and the negative upper bound (-10-10) to eliminate values that tend to be zero.\nHowever, the SVM is a binary classifier which only recognizes true or false. For multiclass problem, we use the so-called one-versus-all (OVA) method with linear kernel to combine the results of each individual classifier. The final class in testing phase is mainly determined by selecting the maximum similarity.\nFor all languages, our parser uses the same settings and features. For all the languages (except for Basque and Turkish), we use backward parsing direction to keep the un-parsed token rate low."
        },
        {
            "heading": "3 Experimental Result",
            "text": ""
        },
        {
            "heading": "3.1 Dataset and Evaluation Metrics",
            "text": "The testing data is provided by the (Nivre et al., 2007) which consists of 10 language treebanks. More detailed descriptions of the dataset can be found at the web site1. The experimental results are mainly evaluated by the unlabeled and labeled attachment scores. CoNLL also provided a perl script to automatic compute these rates."
        },
        {
            "heading": "3.2 Results",
            "text": "Table 1 presents the overall parsing performance of the 10 languages. As shown in Table 1, we list two parsing results at column B and column C (new and old). It is worth to note that the result B is produced by training the neighbor parser with full labels instead of the three categories, left/right/out-of-neighbor. A is the official provided parse results. Some of the parsing results in A did not include the enhanced feature type and neighbor/root parses due to the time limitation. For the domain adaptation task, we directly use the trained English model to classify the PChemtb and CHILDES corpora without further adjustment.\nIn addition, we also apply the Maltparser 0.4, which is implemented with the Nivre\u2019s algorithm (Nivre et al., 2006) to be compared. The Maltpaser also includes the SVM and memory-based learner (MBL). Nevertheless, the training time complexity of the SVM in Maltparser is not linear time as MFN-SVM. Therefore we use the default MBL and feature model 3 (M3) in this experiment. To make a fair comparison, the input training data was also projectivized through the same pseudoprojective encoding/decoding methods.\n1 http://nextens.uvt.nl/depparse-wiki/SharedTaskWebsite\nTo perform the significant test, we evaluate the statistical difference among the three results. If the answer is \u201cYes\u201d, it means the two systems are significant difference under at least 95% confidence score (p < 0.05).\nThe final column of the Table 1 lists the nonroot words unparsed rate of the modified Yamada\u2019s method and the Nivre\u2019s parsing model which we employed last year. Among 10 languages, we can find that the modified Yamada\u2019s method outperform our old method in five languages, while fail to win in three languages. We did not report the comparative study between the forward parsing and backward parsing directions here since only the two languages (Basque and Turkish) were better in performing forward direction."
        },
        {
            "heading": "4 Discussion",
            "text": "Now we turn to discuss the improvement of the use of the neighbor parse and root parse. All of the experiments were conducted by additional runs where we removed the neighbor and root parse outputs from the feature set. In this experiment, we report four representative languages that tend to achieve the best and worst improvements. Table 2 lists the comparative study of the four languages.\nAs listed in Table 2, both English and Chinese got substantial benefit from the use of the two parsers. As observed by (Isozaki et al., 2004), incorporating both top-down (root find) and bottomup (base-NP) can yield better improvement over\nthe Yamada\u2019s parsing algorithm. Thus, instead of pre-determining the root and base-phrase structures, the tagging results of the neighbor and root parsers were included as new features to add wider information for the shift-reduce parser. It is also interesting to link neighbors and determine the root before parsing. We plan to compare it with out method in the future.\nOn the other hand, we also found that 2 out of the 10 languages had been negatively affected by the neighbor and root parsers. In Basque they made a marginally negative improvement, and in the Turkish the two parsers did decrease the original parsing models. We further observed that the main cause is that the weak performance of the neighbor parser. In Turkish, the recall/precision rates of the neighbor dependence are 92.61/93.12 with include neighbor parse outputs, while it achieved 93.71/93.51 with purely run the modified Yamada\u2019s method. We can expect that the result could achieve higher LAS score when the neighbor parser is improved. As mentioned in section 2.1, 2.2, the selected features for the two parsers are unified for the 10 languages. It is not surprising\nthat for certain data the fixed feature set might perform even worse than the original shift-reduce parser. A better way is to validate the features with variant settings for different languages. We left the feature engine task as future work."
        },
        {
            "heading": "5 Conclusion and Future Remarks",
            "text": "Multilingual dependency parsing investigates on proposing a general framework of dependence parsing algorithms. This paper presents and analyzes the impact of two preprocessing components, namely, neighbor parsing and root-parsing. Those two parsers provide very useful additional features for downstream shift-reduce parser. The experimental results also demonstrated that the use of the two components did improve results for the selected languages. In the error-analysis, we also observed that for some languages, parameter tuning and feature selection is very important for system performance.\nIn the future, we plan to report the actual performance with replacing the MFN-SVM by the polynomial kernel SVM. In our pilot study, the use of approximate-polynomial kernel (Wu et al., 2007) outperforms the linear kernel SVM in Chinese and Arabic. Also, we are investigating how to convert the shift-reduce parser into approximate N-best parser efficiently. In this way, the parse reranking algorithm can be adopted to further improve the performance."
        }
    ],
    "title": "Multilingual Deterministic Dependency Parsing Framework using Modi- fied Finite Newton Method Support Vector Machines",
    "year": 2007
}