{
    "abstractText": "Modern IEEE 802.11 (Wi-Fi) networks extensively rely on multiple-input multiple-output (MIMO) to significantly improve throughput. To correctly beamform MIMO transmissions, the access point needs to frequently acquire a beamforming matrix (BM) from each connected station. However, the size of the matrix grows with the number of antennas and subcarriers, resulting in an increasing amount of airtime overhead and computational load at the station. Conventional approaches come with either excessive computational load or loss of beamforming precision. For this reason, we propose SplitBeam, a new framework where we train a split deep neural network (DNN) to directly output the BM given the channel state information (CSI) matrix as input. The DNN is designed with an additional \u201cbottleneck\u201d layer to \u201csplit\u201d the original DNN into a head model and a tail model, respectively executed by the station and the access point. The head model generates a compressed representation of the BM, which is then used by the AP to produce the BM using the tail model. We formulate and solve a bottleneck optimization problem (BOP) to keep computation, airtime overhead, and bit error rate (BER) below application requirements. We perform extensive experimental CSI collection with off-the-shelf Wi-Fi devices in two distinct environments and compare the performance of SplitBeam with the standard IEEE 802.11 algorithm for BM feedback and the state-of-theart DNN-based approach LB-SciFi. Our experimental results show that SplitBeam reduces the beamforming feedback size and computational complexity by respectively up to 81% and 84% while maintaining BER within about 10\u22123 of existing approaches. We also implement the SplitBeam DNNs on FPGA hardware to estimate the end-to-end BM reporting delay, and show that the latter is less than 10 milliseconds in the most complex scenario, which is the target channel sounding frequency in realistic multiuser MIMO scenarios. To allow full reproducibility, we will release our code and datasets to the community.",
    "authors": [
        {
            "affiliations": [],
            "name": "Niloofar Bahadori"
        },
        {
            "affiliations": [],
            "name": "Yoshitomo Matsubara"
        },
        {
            "affiliations": [],
            "name": "Marco Levorato"
        },
        {
            "affiliations": [],
            "name": "Francesco Restuccia"
        }
    ],
    "id": "SP:3f3ab1bc9a09c8b6418ffcb4549fcc3ca2eff7a8",
    "references": [
        {
            "authors": [
                "C. Deng",
                "X. Fang",
                "X. Han",
                "X. Wang",
                "L. Yan",
                "R. He",
                "Y. Long",
                "Y. Guo"
            ],
            "title": "IEEE 802.11be Wi-Fi 7: New Challenges and Opportunities",
            "venue": "IEEE Communications Surveys & Tutorials, vol. 22, no. 4, pp. 2136\u2013 2166, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "IEEE-802.11ac"
            ],
            "title": "IEEE Standard for Information Technology Local and Metropolitan Area Networks Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications Amendment 5: Enhancements for Higher Throughput",
            "venue": "2014.",
            "year": 2014
        },
        {
            "authors": [
                "IEEE-802.11ax"
            ],
            "title": "IEEE draft standard for information technology telecommunications and information exchange between systems local and metropolitan area networks specific requirements part 11: Wireless LAN medium access control (MAC) and physical layer (PHY) specifications amendment enhancements for high efficiency WLAN",
            "venue": "pp. 1\u2013746, March 2019.",
            "year": 2019
        },
        {
            "authors": [
                "E. Perahia",
                "R. Stacey"
            ],
            "title": "Next Generation Wireless LANs: 802.11n and 802.11ac",
            "venue": "Cambridge university press,",
            "year": 2013
        },
        {
            "authors": [
                "M.S. Gast"
            ],
            "title": "802.11ac: A Survival Guide: Wi-Fi at Gigabit and Beyond",
            "year": 2013
        },
        {
            "authors": [
                "G.H. Golub",
                "C.F. Van Loan"
            ],
            "title": "Matrix computations. johns hopkins studies in the mathematical sciences",
            "venue": "1996.",
            "year": 1996
        },
        {
            "authors": [
                "A.K. Hassan",
                "M. Moinuddin",
                "U.M. Al-Saggaf",
                "O. Aldayel",
                "T.N. Davidson",
                "T.Y. Al-Naffouri"
            ],
            "title": "Performance Analysis and Joint Statistical Beamformer Design for Multi-User MIMO Systems",
            "venue": "IEEE Communications Letters, vol. 24, no. 10, pp. 2152\u20132156, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "X. Li",
                "S. Jin",
                "X. Gao",
                "R.W. Heath"
            ],
            "title": "Three-Dimensional Beamforming for Large-Scale FD-MIMO Systems Exploiting Statistical Channel State Information",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 65, no. 11, pp. 8992\u20139005, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "C. Zhang",
                "Y. Huang",
                "Y. Jing",
                "S. Jin",
                "L. Yang"
            ],
            "title": "Sum-rate analysis for massive mimo downlink with joint statistical beamforming and user scheduling",
            "venue": "IEEE Transactions on Wireless Communications, vol. 16, no. 4, pp. 2181\u20132194, 2017.",
            "year": 2017
        },
        {
            "authors": [
                "F.A. Monteiro",
                "O.A. Lopez",
                "H. Alves"
            ],
            "title": "Massive Wireless Energy Transfer with Statistical CSI Beamforming",
            "venue": "IEEE Journal of Selected Topics in Signal Processing, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "C.A. Metzler",
                "A. Maleki",
                "R.G. Baraniuk"
            ],
            "title": "From Denoising to Compressed Sensing",
            "venue": "IEEE Transactions on Information Theory, vol. 62, no. 9, pp. 5117\u20135144, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "M.J. Azizipour",
                "K. Mohamed-Pour"
            ],
            "title": "Compressed Channel Estimation for FDD Massive MIMO Systems Without Prior Knowledge of Sparse Channel Model",
            "venue": "IET Communications, vol. 13, no. 6, pp. 657\u2013 663, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "K. Oteri",
                "H. Lou",
                "X. Wang"
            ],
            "title": "Overhead Reduction in 802.11be",
            "venue": "document IEEE 802.11-19/0391r0."
        },
        {
            "authors": [
                "C. Lu",
                "W. Xu",
                "H. Shen",
                "J. Zhu",
                "K. Wang"
            ],
            "title": "MIMO Channel Information Feedback Using Deep Recurrent Network",
            "venue": "IEEE Communications Letters, vol. 23, no. 1, pp. 188\u2013191, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "P. Liang",
                "J. Fan",
                "W. Shen",
                "Z. Qin",
                "G.Y. Li"
            ],
            "title": "Deep Learning and Compressive Sensing-Based CSI Feedback in FDD Massive MIMO Systems",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 69, no. 8, pp. 9217\u20139222, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "C. Wen",
                "W. Shih",
                "S. Jin"
            ],
            "title": "Deep Learning for Massive MIMO CSI Feedback",
            "venue": "IEEE Wireless Communications Letters, vol. 7, no. 5, pp. 748\u2013751, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "M.B. Mashhadi",
                "Q. Yang",
                "D. G\u00fcnd\u00fcz"
            ],
            "title": "Distributed Deep Convolutional Compression for Massive MIMO CSI Feedback",
            "venue": "IEEE Transactions on Wireless Communications, vol. 20, no. 4, pp. 2621\u2013 2633, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "P.K. Sangdeh",
                "H. Pirayesh",
                "A. Mobiny",
                "H. Zeng"
            ],
            "title": "LB-SciFi: Online Learning-Based Channel Feedback for MU-MIMO in Wireless LANs",
            "venue": "2020 IEEE 28th International Conference on Network Protocols (ICNP), pp. 1\u201311, IEEE, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "F. Gringoli",
                "M. Schulz",
                "J. Link",
                "M. Hollick"
            ],
            "title": "Free Your CSI: A Channel State Information Extraction Platform for Modern Wi-Fi Chipsets",
            "venue": "Proceedings of the 13th International Workshop on Wireless Network Testbeds, Experimental Evaluation & Characterization, pp. 21\u201328, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "Y. Xiong",
                "R. Mehta",
                "V. Singh"
            ],
            "title": "Resource Constrained Neural Network Architecture Search: Will A Submodularity Assumption Help",
            "venue": "Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 1901\u20131910, 2019.",
            "year": 1901
        },
        {
            "authors": [
                "J. Mellor",
                "J. Turner",
                "A. Storkey",
                "E.J. Crowley"
            ],
            "title": "Neural architecture search without training",
            "venue": "International Conference on Machine Learning, pp. 7588\u20137598, PMLR, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "D.P. Kingma",
                "J. Ba"
            ],
            "title": "Adam: A Method for Stochastic Optimization",
            "venue": "Third International Conference on Learning Representations, 2015.",
            "year": 2015
        },
        {
            "authors": [
                "J. Xianjun",
                "L. Wei",
                "M. Michael"
            ],
            "title": "open-source ieee802.11/wi-fi baseband chip/fpga design",
            "venue": "2019.",
            "year": 2019
        }
    ],
    "sections": [
        {
            "text": "Index Terms\u2014Split Computing, MIMO, IEEE 802.11, Wi-Fi, Beamforming, Experiments.\nI. INTRODUCTION\nToday, Wi-Fi networks are used to connect hundreds of millions of people worldwide. Wi-Fi is so ubiquitous that cellular operators are expected to offload 63% of their traffic to Wi-Fi by 2022 [1]. To attest to the need for higher data rates, the IEEE is currently standardizing 802.11be (Wi-Fi 7), which will support throughput of up to 46 Gbps through wider signal bandwidths and the usage of multi-user multiple-input and multiple-output (MU-MIMO) techniques [2]. MU-MIMO will become fundamental also to effectively decongest the unlicensed spectrum bands through spatial reuse, which are increasingly saturated [3]. To correctly beamform transmissions, MU-MIMO requires access points (APs) to periodically collect channel state information (CSI) from each connected station\n(STA) to beamform the transmissions [4], [5]. According to the IEEE 802.11 standard [6], the beamforming feedback (BF) is constructed by (i) measuring the CSI through pilot signals and (ii) computing the BF through singular value decomposition (SVD). Then, the BF is decomposed into Givens rotation (GR) angles that produce the beamforming matrix (BM), as explained in Section III-A.\nA key challenge in MIMO systems is that the size of the BF grows with the number of subcarriers, transmitting and receiving antennas. For example, in an 8 \u00d7 8 network at 160 MHz of bandwidth, the BF in 802.11 will be of size (486 subcarriers \u00d7 56 angles/subcarrier \u00d7 16 bits/angle =) 435,456 bits \u2243 54.43 kB, if the maximum angle resolution is used. If BFs are sent back every 10 ms as suggested in [7], the airtime overhead is 435,456 / 0.01 \u2243 43.55 Mbit/s. Moreover, the BF computation imposes a significant burden on the STAs, which may become intolerable for low-power devices. Specifically, the complexity of SVD and GR are O((4NtN2r + 22N3t ) \u00b7 S) and O(N3t N3r S), where Nt, Nr and S denote the number of transmitting and receiving antennas and subcarriers [8]. Since Wi-Fi 7 will support more spatial streams (up to 16) and bandwidth (up to 320 MHz), a thorough revision of how MIMO is performed in Wi-Fi is quintessential to keep the complexity under control.\nExisting approaches to reduce MIMO complexity \u2013 discussed in details in Section II \u2013 come with excessive computation overhead and/or performance loss, with most of them not being compliant to the IEEE 802.11 standard [9]\u2013 [20]. In this paper, we take a different approach and present SplitBeam, an IEEE 802.11 standard-compliant framework leveraging split computing to drastically decrease both computational load and BF size while maintaining reasonable beamforming accuracy. Figure 1 shows a high-level overview\nar X\niv :2\n31 0.\n08 65\n6v 1\n[ cs\n.N I]\n1 2\nO ct\n2 02\n3\nof SplitBeam. We first train a deep neural network (DNN) model to map the estimated CSI matrix to the BF in a supervised manner. Second, we \u201csplit\u201d the DNN into a head and a tail model, respectively executed by the STAs and by the AP. The head model is custom-trained to produce a compressed representation of the BF through the introduction of a \u201cbottleneck\u201d inside the model, thus reducing BF airtime and STA computational load.\nThe key advantage of our approach is that the complexity of the head model and the BF representation size can be adjusted by modifying the bottleneck placement and size. Indeed, the bottleneck can trade off computational load, feedback size and beamforming accuracy, which was not available in previous approaches. This is crucial for constrained Wi-Fi devices and systems, which will cater to heterogeneous devices with different processing capacities [2].\nThis paper makes the following novel contributions: \u2022 We propose SplitBeam, a novel framework for BF compression and STA computation reduction in MU-MIMO Wi-Fi networks. We perform a complexity analysis in Section IV-E and show that on average, SplitBeam successfully reduces the STA computational load and the BF size by respectively 92% and 91% when compared to the standardized 802.11 algorithm; \u2022 We formulate a bottleneck optimization problem (BOP) to determine the bottleneck placement and size with the goal of minimizing airtime and computation overhead, while ensuring that the bit error rate (BER) and end-to-end delay are below the application\u2019s desired level (Section IV-B). Given its complexity, we introduce a heuristic algorithm and propose a customized training procedure for the resulting DNN; \u2022 We leverage off-the-shelf Wi-Fi equipment to collect CSI data in two different propagation environments, and compare the performance of SplitBeam with IEEE 802.11ac/ax CSI feedback algorithm [4], [5] (henceforth called 802.11 for brevity) and the state-of-the-art DNN-based compression technique, LB-SciFi [20]. Experimental results in Section VI show that the computational load and feedback size are reduced by up to 84% and 81% with respect to 802.11. Also, with the same compression rate, the computational load is reduced by up to 89% compared to LB-SciFi; \u2022 We have synthesized SplitBeam in field-programmable gate array (FPGA) hardware by using a customized library to show the feasibility of SplitBeam in real-world Wi-Fi systems. Our experimental results show that the maximum end-to-end latency incurred by SplitBeam is less than 7 milliseconds (ms) in the case of 4 \u00d7 4 MIMO operating at 160 MHz and lowest compression rate, which is well below the suggested threshold of 10ms in MU-MIMO Wi-Fi systems [7]. We pledge to release our code and our 230 GB dataset to the community for full reproducibility."
        },
        {
            "heading": "II. BACKGROUND AND RELATED WORK",
            "text": "In this section, we discuss prior work and highlight the novelty of this paper. We summarize CSI compression methods\nand data-driven feedback techniques in Section 2.1 and 2.2. CSI collection methodologies and current MU-MIMO CSI datasets are discussed in Section 2.3.\n2.1: Traditional CSI Feedback Compression. Existing approaches can be categorized into (i) statistical approaches, (ii) compressive sensing (CS), and (iii) polar decomposition (PD) methods. The former methods leverage channel statistics to reduce the reporting frequency [9]\u2013[12]. As a consequence, their performance deteriorates in dynamic channel environments. Conversely, CS takes advantage of the sparsity of the channel response to compress the CSI. However, indoor channels might not be as sparse due to the presence of multiple reflectors. Moreover, many widely-used CS techniques such as BM3DAMP [13] and OMP-US [14] experience slow convergence time. PD leverages the fact that the BF matrix is unitary. Thus, approaches such as Givens rotations (GR) can reduce the feedback size. However, computing and compressing the BF imposes an additional computational load. Subcarrier grouping, wide-band precoding [15] and reducing the number of feedback bits [6] can be used to decrease complexity, which come at the detriment of beamforming accuracy.\n2.2: Data-Driven CSI Compression. Deep learning (DL) has been used for single-user MIMO (SU-MIMO) CSI compression [16]\u2013[19]. For instance, CS-ReNet [17], CsiNet [18], DeepCMC [19] have used convolutional neural network (CNN) and long short-term memory (LSTM) to extract the location of the significant time-domain channel taps by exploiting channel redundancy. However, the above work mostly assumes low-mobility, single-user, and outdoor LongTerm Evolution (LTE) scenarios, where channels responses are highly redundant and sparse due to the limited mobility and few local scatters at the base station (BS). In addition, conversely from SU-MIMO, inaccuracy in the beamforming will lead to inter-user interference (IUI) in MU-MIMO, which reduces the signal-to-interference-plus-noise ratio (SINR) significantly. Therefore, the CSI must be of higher resolution and more frequently updated. LB-SciFi [20] is the first deep learning (DL)-based work that investigated BF compression of an indoor wireless LAN (WLAN) network through adopting a autoencoder (AE)-based DNN. LB-SciFi model is composed of an encoder and a decoder. This model requires STAs to (i) compute the BF through SVD, (ii) decompose the BF into \u03c8 and \u03d5 angles using GR, and (iii) compress the angles using the encoder. At the AP, the received codes are decompressed using the decoder, and further inverse GR must be applied to recover the BF. Thus, the LB-SciFi\u2019s encoder compounds the complexity of SVD and GR operations, which may exclude resource constraint devices. In addition, since the AE is trained for 20 MHz channels with 56 subcarriers, the growth rate of the encoder\u2019s complexity with respect to the number of subcarriers is unknown. Conversely, in this work, we focus on reducing the computational load, as well as feedback airtime while maintaining the BER at an acceptable level. In Section VI, we show that while SplitBeam achieves the same level of feedback compression as LB-SciFi, it reduces the STAs\u2019\ncomputational load up to 89%.\n2.3: CSI Collection and Datasets Availability. To the best of our knowledge, only a few Wi-Fi CSI datasets are publicly available, with the majority based on simulation data [17]\u2013 [19]. Authors in [20] collected MU-MIMO CSI dataset for training and evaluating the LB-SciFi. However, the experiment is limited to 20 MHz and the dataset is not publicly available. Although most commercial Wi-Fi chipsets can potentially generate CSI data, few manufacturers make this data available to developers and researchers, especially for modern chipsets such as 802.11ac/ax. Recently, the Nexmon firmware patch has been released, allowing the extraction of CSI from specific Broadcom/Cypress Wi-Fi chipsets [21]. To address the lack of large-scale MU-MIMO wireless dataset, for the first time, we collect a large-scale dataset containing multi-user (up to 3) multi-antenna (up to 3) fine-grained (up to 242 subcarriers) CSI data from multiple environments with different propagation characteristics using off-the-shelf Wi-Fi routers, which we will release to the community."
        },
        {
            "heading": "III. PROBLEM STATEMENT AND CHALLENGES",
            "text": "In this section, we detail the BF acquisition procedure in WLAN 802.11 systems. Then, we discuss the challenges of applying such a technique to next-generation Wi-Fi systems."
        },
        {
            "heading": "A. System Model and Preliminaries",
            "text": "In this section, we briefly introduce some terminology. We will adopt the following notation for mathematical expressions. We use boldface uppercase letters to denote matrices. We use the superscripts T and \u2020 to denote the transpose and the complex conjugate transpose (i.e., the Hermitian). We define with \u2220C the matrix containing the phases of the complexvalued matrix C. Moreover, diag(c1, . . . , cj) indicates the diagonal matrix with elements (c1, . . . , cj) on the main diagonal. The (c1, c2) entry of matrix C is defined by [C]c1,c2 , while Ic refers to an identity matrix of size c \u00d7 c and Ic\u00d7d is a c\u00d7 d generalized identity matrix. The notations R and C will indicate the set of real and complex numbers, respectively.\n1) WLAN MU-MIMO System Model: We consider a MUMIMO system with an AP as the beamformer, and a set I of Ns STA devices as beamformees. The configuration of the MU-MIMO system is shown in Figure 2, where Nt antennas are located at the AP and Nr,i antennas are at each client. Nss,i is the number of spatial streams for STA i. Let Xi(s) \u2208 CNss,i\u00d71 represent the transmitted data symbol\nvector for user i over subcarrier s \u2208 S , where S is the set of S orthogonal frequency-division multiplexing (OFDM) subcarriers. Each data symbol vector is beamformed through a beamforming matrix (BM) denoted by Wi(s) \u2208 CNt\u00d7Nss,i . By defining the fading channel from the AP to STA i as Hi(s) \u2208 CNr,i\u00d7Nt , the received signal at STA i is\nYi =\n\u221a \u03c1\nNt HiWiXi + \u2211 j\u2208I\\i HiWjXj +Ni, (1) where \u03c1 denotes the signal-to-noise-ratio (SNR) and is assumed equal for all users. Ni is the complex additive white Gaussian noise (AGWN) for STA i as CN (0, 1). To simplify notation, (1) is given in terms of the frequency domain for a single subcarrier and subcarrier index (s) is omitted. We assume the number of transmit antennas is set to be the sum total of all the used spatial streams, Nt = \u2211 i\u2208I Nss,i. The first term in (1) denotes the desired signal and the second term is the inter-user interference, which can be eliminated thanks to the beamforming. Ideally, HiWj = 0 when i \u0338= j. Therefore, the received signal can be reduced to Yi = \u221a \u03c1/NtHiWiXi.\n2) Computing the Beamforming Matrix: In MU-MIMO Wi-Fi systems, the beamforming matrix W with dimension Nt\u00d7 \u2211Ns i=1Nss,i\u00d7S is calculated using a multi-user channel sounding mechanism, shown in Figure 3. The procedure contains three main steps:\n(1) The AP begins the process by transmitting a null data packet (NDP) announcement frame, used to gain control of the channel and identify the STAs. The AP follows the NDP announcement frame with a NDP for each spatial stream;\n(2) Upon reception of the NDP, each STA i analyzes the NDP training fields \u2013 for example, VHT-LTF (Very High Throughput Legacy Training Field) in 802.11ac \u2013 and estimates the channel matrix Hi(s) for all subcarriers s, which is then decomposed by using SVD:\nHi(s) = Ui(s) \u00b7 Si(s) \u00b7 Zi(s)\u2020 (2)\nwhere Ui(s) \u2208 CNr,i\u00d7Nr,i and Zi(s) \u2208 CNt\u00d7Nt are unitary matrices, while the singular values are collected in the Nr,i \u00d7 Nt diagonal matrix Si(s). With this notation, the complex-valued BM Vi(s) is defined by collecting the first Nss,i columns of Zi(s). To simplify the notation, we will now drop the i subscript and refer to a generic receiver. To reduce the channel overhead, V(s) is converted into polar coordinates\nas detailed in Algorithm 1. The output is matrices Ds,t and Gs,\u2113,t, defined as\nDs,t =  It\u22121 0 . . . 0 0 ej\u03d5s,t,t 0 . . . ... ... 0 . . . 0\n... 0 ej\u03d5s,Nt\u22121,t 0 0 . . . 0 1\n , (3)\nGs,\u2113,t =  It\u22121 0 . . . 0 0 cos\u03c8s,\u2113,t 0 sin\u03c8s,\u2113,t ...... 0 I\u2113\u2212t\u22121 0 \u2212 sin\u03c8s,\u2113,t 0 cos\u03c8s,\u2113,t 0\n0 . . . 0 INr\u2212\u2113  , (4)\nthat allow rewriting V(s) as V(s) = V\u0303(s) \u00b7 D\u0303(s), with\nV\u0303(s) = min(Nss,Nt\u22121)\u220f t=1\n( Ds,t\nNt\u220f l=t+1 GTs,l,t ) \u00b7 INt\u00d7Nss , (5)\nIn the V\u0303(s) matrix, the last row \u2013 i.e., the feedback for the Ntth transmitting antenna \u2013 consists of non-negative real numbers by construction. Using this transformation, the STA is only required to transmit the \u03d5 and \u03c8 angles to the AP. Moreover, it has been proved (see [6], Chapter 13) that the beamforming performance is equivalent when using V(s) or V\u0303(s). Thus, the feedback for D\u0303k is not fed back to the AP.\nAlgorithm 1: V(s) decomposition Require: V(s); D\u0303(s) = diag(ej\u2220[V(s)]Nt,1 , . . . , ej\u2220[V(s)]Nt,Nss ) ; \u2126(s) = V(s) \u00b7 D\u0303(s)\u2020; for t\u2190 1 to min(Nss, Nt \u2212 1) do\n\u03d5s,\u2113,t = \u2220 [\u2126(s)]\u2113,t with \u2113 = t, . . . , Nt \u2212 1; compute Ds,t through Equation (3); \u2126(s)\u2190 D\u2020s,t \u00b7\u2126(s); for \u2113\u2190 t+ 1 to Nt do\n\u03c8s,\u2113,t = arccos\n( [\u2126(s)]t,t\u221a\n[\u2126(s)]2t,t+[\u2126(s)] 2 \u2113,t\n) ;\ncompute Gs,\u2113,t through Equation (4); \u2126(s)\u2190 Gs,\u2113,t \u00b7\u2126(s);\n(3) The AP transmits a beamforming report poll (BRP) frame to retrieve the angles from each STA. The angles are further quantized using b\u03d5 \u2208 {7, 9} bits for \u03d5 and b\u03c8 = b\u03d5\u22122 bits for \u03c8, to further reduce the channel occupancy. The quantized values \u2013 q\u03d5 = {0, . . . , 2b\u03d5 \u2212 1} and q\u03c8 = {0, . . . , 2b\u03c8 \u2212 1} \u2013 are packed into a compressed beamforming frame (CBF). Each contains A number of angles for each of the S OFDM subchannels for a total of S \u00b7A angles each. For example, a 16\u00d716 system with 320 MHz channels requires 256 complex elements for each of the 996 subcarriers. The 802.11 standard requires 8 bits for each real and imaginary component of the CBF, which results in 510 kB."
        },
        {
            "heading": "B. Challenges of 802.11 Beamforming Procedure",
            "text": "The size of the beamforming feedback (BF) grows as Nt\u00d7\u2211Ns i=1Nss,i \u00d7 S. This implies the following drawbacks: \u2022 Feedback airtime increases with the number of STAs, as each STA sends its BF separately. Moreover, the number of decomposed angles and ultimately the size of the BF depends on the number of antennas, and grows linearly with channel bandwidth, as discussed in Section IV-E2; \u2022 Computing and compressing the through SVD and GR operations imposes a significant computational load on beamformees, as discussed in detail in Section IV-E1. This may impact resource-limited devices; \u2022 GR angle decomposition and BF reconstruction introduce an additional error. This deteriorates the performance of the multi-user transmission, especially in scenarios with small inter-user separation where successful data recovery depends highly on accurate beamforming; \u2022 The computational load at the STA and the feedback size cannot be modified according to application- and devicespecific constraints. As next-generation Wi-Fi caters to heterogeneous devices and a wide range of performance requirements, it is critical to achieve this functionality.\nIV. THE SPLITBEAM FRAMEWORK\nIn this section, we elaborate on the SplitBeam framework. First, the system model and design challenges are outlined in Section IV-A. Next, the BOP is formulated and the heuristic solution is detailed in Sections IV-B and IV-C. Finally, the SplitBeam model implementation and the customized training procedure are explained in Section IV-D.\nA. The SplitBeam DNN\nSplitBeam trains a DNN that maps the CSI matrix Hi to the BF Vi in a supervised manner. To compress the BF and transfer the STAs computational load to the AP (with higher computational capacity), we introduce a \u201cbottleneck layer\u201d in the DNN as shown in Figure 4. The bottleneck is an intermediate representation in the DNN model which is (K < 1 times) smaller than the model input Hi. The bottleneck divides the DNN into a head and a tail network, which are respectively executed on the STA and the AP.\nAn overview of SplitBeam is shown in Figure 5, where (1) the estimated CSI matrices at STAs are fed to the head model (2) that is tasked to produce a compressed representation of the BF denoted by V\u2032i (3). The compressed BF is sent to the AP over the air (4), where it is fed to the tail model (5) to reconstruct the BF and generate the beamforming matrix(6).\nRemarks. The placement and size of the bottleneck ultimately determine the head network architecture, and thus (i) the STA computational load, (ii) the BF feedback size, and (iii) the beamforming accuracy. Indeed, there is a trade-off between the complexity of the head model, the BF compression rate, and the accuracy of inference. While placing the bottleneck early on with a low number of nodes reduces the STA computation load and airtime overhead, it leads to a decrease\nin beamforming accuracy, which ultimately increases the BER. Therefore, the bottleneck placement and size must be adjusted according to the application-specific requirements."
        },
        {
            "heading": "B. Bottleneck Optimization Problem (BOP)",
            "text": "We model the original DNN as a functionM that maps the channel matrix Hi \u2208 CNr\u00d7Nt\u00d7S to the BF Vi \u2208 CNr\u00d7Nt\u00d7S as M(H;\u03b8) : CH \u2192 CV, thorough L-layer transformations:\nrj = Fj(rj\u22121,\u03b8j) 0 \u2264 j \u2264 L,\nwhere Fj(rj\u22121,\u03b8j) is the mapping carried out by the j-th layer and j = 0 denotes the input layer. The vector \u03b8 = {\u03b81, . . . ,\u03b8L} defines the set of parameters of the DNN. To devise the bottleneck, we use an encoder-decoder like structure where the first e layers of the DNN is the encoder and the rest of the layers are the decoder. The encoder, called the head model H, is placed from the input layer to the bottleneck B. Next, the tail model T decompresses the encoded BF to construct the BF Vi. The modified model can be written as\nM(H;\u03b8) = H = Fj(rj\u22121,\u03b8j), 0 \u2264 j < e,B = Fe(re\u22121,\u03b8e), j = e,T = Fj(rj\u22121,\u03b8j), e+ 1 \u2264 j \u2264 L. (6) Let LHi (e,N) be the STA i overhead consists of three components: (i) the computational cost (i.e., the power consumption and memory required for executing the model), denoted by Lci (e,N); (ii) the execution time for BF compression through the head model, denoted by THi (e,N); and (iii) the\npower consumption of transmitting the compressed BF to the AP, denoted by Ltxi (e,N). Also, T A i (e,N) represents the compressed BF feedback airtime. Finally, T T (e,N) denotes the time required for reconstructing the BF at the AP. Notice that compression, decompression and airtime overhead depend on the placement e and size of the bottleneck N .\nWe define the BOP such that it minimizes the STA computation overhead and feedback airtime as\nmin e,N \u2211 i\u2208I ( \u00b5Hi L H i (e,N) + (1\u2212 \u00b5Hi ) \u00b7 TAi (e,N) ) (7a) s. t. 0 < \u00b5Hi < 1, i \u2208 I (7b) BERi \u2264 \u03b3, i \u2208 I (7c) max i\u2208I (THi (e,N) + T A i (e,N)) + T T (e,N) < \u03c4, (7d)\nwhere \u00b5Hi parameterizes the importance of reducing the STAs overhead versus the feedback airtime. In applications where STAs are resource-constrained, it is crucial to reduce the STAs load, i.e., \u00b5Hi > \u00b5 A i . On the other hand, in dynamic propagation environments like crowded rooms, where the channel coherence time is short, high feedback airtime cannot be tolerated. Thus, reducing the feedback airtime must be prioritized, i.e., \u00b5Hi < \u00b5 A i . BERi represents the bit error rate (BER) of client i. In this work, we measure the accuracy of the generated BF at the AP in terms of achievable BER by the STAs. BER is the number of erroneous bits divided by the total number of transferred bits. Condition (7c) guarantees that the BER experienced by each client does not exceed the maximum BER threshold \u03b3. Condition (7d) indicates that the maximum end-to-end delay of BF cannot exceed the maximum tolerable delay denoted by \u03c4 . In practice, these two conditions ensure that the bottleneck placement does not significantly impact the inference accuracy and latency. The maximum tolerable BER and delay can be specified according to the requirements."
        },
        {
            "heading": "C. Heuristic Procedure for Solving the BOP",
            "text": "The BOP is a particular instance of the extremely complex neural architecture search (NAS) problem [22], [23]. Thus, we devise a heuristic algorithm to search for proper SplitBeam hyperparameters that is specific to our context. Specifically, to limit the search space, we take the following procedure:\n1) With the primary goal of minimizing the clients\u2019 computational load LHi , we place the bottleneck layer immediately after the input layer (i.e., e = 1); 2) To reduce the inference time at the AP, TH, we consider only one layer for the tail network (i.e., L = 2). Thus, the resulting DNN is a 3-layer network comprising input, bottleneck and output layers; 3) We adjust the size of the bottleneck layer according to the QoS requirements. Specifically, we consider a limited number of compression levels K = V\u2032i/Hi, and consider the BER as our QoS metric. We start from the highest level of compression (lowest number of bottleneck nodes), and train the 3-layer DNN with the CSI and corresponding V matrices dataset according to the customized procedure in Section IV-D. Once trained, the\ngenerated BM by the DNN is used to estimate the BER at the STA by comparing the recovered and transmitted data bits, as explained in Section 5.2.1. 4) If the desired BER cannot be achieved, the compression level is decreased. The new model is trained according to step (3) until the model is capable of meeting the BER constraint. If the compression level is the minimum, another layer is inserted after the bottleneck (L = L+1), and the algorithm goes back to step 3.\nSection VI shows that the heuristic algorithm simplifies the search while maintaining acceptable performance. D. SplitBeam Model Training\nSince H and V are complex matrices, we decouple real and complex components in the matrices and treat them as double-sized real matrices. For each of our datasets, we split a dataset into training, validation, and test splits with 8:1:1 ratio. SplitBeam is trained offline for various network configurations and does not require retraining. The STAs select the proper trained DNN according to the network configuration information acquired from the NDP preamble.\n1) Loss Function: Our goal is to deploy exactly the same model for each STA without fine-tuning its parameters to its environment. Notice that the training process is done offline (i.e., on a single computer). Given a channel matrix Hi, our DNN modelM estimates the corresponding BF Vi, i.e., Vi = M(Hi,\u03b8). We formulate the loss function L as follows\nL = 1 b b\u2211 j=1 Ns\u2211 i=1\n( M(Hji ,\u03b8)\u2212V j i )2\u2225\u2225\u2225Vji\u2225\u2225\u2225 1 , (8)\nwhere b indicates training batch size and \u2225 \u00b7 \u22251 represents L1norm. Hji and V j i indicate the j-th channel matrix and BF for STA i, respectively. By minimizing the loss in (8), we optimize the parameters \u03b8 of our DNN model M. We use stochastic gradient descent (SGD) and Adam [24] to train the synthetic and experimental datasets, respectively. Unless specified, we train models for 40 epochs, using the training split in the dataset with batch size of 16 and the initial learning rate of 10\u22123. The learning rate is decreased by a factor of 10 after the end of 20th and 30th epochs. Using the validation split in the dataset, we assess the model in terms of achieved BER at the end of every epoch and save the best parameters \u03b8\u2217 such that achieve the lowest BER for the validation split. The trained model is assessed with the best parameters for the held-out test split in the dataset and report the test BER.\n2) Difference with Autoencoders: Although an AE is similar in terms of model architecture, its training objective is different. AEs are trained to reconstruct its input in an unsupervised manner (e.g., to estimate V\u0302i given Vi) as done in [20]. Conversely, we train a task-specific model in a supervised fashion to estimate BF Vi given a channel matrix Hi."
        },
        {
            "heading": "E. Complexity Analysis and Compression Rate",
            "text": "1) Computational Overhead: The complexity of the SVD operation for decomposing the BF V in 802.11 is\nO((4NtN2r + 22N3t )S), according to [8]. The BF is further transformed into a set of angles using the Givens rotation (GR) matrix multiplication which has a complexity of O(N3t N3r S) [6]. Conversely, the complexity of SplitBeam is O(KN2t N2r S2), where K < 1 denotes the head model\u2019s compression level.\nFigure 6 shows the ratio of the number of floating-point operations (FLOP) required for compressing the BF using SplitBeam to 802.11 compression technique. The ratio is calculated by X/Y \u00d7 100 where X and Y denote the number of floating points operation in SplitBeam and legacy WiFi protocol, respectively. The comparison is performed for different MU-MIMO orders and a various number of subcarriers, as computed through a MATLAB program. We can see that SplitBeam noticeably reduces the computational load of STA, especially as the number of antennas and/or STAs increases. At 80 MHz, SplitBeam with K = 1/8 decreases 75% and 87% of the STA\u2019s load in 4\u00d7 4 and 8\u00d7 8 systems. On average, SplitBeam improves computation by 73%. We show in Section VI that SplitBeam with K = 1/8 keeps the BER within 87% of 802.11.\n2) Airtime Overhead: In 802.11, the size of the compressed BF report is BMR = 8\u00d7Nt+Na\u00d7S\u00d7(b\u03d5+b\u03c8)/2 where Na denotes the number of Givens angles [6]. Notice that b\u03d5 and b\u03c8 are the number of bits required for the angle quantization [7]. Therefore, the 802.11 compression ratio can be written as\nCR = BMR\nS \u00d7Nt \u00d7Nr \u00d7 b , (9)\nwhere b = 16 is the number of bits required for transmitting channel information over each subcarrier. Conversely, the compression rate of SplitBeam is K. Notice that it is constant and does not grow with the size of the channel matrix.\nFigure 7 depicts the impact of SplitBeam in reducing the airtime overhead. The bars show the ratio of the size of the compressed BF of SplitBeam to the angle decomposition technique in 802.11. SplitBeam has a significant impact at higher-order MU-MIMO configurations. For example,\nSplitBeam reduces the size of the feedback overhead by 91% and 93% in 4 \u00d7 4 and 8 \u00d7 8 configurations with 80 MHz channel. On average, SplitBeam reduces the airtime overhead by 75% with respect to 802.11."
        },
        {
            "heading": "V. EXPERIMENTAL EVALUATION",
            "text": "We first introduce the experimental MU-MIMO CSI extraction method along with the measurement campaigns for building the datasets in Section V-A. Next, we detail organization of the dataset, the training and testing procedure of the SplitBeam using the collected datasets in Section V-B."
        },
        {
            "heading": "A. Experimental Setup",
            "text": "We designed our testbed with commercially-available offthe-shelf Wi-Fi devices to collect real-world datasets. As explained in Section IV-D, training the SplitBeam requires downlink CSI that is measured at the STA side, in addition to the corresponding BF. The measurements are carried over different network configurations to verify the performance of SplitBeam as the number of subcarriers and antennas and STAs increases. We consider different propagation environments to test how SplitBeam generalizes.\n5.1.1: CSI Extraction. In commercial Wi-Fi chipsets, CSI data is estimated through pilot symbols. Being computed at the physical layer (PHY), CSI is not accessible by the enduser through normal network interface cards (NICs). Thus, we have used Nexmon CSI [21], the state-of-the-art CSI extraction tool to collect CSI measurements using Asus RTAC86U 802.11ac Wi-Fi routers as STAs. The extraction tool is compatible with the very-high-throughput (VHT) mode, defined by IEEE 802.11ac, working with bandwidth up to 80 MHz. Each CSI sample results in complex-valued channel information per subcarrier for each transmit-receive antennas pair. A Netgear R7800 Wi-Fi router with a Qualcomm Atheros chipset is used as AP. An example of the experimental setup realization is shown in Figure 8(b). In a real-world scenario, SplitBeam relies on already existing channel estimations at the STAs. However, since the Nexmon tool is configured for reading CSI samples only on data packets, we established a\nWi-Fi link between the AP and another Netgear R7800 Wi-Fi router (as the client) to generate the data packets that provides the ASUS STAs the opportunity to extract CSI."
        },
        {
            "heading": "B. Data Collection and Model Training",
            "text": "Packets are transmitted with a rate of 1000 packets/second through Nt antennas with a fixed modulation and coding scheme. Thus, a new CSI is generated every T = 10\u22123 s. To evaluate the capability of SplitBeam in generalizing to different environments, we performed CSI measurements in two environments E1 and E2. We carefully picked the environment with exclusive furniture arrangements, size, and construction material to ensure that the target environments are mutually exclusive from the source environment in terms of propagation characteristics. Specifically, E1 has fewer reflectors and human traffic, while E2 is furnished with more furniture (multipath) and is imposed to higher human traffic. Figure 8(a) displays the positions of the AP and STAs in the different environments. To capture the impact of interuser distance on CSI data, the STAs are placed in different distances from each other (15-60 cm). Also, users are located at different distances from the AP (0.5-6 m). The green dots in Figure 8(a) depicts the location of points where STAs are located for data collection.\n5.2.1: Datasets. We consider 2\u00d72 and 3\u00d73 scenarios, where the AP with Nt = 2, 3 antennas simultaneously serves two and three STAs. The network configurations are shown in Figure 8(c), where each STA device supports one spatial stream, i.e., Nss,i = 1 for i \u2208 I. Moreover, the Nexmon tool enabled us to collect 802.11ac channel measurements at 5 GHz with 20, 40 and 80 MHz bandwidth over |S| = 56, |S| = 114 and |S| = 242 subcarriers, to assess the performance of the SplitBeam at higher channel bandwidth. The measurements are repeated several times with a time interval of at least 4 hours in between measurements. To capture the impact\nof human blockage and reflection, the datasets are collected during working and non-working days. We collected 10,000 CSI samples per configuration, channel width and environment. In total, 12 datasets with 120,000 data samples were extracted to train, evaluate and test the SplitBeam. Tables I shows the list of collected experimental datasets. We pledge to release, along with the code, the collected dataset for full reproducibility.\nWe have used the MATLAB WLAN toolbox to generate a dataset at 160 MHz. This is because our experimental setup did not allow us to collect CSI at 160 MHz and with 4\u00d74 MIMO. We have used wlanTGacChannel function that filters an input signal through an 802.11ac multipath fading channel. The multi-user channel consists of independent single-user MIMO channels between the AP and spatially separated stations. Each user estimates its own channel using the received NDP signal and computes the CSI. The delay profile \u201cModel-B\u201d has been considered which respectively consists of 9 channel taps and 2 channel clusters. Dataset D13-D15 each contain 10,000 data points. To remove noise and unwanted amplification, the CSI elements are normalized by the mean amplitude over all subcarriers. In addition, to remove the noise a n-point moving median window with n = 10 is used to smooth out the noisy data. In addition, we noticed that in some instances, CSI packets are dropped by some STAs. Therefore, using the packets sequence number, the data collected from different devices are aligned to ensure that each CSI element collected over different STAs represents the same time and frequency domain channel measurements for seamless beamforming.\n5.2.2: BER Computation. A key issue is that BER extremely depends on noise and fading levels, which makes it challenging to isolate the BER caused by the DNN compression. For this reason, and the sake of repeatability, we have used a MATLAB-based program to compute the BER corresponding to a given DNN compression. We have set the total number of transmit antennas to the sum of all the used spatial streams, so that no space-time block coding (STBC) or spatial expansion is needed at the AP. Moreover, no channel coding is considered, unless otherwise specified. The BER measurement procedure for each collected CSI data point j is as follows: (1) we randomly generate bits modulated with 16-QAM that are used as payload to generate Ns standard-compliant 802.11 frames Fj = [Fj1 \u00b7 \u00b7 \u00b7F j Ns\n] for Ns receiving STA each served with one spatial stream. Denoting the j-th CSI value collected from the i-th STA as Hji , (2) we run the SplitBeam trained head and tail models Mi for each user to compute the\nVji values corresponding to the H j i inputs; (3) we compute HjEQ = [V j 1, \u00b7 \u00b7 \u00b7 ,V j Ns\n] as described in Section III-A2; (4) we use zero-forcing (ZF) beamforming to calculate Wj as\nWj = HjEQ \u00b7 (H j\u2020 EQ \u00b7H j EQ) \u22121.\n(5) The received packets are generated as Yj = Hji W j i F j i + Ni, where Ni is Gaussian white noise. Finally, (6) the packets are demodulated, and the recovered bits are compared with the transmitted bits to calculate the BER. 5.2.3: Model Training and Testing. For each CSI measurement dataset in Table I the corresponding BF dataset is generated using SVD. Next, SplitBeam is trained to map the CSI measurement to BF in a supervised manner, as detailed in Section IV-D. We used K = 1/32, 1/16, 1/8, and 1/4 as compression levels. A model is trained for each scenario, by using 80% and 10% of each dataset for training and validation. We designed two testing procedures: (i) single-environment test, where the trained model is tested on the remaining 10% of its dataset; (ii) cross-environment test, where the model is tested on its counterpart dataset from the other environment. For example, let M1 be the model that is trained with D1 which is a 2 \u00d7 2 dataset collected in E1 at 20 MHz channel width. The model M1 is tested on: (i) D1 test-split that was held out during the training; (ii) D3 which is the dataset with the same configuration and channel width in E2."
        },
        {
            "heading": "VI. EXPERIMENTAL RESULTS",
            "text": "We first compare the compression rate of SplitBeam with respect to 802.11 and state-of-the-art LB-SciFi [20] in Section VI-A. LB-SciFi uses an autoencoder (AE) to compress the angles generated by the 802.11 BF compression algorithm. Finally, we evaluate the SplitBeam generalization and efficiency results in Section VI-B."
        },
        {
            "heading": "A. Comparison with 802.11 and LB-SciFi",
            "text": "Figure 9 depicts the trade-off between BF compression rate (K = V\u2032/H) and the incurred BER with respect to 802.11. It can be seen that as the compression rate decreases and the BF gets more compressed, the BER increases. However, we observe that the size of the feedback is much higher in 802.11. It can be seen that the SplitBeam with a compression rate of K = 18 achieves a BER close to \u2013 in some instances lower than \u2013 the legacy Wi-Fi protocol while its size of BF is respectively 4 and 5 times smaller in 2\u00d7 2 and 3\u00d7 3 configurations.\nFigure 10 shows achievable BER and computational load, in terms of number of floating point operations (FLOP), for 160 MHz Wi-Fi transmissions (datasets D13 \u2013 D15). For these results, we used binary convolutional coding (BCC) with a code rate of 1/2. SplitBeam achieves BER close to legacy 802.11 standard and LB-SciFi, which is the desired level. However, both 802.11 and LB-SciFi require SVD and GR operations that impose high computational load on clients to achieve this performance. Figure 10 shows that SplitBeam reduces the computational load by 65% and 45% with respect to 802.11 and LB-SciFi as it directly compresses the CSI matrix. When SplitBeam is combined with channel\ncoding, the BER is reduced significantly. Moreover, higher MU-MIMO orders are more sensitive to BM estimation error.\nFigure 11 compares the achievable BER of the SplitBeam with 802.11 protocol as a function of computational load. We observe that SplitBeam maintains the BER of the STA close to the 802.11 protocol while imposing a considerably lower computational load on the users. Specifically, SplitBeam decreases the computation load by 70% with respect to 802.11 while maintaining the same BER value of 0.02. We notice that the improvement given by SplitBeam is more prominent when the number of antennas increases. For instance, SplitBeam with K = 18 decreases STAs\u2019 computational load respectively by 52% and 68% for 2 \u00d7 2 and 3\u00d7 3 MU-MIMO."
        },
        {
            "heading": "B. Model Generalization and Efficiency",
            "text": "Figure 12 shows the BER and computational complexity for 3 \u00d7 3 MU-MIMO configuration with 80 MHz channel bandwidth in different environments. In the cross-environment\nsetting E1/E2 (E2/E1), the models are trained and validated with the data collected from E1 (E2) and tested with the data from E2 (E1). Although LB-SciFi achieves the same level of compression and BER as SplitBeam (slightly lower in some cases), its computational load on STAs is much higher than SplitBeam. Specifically, on average, SplitBeam improves the computational load by 78% with respect to LB-SciFi, while maintaining similar BER. This is since our approach compresses the estimated channel directly thus offloading devices\u2019 overhead significantly. Figure 13 further depicts the capability of SplitBeam to generalize to untrained environments. We observe that in most cases, the cross-environment test has a performance close to the singleenvironment test. Interestingly, we observe that the BER is usually lower when models are trained in E2 and tested in E1. This is because E2 has a more complex propagation profile than E1, i.e., more reflectors and presence of people. Thus, E2-trained models are more comprehensive and thus generalizing better.\nTable II investigates the trade-off among the head model complexity, the size of the BF, and BER, as a function\nof the bottleneck structure in a 2 \u00d7 2 MIMO network. We compare the performance of the 3-layer DNN \u2013 designed and trained using the procedure explained in IV-C \u2013 with more complex DNNs with a higher number of hidden layers and neurons. We notice that the BER decreases as the size of the bottleneck and the depth of the head model increases. This performance enhancement, however, comes to the detriment of computational load and feedback overhead.\nOn the other hand, increasing the model parameters does not guarantee to improve the accuracy of the predictions. For example, for 2 \u00d7 2 at 20 MHz, the head model with multiply-accumulate (MAC) of 6,641,152 results in a BER of 0.0182 while a model with MAC of 1,612,800 (75% less computational load) has a lower BER of 0.015. This is due to the model severely overfitting the training data. The results demonstrate that heuristic algorithm simplifies the search process while maintaining acceptable performance, within about 10\u22123 of existing approaches.\nLatency Analysis with FPGA Synthesis. While it is sufficient to perform MIMO channel sounding once every 100ms, MU-MIMO channel sounding should be performed at least once every 10ms to account for user mobility, according to [7] (see page 73). This implies that keeping the end-toend BM computation within 10ms latency is fundamental. To\nthis end, we have synthesized in FPGA the neural networks implemented by SplitBeam. We evaluated the latency with up to 160 MHz, which is the maximum as per the 802.11ax standard, and with MIMO dimensionality up to 4 \u00d7 41. We considered K = 1/4 compression rate, which results in the lowest BER value as shown in Figure 9.\nAs target device, we chose a Zynq UltraScale+ XCZU9EG2FFVB1156, a commonly used System-on-Chip for softwaredefined radios that is also supported by the OpenWiFi project as part of the ZCU102 evaluation board [25]. We chose 5ns as clock period (200 MHz clock frequency), which is the operating clock of the AD9361 transceiver [26] used in OpenWiFi. We have used a customized library based on high-level synthesis (HLS) designed by us to synthesize the neural networks. HLS allows the conversion of a C++-level description of the DNN directly into hardware description language (HDL) code such as Verilog. Therefore, improved latency results could be achieved with more advanced synthesis strategies. Moreover, better latency results could be achieved by utilizing application-specific integrated circuits (ASICs), which however allow little room for reconfigurability.\nTable III shows the results obtained through our FPGA synthesis process described above. We notice that by doubling the bandwidth, the latency of the design increases by about 4 times on the average, which is also true when MIMO dimensionality is increased from 2\u00d7 2 to 4\u00d7 4. In the worst case of 160 MHz and 4\u00d7 4 dimensionality, the obtained endto-end latency is well below the desired 10ms threshold2."
        },
        {
            "heading": "VII. CONCLUDING REMARKS",
            "text": "We have proposed SplitBeam, a framework to simultaneously reduce the computational load and airtime overhead in modern Wi-Fi networks. We have proposed a new datadriven framework that trains a task-specific DNN to output BF given the CSI matrix as input. The key advantage of the SplitBeam is utilizing split DNN to insert a bottleneck layer \u2013 which is significantly smaller than the original CSI \u2013 that (i) enables transferring the computational load of the STA to the AP side (where computational power is abundant); (ii) generating a compressed representation of the BF, which reduces the feedback airtime. We formulate and solve a bottleneck optimization problem (BOP) to keep computation, airtime overhead and BER below application requirements. We have performed extensive experimental CSI collection in two\n1Although 802.11ax supports MU-MIMO transmissions to up to 8 clients simultaneously, to the best of our knowledge, all the 802.11ax APs currently on the market support only a maximum of 4 spatial streams.\n2The sounding procedure in 802.11ax lasts about 500us [5], which makes the overall end-to-end reporting delay below 10ms in the worst case.\ndistinct propagation environments with different bandwidths and number of antennas, and compared the performance with a DNN-based approach and the traditional 802.11 algorithm for BF. Our results have shown that SplitBeam is very effective in reducing the beamforming feedback size and computational complexity by up to 81%, 84% with respect to 802.11 while maintaining similar BER values. For the first time, we have demonstrated that neural networks can be successfully utilized to approximate complex digital signal processing (DSP) operations and thus find the right trade-off between applicationspecific requirements and computational/airtime overhead. We believe our findings could be applied to approximate DSP computation beyond Wi-Fi and BF compression. We hope that SplitBeam will prompt a new line of research where application-aware neural networks will address network- and device- specific needs more effectively."
        },
        {
            "heading": "ACKNOWLEDGEMENT",
            "text": "This material is based upon work supported in part by the National Science Foundation (NSF) under Grant No. CNS-2134973, CNS-2134567, CNS-2120447, ECCS2146754, OAC-2201536, CCF-2218845, and ECCS-2229472, as well as by the Air Force Office of Scientific Research under contract number FA9550-23-1-0261 and by the Office of Naval Research under award number N00014-23-1-2221. The views and opinions are those of the authors and do not necessarily reflect those of the funding institutions or the US Government."
        }
    ],
    "title": "SplitBeam: Effective and Efficient Beamforming in Wi-Fi Networks Through Split Computing",
    "year": 2023
}