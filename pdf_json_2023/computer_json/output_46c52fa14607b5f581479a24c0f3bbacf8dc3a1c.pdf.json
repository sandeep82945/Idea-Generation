{
    "abstractText": "In this paper, we address the challenge of limited resources in Internet of Things (IoT) devices by proposing a solution based on digital twin in distributed edge computing networks. Edge computing is a promising approach that moves computing resources closer to the network\u2019s edge to reduce response times in IoT applications. However, simply offloading tasks from IoT devices to edge computing does not accelerate user control. To enhance task performance and improve user management experience, we introduce optimized task scheduling and virtual object management based on a digital twin concept. Our system incorporates virtualization, synchronization, visualization, and simulation functionalities to provide digital twin capabilities. Additionally, we develop a user-friendly web application with a graphical user interface (GUI) for intuitive management of edge computing services. To support our approach, we implement an edge computing supervisor that generates virtualized objects such as edge gateways, IoT devices, and services. These virtual objects serve as resources for creating tasks. Using our proposed digital twin platform, users can dynamically create new tasks based on demand, easily deploy and execute tasks in specific locations, and dynamically allocate edge network resources according to task requirements. An optimized task scheduling mathematical model is presented to compare task scheduling done with and without optimization. Further, the edge computing and digital twin based optimized task scheduling method is integrated with Federated Learning for collaborative learning and privacy preserved computation of sensors sensitive data. We demonstrate the effectiveness of our system by generating tasks for data collection related to indoor environment for prediction of Predicted Mean Vote (PMV) for thermal comfort index of smart homes occupants using HTTP and IoTivity-based devices in distributed edge computing networks. These tasks are properly delivered and executed on the expected edge gateways, showcasing the successful integration of our digital twin platformwith edge computing networks. Further, the optimized task scheduling has improved the overall performance of the proposed system, keeping in view latency and processing time. INDEX TERMS Internet of Things, Edge Computing, Federated Learning, Digital Twin, Task Management",
    "authors": [
        {
            "affiliations": [],
            "name": "RONGXU XU"
        },
        {
            "affiliations": [],
            "name": "CHAN-WON PARK"
        },
        {
            "affiliations": [],
            "name": "SALABAT KHAN"
        },
        {
            "affiliations": [],
            "name": "WENQUAN JIN"
        },
        {
            "affiliations": [],
            "name": "HYEUN KIM"
        }
    ],
    "id": "SP:80dd53c4b18a6e735611c435a46bdbc4b2eeab54",
    "references": [
        {
            "authors": [
                "Y. Song",
                "S.S. Yau",
                "R. Yu",
                "X. Zhang",
                "G. Xue"
            ],
            "title": "An Approach to QoS-based Task Distribution in Edge Computing Networks for IoT Applications",
            "venue": "2017 IEEE International Conference on Edge Computing (EDGE), Jun. 2017, pp. 32\u201339. doi: 10.1109/IEEE.EDGE.2017.50.",
            "year": 2017
        },
        {
            "authors": [
                "M. Zhaofeng",
                "W. Xiaochang",
                "D.K. Jain",
                "H. Khan",
                "G. Hongmin",
                "W. Zhen"
            ],
            "title": "A blockchain-based trusted data management scheme in edge computing",
            "venue": "IEEE Trans. Ind. Inform., vol. 16, no. 3, pp. 2013\u20132021, 2019.",
            "year": 2013
        },
        {
            "authors": [
                "L. Lin",
                "X. Liao",
                "H. Jin",
                "P. Li"
            ],
            "title": "Computation Offloading Toward Edge Computing",
            "venue": "Proc. IEEE, vol. 107, no. 8, pp. 1584\u20131607, Aug. 2019, doi: 10.1109/JPROC.2019.2922285.",
            "year": 2019
        },
        {
            "authors": [
                "K. Kumar",
                "J. Liu",
                "Y.-H. Lu",
                "B. Bhargava"
            ],
            "title": "A Survey of Computation Offloading for Mobile Systems",
            "venue": "Mob. Netw. Appl., vol. 18, no. 1, pp. 129\u2013140, Feb. 2013, doi: 10.1007/s11036-012-0368-0.",
            "year": 2013
        },
        {
            "authors": [
                "M.R. Rahimi",
                "J. Ren",
                "C.H. Liu",
                "A.V. Vasilakos",
                "N. Venkatasubramanian"
            ],
            "title": "Mobile Cloud Computing: A Survey, State of Art and Future Directions",
            "venue": "Mob. Netw. Appl., vol. 19, no. 2, pp. 133\u2013143, Apr. 2014, doi: 10.1007/s11036-013-0477-4.",
            "year": 2014
        },
        {
            "authors": [
                "K. Kumar",
                "Y.-H. Lu"
            ],
            "title": "Cloud Computing for Mobile Users: Can Offloading Computation Save Energy",
            "venue": "Computer, vol. 43, no. 4, pp. 51\u201356, Apr. 2010, doi: 10.1109/MC.2010.98.",
            "year": 2010
        },
        {
            "authors": [
                "W. Hu"
            ],
            "title": "Quantifying the Impact of Edge Computing on Mobile Applications",
            "venue": "Proceedings of the 7th ACM SIGOPS Asia-Pacific Workshop on Systems, New York, NY, USA, Winter 2016, pp. 1\u20138. doi: 10.1145/2967360.2967369.",
            "year": 2016
        },
        {
            "authors": [
                "M. Satyanarayanan",
                "P. Bahl",
                "R. Caceres",
                "N. Davies"
            ],
            "title": "The Case for VM- Based Cloudlets in Mobile Computing",
            "venue": "IEEE Pervasive Comput., vol. 8, no. 4, pp. 14\u201323, Oct. 2009, doi: 10.1109/MPRV.2009.82.",
            "year": 2009
        },
        {
            "authors": [
                "D. Zeng",
                "L. Gu",
                "S. Guo",
                "Z. Cheng",
                "S. Yu"
            ],
            "title": "Joint Optimization of Task Scheduling and Image Placement in Fog Computing Supported Software- Defined Embedded System",
            "venue": "IEEE Trans. Comput., vol. 65, no. 12, pp. 3702\u20133712, Feb. 2016, doi: 10.1109/TC.2016.2536019.",
            "year": 2016
        },
        {
            "authors": [
                "M.T. Beck",
                "M. Werner",
                "S. Feld",
                "T. Schimper"
            ],
            "title": "Mobile Edge Computing: A Taxonomy",
            "venue": "2014.",
            "year": 2014
        },
        {
            "authors": [
                "F. Bonomi",
                "R. Milito",
                "J. Zhu",
                "S. Addepalli"
            ],
            "title": "Fog computing and its role in the internet of things",
            "venue": "Proceedings of the first edition of the MCC workshop on Mobile cloud computing, New York, NY, USA, 17 2012, pp. 13\u201316. doi: 10.1145/2342509.2342513.",
            "year": 2012
        },
        {
            "authors": [
                "R. Yang",
                "F.R. Yu",
                "P. Si",
                "Z. Yang",
                "Y. Zhang"
            ],
            "title": "Integrated blockchain and edge computing systems: A survey, some research issues and challenges",
            "venue": "IEEE Commun. Surv. Tutor., vol. 21, no. 2, pp. 1508\u20131532, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "J. Kang"
            ],
            "title": "Blockchain for secure and efficient data sharing in vehicular edge computing and networks",
            "venue": "IEEE Internet Things J., vol. 6, no. 3, pp. 4660\u20134670, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "W. Kritzinger",
                "M. Karner",
                "G. Traar",
                "J. Henjes",
                "W. Sihn"
            ],
            "title": "Digital Twin in manufacturing: A categorical literature review and classification",
            "venue": "IFAC- Pap., vol. 51, no. 11, pp. 1016\u20131022, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "W. Sun",
                "H. Zhang",
                "R. Wang",
                "Y. Zhang"
            ],
            "title": "Reducing offloading latency for digital twin edge networks in 6G",
            "venue": "IEEE Trans. Veh. Technol., vol. 69, no. 10, pp. 12240\u201312251, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "Y. Lu",
                "X. Huang",
                "K. Zhang",
                "S. Maharjan",
                "Y. Zhang"
            ],
            "title": "Low-latency federated learning and blockchain for edge association in digital twin empowered 6G networks",
            "venue": "IEEE Trans. Ind. Inform., vol. 17, no. 7, pp. 5098\u20135107, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "Z. Jiang",
                "Y. Guo",
                "Z. Wang"
            ],
            "title": "Digital twin to improve the virtual-real integration of industrial IoT",
            "venue": "J. Ind. Inf. Integr., vol. 22, p. 100196, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "A. El Saddik"
            ],
            "title": "Dtwins: a digital twins ecosystem for health and wellbeing",
            "venue": "IEEE COMSOC MMTC Commun Front, vol. 14, pp. 39\u201343, 2019. 20 VOLUME 11, 2023 This article has been accepted for publication in IEEE Access. This is the author's version which has not been fully edited and content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2023.3325475 This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/ Author et al.: xxxx",
            "year": 2019
        },
        {
            "authors": [
                "A. Costanzo",
                "A. Faro",
                "D. Giordano",
                "C. Pino"
            ],
            "title": "Mobile cyber physical systems for health care: Functions, ambient ontology and e-diagnostics",
            "venue": "2016 13th IEEE Annual Consumer Communications & Networking Conference (CCNC), 2016, pp. 972\u2013975.",
            "year": 2016
        },
        {
            "authors": [
                "R. Martinez-Velazquez",
                "R. Gamez",
                "A. El Saddik"
            ],
            "title": "Cardio Twin: A Digital Twin of the human heart running on the edge",
            "venue": "2019 IEEE International Symposium on Medical Measurements and Applications (MeMeA), 2019, pp. 1\u20136.",
            "year": 2019
        },
        {
            "authors": [
                "Y. Lu",
                "X. Huang",
                "K. Zhang",
                "S. Maharjan",
                "Y. Zhang"
            ],
            "title": "Communicationefficient federated learning for digital twin edge networks in industrial IoT",
            "venue": "IEEE Trans. Ind. Inform., vol. 17, no. 8, pp. 5709\u20135718, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "K. Zhang",
                "J. Cao",
                "Y. Zhang"
            ],
            "title": "Adaptive digital twin andmultiagent deep reinforcement learning for vehicular edge computing and networks",
            "venue": "IEEE Trans. Ind. Inform., vol. 18, no. 2, pp. 1405\u20131413, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "H. Huang",
                "L. Yang",
                "Y.Wang",
                "X. Xu",
                "Y. Lu"
            ],
            "title": "Digital Twin-driven online anomaly detection for an automation system based on edge intelligence",
            "venue": "J. Manuf. Syst., vol. 59, pp. 138\u2013150, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "P. Bellavista",
                "C. Giannelli",
                "M. Mamei",
                "M. Mendula",
                "M. Picone"
            ],
            "title": "Application-driven network-aware digital twin management in industrial edge environments",
            "venue": "IEEE Trans. Ind. Inform., vol. 17, no. 11, pp. 7791\u20137801, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "L. Jiang",
                "H. Zheng",
                "H. Tian",
                "S. Xie",
                "Y. Zhang"
            ],
            "title": "Cooperative federated learning and model update verification in blockchain empowered digital twin edge networks",
            "venue": "IEEE Internet Things J., 2021.",
            "year": 2021
        },
        {
            "authors": [
                "K.Y.H. Lim",
                "P. Zheng",
                "C.-H. Chen"
            ],
            "title": "A state-of-the-art survey of Digital Twin: techniques, engineering product lifecycle management and business innovation perspectives",
            "venue": "J. Intell. Manuf., vol. 31, no. 6, pp. 1313\u20131337, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "S. AbdulRahman",
                "S. Otoum",
                "O. Bouachir",
                "A Mourad"
            ],
            "title": "Management of Digital Twin-driven IoT using Federated Learning",
            "venue": "IEEE Journal on Selected Areas in Communications, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "L.P. Qian",
                "M. Li",
                "P. Ye",
                "Q. Wang",
                "B. Lin",
                "Y. Wu",
                "X Yang"
            ],
            "title": "Secrecy- Driven Energy Minimization in Federated Learning-Assisted Marine Digital Twin Networks",
            "venue": "IEEE Internet of Things Journal, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "M.A. Alhartomi",
                "A. Salh",
                "L. Audah",
                "S. Alzahrani",
                "A. Alzahmi",
                "M.R. Altimania",
                "...",
                "O Al-Hartomy"
            ],
            "title": "Sustainable Resource Allocation and Reduce Latency Based on Federated-Learning-EnabledDigital Twin in IoT Devices",
            "venue": "Sensors, 23(16), 7262, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "X. Wang",
                "N. Cheng",
                "L. Ma",
                "R. Sun",
                "R. Chai",
                "N Lu"
            ],
            "title": "Digital twinassisted knowledge distillation framework for heterogeneous federated learning",
            "venue": "China Communications, 20(2), 61-78, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "B. Li",
                "Y. Shi",
                "Q. Kong",
                "Q. Du",
                "R Lu"
            ],
            "title": "Incentive-Based Federated Learning for Digital Twin Driven Industrial Mobile Crowdsensing",
            "venue": "IEEE Internet of Things Journal, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "A. Islam",
                "Shin",
                "S. Y"
            ],
            "title": "A Digital Twin-Based Drone-Assisted Secure Data Aggregation Scheme with Federated Learning in Artificial Intelligence of Things",
            "venue": "IEEE Network, 37(2), 278-285, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "W. Wang",
                "F. He",
                "Y. Li",
                "S. Tang",
                "X. Li",
                "J. Xia",
                "Z Lv"
            ],
            "title": "Data information processing of traffic digital twins in smart cities using edge intelligent federation learning",
            "venue": "Information Processing & Management, 60(2), 103171, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "Zhang",
                "Ming"
            ],
            "title": "A Particle Swarm Optimization Method for AI Stream Scheduling in Edge Environments",
            "venue": "Symmetry 14.12, p. 2565, 2022.",
            "year": 2022
        }
    ],
    "sections": [
        {
            "text": "INDEX TERMS Internet of Things, Edge Computing, Federated Learning, Digital Twin, Task Management\nI. INTRODUCTION\nTHE Internet of Things (IoT) paradigm has become oneof the fundamental infrastructures for many developed applications contributing to intelligence in many dimensions since it has the property of connecting different kinds of smart devices across large geographic areas [1]. With the pro-\nliferation of innovative mobile devices, including wearables and smartphones, the potential of IoT services has expanded, offering users ubiquitous access to services [2]. However, computing-intensive applications, such as artificial intelligence (AI)-powered services, are hampering mobile devices in terms of computing power, storage resources, and battery\nVOLUME 11, 2023 1\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nlife [3]. A common way to solve the resource challenges of IoT devices and provide continuous services is to offload the work of IoT applications to computing systems such as servers, cloud systems, and/or data centers that are armed with sufficient computing resources [4]\u2013[7]. Offloading work to resource-rich computing systems not only improves the performance of IoT applications but also reduces the power consumption of IoT devices [8].\nThe increasing demand for offloading resource-intensive tasks from resource-poor devices to resource-rich infrastructure has motivated research in the field of edge computing [3] [10]. Edge computing networks, consisting of devices with computing capabilities located near IoT devices, offer several advantages such as reduced latency, improved bandwidth, and minimized data communication risks [11]\u2013[13]. However, the offloading process introduces additional overhead due to data transmission over the network, which can adversely impact latency, especially in resource-intensive IoT applications [9]. In order to fully exploit the potential of edge computing, efficient task management methods are also required in edge computing networks [1]. To address these challenges and enhance task performance and user management experience, we propose a novel approach that integrates the concept of a digital twin into task and virtual object management. The digital twin, a virtual representation of a physical system, enables us to transform the physical world into a digital informational construct [15] [16]. By utilizing digital twin technology, we can optimize the execution of tasks and provide a more seamless user experience by closely monitoring and controlling their behavior. By leveraging the capabilities of digital twin technology, such as virtualization, synchronization, visualization, and simulation, we can accurately model and simulate the behavior of tasks and virtual objects in a distributed environment. This enables us to optimize resource allocation, improve task performance, and ensure efficient coordination and collaboration among tasks and virtual objects. Our proposed approach aligns with the vision of leveraging edge computing networks and digital twin technology to enhance the efficiency and effectiveness of IoT applications. By combining the benefits of edge computing with the power of digital twin technology, we aim to optimize task execution, reduce latency, and provide a seamless user management experience. Researchers in academia and industry are showing great interest in offloading work to edge computing networks [14].\nIn edge computing environments, sensitive data is often generated and processed by various edge devices, such as IoT sensors and edge gateways. Some tasks would require a collaborative learning frameworkwithout exposing their local data. Federated Learning (FL) allows for machine learning model training without the need to centralize or share this sensitive data. Instead, the training occurs locally on each edge device using its own data. This approach ensures that sensitive information remains on the edge devices, greatly enhancing data privacy and security. In our research, we have seamlessly integrated FL with edge computing and digital\ntwin concepts to create a holistic and efficient system for task scheduling and virtual object management. FL is integrated by allowing edge devices to participate in collaborative model training without exposing sensitive data. Each edge device trains its local model using its data, and only model updates are shared securely, preserving data privacy. Distributed Edge Computing Network (DECN) complements FL by providing a distributed computing infrastructure where tasks can be efficiently scheduled and executed. Digital twins play a crucial role in managing these virtual objects, representing edge devices, IoT components, and services. In summary, our system leverages federated learning to enable secure and collaborative model training, while edge computing and digital twins provide the infrastructure and virtualization capabilities necessary for efficient task scheduling and virtual object management. This integration enhances the overall performance, security, and flexibility of our system, making it well-suited for complex edge computing environments.\nThe paper is about a proposed solution for task and virtual object management based on a digital twin for distributed edge computing network with the integration of Federated Learning. An edge computing supervisor is developed to provide services to generate a digitalized object, such as an edge gateway, IoT device, and service. The proposed study offers several significant contributions and key innovations, as outlined below:\n1) Efficient Resource Utilization: Our approach leverages digital twins to create virtual resources, enabling dynamic task generation based on demand. This optimizes resource allocation and boosts overall system performance. 2) Flexibility and Scalability: Users can dynamically create tasks to adapt to changing demands, ensuring efficient task management and resource allocation within the edge network. 3) Optimized Task Scheduling: We introduce a novel mathematical model for task scheduling, validated through experiments, improving task management in edge computing environments. 4) Streamlined Deployment and Execution: Our methodology simplifies task deployment and execution, reducing latency and enhancing efficiency using the proposed optimized task schedulingwhile considering several constraints related to maximum resource utilization, execution cost and global model accuracy and privacy preserve computation using federated learning (FL). 5) Federated Learning Integration: We integrate FL, enabling collaborative and privacy-preserving machine learning on edge devices, enhancing intelligence while preserving data privacy. The proposed method not only optimizes task scheduling for FL but minimizes the overall accuracy of collaborative model learning as multi-objective optimization problem.\nThe rest of the paper is structured as follows: Section II"
        },
        {
            "heading": "2 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nprovides an overview of several related pieces of research and inspects some common issues in the current state of the art. Section III proposed digital twin architecture based on task and virtual objects for distributed edge computing network. Section IV describes the mathematical model for optimizing task scheduling. Section V discussed the experimental configuration of digital twin-based distributed edge computing networks for PMV prediction. Section VI presents the evaluation results of the proposed system based on several perspectives. Section VII concludes the paper and discusses future directions of research.\nII. RELATED WORK The concept of a digital twin was first introduced by Michael Grieves in 2002 during a presentation on product lifecycle management. Digital twin technology revolutionizes design and investigation processes by offering in-depth understanding of new systems [17]. It is essentially a digital representation of a physical system, enabling monitoring, calculation, synchronization, comprehension, simulation, and experimenting of real-time behaviors [17]. One of the primary functions of digital twins is to provide precise numerical representations of physical entities, ensuring high levels of accuracy [18].\nAs an effective method for the integration of cyber and physical environments, digital twin provides manufacturing enterprises the ability to perform smart production and precision management. The paper [19] presents an ecosystem to automatically monitor and support people by integrating people and digital twin technologies. The paper [20] proposes a home-based monitoring Cyber Physical System (CPS) that uses fuzzy rules to check the patient\u2019s current condition. Patient data is temporarily stored in the patient\u2019s mobile device and is continuously stored in a home-based web service. Myocardial infarction is a type of Ischemic Heart Disease (IHD) in which the heart is damaged due to an insufficient supply of oxygen to the heart muscle due to the interruption of blood flow. Continuous monitoring by experts is a good strategy to prevent this scenario, but it is impossible to monitor everyone at risk. Time is very important to deal with emergencies such as IHD or stroke. The paper [21] presents a Cardio Twin architecture for IHD sensing designed to run at the edge. It collects data from sensors mounted on the human body, medical records, social networks and external sensors, and uses a smartphone to process the collected data and predict IHD.\nFor reducing the gap between digital solutions and physical devices, author [22] proposed an integration of digital twin and edge computing to reduce communication delay in federated learning based on an asynchronous model update scheme. Author [23] proposed an approach that efficiently assign computational tasks and resources to edge computing participants based on operating multiagent deep reinforcement through integrating service matching and task offloading scheduling in both digital twin and physical networks. Author [24] proposed an online anomaly detection approach\nusing digital twin to enable real-time data handling based on by providing computing and storage capabilities on edge devices. The framework with edge intelligence (EI) provides a feasible approach to implementing digital twin technology in dynamic industrial edge/cloud networks to ensure highperformance anomaly detection. Edge-based digital twin enables efficient data processing by providing compute and storage capabilities on edge devices. For managing digital twin based applications in heterogeneous networks, author [25] proposed a digital twin networkingmiddleware to reduce network identification complexity of devices in the network edges based on software-defined networking approach. For achieving flexible and secure digital twin based edge computing, Author [26] proposed a cooperative federated learning that is operated on digital twin construction where blockchain secures both local model updates and global model updates to enable efficiency on resource-constrained edge devices. Digital twin monitors real-time job status and enables intelligent decision-making [27] which is assistant to improve physical system management functionalities. The Table 1 provides a comprehensive overview of various research efforts that incorporate Digital Twin (DT) and Federated Learning (FL) methodologies, often in conjunction with other technologies. These studies explore diverse application areas, including IoT networks, marine digital twin networks, heterogeneous edge devices, industrial mobile crowdsensing, drone-based data collection, and traffic digital twins in smart cities. While each approach offers unique features and innovations, they also comewith their own set of challenges. Common challenges include the need for real-world evaluations, high implementation complexity, communication overhead, and resource constraints, especially in IoT environments. These studies collectively contribute to the evolving landscape of DT-FL integration and underscore the importance of addressing practical challenges to unlock the full potential of these technologies in various domains."
        },
        {
            "heading": "III. PROPOSED TASK AND VIRTUAL OBJECT MANAGEMENT ARCHITECTURE BASED ON DIGITAL TWIN FOR DISTRIBUTED EDGE COMPUTING NETWORKS",
            "text": "The Digital Twin concept encompasses both physical and virtual spaces of a system, establishing data links between them. In our proposed distributed edge computing network (Figure 1), two distinct spaces are incorporated: 1) the internet space and 2) the physical space. This network comprises physical distributed edge computing networks and a virtual environment that has been digitalized. The digital twin technology facilitates the connection between the data-driven representation of the physical edge computing networks and the cyber world via the Internet, providing users with comprehensive insights into the overall system. The physical entity of the network comprises edge gateways responsible for executing various edge computing services, while numerous IoT devices are connected to these gateways. Interconnectivity between the edge gateways and IoT devices forms the physical network environment. On the\nVOLUME 11, 2023 3\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx"
        },
        {
            "heading": "4 VOLUME 11, 2023",
            "text": "Author et al.: xxxx\nother hand, the virtual entity represents the digitalization of physical components through data. The edge gateways and IoT devices are transformed into virtual objects and managed through user operations on aweb page. Real-time information exchange occurs between the physical and virtual devices, reflecting any status changes through the web pages.\nFigure 2 illustrates the functional blocks that virtualize the distributed edge computing network environment. The ability to form a digital twin environment, control virtual objects and operations is realized by relying on virtualization, synchronization, connectivity and simulation capabilities.We discuss these elements in detail as follows:\n\u2022 Virtualization: Physical IoT devices and edge gateways are registered and created as virtual objects in the Internet space through a virtualization function and are connected to each other. \u2022 Synchronization: Through the synchronization function in digital twin, it is possible to check the status of IoT devices and edge gateways operating in the physical environment in real time. \u2022 Simulation: In addition, data collected from physical devices can be processed, visualized and experimented using the developed simulation function. \u2022 Connectivity: The physical and virtual objects of the digital twin are connected using two different protocols: 1) HTTP, and 2) IoTivity. These protocols make the proposed solution interoperable for connecting devices from different vendors. We also compere these connectivity protocols based on latency for a workload simulation. \u2022 Task Management: Figure 3 is a task management architecture based on digitalized distributed edge computing networks. The task management function supports creation of tasks based on the edge computing network and the information registered in the digital twin platform. Later, it deploys these to the physical edge computing network. The task management component provides functions of task registration, distribution, task termination, and task result data visualization. The edge computing networks are composed of edge gateways running edge computing services and IoT devices (e.g. in our case study, we used sensors as IoT devices to collect environmental information created as tasks). The tasks are distributed to edge gateways to collect and process data in the vicinity of IoT devices while providing fast processing speed. The deployed tasks are executed on the specified edge gateways and the results are stored in the database. The execution status of the task can be checked in real-time, and the task data is visualized to the user.\nThe overall structure of our proposed system for task and virtual object management using digital twin is shown in Figure 4. It is mainly composed of three major parts. 1) The IoT infrastructure could be a smart home, a smart factory, a smart building, and a smart grid that uses IoT devices. 2) The edge\ncomputing networks are composed of various edge gateways. Each edge gateway includes Docker-based edge computing services and applications. Docker technology manages the volume and network resources of image-based services by Docker Engine. 3) The Edge Computing Supervisor (ECS) of the edge server provides important capabilities to build virtual distributed edge computing networks, monitor the status of physical entities, and operate tasks and services. The virtual object management function virtualizes edge gateways and IoT devices and expresses them as digitized objects. The monitoring function communicates with the physical entity in real-time to reflect new status updates. The data collected from edge computing networks are visualized as a chart on a web page to increase visibility. The edge gateway connectivity function provides a control function for the services provided by the edge gateway. The task operator allows user to create and execute tasks, and all the information related to the edge computing network is stored in a database. The client presents the web page of each function of the edge computing supervisor. We propose development architecture for Distributed Edge Computing Environment. The development architecture for distributed edge computing is depicted in Figure 5. It comprises various components, including edge servers, edge computing networks, and IoT devices. The Edge Computing Supervisor, integrated into the Edge Server, enables users to register tasks, execute them, and monitor the task results. The edge computing network is composed of three Raspberry Pi devices, each running EdgeX microservices. These microservices facilitate the registration, communication, and command delivery for the IoT devices. The IoT devices encompass devices that implement the HTTP protocol and utilize the IoTivity framework, along with smart home emulators. In our specific case study, we focus on controlling the thermal comfort level within a smart home environment by leveraging indoor and outdoor environmental variables. The task load involves acquiring relevant datasets and optimizing the thermal comfort based on the sensed data. The smart home emulator facilitates the exchange of temperature and humidity information through both HTTP and IoTivity devices. Additionally, it offers access to indoor temperature, humidity, outdoor temperature, humidity, and heater power. Moreover, it can dynamically respond to changes in the indoor environment by activating actuators through a controller. We propose the development model for distributed edge computing based on OCF IoTivity in Figure 6. Figure 6 illustrates the functional blocks of OCF IoTivity-based IoT devices. Since IoT devices are manufactured by different vendors, they often employ different communication protocols. To address this diversity, the Open Connectivity Foundation (OCF), a standardization organization, has established a unified standard. IoTivity, which follows a client-server communication model, is used as the communication framework. In the context of edge computing, the EdgeX platform establishes a connection between the IoT devices and the edge computing services through device services. For\nVOLUME 11, 2023 5\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx"
        },
        {
            "heading": "6 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nFIGURE 3. Task and Virtual Object Management Architecture for Distributed Edge Computing Networks\nFIGURE 4. Proposed Functional Architecture of Task and virtual Object management based on Digital Twin for Distributed Edge Computing Networks\nIoTivity communication, the device service implements the IoTivity Client, while the IoT device itself serves as the IoTivity Server. The device service encompasses essential functions, including IoT device registration, a command executor responsible for executing commands received from core commands, and a communication driver. The communication driver, which implements the IoTivity client, consists of an Initializer, Actions, and a handler. When the command executor triggers one of several activities, the corresponding handler processes the response received from the IoTivity server. In addition to the functions required for IoTivity, such as the Initializer, Actions, and handler, IoTivity IoT\ndevices are connected with device drivers, sensors, and actuators. Each sensor and actuator operates through its dedicated driver. During the initialization phase, the IoTivity server activates the IoTivity framework and establishes connections between resources and the handler. When a request is sent from the IoTivity client, the handler responds by invoking the corresponding activity, thereby facilitating seamless communication and interaction between the IoTivity-based IoT devices.\nVOLUME 11, 2023 7\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nFIGURE 5. Proposed Development Architecture for Distributed Edge Computing Environment\nFIGURE 6. Proposed Development Model for Distributed Edge Computing based on OCF IoTivity\nIV. MATHEMATICAL OPTIMIZATION BASED ON OBJECTIVE FUNCTION FOR TASK SCHEDULING IN DISTRIBUTED EDGE COMPUTING ENVIRONMENT\nThe optimization problem for optimized task scheduling can mathematically be modeled for selecting virtual objects (represented as edge gateways) to optimally execute tasks offloaded by edge devices in distributed edge computing environment. For concrete representation, we need to define mathematical variables to denote each parameter. Let\u2019s define the following variables.\nSuppose, V is the set of virtual objects or gateways avail-\nable for task execution, T is the set of tasks to be executed by the virtual objects, P is the set of edge devices offloading the tasks to the virtual objects, Ci,j is the cost of executing task j using virtual object i, di,p is the distance between virtual object i and edge device p, si,p is the processing speed of virtual object i when connected to edge device p. We want to select the virtual object that can optimally execute each task, considering the cost of execution and the distance to the edge device. The distance between two nodes in a network can be calculated as follows. If the edge devices and tasks are connected through a network, the network distance between"
        },
        {
            "heading": "8 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nedge device i and task j can be calculated as the number of hops or the short experiment path between them in the network. Objective function:\nmin \u2211 i\u2208V \u2211 j\u2208T Ci,jxi,j (1)\nConstraints: s.t. \u2211 i\u2208V\nxi,j = 1 \u2200j \u2208 T\u2211 j\u2208T\nxi,j \u2264 1 \u2200i \u2208 V\u2211 i\u2208V si,pyi,p \u2265 \u2211 j\u2208T \u2211 i\u2208V\nsi,pxi,j \u2200p \u2208 P\u2211 i\u2208V di,pyi,p \u2264 D \u2200p \u2208 P xi,j \u2208 0, 1 \u2200i \u2208 V , j \u2208 T yi,p \u2208 0, 1 \u2200i \u2208 V , p \u2208 P\nThe objective function minimizes the total cost of executing all tasks using the selected virtual objects. The first constraint ensures that each task is executed by exactly one virtual object. The second constraint ensures that each virtual object is used to execute at most one task. The third constraint ensures that the processing speed of the virtual objects connected to each edge device is sufficient to execute all tasks offloaded by that device. The fourth constraint limits the total distance between the selected virtual objects and the edge devices to a maximum value D. The decision variables are xi,j, which takes value 1 if virtual object i is selected to execute task j, and 0 otherwise, and yi,p, which takes value 1 if virtual object i is connected to edge device p, and 0 otherwise. The use of MILP allows for the model to be solved efficiently using off-the-shelf optimization solvers. The solution to the model provides an optimal assignment of virtual objects to tasks that minimizes the total cost of execution. The mathematical modeling is carried out in such way that it can be used in a wide range of applications in distributed edge computing systems, such as autonomous vehicles, smart factories, and IoT devices. It provides a framework for making optimal decisions about task assignment and virtual object selection that can improve system performance and efficiency.\nHowever, the mathematical model given in Equation 1 can only optimize the task scheduling where each task can access all of its data and there are no privacy concerns. We extend the mathematical model further such that it accounts for both task and virtual object management, where some tasks may require training as per the procedure of federated learning (FL) or a Distributed Edge Computing Network (DECN), as given in follows:\nLet there be a set of M tasks denoted by T = 1, 2, . . . ,M , and a set of N edge devices denoted by E = 1, 2, . . . ,N . Each task t has a set of virtual objects denoted by Vt , and each virtual object v belongs to a specific edge device i, denoted by\nE(v) = i. The goal of the network is to efficiently manage the virtual objects and tasks in a distributed and secure manner. For FL-based tasks, let the data on edge device i for task t be denoted by Di,t , and let fi,t (w;Di,t) denote the local machine learning model on edge device i for task t , trained on the data Di,t . Then, the objective function of FL-based tasks can be formulated as:\nmin w F(w) = 1 M M\u2211 t=1 1 Nt Nt\u2211 i=1 Li,t (w;Di,t) (2)\nWhere Nt is the number of edge devices participating in task t , and Li,t (w;Di,t) is the local loss function on edge device i for task t, defined as:\nLi,t (w;Di,t) = Loss (fi,t (w;Di,t) ,Di,t) + \u03bb \u00b7 R (fi,t (w;Di,t)) (3)\nWhere Loss (fi,t (w;Di,t) ,Di,t) is the loss function used to evaluate the performance of the local machine learning model fi,t (w;Di,t) on the dataDi,t , \u03bb is the regularization parameter, and R (fi,t (w;Di,t)) is the regularization term used to prevent overfitting of the local machine learning model fi,t (w;Di,t). To update the machine learning model w using the local updates from the edge devices for FL-based tasks, the federated averaging algorithm can be used. In this algorithm, the local machine learning models on the edge devices for each task t are updated using stochastic gradient descent, and the updated models are then averaged to obtain the new global machine learning model for task t . The update equation for the global machine learning model for task t can be formulated as:\nwt+1,i,t = 1 Nt Nt\u2211 i=1 (wt,i,t \u2212 \u03b1 \u00b7 \u2207Li,t (wt,i,t ;Di,t)) (4)\nWhere Wt,i,t is the local machine learning model on edge device i for task t at time t , \u03b1 is the learning rate, and \u2206Li,t(wt,i,t ;Di,t) is the gradient of the local loss function Li,t(wt,i,t ;Di,t) with respect to the model parameters. For task and virtual object management, let vt denote the number of virtual objects for task t assigned to edge device i. The objective of task and virtual object management can be formulated as:\nmin x G(x) = M\u2211 t=1 N\u2211 i=1 (cv (x, vt , i) + ct(x, t, i)) (5)\nWhere x is the decision variable vector, cv(x, vt , i) is the cost of assigning vt virtual objects for task t to edge device i, and ct(x, t, i) is the cost of assigning task t to edge device i. The costs can be defined based on factors such as computational resources, network bandwidth, and energy consumption. The virtual object management problem can also include constraints such as capacity constraints on the edge devices, security constraints to ensure that virtual objects are not compromised, and latency constraints to ensure\nVOLUME 11, 2023 9\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nthat tasks are completed within a certain time frame. The Particle Swarm Optimization (PSO) algorithm proposed in [35] is utilized to solve the task scheduling problem. The objective function as given above is integrated within the method, where the encoding of the particle corresponds to the assignment of virtual objects to tasks, while the velocity of a particle represents the direction and magnitude of its movement in the search space. The update rules for position and velocity, and the convergence criteria are used without any modifications.\nV. DEVELOPMENT CONFIGURATION FOR TASK AND VIRTUAL OBJECT MANAGEMENT IN DISTRIBUTED EDGE COMPUTING NETWORKS The development configuration for IoT devices, edge gateways, and edge computing supervisors is summarized in Table 2. ECS is a server that enables to build of digitalized edge computing networks. A development environment is a virtual machine with Ubuntu 18.04 operating system. The python version 3.8 provided by default in the Ubuntu operating system is the main programing language. HTML5, CSS 3, and JavaScript are used as front-end development. Virtual edge gateway and IoT device object are created through the front end and provides interoperability with users. To improve the visualization qualities, the Bootstrap framework is employed to implement web pages. The server is developed with the Flask framework. Flask is based on the Python development language and provides the libraries needed to develop web applications. MariaDB is selected to build the database to store data.\nTo serve the edge gateway, an Ubuntu 20.04 server is installed on Raspberry Pi 4 hardware. Python version 3.8 is chosen as the programing language. In order to provide the generated functions as REST APIs, the Flask framework is used for web application development. It builds a server using Flask and implements REST APIs so that it can be called from outside. In order to realize the implementation of Raspberry Pi remotely, Visual Studio Code editor is installed and programming, execution, and debugging are performed through remote access. IoT device is developed with Ubuntu 20.04 on Raspberry Pi 3 hardware. Java version 1.8 is selected as the programing language. To realize IoTivity standardbased communication protocol, the server is integrated based on IoTivity framework. The server is built using the Spring Boot framework which is based on the Java language (with development tool as Eclipse).\nA. DIGITAL TWIN USER INTERFACE AND DEVICE REGISTRATION The process of device registration is described, emphasizing the role of the digital twin Web GUI. Figure 7 illustrates the main screen of the digital twin platform, showcasing the user interface for device registration and management. The figure depicts the input fields and information required for successful registration of object, such as gateway names, addresses, and device resources. In order to identify the edge gateway, a\nname is assigned with the prefix \u201cEdgeGW-KR-JNU-\u201d and a three digits identifier is associated with each edge gateway. In the prefix, KR and JNU represents Korea and Jeju National University, respectively, where the empirical evaluation is carried out.\nB. VIRTUAL OBJECT STATUS SYNCHRONIZATION\nConnection between IoT devices and edge gateway can be established with a user-friendly method of a drag-and-drop GUI facility by edge computing supervisor. A series of complex execution processes that form a connection is transparent to the user, and the connection process can be easily completed by simply dragging and dropping. Figure 8 (a) is the digital twin main page of the edge server where the information of registered edge gateways and IoT devices are listed. A physical object in the edge computing network is virtualized and expressed in the form of a card. Physical objects and cards are symmetrically expressed one-to-one. User can check the execution status of the physical object in real-time. The color of the edge of the card expresses the execution state of the physical object. Green indicates that the object is operating, while blue indicates that it is not running. The name and address of the object can be checked through the text displayed on the card, and the edge gateway is expressed as a computershaped icon and the IoT device is represented by a processor as an icon. In addition, resources provided by IoT devices are expressed as textual labels. Currently, 3 edge gateways and 7 IoT devices have been registered and executed with the edge server.\nFigure 8 (b) shows the detailed information page of the edge gateway EdgeGW-KR-JNU-001. First of all, the detailed location information is drawn on themap using the edge gateway location information. Themap not only shows the locationwhere themicro edge gateway is located but also shows basic information. Next is the small widget located in the upper right corner, which numerically expresses the number of IoT devices connected to the edge gateway; when clicked, display the names of IoT devices currently connected. Each IoT device is linked to a detailed information page. User can check the data collection information visualized in the diagram (this is information about data collected from connected IoT devices). Figure 8 (c) shows the detailed information page of the IoT device (IoTDevice-KR-JNU-001). This is the detailed information page that appears when user clicks the name of the IoT device IoTDevice-KR-JNU-001 on the digital twin edge computing main page. In the widget (in the upper right corner), links to the connected edge gateways are listed. The name of the connected edge gateway can be found through the listed link. The information of the data collected from each edge gateway is located at the bottom of the screen as a diagram.When looking at the first diagram, it can be seen that data (about temperature) was collected from the edge gateway EdgeGW-KR-JNU-001."
        },
        {
            "heading": "10 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nVOLUME 11, 2023 11\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\n(a) Visualization of Virtual Object (gateway, IoT)\n(b) Data Synchronization of Virtual IoT Devices\n(c) Data Synchronization of Virtual Edge Gateway\nFIGURE 8. Synchronization and Visualization of Virtual Object in Digital Twin based Distributed Edge Computing Network"
        },
        {
            "heading": "12 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nFIGURE 9. Registration and State for Operating Task\nC. TASK REGISTRATION AND EXECUTION The task registration interface is shown in Figure 9. Tasks are processes used for e.g., collecting data from IoT devices or processing the collected data using services to generate results. Users can define task-related names and for manual execution and scheduling, they can define the edge gateway (for executing the task) and resource(s) required for task execution. For optimal scheduling, the edge gateway is selected by optimization algorithm (not by the user).\nList of tasks and their execution status can be viewed as shown in Figure 9. Tasks can manually be operated and status of execution or operation is indicated to the user. Figure 10 is a visualization result of data collected from IoT devices for the tasks listed in Figure 9. The visualization is about the temperature/humidity data collected from the IoT devices \u2018IoTDevice-KR-JNU-001\u2019 and \u2018IoTDevice-KR-JNU002\u2019 through the edge gateway EdgeGW-KR-JNU-001. The X represents the number of experimental turns and the Y represents the data value information. The temperature data shows values between 10 and 40. The IoT device IoTDeviceKR-JNU-001 runs the IoTivity server and registers temperature data as a resource requirement. The unit of temperature data is \u2018\u00b0C\u2019 in degrees Celsius.\nVI. PERFORMANCE ANALYSIS FOR DISTRIBUTED EDGE COMPUTING NETWORKS BASED ON HTTP AND OCF IOTIVITY A. PMV DATASET COLLECTION AND TASKS GENERATION The dataset related to occupant thermal comfort from multiapartment smart homes located in Jeju city, South Korea is pre-collected for a period of eleven months (330 days) and stored in the database of supervisor server. This was achieved through the deployment of a network of sensors and smart meters strategically placed throughout the homes. These sensors effectively captured key parameters such as temperature, humidity, air quality, and energy consumption within the targeted smart home environment, whereas outdoor environmental data is collected from web services. Later,\nseveral tasks are generated for data collection to be executed at edge gateways. The tasks collect the data by querying the database located at server rather than collecting the data from IoT sensors. The tasks are generated to collect data for various time intervals. For example, using 10 minutes interval for a particular day, one can create total 47520 tasks for collection of data of 330 days. The controller\u2019s named \u2018SimulatedSmrtHome\u2019 with the address \u201c192.168.0.2:9002\u201d is registered to handle the database at server as shown in Figure 11. The necessary query data information is about indoor temperature (IT), indoor humidity (IH), optimized indoor temperature (OIT), optimized indoor humidity (OIH), outdoor Specified by temperature (OT), outdoor humidity (OH), and heater power (HP). We used two types of experiments: 1) Only data collection without optimizing thermal comfort, and 2) Data collection with optimization of thermal comfort using decentralized federated learning (FL). For second experiment using decentralized FL, we used our proposed solution [36] (with best parameter settings) which train deep learning models for each gateway, collaboratively, considering the locally collected data of each gateway as private. Themodels are used to predict the thermal comfort value at time stamp in future for environmental data collected for current time stamp. Later, the actuators are signaled to control the indoor temperature and humidity settings for optimizing the thermal comfort value. More interested readers are kindly referred to [36] for detailed information.\nFigure 12 is the visualization result of the executing the two experiments in smart homes environment. The data is plotted in the form of a bar chart with Indoor Temperature (IT), Indoor Humidity (IH), Outdoor Temperature (OT), Outdoor Humidity (OH), Heater Power (HP), Optimized Room Temperature (opt_IT), Optimized Room Humidity (opt_IH), Thermal Comfort Level (PMV). The X coordinate represents experimental turn and the Y coordinate represents data value information. A total of 15 rounds of information are shown.\nIt can be observed from above results that for experiment 2 in Figure 13, the indoor temperature and humidity is op-\nVOLUME 11, 2023 13\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx"
        },
        {
            "heading": "14 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nVOLUME 11, 2023 15\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nFIGURE 13. Experiment 2 Result for thermal comfort in Smart Homes Environment"
        },
        {
            "heading": "16 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\ntimized and PMV values stay within the occupant comfort level. Whereas, for experiment 1, the indoor temperature and humidity is constantly decreasing and correspondingly, the PMV values are not within the preferred range of occupants comfort.\nB. COMPARISON OF TASK SCHEDULING METHODS For comparing the tasks scheduling performance, the tasks for collecting the data and optimizing the PMV values are created with varying sizes. The size of a task represents the time interval (in minutes) for which the data is being queried from the server database and then processed for further optimization. Several tasks for time intervals 1 - 5,000 are created as workload. The execution time Ti,j for task Ti over virtual object (edge gateway)Vj is represented by task size divided by the processing speed of Vj. Total execution time can therefore be calculated as below where Ci,j is the decision variable of whether or not the task Ti is assigned to Vj:\nTotalExecutionTime = \u2211 i\u2208V \u2211 j\u2208T Ci,jTi,j (6)\nFigure 14 shows the result of measuring the total execution time to schedule the given number of tasks randomly selected from workload. The X axis shows the number of tasks and Y axis presents the total execution time. It can be observed that optimized task scheduling is consistently performing better than non-optimized version. As the number of tasks increases, both the optimized and non-optimized scheduling approaches show an increase in the total execution time. This is expected because a larger number of tasks typically require more processing time. The optimized scheduling approach consistently outperforms the non-optimized approach in terms of total execution time. In every case, the total execution time for optimized scheduling is lower than that of non-optimized scheduling. The difference in total execution time between optimized and non-optimized scheduling tends to increase as the number of tasks increases. This suggests that the benefits of optimized scheduling become more pronounced when the task workload becomes larger. Based on these observations, it can be concluded that the optimized scheduling approach yields better results in terms of total execution time compared to the non-optimized approach. This indicates that the optimization algorithm or methodology used in the optimized scheduling is effective in reducing the overall execution time for the given task workload.\nC. COMPARISON OF TASK SCHEDULING METHODS IN FEDERATED LEARNING ENVIRONMENT The Table 3 presents the results of our evaluation comparing two methods for federated learning: one with optimized task scheduling and the other without. The evaluation focuses on two key metrics: Mean Absolute Error (MAE) and Total Execution Time. The experiments are conducted with different numbers of clients in the federated learning setup. Three configurations were tested: 4 clients, 10 clients, and\n30 clients. It can be observed from the results that the MAE values for bothmethods are relatively low, indicating that both optimized and non-optimized scheduling methods produce accurate federated learning models. However, the optimized task scheduling method consistently achieves slightly lower MAE values, suggesting better model accuracy. The most notable difference between the two methods is in Total Execution Time. The optimized task scheduling method significantly outperforms the non-optimized method in terms of efficiency. It takes less time to complete federated learning tasks, which is crucial for real-time or resource-constrained applications. The experiments also show that the optimized task schedulingmethodmaintains its efficiency as the number of clients increases. In contrast, the non-optimized method experiences amore significant increase in execution timewith additional clients."
        },
        {
            "heading": "D. COMPARISON OF HTTP VS IOTIVITY PROTOCOLS",
            "text": "We introduce the results of a total of 10 experiments in Figure 15. It can be observed that the IoTivity framework is all under 1 second except for the highest value of 1500. The data received with the IoTivity framework spend more time than the data collected from IoT devices that implement the HTTP protocol. The IoTivity framework consists of an edge gateway as client and a server. The server register resources which are required to collect the data provided by the client. Since the client finds and accesses the server from the identifier of the resource registered in the network without knowing the server\u2019s network address, it is a more time-consuming process than the HTTP protocol. Figure 16 provides a statistical analysis of the results obtained from the comparison of data collection tasks using the HTTP and IoTivity protocols, as shown in Figure 15. The statistical measures calculated for the new data collection tasks include the minimum (min), maximum (max), mean (avg), and standard deviation (std) values. When utilizing the HTTP protocol, the average working time for data collection tasks is measured to be 155.3 ms, with the highest recorded value being 400 ms. These findings indicate that the average working time for HTTP-based devices is consistently below 0.5 seconds. This suggests that HTTP performs efficiently in terms of data collection, delivering relatively fast response times for most situations. On the other hand, devices integrated with the IoTivity framework exhibit a higher peak value of 1500 in terms of working time. However, the average working time for IoTivity-based devices is calculated to be 483.2 ms, which also falls within the sub-0.5 seconds range for the majority of scenarios. This implies that IoTivitybased devices generally perform satisfactorily in terms of data collection, albeit with slightly higher response times compared to HTTP. Analyzing the standard deviation values, it becomes evident that the HTTP protocol demonstrates a more stable working time than the IoTivity framework. The lower standard deviation associated with HTTP indicates that the working times for HTTP-based devices are less variable and more predictable compared to devices using the IoTivity\nVOLUME 11, 2023 17\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx"
        },
        {
            "heading": "18 VOLUME 11, 2023",
            "text": "Author et al.: xxxx\nFIGURE 16. Comparison for Data Collection Processing Time Statistics of IoT Device and Edge Gateway based on OCF IoTivity and HTTP\nframework. In summary, the statistical analysis presented in Figure 16 reinforces the advantage of using the HTTP protocol for data collection tasks in terms of average working time and stability. HTTP consistently delivers faster response times, with an average below 0.5 seconds, while also exhibiting a lower degree of variation in working times as indicated by the smaller standard deviation. These findings underscore the effectiveness and reliability of the HTTP protocol in the context of data collection within our distributed edge computing network.\nE. CHALLENGES AND LIMITATIONS As can be observed from the experimental results that integrating FL with edge computing environment offers numerous advantages, such as improved privacy and reduced data transfer requirements. However, it also presents several challenges and limitations that must be addressed to ensure its successful deployment. In follows, we provide an extensive discussion on these challenges and limitations:"
        },
        {
            "heading": "1) Challenges",
            "text": "Heterogeneity of Edge Devices: Edge environments encompass a wide variety of devices, each with its own computational power and capabilities. Ensuring that FL algorithms can run efficiently on diverse edge devices can be challenging. Some devices may have limited processing capabilities, while others may be more powerful. Data Imbalance: Edge devices may produce data at different rates or have varying data quality. This data imbalance can affect the quality of local model updates and lead to biased global models. Communication Overhead: Although FL reduces data trans-\nfer, communication overhead is still a concern. Transmitting model updates and aggregating them centrally requires bandwidth and can introduce latency. Minimizing communication overhead while ensuring efficient model aggregation is a nontrivial task and will be addressed in future research work. Model Synchronization: Ensuring that all edge devices are synchronized with the latest global model is essential. Issues such as device failures or communication interruptions can disrupt synchronization. Our method follows strict synchronization where the models are aggregated only when all the participating edge devices in FL have communicated their models. In such a scenario slow learners or straggler participants can hinder the performance. Security Concerns: FL introduces new security challenges. Edge devices may be vulnerable to attacks, and the model aggregation process can be susceptible to malicious actors. Techniques such as differential privacy and secure aggregation can be employed to protect proposed framework in future study. Energy Consumption: Many edge devices are batterypowered and have limited energy resources. Running FL algorithms can be computationally intensive, which may drain the device\u2019s battery quickly. Energy-efficient FL algorithms are necessary to prolong device lifetimes."
        },
        {
            "heading": "2) Limitations",
            "text": "The quality of global models in FL depends on the quality of local updates. If some edge devices have noisy or inaccurate data, it can negatively impact the overall model quality. Moreover, our method cannot handle data imbalance or nonIID (independent and identically distributed) data and can be further refined in this dimension. The proposed integration of FL with edge computing and digital twin can be complex\nVOLUME 11, 2023 19\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nto implement and would require fine-tuning. The complexity may require specialized knowledge and resources, making it challenging for smaller organizations or deployments with limited expertise. The scaling of proposed method to a large number of edge devices can be complex. Coordinating and managing a vast network of edge devices participating in FL training can become cumbersome and need to be further investigated.\nVII. CONCLUSION AND FUTURE DIRECTIONS The research presented in this paper demonstrates the successful integration of digital twin and task management in distributed edge computing environment. By implementing an edge gateway supervisor and virtualizing edge gateways, we have established an efficient and scalable system for task execution on IoT devices. The optimized task scheduling algorithm significantly reduces total execution time. The total execution time for optimized scheduling is observed to be consistently lower than that of non-optimized scheduling. As the number of tasks increases, the benefits of optimized scheduling become more pronounced, indicating the effectiveness of the optimization algorithm in reducing execution time. The performance analysis conducted highlights the advantages of using the HTTP protocol for data collection tasks. Our results show that HTTP-based devices exhibit lower latency compared to those using the IoTivity protocol. This finding suggests that the HTTP protocol is more suitable for achieving faster and more reliable data collection in our distributed edge computing network. Furthermore, our user-friendly graphical user interface (GUI) empowers users with varying levels of technical expertise to easily virtualize and manage the distributed edge computing environment. Through the GUI, users can monitor the real-time execution status, register new tasks, and deliver them to IoT devices for execution. This accessibility and ease of use contribute to the practicality and adoption potential of our system.\nLooking ahead, our future research will focus on integrating advanced machine learning techniques to further enhance the stability and reliability of the entire system. By leveraging machine learning algorithms, we aim to predict system states, detect anomalies, and proactively address potential issues based on the information collected from IoT devices. This proactive approach will contribute to the stable operation of the distributed edge computing environment and enable efficient problem resolution.\nKeeping in view the limitations of the method, there could be several research avenues for exploration. For example, future research could focus on developing techniques to enhance the quality of local updates, particularly when dealing with noisy or inaccurate data on edge devices. This could involve data cleaning methods, robust aggregation strategies, or differential privacy mechanisms. We can extend the work to address data imbalance and non-IID scenarios for FL scenario. Research can focus on resource-efficient FL techniques, allowing FL to run effectively on resource-constrained edge devices. This may involve model compression,\nquantization, or edge-specific optimization methods."
        },
        {
            "heading": "ACKNOWLEDGMENT",
            "text": "This work was supported by Institute of Information & communications Technology Planning & Evaluation (IITP) grant funded by the Korea government(MSIT) (2022-0-01032, Development of Collective Collaboration Intelligence Framework for Internet of Autonomous Things). Any correspondence related to this paper should be addressed to Do-hyeun Kim."
        },
        {
            "heading": "20 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\n[20] A. Costanzo, A. Faro, D. Giordano, and C. Pino, \u201cMobile cyber physical systems for health care: Functions, ambient ontology and e-diagnostics,\u201d in 2016 13th IEEE Annual Consumer Communications & Networking Conference (CCNC), 2016, pp. 972\u2013975. [21] R. Martinez-Velazquez, R. Gamez, and A. El Saddik, \u201cCardio Twin: A Digital Twin of the human heart running on the edge,\u201d in 2019 IEEE International Symposium on Medical Measurements and Applications (MeMeA), 2019, pp. 1\u20136. [22] Y. Lu, X. Huang, K. Zhang, S. Maharjan, and Y. Zhang, \u201cCommunicationefficient federated learning for digital twin edge networks in industrial IoT,\u201d IEEE Trans. Ind. Inform., vol. 17, no. 8, pp. 5709\u20135718, 2020. [23] K. Zhang, J. Cao, and Y. Zhang, \u201cAdaptive digital twin andmultiagent deep reinforcement learning for vehicular edge computing and networks,\u201d IEEE Trans. Ind. Inform., vol. 18, no. 2, pp. 1405\u20131413, 2021. [24] H. Huang, L. Yang, Y.Wang, X. Xu, and Y. Lu, \u201cDigital Twin-driven online anomaly detection for an automation system based on edge intelligence,\u201d J. Manuf. Syst., vol. 59, pp. 138\u2013150, 2021. [25] P. Bellavista, C. Giannelli, M. Mamei, M. Mendula, and M. Picone, \u201cApplication-driven network-aware digital twin management in industrial edge environments,\u201d IEEE Trans. Ind. Inform., vol. 17, no. 11, pp. 7791\u20137801, 2021. [26] L. Jiang, H. Zheng, H. Tian, S. Xie, and Y. Zhang, \u201cCooperative federated learning and model update verification in blockchain empowered digital twin edge networks,\u201d IEEE Internet Things J., 2021. [27] K. Y. H. Lim, P. Zheng, and C.-H. Chen, \u201cA state-of-the-art survey of Digital Twin: techniques, engineering product lifecycle management and business innovation perspectives,\u201d J. Intell. Manuf., vol. 31, no. 6, pp. 1313\u20131337, 2020. [28] AbdulRahman, S., Otoum, S., Bouachir, O., & Mourad, A. \u201cManagement of Digital Twin-driven IoT using Federated Learning,\u201d IEEE Journal on Selected Areas in Communications, 2023. [29] Qian, L. P., Li, M., Ye, P., Wang, Q., Lin, B., Wu, Y.,& Yang, X. \"SecrecyDriven Energy Minimization in Federated Learning-Assisted Marine Digital Twin Networks,\u201d IEEE Internet of Things Journal, 2023. [30] Alhartomi, M. A., Salh, A., Audah, L., Alzahrani, S., Alzahmi, A., Altimania, M. R., ... & Al-Hartomy, O. \"Sustainable Resource Allocation and Reduce Latency Based on Federated-Learning-EnabledDigital Twin in IoT Devices,\u201d Sensors, 23(16), 7262, 2023. [31] Wang, X., Cheng, N., Ma, L., Sun, R., Chai, R., & Lu, N. \"Digital twinassisted knowledge distillation framework for heterogeneous federated learning,\u201d China Communications, 20(2), 61-78, 2023. [32] Li, B., Shi, Y., Kong, Q., Du, Q., & Lu, R. \"Incentive-Based Federated Learning for Digital Twin Driven Industrial Mobile Crowdsensing,\u201d IEEE Internet of Things Journal, 2023. [33] Islam, A., & Shin, S. Y. \"A Digital Twin-Based Drone-Assisted Secure Data Aggregation Scheme with Federated Learning in Artificial Intelligence of Things,\u201d IEEE Network, 37(2), 278-285, 2023. [34] Wang,W., He, F., Li, Y., Tang, S., Li, X., Xia, J., & Lv, Z. \"Data information processing of traffic digital twins in smart cities using edge intelligent federation learning,\u201d Information Processing & Management, 60(2), 103171, 2023. [35] Zhang, Ming, et al. \u201cA Particle Swarm Optimization Method for AI Stream Scheduling in Edge Environments,\u201d Symmetry 14.12, p. 2565, 2022. [36] Xu, Rongxu, et al. \"Cooperative Swarm Learning for distributed cyclic edge intelligent computing,\u201d Internet of Things, 100783, 2023.\nXU RONGXU received the B.S. degree in computer science from the Yanbian University of Science and Technology, China, in 2014, an M.S. degree in computer engineering fromKonkuk University, South Korea, in 2017, and a Ph.D. degree from the Mobile Computing Laboratory (MCL), Computer Engineering Department, Jeju National University, South Korea, in 2022. His research interest includes edge computing. He has been a Postdoctoral Researcher with the Big Data Re-\nsearch Center at Jeju National University since March 2022. In addition, he studies optimization and machine learning for smart homes, deep neural networks and federated learning for edge intelligent practice. He is currently working as a ProjectManager for a research project supported by theNational Research Foundation of Korea.\nCHAN-WON PARK received the B.S. and M.S. degrees in the computer engineering from Kwang Woon University, Seoul, Korea in 1993 and 1996, respectively, and the Ph.D. degree in electronics engineering from Chungnam National University, Daejeon, Korea in 2016. Between 1996 and 1999, he worked for IDEC in KAIST, Daejeon, Korea as a semiconductor design research follow. He joined ETRI (Electronics and Telecommunications Research Institute), Daejeon, Korea in 1999. Between\n1999 and 2005, he developed the wireless communications system that includes WiFi, Home PNA, etc. Between 2005 and 2010, he developed passive RFID reader SoC, special tag, etc and succeeded commercialization it as a global chip. Since 2010, he has been working as a director in the research section of object recognition and IoT (Internet of Things) and developed extendable LPWA, Energy harvested system. Especially since 2019, he is currently in charge of the autonomous IoT section for the development of intelligence devices. Since 2014, he is serving as vice chair of IoT convergence service board at TTA in Korea. And he has been awarded the ETRI excellence researcher award and the Ministerial award. His research interests include wireless communication, energy harvesting, RFID, IoT, reinforcement learning and autonomous AI device.\nSALABAT KHAN received the Ph.D. degree from NUCES FAST, Islamabad. He is currently a BrainPool Overseas Researcher with the Big Data Research Center, Jeju National University, South Korea. He is also an Associate Professor with COMSATS University Islamabad, Attock Campus, Pakistan. His research interests include evolutionary computation, medical image processing, machine learning, federated learning, decentralized cooperative learning, big data analytics, recommender\nsystems, and the IoT. He is a reviewer of several prestigious international journals and conferences.\nVOLUME 11, 2023 21\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nAuthor et al.: xxxx\nWENQUAN JIN received the B.S. degree in computer science from the Yanbian University of Science and Technology, China, in 2013, and the M.S. and Ph.D. degrees in computer engineering from Jeju National University, South Korea, in 2015 and 2019, respectively. He was a postdoctoral researcher at the Big Data Research Center, Jeju National University, since from 2019 to 2022. Currently, he is a lecturer at Yanbian University, China. His research interests are edge computing\nand swarm intelligence.\nSA JIM SOE MOE received a B.S. degree in Computer Technology from the University of Computer Studies, Yangon in 2010. He is currently pursuing the M.S. degree in computer engineering at Jeju National University, South Korea. His research interests include machine learning, edge computing, and the development of the Internet of Things.\nDOHYEUN KIM received the B.S. degree in electronics engineering and the M.S. and Ph.D. degrees in information telecommunication from Kyungpook National University, South Korea, in 1988, 1990, and 2000, respectively. He joined the Agency of Defense Development (ADD) from Match 1990 to April 1995. Since 2004, he has been with Jeju National University, South Korea, where he is currently a Professor in the Department of Computer Engineering. From 2008 to 2009, he had\nbeen with the Queensland University of Technology, Australia, as a Visiting Researcher.\nHis research interests include sensor networks, M2M/IoT, energy optimization and prediction, intelligent service, and mobile computing."
        },
        {
            "heading": "22 VOLUME 11, 2023",
            "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/"
        }
    ],
    "title": "Optimized Task Scheduling and Virtual Object Management Based on Digital Twin for Distributed Edge Computing Networks",
    "year": 2023
}