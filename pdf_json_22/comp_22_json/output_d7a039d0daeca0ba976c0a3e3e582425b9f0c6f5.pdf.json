{
    "abstractText": "The Industrial Internet is the key for Industry 4.0, and network control in the industrial internet usually requires high reliability and low latency. The industrial internet ubiquitously connects all relevant Internet of things (IoT) sensing and actuating devices, allowing for monitoring and control of multiple industrial systems. Unfortunately, guaranteeing very low end-to-end wait times is particularly challenging because the transmissions must be articulated in time. In the industrial internet, there usually coexist multiple streams. The amount of data for controlling business flows is small, while other business flows (e.g., interactive business flows, sensing business flows) typically transmit large amounts of data across the network. These data flows are mainly processed in traditional switches using a queue-based \"store-and-forward\" mode for data exchange, consuming much bandwidth and filling up the network buffers. This causes delays in the control flow. In our research, we propose an Software Defined Networking (SDN) framework to reduce such delays and ensure real-time delivery of mixed service flows. The scheduling policy is performed through the northbound Application Programming Interface (API) of the SDN controller so that the dynamic network topology can be satisfied. We use the concept of edge and intermediate switches, where each switch port sends data at a specific time to avoid queuing intermediate switches. We also introduce an improved Langerian relaxation algorithm to select the best path to ensure low latency. Finally, the path rules are deployed to the switches in flow tables through the SDN controller. Our mathematical analysis and simulation evaluation demonstrates that the proposed scheme is more efficient.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yan Song"
        },
        {
            "affiliations": [],
            "name": "Wenjing Luo"
        },
        {
            "affiliations": [],
            "name": "Panfeng Xu"
        },
        {
            "affiliations": [],
            "name": "Jianwei Wei"
        },
        {
            "affiliations": [],
            "name": "Xiangbo Qi"
        }
    ],
    "id": "SP:dd4178feeba99accacc60d5f7576c87601175d83",
    "references": [
        {
            "authors": [
                "R.R. Yager",
                "Zadeh",
                "L.A. (eds"
            ],
            "title": "An Introduction to Fuzzy Logic Applications in Intelligent Systems Vol. 165 (Springer",
            "venue": "Science & Business Media,",
            "year": 2012
        },
        {
            "authors": [
                "J Berclaz"
            ],
            "title": "Multiple object tracking using k-shortest paths optimization",
            "venue": "IEEE Trans. Pattern Anal. Mach. Intell. 33(9),",
            "year": 2011
        },
        {
            "authors": [
                "Z Pang"
            ],
            "title": "Flow scheduling for conflict-free network updates in time-sensitive software-defined networks",
            "venue": "IEEE Trans. Ind. Inf",
            "year": 2020
        },
        {
            "authors": [
                "S. Misra",
                "G. Xue",
                "D. Yang"
            ],
            "title": "Polynomial-time approximations for multi-path routing with bandwidth and delay constraints[C]// IEEE INFOCOM",
            "venue": "IEEE 2009,",
            "year": 2009
        },
        {
            "authors": [
                "S. Xue",
                "W. Shi",
                "X. Xu"
            ],
            "title": "A heuristic scheduling algorithm based on PSO in the cloud computing environment",
            "venue": "Int. J. u- e-Serv. Sci. Technol",
            "year": 2016
        },
        {
            "authors": [
                "F. Pozo",
                "G. Rodriguez-Navas",
                "H. Hansson"
            ],
            "title": "Methods for large-scale time-triggered network scheduling",
            "venue": "Electronics 8,",
            "year": 2019
        },
        {
            "authors": [
                "G. Kov\u00e1sznai",
                "C. Bir\u00f3",
                "B. Erd\u00e9lyi"
            ],
            "title": "Puli\u2014A Problem-Specific OMT solver",
            "venue": "In Proc. 16th International Workshop on Satisfiability Modulo Theories,",
            "year": 2018
        },
        {
            "authors": [
                "R. Pigan",
                "M. Metter"
            ],
            "title": "Automating with PROFINET: Industrial Communication",
            "venue": "Based on Industrial Ethernet (Wiley,",
            "year": 2008
        },
        {
            "authors": [
                "W. Steiner",
                "G. Bauer",
                "B Hall"
            ],
            "title": "Time-triggered ethernet. In Time-Triggered Communication 209\u2013248",
            "year": 2018
        },
        {
            "authors": [
                "G Liang"
            ],
            "title": "An algorithm to build schedule table for schedule-based fieldbus to reduce communication jitter to its minimum",
            "venue": "ISA Trans",
            "year": 2021
        },
        {
            "authors": [
                "A.A. Syed",
                "J.S. Heidemann"
            ],
            "title": "Time synchronization for high latency acoustic networks. Infocom",
            "year": 2006
        },
        {
            "authors": [
                "N. Reusch",
                "L. Zhao",
                "Craciunas",
                "S. S"
            ],
            "title": "Window-based schedule synthesis for industrial IEEE 802.1",
            "venue": "Qbv TSN networks. In 2020 16th IEEE International Conference on Factory Communication Systems (WFCS)",
            "year": 2020
        },
        {
            "authors": [
                "N.G. Nayak",
                "F. D\u00fcrr",
                "K. Rothermel"
            ],
            "title": "Time-sensitive software-defined Network (TSSDN) for real-time applications",
            "venue": "In Proceedings of the 24th International Conference on Real-Time Networks and Systems,",
            "year": 2016
        },
        {
            "authors": [
                "N.G. Nayak",
                "F. Durr",
                "K. Rothermel"
            ],
            "title": "Incremental flow scheduling and routing in time-sensitive software-defined networks",
            "venue": "IEEE Trans. Ind. Inform",
            "year": 2018
        },
        {
            "authors": [
                "F Wang"
            ],
            "title": "6G-enabled short-term forecasting for large-scale traffic flow in massive IoT based on time-aware Locality-Sensitive Hashing",
            "venue": "IEEE Internet Things J. 8(7),",
            "year": 2020
        },
        {
            "authors": [
                "R. McGeer"
            ],
            "title": "A safe, efficient update protocol for OpenFlow networks",
            "venue": "In Proceedings of the First Workshop on Hot Topics in Software Defined Networks",
            "year": 2012
        },
        {
            "authors": [
                "F. Gu",
                "A. Askari",
                "El Ghaoui",
                "L. Fenchel lifted networks"
            ],
            "title": "A lagrange relaxation of neural network training",
            "venue": "In International Conference on Artificial Intelligence and Statistics. 3362\u20133371",
            "year": 2020
        },
        {
            "authors": [
                "A. Imai",
                "E. Nishimura",
                "J. Current"
            ],
            "title": "A Lagrangian relaxation-based heuristic for the vehicle routing with full container load",
            "venue": "Eur. J. Oper. Res",
            "year": 2007
        },
        {
            "authors": [
                "A BinSahaq"
            ],
            "title": "Bootstrapped LARAC algorithm for fast delay-sensitive QoS provisioning in SDN networks",
            "venue": "Int. J. Commun. Syst. 34,",
            "year": 2021
        },
        {
            "authors": [
                "S.T. Hsieh",
                "T.Y. Sun",
                "Liu",
                "C. C"
            ],
            "title": "Solving large scale global optimization using improved particle swarm optimizer",
            "venue": "IEEE Congress on Evolutionary Computation (IEEE World Congress on Computational Intelligence)",
            "year": 2008
        }
    ],
    "sections": [
        {
            "text": "1 Vol.:(0123456789) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nwww.nature.com/scientificreports"
        },
        {
            "heading": "An improved Lagrangian relaxation",
            "text": "algorithm based SDN framework for industrial internet hybrid service flow scheduling Yan Song1, Wenjing Luo1*, Panfeng Xu1, Jianwei Wei2 & Xiangbo Qi3\nThe Industrial Internet is the key for Industry 4.0, and network control in the industrial internet usually requires high reliability and low latency. The industrial internet ubiquitously connects all relevant Internet of things (IoT) sensing and actuating devices, allowing for monitoring and control of multiple industrial systems. Unfortunately, guaranteeing very low end-to-end wait times is particularly challenging because the transmissions must be articulated in time. In the industrial internet, there usually coexist multiple streams. The amount of data for controlling business flows is small, while other business flows (e.g., interactive business flows, sensing business flows) typically transmit large amounts of data across the network. These data flows are mainly processed in traditional switches using a queue-based \"store-and-forward\" mode for data exchange, consuming much bandwidth and filling up the network buffers. This causes delays in the control flow. In our research, we propose an Software Defined Networking (SDN) framework to reduce such delays and ensure real-time delivery of mixed service flows. The scheduling policy is performed through the northbound Application Programming Interface (API) of the SDN controller so that the dynamic network topology can be satisfied. We use the concept of edge and intermediate switches, where each switch port sends data at a specific time to avoid queuing intermediate switches. We also introduce an improved Langerian relaxation algorithm to select the best path to ensure low latency. Finally, the path rules are deployed to the switches in flow tables through the SDN controller. Our mathematical analysis and simulation evaluation demonstrates that the proposed scheme is more efficient.\nWith the emergence of industrial IoT, an increasing number of intelligent devices and infrastructures have formed intelligent systems, as shown in Fig.\u00a01. These systems generate time-sensitive data, e.g., system control data, fault monitoring data, etc., transmitted with strict time limits and reliability rules1. The original standard Ethernet IEEE802.32 satisfies the bandwidth requirements while maintaining scalability and cost-effectiveness but is not suitable for applications with low latency requirements. In the Industrial Internet, physical processes are controlled by several distributed sensors, actuators, and controllers. Smart Factory is a product of the Industrial Internet, and Cyber-Physical System (CPS) is the key to building SmartFactory.\nCyber-Physical Systems (CPS) depend on a computer network that sends sensor data and actuator instructions to the controller. In general, such CPSs are sensitive systems where network delays and jittering can affect the performance of control of the CPS. When two continuous packets are lost, machines on the production floor may malfunction. For example, Daystar, the third-generation industrial robot developed by Lenovo in 2021, is a CPS system. Daystar industrial robots have been able to work for the manufacture of aircraft, helping workers perform remote painting jobs with precision. First, the robot performs an aspatial scan of the entire workshop for perception. The data is built and rendered in real-time in 3D on an edge-side virtual machine and moved to the designated paint booth through containerized Simultaneous Localization And Mapping (SLAM) technology, navigation, and positioning. The robot\u2019s binocular stereo camera captures the workpiece and surroundings of the operator table in real-time to the edge server. However, this collaborative human\u2013machine interaction is now a bottleneck in the development of industrial robots, as it is necessary to ensure real-time binocular stereoscopic video data return from the robot side, with the camera view following the user\u2019s perspective in real-time, combined with augmented reality technology enabling users to immerse themselves in the dynamic\nOPEN\n1College of Physics, Liaoning University, Shenyang 110000, China. 2FieldIoT Co., Ltd, Shenyang 110000, China. 3Shenyang University, Shenyang 110000, China. *email: lwjwuhua1991@gmail.com\n2 Vol:.(1234567890) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nremote environment in real-time. It is also essential to ensure that the robot control algorithm is responsive and robust, this allows the robot in the remote domain to reproduce the action commands from the user with very low latency by taking advantage of the rapidity of transmitting control commands, allowing the robot to operate precisely in the remote environment. But current network speeds are not up to the real-time, low-latency response needed for collaborative robots.\nIn the field of industrial manufacturing, network interconnection is the foundation. Due to the complexity of industrial communication and automation, improving the delay performance of the network is essential for the future development of industrial communication and automation control. Scheduling algorithms are a crucial part of the network. Efficient scheduling algorithms are closely related to timely and reliable data transmission. The smart factory makes the transmission of mixed data streams a reality. The birth of Software Defined Networking (SDN) provides new ideas for scheduling data flows in multiple data streams. SDN is more suitable for centralized management and control than traditional networks. OpenFlow protocol implements the notion of network programmability, and network state, data flow, and control information can be transmitted in real-time through the standard interface of this protocol; this makes it possible to deploy SDN networks into industrial Internet environments.\nLet us enumerate the main contents of this article. (1) This paper introduces the scheduling problem (NPhard) in the Industrial Internet and introduces an Integer Linear Programming (ILP) model to calculate routing and transmission scheduling to select an optimal path. (2) This paper introduces an improved Lagrangian relaxation algorithm that converges faster than the traditional routing algorithm. The improved algorithm not only ensures the real-time performance of the network but also reduces other cost overheads of the network, such as bandwidth, jitter, and link utilization. In summary, the proposed algorithm overcomes the technical barriers in the field of low network latency, and it is important for the development of network deterministic delay technology.\nThe remainder of this paper is enumerated as follows. In \u201cRelated work\u201d, this paper present a review of existing studies. In \u201cNetwork architecture\u201d, this paper introduces our network architecture. \u201cScheduling and routing strategy\u201d presents our mathematical model of the network architecture. \u201cMathematical model\u201d describes the improved algorithm for the mathematical model. \u201cExperimental settings\u201d and \u201cExperimental results\u201d discuss the experiment and results."
        },
        {
            "heading": "Related work",
            "text": "This paper focuses only on the low-latency problem of scheduling mixed service flows in the industrial Internet. Many scholars have investigated the scheduling of flows. Berclaz et\u00a0al. proposed the well-known K Shortest Paths (KSP) algorithm3, which uses the traditional Shortest Path (SP) algorithm to find the shortest path and then finds the subsequent shortest paths based on the initial shortest path. KSP is a static scheduling algorithm; although it performs well in sparse network topologies, the number of traversed paths needs to be increased in dense topologies to achieve optimality. The traditional optimal shortest path algorithm is often unusable due to its high computational effort and is unsuitable for real-time operation. A novel stream scheduling generation\nFigure\u00a01. Industry 4.0 architecture.\n3 Vol.:(0123456789) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nmodel is proposed by Zaiyu Pang et\u00a0al.4 The model is designed with two algorithms to suit different application scenarios: the offline algorithm has better schedulability, while the online algorithm consumes less time and has slightly reduced schedulability. Many heuristic search strategies have been proposed to improve the computational efficiency of shortest path search. Misra et\u00a0al.5 proposed a polynomial-time heuristic algorithm, but it only considered the maximum throughput under the bandwidth constraint and ignored the delay and packet loss rate. We found a heuristic algorithm based on Particle Swarm Optimization (PSO) to solve the scheduling problem in Xue et\u00a0al.6. Nevertheless, the results obtained are not entirely accurate due to the rapid convergence rate, which can lead to an optimal local solution. Even the results do not reflect the actual performance of the PSO. For large-scale scheduling, Pozo et\u00a0al.7 proposed a segmentation method that decomposes the scheduling problem into smaller problems that can be solved independently. While maintaining the quality of the schedule reduces the running time of the scheduler and allows scheduling larger networks in a shorter period. The work in8 relaxes the scheduling rules, divides the Satisfiability Modulo Theories (SMT) problem into multiple Optimization Mode Theory (OMT) problems, and reduces the solver runtime to an acceptable level to eliminate scheduling conflicts. The scheduling is an NP-hard problem. To solve the NP-hard problem, some researchers used the traditional Lagrange relaxation algorithm9 to transform the relaxation function into a new heuristic function. After analyzing and discussing Lagrange multipliers, we propose multipliers different from the traditional Lagrange relaxation algorithm in this paper.\nTo guarantee low latency in the Industrial Internet, the network is traditionally organized by a dedicated Fieldbus network. For this purpose, several real-time Ethernet networks have been proposed, such as ProfiNET10 and TT-Ethernet11. GengLiang et\u00a0al.12 used a fieldbus scheduling table to construct an algorithm that minimizes communication jitter. We can assume that the propagation delay, processing delay, and transmission delay in the network are deterministic. The propagation delay, processing delay, and transmission delay in the network are deterministic13. Therefore, Niklas Reusch et\u00a0al.14 propose a novel and more flexible window-based scheduling algorithm using a time-aware shaper (TAS) that guarantees bounded delays by integrating worst-case delay analysis. These networks architectures limit the non-deterministic queuing delay. For this purpose, Nayak et\u00a0al.15 used a Software Defined Network (SDN) architecture and received a series of predefined time-triggered flows. They first proposed an Integer Linear Programming (ILP) formulation to address the problem of combining routing and time-triggered flows. Subsequently, the same authors proposed an increasing flow scheduling and routing algorithm in their paper16. This algorithm dynamically adds or removes flows by scheduling them one at a time. The authors propose the concept of a basic period, which is then divided into multiple time slots, each of which is large enough to traverse the entire network with Maximum Transmission Unit (MTU)-sized packets. And this results in too large a time slot being reserved for each stream, resulting in a large amount of wasted bandwidth. The network topology is large enough to introduce time delays with time-triggered flows traversing the entire network. Traditional switches mainly use queue-based \"store-and-forward\" mode for data exchange processing, where mixed service flows are scheduled in the switch\u2019s \"input queue\" to different forwarding queues according to priority and then forwarded to the output queue. Inspired by Nayak\u2019s scheduling of time slots for flows to avoid network queuing, we propose an SDN network framework to minimize the possibility of queuing. As shown in Fig.\u00a02, the edge switch collects information from end devices and sends it to the SDN controller, which then schedules time slots by the time-sensitivity of different flows. So it can segregate different types of traffic in time and space, thus avoiding queuing problems at the edge switches. It is also inspired by Fan Wang et\u00a0al.17 who proposed TracForetime-LSH to perform short-term traffic flow prediction using traffic data detected from sensors.We design a low-latency routing algorithm for messaging between intermediate switch links and also for port data flow prediction to minimize queuing in the intermediate switches. This algorithm effectively eliminates packet loss due to queue overflow while maximizing the number of flows in the network and reducing the end-to-end delay of each flow."
        },
        {
            "heading": "Network architecture",
            "text": "Our network model is based on the software-defined networking (SDN) framework, as shown in Fig.\u00a02. SDN is a new network architecture with the separation of the control plane and the data plane. The data plane is responsible for forwarding packets and consists of SDN switches. The control plane accounts for configuring the data plane, for example, calculating routes through related routing algorithms and issuing flow tables to switches. The SDN controller transmits packets to the switches via a southbound interface with OpenFlow (a new protocol in the network)18. The SDN controller has the topology and global view of the switch, which helps realize the network control logic (e.g., routing and scheduling in this paper). The data plane of our network architecture consists of switches and end systems (e.g., PLCs, various sensors, and actuators) that support the OpenFlow protocol. The edge SDN switches set priority queues. Based on time sensitivity and latency requirements, the controller divides each flow into specific time slots by the information collected from the flow. The edge switch transmits data to the intermediate switch according to the time slot. The SDN controller calculates the route for the streams from the intermediate switch, selects the best path, and sends down the flow table."
        },
        {
            "heading": "Scheduling and routing strategy",
            "text": "The focus of this paper is on routing and scheduling mixed service flows. Our goal is to realize deterministic network behavior and reduce latency in the network and jitter to support real-time communication. Network delays include four kinds of delays, propagation delay, processing delay, transmission delay, and queuing delay. The propagation latency is bounded, which is deterministic and very short, usually in nanosecond units. The processing delay of a commercial Ethernet switch is in the range of less than or equal to microseconds and is approximately constant for a given matched tuple11. Therefore, the processing delay can also be regarded as a deterministic delay. For constant traffic, usually, the transmission delay in the network is bounded and definite.\n4 Vol:.(1234567890) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nWhen data packets from multiple input ports are transmitted on one output port simultaneously, queuing occurs in the switch. If no two input ports compete for one output port, the source host will only initiate transmission when the traffic passes through a specific path on the network. This situation can be eliminated. Our proposed scheduling algorithm uses the controller\u2019s global information about the network topology and the use of the southbound interface to collect information about various types of flows to define the appropriate transmission scheduling and routing. For example, in the topology shown in Fig.\u00a03, different time slots are assigned to each flow Fi, and an optimal path is computed for each flow. In this way, the queuing phenomenon on the bottleneck link will be reduced (from switch S1 to S2) as much as possible. This paper reduces the data transmission delay between end devices, switches, and network controllers by optimizing the scheduling algorithm."
        },
        {
            "heading": "Mathematical model",
            "text": "Model parameters. We proposed the following mathematical model for the network. In this approach, the scheduler can route flows to any other available path. The inputs are the topology of the network and the start and end positions of a series of flows that need to be scheduled. The variables are the flows that need to be scheduled. The goal of optimization is to maximize the number of flows to be scheduled and to minimize the end-to-end delay of the network.\nWe propose a directed network topology diagram G \u2261 (N ,E) , N which is a set of nodes, E \u2261 {(na, nb)|na, nb \u2208 N} , which represents a link of the network. denotes a path of a flow P,E \u2208 P . In addition, N \u2261 (S \u222a C) , S and C represent switches and end devices, respectively. A flow is represented as Fi \u2261 (si , di ,Di) , where si , di \u2208 N . Here, si is the source of the stream and di is the destination of the stream. Di denotes the delay at which the stream is specified. We define f (i,m) \u2208 F(i,m) , where m \u2208 (na, nb).\nThe model requires the following inputs:\nFigure\u00a02. The architecture of industrial SDN.\nFigure\u00a03. The two-switch-and-six-host topology.\n5 Vol.:(0123456789) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\n\u2022 The topology of network,G \u2261 (N ,E). \u2022 Characteristics of a series of streams to be scheduled Fi \u2261 (si , di ,Di).\nThe decision variable is as shown below:\n\u2022 We use decision variables to represent the mapping between flows and network links. f (i,m) = 1 , if the stream fi passes through the link m , 0 otherwise.\nObjective function. We formulate the objective function to maximize the number of schedulable flows while guaranteeing low latency. Therefore, we define the following:\nwhere d(i,m) is the time delay of the stream fi on the link m.\nwhere t(na, nb) denotes the transmission delay at the top end of the link, Q(na, nb) denotes the queuing delay na on the link m \u2208 (na, nb) , T(na, nb) denotes the average value of accepted packets, and B(na, nb) denotes the link bandwidth."
        },
        {
            "heading": "Constraints.",
            "text": "\u2022 We assume a path i of the flow, which starts from the source host and ends at the destination host. The source host can only have one outbound link without an inbound link, and the destination host is the opposite. For other nodes on the path, the number of inbound links equals the number of outbound links.\n\u2022 To avoid conflicts between different streams on the same link, no more than one stream is allowed on any one link.\n\u2022 To ensure end-to-end deterministic latency, the total latency of each flow over all links cannot exceed the specified latency.\nMany heuristic algorithms can be used when solving integer programming model problems. However, they are complex to implement and depend on the appropriate selection of parameter variance factors. Moreover, complex algorithms consume controller resources. The Lagrangian Relaxation algorithm (LR)19 can reduce the problem to an unconstrained linear programming problem. Some studies have found that heuristic algorithms about Lagrangian Relaxation techniques are attractive20. The basic idea is first to construct a weight and then use the Dijkstra algorithm to find the shortest path. By evaluating a large number of Lagrangian relaxation algorithms for solving delay-constrained problems, we found that the algorithms based on Lagrangian relaxation have low time complexity and a higher probability of achieving feasible or optimal solutions. However, the prime values of Lagrangian multipliers are critical to LR because they may make it difficult for LR to reach the dual optimum or cause a longer time to converge. The computation time of the Lagrangian relaxation method is a serious challenge when the problem size is large. The efficiency of the Lagrangian multiplier update determines the number of subproblems be solved. Traditionally, the Lagrange multipliers are updated using a subgradient-based approach. However, deriving the mathematical formula in the algorithm is very complicated. In the subgradient method, if the step size of the update iteration is not selected properly, it will often increase the number of iterations of the algorithm. The methods for updating the Lagrangian multipliers are finite, and the traditional Lagrangian relaxation algorithm may get caught in locally optimal solutions. BinSahaq et\u00a0al.21 proposed a delay-constrained least-cost Quality of Service (QoS) routing approach to finding the optimal Lagrangian multipliers using the Lagrange Relaxation-based Aggregated Cost (LARAC) algorithm. This method operates in polynomial time and produces a theoretical lower bound. Its average path cost is smaller, but it runs slower. They only consider the routing computation task and do not address how to collect information about the network state and available network resources. For this reason, we propose an improved Lagrangian relaxation method that uses a particle swarm algorithm (PSO) to update the Lagrangian multipliers. The reason for using PSO is that it is simple and easy to implement22 and does not increase the complexity of the original algorithm. And this is faster, more accurate, and easier to converge than the sub-gradient method. Kamboj et\u00a0al. have also proposed an algorithm to solve the Unit Commitment Problem (UCP) in the power industry23. However, unlike their approach, our\n(1)Min \u2211\nm\u2208P\n\u2211\ni\u2208Fi\nf (i,m)\u00d7 d(i,m)\n(2)d(i,m) = [ t(na, nb)+ Q ( na,nb )] \u00d7 T(na, nb)\nB(na, nb) ,\n(3) \u2211\nm\u2208P\nf (i,m)\u2212 \u2211\nm\u2208P\nf (m, i) =\n{\n\u22121, i = di\n1, i = si\n0, otherwise\n(4) \u2211 f (i,m) \u2264 1\n(5) \u2211 m\u2208P d(i,m)\u00d7 f (i,m) \u2264 Di.\n6 Vol:.(1234567890) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nproposed algorithm updates only one Lagrangian multiplier. Our algorithm is more concise and efficient in solving the scheduling problem.\nImproved Lagrangian relaxation algorithm. We improve the Lagrangian relaxation algorithm with a particle swarm (PSO-LR):\nWe use the Lagrangian relaxation algorithm to solve the problem described above. The original model is shown below.\nIn the LR method, Lagrange multipliers are used to form the penalty terms. After introducing the Lagrangian relaxation operator, the above model can be rewritten as:\nThe Lagrangian dyadic model can be expressed as follows.\nTo maximize the Lagrangian function, the adjustment of the Lagrangian multiplier must be carefully performed. Most researchers have used the subgradient method to accomplish this task. However, the subgradient method tends to increase the number of iterations. Thus, we use the particle swarm optimization technique to tune the Lagrangian operator (we can also say multipler) in this article, the PSO algorithm is well adapted and simple in practical applications and enhances the performance of the Lagrangian relaxation method. The following is the algorithm flow.\nStep 1: Initialize the total number of particles t (Lagrange operator). Each particle is randomly generated in the allowed range. Step 2: Initialize other parameters we needed, such as population size, inertia weights, particle acceleration\nconstants, compression factors, pairwise gaps, etc. Step 3: Use ZLR( ) to calculate the evaluation value for t each individual in the aggregate.\nStep 4: Compare the value of each individual with its pbest. We denoted the best evaluation value in the pbest as gbest.\nStep 5: Alter the membership velocity n for each \u03bb according to the PSO velocity update formula. Step 6: Update each \u03bb position. Step 7: If each evaluation value brings better results than the previous pbest, set the latter to pbest. If the pbest\nis better than gbest, set the value to gbest. Step 8: We use the idea of dynamic programming to minimize the Lagrangian function for. t. Step 9: Use to ZLD calculate the value of the pairwise function;\nStep 10: Use f (i, j)t to calculate the original value:\nStep 11: The difference between the original problem and the pairwise problem (pairwise gap \u03b5) is used as the termination criterion. The pairwise gap can be calculated by the following equation.\n(6)Zlp = min \u2211\nm\u2208p\n\u2211\ni\u2208Fi\nf (i,m)\u00d7 d(i,m),\n(7)s.t. \u2211 f (i,m) \u2264 1,\n(8) \u2211\nm\u2208P\nf (i,m)\u2212 \u2211\nm\u2208P\nf (m, i) =\n{\n\u22121, i = di\n1, i = si\n0, other,\n(9) \u2211 m\u2208P d(i,m)\u00d7 f (i,m) \u2264 Di.\n(10)\nZLR( ) = min \u2211\nm\u2208P\n\u2211\ni\u2208Fi\nf (i,m)\u00d7 d(i,m)\u2212 \u2211\nm\u2208p\n\u2211\ni\u2208Fi\nd(i,m)\u00d7 f (i,m)\u2212 Di\n= min \u2211\ni,m\u2208E\n(1+ )d(i,m)\u00d7 f (i,m)\u2212 Di.\n(11)ZLD = MaxZLR( ).\n(12)ZLR( t) = min \u2211\nm\u2208p\n\u2211\ni\u2208Fi\n(1+ t)d(i,m)t \u00d7 f (i,m)t \u2212 tDi.\n(13)ZLD = MaxZLR( t).\n(14)J = \u2211\ni,m\u2208E\nd(i,m)t \u00d7 f (i,m)t .\n(15) J \u2212 ZLD\nJ .\n7 Vol.:(0123456789) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nStep 12: If the number of iterations reaches the maximum value, or the dual gap is less than the established threshold, go to step 13, if not, then go to step 3.\nStep 13: The individual generating the latest information has the shortest delay on each link while scheduling the most streams.\nThe general flow of the algorithm can be described in Fig.\u00a04. The algorithm pseudocode is as follows.\nThe advantage of using particle swarms to update the Lagrangian multiplier is that the PSO algorithm replaces the subgradient method for calculating the Lagrangian multiplier \u03bb, simplifying the theoretical analysis and solution process. It is noteworthy that the presented algorithm has several feasible solutions superior to the original Lagrangian relaxation algorithm. In updating the Lagrangian multiplier \u03bb using PSO, there are many other particles in addition to the optimal one. This provides more alternative models for solving multipath routing problems."
        },
        {
            "heading": "Experimental settings",
            "text": "Because of the limitations of the conditions, we configured the switch using Open vSwitch (OVS) and used Ryu as our SDN controller for the convenience of the experiment. We simulated PLCs, signal generators, and actuators with a host computer. We evaluated the algorithm performance using Mininet, an open source platform\nFigure\u00a04. Algorithm flow chart.\n8 Vol:.(1234567890) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nthat uses virtualization on Linux to simulate real-world SDN. Mininet is capable of simulating various types of network components. For instance: computers, switches (layer 2), routers (layer 3), links, and other network elements. For each experiment, we use Mininet to generate topology randomly. The packets from the real-time stream are queued into separate queues in each edge switch. If the flow from a host exceeds the maximum rate set by each queue, we use ingress rules to limit traffic before it enters the switch.\nNetperf is used to create UDP traffic between the source and destination nodes for the stream Fi. Once we have configured the flow rules and queues, the controller assigns a time slot to each flow based on the information collected about the flow. It is sent to the edge switch by downlinking the flow table. The path rules for the streams are sent to the intermediate switch by flow table.\nTo evaluate the effectiveness of the mixed flow (e.g., real-time and non-real-time), all nonreal-time streams use separate queues and are served in First In-First Out (FIFO). Since many commercial switches support up to 8 queues per port, in our experiments, we limited the number of real-time streams to 7. We experimented with a single port where each of the seven real-time streams used a separate queue, while the remaining eighth queue was used for non-real-time streams. Our stream rules segregate the two types of streams.\nScheduling input: We take as input the network topology, flow information (including period, route, packet size, deadline), and the maximum time slot window. Scheduling output: Stream sends time per node, arrival time per node in the path the stream travels, time of opening and closing of time slots at each switch egress port, end-to-end delay per stream. Our program and algorithms are programmed in the Ubuntu environment using Python, and the program is deployed to the SDN controller. And the data processing results are processed using MATLAB. For convenience; all links are communicated at 1 Gbit/s.\nWe evaluate the average end-to-end delay for all flows in each test case, as well as the worst-case end-to-end delay, which is the maximum end-to-end delay in this test case, and the link utilization. We compare the proposed algorithm with the original Lagrangian relaxation algorithm, as well as with Dijkstra\u2019s algorithm, which is commonly used for traditional routing."
        },
        {
            "heading": "Experimental results",
            "text": "To evaluate the performance of our proposed algorithm, we compared it with the Lagrangian relaxation algorithm (LR), Dijkstra\u2019s algorithm.\nAverage delay. The average delay indicates the time needed to transmit data from the source node to the target node. Figure\u00a05 shows the average time delay for different algorithms, and we observe that the average delay increases with the acceleration of data. The average latency varies for different data volumes. The average latency of the three algorithms does not differ much for data volumes up to 100\u00a0Mb. When the data volume is very large, the average delay of PSO-LR is significantly lower than that of the other two algorithms.\nThroughput. Throughput indicates the amount of data successfully received by the destination in the required time. Figure\u00a0 6 shows the throughput using different algorithms for different amounts of data. This shows that there is a slight variation in throughput at different data load levels. We observe that PSO-LR has\nFigure\u00a05. Average delay of PSO-LR, LR, and Dijkstra with different data volumes.\n9 Vol.:(0123456789) Scientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nthe highest throughputs, and thus the most efficient data forwarding path is chosen. The average throughput of Dijkstra, LR, and PSO-LR are 0.15, 0.35, and 0.53\u00a0Mb/s, respectively. Namely, PSO-LR throughput obtains the maximum value for different data volumes.\nLatency and loss rate. Figure\u00a07a shows the total latency incurred by our proposed algorithm for traffic demands ranging from 10 to 60. The higher the number of service flows, the longer the transmission delay is required, which leads to a longer total delay. When the number of flows exceeds 30, our proposed algorithm generates significantly less delay than the two outside algorithms. Figure\u00a07b shows that as the number of flows increases, the packet loss rate also increases. This is because different flows can conflict in the path, which can lead to packet loss. Overall, the packet loss rate can be kept within 0.1%. After the data streams exceed 20, our proposed algorithm significantly reduces the packet loss rate, thus scheduling more streams.\nTotal latency. Figure\u00a08 reflects the total latency of real-time streams (RT) and non-real-time streams (NRT) for different numbers of switches. Real-time streams require higher latency and lower end-to-end latency. Using our proposed algorithm, it can be seen that very low latency requirements can be met in medium to large scale networks, even for nonreal-time streams. This is sufficient to meet the latency requirements of the Industrial Internet."
        },
        {
            "heading": "Conclusions and future works",
            "text": "This paper proposes the SDN scheduling framework and the improved Lagrangian relaxation algorithm. The proposed framework can reduce traffic queuing, ensure low delay in traffic transmission, and avoid data retransmission or packet loss due to conflicts in the transmission path of a certain number of scaled flows. Compared with traditional scheduling algorithms, our proposed algorithm can decrease the end-to-end delay by nearly 20% while transmitting more data streams under the condition of consistent network topology. Hybrid flow scheduling in networks is an NP-hard problem that has attracted much attention in the past few years. Here we modify the Lagrangian relaxation algorithm to satisfy the deterministic latency of the transmission network, which embeds the particle swarm optimization algorithm to obtain better performance. This study may have some possible limitations: (1) This study is mainly based on the same network domain. In the real scenario, traffic may be transmitted between different subnets. Scheduling flows between different network domains using SDN is the next topic we will investigate. (2) The experiments in this study are based on computer simulation so that the interference present in the real scenario is ignored. Due to the limited experimental environment, we can extend our work by deploying SDN networks to natural industrial Internet environments. Transport networks can profit from SDN innovations to support and deliver services of high quality.\nFigure\u00a06. Throughput of data streams.\n10\nVol:.(1234567890)\nScientific Reports | (2022) 12:3861 | https://doi.org/10.1038/s41598-022-07125-3\nReceived: 19 October 2021; Accepted: 9 February 2022"
        },
        {
            "heading": "Acknowledgements",
            "text": "This work is financially supported by the National Key R&D Program of China, Project Number 2018YFB1700103. Project of Industrial software definition network service platform supporting new network architecture, Industrial Internet innovation and development project 2019, Ministry of industry and information technology of the People\u2019s Republic of China."
        },
        {
            "heading": "Author contributions",
            "text": "Y.S. is responsible for theoretical guidance and provided project support.W.L., X.X. prepared the main manuscript text.P.X. and J.W. provide experimental guidance.X.Q. drew the diagram."
        },
        {
            "heading": "Competing interests",
            "text": "The authors declare no competing interests."
        },
        {
            "heading": "Additional information",
            "text": "Supplementary Information The online version contains supplementary material available at https:// doi. org/ 10. 1038/ s41598- 022- 07125-3.\nCorrespondence and requests for materials should be addressed to W.L.\nReprints and permissions information is available at www.nature.com/reprints.\nPublisher\u2019s note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.\nOpen Access This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or\nformat, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article\u2019s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article\u2019s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http:// creat iveco mmons. org/ licen ses/ by/4. 0/.\n\u00a9 The Author(s) 2022"
        }
    ],
    "title": "An improved Lagrangian relaxation algorithm based SDN framework for industrial internet hybrid service flow scheduling",
    "year": 2022
}