{
    "abstractText": "We study decision problems of the form: given a regular or linear contextfree language L, is there a word of a given fixed form in L, where given fixed forms are based on word operations copy, marked copy, shuffle and their combinations.",
    "authors": [
        {
            "affiliations": [],
            "name": "Vesa Halava"
        },
        {
            "affiliations": [],
            "name": "Tero Harju"
        },
        {
            "affiliations": [],
            "name": "Dirk Nowotka"
        },
        {
            "affiliations": [],
            "name": "Esa Sahla"
        }
    ],
    "id": "SP:3e7b30f2de519e4a08bd7957a087299eca56094f",
    "references": [
        {
            "authors": [
                "T. Anderson",
                "J. Loftus",
                "N. Rampersad",
                "N. Santean",
                "J. Shallit"
            ],
            "title": "Detecting palindromes",
            "venue": "patterns and borders in regular languages. Inf. Comput., 207(11):1096\u20131118",
            "year": 2009
        },
        {
            "authors": [
                "F. Biegler",
                "I. McQuillan"
            ],
            "title": "On comparing deterministic finite automata and the shuffle of words",
            "venue": "Implementation and application of automata. 19th international conference, CIAA 2014, Giessen, Germany, July 30 \u2013 August 2, 2014. Proceedings, pages 98\u2013109. Berlin: Springer",
            "year": 2014
        },
        {
            "authors": [
                "S. Buss",
                "M. Soltys"
            ],
            "title": "Unshuffling a square is NP-hard",
            "venue": "J. Comput. Syst. Sci., 80(4):766\u2013776",
            "year": 2014
        },
        {
            "authors": [
                "A. Ehrenfeucht",
                "J. Karhum\u00e4ki",
                "G. Rozenberg"
            ],
            "title": "The (generalized) Post correspondence problem with lists consisting of two words is decidable",
            "venue": "Theoret. Comput. Sci., 21(2):119\u2013144",
            "year": 1982
        },
        {
            "authors": [
                "J. Engelfriet",
                "G. Rozenberg"
            ],
            "title": "Fixed point languages",
            "venue": "equality languages, and representation of recursively enumerable languages. J. Assoc. Comput. Mach., 27:499\u2013518",
            "year": 1980
        },
        {
            "authors": [
                "S.A. Greibach"
            ],
            "title": "The unsolvability of the recognition of linear context-free languages",
            "venue": "J. Assoc. Comput. Mach., 13:582\u2013587",
            "year": 1966
        },
        {
            "authors": [
                "V. Halava",
                "T. Harju",
                "M. Hirvensalo"
            ],
            "title": "Binary (generalized) Post correspondence problem",
            "venue": "Theoret. Comput. Sci., 276(1-2):183\u2013204",
            "year": 2002
        },
        {
            "authors": [
                "V. Halava",
                "T. Harju",
                "E. Sahla"
            ],
            "title": "On shuffling a word with its letter-to-letter substitution",
            "venue": "Fundamenta Informaticae, 175:201\u2013206",
            "year": 2020
        },
        {
            "authors": [
                "D. Henshall",
                "N. Rampersad",
                "J. Shallit"
            ],
            "title": "Shuffling and unshuffling",
            "venue": "Bulletin of the EATCS, (107):131\u2013142",
            "year": 2012
        },
        {
            "authors": [
                "M. Kutrib",
                "A. Malcher",
                "M. Wendlandt"
            ],
            "title": "Queue Automata: Foundations and Developments",
            "venue": "pages 385\u2013431. Springer International Publishing",
            "year": 2018
        },
        {
            "authors": [
                "G. Lischke"
            ],
            "title": "Primitive words and roots of words",
            "venue": "Acta Univ. Sapientiae, Inform., 3(1):5\u201334",
            "year": 2011
        },
        {
            "authors": [
                "T. Neary"
            ],
            "title": "Undecidability in binary tag systems and the Post correspondence problem for five pairs of words",
            "venue": "32nd International Symposium on Theoretical Aspects of Computer Science, volume 30 of LIPIcs. Leibniz Int. Proc. Inform., pages 649\u2013661. Schloss Dagstuhl. Leibniz-Zent. Inform., Wadern",
            "year": 2015
        },
        {
            "authors": [
                "E.L. Post"
            ],
            "title": "A variant of a recursively unsolvable problem",
            "venue": "Bull. Amer. Math. Soc., 52:264\u2013268",
            "year": 1946
        },
        {
            "authors": [
                "M.O. Rabin",
                "D. Scott"
            ],
            "title": "Finite automata and their decision problems",
            "venue": "IBM J. Res. Dev., 3(2):114\u2013125",
            "year": 1959
        },
        {
            "authors": [
                "N. Rampersad",
                "J. Shallit"
            ],
            "title": "Detecting patterns in finite regular and contextfree languages",
            "venue": "Inf. Process. Lett., 110(3):108\u2013112",
            "year": 2010
        },
        {
            "authors": [
                "R. Rizzi",
                "S. Vialette"
            ],
            "title": "On recognizing words that are squares for the shuffle product",
            "venue": "Computer science \u2013 theory and applications. 8th international computer science symposium in Russia, CSR 2013, Ekaterinburg, Russia, June 25\u201329, 2013. Proceedings, pages 235\u2013245. Berlin: Springer",
            "year": 2013
        },
        {
            "authors": [
                "A. Salomaa"
            ],
            "title": "Formal Languages",
            "venue": "Academic Press, New York",
            "year": 1973
        }
    ],
    "sections": [
        {
            "text": "ar X\niv :2\n30 2.\n06 24\n8v 3\nWe study decision problems of the form: given a regular or linear contextfree language L, is there a word of a given fixed form in L, where given fixed forms are based on word operations copy, marked copy, shuffle and their combinations.\nKeywords: Regular language, linear context-free language, shuffle, marked copy, reverse copy, membership problem"
        },
        {
            "heading": "1 Introduction",
            "text": "We consider classic problems on decidability issues of formal languages. We shall fill in gaps that have remained for elementary operations copy and shuffle and their variants on words and languages. The presented results, as well as the known results on the topic, are presented in the table affixed in the second page leaving two open cases for further studies.\nWe investigate the decidability status of several special membership problems for regular and linear context-free (linear CF) languages where it is asked whether or not the language contains a word of a certain form. Let L be a given language. The operations and the question are the following:\n1. copy, i.e., does there exist a square ww \u2208 L for some word w? *Supported by emmy.network foundation under the aegis of the Fondation de Luxembourg.\n2. reversed copy, i.e., does there exist a word wwr \u2208 L for some word w, where wr denotes the reversal of the word w?\n3. marked copy, i.e., does there exist a word ww \u2208 L for some word w, where w denotes a marked copy of the word w? (For a definition of a marked copy, see page 3)\n4. self-shuffle, i.e., does there exist a word u \u2208 w w with u \u2208 L for some word w, where denotes the shuffle operations of two words?\n5. shuffle with reverse, i.e., does there exist a word u \u2208 w wr with u \u2208 L for some word w?\n6. marked shuffle, i.e., does there exist a word u \u2208 w w\u0304 with u \u2208 L for some word w?\nThe decidability statuses of these questions are listed in the following table, where D (resp. U) means that the problem is decidable (resp. undecidable) and the question mark denotes problems that remain unsettled. After the symbols D and U we give a reference for the proof in the text. Here Reg stands for the regular languages and Lin for the linear context-free languages.\nReg Lin\nww \u2208 L D (Cor. 1) U (Thm. 14) wwr \u2208 L D (Cor. 2) U (Thm. 22) ww \u2208 L D (Thm. 8) U (Thm. 15) w w \u2229 L 6= \u2205 ? U (Thm. 19) w wr \u2229 L 6= \u2205 ? U (Thm. 21) w w \u2229 L 6= \u2205 U (Thm. 12) U (Thm. 23)\nWe also study decidability of some special inclusion problems related to the above problems. For example, we investigate the problem of whether a given regular, linear context-free or context-free language is closed under taking squares, and also, the problem whether the set all squares generated by another given language is a subset of a given language.\nThere are naturally many related language operations to be investigated; see Rampersad and Shallit [16], where among other results it was shown that it is undecidable whether a context-free grammar generates a square. We deal with this problem in Theorem 14 for linear CF-languages."
        },
        {
            "heading": "2 Preliminaries",
            "text": "Let \u03a3 be a finite alphabet. A word over \u03a3 is a finite sequence of symbols of \u03a3. The empty word is denoted by \u03b5. The length of a word w = a1 \u00b7 \u00b7 \u00b7 ak, where ai \u2208 \u03a3 for all i = 1, . . . , k, is k and it is denoted by |w|. The set of all words over \u03a3 is denoted by \u03a3\u2217 and the set of all non-empty words by \u03a3+.\nFor two words u, v \u2208 \u03a3\u2217, their concatenation is u \u00b7 v = uv. A factorization of a word w \u2208 \u03a3\u2217 is a finite sequence u1, . . . , uk, where ui \u2208 \u03a3\u2217 for all i, such that w = u1 \u00b7 \u00b7 \u00b7 uk. A word u is a prefix of a word w if w = uv for some word v.\nThe powers of words are defined inductively: w0 = \u03b5 and for all n \u2208 N, wn+1 = wn \u00b7 w. We say that a word w is primitive, if for all u \u2208 \u03a3\u2217, w = un implies that n = 1.\nLet wr denote the reversal (or the mirror image) of w, that is, wr = an \u00b7 \u00b7 \u00b7 a1 for w = a1 \u00b7 \u00b7 \u00b7 an, where ai \u2208 \u03a3 for all i.\nWith an alphabet \u03a3 we accompany a marked copy alphabet \u03a3\u0304 = {a\u0304 | a \u2208 \u03a3} , where \u03a3 \u2229 \u03a3\u0304 = \u2205. For a word w = a1a2 \u00b7 \u00b7 \u00b7 an, let w = a\u03041a\u03042 \u00b7 \u00b7 \u00b7 a\u0304n be the marked copy of w.\nA subset of \u03a3\u2217 is called language. Denote by Lc the complement of L, that is, Lc = \u03a3\u2217 \\ L.\nWe assume that the reader is familiar with the basic notions of language theory; see e.g., Salomaa [18] for definitions of regular languages, finite automata, context-free (CF) languages, pushdown automata, context-sensitive languages and pumping lemmas for regular and context-free languages.\nWe briefly recall a few basic facts. First of all, recall that a language L is a linear CF-language if it is accepted by a pushdown automaton (PDA) that makes at most one reversal (from increasing to decreasing mode) on its stack. Equivalently, each linear CF-language is generated by a linear context-free grammar, where the productions have at most one non-terminal on the right hand side.\nExample 1. The language of all palindromes of even length,\nE = {wwr | w \u2208 \u03a3\u2217},\nis a linear CF-language. Indeed, E can be accepted by a non-deterministic linear PDA which first reads symbols onto the stack until it (non-deterministically) decides to check by popping symbols whether the rest of the input word agrees with the stack content.\nWe use the Pumping lemma for regular languages to show that certain lan-\nguages are not regular.\nLemma 1. For a regular language L, there exists a natural number p \u2265 1 such that, if w \u2208 L is of length |w| \u2265 p, then it has a factorization w = xyz with |y| \u2265 1 and |xy| \u2264 p, such that xynz \u2208 L for all n \u2208 N.\nThe Pumping lemma for CF-languages has two simulaneous pumps.\nLemma 2. For a CF-language L, there exists a natural number p \u2265 1 such that, if w \u2208 L has length |w| \u2265 p, then it has a factorization w = uvwxy with |vx| \u2265 1 and |vwx| \u2264 p, such that uvnwxny \u2208 L for all n \u2208 N.\nNext we define two special languages. Firstly, let P \u2286 \u03a3\u2217 be a language. The copy language of P is defined as the set of all second powers of words of P :\nCP = {ww | w \u2208 P}.\nIt is well-known that for a regular language P , the copy language CP is contextsensitive, but not context-free (see, for example, [11]). We state the following open problem concerning the copy languages. A one-counter automaton is a pushdown automaton, with a single stack letter, which is able to check the emptiness of the stack.\nProblem 1. Is the complement of C\u03a3\u2217 a one-counter language?\nConsidering the marked copy, the problem becomes easier.\nLemma 3. For a regular language P , the complement of the marked copy language {ww | w \u2208 P} is a one-counter language.\nProof. Sketch of the proof: Assume P is accepted by a finite automaton A, that is, P = L(A). Let A\u0304 be the copied version of A, i.e., where the letters in the transitions are changed to marked letters.\nWe construct a one reversal nondeterministic PDA B for A and its marked copy automaton A\u0304 as follows:\n1. B simulates A and reads symbols from \u03a3 and adds one to the counter to count the length of the prefix read so far.\n2. At one point B remembers the symbol a \u2208 \u03a3 under its reading head and stops writing to the stack. B continues by reading the rest of the non-marked part w.\n3. If w /\u2208 P , the input is accepted.\n4. Otherwise B simulates A\u0304 for the marked part of the input and decreases the counter on each step.\n5. When the stack is empty and the input is not read fully, B checks if the current symbol of the input is equal to a. If not, then the input is accepted.\nSecondly, we define the shuffle (language) of two words u, v \u2208 \u03a3\u2217 as follows:\nu v ={u1v1 \u00b7 \u00b7 \u00b7 unvn | ui, vi \u2208 \u03a3\u2217 for all i = 1, . . . , n and u = u1u2 \u00b7 \u00b7 \u00b7 un, v = v1v2 \u00b7 \u00b7 \u00b7 vn}.\nIn the above factorizations of u and v we allow that some of the factors ui and vi are empty.\nLet \u03a3 and \u2206 be two alphabets. A mapping g : \u03a3\u2217 \u2192 \u2206\u2217 is a morphism if, for all u, v \u2208 \u03a3\u2217, g(uv) = g(u)g(v).\nFor the undecidability proofs, we use reductions from the Post\u2019s Correspondence Problem (PCP, for short). The PCP was introduced and proved to be undecidable by E. Post in 1946; see [14]. We shall use the modern form of the problem and define the PCP using monoid morphisms: assume that g and h are two morphisms from \u03a3\u2217 into \u2206\u2217, where \u03a3 = {a1, . . . , an} is an alphabet of n letters. The pair (g, h) is called an instance of the PCP, a word w satisfying\ng(w) = h(w). (1)\nis called a solution of the instance (g, h). The size of an instance is the size of the domain alphabet, i.e., the size is equal to |\u03a3|.\nTheorem 4. It is undecidable for instances (g, h) whether or not it has a solution.\nIt is known that for the size n \u2264 2, the PCP is decidable; see [4] and [7]. On the other hand, for sizes n \u2265 5, the PCP is known to be undecidable; see [13]. The decidability statuses for n = 3 and 4 are open. Note that in basic undecidability proofs, the morphisms g and h are non-erasing, that is, g(a) 6= \u03b5 6= h(a) for all a \u2208 \u03a3. This is also the case in [13]."
        },
        {
            "heading": "3 Regular languages",
            "text": "In this section we study the problems defined in the first section for regular languages."
        },
        {
            "heading": "3.1 Powers and copies",
            "text": "Our first theorem is well-known and can be regarded as folklore.\nTheorem 5. Let n \u2265 2 be a fixed integer and P \u2286 \u03a3\u2217 a regular language. It is decidable for regular languages R \u2286 \u03a3\u2217 if there exists a power wn \u2208 R for some word w \u2208 P . Indeed, the existence of a power wn \u2208 R is a PSPACE complete problem.\nProof. Let A be a finite automaton accepting R, i.e., R = L(A). Let the states of A be q0, q1, . . . , qm, where q0 is the initial state. Define, for all i and j, the regular language Rij by Ri,j = {w | qi w\u2212\u2212\u2192 qj} \u2229 P, where qi\nw\u2212\u2212\u2192 qj denotes that there is a computations from the state qi to the state qj reading the word w in A. Then there is an nth power w\nn with w \u2208 P accepted by A if and only if there is an accepting sequence,\nq0 w\u2212\u2212\u2192 qi1 w\u2212\u2212\u2192 . . . w\u2212\u2212\u2192 qin ,\nwhere qin is a final state, i.e., if R0,i1 \u2229 Ri1,i2 \u2229 \u00b7 \u00b7 \u00b7 \u2229 Rin\u22121,in 6= \u2205. For each sequence 0, i1, . . . , in, the intersection is a regular language. Moreover, there are only finitely many such sequences of length n+1. Since the emptiness problem is decidable for regular languages, the claim follows.\nFor PSPACE completeness we need to do the reduction above to the other direction. Indeed, let A1, . . . ,An be finite automata accepting languages L1, . . . , Ln. Now construct a new automaton A by adding transitions reading a new symbol # from the final states of Ai to initial state of Ai+1 for i = 1, . . . , n \u2212 1, and add new final state f to A, such that from all final states of An, there is a transition to f reading #. It is immediate that L1 \u2229 \u00b7 \u00b7 \u00b7 \u2229 Ln 6= \u2205 if and only if there exists w(= u#) such that wn \u2208 L(A). The PSPACE completeness now follows from the PSPACE completeness of emptyness of the intersection problem, see [15].\nBy setting P = \u03a3\u2217 and n = 2 in Theorem 5, we have, see also Anderson et al. [1].\nCorollary 1. It is decidable for a given regular language L \u2286 \u03a3\u2217 whether or not there exists w \u2208 \u03a3\u2217 such that ww \u2208 L.\nThe proof of Theorem 5 also gives a well-known result on the roots of words:\nthe nth root of a regular language R,\nn \u221a R = {w | wn \u2208 R},\nas well as, the collection of all the roots,\n\u2217 \u221a R = \u22c3\nn\u22652\nn \u221a R = {w | wn \u2208 R for some n \u2265 2},\nare regular. Let us mention that the regularity does not hold in the limit case as we see from the following lemma.\nLemma 6. For a regular language R, the language\nPr( \u2217 \u221a R) = {w | w primitive and wn \u2208 R for some n \u2265 2}\nis not necessarily regular. Proof. Let Q = Pr( \u2217 \u221a \u03a3\u2217), that is, Q is the language of all primitive words over \u03a3. Assume that Q is regular over \u03a3 = {a, b}, and consider the (regular) complement Qc of Q consisting of all non-primitive words over \u03a3. Then anbanb \u2208 Qc for all n, and thus for sufficiently large n, (indeed, larger that p in the Pumping Lemma 1) an+kbanb \u2208 Qc for some k \u2265 1 by the Pumping Lemma, but the word an+kbanb is clearly primitive; a contradiction.\nIndeed, Q is not even deterministic CF-language; see Lischke [12].\nFor the sake of completeness, we state the following theorem on the inclusion\nproblem CP \u2286 L for the copy languages CP .\nTheorem 7. For regular languages R and P , it is decidable if CP \u2286 R holds. In particular, it is decidable if a regular language R is closed under taking squares, i.e., if CR \u2286 R.\nProof. The claim follows from Theorem 5. Indeed, CP * R if and only if the complement Rc of R contains a square ww with w \u2208 P . Since the complement of regular language is also regular, the claim follows.\nThe technique in the proof of Theorem 5 can also be used for the marked copy\nproblem.\nTheorem 8. It is decidable for regular languages R, if ww \u2208 R for some w.\nProof. Let C be a finite automaton accepting R, i.e., R = L(C). As the regular languages are closed under intersection, let A be a finite automaton accepting the language R \u2229 \u03a3\u2217\u03a3\u2217. Furthermore, let B be a copy of A where all letters in the transitions are changed from marked to unmarked and vice versa. Therefore, L(B) = {uv | uv \u2208 R}. We may assume that the state set of A as well as that of B is {q0, . . . , qm} and q0 is the initial state.\nDefine, for all i and j, the regular language Rij by\nRAi,j = {w | qi w\u2212\u2212\u2192 qj in A} RBi,j = {w | qi w\u2212\u2212\u2192 qj in B}.\nNow, there is a word ww \u2208 R if and only if for some state qj and a final state qn,\nq0 w\u2212\u2212\u2192 qj w\u2212\u2212\u2192 qn,\nin A (and C), i.e., if RA0,j \u2229RBj,n\u2229\u03a3\u2217 6= \u2205 for some j and n. There are only finitely many intersections of regular languages to be checked, so the claim follows again from the decidability of the emptiness problem for regular languages.\nFor the reverse copy problem requesting if wwr \u2208 R for some w, we first state a more general case.\nTheorem 9. Let k \u2265 1 be fixed. It is decidable for regular languages R if w1w r 1 \u00b7 \u00b7 \u00b7wkwrk \u2208 R for some w1, . . . , wk.\nProof. Let, for fixed k,\nEk = {w1wr1 \u00b7 \u00b7 \u00b7wkwrk | wi \u2208 \u03a3\u2217, i = 1, 2, . . . , k}.\nAs a concatenation of k copies of the linear CF-language E from Example 1, Ek is a (nondeterministic) CF-language. Therefore, also the language\nLk = Ek \u2229R\nis a CF-language as context-free languages are closed under intersection with regular languages. Since the emptiness problem is decidable for context-free languages, the claim follows.\nSetting k = 1 in the previous theorem yields a result for the reverse copy problem.\nCorollary 2. It is decidable for a regular language R, if wwr \u2208 R for some word w.\nThe problem of Theorem 9 turns out to be undecidable for context-free lan-\nguages with k = 1; see Corollary 5. The proof of Theorem 9 can also be used for the following theorem.\nTheorem 10. It is decidable if a regular language R contains a word of the form w1w r 1 \u00b7 \u00b7 \u00b7wkwrk for some w1, . . . , wk and k \u2265 1.\nProof. Let\nL =\n\u221e\u22c3\nk=1\nEk .\nClearly, L is a CF-language, and as in the proof of Theorem 9, the language L\u2229R is a CF-language and the claim follows from the decidability of the emptiness problem of CF-languages."
        },
        {
            "heading": "3.2 Shuffles",
            "text": "We begin by defining the language\nL\u03a3 = \u22c3\nw\u2208\u03a3\u2217\nw w .\nLemma 11. The language L\u03a3 is not a CF-language if |\u03a3| \u2265 2. Proof. Indeed, let L = L\u03a3\u2229\u03a3\u2217\u03a3\u2217 = {ww | w \u2208 \u03a3\u2217}. If L\u03a3 were a CF-language, then L would be a CF-language as \u03a3\u2217\u03a3 \u2217 is regular. However, the copy language C\u03a3\u2217 is a morphic image of L, and as the CF-languages are closed under morphic images, that would make C\u03a3\u2217 a CF-language; a contradiction.\nEngelfriet and Rozenberg [5, Theorem 15] showed in 1980 that each recursively enumerable language K can be represented in the form K = h(L\u03a3 \u2229 M), where h is a letter-to-letter morphism, \u03a3 a binary alphabet and M a regular language. It follows, as stated in [5], that it is undecidable for regular languages R \u2286 \u03a3\u2217 if R contains a word from w w for some w \u2208 \u03a3\u2217; see also [8] for a direct proof of this along different lines.\nWe give a simple proof of the result based on reduction to the Post Correspondence Problem. The proof below does not apply to small alphabets as the PCP is known to be undecidable only for alphabet sizes of at least five.\nTheorem 12. It is undecidable for regular languages R if R contains an element of w w for some w.\nProof. Let (g, h) be an instance of the PCP for g, h : \u03a3\u2217 \u2192 \u2206\u2217, where g and h are both non-erasing. Define a (generalized) finite automaton A with the set of states\nQ = {v | v is a prefix of h(a), a \u2208 \u03a3}. We set the state qf = \u03b5 to be the initial and the unique final state. The transitions of A are of the form: for a \u2208 \u03a3 and z \u2208 \u03a3+\nu az\u2212\u2212\u2192 v if there exists x \u2208 \u03a3\u2217 and v \u2208 Q such that g(a) = xv and h(z) = ux, u a\u2212\u2192 vg(a), if vg(a) \u2208 Q.\nNote that the words z in the above can be found algorithmically, as the images g(a) are of finite length and h is non-erasing.\nThe states w \u2208 Q correspond to overflows of the instance (g, h) when g is leading: an overflow w \u2208 Q occurs in the situation, where g(u) = h(v)w for some words u and v. Indeed, if the automaton A is in state w after reading the word v, then necessarily v = a1z1a2z2 \u00b7 \u00b7 \u00b7 anzn, where ai \u2208 \u03a3 and zi \u2208 \u03a3\u2217 (note that zi is empty for the transitions of the latter form) for all i = 1, . . . , n, and\ng(a1)g(a2) \u00b7 \u00b7 \u00b7 g(an) = h(z1)h(z2) \u00b7 \u00b7 \u00b7 h(zn)w.\nAs qf = \u03b5, we have that A accepts the language\nL(A) = {a1z1a2z2 \u00b7 \u00b7 \u00b7 anzn | n \u2265 0, ai \u2208 \u03a3, zi \u2208 \u03a3\u2217, g(a1a2 \u00b7 \u00b7 \u00b7 an) = h(z1z2 \u00b7 \u00b7 \u00b7 zn)}.\nTherefore, (w w) \u2229 L(A) 6= \u2205 for some w if and only if there exists a word a1z1a2z2 \u00b7 \u00b7 \u00b7 anzn in L(A) such that w = a1a2 \u00b7 \u00b7 \u00b7 an = z1z2 \u00b7 \u00b7 \u00b7 zn. This is equivalent to saying that the instance (g, h) of the PCP has a solution.\nThe self-shuffle and the shuffle with reverse are left as open problems.\nProblem 2. Is it decidable for regular languages R if R contains an element of w w for some w?\nProblem 3. Is it decidable for regular languages R if R contains an element of w wr for some w?\nThe problems with shuffles of words tend to be algorithmically difficult. In-\ndeed, the following was shown by Biegler and McQuillan [2].\nTheorem 13. Consider an instance consisting of a DFA A and two words u, v \u2208 \u03a3\u2217 with |\u03a3| \u2265 2. It is NP-complete to determine if there exists a word w \u2208 L(A) such that w /\u2208 u v.\nProblem 4. Does the above problem stay NP-complete if an instance consists of A and a single word u, and the problem is to determine if there exists a word w with w /\u2208 u u?"
        },
        {
            "heading": "4 Linear CF-languages",
            "text": "In this section we study the problems defined in the introduction for linear CFlanguages and show that they are all undecidable."
        },
        {
            "heading": "4.1 Powers and copies",
            "text": "Let (g, h) be an instance of the PCP, where g, h : \u0393\u2217 \u2192 \u2206\u2217 with \u0393\u2229\u2206 = \u2205. Define the language\nL2(g, h) = {zurxwr : u,w \u2208 \u0393+, z, x \u2208 \u2206\u2217, z = g(w), x = h(u)}.\nIt is an easy exercise of language theory to show that L2(g, h) is accepted by a deterministic linear pushdown automaton. Indeed, the reversal happens between ur and x as the automaton can recognize the alternation in the disjoint alphabets. Checking if z = g(w) and x = h(u) can be easily performed deterministically while decreasing the stack after the reversal. Therefore, L2(g, h) is a linear CFlanguage.\nTheorem 14. It is undecidable for deterministic linear CF-languages L if ww \u2208 L for some w.\nProof. Suppose g, h : \u0393\u2217 \u2192 \u2206\u2217 are morphisms where \u0393 and \u2206 are disjoint, and let \u03a3 = \u0393 \u222a\u2206. We rewrite the above language in a more convenient form:\nL2(g, h) = {g(w)urh(u)wr : u,w \u2208 \u0393+}. (2)\nObviously, there is a square in L2(g, h) if and only if g(w)u r = h(u)wr for some non-empty words u and w, that is, if and only if the instance (g, h) of the PCP has a nonempty solution: g(w) = h(u) and w = u.\nSince L2(g, h) is a deterministic linear CF-language, the claim follows.\nSince the deterministic linear CF-languages are closed under taking comple-\nments, we have, corresponding to Theorem 7, the following corollary.\nCorollary 3. It is undecidable for deterministic linear CF-languages L if all squares are in L, i.e., if C\u03a3\u2217 \u2286 L.\nProof. We consider the negation of the proposition in Theorem 14:\n\u00ac\u2203w : ww \u2208 L \u21d0\u21d2 \u2200w : ww /\u2208 L \u21d0\u21d2 \u2200w : ww \u2208 Lc.\nFor the marked copy, we transform the language L2(g, h) in (2) into the language L\u03042(g, h) = {g(w)urh(u)wr : u,w \u2208 \u0393\u2217} which is clearly also a deterministic linear CF-language.\nTheorem 15. It is undecidable for deterministic linear CF-languages L, if ww \u2208 L for some word w.\nProof. As in the proof of Theorem 14, because the alphabets \u2206 and \u0393 are disjoint (therefore, so are \u2206 and \u0393) we obtain that there is a word of the form ww in L\u03042(g, h) if and only if g(w)u\nr = h(u)wr which again is equivalent to saying that the instance (g, h) of the PCP has a solution.\nExample 2. The language\nF = {w \u2208 \u03a3\u2217 | w = uxxv for some nonempty word x}\nis not regular. Indeed, by the Pumping lemma, its complement, the language of all square-free words, is not even context-free. For this, assume contrary that F c is a CF-language. As it is infinite, pumping in Lemma 2, implies that for every sufficiently long word w \u2208 F c contains a factor of the form xx for some nonempty word x. Therefore, there is a word of the form uxxv in F c; a contradiction.\nWe extend Theorem 14 for arbitrary powers n \u2265 2 as follows.\nTheorem 16. Let n \u2265 2 be a fixed integer. It is undecidable for deterministic linear CF-languages L \u2286 \u03a3\u2217 if there exists a power wn \u2208 L for some nonempty w \u2208 \u03a3\u2217.\nProof. Our construction relies on the language L2(g, h) defined in (2). Let\nLn(g, h) = L2(g, h) \u00b7 (#\u2206+\u0393+)n\u22122.\nIt is a deterministic linear CF-language since the end portion (\u2206+\u0393+)n\u22122 is regular. Recall that \u2206 \u2229 \u0393 = \u2205.\nNow,\ng(w)urh(u)wr \u00b7 w1u1 \u00b7 \u00b7 \u00b7wn\u22122un\u22122 \u2208 Ln(g, h) is an nth power if and only if g(w) = h(u) = w1 = . . . = wn\u22122 and u\nr = wr = u1 = . . . = un\u22122, and thus if and only if the instance (g, h) has a solution. This proves the claim.\nFinally, if we replace Ln(g, h) by the deterministic linear CF-language\nL\u03c9(g, h) = L2(g, h) \u00b7 (\u2206+\u0393+)\u2217,\nwe have,\nTheorem 17. It is undecidable for deterministic linear CF-languages L \u2286 \u03a3\u2217 if there exists a power wn \u2208 L for some n \u2265 2 and nonempty w \u2208 \u03a3\u2217.\nRegarding the decidability result in Theorem 7 for regular languages, we state\nan open problem for linear CF-languages.\nProblem 5. Is it decidable for linear CF-languages L if CL \u2286 L, i.e., if L is closed under taking squares?\nIn many special cases the answer to the above problem is positive. Indeed, according to Greibach [6] if a language L1cL2, with Li \u2286 (\u03a3 \\ {c})\u2217 for i = 1, 2, is a linear CF-language then Li is regular for i = 1 or i = 2.\nThe inclusion problem of squares in a language becomes undecidable \u201djust above\u201d the regular languages. Recall that counter languages are accepted with (nondeterministic) pushdown automata with a single pushdown letter for the stack.\nTheorem 18. It is undecidable for counter languages L \u2286 \u03a3\u2217 if C\u03a3\u2217 \u2286 L holds.\nProof. We prove the claim by reduction from the PCP. Let (g, h) be an instance of the PCP for g, h : \u03a3\u2217 \u2192 \u2206\u2217. Let \u0393 = \u03a3 \u222a {#}, where # is a new letter.\nWe now describe a (nondeterministic) counter language L \u2286 \u0393\u2217 such that w \u2208 L if\n(1) w 6= u#v#, for all u, v \u2208 \u03a3\u2217, or\n(2) w = u#v# but u 6= v or g(u) 6= h(v).\nClearly, L contain all squares of \u0393\u2217 except those words w#w# with g(w) = h(w). Thus C\u03a3\u2217 \u2286 L if and only if the instance (g, h) has no solutions, and the claim follows from the undecidability of the PCP.\nStarting from its initial state the automaton M branches to one of the three separate lines of actions, and it accepts the input w if one of these lines leads to acceptance. Note that counter automata are nondetermistic, and their languages are closed under union.\nThe automaton M accepts if\n1. w /\u2208 \u03a3\u2217#\u03a3\u2217#. Since \u03a3\u2217#\u03a3\u2217# is regular this can be decided with the states, without counter actions.\nFrom this on, we suppose that w = u#v#, where u, v \u2208 \u03a3\u2217.\n2. u 6= v. While reading the prefix u and increasing the counter, the automaton guesses a position n \u2264 |u|, say with the letter a. The counter stack has then cn. The automaton reads on until it reaches the first #, after which it pops the counter to gain the nth letter, say b, of v. It accepts if a 6= b, that is the nth letter of u is not equal to nth letter of v.\n3. g(u) 6= h(v). As in case 2 the automaton can guess a position of different letter while in the images g(u) and h(v). E.g., while reading u = a1 \u00b7 \u00b7 \u00b7 am, the automaton guesses a position n = |g(a1a2 \u00b7 \u00b7 \u00b7 ak)|+j by pushing c|g(ai)| i = 1, 2, . . . , k, to the counter when reading a1, . . . , ak and then pushing c j ,\nfor j < |g(ak+1)|, and remembers the symbol a which is the ith symbol of g(ak+1) and, therefore, the nth symbol of g(u). Then, when reading v = b1 \u00b7 \u00b7 \u00b7 bt, M decreases the counter with c|h(bi)| until |h(b1 \u00b7 b\u2113)| + s = n for some \u2113 such that s < |h(b\u2113+1)| and checks that the symbol in position s of h(b\u2113+1), that is, the nth symbol of h(v) are different.\nIt is straightforward to see that M accepts the language L."
        },
        {
            "heading": "4.2 Shuffles",
            "text": "We begin with the shuffle operation on CF-languages. By considering the generating grammars, it is evident that the family of context-free languages is closed under concatenation. However, it is not closed under shuffle of languages. To see this, consider the languages\nL1 = {anbn | n \u2265 1}, L2 = {cmam | m \u2265 1} and L = L1 L2 \u2229 a\u2217c\u2217b\u2217a\u2217.\nIf L1 L2 is a CF-language, then so is L as CF-languages are closed under intersection with regular languages and a\u2217c\u2217b\u2217a\u2217 is regular. But L = {ancmbnam | n,m \u2265 1} is a well-known non-CF-language. Note that the languages L1 and L2 are even deterministic linear CF-languages.\nThe following example showing that CF-languages over binary alphabets are\nnot closed under shuffle is due to Chris K\u00f6cher [10].\nExample 3. Let L1 = {anban | n \u2265 1} and L2 = {bnabn | n \u2265 1}. Now\n(L1 L2) \u2229 a\u2217b\u2217a\u2217b\u2217 = {ambn+1am+1bn | m,n \u2265 1},\nwhich is not a context-free language. As the language a\u2217b\u2217a\u2217b\u2217 is regular, and intersection of a context-free language and a regular language is always contextfree, we get that L1 L2 is not a context-free language.\nNext, we study the shuffle problem for linear CF-languages.\nTheorem 19. It is undecidable for deterministic linear CF-languages L if L contains an element of w w for some w.\nProof. Recall the language L2(g, h) from (2), and consider its modification\nL#(g, h) = {$g(w)ur#$h(u)wr# : u,w \u2208 \u0393\u2217}, (3)\nwhere the markers $ and # appears only in the given positions. Clearly, L#(g, h) is deterministic linear CF-language.\nThe only word of the form $u#$v# in the shuffle $w# $w# is $w#$w#, which in its turn belongs to L#(g, h) if and only if the instance (g, h) has a solution, the claim follows.\nCorollary 4. It is undecidable for deterministic linear CF-languages L \u2286 \u03a3\u2217 if all shuffles w w for w \u2208 \u03a3\u2217 are in L.\nProof. We consider the negation of the proposition in Theorem 19:\n\u00ac\u2203w : w w \u2229 L 6= \u2205 \u21d0\u21d2 \u2200w : w w \u2229 L = \u2205 \u21d0\u21d2 \u2200w : w w \u2286 Lc.\nSince the family of deterministic linear CF-languages is closed under complement, the claim follows.\nBy Rizzi and Vialette [17] and Buss and Soltys [3], it is an NP-complete problem if a word v is a self-shuffle, i.e., if there exists a word w such that v = w w. Consider the shuffle w wr, where wr is the reverse of w. For a language P , let\nMP = \u22c3\nw\u2208P\nw wr.\nSee Henshall et al. [9] for the following result.\nTheorem 20. The language M\u03a3\u2217 is not context-free.\nWe give a bit simpler result related to the previous theorem as an example.\nExample 4. We show that the language MP need not be regular for regular P . Indeed, let P = a+b+ over \u03a3 = {a, b}. Then L = MP \u2229 a\u2217b\u2217a\u2217 = {anb2man | n,m \u2265 1} is non-regular (by the Pumping Lemma). Therefore, MP is not regular.\nSimilarly, let L = {anbn | n \u2265 1}. Now,\nML \u2229 a\u2217b\u2217a\u2217 = \u22c3\nn\u22651\n(anbn bnan) \u2229 a\u2217b\u2217a\u2217 = {anb2nan | n \u2265 1}\nis not context-free, and, therefore, ML is not context-free, since a \u2217b\u2217a\u2217 is regular.\nOur next theorem concerns linear CF-languages that need not be deterministic.\nTheorem 21. It is undecidable for linear CF-languages if L contains an element of w wr for some w.\nProof. The proof is by reduction from the PCP. Let (g, h) be an instance of the PCP with g, h : \u03a3\u2217 \u2192 \u2206\u2217 and let # be a new symbol # /\u2208 \u2206. Consider the linear CF-language L1 = L(G) generated by the grammar G with two non-terminals S and T together with the production rules\nS \u2192 #g(a)Th(a)r# for all a \u2208 \u03a3, T \u2192 g(a)Th(a)r for all a \u2208 \u03a3, T \u2192 ##.\nHence L1 = {#g(v)##h(v)r# | v \u2208 \u03a3+}. (4) Now, L1 contains an element of w w\nr for a word w if and only if w = #g(v)# = #h(v)# for some nonempty word v for which then g(v) = h(v). The claim follows from the undecidability of the PCP.\nThe linear CF-language L1 in (4) also gives immediately the following result.\nTheorem 22. It is undecidable for linear CF-languages L, if wwr \u2208 L for some word w.\nThe proof of Theorem 21 also gives the following corollary.\nCorollary 5. It is undecidable for linear CF-languages L if L contains a palindrome, i.e, a word w such that w = wr.\nThe following result is a trivial consequence of Theorem 12, which stated the\nresult already for regular languages.\nTheorem 23. It is undecidable for linear context-free languages if L contains an element of w w for some w.\nIn contrast to the decidability result in Theorem 9 we can extend the proof of\nTheorem 21 for the next claim.\nTheorem 24. Let k \u2265 1 be fixed. It is undecidable for CF-languages L if L contains a word of the form w1w r 1 \u00b7 \u00b7 \u00b7wkwrk for some w1, . . . , wk .\nProof. We modify the linear CF-language from (4). Consider the \u2019next\u2019 linear CFlanguage Lk for the instance (g, h): Lk = L1 \u00b7(cc)k\u22121, where c is a new letter.\nFor regular languages R it is clearly decidable if {w,wr}\u2217 \u2286 R for given w.\nProblem 6. Is it decidable for regular languages R if {w,wr}\u2217 \u2286 R for some w? How about CF-languages?\nOn the other hand, it is decidable for context-free languages L if L \u2286 {w,wr}\u2217 for some w. Indeed, by the Pumping property, the length of possible words w has an effective upper bound."
        },
        {
            "heading": "5 Conclusions",
            "text": "Our aim was to present a survey on the decidability statuses of special membership problems for copies, marked copies, reversed copies, self-shuffles and shuffles with marked or reversed copies. Two cases, the self-shuffle and shuffle with the reversed copy, remain unsolved. We also studied special inclusion problems regarding powers and especially squares of words. Several related open problem were stated."
        }
    ],
    "title": "Decision Problems on Copying and Shuffling",
    "year": 2023
}