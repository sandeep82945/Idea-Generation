{
    "abstractText": "In this paper, we study the total displacement statistic of parking functions from the perspective of cooperative game theory. We introduce parking games, which are coalitional cost-sharing games in characteristic function form derived from the total displacement statistic. We show that parking games are supermodular cost-sharing games, indicating that cooperation is difficult (i.e., their core is empty). Next, we study their Shapley value, which formalizes a notion of \u201cfair\u201d cost-sharing and amounts to charging each car for its expected marginal displacement under a random arrival order. Our main contribution is a polynomial-time algorithm to compute the Shapley value of parking games, in contrast with known hardness results on computing the Shapley value of arbitrary games. The algorithm leverages the permutation-invariance of total displacement, combinatorial enumeration, and dynamic programming. We conclude with open questions around alternative solution concepts for supermodular cost-sharing games and connections to other areas in combinatorics.",
    "authors": [],
    "id": "SP:eb7b674475572fe3b2bde70cccf3756b08c595b5",
    "references": [
        {
            "authors": [
                "Aruzhan Amanbayeva",
                "Danielle Wang"
            ],
            "title": "The convex hull of parking functions of length n",
            "venue": "Enumerative Combinatorics and Applications",
            "year": 2022
        },
        {
            "authors": [
                "Drew Armstrong",
                "Nicholas A Loehr",
                "Gregory S Warrington"
            ],
            "title": "Rational parking functions and Catalan numbers",
            "venue": "Annals of Combinatorics",
            "year": 2016
        },
        {
            "authors": [
                "Olga N Bondareva"
            ],
            "title": "Some applications of linear programming methods to the theory of cooperative games",
            "venue": "Problemy Kibernet",
            "year": 1963
        },
        {
            "authors": [
                "Joshua Carlson",
                "Alex Christensen",
                "Pamela E Harris",
                "Zakiya Jones",
                "Andres Ramos Rodriguez"
            ],
            "title": "Parking functions: Choose your own adventure",
            "venue": "The College Mathematics Journal",
            "year": 2021
        },
        {
            "authors": [
                "Robert Cori",
                "Dominique Rossin"
            ],
            "title": "On the sandpile group of dual graphs",
            "venue": "European Journal of Combinatorics",
            "year": 2000
        },
        {
            "authors": [
                "Xiaotie Deng",
                "Christos H Papadimitriou"
            ],
            "title": "On the complexity of cooperative solution concepts",
            "venue": "In: Mathematics of Operations Research",
            "year": 1994
        },
        {
            "authors": [
                "Persi Diaconis",
                "Angela Hicks"
            ],
            "title": "Probabilizing parking functions",
            "venue": "Advances in Applied Mathematics",
            "year": 2017
        },
        {
            "authors": [
                "Jennifer Elder",
                "Pamela E Harris",
                "Jan Kretschmann",
                "J Carlos Mart\u0301\u0131nez Mori"
            ],
            "title": "Boolean intervals in the weak order of Sn",
            "year": 2023
        },
        {
            "authors": [
                "Ulrich Faigle",
                "Walter Kern"
            ],
            "title": "The Shapley value for cooperative games under precedence constraints",
            "venue": "In: International Journal of Game Theory",
            "year": 1992
        },
        {
            "authors": [
                "Donald B Gillies"
            ],
            "title": "Solutions to general non-zero-sum games",
            "venue": "Contributions to the Theory of Games",
            "year": 1959
        },
        {
            "authors": [
                "Michel X Goemans",
                "Maurice Queyranne",
                "Andreas S Schulz",
                "Martin Skutella",
                "Yaoguang Wang"
            ],
            "title": "Single machine scheduling with release dates",
            "venue": "SIAM Journal on Discrete Mathematics",
            "year": 2002
        },
        {
            "authors": [
                "Pamela E Harris",
                "Jan Kretschmann",
                "J Carlos Mart\u0301\u0131nez Mori"
            ],
            "title": "Lucky cars and the quicksort algorithm",
            "year": 2023
        },
        {
            "authors": [
                "Donald E Knuth"
            ],
            "title": "Linear probing and graphs",
            "venue": "In: Algorithmica",
            "year": 1998
        },
        {
            "authors": [
                "Alan G Konheim",
                "Benjamin Weiss"
            ],
            "title": "An occupancy discipline and applications",
            "venue": "SIAM Journal on Applied Mathematics",
            "year": 1966
        },
        {
            "authors": [
                "Germain Kreweras"
            ],
            "title": "Une famille de polyn\u00f4mes ayant plusieurs propri\u00e9t\u00e9s \u00e9numeratives",
            "venue": "Periodica Mathematica Hungarica",
            "year": 1980
        },
        {
            "authors": [
                "Michael Maschler",
                "Bezalel Peleg",
                "Lloyd S Shapley"
            ],
            "title": "Geometric properties of the kernel, nucleolus, and related solution concepts",
            "venue": "In: Mathematics of operations research",
            "year": 1979
        },
        {
            "authors": [
                "Roger B Myerson"
            ],
            "title": "Game theory: Analysis of conflict",
            "year": 1991
        },
        {
            "authors": [
                "Bezalel Peleg",
                "Peter Sudh\u00f6lter"
            ],
            "title": "Introduction to the theory of cooperative games",
            "venue": "2nd ed",
            "year": 2007
        },
        {
            "authors": [
                "Ronald Pyke"
            ],
            "title": "The supremum and infimum of the Poisson process",
            "venue": "The Annals of Mathematical Statistics",
            "year": 1959
        },
        {
            "authors": [
                "Maurice Queyranne"
            ],
            "title": "Structure of a simple scheduling polyhedron",
            "venue": "Mathematical Programming",
            "year": 1993
        },
        {
            "authors": [
                "John Riordan"
            ],
            "title": "Ballots and trees",
            "venue": "Journal of Combinatorial Theory",
            "year": 1969
        },
        {
            "authors": [
                "Alvin E Roth"
            ],
            "title": "Lloyd Shapley (1923\u20132016)",
            "venue": "Nature",
            "year": 2016
        },
        {
            "authors": [
                "Andreas S Schulz",
                "Nelson A Uhan"
            ],
            "title": "Approximating the least core value and least core of cooperative games with supermodular costs",
            "venue": "Discrete Optimization",
            "year": 2013
        },
        {
            "authors": [
                "Andreas S Schulz",
                "Nelson A Uhan"
            ],
            "title": "Sharing supermodular costs",
            "venue": "In: Operations research 58.4-part-2",
            "year": 2010
        },
        {
            "authors": [
                "Lloyd S Shapley"
            ],
            "title": "A value for n-person games",
            "venue": "Contributions to the Theory of Games,",
            "year": 1953
        },
        {
            "authors": [
                "Lloyd S Shapley"
            ],
            "title": "On balanced sets and cores",
            "venue": "Naval Research Logistics Quarterly",
            "year": 1967
        },
        {
            "authors": [
                "Lloyd S Shapley",
                "Martin Shubik"
            ],
            "title": "Quasi-cores in a monetary economy with nonconvex preferences",
            "venue": "Journal of the Econometric Society",
            "year": 1966
        },
        {
            "authors": [
                "Richard P Stanley"
            ],
            "title": "Hyperplane arrangements, interval orders, and trees",
            "venue": "Proceedings of the National Academy of Sciences",
            "year": 1996
        },
        {
            "authors": [
                "Richard P Stanley"
            ],
            "title": "Parking functions and noncrossing partitions",
            "venue": "The Electronic Journal of Combinatorics",
            "year": 1997
        },
        {
            "authors": [
                "Richard P Stanley",
                "Jim Pitman"
            ],
            "title": "A polytope related to empirical distributions, plane trees, parking functions, and the associahedron",
            "venue": "Discrete & Computational Geometry",
            "year": 2002
        },
        {
            "authors": [
                "Catherine H Yan"
            ],
            "title": "Parking functions",
            "venue": "Enumerative Combinatorics. Ed. by Miklo\u0301s Bo\u0301na. Boca Raton, FL: CRC Press,",
            "year": 2015
        }
    ],
    "sections": [
        {
            "text": "ar X\niv :2\n30 9.\n12 26\n5v 2\n[ m\nat h.\nC O\n] 1\n4 N\nov 2\n02 3"
        },
        {
            "heading": "1. Introduction",
            "text": "Consider a one-way street with n \u2208 N := {1, 2, . . .} numbered parking spots. A sequence of n cars arrive one at a time, each with a preferred spot. Upon the arrival of car i \u2208 [n] := {1, 2, . . . , n}, it drives to its preferred spot xi \u2208 [n]. If spot xi is unoccupied, it parks there. Otherwise, it displaces down the one-way street until it finds the first unoccupied spot in which to park, if one exists. If no such spot exists, the car is unable to park and the parking process fails. Let x = (x1, x2, . . . , xn) \u2208 [n]\nn be the n-tuple encoding the parking preference of every car. If all cars are able to park, then x is a parking function of length n.\nParking functions were independently introduced by Konheim and Weiss [14] in their study of hashing functions and by Pyke [19] in his study of Poisson processes. Since then, parking functions have become classical objects in combinatorics, displaying rich mathematical structure of their own, as well as diverse connections to other research areas; including hashing [13], hyperplane arrangements [28], noncrossing partitions [29], spanning trees [15], Dyck paths [2], polyhedral combinatorics [1, 30], sandpile groups [5], the Bruhat order [8], Brownian motion [7], and sorting [12], to name just a few. Refer to [4] for an expository introduction to parking functions and their many variants, and to Yan [31] for a survey of results.\nIn this paper, we study the \u201cfair\u201d distribution of parking costs. Specifically, we take the total displacement collectively incurred by all cars as the basis for the cost of parking. As a motivating example, consider the all-ones parking function (1, 1, . . . , 1) \u2208 PFn. In this case, car 1 is lucky and parks in spot 1 without incurring any displacement. However, car 2 is not as lucky, and displaces one unit before parking in spot 2. Similarly, car i displaces i \u2212 1 units before parking in spot i. Therefore, the total displacement of (1, 1, . . . , 1) is\nn \u2211\ni=1\n(i\u2212 1) = n(n\u2212 1)\n2 .\nDate: November 16, 2023. 2020 Mathematics Subject Classification. 05A05, 91A12, 91A46. Key words and phrases. parking functions, cooperative games, Shapley value.\nCertainly, one can recover the total displacement by charging each car for the displacement it incurs: that is, charging i \u2212 1 units to each car i. However, this seems rather unfair given that all cars have the same preference; it just so happens that certain cars arrive before others (and the arrival order might be beyond the cars\u2019 control). Therefore, in this case, it seems only fair to charge (n \u2212 1)/2 units to each car i, which again recovers the total displacement. Now, suppose some car changed its preference from spot 1 to spot 2. This would ever so slightly alleviate the parking demand around spot 1, and in fact the total displacement would decrease by one unit. How should this car be \u201cfairly\u201d compensated for its more favorable preference?\n1.1. Summary of Results. We answer this question through the lens of cooperative game theory (refer to Myerson [17] or Peleg and Sudho\u0308lter [18] for a comprehensive treatment of this area). Our contributions are as follows.\nWe first note that the total displacement of a parking function is invariant under the action of the permutation group, even when there are more spots than cars (Theorem 3.2). In turn, this allows us to define parking games as a class of (transferable utility) cooperative games in characteristic function form (Definition 3.3).\nWe then show that parking games are supermodular cost-sharing games (Lemma 3.5). As such, their core [10] is typically empty, indicating that cooperation is difficult. Supermodularity arises whenever costs are exacerbated by \u201ccongestion\u201d effects, such as in scheduling [11, 20, 24, 23]. In much the same way, parking games are supermodular because a car that arrives at an already busy street tends to displace significantly before it finds an unoccupied spot.\nNext, we adopt the Shapley value [25] as a notion of \u201cfair\u201d cost-sharing. In parking games, the Shapley value amounts to charging each car for its expected marginal displacement assuming its arrival order is determined uniformly at random. However, a simple computation of this quantity requires exponential time. Therefore, our main contribution is a polynomial-time algorithm to compute the Shapley value of parking games (Theorem 3.8). Our algorithm leverages the permutation-invariance of total displacement, combinatorial enumeration, and dynamic programming. We contrast this positive result for the special case of parking games with known hardness results on computing the Shapley value for arbitrary cooperative games [6, 9].\nFinally, we note that unlike the scheduling games studied by Schulz and Uhan [24], which are similar to parking games in that they are supermodular and their Shapley value can be computed in polynomial time, the Shapley value of parking games is not a least core allocation (i.e., a costshare distribution that minimizes the worst-case dissatisfaction from cooperation) (Lemma 4.1). We conclude with open questions around the least core and least core value of parking games.\n1.2. Organization. The remainder of this paper is organized as follows. In Section 2, we present some necessary background on parking functions and cooperative game theory. In Section 3, we define parking games, establish supermodularity, and introduce our algorithm. We conclude in Section 4 with some additional properties and open questions."
        },
        {
            "heading": "2. Background",
            "text": "Notation. We briefly outline some notational conventions. All tuples considered have positive integer entries and are denoted in boldface, as in z = (z1, z2, . . . , zn) \u2208 Nn. Throughout, weakly increasing tuples are furthermore decorated with an apostrophe, as in z\u2032 = (z\u20321, z \u2032 2, . . . , z \u2032 n). If z = (z1, z2, . . . , zn) is an n-tuple and i \u2208 [n], then |z| = n denotes its size and\nzi\u0302 = (z1, . . . , zi\u22121, zi+1, . . . , zn)\ndenotes the (n\u2212 1)-tuple obtained from z upon the removal of its ith entry. For any n \u2208 N, let Sn denote the symmetric group over [n]. If \u03c0 \u2208 Sn, then \u03c0 \u22121 denotes its inverse.\n2.1. Parking Functions. Let PFn \u2286 [n] n denote the set of parking functions of length n. Similarly, let PF\u2191n \u2286 PFn denote the set of weakly increasing parking functions of length n. Konheim and Weiss [14] showed that |PFn| = (n+1)\nn\u22121 (OEIS A000272). We refer the reader to Riordan [21] for an elegant proof credited to Pollak. Stanley [29] showed, through a connection to noncrossing partitions, that |PF\u2191n| = Cn, where Cn = 1\nn+1\n(\n2n n\n)\nis the nth Catalan number (OEIS A000108).\nLet x = (x1, x2, . . . , xn) \u2208 [n]n and x\u2032 = (x\u20321, x \u2032 2, . . . , x \u2032 n) be its weakly increasing rearrangement. It is well-known (for instance, refer to Yan [31]) that x \u2208 PFn if and only if x \u2032 i \u2264 i for all i \u2208 [n]. As a consequence, PFn consists of the orbits of the elements of PF \u2191 n under the action of Sn (which permutes the subscripts). In particular, PFn is closed under the action of permutations. Later in this work, we use the following definition. For any fixed x \u2208 PFn, let r : [n] \u2192 [n] be a bijective rank function that maps each index i in x to its index r(i) in x\u2032 with ties broken arbitrarily, so that xi = x \u2032 r(i). Given any subset S \u2286 [n], we denote r(S) = {r(i) : i \u2208 S}.\nKonheim and Weiss [14] also considered parking functions where there are more parking spots than cars. Let n,m \u2208 N with m \u2265 n. Suppose there are m numbered parking spots on the one-way street and n cars arrive one at a time, each with a preferred spot in [m]. Let x = (x1, x2, . . . , xn) \u2208 [m]n be the n-tuple encoding the parking preferences of every car. Each car i follows the same parking rule as before: it parks in the first unoccupied spot at or past its preferred spot xi \u2208 [m], if one exists. Let PFn,m \u2286 [m]\nn denote the set of preference tuples with n cars and m spots under which all cars are able to park; we refer to these as (n,m)-parking functions. Konheim and Weiss [14, Lemma 2] showed that |PFn,m| = (m+1)\nn\u22121(m+ 1\u2212 n). Similarly, let PF\u2191n,m \u2286 PFn,m denote the set of weakly increasing (n,m)-parking functions.\n2.2. Shapley Value and Core. A (transferable utility) coalitional cost-sharing game with n \u2208 N players is specified by a characteristic function c : 2[n] \u2192 R satisfying c(\u2205) = 0. Here, c(S) is the collective cost incurred by the members of the coalition S \u2286 [n] should they act in unison. The set [n] is referred to as the grand coalition. In this context, a solution concept is any criterion that, given c, splits the collective cost c([n]) incurred by the grand coalition into cost-shares \u03c61(c), \u03c62(c), . . . , \u03c6n(c) \u2208 R for each of the players. This theory assumes the grand coalition reaches a binding agreement (an agreement possibly enforced by external forces, such as a contract or high monetary penalties).\nShapley [25] (a 2012 Nobel laureate for contributions to game theory [22]) considered solution concepts in cost-sharing games through an axiomatic approach. In particular, he posited the following as desirable properties of a solution concept.\nAxiom 2.1 (Efficiency). \u2211n\ni=1 \u03c6i(c) = c([n]).\nAxiom 2.2 (Nullity). If c(S + {i}) = c(S) for every S \u2286 [n] \\ {i}, then \u03c6i(c) = 0.\nAxiom 2.3 (Symmetry). If c(S \u222a {i}) = c(S + {j}) for every S \u2286 [n] \\ {i, j}, then \u03c6i(c) = \u03c6j(c).\nAxiom 2.4 (Linearity). If c\u2032 is another characteristic function on n players and 0 \u2264 \u03b1 \u2264 1, then\n\u03c6i ( \u03b1 \u00b7 c+ (1\u2212 \u03b1) \u00b7 c\u2032 ) = \u03b1 \u00b7 \u03c6i(c) + (1\u2212 \u03b1) \u00b7 \u03c6i(c \u2032)\nfor each i \u2208 [n].\nAxiom 2.1 states that the sum of cost-shares recover the total cost incurred by the grand coalition. Axiom 2.2 states that if a player never incurs any marginal cost, then the player is charged a zero cost-share. Axiom 2.3 states that if a pair of players are equal with respect to c, then the players are charged the same cost-share. Lastly, Axiom 2.4 captures the idea that, if the players repeat the game, then all else being equal, the outcome of the first iteration does not affect the outcome of the second.\nShapley showed that there is a unique solution concept satisfying Axioms 2.1-2.4. This solution concept is now known as the Shapley value.\nTheorem 2.5 (Shapley [25]). Let C be the set of characteristic functions on n players. The function \u03c6 : C \u2192 Rn given by\n\u03c6i(c) = 1\nn!\n\u2211\n\u03c0\u2208Sn\nc ({j \u2208 [n] : \u03c0(j) \u2264 \u03c0(i)}) \u2212 c ({j \u2208 [n] : \u03c0(j) < \u03c0(i)}) (1)\nfor each i \u2208 [n] is the unique function satisfying Axioms 2.1-2.4.\nIn other words, in the Shapley value, each player is charged their expected marginal cost assuming the order in which they join the grand coalition is determined uniformly at random.\nThe Shapley value can be readily computed with exponentially-many oracle calls to the characteristic function, so it is natural to ask whether this many calls is generally necessary. Faigle and Kern [9, Theorem 3] showed that any algorithm that computes the Shapley value for arbitrary characteristic functions requires exponentially-many calls. Moreover, Deng and Papadimitriou [6, Theorem 9] showed that, in general, computing the Shapley value is #P -complete. However, there are nontrivial special cases for which polynomial-time algorithms are known (e.g., [6, Theorem 1]). In this work, we show that parking games are another such special case.\nGillies [10] introduced another solution concept, known as the core, with desirable \u201cstability\u201d properties. The core of a cooperative game c is the set\n{\n\u03c6 \u2208 Rn : n \u2211\ni=1\n\u03c6i = c([n]), \u2211\ni\u2208S\n\u03c6i \u2264 c(S) for all S \u2286 [n]\n}\n.\nIntuitively, it is the set of cost-share allocations that are simultaneously efficient (Axiom 2.1) and robust against coalitional defections. In other words, no coalition is charged more than the cost that they would incur by themselves.\nThe Bondareva-Shapley theorem [3, 26] (refer also to [18, Chapter 3.1]) provides necessary and sufficient conditions for the non-emptiness of the core. In particular, it implies that if c is submodular, then the core is non-empty. Note that c is submodular if\nc(S \u222a {i}) \u2212 c(S) \u2265 c(T \u222a {i}) \u2212 c(T )\nfor all i \u2208 [n] and all S \u2286 T \u2286 [n] \\ {i}. Conversely, it is supermodular if\nc(S \u222a {i}) \u2212 c(S) \u2264 c(T \u222a {i}) \u2212 c(T )\nfor all i \u2208 [n] and all S \u2286 T \u2286 [n] \\ {i}. It is modular if it is simultaneously submodular and supermodular. Intuitively, submodularity and supermodularity capture the notions of decreasing and increasing marginal costs, respectively. It can be verified that the core of a supermodular game is empty unless it is modular, indicating that cooperation is difficult."
        },
        {
            "heading": "3. Parking Games",
            "text": "3.1. Displacement, Total Displacement, and Arrival Order. Fix any x = (x1, x2, . . . , xn) \u2208 PFn. Then, by definition, car i with preference xi \u2208 [n] parks in some spot pi \u2208 [n] with pi \u2265 xi. Therefore, the displacement incurred by car i upon its arrival under x is given by\npi \u2212 xi \u2265 0. (2)\nNow, let d : PFn \u2192 N be the total displacement function, where d(x) is the total displacement incurred by all cars upon their arrival with preferences x \u2208 PFn. Using Equation (2), for any fixed\nx \u2208 PFn we have\nd(x) := n \u2211\ni=1\npi \u2212 xi. (3)\nFor example, given a weakly increasing parking function x\u2032 = (x\u20321, x \u2032 2, . . . , x \u2032 n) \u2208 PF \u2191 n, the cars 1, 2, . . . , n park in the order 1, 2, . . . , n. Therefore, in this case we have d(x\u2032) = \u2211n\ni=1(i\u2212 x \u2032 i).\nWe show that the total displacement statistic is invariant under rearrangement of the entries of a parking function. This result is standard (e.g., it is stated in [31, Chapter 13.2.2]), but we formally state and prove it for completeness and later use.\nLemma 3.1. If x = (x1, x2, . . . , xn) \u2208 PFn and \u03c0 \u2208 Sn acts on x by permuting its subscripts, i.e. \u03c0(x) = (x\u03c0\u22121(1), x\u03c0\u22121(2), . . . , x\u03c0\u22121(n)), then d(x) = d(\u03c0(x)).\nProof. Note that under x, car i with preference xi \u2208 [n] parks in some spot pi \u2208 [n]. Since x \u2208 PFn, this implies {p1, p2, . . . , pn} = [n] and we have\nd(x) = n \u2211\ni=1\n(pi \u2212 xi) = n \u2211\ni=1\ni\u2212 n \u2211\ni=1\nxi = n(n+ 1)\n2 \u2212\nn \u2211\ni=1\nxi.\nSimilarly, note that under \u03c0(x), car i with preference x\u03c0\u22121(i) parks in some spot qi \u2208 [n]. Since \u03c0(x) \u2208 PFn, this implies {q1, q2, . . . , qn} = [n] and we have\nd(\u03c0(x)) =\nn \u2211\ni=1\n( qi \u2212 x\u03c0\u22121(i) ) =\nn \u2211\ni=1\ni\u2212 n \u2211\ni=1\nx\u03c0\u22121(i) = n(n+ 1)\n2 \u2212\nn \u2211\ni=1\nx\u03c0\u22121(i).\nLastly, note that n \u2211\ni=1\nxi = n \u2211\ni=1\nx\u03c0\u22121(i)\nsince \u03c0 is a bijection from [n] to [n].\nWe now generalize this result to the case of (n,m)-parking functions. For n,m \u2208 N with m \u2265 n, let d : PFn,m \u2192 N be the total displacement function, where d(x) is the total displacement incurred by all cars upon their arrival with preferences x \u2208 PFn,m.\nTheorem 3.2. If x = (x1, x2, . . . , xn) \u2208 PFn,m and \u03c0 \u2208 Sn acts on x by permuting its subscripts, i.e. \u03c0(x) = (x\u03c0\u22121(1), x\u03c0\u22121(2), . . . , x\u03c0\u22121(n)), then d(x) = d(\u03c0(x)).\nProof. Upon replicating the proof technique from Lemma 3.1, it suffices to show that the subset of occupied spots under x is the same as the subset of occupied spots under \u03c0(x) (this is immediate in Lemma 3.1 since it assumes x, \u03c0(x) \u2208 PFn).\nSuppose that under x, the cars park in spots in S \u2286 [m] whereas under \u03c0(x), the cars park in spots in T \u2286 [m]. Note that |S| = |T | = n. If S = T , then the result follows. Suppose by way of contradiction that S 6= T , and let p be the smallest value in (S \\ T ) \u222a (T \\ S). Without loss of generality, suppose p \u2208 S \\T (otherwise we swap the roles in the following argument). Since p \u2208 S, there are k cars with preference less than or equal to p in x for some 1 \u2264 k \u2264 n. Conversely, since p /\u2208 T , there are strictly fewer than k cars in \u03c0(x) with preference less than or equal to p. This is a contradiction, for x and \u03c0(x) are equal as multisets.\nGiven Theorem 3.2, we now define parking games as coalitional games in characteristic function form, where each car is treated as a player.\nDefinition 3.3 (Parking Game). Let x = (x1, x2, . . . , xn) \u2208 PFn be a parking function. The parking game of x is given by the characteristic function cx : 2 [n] \u2192 N, where\ncx(S) = d((xi : i \u2208 S)) (4)\nfor each S \u2286 [n].\nIn other words, cx(S) is the total displacement of the (|S|, n)-parking function (xi : i \u2208 S) \u2208 PF|S|,n. Note that this definition relies on Theorem 3.2 to treat cx as a set function that is independent of the arrival order of the cars in S. As noted in the following remark, the parking game of a parking function can be obtained through the parking game of its weakly increasing rearrangement.\nRemark 3.4. Let x = (x1, x2, . . . , xn) \u2208 PFn be a parking function and x \u2032 = (x\u20321, x \u2032 2, . . . , x \u2032 n) \u2208 PF \u2191 n be its weakly increasing rearrangement. Then, by Theorem 3.2, it follows that\ncx(S) = d((xi : i \u2208 S)) = d((x \u2032 i : i \u2208 r(S))) = cx\u2032(r(S))\nfor each S \u2286 [n].\n3.2. Supermodularity. We now show that parking games are supermodular cost-sharing games.\nLemma 3.5. Let x = (x1, x2, . . . , xn) \u2208 PFn be a parking function. Then, cx is supermodular, i.e.,\ncx(S \u222a {i}) \u2212 cx(S) \u2264 cx(T \u222a {i}) \u2212 cx(T )\nfor all i \u2208 [n] and S \u2286 T \u2286 [n] \\ {i}.\nProof. Fix any i \u2208 [n] and S \u2286 T \u2286 [n] \\ {i}. Consider the arrival of car i immediately after the arrival of the cars in S. If spot xi is empty, then cx(S \u222a {i}) = cx(S) and the inequality is verified. Conversely, suppose there is a sequence of contiguously occupied spots starting at some spot s satisfying 1 \u2264 s \u2264 xi and ending at some spot t satisfying xi \u2264 t \u2264 n \u2212 1, implying the displacement of car i is t \u2212 xi + 1. Now, similarly consider the arrival of car i immediately after the arrival of the cars in T \u2287 S. Then, there is again a sequence of contiguously occupied spots, except this time starting at some spot s\u2032 satisfying 1 \u2264 s\u2032 \u2264 s and ending at some spot t\u2032 satisfying t \u2264 t\u2032 \u2264 n\u2212 1, implying the displacement of car i is t\u2032 \u2212 xi + 1 \u2265 t\u2212 xi + 1.\nSupermodularity captures the notion of increasing marginal costs, and it arises whenever costs are exacerbated by \u201ccongestion\u201d effects, such as in scheduling [11, 20, 24, 23]. Intuitively, parking games are supermodular because a car that arrives at an already busy street tends to displace significantly before it finds an unoccupied spot. More generally, Schulz and Uhan [24, Theorem 1] showed that the problem of minimizing a non-negative linear function over a supermodular polyhedron, which arises often in combinatorial optimization, has a supermodular objective value. In effect, parking games are a specific family within a broad class of games of general interest.\nIt follows from Lemma 3.5 that the core of parking games is typically empty (with the exception of modular cases in which x \u2208 Sn). For example, this can be verified from the fact that each car in isolation incurs no displacement.\n3.3. Expected Marginal Displacement. Let x \u2208 PFn be a parking function and cx : 2 [n] \u2192 N be its parking game. In this section, we present a polynomial-time algorithm to compute the Shapley value of cx.\nIn this setting, based on Equation (1), each car i is assigned a cost-share of\n\u03c6i(cx) = 1\nn!\n\u2211\n\u03c0\u2208Sn\ncx ({j \u2208 [n] : \u03c0(j) \u2264 \u03c0(i)}) \u2212 cx ({j \u2208 [n] : \u03c0(j) < \u03c0(i)}) . (5)\nNote that given any arrival order \u03c0 \u2208 Sn, the difference\ncx ({j \u2208 [n] : \u03c0(j) \u2264 \u03c0(i)}) \u2212 cx ({j \u2208 [n] : \u03c0(j) < \u03c0(i)})\ncorresponds to the displacement of car i upon its arrival in the order given by \u03c0. In effect, Equation (5) is a formula for the expected marginal displacement of car i assuming its arrival order is determined uniformly at random. We leverage this interpretation in what follows.\nWe first introduce some notation. Given a tuple z and an integer t \u2208 [n], let\nAt(z) = |{z \u2208 z : z \u2265 t+ 2}|\nbe the number of entries of z that are greater than or equal to t + 2. Similarly, given an integer s \u2208 [n], let\nBs(z) = |{z \u2208 z : z \u2264 s\u2212 2}|\nbe the number of entries of z that are less than or equal to s \u2212 2. Moreover, given a weakly increasing tuple z\u2032, and three nonnegative integers s, t, k \u2208 N with s \u2264 t, let Q(z\u2032, s, t, k) denote the number of size k sub-tuples of z\u2032 that, when treated as a preference k-tuple, cars park in spots s, . . . , t. Formally,\nQ(z\u2032, s, t, k) = |{(i1, i2, . . . , ik) : (z \u2032 i1 \u2212 z\u2032i1 + 1, z \u2032 i2 \u2212 z\u2032i1 + 1, . . . , z \u2032 ik \u2212 z\u2032i1 + 1) \u2208 PF \u2191 k,t\u2212s+1}|.\nWe obtain the following enumeration.\nLemma 3.6. Let x = (x1, x2, . . . , xn) \u2208 PFn be a parking function and x \u2032 = (x\u20321, x \u2032 2, . . . , x \u2032 n) \u2208 PF \u2191 n be its weakly increasing rearrangement. Fix any car j \u2208 [n] and let i := r(j) \u2208 [n] be its rank. Then, Equation (5) for car j is given by\n\u03c6j(cx) = \u03c6i(cx\u2032) = 1\nn!\nx\u2032 i\n\u2211\ns=1\nn\u22121 \u2211\nt=x\u2032 i\n(t\u2212 x\u2032i + 1)Q(x \u2032 i\u0302 , s, t, t\u2212 s+ 1)R(x\u2032 i\u0302 , s, t), (6)\nwhere\nR(x\u2032 i\u0302 , s, t) =\nAt(x\u2032 i\u0302 )\n\u2211\na=0\nBs(x\u2032 i\u0302 )\n\u2211\nb=0\n(\nAt(x \u2032 i\u0302 )\na\n)\nQ(x\u2032 i\u0302 , 1, s \u2212 2, b)(t \u2212 s+ 1 + a+ b)!(n \u2212 t+ s\u2212 b\u2212 a\u2212 2)!.\nProof. Note that the cost-share \u03c6j(cx) of car j under x is equal to the cost-share \u03c6i(cx\u2032) of car i under x\u2032. Therefore, consider the displacement of car i upon its arrival under x\u2032.\nUpon its arrival, car i drives to its preferred spot x\u2032i. If spot x \u2032 i is empty, car i parks there incurring zero displacement. Conversely, suppose spot x\u2032i is occupied. Then, there is a sequence of contiguously occupied spots starting at some spot s satisfying 1 \u2264 s \u2264 xi and ending at some spot t satisfying xi \u2264 t \u2264 n \u2212 1; note that t 6= n since, by assumption, car i is able to park. Now, fix any pair of possible values for s and t. This implies the following (for otherwise the block does not start at s and end at t):\n\u2022 Spot t + 1 is empty. As a consequence, car i parks in spot t + 1 incurring t \u2212 x\u2032i + 1 displacement. \u2022 If spot s\u2212 1 exists, it is empty as well.\nIn turn, the choice of s and t leads to three contiguous segments of parking spots in which cars may park prior to the arrival of car i:\n(1) Spots 1, . . . , s \u2212 2 (if these exist), (2) spots s, . . . , t, and (3) spots t+ 2, . . . , n (if these exist).\nNote that unlike spots s, . . . , t, spots 1, . . . , s \u2212 2 need not be contiguously occupied. Similarly, spots t+2, . . . , n need not be contiguously occupied. We now count the number of different subsets of cars that can occupy each of these three segments.\n(1) Since spot s \u2212 1 is empty, only those cars with preferences less than or equal to s \u2212 2 could possibly park in spots 1, . . . , s \u2212 2; there are Bs(xi\u0302) such cars. Only some number 0 \u2264 b \u2264 Bs(xi\u0302) of cars park in these spots prior to the arrival of car i. Therefore, for any fixed possible value of b, the number of size-b subset of cars that park in this segment is given by Q(x\u2032\ni\u0302 , 1, s \u2212 2, b).\n(2) Since spot s\u2212 1 is empty, spots s, . . . , t are contiguously occupied, and spot t+1 is empty, we need the number of size-(t \u2212 s + 1) subsets of cars that park in this segment. This is given by Q(x\u2032\ni\u0302 , s, t, t\u2212 s+ 1).\n(3) Since spot t + 1 is empty, only those cars with preferences greater than or equal to t + 2 could possibly park in spots t + 2, . . . , n; there are At(xi\u0302) such cars. Only some number 0 \u2264 a \u2264 At(xi\u0302) of cars park in these spots prior to the arrival of car i. Therefore, for any fixed possible value of a, the number of size-a subset of cars that park in this segment is given by Q(x\u2032\ni\u0302 , t+2, n, a). In fact, since x\u2032 \u2208 PF\u2191n, any size-a subset of cars with preference\ngreater than or equal to t+2 is able to park in the segment t+2, . . . , n, and it follows that\nQ(x\u2032 i\u0302 , t+ 2, n, a) =\n(\nAt(xi\u0302)\na\n)\n.\nNote that in (1) above, the term Q(x\u2032 i\u0302 , 1, s\u22122, b) does not generally simplify into a binomial because, depending on the preferences, certain cars might displace into spot s\u22121, which we thus far assume to be empty.\nNow, the choice of s, t, b, and a imply (t\u2212s+1)+b+a cars park prior to the arrival of car i, in one of (t\u2212s+1+b+a)! different arrival orders. Similarly, n\u22121\u2212((t\u2212s+1)+b+a) = n\u2212t+s\u2212b\u2212a\u22122 cars arrive after the arrival of car i, in one of (n \u2212 t+ s\u2212 b\u2212 a\u2212 2)! different arrival orders.\nSumming over the possible values for s, t, b, and a yields the sum portion of Equation 6:\nx\u2032 i\n\u2211\ns=1\nn\u22121 \u2211\nt=x\u2032 i\n(t\u2212 x\u2032i + 1)Q(x \u2032 i\u0302 , s, t, t\u2212 s+ 1)R(x\u2032 i\u0302 , s, t)\nwhere\nR(x\u2032 i\u0302 , s, t) =\nAt(x\u2032 i\u0302 )\n\u2211\na=0\nBs(x\u2032 i\u0302 )\n\u2211\nb=0\n(\nAt(x \u2032 i\u0302 )\na\n)\nQ(x\u2032 i\u0302 , 1, s \u2212 2, b)(t\u2212 s+ 1 + a+ b)!(n\u2212 t+ s\u2212 b\u2212 a\u2212 2)!\nFinally, there are n! different orders in which all cars could arrive, and the arrival order is realized uniformly at random. This completes the proof.\nAssuming oracle access to Q, Equation (6) can be evaluated in polynomial time in x for any car j \u2208 [n] (note that each of the summations involves at most n terms). As a final step, we show that Q can be evaluated in polynomial time as well.\nWe first introduce a some additional notation. Given a tuple z, let z\u2217 = min{z \u2208 z} be the value of its smallest entry and\nU(z) = (max{z, 1 + z\u2217} : z \u2208 z)\nbe the copy of z in which all entries with value equal to z\u2217 are increased by one. For example, if z = (3, 3, 4, 4, 5), then z\u2217 = 3 and U(z) = (4, 4, 4, 4, 5). We evaluate Q using the following recursive relation.\nLemma 3.7. Let z\u2032 = (z\u20321, z \u2032 2, . . . , z \u2032 |z\u2032|) \u2208 [w] |z\u2032| be a nonnegative, weakly increasing tuple where w \u2208 N, and let s, t, k \u2208 N with s \u2264 t. Then, Q(z\u2032, s, t, k) satisfies the following recursive relation:\nQ(z\u2032, s, t, k) =\n\n      \n      \n1, if k = 0, 0, if k > t\u2212 s+ 1 \u2228 k > |z\u2032|, Q(z\u2032 1\u0302 , s, t, k), if z\u20321 < s, Q(z\u2032, s+ 1, t, k), if z\u20321 > s, Q(U(z\u2032)1\u0302, s+ 1, t, k \u2212 1) +Q(z \u2032 1\u0302 , s, t, k), if z\u20321 = s.\n(7)\nUsing dynamic programming, Q(z\u2032, s, t, k) can be evaluated in time polynomial in |z\u2032| and k.\nProof. We first consider the base case. If we attempt to park more cars than there are spots (i.e., k > t\u2212 s+ 1), or more cars than there are preferences (i.e., k > |z\u2032|), the count is zero. Similarly, if we attempt to park no cars (i.e., k = 0), the count is one.\nTherefore, suppose 1 \u2264 k \u2264 min{t \u2212 s + 1, |z\u2032|}. In this case, there are three possibilities, each leading to a distinct recursive call (recall z\u20321 is the first entry of z \u2032):\n\u2022 If z\u20321 < s, then the first car cannot park in the segment s, . . . , t. Therefore, in this case, the count is the same as the count Q(z\u2032\n1\u0302 , s, t, k) upon the removal of the first car.\n\u2022 If z\u20321 = s, then there are two possibilities for the first car: it is selected as part of the size-k subset of cars, or it is not. In the first sub-case, no subsequent car can park in the spot s that starts the segment s, . . . , t. Therefore, in this sub-case, the count is the same as the count Q(U(z\u2032)1\u0302, s + 1, t, k \u2212 1) upon increasing the preference of any car that prefers spot s by one, removing the first car, increasing the segment start by one spot, and decreasing the number of cars to select by one. In the second sub-case, the count is the same as the count Q(z\u2032\n1\u0302 , s, t, k) upon the removal of the first car.\n\u2022 If z\u20321 > s, then the first car cannot park in the spot s that starts the segment s, . . . , t. Therefore, in this case, the count is the same as the count Q(z\u2032, s+ 1, t, k) upon increasing the segment start by one spot.\nFinally, note that a dynamic programming table of polynomial size can be implemented since its indices require at most |z\u2032| suffixes of z\u2032, s, t \u2264 |z\u2032|, and U need only be applied k-many times.\nWe thus obtain our main result.\nTheorem 3.8. There exists a polynomial-time algorithm to compute the Shapley value of parking games. Namely, the one given by the formulas in Lemma 3.6 and Lemma 3.7.\nProof. The correctness of the algorithm follows from the proofs of the lemmas. Its running time follows from Lemma 3.7 and the fact that, in Equation (6), the recursive relation Equation (7) is always evaluated passing weakly increasing z\u2032 and k satisfying |z\u2032|, k \u2264 n."
        },
        {
            "heading": "4. Conclusion",
            "text": "One can envision real-world systems in which displacement is a costly negative externality and, as a result, the parking rate at a given spot is a function of the displacement derived from its popularity. For example, in transportation settings, this might be because of increased environmental emissions. The results presented in this work form a methodological basis for operating such a system.\nThe results in this paper readily extend to (n,m)-parking functions by splitting them into small independent \u201cparking functions,\u201d in the style underlying Theorem 3.2. Moreover, because of Axiom 2.4, Theorem 3.8 can be applied given any characteristic function that is an affine function of the total displacement.\nWe conclude with directions for future research. As noted in Lemma 3.5, parking games are supermodular, which indicates that their core is empty (except for modular cases in which x \u2208 Sn). Therefore, the least core [27, 16] is an appropriate alternative solution concept. The least core is the set of optimal solutions to\nz\u2217 = min\n{\nz : n \u2211\ni=1\n\u03c6i = c([n]), \u2211\ni\u2208S\n\u03c6i \u2264 c(S) + z, for all S \u2286 [n]\n}\n,\nand z\u2217 is the least core value. Unlike the core, the least core is always non-empty. A least core allocation minimizes the worst-case dissatisfaction over all coalitions, and the least core value can be seen as the minimum amount that needs to be charged for defection (e.g., by a governing authority) in order to incentivize cooperation.\nSchulz and Uhan [24, 23] study the least core and least core value of supermodular cost-sharing games. They show that computing the least core value of an arbitrary supermodular game is strongly NP-hard [24, Theorem 2]. Interestingly, for scheduling games, not only can their Shapley value be computed in polynomial time, but it moreover happens to be a least core allocation [24, Theorem 3]. (However, they note that computing the least core value of scheduling games remains weakly NP-hard). Parking games are similar to scheduling games in that, as we have shown, they are supermodular and their Shapley value can be computed in polynomial time. However, they are different in that their Shapley value is not a least core allocation.\nLemma 4.1. The Shapley value of parking games is not a least core allocation.\nProof. It suffices to show a counterexample. Let x = (1, 1, 2) \u2208 PF3 and consider its parking game cx. We have cx(\u2205) = cx({1}) = cx({2}) = cx({3}) = cx({1, 3}) = cx({2, 3}) = 0, cx({1, 2}) = 1, and cx({1, 2, 3}) = 2. Its Shapley value is \u03c61(cx) = \u03c62(cx) = 5/6 and \u03c63(cx) = 2/6. However, its least core value is z\u2217 = 1 with the least core allocation \u03c61 = \u03c62 = 1 and \u03c63 = 0. In particular, for S = {1, 3} we have\n\u03c61(cx) + \u03c63(cx) = 5/6 + 2/6 = 7/6 1 = 0 + 1 = cx({1, 3}) + z \u2217.\nHowever, given the positive result on the complexity of computing the Shapley value of parking games, we ask whether a least core allocation or the least core value of parking games can be computed in polynomial time. Similarly, we ask whether the Shapley value of parking games is an approximate least core allocation (refer to [23, Section 2]).\nFinally, given the abundance of connections between parking functions and other combinatorial objects (refer to Section 1 for some examples), future work might consider mappings that preserve the total displacement statistic, in this way defining equivalent cooperative games except with a different combinatorial interpretation."
        },
        {
            "heading": "Acknowledgements",
            "text": "J. Elder was partially supported through an AWM Mentoring Travel Grant. P. E. Harris was supported through a Karen Uhlenbeck EDGE Fellowship. J. C. Mart\u0301\u0131nez Mori is supported by Schmidt Science Fellows, in partnership with the Rhodes Trust. Part of this research was performed while J. C. Mart\u0301\u0131nez Mori was visiting the Mathematical Sciences Research Institute (MSRI), now becoming the Simons Laufer Mathematical Sciences Institute (SLMath), which is supported by NSF Grant No. DMS-1928930. J. C. Mart\u0301\u0131nez Mori would like to thank A. Toriello for a helpful discussion."
        }
    ],
    "year": 2023
}