{
    "abstractText": "Green\u2019s function plays a significant role in both theoretical analysis and numerical computing of partial differential equations (PDEs). However, in most cases, Green\u2019s function is difficult to compute. The troubles arise in the following three folds. Firstly, compared with the original PDE, the dimension of Green\u2019s function is doubled, making it impossible to be handled by traditional mesh-based methods. Secondly, Green\u2019s function usually contains singularities which increase the difficulty to get a good approximation. Lastly, the computational domain may be very complex or even unbounded. To override these problems, we leverage the fundamental solution, boundary integral method and 1 ar X iv :2 20 4. 13 24 7v 1 [ cs .L G ] 2 8 A pr 2 02 2 Springer Nature 2021 LTEX template",
    "authors": [
        {
            "affiliations": [],
            "name": "Guochang Lin"
        },
        {
            "affiliations": [],
            "name": "Fukai Chen"
        },
        {
            "affiliations": [],
            "name": "Pipi Hu"
        },
        {
            "affiliations": [],
            "name": "Xiang Chen"
        },
        {
            "affiliations": [],
            "name": "Junqing Chen"
        },
        {
            "affiliations": [],
            "name": "Jun Wang"
        },
        {
            "affiliations": [],
            "name": "Zuoqiang Shi"
        }
    ],
    "id": "SP:b0be64614f484b2dc61871883e2ceec40d47c7dd",
    "references": [
        {
            "authors": [
                "Y.A. Melnikov"
            ],
            "title": "Some applications of the greens\u2019 function method in mechanics",
            "venue": "International Journal of Solids and Structures 13(11),",
            "year": 1977
        },
        {
            "authors": [
                "D.G. Duffy"
            ],
            "title": "Green\u2019s Functions with Applications",
            "year": 2015
        },
        {
            "authors": [
                "M.D. Greenberg"
            ],
            "title": "Applications of Green\u2019s Functions in Science and Engineering",
            "venue": "Courier Dover Publications,",
            "year": 2015
        },
        {
            "authors": [
                "J.D. Jackson"
            ],
            "title": "Classical electrodynamics",
            "venue": "American Association of Physics Teachers",
            "year": 1999
        },
        {
            "authors": [
                "K. Wapenaar",
                "J. Fokkema"
            ],
            "title": "Green\u2019s function representations for seismic interferometry",
            "venue": "Geophysics 71(4),",
            "year": 2006
        },
        {
            "authors": [
                "M.J. Hancock"
            ],
            "title": "Method of green\u2019s functions",
            "year": 2006
        },
        {
            "authors": [
                "S. Kukla",
                "U. Siedlecka",
                "I. Zamorska"
            ],
            "title": "Green\u2019s functions for interior and exterior helmholtz problems",
            "venue": "Scientific Research of the Institute of Mathematics and Computer Science 11(1),",
            "year": 2012
        },
        {
            "authors": [
                "K. Hornik",
                "M. Stinchcombe",
                "H. White"
            ],
            "title": "Multilayer feedforward networks are universal approximators",
            "venue": "Neural networks 2(5),",
            "year": 1989
        },
        {
            "authors": [
                "A. Krizhevsky",
                "I. Sutskever",
                "G.E. Hinton"
            ],
            "title": "Imagenet classification with deep convolutional neural networks. Advances in neural information processing systems",
            "year": 2012
        },
        {
            "authors": [
                "J. Devlin",
                "Chang",
                "M.-W",
                "K. Lee",
                "K. Toutanova"
            ],
            "title": "Bert: Pre-training of deep bidirectional transformers for language understanding",
            "year": 2018
        },
        {
            "authors": [
                "M. Dissanayake",
                "N. Phan-Thien"
            ],
            "title": "Neural-network-based approximations for solving partial differential equations. communications in Numerical Methods in Engineering",
            "year": 1994
        },
        {
            "authors": [
                "I.E. Lagaris",
                "A. Likas",
                "D.I. Fotiadis"
            ],
            "title": "Artificial neural networks for solving ordinary and partial differential equations",
            "venue": "IEEE transactions on neural networks",
            "year": 1998
        },
        {
            "authors": [
                "A.G. Baydin",
                "B.A. Pearlmutter",
                "A.A. Radul",
                "J.M. Siskind"
            ],
            "title": "Automatic differentiation in machine learning: a survey",
            "venue": "Journal of machine learning research",
            "year": 2018
        },
        {
            "authors": [
                "M. Raissi",
                "P. Perdikaris",
                "G.E. Karniadakis"
            ],
            "title": "Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations",
            "venue": "Journal of Computational Physics 378,",
            "year": 2019
        },
        {
            "authors": [
                "J. Sirignano",
                "K. Spiliopoulos"
            ],
            "title": "Dgm: A deep learning algorithm for solving partial differential equations",
            "venue": "Journal of computational physics 375,",
            "year": 2018
        },
        {
            "authors": [
                "E. Weinan",
                "B. Yu"
            ],
            "title": "The deep ritz method: a deep learning-based numerical algorithm for solving variational problems. Communications in Mathematics and Statistics",
            "year": 2018
        },
        {
            "authors": [
                "L. Lyu",
                "Z. Zhang",
                "M. Chen",
                "J. Chen"
            ],
            "title": "Mim: A deep mixed residual method for solving high-order partial differential equations",
            "venue": "Journal of Computational Physics,",
            "year": 2022
        },
        {
            "authors": [
                "W. Cai",
                "Xu"
            ],
            "title": "Z.-Q.J.: Multi-scale deep neural networks for solving high dimensional pdes",
            "venue": "Preprint at https://arxiv.org/abs/1910.11710",
            "year": 2019
        },
        {
            "authors": [
                "E. Weinan",
                "J. Han",
                "A. Jentzen"
            ],
            "title": "Deep learning-based numerical methods for high-dimensional parabolic partial differential equations and backward stochastic differential equations. Communications in Mathematics and Statistics",
            "year": 2017
        },
        {
            "authors": [
                "Z. Li",
                "N. Kovachki",
                "K. Azizzadenesheli",
                "B. Liu",
                "K. Bhattacharya"
            ],
            "title": "LTEX template GreenNet",
            "venue": "Nature",
            "year": 2021
        },
        {
            "authors": [
                "L. Lu",
                "P. Jin",
                "G. Pang",
                "Z. Zhang",
                "G.E. Karniadakis"
            ],
            "title": "Learning nonlinear operators via deeponet based on the universal approximation theorem of operators",
            "venue": "Nature Machine Intelligence",
            "year": 2021
        },
        {
            "authors": [
                "C.R. Gin",
                "D.E. Shea",
                "S.L. Brunton",
                "J.N. Kutz"
            ],
            "title": "Deepgreen: deep learning of green\u2019s functions for nonlinear boundary value problems",
            "venue": "Scientific reports 11(1),",
            "year": 2021
        },
        {
            "authors": [
                "L. Zhang",
                "T. Luo",
                "Y. Zhang",
                "Xu",
                "Z.-Q.J",
                "Z. Ma"
            ],
            "title": "MOD-Net: A Machine Learning Approach via Model-Operator-Data Network for Solving PDEs",
            "year": 2021
        },
        {
            "authors": [
                "J. Berg",
                "K. Nystr\u00f6m"
            ],
            "title": "A unified deep artificial neural network approach to partial differential equations in complex geometries",
            "venue": "Neurocomputing 317,",
            "year": 2018
        },
        {
            "authors": [
                "G. Lin",
                "P. Hu",
                "F. Chen",
                "X. Chen",
                "J. Chen",
                "J. Wang",
                "Z. Shi"
            ],
            "title": "BINet: Learning to Solve Partial Differential Equations with Boundary Integral Networks",
            "year": 2021
        },
        {
            "authors": [
                "A. Friedman",
                "D. Kinderlehrer"
            ],
            "title": "A one phase stefan problem",
            "venue": "Indiana University Mathematics Journal 24(11),",
            "year": 1975
        },
        {
            "authors": [
                "L. Lee",
                "R.J. LeVeque"
            ],
            "title": "An immersed interface method for incompressible navier\u2013stokes equations",
            "venue": "SIAM Journal on Scientific Computing",
            "year": 2003
        },
        {
            "authors": [
                "O.D. Kellogg"
            ],
            "title": "Foundations of Potential Theory",
            "year": 1967
        },
        {
            "authors": [
                "G.C. Hsiao",
                "W.L. Wendland"
            ],
            "title": "Boundary Integral Equations",
            "year": 2008
        },
        {
            "authors": [
                "S. Kapur",
                "V. Rokhlin"
            ],
            "title": "High-order corrected trapezoidal quadrature rules for singular functions",
            "venue": "SIAM Journal on Numerical Analysis 34(4),",
            "year": 1997
        },
        {
            "authors": [
                "B.K. Alpert"
            ],
            "title": "Hybrid gauss-trapezoidal quadrature rules",
            "venue": "SIAM Journal on Scientific Computing 20(5),",
            "year": 1999
        },
        {
            "authors": [
                "S. Zhao"
            ],
            "title": "High order matched interface and boundary methods for the helmholtz equation in media with arbitrarily curved interfaces",
            "venue": "Journal of Computational Physics 229(9),",
            "year": 2010
        },
        {
            "authors": [
                "A.N. Marques",
                "Nave",
                "J.-C",
                "R.R. Rosales"
            ],
            "title": "A correction function method for poisson problems with interface jump conditions",
            "venue": "Journal of Computational Physics 230(20),",
            "year": 2011
        }
    ],
    "sections": [
        {
            "text": "1\nneural networks to develop a new method for computing Green\u2019s function with high accuracy in this paper. We focus on Green\u2019s function of Poisson and Helmholtz equations in bounded domains, unbounded domains. We also consider Poisson equation and Helmholtz domains with interfaces. Extensive numerical experiments illustrate the efficiency and the accuracy of our method for solving Green\u2019s function. In addition, we also use the Green\u2019s function calculated by our method to solve a class of PDE, and also obtain high-precision solutions, which shows the good generalization ability of our method on solving PDEs.\nKeywords: Green\u2019s function, Partial differential equation, Boundary integral, Neural network\nMSC Classification: 35J08 , 65N35 , 65N80 , 68T07"
        },
        {
            "heading": "1 Introduction",
            "text": "Green\u2019s function plays a significant role in the theoretical research and engineering application of many widely-used partial differential equations (PDEs), such as the Poisson equation, Helmholtz equation, wave equation [1]. For one thing, Green\u2019s function can help solve PDEs and develop PDE theory. Given the Green\u2019s function of the differential operator, the solutions of a class of PDE problems can be written explicitly in an integral form where the Green\u2019s function serves as the integral kernel [2, 3]. Thanks to this explicit representation of the PDE solution, Green\u2019s function provides a powerful tool to study the analytical properties of PDEs. For the other, Green\u2019s function also has applications in many physical and engineering fields such as quantum physics [4], electrodynamics [5] and geophysics [6].\nBecause of the importance of the Green\u2019s function, the computation of the Green\u2019s function, especially in general domains, has attracted more and more attention in the past several decades. Theoretically, in [7], the analytical expression of Green\u2019s function of the Poisson equation of some simple cases is given, while [8] discussed Green\u2019s function of the Helmholtz equation interior or exterior of the unit disc. However, there is no analytical expression of the Green\u2019s function in general domains.\nIn the meanwhile, when its comes to computing Green\u2019s function numerically, there are also mainly three difficulties. Firstly, solving Green\u2019s functions is a high-dimensional problem. Compared with the original PDE, its dimension is doubled, which limits the application of traditional methods such as finite difference method (FDM) to solve Green\u2019s function directly. Secondly, Green\u2019s function is not smooth and has singular points, and thus more effort should be devoted to obtain high-precision solution. Thirdly, the domain of PDE may have complex geometrical structure or is even unbounded, adding more difficulty to the computation of Green\u2019s function.\nFortunately, the rapid development of neural network and deep learning in recent years [9] open up new possibilities for computing the Green\u2019s function. Owing to its universal approximation ability [10], especially for highdimensional functions, deep learning has made important progress in numerous fields such as image recognition [11], natural language processing [12] and many scientific computation problems. Note that the Green\u2019s function itself is the solution to a parametric PDE, we can consider using neural networks to solve this PDE.\nIn fact, tracing back to 1990s, there were works considering using neural networks to solve PDEs [13, 14]. In recent years, with the emergence of more powerful tools in machine learning, such as automatic differentiation [15], more and more attention has been paid to this field. The most natural idea is to use neural networks to approximate the solutions of PDEs directly and use the residuals of the PDEs and the boundary conditions to construct loss functions for training, e.g. PINN [16], DGM [17]. There are also many works that put forward different forms of loss functions, such as Deep Ritz[18] using variational form of the PDE and MIM [19] in which high-order PDEs are transformed to low-order systems. Except for the common choice of multilayer perceptron (MLP) as the network structure, in Deep Ritz method [18], the residual network (ResNet) structure is used while in [20] authors proposed multi-scale neural networks. In addition, there are also some works like Deep BSDE [21] where PDEs are solved by combining stochastic differential equations and neural networks which can avoid extra automatic differentiation of the networks.\nIn addition to solving a single equation, solving parametric equations and learning solution operators, i.e., the mapping from the parameter or the source item of PDEs to the corresponding solution has drawn extensive attention most recently. In [22], the Fourier neural operator (FNO) is proposed, where Fourier transformation is utilized to design the network architecture. In [23], another network structure composed of branch net and trunk net dealing with the PDE parameters and spatial coordinates respectively is proposed. Deep Green [24], and MOD-net [25] both use an analogous Green\u2019s function approximated by a neural network to represent the solution operator of nonlinear PDEs, which maps the source item or boundary value to the solution.\nHowever, some important issues that are not fully considered in these existing neural network-based methods, together with the complexity of Green\u2019s function itself, hinder the direct application of these methods to solve Green\u2019s function. Firstly, most of the works learning PDE solution operators are based on supervised learning, which requires a large amount of accurate solution data as the supervisory signal. The data is often obtained by solving PDE repeatedly, making the computational cost of preparing the training data very high. Besides, the learned solution operator usually performs badly outside the training set, and thus the generalization ability of these methods is limited by the coverage of the dataset. Secondly, some works use the neural network to directly approximate Green\u2019s function. The singularity of Green\u2019s function is\nnot taken into account, and extra differentiation with respect to the network input is required, which may degenerate the accuracy of the approximation. Lastly, for some problems such as electromagnetic wave propagation, solving PDEs in an unbounded domain is critical. However, existing methods use a neural network to approximate the solution operator or Green\u2019s function directly, which severely suffer from the difficulty of sampling in unbounded domains.\nTo address these issues and overcome the three difficulties in computing Green\u2019s function mentioned above, in this paper, we design a novel neural network-based formulation to compute Green\u2019s function directly. Firstly, we use the fundamental solution to decompose the Green\u2019s function into an explicit singular part and a smooth part such that the equation for Green\u2019s function is reformulated into a smooth high-dimensional equation. Neural network based methods are then designed to solve this high-dimensional PDE. In particular, we introduce two neural network formulation for this problem: derivative based GreenNet method (DB-GreenNet) and boundary integral equation based (BI-GreenNet) method. The idea of DB-GreenNet method is similar to PINN[16], DGM [17] and some other articles [26], which use the residual of equations and boundary conditions as the loss function, and directly approximate the objective function by a neural network. The derivative of the network with respect to network input appearing in the PDE residual is calculated by automatic differentiation. BI-GreenNet method is based on BINet [27], which is a method for solving parameterized PDEs. Based on potential layer theory, the PDE solution is transformed into the a boundary integral equation such that the PDE is automatically satisfied and no extra differentiation with respect to network input is needed. As is verified by our experiments, BI-GreenNet method only outperforms the DB-GreenNet method, but also can compute the Green\u2019s function in unbounded domains.\nBesides, the proposed neural network-based method can not only solve the Green\u2019s function of a single domain, but also that of interface problem. Interface problem refers to the problem in which an interface separates the computation domain into two parts, and the PDE parameters in the two parts are different, which widely appears in thermology [28], fluid mechanics [29], electrodynamics [5], and many other fields. Some jump conditions across the interface is required such that the solution are usually discontinuous and nonsmooth, making it a non-trival task to solve the interface problem. Therefore, solving the Green\u2019s function of the interface problem is also of great significance. Similarly, we can also derive the PDE for the Green\u2019s function of the interface problem and utilize the BI-GreenNet method to transform the PDE into the a boundary integral equation. Experiments also show that our method is of high accuracy.\nIn conclusion, the main advantages of our work are summarized as follows: First, we propose a neural network-based method to compute Green\u2019s function directly, which is a difficult problem for traditional methods to deal with. In addition, we also apply the Green\u2019s function computed by our formulation as\nthe solution operator to solve a class of PDEs with high accuracy. Second, compared with other methods of learning solution operators of PDEs, exact solutions are not required as the data set in our formulation. It not only reduces the complexity of data preparation, but also improves the generalization ability of the calculated Green\u2019s function as the solution operator. Third, although the Green\u2019s function is very complex, we make full use of the properties of the Green\u2019s function itself, such that simple architecture of hidden layer network like MLP and ResNet is enough to fit the target function. Last, our formulation can not only compute the Green\u2019s function in any bounded domain, but also that of the interface problems. In particular, by utilizing the boundary integral equation, the BIE-based formulation can also solve the Green\u2019s function in unbounded domains.\nThe rest of this paper is organized as follows. In Section 2, we recall the Green\u2019s function and the basic theoretical foundation, potential theory of our method. In Section 3, we introduce our BI-GreenNet method for solving Green\u2019s function. Extensive numerical experiments are shown in Section 4. At last, conclusion remarks are made in Section 5."
        },
        {
            "heading": "2 Preliminaries",
            "text": ""
        },
        {
            "heading": "2.1 Green\u2019s function",
            "text": "In this paper, for simplicity, we focus on the Dirichlet Green\u2019s function, i.e., Dirichlet boundary condition is imposed on the boundary of the computation domain. Green\u2019s function of other types can be easily handled with some small modifications. We consider both problems defined on a single domain, which can be further divided into interior problem and exterior problem, and the interface problem defined on two domains with different PDE parameters separated by an interface, as will be elaborated below."
        },
        {
            "heading": "2.1.1 Green\u2019s function on a single domain",
            "text": "As is presented in Fig. 1(a), \u2126 \u2282 Rd is a bounded domain, \u2126c = Rd\\\u2126. The interior problem and the exterior problem are formulated as \u2022 Interior problem, { Lu(x) = f(x) in \u2126, u(x) = g(x) on \u2202\u2126, (1) \u2022 Exterior problem,{ Lu(x) = f(x) in \u2126c,\nu(x) = g(x) on \u2202\u2126 + some boundary conditions at infinity, (2)\nwhere L is a differential operator. For brevity, we represent the equations in (1) and (2) as Lu(x) = f(x) in \u2126\u2217, (3) where \u2126\u2217 = \u2126 or \u2126c for the interior or the exterior problem, respectively.\nIn this paper, we focus on the Poisson equations and Helmholtz equations, i.e. L = \u2212\u2206 or \u2212\u2206\u2212k2, where k is the wave number. Helmholtz equations are the expansion of wave equation in frequency domain. It is used to describe wave propagation and is widely used in electromagnetics and acoustics. Because it involves wave propagation, Helmholtz equation often appears in the problem in unbounded domain, and because of the instability of Helmholtz equation, its numerical solution has always been an important problem.\nFor the equation (3), we can use the corresponding Green\u2019s function G(x) to give the analytical solution\nu(x) = \u222b \u2126\u2217 G(x, y)f(y)dy + \u222b \u2202\u2126 \u2202G(x, y) \u2202ny g(y)dsy, (4)\nwhere G(x, y) is a 2d-dimensional function satisfying{ LyG(x, y) = \u03b4(x\u2212 y), \u2200 x, y \u2208 \u2126\u2217,\nG(x, y) = 0, \u2200 x \u2208 \u2126\u2217, y \u2208 \u2202\u2126. (5)"
        },
        {
            "heading": "2.1.2 Green\u2019s function of the interface problem",
            "text": "As is shown in Fig. 1(b), \u2126 \u2282 Rd can be either bounded or unbounded. An interface \u03931 \u2282 Rd\u22121 divides \u2126 into two regions, i.e., inside (\u21261) and outside (\u21262) of the interface. The boundary of \u2126 is denoted as \u03932 = \u2202\u2126.\nThe interface problem is then formulated as: Lu = f, in \u2126, [u] = g1, [ 1 \u00b5 \u2202u \u2202n ] = g2, on \u03931,\nu = g3, on \u03932.\n(6)\nwhere L is an operator with different parameters inside and outside the interface \u03931, n is the outward normal vector on the interface \u03931. The bracket [\u00b7] denotes the jump discontinuity of the quantity approaching from \u21262 minus the one from \u21261. Moreover, some condition at infinity should be considered together for unbounded \u2126 to make the interface problem well-posed, which will be specified in detail in the experiments.\nSimilar to the single domain case, we focus on\n\u2022 Poisson equations: Lu = \u2212\u2207 \u00b7 ( 1\u00b5\u2207u), where \u00b5 is a piecewise constant parameter such that \u00b5 = \u00b51 in \u21261 and \u00b5 = \u00b52 in \u21262; \u2022 Helmholtz equations: Lu = \u2212\u2207 \u00b7 ( 1\u00b5\u2207u) \u2212 \u03b5k 2u, where \u00b5 and are also\npiecewise constant parameters such that \u00b5 = \u00b51, \u03b5 = \u03b51 in \u21261 and \u00b5 = \u00b52, \u03b5 = \u03b52 in \u21262.\nUtilizing the corresponding Green\u2019s function, the solution to the interface problem can be give by\nu(x) = \u222b \u2126 G(x, y)f(y)dy + \u222b \u03931 ( 1 \u00b5 \u2202G(x, y) \u2202ny g1(y)\u2212G(x, y)g2(y) ) dsy\n\u2212 \u222b\n\u03932\n1\n\u00b5\n\u2202G(x, y)\n\u2202\u03bdy g3(y)dsy,\n(7)\nwhere \u03bd is the outward normal vector on \u03932 and G(x, y) satisfies\uf8f1\uf8f4\uf8f4\uf8f4\uf8f2\uf8f4\uf8f4\uf8f4\uf8f3 LyG(x, y) = \u03b4(x, y), \u2200 x, y \u2208 \u2126, [G(x, y)] = [ 1 \u00b5 \u2202G(x, y) \u2202ny ] = 0, \u2200 x \u2208 \u2126, y \u2208 \u03931,\nG(x, y) = 0, \u2200 x \u2208 \u2126, y \u2208 \u03932.\n(8)"
        },
        {
            "heading": "2.2 Potential theory",
            "text": "In this subsection, we briefly introduce the potential theory, the key to the boundary integral based (BIE-based) method, which will later be utilized to solve Green\u2019s function. We first define the single and double layer potential operators corresponding to the differential operator Ly.\nDefinition 1 For any continuous function h defined on \u2126 \u00d7 \u2202\u2126, the single layer potential is defined as\nS[h](x, y) := \u2212 \u222b \u2202\u2126 G0(y, z)h(x, z)dsz , (9)\nand the double layer potential is defined as D[h](x, y) := \u2212 \u222b \u2202\u2126 \u2202G0(y, z) \u2202nz h(x, z)dsz . (10) where nz denotes out normal of \u2202\u2126 at z, and G0(x, y) is the fundamental solution corresponding to the differential operator Ly satisfying\nLyG0(x, y) = \u03b4(x\u2212 y) for all x, y \u2208 Rd. (11)\nBased on the layer potential theory of the Poisson equations and Helmholtz equations [30], we have the following theorem.\nTheorem 1 The single and double layer potentials have the following properties. (i) The single layer potential S[h](x, y) and double layer potential D[h](x, y) are well defined in \u2126\u2217 \u00d7 \u2126\u2217. (ii) The single and double layer potentials satisfy equation (15) and (16), i.e.\nLyS[h](x, y) = 0, LyD[h](x, y) = 0.\n(12)\n(iii) For y0 \u2208 \u2202\u2126, and the boundary near y0 is smooth, we have\nlim y\u2192y0\nS[h](x, y) = S[h](x, y),\nlim y\u2192y\u00b10\nD[h](x, y0) = D[h](x, y0)\u2213 1\n2 h(x, y0),\n(13)\nwhere y \u2192 y\u22120 and y \u2192 y + 0 mean converging in \u2126 and \u2126 c respectively.\nBy Theorem 1 we can see the solution to the PDE Lyu(x, y) = 0 can be written in a boundary integral form such that the PDE is satisfied automatically and we only need to solve the density function h to fit the boundary condition."
        },
        {
            "heading": "3 Neural network for Green\u2019s function",
            "text": ""
        },
        {
            "heading": "3.1 Removing the singularity",
            "text": "As mentioned above, the Green\u2019s function is a singular function. However, we can change the equation (5) into a smooth equation by using the fundamental solutions G0 of the original PDEs satisfying\nLyG0(x, y) = \u03b4(x\u2212 y) for all x, y \u2208 Rd, (14)\nwhich also can be seen as the Green\u2019s function of the whole space Rd. For many important PDEs, fundamental solutions can be written explicitly. For the Poisson equation \u2212\u2206u(x) = f(x) in R2, the fundamental solution is G0(x, y) = \u2212 12\u03c0 ln|x \u2212 y|, while the fundamental solution for the Helmholtz equation \u2212\u2206u(x) \u2212 k2u(x) = f(x) in R2 is G0(x, y) = i4H 1 0 (k|x \u2212 y|) where H10 is the Hankel function. The fundamental solutions of the high dimensional cases and more equations can be found in [31].\nFor the Green\u2019s function on a single domain, we set H(x, y) = G(x, y) \u2212 G0(x, y), then H is a smooth function and satisfies the following equation{\nLyH(x, y) = 0, \u2200 x, y \u2208 \u2126\u2217, H(x, y) = \u2212G0(x, y), \u2200 x \u2208 \u2126\u2217, y \u2208 \u2202\u2126.\n(15)\nFor the Green\u2019s function of the interface problem, the fundamental solution of the Poisson equation in R2 is G0(x, y) = \u2212\u00b5(y)2\u03c0 ln |x \u2212 y|, while the fundamental solution of the Helmholtz equation in R2 is G0(x, y) = i 4\u00b5(y)H 1 0 (k \u221a \u03b5(y)\u00b5(y)|x\u2212y|). Set H(x, y) = G(x, y)\u2212G0(x, y), then H satisfies the following equation LyH(x, y) = 0, \u2200 x, y \u2208 \u2126, [H(x, y)] = \u2212[G0(x, y)], \u2200 x \u2208 \u2126, y \u2208 \u03931,[ 1 \u00b5 \u2202H(x, y) \u2202ny ] = \u2212 [ 1 \u00b5 \u2202G0(x, y) \u2202ny ] , \u2200 x \u2208 \u2126, y \u2208 \u03931,\nH(x, y) = \u2212G0(x, y), \u2200 x \u2208 \u2126, y \u2208 \u03932.\n(16)\nAfter the singularity of the original equation is successfully eliminated, we will introduce how to use neural network to solve this problem by combining boundary integral method and neural network."
        },
        {
            "heading": "3.2 BI-GreenNet",
            "text": "After removing the singularity, we transform the problem (5) and (8) into problem (15) and (16). Although the singularities have been removed, problem (15) and (16) are still of high dimension such that traditional methods are difficult to handle. A natural idea to solve these problems is based on the automatic differentiation technique[15]. Like the Deep Ritz [18] and PINN[16], for the interior problem in bounded domain, we use a neural network H\u0303(x, y; \u03b8) to approximate the function H(x, y) of the problems (15) and (16). The derivative LyH\u0303(x, y; \u03b8) can be calculated by automatic differentiation. The loss function can be designed as the following form by combining the the residuals of the PDE and the boundary condition\nL(\u03b8) = N\u2211 i=1 |LyH\u0303(xinti , yinti ; \u03b8)|2 + \u03bb M\u2211 j=1 |H\u0303(xbdj , ybdj ; \u03b8) +G0(xbdj , ybdj )|2,\n(17) where \u03bb is the given weight and {xinti , yinti }Ni=1 are N points randomly sampled in \u2126\u00d7\u2126, while {xbdi , ybdi }Mj=1 are M points randomly sampled in \u2126\u00d7\u2202\u2126. After training, an approximation of the Green\u2019s function can be obtained by the sum of H(x, y) and the fundamental solution G0(x, y). We call this formulation derivative based GreenNet (DB-GreenNet) method.\nHowever, the derivative based method is not stable since extra differentiation with respect to the network input is needed, and the experiment results in Section 4 show the poor accuracy of DB-GreenNet. More importantly, it can not deal with the exterior problems since it is difficult to sample in unbounded domains.\nTherefore, we try to combine the Boundary Integral Network (BINet) [27], a PDE solver that can achieve high accuracy and also can deal with the exterior problem in the unbounded domain, to compute the Green\u2019s function. Note\nthat the partial differential equation LyH(x, y) = 0 in both (15) and (16) can be regarded as a parametric equation with x being the parameter. As is illustrated in Fig. 2, based on BINet, we can represent the smooth component H(x, y) in a boundary integral form such that the differential equation is satisfied automatically and only boundary conditions are to be fit. We call this fomulation boundary integral based GreenNet (BI-GreenNet) method and we will describe in detail how this method is implemented for both the single domain problem and the interface problem.\nSingle domain problem. For the single domain problems, because we mainly consider the Dirichlet problem in this paper, we choose the double layer potential operator expression in our formulation. H(x, y) can then be written as the kernel integral form\nH(x, y) = D[h](x, y) := \u2212 \u222b \u2202\u2126 \u2202G0(y, z) \u2202nz h(x, z)dsz, (18)\nwhere G0 is the fundamental solution and the function h(x, y) \u2208 \u2126\u2217 \u00d7 \u2202\u2126 is approximated by a hidden layer network, which can be selected as MLP or ResNet. The output of this network will satisfy the equation (15) automatically, and we only need to fit the boundary condition, which the loss function is based on. This is also the reason that this method can handle the exterior PDE problem in unbounded domain. The loss function is\nL = N\u2211 i=1 |D[h](xi, yi)\u2213 1 2 h(xi, yi) +G0(xi, yi)|2, (19)\nwhere {xi, yi}Nj=1 are N points randomly sampled in \u2126 \u00d7 \u2202\u2126. It can be seen that compared with the derivative-based method, the sampling points in the boundary integral method is much smaller. Another thing to note is the kernel function of the integral of the potential is singular, so we use the high accuracy\nquadrature rules in [32] and [33] for smooth boundary, and for the boundary of the polygon domain, we use Simpson\u2019s quadrature rule directly.\nInterface problem. For the interface problem, we use the single layer potential on \u03931 and the double layer potential on \u03932. H(x, y) can then be written as\nH(x, y) =  \u2212 \u222b \u03931 G0(y, z)h1(x, z)dsz, y \u2208 \u21261, \u2212 \u222b\n\u03931\nG0(y, z)h2(x, z)dsz \u2212 \u222b\n\u03932\n\u2202G0(y, z)\n\u2202\u03bdz h3(x, z)dsz, y \u2208 \u21262,\n(20) where h1, h2, h3 are approximated by three neural networks. Recall that in (16), three conditions on the boundary needs to be satisfied, i.e., two jump conditions on \u03931 and one boundary condition on \u03932. Therefore, the loss function of the interface problem is a weighted summation of three loss functions\nL = \u03bbjump1Ljump1 + \u03bbjump2Ljump2 + Lbd, (21)\nwhere \u03bbjump1 and \u03bbjump2 are the corresponding weights. Denote {xi}N1i=1 as the N1 points randomly sampled in \u2126, {yj}N2j=1 as the N2 points randomly sampled in \u03931, and {wk}N3k=1 as the N3 points randomly sampled in \u03932. The first jump condition [H(x, y)] = \u2212[G0(x, y)] gives the loss\nLjump1 = N1\u2211 i=1 N2\u2211 j=1 \u2223\u2223\u2223\u2223\u2212\u222b \u03931 G0(yj , z)h2(xi, z)dsz \u2212 \u222b \u03932 \u2202G0(yj , z) \u2202\u03bdz h3(xi, z)dsz\n+G0(xi, y + j ) + \u222b \u03931 G0(yj , z)h2(xi, z)dsz \u2212G0(x, y\u2212j ) \u2223\u2223\u2223\u22232 ,\n(22) where y+ and y\u2212 denote the outside and inside of \u03931, respectively. The second jump condition [\n1 \u00b5 \u2202H(x,y) \u2202ny\n] = \u2212 [ 1 \u00b5 \u2202G0(x,y) \u2202ny ] gives the loss\nLjump2 = N1\u2211 i=1 N2\u2211 j=1 \u2223\u2223\u2223\u2223 1\u00b52 [ \u2212 \u222b \u03931 \u2202G0(yj , z) \u2202ny h2(xi, z)dsz + 1 2 h2(xi, yj)\n\u2212 \u222b\n\u03932\n\u2202\n\u2202ny\n( \u2202G0(yj , z)\n\u2202\u03bdz\n) h3(xi, z)dsz + \u2202G0(xi, y + j )\n\u2202ny\n] .\n+ 1\n\u00b51 [\u222b \u03931 \u2202G0(yj , z) \u2202ny h2(xi, z)dsz + 1 2 h1(xi, yj)\u2212 \u2202G0(xi, y \u2212 j ) \u2202ny ]\u2223\u2223\u2223\u2223\u2223 2 .\n(23) The third loss is derived from the boundary condition H(x, y) = \u2212G0(x, y)\nLbd = N1\u2211 i=1 N3\u2211 k=1 \u2223\u2223\u2223\u2223\u2212\u222b \u03931 G0(wk, z)h2(xi, z)dsz \u2212 \u222b \u03932 \u2202G0(wk, z) \u2202\u03bdz h3(xi, z)dsz\n+ 1\n2 h3(xi, wk) +G0(xi, wk) \u2223\u2223\u2223\u22232 . (24)\nRemark: In this paper, we mainly consider the problem with one interface. In fact, the proposed method can be easily generalized to problems with multiple interfaces by setting different density functions on both sides of each interface and the boundary of the whole computation domain.\nIn conclusion, we summarize the algorithms of the DB-GreenNet and BIGreenNet for the single domain and interface problem in Algorithm 1 and 2, respectively.\nAlgorithm 1 Derivative based GreenNet method (DB-GreenNet)\nRequire: n1, n2,m,Epoch, \u03bb, l, neural network H(x, y; \u03b8) with parameters \u03b8 1: i\u21d0 0 2: while i < Epoch do 3: if i mod m=0 then 4: Randomly sample n1 points (xj1 , yj1) \u2208 \u2126\u00d7 \u2126 5: Randomly sample n2 points (xj2 , yj2) \u2208 \u2126\u00d7 \u2202\u2126 6: end if 7: L1 \u21d0 \u2211n1 j1=1 |LH(xj1 , yj1 ; \u03b8)|2\n8: L2 \u21d0 \u2211n2\nj2=1 |H(xj2 , yj2 ; \u03b8) +G0(xj2 , yj2)|2\n9: L\u21d0 L1 + \u03bbL2 10: \u03b8 \u21d0 \u03b8 \u2212 l\u2207\u03b8L 11: end while 12: G(x, y)\u21d0 H(x, y; \u03b8) +G0(x, y)"
        },
        {
            "heading": "4 Numerical Results",
            "text": "In the implementation, we choose a ResNet structure neural network introduced in Deep Ritz method [18]. In order to estimate the accuracy of the numerical solution p, we used the relative L2 error \u2016p \u2212 p\u2217\u20162/\u2016p\u2217\u20162, where p\u2217 is the exact solution. In the experiments, we choose the Adam optimizer to minimize the loss function, and we training the neural network on a single GPU of Tesla V100."
        },
        {
            "heading": "4.1 The Green\u2019s function of PDEs in bounded domains",
            "text": "In this subsection, we will use the GreenNet to compute Green\u2019s functions of Poisson equations and Helmholtz equations with different shapes of domains,\nAlgorithm 2 Boundary Integral based GreenNet method (BI-GreenNet)\nRequire: n,m,Epoch, l, and the neural network h(x, y; \u03b8) with parameters \u03b8 1: i\u21d0 0 2: while i < Epoch do 3: if i mod m=0 then 4: Randomly sample n points xj \u2208 \u2126\u2217 5: end if 6: Calculate loss function L based on (19) for single domain problem and\n(21) for the interface problem 7: \u03b8 \u21d0 \u03b8 \u2212 l\u2207\u03b8L 8: end while 9: Calculate H(x, y) based on (18) for single domain problem and (20) for\nthe interface problem 10: G(x, y)\u21d0 H(x, y) +G0(x, y)\nthen we will also use the Green\u2019s function solved by our methods to solve the PDEs with different source functions."
        },
        {
            "heading": "4.1.1 The Poisson Equation in the Unit Disc",
            "text": "In this experiment, we consider the Green\u2019s function of the Poisson equation in the unit disc. From the notes[7], we can know the Green\u2019s function of the unit disc of the Poisson equation has the explicit expression,\nG(x, y) = 1\n2\u03c0 ln\nr\nr\u2032\u03c1 , (25)\nwhere y \u2208 S1 and y\u2032 = y|y|2 , and r = |x\u2212y|, r \u2032 = |x\u2212y\u2032|, \u03c1 = |y|. Then we can compare the exact Green\u2019s function and the numerical Green\u2019s function calculated by GreenNet.\nIn the training process, for the BI-GreenNet method, we choose a ResNet with 8 blocks with 100 neurons per layer and ReLU activate function. For every 500 epochs, 80 new x are randomly generated. After 5 \u00d7 104 epochs of training with learning rate 1 \u00d7 10\u22125, we randomly generate 100 x and 800 y and compute the G(xi, yj) of these 8\u00d7104 points (xi, yj) to obtain an average relative L2 error of the Green\u2019s function G(x, y) of 4.66 \u00d7 10\u22123. For the DBGreenNet method, we used the neural network of same size. For every 500 epochs, 4 \u00d7 104 new (xi, yi) \u2208 \u2126 \u00d7 \u2126 and 1 \u00d7 104 new (xj , yj) \u2208 \u2126 \u00d7 \u2202\u2126 are randomly generated for the PDE loss and boundary condition loss respectively. Similarly, after 5 \u00d7 104 epochs, the relative L2 error of the Green\u2019s function G(x, y) is 5.54\u00d710\u22122. The comparison of relative L2 error can be seen in Table 1.\nThe Fig. 3 show the difference of y with fixed x between the exact Green\u2019s function G(x, y) of the unit disc and Green\u2019s function calculated by DBGreenNet and BI-GreenNet methods. We can see the relative L2 error of\nTable 1 Relative L2 error of the Green\u2019s function in section 4.1\nstructure Poisson equation Helmholtz equation\nBI-GreenNet 7.44e-3 8.56e-3 DB-GreenNet 5.54e-2 8.75e-1\n(a) DB-GreenNet (b) BI-GreenNet (c) DB-GreenNet (d) BI-GreenNet\nFig. 3 This figure show the difference between the exact Green\u2019s function G(x, y) of the unit disc and Green\u2019s function calculated by DB-GreenNet and BI-GreenNet methods with fixed x. (a) and (b) are the results of x = (0.8427, 0.4386). (c) and (d) are the results of x = (0.2923, 0.0674).\nBI-GreenNet method still small when x is close to the boundary. However, the error of derivative based method increases significantly."
        },
        {
            "heading": "4.1.2 The Poisson Equation in the L-shaped Domain",
            "text": "In this experiment, we compute the Green\u2019s function of a L-shaped domain by BI-GreenNet method and use it to solve Poisson equations with different source functions in the same domain. We will compare with the results by finite difference method. We consider the following PDE problem,\n\u2212\u2206u(x) = f(x) in \u2126, u(x) = 0 on \u2202\u2126.\n(26)\nThe \u2126 is a L-shaped domain and can be seen in the Fig. 4. We use a BINet with 6 blocks and 80 neurons per layer as the hidden layer network. After training, we also obtain the accurate approximation of Green\u2019s function G(x, y) of the L-shaped domain, and then we use integral\nu(x) = \u222b \u2126 G(x, y)f(y)dy (27)\nto calculate the numerical solution of the PDE problem (26). In this experiment, we consider a piecewise constant source term f . Specifically, we divided \u2126 into 300 small rectangles and a constant in [-30,30] is randomly given on each small rectangle, respectively. The examples of the function f can seen in the Fig. 4 (a) and (d). The Fig. 4 gives two example with randomly f , and shows that although the source function f is complex, our method can also\nget accurate solutions. The exact solutions are computed by finite difference method with the sufficiently small stepsize.\nFor comparison, we also used finite difference method (FDM) with two discrete stepsizes, 1/80 (=1.25e-2) and 1/160 (=6.25e-3) to solve this equation. The numbers of discrete points in \u2126 are 19521 and 77441 respectively. We randomly generate 100 different source functions f and computed the relative L2 errors with these methods, the results are shown in the Fig. 5 and Table 2. From these results, we can find that even if the number of parameters is less than the number of discrete points in the FDM method, our method can still achieve the higher accuracy, and it should be noted that the parameters of BI-GreenNet are used to represent the Green\u2019s function, the solution operator from the source function to the solution function, not just a single solution, but the value of the discrete points of FDM method only represent the single solution. It can be seen that BI-GreenNet represent more complex information with fewer parameters and achieve higher accuracy in this experiment. In the meanwhile, because using our method to solve the equations for different source term functions does not need to retrain the network, but only needs integration, so in the practical implementation, the speed of solving the equations is also very fast."
        },
        {
            "heading": "4.1.3 The Helmholtz Equation in the Square.",
            "text": "In this experiment, we consider the Green\u2019s function of the following equation\n\u2212\u2206u(x)\u2212 4u(x) = f(x) in \u2126, u(x) = 0 on \u2202\u2126,\n(28)\nwhere \u2126 = [\u22121, 1]2. In this example, we will compare the performance of DBGreenNet and BI-GreenNet on Helmholtz equation. The network structure and training details of the two methods are consistent with the first example. Because the Green\u2019s function of a Helmholtz equation is complex number, we add a output of the network to represent the imaginary part. In this example, for some fixed xi, we can solve the equation (15) about y as the ground truth, but as mentioned before, it should be noted that the equation has to be solved again for each x, so the computation cost is very expensive. Table 1 also show the relative L2 error between ground truth and the numerical solution of Green\u2019s function. We can find DB-GreenNet method failed. This is because the oscillation of Helmholtz solution will increase the difficulty for derivative based method. The superiority of BI-GreenNet method over derivative based method is shown here.\nNext, we also show the ability on solving the Helmholtz equation in \u2126 by Green\u2019s function computed by BI-GreenNet method. We consider using the Green\u2019s function to solve the equations with different source terms f , where f\nbelongs to the following set\n{((c21 + c22)\u03c02 \u2212 4)f1(c1\u03c0x1)f2(c2\u03c0x2) : c1, c2 = 1, \u00b7 \u00b7 \u00b7 , 5}, (29)\nwhere x = (x1, x2) \u2208 \u2126 and f1(a), f2(a) \u2208 {\u00b1 sin(a)}. It can be seen that f has 100 combinations. The histgram of the figure 6 show the distribution of the relative L2 error between the exact solutions and the solutions calculated by our Green\u2019s function with different f . The relative L2 error of the solution of the equation is between 1\u00d7 10\u22122 and 4.5\u00d7 10\u22122, which shows the stability of solving the equation with Green\u2019s function."
        },
        {
            "heading": "4.2 The Green\u2019s function of PDEs in unbounded domains",
            "text": "The exterior PDE problems in unbounded domains are common in scattering problems and electromagnetic problems, which is closely related to Helmholtz equation. Therefore, it will be very helpful for analyzing the properties of domains to study the Green\u2019s function of Helmholtz equation in unbounded domains. So in this subsection, we focus on the Green\u2019s functions of following Helmholtz equation problems\n\u2212\u2206u(x)\u2212 k2u(x) = f(x) in \u2126c, u(x) = 0 on \u2202\u2126,\nlim |x|\u2192\u221e\n( \u2202\n\u2202r \u2212 ik)u(x) = o(|x|\u22121/2),\n(30)\nwhere k is the wavenumber and the limit of |x| is called the Sommerfeld condition. In this subsection, we consider two shapes that often appear in practical problems, the bow-tie domain and the U-shaped domain.\nWe will compare the Green\u2019s function calculated by BI-GreenNet method and the exact Green\u2019s function. The exact Green\u2019s function G(x, y) is derived by calculating the H(x, y) of the problem (15) through boundary integral method first. However, as mentioned before, the equation (15) is a 4-dimensional problem, we can only solve this equation with some fixed points x. For the every given point x, it is required to solve the Helmholtz equation\nin an unbounded domain. Therefore, for a large number of different points x, the cost of obtaining H(x, y) is very large. Although our method solves the Green\u2019s functions in unbounded domains, we cannot show the results in whole domains, and the domains concerned in practical problems is often bounded, so we will analyze the accuracy and show the results in sufficiently large bounded domains."
        },
        {
            "heading": "4.2.1 The Helmholtz equation out of the bow-tie antenna.",
            "text": "In this experiment, let us consider a more practical scenario, a receiving antenna electromagnetic simulation problem. Assume we have a bow-tie antenna of 1 in length and 1 in width, which is a type of broad-bandwidth antenna. Its structure is 2 dimensional, implemented on a printed circuit board. Therefore, for simplicity, we consider simulating the field within the 2-D space. The shape of the bow-tie antenna can be seen in Figure 7. We consider the Green\u2019s function of Helmholtz equation out of the bow-tie domains, and in this experiment, we consider the wavenumber k = \u03c0 \u2212 1/2.\nWe also use the GreenNet formulation to compute the Green\u2019s function in the domain outside the bow-tie antenna. Because the domain is unbounded, we can only used the BI-GreenNet method. The neural network of this experiement has the similar architecture as the previous and the training process is also similar. We choose the ResNet architecture with 8 blocks and 100 neurons per layaer. We select 500 points equidistant on each edge of the boundary and randomly sample 100 points x out of the domain \u2126 for calculating potential. After every 50 epochs of training, we will resample 100 points x. After training, we randomly sample the 100 x and select y at an interval of 0.1 in the domain [\u22126, 6]2\\\u2126. By computing the G(xi, yj) on these point pairs (xi, yj) we can find the relative L\n2 error of the Green\u2019s function is 4.05e-2, which also achieve the high accuracy in exterior problem. When the wave number increases and the domain of the PDE problem becomes more complex, a high-precision Green\u2019s function approximation is still obtained. We randomly choose two points x = (\u22120.1163,\u22121.0780) and x = (0.3941,\u22120.1163), and show the results of G(x, y) in Fig. 7. We can see that compared with the exact solution, both the real part and the imaginary part have almost the same performance."
        },
        {
            "heading": "4.2.2 The Helmholtz Equation out of a U-shape Domain",
            "text": "The U-shaped domain is also a common consideration area. In this experiment, we assume the wavenumber k = 1 and the setting of the domain is shown in Fig. 8. We also used the BI-GreenNet with a ResNet architecture network that has 8 blocks and 100 neurons per layer. We select 400 points equidistant on each edge of the boundary and randomly sample 150 points x out of the domain \u2126 for calculating potential. After every 100 epochs of training, we will resample 150 points x.\nAfter training, we randomly sample the 200 xs and select y at an interval of 0.4 in the domain [\u22128, 8]2\\\u2126. By computing the G(xi, yj) on these point pairs, the relative L2 error of the Green\u2019s function is 2.06e-2, which also achieve the high accuracy. We choose two points x = (0.2, 1.2) and x = (\u22121.9689\u22122.0929) and show the G(x, y) of the two points in Fig. 8. We can also see that both the real part and the imaginary part are very close to the exact solution."
        },
        {
            "heading": "4.3 The Green\u2019s function of the interface problem",
            "text": ""
        },
        {
            "heading": "4.3.1 The Poisson equation in a square with flower-shaped interface",
            "text": "Let \u2126 be the square {(x, y) : |x| \u2264 1, |y| \u2264 1}, the interface \u0393 is parameterized by (a cos t\u2212b cosnt cos t, a sin t\u2212b cosnt sin t) with t \u2208 [0, 2\u03c0], which is a flowershaped interface widely used in [34, 35]. We choose two set of parameters (a, b, n) = (0.5, 0.15, 5) and (a, b, n) = (0.5, 0.1, 8). For the first parameter, we choose \u00b51 = 1, \u00b52 = 2 while for the second parameter, we take \u00b51 = 2, \u00b52 = 1, as is shown in Fig. 9.\nWe impose Dirichlet boundary condition on \u2202\u2126 such that the Green\u2019s function to this problem satisfies (8) along with G(x, y) = 0, \u2200x \u2208 \u2126, y \u2208 \u2202\u2126. We sample 800 points on both \u0393 and \u2202\u2126 for boundary integral. In the training process, we choose a ResNet with 8 blocks with 100 neurons per layer. For every 500 epochs, 100 new x is randomly generated. After after 105 epochs of training, we fix 100 newly generated x and compute the average relative L2 error of the Green\u2019s function G(x, y). Further more, for two fixed x in \u21261 and \u21262 respectively, we compare the exact Green\u2019s function (obtained by traditional boundary integral method) and the numerical solution obtained by neural network.\nThe numerical results for the second set of parameters is given in Fig.10. The average relative L2 error of the Green\u2019s function G(x, y) is 1.85 \u00d7 10\u22122. For x = (\u22120.0960, 0.2626) \u2208 \u21261, the relative L2 error of the Green\u2019s function is 0.78 \u00d7 10\u22122, while for x = (0.8342,\u22120.4661) \u2208 \u21262, the relative L2 error is 1.79%. The numerical results for the second set of parameters is given in Fig.11. The average relative L2 error of the Green\u2019s function G(x, y) is 3.34 \u00d7 10\u22122. For x = (\u22120.1512,\u22120.1410) \u2208 \u21261, the relative L2 error of the Green\u2019s function is 0.81 \u00d7 10\u22122, while for x = (0.7288, 0.2861) \u2208 \u21262, the relative L2 error is\n1.37 \u00d7 10\u22122. The results both show that the proposed method can solve the Green\u2019s function for the interface problem accurately."
        },
        {
            "heading": "4.3.2 The Helmholtz equation in R2 with square interface",
            "text": "In this experiment, we consider the interface problem of the Helmholtz equation (6) with the interface \u0393 = {(x, y) : |x| = 1 or |y| = 1}. On the interface 800 points are sampled for the boundary integral. Take \u00b51 = 2, \u00b52 = 1, \u03b51 = 1, \u03b52 = 4, k = 2 in the Helmholtz equation. The Sommerfeld condition is required at infinity, i.e., lim|x|\u2192\u221e( \u2202 \u2202r \u2212 ik \u221a \u03b52\u00b52)u(x) = o(|x|\u22121/2), implying that lim|y|\u2192\u221e( \u2202 \u2202r \u2212 ik \u221a \u03b52\u00b52)G(x, y) = o(|x|\u22121/2), which is automatically satisfied if H(x, y) is written in the boundary integral form. Therefore, only the two jump conditions need to be fit since the partial differential equation is already satisfied using the boundary integral representation.\nThe network and training hyperparameters are set the same as those in the Poisson interface problem. The average relative L2 error of the Green\u2019s function G(x, y) is 4.63\u00d710\u22122. For two fixed x, the exact Green\u2019s function (obtained by traditional boundary integral method), numerical solution obtained by neural network and error is shown in Fig. 12, implying the effectiveness of the proposed method in computing Green\u2019s function.\nFurthermore, after the Green\u2019s function is learnt by the neural network, to show the generalization ability of the proposed method in solving PDEs, we consider the homogenuous case of problem (6), i.e., f \u2261 0, while the two jump conditions g1 and g2 are generated by the superposition of a class of parameterized function. Specifically, the exact solution to the interface problem is designed as\nu(x, y) =  I\u2211 i=1 c1(i)e j(k1(i)x+k2(i)y) \u221a \u03b51\u00b51 , (x, y) \u2208 \u21261,\nI\u2211 i=1 c2(i)H 1 0 (k \u221a \u03b52\u00b52 \u221a (x\u2212 x0(i))2 + (y \u2212 y0(i))2), (x, y) \u2208 \u21262,\n(31) where {c1, c2, k1, k2, x0, y0} is a set of randomly generated parameters satisfying k21 + k 2 2 = k\n2 and (x0(i), y0(i)) \u2208 \u21261, \u2200i. We set c1, c2 \u223c U [0, 1], k1 = k cos \u03b8, k2 = k sin \u03b8 with \u03b8 \u223c U [0, 2\u03c0], x0, y0 \u223c U [\u22120.8, 0.8]. g1 and g2 can be directly computed using the exact solution. Once the Green\u2019s function to this interface problem is obtained, the solution to the PDE can be directly computed by\nu(x) = \u222b \u0393 ( 1 \u00b5 \u2202G(x, y) \u2202ny g1(y)\u2212G(x, y)g2(y) ) dsy.\nWe take I = 3 and randomly generate 100 sets of parameters, and solve the interface problem using the learnt Green\u2019s function. The histogram of the relative L2 errors of the numerical solutions to the 100 equations are shown in Fig. 13 (a), while the solution and corresponding error for one set of parameters are given in Fig. 13. It can be seen that all the relative L2 errors are below 4%. Therefore, not only can the proposed method accurately solve a class of PDEs accurately, but also this method has natural generalization ability over the PDE information. The parameters of the exact solution corresponding to Fig. (13) (b)-(f) are given in Table 3."
        },
        {
            "heading": "5 Conclusion",
            "text": "In this paper, a novel neural network based method for learning Green\u2019s function is proposed. By utilizing the fundamental solution to remove the singularity in Green\u2019s function, the PDEs required for Green\u2019s function is reformulated into a smooth high-dimensional problem. Two neural network based methods, DB-GreenNet and BI-GreenNet are propsed to solve this highdimensional problem. The DB-GreenNet uses the neural network to directly approximate Green\u2019s function and take the residual of the differential equation and the boundary conditions as the loss. The BI-GreenNet is based on the recently proposed BINet, in which the solution is written in an boundary integral form such that the PDE is automatically satisfied and only boundary terms need to be fitted.\nExtensive experiments are conducted and three conclusions can be drawn from the results. Firstly, the proposed method can effectively learn the Green\u2019s function of Poisson and Helmholtz equations in bounded domains, unbounded domains and domains with interfaces with high accuracy. Secondly, BI-GreenNet method outperforms DB-GreenNet method in the accuracy of Green\u2019s function and the capability to handle problems in unbounded domains. Lastly, the Green\u2019s function obtained can be utilized to solve a class of PDEs accurately, and shows good generalization ability over the PDE data, including the source term and boundary conditions.\nAlthough the proposed method exhibits great performance in computing Green\u2019s function, the dependence on the fundamental solution hinders the application of this method in varying coefficient problems or equations without explicit fundamental solution. This will be further investigated in the future.\nAcknowledgments. This work received support by the NSFC under grant 12071244 and the NSFC under grant 11871300.\nDeclarations\nNo conflict of interest exits in the submission of this manuscript, and manuscript is approved by all authors for publication. We would like to declare that the work described was original research that has not been published previously, and not under consideration for publication elsewhere, in whole or in part. All the authors listed have approved the manuscript that is enclosed."
        }
    ],
    "title": "BI-GreenNet: Learning Green\u2019s functions by boundary integral network",
    "year": 2022
}