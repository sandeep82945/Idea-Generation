Modern software development involves collaborative efforts and reuse of existing code, which reduces the cost of developing new software. However, reusing code from existing packages exposes coders to vulnerabilities in these dependencies. We study the formation of dependency networks among software packages and libraries, guided by a structural model of network formation with observable and unobservable heterogeneity. We estimate costs, benefits, and link externalities of the network of 696,790 directed dependencies between 35,473 repositories of the Rust programming language using a novel scalable algorithm. We find evidence of a positive externality exerted on other coders when coders create dependencies. Furthermore, we show that coders are likely to link to more popular packages of the same software type but less popular packages of other types. We adopt models for the spread of infectious diseases to measure a package’s systemicness as the number of downstream packages a vulnerability would affect. Systemicness is highly skewed with the most systemic repository affecting almost 90% of all repositories only two steps away. *This version: February 22, 2024. Contact: cfritz@psu.edu, co-pierre.georg@uct.ac.za, angelo.mele@ jhu.edu, and michael.schweinberger@psu.edu. We wish to thank participants at the Network Science in Economics 2023 at Virginia Tech, 2023 BSE Summer Forum Networks Workshop, Southern Economic Association Annual Meeting 2023 as well as seminar participants at Georgetown University and UPenn for helpful comments and suggestions. The authors acknowledge support from the German Research Foundation award DFG FR 4768/1-1 (CF), Ripple’s University Blockchain Research Initiative (CPG), the U.S. Department of Defense award ARO W911NF-21-1-0335 (MS, CF), and the U.S. National Science Foundation awards NSF DMS-1513644 and NSF DMS-1812119 (MS). Mele acknowledges support from an IDIES Seed Grant from the Institute for Data Intensive Engineering and Science at Johns Hopkins University and partial support from NSF grant SES 1951005. 1 conclusion The network of dependencies among software packages is an interesting laboratory to study network formation and externalities. Indeed, the creation of modern software gains efficiency by re-using existing libraries; on the other hand, dependencies expose new software packages to bugs and vulnerabilities from other libraries. This feature of the complex network of dependencies motivates the interest in understanding the incentives and equilibrium mechanisms driving the formation of such networks. In this paper, we estimate a directed network formation model to undertake a structural analysis of the motives, costs, benefits and externalities that a maintainer faces when developing a new software package. The empirical model allows us to disentangle observable from unobservable characteristics that affect the decisions to form dependencies to other libraries. We find evidence that coders create positive externalities for other coders when creating a link. This raises more questions about the formation of dependency graphs. We study how vulnerable the observed network is to vulnerability contagion and show that ensuring that even a relatively small number of packages is vulnerability free effectively curbs the extent of contagion. As a next step, we could study how changing the parameters of the estimated network formation model affects vulnerability contagion. The presence of an externality implies that maintainers may be inefficiently creating dependencies, thus increasing the density of the network and the probability of contagion. The extent of this risk and the correlated damage to the system is of paramount importance and we plan to explore it in future versions. Second, while we have focused on a stationary realization of the network, there are important dynamic considerations in the creation of these dependencies. While the modeling of forward-looking maintainers may be useful to develop intuition about intertemporal strategic incentives and motives, we leave this development to future work. Finally, we have focused on a single language, but the analysis can be extended to other languages as well, such as Java, C++ and others. a computational details for estimation Estimation of our model is challenging because of the normalizing constants ckk in the likelihood and the discrete mixture model for the block assignments. We bypass these issues by extending recently developed approximate two-step estimation methods to directed networks, estimating the structural parameters in two steps.