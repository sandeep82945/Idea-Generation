{
    "abstractText": "To address a business need, most organizations allow employees to use their own devices to enhance productivity and job satisfaction. For this purpose, the Bring Your Own Device (BYOD) policy provides controllable access for employees to organize data through their personal devices. Although the BYOD practice implies plenty of advantages, this also opens the door to a variety of security risks. This study investigates these security risks and proposes a complementary encryption approach with a digital signature that uses symmetric and asymmetric algorithms, depending on the organization\u2019s digital certificate, to secure sensitive information stored in employees\u2019 devices within the framework of BYOD policies. The method uses Advanced Encryption System (AES), Blowfish, RSA and ElGamal with a digital signature to achieve strong encryption and address critical security considerations such as user authentication, confidentiality and data integrity. The proposed encryption approach offers a robust and effective cryptographic solution for securing sensitive information in organizational settings that involve BYOD policies. The study includes experimental results demonstrating the proposed approach\u2019s efficiency and performance, with reasonable encryption and decryption times for different key and file sizes. The results of the study revealed that AES and Blowfish have the best execution time. AES has a good balance of security and performance. RSA performs better than ElGamal in encryption and signature verification, while RSA is slower than ElGamal in decryption. The study also provides a comparative analysis with previous studies of the four encryption algorithms, highlighting the strengths and weaknesses of each approach.",
    "authors": [
        {
            "affiliations": [],
            "name": "Manal Rajeh AlShalaan"
        },
        {
            "affiliations": [],
            "name": "Suliman Mohamed Fati"
        }
    ],
    "id": "SP:341e127aa7264875d6af816fff8839479822d3e6",
    "references": [
        {
            "authors": [
                "C.S. Bhusal"
            ],
            "title": "Systematic review on social engineering: Hacking by manipulating humans",
            "venue": "J. Inf. Secur. 2021,",
            "year": 2021
        },
        {
            "authors": [
                "R. Palanisamy",
                "A.A. Norman",
                "M.L. Mat Kiah"
            ],
            "title": "BYOD Policy Compliance: Risks and Strategies in Organizations",
            "venue": "J. Comput. Inf. Syst",
            "year": 2022
        },
        {
            "authors": [
                "G. Hertel",
                "D.L. Stone",
                "R.D. Johnson"
            ],
            "title": "The Wiley Blackwell Handbook of the Psychology of the Internet at Work",
            "year": 2017
        },
        {
            "authors": [
                "Business Wire. Bitglass 2020 BYOD Report"
            ],
            "title": "Increased Remote Work Drives BYOD, But Security Is Not Keeping Pace",
            "venue": "Available online: https://www.businesswire.com/news/home/20200708005267/en/Bitglass-2020-BYOD-Report-Increased-RemoteWork-Drives-BYOD-but-Security-is-Not-Keeping-Pace",
            "year": 2023
        },
        {
            "authors": [
                "E. Turban",
                "C. Pollard",
                "G. Wood"
            ],
            "title": "Information Technology for Management: On-Demand Strategies for Performance, Growth and Sustainability",
            "year": 2018
        },
        {
            "authors": [
                "A.A. Bahaddad",
                "K.A. Almarhabi",
                "A.M. Alghamdi"
            ],
            "title": "Factors Affecting Information Security and the Implementation of Bring Your Own Device (BYOD) Programmes in the Kingdom of Saudi Arabia (KSA)",
            "venue": "Appl. Sci. 2022,",
            "year": 2022
        },
        {
            "authors": [
                "R. Ntwari",
                "A.E. Habinka",
                "F. Kaggwa"
            ],
            "title": "BYOD systematic literature review: A layered approach",
            "venue": "Eur. J. Technol. 2022,",
            "year": 2022
        },
        {
            "authors": [
                "P. Shrestha",
                "R.N. Thakur"
            ],
            "title": "Study on Security and Privacy Related Issues Associated with BYOD Policy in Organizations in Nepal",
            "venue": "LBEF Res. J. Sci. Technol. Manag. 2019,",
            "year": 2019
        },
        {
            "authors": [
                "L. Maglaras",
                "I. Almomani"
            ],
            "title": "Digitization of healthcare sector: A study on privacy and security concerns",
            "venue": "Korean Inst. Commun. Inf. Sci. 2023,",
            "year": 2023
        },
        {
            "authors": [
                "A.A. Emmanuel",
                "A.O. Marion",
                "O. Aderemi",
                "O.O. Olugbara"
            ],
            "title": "Computational complexity of RSA and ElGamal cryptographic algorithms on video data",
            "venue": "J. Theor. Appl. Inf. Technol",
            "year": 2022
        },
        {
            "authors": [
                "M.T. Rouaf",
                "A. Yousif"
            ],
            "title": "Performance Evaluation of Encryption Algorithms in Mobile Devices",
            "venue": "In Proceedings of the 2020 International Conference on Computer, Control, Electrical, and Electronics Engineering (ICCCEEE), Khartoum, Sudan,",
            "year": 2021
        },
        {
            "authors": [
                "M.M. Abay"
            ],
            "title": "Performance Analysis of Blowfish, IDEA and AES Encryption Algorithms",
            "venue": "Int. J. Res. Anal. Rev. 2020,",
            "year": 2020
        },
        {
            "authors": [
                "M. Alenezi",
                "M. Usama",
                "K. Almustafa",
                "W. Iqbal",
                "M.A. Raza",
                "T. Khan"
            ],
            "title": "An efficient, secure, and queryable encryption for nosql-based databases hosted on untrusted cloud environments",
            "venue": "Int. J. Inf. Secur. Priv",
            "year": 2019
        },
        {
            "authors": [
                "D. Commey",
                "S. Griffith",
                "J. Dzisi"
            ],
            "title": "Performance comparison of 3DES, AES, Blowfish and RSA for Dataset Classification and Encryption in Cloud Data Storage",
            "venue": "Int. J. Comput. Appl",
            "year": 2020
        },
        {
            "authors": [
                "Z.C. Oleiwi",
                "W.A. Alawsi",
                "W.C. Alisawi",
                "A.S. Alfoudi",
                "L.H. Alfarhani"
            ],
            "title": "Overview and Performance Analysis of Encryption Algorithms",
            "venue": "J. Phys. Conf. Ser",
            "year": 2020
        },
        {
            "authors": [
                "M.-U. Rasool",
                "S. Iftikhar",
                "T. Saba",
                "J.S. Al-ghamdi"
            ],
            "title": "Ensuring authentication in cloud computing through homomorphic encryption",
            "venue": "J. Theor. Appl. Inf. Technol. 2017,",
            "year": 2017
        },
        {
            "authors": [
                "P. Shrestha",
                "R.N. Thakur"
            ],
            "title": "Channel state information-based cryptographic key generation for Intelligent Transportation Systems",
            "venue": "IEEE Trans. Intell. Transp. Syst",
            "year": 2021
        },
        {
            "authors": [
                "K. Ali",
                "F. Akhtar",
                "S.A. Memon",
                "A. Shakeel",
                "A. Ali",
                "A. Raheem"
            ],
            "title": "Performance of cryptographic algorithms based on time complexity",
            "venue": "In Proceedings of the 2020 3rd International Conference on Computing, Mathematics and Engineering Technologies (iCoMET), Sukkur, Pakistan,",
            "year": 2020
        },
        {
            "authors": [
                "D. Tiwari",
                "A. Singh",
                "A. Prabhakar"
            ],
            "title": "Performance Analysis of AES, RSA and Hashing Algorithm Using Web Technology",
            "venue": "In Computing Algorithms with Applications in Engineering; Springer: Berlin/Heidelberg, Germany,",
            "year": 2020
        },
        {
            "authors": [
                "Y. Javed",
                "A.S. Khan",
                "A. Qahar",
                "J. Abdullah"
            ],
            "title": "Preventing Dos Attacks in IOT Using AES",
            "venue": "J. Telecommun. Electron. Comput. Eng. 2017,",
            "year": 2017
        },
        {
            "authors": [
                "S. Ribouh",
                "K. Phan",
                "A.V. Malawade",
                "Y. Elhillali",
                "A. Rivenq",
                "M.A. Al Faruque"
            ],
            "title": "A novel secure artificial bee colony with advanced encryption standard technique for biomedical signal processing",
            "venue": "Period. Eng. Nat. Sci",
            "year": 2022
        },
        {
            "authors": [
                "B.A. Buhari",
                "A.A. Obiniyi",
                "K. Sunday",
                "S. Shehu"
            ],
            "title": "Performance evaluation of symmetric data encryption algorithms: AES and Blowfish",
            "venue": "Saudi J. Eng. Technol. 2019,",
            "year": 2019
        },
        {
            "authors": [
                "A. Kothandan"
            ],
            "title": "Modified Blowfish Algorithm to Enhance Its Performance and Security",
            "venue": "Ph.D. Thesis, National College of Ireland,",
            "year": 2020
        },
        {
            "authors": [
                "S.F. Yousif"
            ],
            "title": "Performance comparison between RSA and El-Gamal algorithms for Speech Data Encryption and decryption",
            "venue": "Diyala J. Eng. Sci",
            "year": 2023
        },
        {
            "authors": [
                "B.K.A. Ahmed",
                "R.D. Mahdi",
                "T.I. Mohamed",
                "R.A. Jaleel",
                "M.A. Salih",
                "M.M.A. Zahra"
            ],
            "title": "Secure and efficient data storage operations by using intelligent classification technique and RSA algorithm in IOT-based cloud computing",
            "venue": "Sci. Program",
            "year": 2022
        },
        {
            "authors": [
                "N. Tahat",
                "R. Shaqboua",
                "E.E. Abdallah",
                "M. Bsoul",
                "W. Shatanawi"
            ],
            "title": "A New Digital Signature Scheme with Message Recovery Using Hybrid Problems",
            "venue": "Int. J. Electr. Comput. Eng. 2019,",
            "year": 2019
        },
        {
            "authors": [
                "E.A. Adeniyi",
                "P.B. Falola",
                "M.S. Maashi",
                "M. Aljebreen",
                "S. Bharany"
            ],
            "title": "Secure Sensitive Data Sharing Using RSA and ElGamal Cryptographic Algorithms with Hash Functions",
            "year": 2022
        },
        {
            "authors": [
                "B. Kavin",
                "S. Ganapathy"
            ],
            "title": "A new digital signature algorithm for ensuring the data integrity in cloud using elliptic curves",
            "venue": "Int. Arab. J. Inf. Technol",
            "year": 2021
        },
        {
            "authors": [
                "K. Somsuk",
                "M. Thakong"
            ],
            "title": "Authentication system for e-certificate by using RSA\u2019s digital signature",
            "venue": "Telecommun. Comput. Electron. Control",
            "year": 2020
        },
        {
            "authors": [
                "O.A. Imran",
                "S.F. Yousif",
                "I.S. Hameed",
                "W.N.A.-D. Abed",
                "A.T. Hammid"
            ],
            "title": "Implementation of el-gamal algorithm for speech signals encryption and decryption",
            "venue": "Procedia Comput. Sci",
            "year": 2020
        },
        {
            "authors": [
                "T.G. Babu",
                "V. Jayalakshmi"
            ],
            "title": "Conglomerate energy efficient Elgamal encryption based data aggregation cryptosystems in Wireless Sensor Network",
            "venue": "Int. J. Eng",
            "year": 2022
        },
        {
            "authors": [
                "R. Kasodhan",
                "N. Gupta"
            ],
            "title": "A new approach of digital signature verification based on BioGamal algorithm",
            "venue": "In Proceedings of the 2019 3rd International Conference on Computing Methodologies and Communication (ICCMC), Erode, India,",
            "year": 2019
        }
    ],
    "sections": [
        {
            "text": "Citation: AlShalaan, M.R.; Fati, S.M.\nEnhancing Organizational Data\nSecurity on Employee-Connected\nDevices Using BYOD Policy.\nInformation 2023, 14, 275. https://\ndoi.org/10.3390/info14050275\nAcademic Editors: Moutaz Alazab\nand Ammar Alazab\nReceived: 30 March 2023\nRevised: 30 April 2023\nAccepted: 3 May 2023\nPublished: 5 May 2023\nCopyright: \u00a9 2023 by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an open access article\ndistributed under the terms and\nconditions of the Creative Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n4.0/).\nKeywords: BYOD; AES; RSA; ElGamal; blowfish; digital signature; encryption; security"
        },
        {
            "heading": "1. Introduction",
            "text": "Organizations widely deploy rapidly evolving technologies that provide significant benefits but expose them to cyber-attacks due to employees connecting their devices to the information system. A key concern for modern organizations is protecting their assets against such attacks, particularly when safeguarding corporate data that are critical to their functions. Over time, the insecure storage of such data can negatively affect confidentiality, leading to financial losses and reputational damage for the organizations [1]. Organizations invest heavily in acquiring the latest hardware and software technologies with high-security standards to prevent such security breaches. Still, some underestimate the true nature of cybersecurity attacks, which limits the adoption of advanced security measures [1]. Common devastating cyber-attacks involve employee negligence and limited information on the best cybersecurity practices [2]. In particular, the traversal of organizational data to employees\u2019 devices is the primary source of data breaches, compromising the entire system\u2019s security. Therefore, securing organizational data by addressing this issue is very critical. Most organizations adopt Bring Your Own Device (BYOD) policies, and they should prioritize the security of devices connected to their systems.\nInformation 2023, 14, 275. https://doi.org/10.3390/info14050275 https://www.mdpi.com/journal/information\nInformation 2023, 14, 275 2 of 20\nBYOD is a widespread practice where employees use their personally owned devices, including laptops and smartphones, for work purposes [3,4]. It offers several benefits, such as increased mobility, flexibility, productivity and employee satisfaction. Most organizations have implemented information security policies to address the underlying security risks, but employee compliance can be an issue [3]. According to a survey by Bitglass, 69% of companies permit their employees to work with their own devices to complete their business work [5]. The security risks associated with BYOD are consistent with a BYOD policy compliance report by Palanisamy et al., which revealed that around 21% of organizations suffered a security breach due to mobile devices connecting to malicious Wi-Fi hotspots [3]. In 2021, LinkedIn experienced a data leak affecting approximately 500 to 700 million user accounts [6]. Although BYOD implies plenty of advantages, this also opens the door to various security risks, including data contamination and leakage, which can be costly financially and reputation-wise [3]. One of the leading security risks is that BYOD does not consider the security of the downloaded data in employees\u2019 devices [7], making the policy vulnerable to attacks and data breaches. Given that the storage space of these devices has a mixture of personal information and sensitive data and documents stored during the employees\u2019 work on the system, such stored data might be vulnerable to many threats that endanger the safety of user data storage, such as physical and malware attacks [8]. Therefore, the need to secure the stored data on employees\u2019 devices becomes a critical issue, which is the focus of this paper. This study aims to enhance an organizational system\u2019s security by implementing additional security measures on employees\u2019 devices that are authorized to access and store sensitive corporate data. This security approach involves encrypting the download of company documents using the encryption algorithm in the organization\u2019s digital certificate. This encryption process must be applied as a mandatory requirement to enforce BYOD policies. The proliferation of BYOD adoption in organizations has not adequately considered the associated security risks of downloaded data. The study focuses on reducing the risk of corporate data breaches by securing downloaded data on employees\u2019 devices through encryption, thus protecting organizations\u2019 privacy. It emphasizes the vulnerability of organizational data stored on employees\u2019 devices, which can be exposed to attacks and data breaches. The proposed complementary encryption algorithms, such as Advanced Encryption System (AES), RSA, ElGamal and Blowfish, enhance BYOD security and protect corporate data on employee-connected devices. Additionally, this paper highlights the need for organizations to comply with the Essential Cybersecurity Controls established by the National Cybersecurity Authority to ensure the confidentiality, integrity and availability of an organization\u2019s information and technology assets. The following objectives are instrumental in achieving the goal of this study:\n1. Propose an encryption algorithm that runs on the user\u2019s device upon downloading. 2. Build an encryption key generator that is centrally under the organization\u2019s control and will manage the encryption keys for the devices connected to the system. 3. Evaluate the proposed model to ensure security according to predefined criteria (key\nlength, file size).\nThe remainder of the present study is structured as follows: Section 2 comprises a comprehensive review of the relevant literature about the topic under investigation. Section 3 expounds on the research methodology adopted and the proposed approach for the complementary encryption algorithm. Section 4 presents experimental results. Section 5 elaborates on the discussion and findings, encompassing a comparative analysis. Section 6 summarizes the paper, culminating in a conclusive statement that encapsulates its critical discoveries.\nInformation 2023, 14, 275 3 of 20"
        },
        {
            "heading": "2. Related Work",
            "text": "The prevalence of technology adoption by enterprises in adherence to achieving optimal productivity, flexibility and end-user satisfaction has influenced the need to embrace BYOD, which allows employees to use their personal smart devices to access an organization\u2019s data and applications. The BYOD model has positively impacted creativity, communication and cohesion, increasing productivity and performance. Despite its numerous benefits, the BYOD model has left enterprises susceptible to many cyber threats, which include data breaches, data manipulation and a lack of user authentication. As a result, multiple security concerns may emerge, such as malware, viruses, Trojans, data leaks and data manipulation [9,10]. All of these issues lead to the high cost of maintaining BYOD devices across respective network architectures [11,12]. Experienced and privileged user employees pose immense internal threats and risks [3]. They possess the ability to maliciously sabotage digitized transactions, and in other instances, they become victims of phishing and related social engineering attacks. About 75% of respondents indicated a vacuum in organizational requirements and mandates requiring the need to conduct security protocols and measures [3]. Although the BYOD model has multiple benefits, it remains sensitive to data privacy and confidentiality caused by cyber-attacks [8]. Consequently, commercial institutions must protect their digital systems from threat actors and related consequences. Apart from implementing basic training and programs to eliminate ignorance among unsuspecting end-users, this paper emphasizes that corporations should focus on technical countermeasures to mitigate and avoid cyber-attacks. Cryptography is the most viable tool for providing network security based on its ability to uphold privacy, authenticity and integrity. Encryption algorithms facilitate data transformation through mathematical formulas and prevent unauthorized users from accessing private and sensitive data [13]. There are three types of cryptosystems: symmetric (private key), asymmetric (public key) and hash functions [12,14]. The commonly used symmetric algorithms are AES, DES, 3DES and chaos cryptology, whereas RSA is the most-used asymmetric algorithm [15]. In symmetric algorithms, the sender and receiver share a common key, whereas asymmetric systems entail two keys. One key is publicly known (aka public key), and only the receiver knows the second one (aka private key). Given that symmetric algorithms use similar keys, they are less complex than asymmetric cryptography and are a hundred times faster [16]. Symmetric keys are suitable for ensuring the safety of organizational devices and stored data [17]. They have the primary objective of upholding the privacy and confidentiality of the communication channels. However, asymmetric keys are instrumental in implementing encrypted data transfers even when both parties cannot acquire a symmetric key in a private algorithm [17]. The length of asymmetric keys corresponds directly to their security strength and performance; the higher the key length, the more difficult discovering the key becomes, and implicitly, the performance reduces [18]. Thus, the level of security strength needed will be based on the sensitivity of the encrypted data [19]. There are different types of symmetric and asymmetric cryptosystems, and they have unique contributions to securing digital systems through encryption. In the following subsections, we will explain some of the relevant cryptography algorithms, which are the focus of this study."
        },
        {
            "heading": "2.1. Advanced Encryption System",
            "text": "AES is a private key encryption algorithm that secures data and communication channels. AES attains encryption through permutations, substitutions, mixing and keyadding [17]. It is the fastest encryption algorithm, capable of encrypting 1500 KB files in less than a second while consuming the lowest energy levels [13]. AES was suggested to have better performance than other algorithms such as RSA, DES and hashing, where AES has the lowest time complexity [20,21]. AES could be used to mitigate DoS attacks on IoT or other devices [22]. AES operates on fixed data block lengths of 128 bits and incorporates\nInformation 2023, 14, 275 4 of 20\nthe substitution and permutation structure. The AES protects network systems against differential, linear, statistical and brute-force attacks [16]. AES encryption\u2013decryption processes are mainly done in rounds, and each one contains four basic stages as follows:\nI. ShiftRows \u2018permutation stage\u2019 II. Byte Substitute \u2018substitution stages\u2019 III. MixColumn \u2018substitution stages\u2019 IV. AddRundKey \u2018substitution stages\u2019\nFigure 1 represents the AES algorithm flow chart [23].\nInformation 2023, 14, x FOR PEER REVIEW 4 of 21\non IoT or other devices [22]. AES operates on fixed data block lengths of 128 bits and incorporates the substitution and permutation structure. The AES protects network sys-\ntems against differential, linear, statistical and brute-force attacks [16].\nAES encryption\u2013decryption processes are mainly done in rounds, and each one\ncontains four basic stages as follows:\nI. ShiftRows \u2018permutation stage\u2019\nII. Byte Substitut \u2018s bstitution stages\u2019\nIII. MixColumn \u2018substitution stages\u2019\nIV. AddRundKey \u2018substitution stages\u2019\nFigure 1 represents the AES algorith flow chart [23].\nFigure 1. AES algorithm flow chart [23].\n2.2. Blowfish Algorithm\nThe Blowfish algorithm is a symmetric key synonymous with good performance\nand outstanding optimization of the hardware and software applications. Blowfish is\nhighly competent in encrypting large data files [16]. The Blowfish algorithm is faster\nthan AES when handling image, audio, video and other data types in terms of pro-\ncessing time but uses similar or less memory [16,24]. Consequently, Blowfish uses less\nprocessing power, making its performance optimal. However, the blowfish algorithm is\nless secure than other cryptosystems [16].\nThe Blowfish algorithm works with varying lengths not greater than 449 bits and a\n64-bit block with 16 rounds, as presented in Figure 2 [13].\nFigure 1. AES algorithm flow chart [23]."
        },
        {
            "heading": "2.2. Blowfish Algorithm",
            "text": "The Blowfish algorithm is a symmetric key synonymous with good performance and outstanding optimizat on of the hardware and software applications. Blowfish is highly c mpetent i encrypting large data files [16]. The Blowfish algorithm is faster than AES when handling image, audio, video and other data types in terms of processing time but uses similar or less memory [16,24]. Consequently, Blowfish uses less processing power, making its performance optimal. However, the blowfish algorithm is less secure than other cryptosystems [16]. The Blowfish algorithm works with varying lengths not greater than 449 bits and a 64-bit block with 16 rounds, as presented in Figure 2 [13].\nInformation 2023, 14, 275 5 of 20Information 2023, 14, x FOR PEER REVIEW 5 of 21\nFigure 2. Blowfish algorithm flow chart [25].\n2.3. RSA Algorithms\nRSA is an asymmetric cryptosystem that utilizes two separate keys for decrypting\nand encrypting data files. The keys entail private and public keys, whereby the former\ndecrypts the data while the latter encrypts files. Based on its capitalization on factorizing\nlarge prime numbers in key generation, it has formidable security systems compared to\nother asymmetric algorithms [17]. The generation of keys based on the factorization of\nbig prime numbers culminates in a larger encryption time for available datasets. Fur-\nthermore, a larger time is also needed to decrypt the files, making RSA the slowest\namong the algorithms [16]. Its complexity requires the double memory used by other\nsymmetric algorithms such as AES and Blowfish. However, RSA is efficient in offering a high degree of confidentiality and beats ElGamal in most performance metrics [26].\nRSA key generation can be used to produce public and private key pairs by follow-\ning the steps below [27]:\nI. p and q are prime numbers. Then, we calculate the modulus n = pq.\nII. Choose a substantial prime number (r) to produce (p 1) (q1); r will be the public\nexponent.\nIII. Use the result of (rs \u2212 1)/((p \u2212 1) (q \u2212 1)) to find a number s. s will be the private ex-\nponent."
        },
        {
            "heading": "IV. The public key will be (n, r). Although n and r are public, knowing r from n and s is computationally not possible except if p and q are not large enough.",
            "text": "V. For encrypting message m, the cipher text C will be generated using the equation\nC = mr mod (n)\nVI. To decrypt the cipher text, the following equation will be used: m = c5 mod(n)."
        },
        {
            "heading": "2.3. RSA Algorithms",
            "text": "RSA is an asymmetric cryptosystem that utilizes two separate keys for decrypting and encrypting data files. The keys entail private and public keys, whereby the former decrypts the ata while the latter encrypts files. Based on its ca italization on factorizing larg prime numb rs in key generation, it has formidable security systems compared to other asymmetric algorithms [17]. The g neration of keys based on the factorization of big prime numbers cul inates in a larger encryption tim for available dat ts. Furthermore, a larger time is also needed to decrypt he files, making RSA the slowest among the algorithm [16]. Its co pl xity requires the double memory us d by ot r symmetric algorithms such a AES and Blowfish. However, RSA is effic ent in off ring a high degree f confi entiality and beats ElGamal in most performance metrics [26]. RSA k y generatio c n be used to produce public and private key pairs by following the steps below [27]:\nI. p and q are prime numbers. Then, we calculate the modulus n = pq. II. Choose a substantial pri e number (r) to prod ce (p 1) (q1); r will be the public exponent. III. Use the result of (rs \u2212 1)/((p \u2212 1) (q \u2212 1)) to find a number s. s will be the private exponent. IV. The public key will be (n, r). Although n and r are public, knowing r from n and s is computationally not possible except if p and q are not large enough. V. For encrypting message m, the cipher text C will be generated using the equation C = mr mod (n) VI. To decrypt the cipher text, the following equation will be used: m = c5 mod(n).\nFigure 3 illustrates the flow chart of the RSA algorithm.\nInformation 2023, 14, 275 6 of 20\nInformation 2023, 14, x FOR PEER REVIEW 6 of 21\nFigure 3 illustrates the flow chart of the RSA algorithm.\nDigital Signature\nA digital signature is a method of signing files electronically and achieving authen-\nticity and legitimacy using keys and encryption [26]. The signature will be different for\neach file based on the file information, which guarantees that the electronic document is\nreliable, the signature was created by a known source, and the document has not been\naltered; selected verifiers only can recover and verify the file from the digital signature\n[28]. The digital signature can be done using one of the public key cryptosystems, RSA\nor ElGamal and many other systems [29,30]. Kritsanapong et al. [31] showed that RSA is\n100% accurate in both signing and checking procedures, and it completed these process-\nes with a good performance rate.\n2.4. ElGamal\nElGamal is central to upholding and maintaining information security. It is a public\nalgorithm cryptosystem vital in encrypting large data files. ElGamal is a robust and\nFigur . SA algorithm flow chart [13].\nDigital Signature\nA digital signature is a method of signing files electronically and achieving authenticity and legitimacy using keys and encryption [26]. The signature will be different for each file based on the file informatio , which guarantees tha the electronic document is reliable, the signature was created by a known source, and t e doc ment has not been altered; selected verifiers only can recover and verify the file from the digital signature [28]. The digital signature can be done using one of the public key cryptosystems, RSA or ElGamal and many other systems [29,30]. Kritsanapong et al. [31] showed that RSA is 100% accurate in both signing and checking procedures, and it completed these processes with a good performance rate.\nInformation 2023, 14, 275 7 of 20"
        },
        {
            "heading": "2.4. ElGamal",
            "text": "ElGamal is central to upholding and maintaining information security. It is a public algorithm cryptosystem vital in encrypting large data files. ElGamal is a robust and effective algorithm for maintaining the security and quality of encrypted and decrypted, and it shows performance efficiency comparable to state-of-the-art methods [32,33]. Although RSA is faster than ElGamal in the encryption and signature verification process, the latter decrypts and generates signatures faster than the former [12]. Although RSA and ElGamal are slower than symmetric algorithms such as AES and Blowfish, they have better security. The symmetric algorithms are faster and demand less computational power but are less secure than asymmetric algorithms. Public and private keys indicate that every user possesses a unique key inaccessible to other parties, leading to increased security compared with other encryption algorithms.\nElGamal key generation will be processed as follows [12,34]:\nI. Pick p, which is a prime number. II. Select g as a generator number. III. Choose x as a random integer between 0 and p-2, where 0 < x < p-2, and x will be the secret value. IV. Generate y using this equation: y = gx mod p. (p, x) is the private key, and (p, g, y) is\nthe public key\nAfter generating y, the key encryption and decryption process will be as follows [12,34]:\nI. To encrypt a message M, a public key will be used along with a random secret integer k, where 1 < k < p-2. II. A message bit will be transformed into a cipher by calculating C1, C2 . . . III. To calculate C1, this equation will be used: a = gk mod p. IV. To calculate C2, this equation will be used: b = (yk \u2217 M) mod p. V. The cipher file will be C = (C1, C2). VI. To decrypt C, the private key (p, x) will be used. VII. Find the cipher C = (a, b). VIII. Find a, where a = (C1x) p-2 mod p, and calculate M, where M = (a \u2217 C2) mod p.\nFigure 4 shows the flow chart of ElGamal."
        },
        {
            "heading": "2.5. Discussion of Related Work",
            "text": "Various researchers have examined the encryption capabilities of different algorithms and identified their capacity to ensure adequate encryption. Tiwari et al. [21] examined the suitability of AES and RSA algorithms and noticed that they offered a high level of encryption capacity because they depend on public and private keys shared securely to reduce the risk of unauthorized viewing or modification of documents and messages. Buhari et al. [24] investigated the capabilities of AES and Blowfish and found that the two algorithms offer benefits such as low execution times that can enhance user experience. Yousif [26] argued that the implementation of a public and private key helps encryption by reducing the risk of individuals having both keys and modifying messages and documents. Commey et al. [16] compared the efficiency of the Triple DES, AES, Blowfish and RSA algorithms. However, they mentioned that a browser and a word processor affected the result accuracy. Emmanuel et al. [12] evaluated the performance and space complexities of RSA and ElGamal cryptographic algorithms, but the concluded results were based on one data type only. Adeniyi et al. [29] assessed the execution times of RSA, ElGamal, RSA digital signature and ElGamal digital signature, though the performance was measured based on one file type: text files. Their work was applied to the transmitted data, and they suggested a future implementation that secures stored sensitive data as well. Finally, Kritsanapong et al. [31] contended that digital signatures are created using public keys that are unique to the sender and verified using corresponding public keys. Therefore, they have a high level of security and allow data encryption, reducing the risk of unauthorized viewing and modification.\nInformation 2023, 14, 275 8 of 20Information 2023, 14, x FOR PEER REVIEW 8 of 21\nFigure 4. ElGamal algorithm flow chart [12].\n2.5. Discussion of Related Work\nVarious researchers have examined the encryption capabilities of different algo-\nrithms and identified their capacity to ensure adequate encryption. Tiwari et al. [21] ex-\namined the suitability of AES and RSA algorithms and noticed that they offered a high\nlevel of encryption capacity because they depend on public and private keys shared se-\ncurely to reduce the risk of unauthorized viewing or modification of documents and\nmessages. Buhari et al. [24] investigated the capabilities of AES and Blowfish and found\nthat the two algorithms offer benefits such as low execution times that can enhance user\nexperience. Yousif [26] argued that the implementation of a public and private key helps\nencryption by reducing the risk of individuals having both keys and modifying messag-\nes and documents. Commey et al. [16] compared the efficiency of the Triple DES, AES,\nBlowfish and RSA algorithms. However, they mentioned that a browser and a word\nAlthough the researchers recognize the usefulness of these algorithms in data encryption, they do not address their relevance in a BYOD policy. Accordingly, the present study intends to addr ss t se research gaps by implementing an algorithm t secure stored organizational data and examining the performance based on different types of documents, as well as ensuring that the accuracy will not be affected by any external factors.\nTable 1 shows a summary of all the reviewed related work with their results.\nInformation 2023, 14, 275 9 of 20\nThe reviewed articles show that using encryption and digital signatures is a reliable solution for data security and integrity. As mentioned by BYOD research papers, there are several limitations while applying BYOD, which lacks protection for the downloaded data on the device. Encryption and digital signature were not applied by previous studies along with BYOD policies. This motivated us to design a complimentary encryption module with key generation and digital signatures for organizations that apply BYOD policies to add a level of security for organizations\u2019 confidential data because BYOD devices are the most vulnerable security link in most organizations."
        },
        {
            "heading": "3. Materials and Methodology",
            "text": "This study aims to enhance the protection of organizational data by adding another protection layer to employee-connected devices according to the BYOD policy. The proposed methodology assumes the organization has high standard of security on the organizational side, with an effective BOYD policy that is acceptable to all the employees. However, the download of confidential business documents and data into the employees\u2019 devices is one of the severe security issues that violate data confidentiality. Such confidentiality violations occur when the employees use the devices in a less secure environment. Thus, there is an urgent need to add extra security to employees\u2019 devices, which are authorized to store sensitive organizational data securely. This extra feature involves encrypting the download of organizational documents; the encryption process will be a part of BYOD policy enforcement requirements. This study will evaluate the effectiveness of\nInformation 2023, 14, 275 10 of 20\nvarious encryption algorithms along with digital signatures and a hash function (SHA-256) for securing organizational data that are accessible by employees through their personal devices for work purposes. The evaluation involves symmetric encryption algorithms (AES and Blowfish) and asymmetric cryptography algorithms (RSA and ElGamal), both with RSA digital signatures. The proposed system, built using Java as a programming language and Swagger UI as GUI for the created API, focuses on fundamental security considerations, such as confidentiality, non-repudiation and data integrity. Encryption was used for confidentiality, while digital signatures were used to ensure the integrity of the data, with any disparity between the signatures implying that the data had been altered, providing a measure of data integrity. The methodology involves assessing the performance of implemented algorithms in terms of speed and complexity and comparing results with other previous studies. The experiments include evaluating the encryption and decryption times of the algorithms with digital signatures and the impact of different key lengths and file sizes on the performance. The system diagram is displayed in Figures 5 and 6. Figure 5 displays the flow of downloading organizational documents to employees\u2019 devices. Information 2023, 14, x FOR PEER REVIEW 11 of 21\nInformation 2023, 14, 275 11 of 20\nInformation 2023, 14, x FOR PEER REVIEW 12 of 21\nJava Spring boot with spring framework used to implement multiple classes along\nwith Maven dependency management to run the application.\n3.1.2. Java Cryptography\nWe focus on the most used cryptographic library, namely the Java Cryptography\nArchitecture (JCA), which offers an extensive variety of cryptographic services, includ-\ning symmetric and asymmetric encryption, digital signatures and key management.\n3.1.3. Swagger User Interface\nUser interface framework was used to generate an interactive documentation web-\nsite to read open API to visualize the interface.\n3.1.4. Hardware Specifications\nThe following hardware specifications were chosen carefully to achieve good per-\nformance:\nProcessor: Intel(R) Core (TM) i7-8565U CPU @ 1.80\u20131.99 GHz\nRAM: 32.0 GB.\n3.2. Key Generation\nIn our proposed system, key generation follows these steps:\nI. Initialize the algorithm key with user passcode and salt using a key generator\nII. Initialize the key size and iteration count if needed.\nIII. Generate the secret key or key pairs depending on the algorithm type.\nIV. Calculate the generation time."
        },
        {
            "heading": "3.1. Description of the Technical Details",
            "text": "Java Spring boot with spring framework used to implement multiple classes along with Maven dependency management to run the application.\n3.1.2. Java Cryptography\nWe focus on the most used cryptographic library, namely the Java Cryptography Architecture (JCA), which offers an extensive variety of cryptographic services, including symmetric and asymmetric encryption, digital signatures and key management.\n3.1.3. Swagger User Interface\nUser interface framework was used to generate an interactive documentation website to read open API to visualize the interface.\n3.1.4. Hardware Specifications\nThe following hardware specifications were chosen carefully to achieve good performance:\n1. Processor: Intel (R) Core (TM) i7-8565U CPU @ 1.80\u20131.99 GHz 2. RAM: 32.0 GB."
        },
        {
            "heading": "3.2. Key Generation",
            "text": "In our proposed system, key generation follows these steps:\nI. Initialize the algorithm key with user passcode and salt using a key generator II. Initialize the key size and iteration count if needed. III. Generate the secret key or key pairs depending on the algorithm type. IV. Calculate the generation time.\nInformation 2023, 14, 275 12 of 20\nFor generating a key, one of the classes, KeyGenerator or KeyPairGenerator, can be used, relying on the algorithm. KeyGenerator has the ability of a symmetric key generation, whereas KeyPairGenerator has the ability of an asymmetric key generation. To ensure appropriate entropy in the secret key, the hash of this data is changed into a secret. The secret is then used to generate the key by using the methods SecretKeyFactory, PBEKeySpec and SecretKeySpec from the javax.crypto library. Part of the code for key generation is shown below.\nInformation 2023, 14, x FOR PEER REVIEW 13 of 21\nFor generating a key, one of the classes, KeyGenerator or KeyPairGenerator, can be\nused, relying on the algorithm. KeyGenerator has the ability of a symmetric key genera-\ntion, whereas KeyPairGenerator has the ability of an asymmetric key generation. To en-\nsure appropriate entropy in the secret key, the hash of this data is changed into a secret.\nThe secret is then used to generate the key by using the methods SecretKeyFactory,\nPBEKeySpec and SecretKeySpec from the javax.crypto library. Part of the code for key\ngeneration is shown below.\nSecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\nKeySpec spec = new PBEKeySpec(userInput.toCharArray(), salt , 65536,keySize);\nSecretKey key = new Secret-KeySpec(factory.geneateSecret(spec).getEncoded(), \"AES\");\n3.3. Encryption and Decryption\nThe following steps are used for encryption and decryption of implemented algo-\nrithms in our proposed system (RSA, ElGamal, AES, Blowfish):\nI. Declare the cipher by specifying the algorithm name.\nII. Initialize the cipher for encryption or decryption by specifying the mode and key.\nIII. Encrypt or decrypt the file using the doFinal method.\nIV. Calculate the encryption or decryption time.\nHere, the file is encrypted and decrypted in a single process, as shown below. The\ntransformation and process used in this project were recommended by a Google team\n[35].\nCipher encryptionCipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\nencryptionCipher.init(Cipher.ENCRYPT_MODE, key,\nnew GCMParameterSpec(T_LEN,\"AES/GCM/NoPadding\".getBytes(), 0 , 12));\nbyte[] encryptedBytes = encryptionCi-pher.doFinal(messageInBytes);\n3.4. Digital Signature\nOur proposed system will compute the digital signature and verification to guaran-\ntee the integrity of the file using SHA-256. The authenticity of the file is revealed if the\nrecomputed signature and the signature with the encrypted file are equal; otherwise, the\nfile has been altered.\nThe following steps are used for digital signature generation and verification:\nI. Produce a key pair, generated by the KeyPairGenerator class. In our case, an RSA\nkey pair was generated with a 2048-bit length.\nII. Initialize signature using hash function SHA256.\nIII. Initiate signature or verify it using the file and key corresponding to the operation.\nIV. Return generated signature or verification response.\nThe file signature generation process is shown below.\nSignature privateSignature = Signature.getInstance(\"SHA256withRSA\");\nprivateSignature.initSign(privateKey);\nprivateSignature.update(plainText.getBytes(UTF_8));\nbyte[] signature = privateSignature.sign();\nreturn Base64.getEncoder().encodeToString(signature);\n4. Results\nThe proposed BYOD-based complementary encryption system provides the follow-\ning features:"
        },
        {
            "heading": "3.3. Encryption and Decryption",
            "text": "The following steps are used for encryption and decryption of imple ented algorithms in our proposed system (RSA, ElGamal, AES, Blowfish):\nI. Declare the cipher by specifying the algorithm name. . Initialize the cipher for encryption or decryption by specifying the mode and key. III. Encrypt or decrypt the file using the doFinal method. IV. Calculate the encryption or decryption time.\nHere, the file is encrypted and decrypted in a single process, as shown below. The transformation and process used in this project were recommended by a Google team [35].\nInformation 2023, 14, x FOR PEER REVIEW 13 of 21\nFor generating a key, one of the classes, KeyGenerator or KeyPairGenerator, can be\nused, relying on the algorithm. KeyGenerator has the ability of a symmetric key genera-\ntion, whereas KeyPairGenerator has the ability of an asymmetric key generation. To en-\nsure appropriate entropy in the secret key, the hash of this data is changed into a secret.\nThe secret is then used to generate the key by using the methods SecretKeyFactory,\nPBEKeySpec and SecretKeySpec from the javax.crypto library. Part of the code for key\ngeneration is shown below.\nSecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\nKeySpec spec = new PBEKeySpec(userInput.toCharArray(), salt , 65536,keySize);\nSecretKey key = new Secret-KeySpec(factory.geneateSecret(spec).getEncoded(), \"AES\");\n3.3. Encryption and Decryption\nThe following steps are used for encryption and decryption of implemented algo-\nrithms in ur proposed system (RSA, ElGamal, AES, Blowfish):\nI. Declare the cipher by specifying the algorithm name.\nII. Initialize the cipher for encryption or decryption by specifying the mode and key.\nIII. Encrypt or decrypt the file using the doFinal method.\nIV. Calculate the encryption or decryption time.\nHere, the file is encrypted and decrypted in a single process, as shown below. The\ntransformation and process used in this roject were recommended by a Google team\n[35].\nCipher encryptionCipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\nencryptionCipher.init(Cipher.ENCRYPT_MODE, key,\nnew GCMParameterSpec(T_LEN,\"AES/GCM/NoPadding\".getBytes(), 0 , 12));\nbyte[] encryptedBytes = encryptionCi-pher.doFinal(messageInBytes);\n3.4. Digital Signature\nOur proposed system will compute the digital signature and verification to guaran-\ntee the integrity of the file using SHA-256. The authenticity of the file is revealed if the\nrecomputed signature and the signature with the encrypted file are equal; otherwise, t e\nfile has been altered.\nThe following steps are used for digital signature generation and verification:\nI. Produce a key pair, generated by the KeyPairGenerator class. In our case, an RSA\nkey pair was generated with a 2048-bit length.\nII. Initialize signature using hash function SHA256.\nIII. I itiate signature or verify it using the file and key corresponding to the operation.\nIV. Return generated signature or verification response.\nThe file sig ature generation process is shown below.\nSignature privateSignature = Signature.getInstance(\"SHA256withRSA\");\nprivateSignature.initSign(privateKey);\nprivateSignature.update(plainText.getBytes(UTF_8));\nbyte[] signature = privateSignature.sign();\nreturn Base64.getEncoder().encodeToString(signature);\n4. Results\nThe proposed BYOD-based complementary encryption system provides the follow-\ning features:"
        },
        {
            "heading": "3.4. Digital Signature",
            "text": "Our proposed system will compute the digital signature and verification to guarantee the integrity of the file using SHA-256. The authenticity of the file is revealed if the recomputed signature and the signature with the encrypted file are equal; otherwise, the file has been altered.\nThe follo ing steps are used for digital signature generation and verification:\nI. Produce a key pair, generated by the KeyPairGenerator class. In our case, an RSA key pair was generated with a 2048-bit length. II. Initialize signature using hash function SHA256. III. Initiate signature or verify it using the file and key corresponding to the operation. IV. Return generated signature or verification response.\nThe file signature generation process is shown below.\nInformation 2023, 14, x FOR PEER REVIE 13 of 21\nFor generating a key, one of the classes, ey enerator or eyPair enerator, can be\nused, relying on the algorith . ey enerator has the ability of a sy etric key genera-\ntion, hereas eyPair enerator has the ability of an asy etric key generation. To en-\nsure appropriate entropy in the secret key, the hash of this data is changed into a secret.\nThe secret is then used to generate the key by using the ethods Secret eyFactory,\nPBE eySpec an Secret eySpec fro the javax.crypto library. Part of the code for key\ngeneration is sho n belo .\nSecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\nKeySpec spec = new PBEKeySpec(userInput.toCharArray(), salt , 65536,keySize);\nSecretKey key = new Secret-KeySpec(factory.geneateSecret(spec).getEncoded(), \"AES\");\n3.3. Encryption and ecryption\nThe follo ing steps are used for encryption and decryption of i ple ented algo-\nrith s in ur proposed syste (RS , El a al, ES, Blo fish):\nI. eclare the cipher by specifying the algorith na e.\nII. Initialize the cipher for encryption or decryption by specifying the ode and key.\nIII. Encrypt or decrypt the file using the doFinal ethod.\nI . alculate the encryption or decryption ti e.\nr , t file is encry te a ecr t i a single process, as sho n belo . e\ntra sfor ation and process used in this project ere reco nded by a oogle tea\n[35].\nCipher encryptionCipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\nencryptionCipher.init(Cipher.ENCRYPT_MODE, key,\nnew GCMParameterSpec(T_LEN,\"AES/GCM/NoPadding\".getBytes(), 0 , 12));\nbyte[] encryptedBytes = encryptionCi-pher.doFinal(messageInBytes);\n. . i it l i t re\nr proposed syste ill co pute the digital signature and verification to gu ran-\nte the integrity of the file using S -256. The authent city of the file is revealed if t e\nrec t si t t si t r it t e e cr t file are eq al; ot er ise, t e\nfile as ee altered.\ne f ll i ste s are used for digital signature generation and verification:\nI. Produce a key pair, generated by the eyPair enerator class. In our case, an RS\nkey pair as generated ith a 2048-bit length.\nII. Initialize signature using hash function S 256.\nIII. Initiate signature or verify it using the file and key corresponding to the operation.\nI . Return generated signature or verification response.\nThe file signature generation process is sho n belo .\nSignature privateSignature = Signature.getInstance(\"SHA256withRSA\");\nprivateSignature.initSign(privateKey);\nprivateSignature.update(plainText.getBytes(UTF_8));\nbyte[] signature = privateSignature.sign();\nreturn Base64.getEncoder().encodeToString(signature);\n4. esults\nThe proposed BY -based co ple entary encryption syste provides the follo -\ning features:\nInformation 2023, 14, 275 13 of 20"
        },
        {
            "heading": "4. Results",
            "text": "The proposed BYOD-based complementary encryption system provides the following features:\n1. Encrypting and decrypting files using one of the algorithms (RSA, ElGamal, AES and Blowfish) based on the company digital certificate 2. Generating digital signatures and verifying signatures by using the RSA algorithm to ensure the data\u2019s integrity. 3. Including user passcodes in the generation of keys for symmetric and asymmetric algorithms. 4. Using the Swagger UI interface for easy interaction with the API for the selection of documents, cryptography processes, algorithms and user passcodes to be encrypted/decrypted and signed/verified.\nFigure 7 shows the display API in the Swagger UI that provides the organization\u2019s users with various selections to upload their files to be encrypted after selecting encryption. The algorithm then clicks on the \u2018Execute\u2019 button to generate the file that includes the cipher text and the digital signature for that given file.\nInformation 2023, 14, x FOR PEER REVIEW 14 of 21\n1. Encrypting and decrypting files using one of the algorithms (RSA, ElGamal, AES\nand Blowfish) based on the company digital certificate\n2. Generating digital signatures and verifying signatures by using the RSA algorithm\nto ensure the data\u2019s integrity.\n3. Including user passcodes in the generation of keys for symmetric and asymmetric\nalgorithms.\n4. Using the Swagger UI interface for easy interaction with the API for the selection of\ndocuments, cryptography processes, algorithms and user passcodes to be encrypt-\ned/decrypted and signed/verified.\nFigure 7 shows the display API in the Swagger UI that provides the organization\u2019s\nusers with various selections to upload their files to be encrypted after selecting encryp-\ntion. The algorithm then clicks on the \u2018Execute\u2019 button to generate the file that includes\nthe cipher text and the digital signature for that given file.\nAES and Blowfish were tested using different key sizes of 128, 192 and 256 bits,\nwhereas 512, 1024, 2048 and 3072 bits were used for the RSA and the ElGamal algo-\nrithms for encryption and decryption. For signature generation and verification, 2048-bit\nRSA was used. Files of different types and sizes were tested, and the time taken for each\noperation was recorded in milliseconds.\n4.1.1. Encryption\nDifferent file sizes were encrypted using the four algorithms (RSA, ElGamal, AES\nand Blowfish) with different key sizes and RSA digital signatures. The encryption time\nfor each algorithm was recorded and tabulated (Tables 2 and 3)."
        },
        {
            "heading": "4.1. Result Analysis",
            "text": "AES and Blowfish were tested using different key sizes of 128, 192 and 256 bits, whereas 512, 1024, 2048 and 3072 bits were used for the RSA and the ElGamal algorithms for encryption and decryption. For signature generation and verification, 2048-bit RSA was used. Files of different types and sizes were tested, and the time taken for each operation was recorded in milliseconds.\n4.1.1. Encryption\nDifferent file sizes were encrypted using the four algorithms (RSA, ElGamal, AES and Blowfish) with different key sizes and RSA digital signatures. The encryption time for each algorithm was recorded and tabulated (Tables 2 and 3).\nTable 2. Encryption data for RSA and ElGamal algorithms with signature."
        },
        {
            "heading": "512 20 75 840",
            "text": ""
        },
        {
            "heading": "512 15 54 687",
            "text": ""
        },
        {
            "heading": "512 10 43 431",
            "text": "Information 2023, 14, 275 14 of 20"
        },
        {
            "heading": "1024 20 108 3012",
            "text": ""
        },
        {
            "heading": "2048 10 89 2960",
            "text": ""
        },
        {
            "heading": "2048 15 192 3898",
            "text": ""
        },
        {
            "heading": "2048 20 254 4976",
            "text": ""
        },
        {
            "heading": "3072 10 132 4590",
            "text": ""
        },
        {
            "heading": "3072 15 221 6321",
            "text": ""
        },
        {
            "heading": "3072 20 310 8150",
            "text": ""
        },
        {
            "heading": "128 10 0.5 0.7",
            "text": "The two figures and tables illustrate the encryption execution times for different encryption algorithms. Table 2 and Figure 8 show that the ElGamal algorithm execution time rate was constantly higher than RSA during encryption for different file sizes and key lengths. The ElGamal execution time was under 450 ms with a 512-bit key size and 10 KB file size, which then doubled to around 900 ms with a 1024-bit key size. With a 3072-bit key size, the time reached a high of almost 4600 ms, almost 10 times that of the execution time with a 512-bit key size. The RSA execution time rate showed a similar trend but was between 10 to 30 times less than that of ElGamal with all key sizes.\nThe two figures and tables illustrate the encryption execution times for different en-\ncryption algorithms.\nTable 2 and Figure 8 show that the ElGamal algorithm execution time rate was con-\nstantly higher than RSA during encryption for different file sizes and key lengths. The\nElGamal execution time was under 450 ms with a 512-bit key size and 10 KB file size,\nwhich then doubled to around 900 ms with a 1024-bit key size. With a 3072-bit key size,\nthe time reached a high of almost 4600 ms, almost 10 times that of the execution time\nwith a 512-bit key size. The RSA execution time rate showed a similar trend but was be-\ntween 10 to 30 times less than that of ElGamal with all key sizes.\nTable 3 and Figure 9 show a slight difference between Blowfish and AES encryption\ntimes, but Blowfish consumes less time than AES. There is a direct relationship between\nincreasing key length and file size on performance. Blowfish execution time started at 0.5\nms with a 128-bit key size and 10 KB file size, which then doubled to 1 millisecond with\na 192-bit key size. Then, it showed an increase and reached around 6 ms with a 256-bit\nkey size. The AES execution time rate showed a similar trend but was between 1 to 1.3\ntimes higher than that of Blowfish with all key sizes.\nFigure 8. Graphical representation of different file sizes with RSA and ElGamal encryption time.\nTable 3 and Figure 9 show a slight difference between Blowfish and AES encryption times, but Blowfish consumes less time than AES. There is a direct relationship between increasing key length and file size on performance. Blowfish execution time started at 0.5 ms with a 128-bit key size and 10 KB file size, which then doubled to 1 millisecond with a 192-bit key size. Then, it showed an increase and reached around 6 ms with a 256-bit key size. The AES execution time rate showed a similar trend but was between 1 to 1.3 times higher than that of Blowfish with all key sizes.\nInformation 2023, 14, 275 15 of 20Information 2023, 14, x FOR PEER REVIEW 16 of 21\nTable 4 and Figure 10 show that ElGamal consumes less time than RSA during de-\ncryption for different key lengths and file sizes. The RSA rate was around 400 ms with a"
        },
        {
            "heading": "512 10 406 197",
            "text": ""
        },
        {
            "heading": "512 15 734 287",
            "text": ""
        },
        {
            "heading": "512 1269 360",
            "text": ""
        },
        {
            "heading": "2048 20 6589 1047",
            "text": ""
        },
        {
            "heading": "3072 15 7842 2130",
            "text": ""
        },
        {
            "heading": "3072 20 9771 3270",
            "text": ""
        },
        {
            "heading": "128 10 0.3 0.5",
            "text": ""
        },
        {
            "heading": "128 15 0.5 0.6",
            "text": "cryption for different key lengths and file sizes. The RSA rate was around 400 ms with a 512-bit key size and a file size of 10 KB, which then increased to more than double to reach around 1200 ms with a 1024-bit key size. This then ended by reaching around 6000 ms with a 3072-bit key size. The ElGamal execution time rate showed a similar trend but was between 2 to 6 times less than the RSA rate with all key sizes.\nInformation 2023, 14, 275 16 of 20\nInformation 2023, 14, x FOR PEER REVIEW 17 of 21\n512-bit key size and a file size of 10 KB, which then increased to more than double to\nreach around 1200 ms with a 1024-bit key size. This then ended by reaching around 6000\nms with a 3072-bit key size. The ElGamal execution time rate showed a similar trend but\nwas between 2 to 6 times less than the RSA rate with all key sizes.\nFigure 10. Graphical representation of different file sizes with RSA and ElGamal decryption time.\nTable 5 and Figure 11 reveal that AES requires more time than Blowfish. A direct re-\nlationship is found between increasing key size and file size on performance. AES execu-\ntion time was around 0.5 ms with a 128-bit key size and a 10 KB file size, which then\ndoubled to reach 1 millisecond with a 192-bit key size. With a 256-bit key size, the time\nhad reached a high of almost 6 ms, almost 12 times that of the execution time with a 128-\nbit key size. The Blowfish execution time rate showed a similar trend but was between 1\nto 1.6 times less than the AES rate with all key sizes.\nFigure 11. Graphical representation of different file sizes with Blowfish and AES decryption time."
        },
        {
            "heading": "4.1.3. Key Generation",
            "text": "The time taken for RSA, ElGamal, AES and Blowfish to generate a key was captured\nand recorded (Tables 6 and 7).\nTable 6. Key generation data for RSA and ElGamal.\nKey Size User Input Size (Bytes) RSA Time (ms) ElGamal Time (ms)\n512 10 56 43\n512 15 67 51\n512 20 88 76\n1024 10 142 126\n1024 15 180 167\n1024 20 267 173\n2048 10 1306 428\n2048 15 1381 643\n2048 20 1407 780\n3072 10 2866 1983\n3072 15 3124 2432\nFigure 10. Graphical representation of different file sizes with RSA and ElGamal decryption time.\nTable 5 and Figure 11 reveal that AES requires more time than Blowfish. A direct relationship is found between increasing key size and file size on performance. AES execution time was around 0.5 ms with a 128-bit key size and a 10 KB file size, which then doubled to reach 1 millisecond with a 192-bit key size. With a 256-bit key size, the time had reached a high of almost 6 ms, almost 12 times that of the execution time with a 128-bit key size. The Blowfish execution time rate showed a similar trend but was between 1 to 1.6 times less than the AES rate with all key sizes.\nInformation 2023, 14, x FOR PEER REVIEW 17 of 21\n512-bit key size and a file size of 10 KB, which then increased to more than double to\nreach around 1200 ms with a 1024-bit key size. This then ended by reaching around 600\nms with a 3072-bit key size. The ElGamal execution time rate showed a similar trend but\nwas between 2 to 6 times less than the RSA rate with all key sizes.\nFigure 10. ra ical representation of different file sizes with RSA and ElGamal decryption time.\nTable 5 and Figure 11 reveal that AES requires more time than Blowfish. A direct re-\nlationship is found between increasing key size and file size on performance. AES execu-\ntion time was around 0.5 ms with a 128-bit key size and a 10 KB file size, which then\ndoubled to reach 1 millisecond with a 192-bit key size. With a 256-bit key size, the time\nhad reached a high of almost 6 ms, almost 12 times that of the execution time with a 128-\nbit key size. The Blowfish execution time rate showed a similar trend but was between 1\nto 1.6 times less than the AES rate with all key sizes.\nFigure 11. Graphical representation of different file sizes with Blowfish and AES decryption time.\n4.1.3. Key Generation\nThe time taken for RSA, ElGamal, AES and Blowfish to generate a key was captured\nand recorded (Tables 6 and 7).\nTable 6. Key generation data for RSA and ElGamal.\nKey Size User Input Size (Bytes) RSA Time (ms) ElGamal Time (ms)\n512 10 56 43\n512 15 67 51\n512 20 88 76\n1024 10 142 126\n1024 15 180 167\n1024 20 267 173\n2048 10 1306 428\n2048 15 1381 643\n2048 20 1407 780\n3072 10 2866 1983\n3072 15 3124 2432\nFigure 11. Graphical representation of different file sizes with Blowfish and AES decryption time.\n4.1.3. e erati\nhe ti e taken for S , El a al, S an Blo fish to generate a key as ca t re and recorded (Tables 6 and 7).\nTable 6. Key generation data for RSA and ElGamal.\nKey Size User Input Size (Bytes) RSA Time ( s) l amal Time (ms)\n512 10 56 43 512 15 67 51 512 20 88 76 1024 10 142 126 1024 15 180 167 1024 20 267 173 2048 10 1306 428 2048 15 1381 643 2048 20 1407 780 3072 10 2866 1983 3072 15 3124 2432 3072 20 3507 2974\nInformation 2023, 14, 275 17 of 20\ngeneration process. Here, ElGamal consumes less time than RSA. ElGamal spends around 45 ms in generating a 512-bit key size and 2000 ms to generate a 3072-bit key size, around 40 times that of the execution time with a 512-bit key size. The RSA execution time rate showed a similar trend but with a difference of around 30% greater than that of ElGamal with all key sizes. Table 7 reveals that AES spends more time generating keys than Blowfish. There is a direct relationship between increasing key size and user passcode size on the key generation time. AES takes around 150 ms to generate a 128-bit key size, and this more than doubles when generating a 256-bit key size. Blowfish\u2019s execution time rate showed a similar trend but with a difference of around 8% less than that of AES with all key sizes."
        },
        {
            "heading": "5. Discussion",
            "text": "A comparative analysis was done of the four encryption algorithms (RSA, ElGamal, Blowfish and AES) based on the changeable variables of each algorithm to enhance organization security in BYOD policies. The experimental outcomes in the tables show from the analysis of asymmetric algorithms that encryption and decryption times depend on the key and file sizes, and key generation times depend on the key and user passcode sizes. As the key and file sizes or user passcode sizes increase, the RSA and ElGamal algorithms\u2019 encryption and decryption key generation times significantly increase. RSA with signatures has a better execution time than ElGamal with signatures in the encryption processes, while ElGamal with verification has a better execution time than RSA with verification during the decryption process and key generation. By contrast, for symmetric algorithms, the encryption and decryption times for Blowfish and AES algorithms remain relatively constant or have small differences where Blowfish performs better than AES. Key generation time will depend on the key and user passcode sizes, the key generation times remarkably increase, when we process large key sizes and passcode. The encryption and decryption times may increase with larger file sizes and key sizes. Therefore, the average encryption, decryption and key generation times appear reasonable and should not significantly impact the performance of employees\u2019 devices.\nFindings and Comparison with Existing Work\nIn this section, a comparative analysis and a discussion of the implemented encryption algorithms with previous research have been demonstrated in terms of performance. The RSA, ElGamal, AES and Blowfish results were compared with those of Adeniyi et al. [29], Emmanuel et al. [12], Rouaf and Yousif [13], Abay [14] and Ali et al. [20]. Tables 8 and 9 show a time comparison of our suggested algorithm with previous studies implementing similar techniques, where the time taken in our proposed system seems to be better in terms of performance.\nInformation 2023, 14, 275 18 of 20\nTable 8 shows that our RSA and ElGamal execution time was between 0.9 to 30 times lower than previous studies\u2019 algorithm rates in the encryption and decryption process. Table 9 demonstrates that AES and Blowfish execution time was between 1.5 to 29 times lower than previous studies\u2019 algorithm rates in terms of encryption and decryption. The analysis aligns with the literature findings, highlighting the performance and security of these algorithms. For example, in a comparative study of RSA and ElGamal algorithms, Emmanuel et al. [12] concluded that they are both secure cryptographic algorithms. Still, their efficiency may vary depending on the application and file format. RSA may be faster for audio files [12]. Adeniyi et al. [29] inferred that RSA is faster in encrypting messages and verifying digital signatures, while ElGamal is faster in decrypting messages and generating digital signatures. Blowfish is about four times faster than AES, which is faster than RSA (the slowest algorithm) [16]. Abay [14] also revealed that AES has better performance with higher throughput than Blowfish. When the throughput value increases, the power consumption of the encryption method decreases. Overall, the literature shows that AES has a good balance of security and performance. Abay\u2019s [14] findings revealed that AES has better performance, with high throughput and lower power consumption, compared with other algorithms, suggesting that AES is more efficient for encryption and decryption operations, especially in applications that require high throughput. These findings align with the results and reviewed work, which revealed that AES had a good balance of security and performance and could be the best choice for the organization\u2019s BYOD infrastructure. However, further analysis and testing are required to determine the extent to which AES ensures the security of organizational data based on the specific needs and requirements."
        },
        {
            "heading": "6. Conclusions",
            "text": "This paper proposes a BYOD-based data secure storage system with encryption and decryption features using AES, Blowfish, ElGamal and RSA algorithms with signature generation and verification, an API with a Swagger UI interface and the generation of private and public keys with user passcode, applied on downloaded files on employees\u2019 devices to ensure organizational data security. The paper compares four encryption algorithms and concludes that AES has the best balance of security and performance for high-throughput applications in an organization\u2019s BYOD infrastructure. Further testing is recommended to\nInformation 2023, 14, 275 19 of 20\nassess the system\u2019s security based on specific needs. This proposed system addresses BYOD challenges and provides an efficient and secure data storage solution for organizations. The study may serve as a helpful reference for organizations implementing secure data storage techniques.\nAuthor Contributions: Conceptualization, methodology, validation, formal analysis, investigation, and visualization, M.R.A. and S.M.F. Software and writing\u2014original draft preparation, M.R.A. Writing review and editing, S.M.F. All authors have read and agreed to the published version of the manuscript.\nFunding: The authors would like to acknowledge the support of Prince Sultan University for paying the Article Processing Charges (APC) for this publication.\nData Availability Statement: Not applicable.\nConflicts of Interest: The authors declare no conflict of interest.\nReferences 1. Perera, S.; Jin, X.; Maurushat, A.; Opoku, D.-G.J. Factors affecting reputational damage to organisations due to cyberattacks. Informatics 2022, 9, 28. [CrossRef] 2. Bhusal, C.S. Systematic review on social engineering: Hacking by manipulating humans. J. Inf. Secur. 2021, 12, 104\u2013114. [CrossRef] 3. Palanisamy, R.; Norman, A.A.; Mat Kiah, M.L. BYOD Policy Compliance: Risks and Strategies in Organizations. J. Comput. Inf. Syst. 2022, 62, 61\u201372. [CrossRef] 4. Hertel, G.; Stone, D.L.; Johnson, R.D. The Wiley Blackwell Handbook of the Psychology of the Internet at Work; John Wiley & Sons: Hoboken, NJ, USA, 2017. 5. Business Wire. Bitglass 2020 BYOD Report: Increased Remote Work Drives BYOD, But Security Is Not Keeping Pace. Avail-\nable online: https://www.businesswire.com/news/home/20200708005267/en/Bitglass-2020-BYOD-Report-Increased-RemoteWork-Drives-BYOD-but-Security-is-Not-Keeping-Pace (accessed on 9 March 2023).\n6. Scrubbed. LinkedIn Data Leak\u2014What We Can Do about It. Available online: https://scrubbed.net/blog/linkedin-data-leakwhat-we-can-do-about-it/ (accessed on 8 March 2023). 7. Turban, E.; Pollard, C.; Wood, G. Information Technology for Management: On-Demand Strategies for Performance, Growth and Sustainability; John Wiley & Sons: Hoboken, NJ, USA, 2018. 8. Bahaddad, A.A.; Almarhabi, K.A.; Alghamdi, A.M. Factors Affecting Information Security and the Implementation of Bring Your Own Device (BYOD) Programmes in the Kingdom of Saudi Arabia (KSA). Appl. Sci. 2022, 12, 2707. [CrossRef] 9. Ntwari, R.; Habinka, A.E.; Kaggwa, F. BYOD systematic literature review: A layered approach. Eur. J. Technol. 2022, 6, 69\u201385. [CrossRef] 10. Shrestha, P.; Thakur, R.N. Study on Security and Privacy Related Issues Associated with BYOD Policy in Organizations in Nepal. LBEF Res. J. Sci. Technol. Manag. 2019, 1, 41\u201362. 11. Maglaras, L.; Almomani, I. Digitization of healthcare sector: A study on privacy and security concerns. Korean Inst. Commun. Inf. Sci. 2023, in press. [CrossRef] 12. Emmanuel, A.A.; Marion, A.O.; Aderemi, O.; Olugbara, O.O. Computational complexity of RSA and ElGamal cryptographic algorithms on video data. J. Theor. Appl. Inf. Technol. 2022, 100, 5437\u20135445. [CrossRef] 13. Rouaf, M.T.; Yousif, A. Performance Evaluation of Encryption Algorithms in Mobile Devices. In Proceedings of the 2020 International Conference on Computer, Control, Electrical, and Electronics Engineering (ICCCEEE), Khartoum, Sudan, 26 February\u20131 March 2021. [CrossRef] 14. Abay, M.M. Performance Analysis of Blowfish, IDEA and AES Encryption Algorithms. Int. J. Res. Anal. Rev. 2020, 7, 668\u2013678. 15. Alenezi, M.; Usama, M.; Almustafa, K.; Iqbal, W.; Raza, M.A.; Khan, T. An efficient, secure, and queryable encryption for nosql-based databases hosted on untrusted cloud environments. Int. J. Inf. Secur. Priv. 2019, 13, 14\u201331. [CrossRef] 16. Commey, D.; Griffith, S.; Dzisi, J. Performance comparison of 3DES, AES, Blowfish and RSA for Dataset Classification and Encryption in Cloud Data Storage. Int. J. Comput. Appl. 2020, 177, 17\u201322. [CrossRef] 17. Oleiwi, Z.C.; Alawsi, W.A.; Alisawi, W.C.; Alfoudi, A.S.; Alfarhani, L.H. Overview and Performance Analysis of Encryption Algorithms. J. Phys. Conf. Ser. 2020, 1664, 012051. [CrossRef] 18. Rasool, M.-U.; Iftikhar, S.; Saba, T.; Al-ghamdi, J.S. Ensuring authentication in cloud computing through homomorphic encryption. J. Theor. Appl. Inf. Technol. 2017, 95, 3032\u20133040. 19. Shrestha, P.; Thakur, R.N. Channel state information-based cryptographic key generation for Intelligent Transportation Systems. IEEE Trans. Intell. Transp. Syst. 2021, 22, 7496\u20137507. [CrossRef] 20. Ali, K.; Akhtar, F.; Memon, S.A.; Shakeel, A.; Ali, A.; Raheem, A. Performance of cryptographic algorithms based on time\ncomplexity. In Proceedings of the 2020 3rd International Conference on Computing, Mathematics and Engineering Technologies (iCoMET), Sukkur, Pakistan, 29\u201330 January 2020. [CrossRef]\nInformation 2023, 14, 275 20 of 20\n21. Tiwari, D.; Singh, A.; Prabhakar, A. Performance Analysis of AES, RSA and Hashing Algorithm Using Web Technology. In Computing Algorithms with Applications in Engineering; Springer: Berlin/Heidelberg, Germany, 2020; pp. 413\u2013418. [CrossRef] 22. Javed, Y.; Khan, A.S.; Qahar, A.; Abdullah, J. Preventing Dos Attacks in IOT Using AES. J. Telecommun. Electron. Comput. Eng. 2017, 9, 55\u201360. 23. Ribouh, S.; Phan, K.; Malawade, A.V.; Elhillali, Y.; Rivenq, A.; Al Faruque, M.A. A novel secure artificial bee colony with advanced encryption standard technique for biomedical signal processing. Period. Eng. Nat. Sci. 2022, 10, 288. [CrossRef] 24. Buhari, B.A.; Obiniyi, A.A.; Sunday, K.; Shehu, S. Performance evaluation of symmetric data encryption algorithms: AES and Blowfish. Saudi J. Eng. Technol. 2019, 4, 407\u2013414. [CrossRef] 25. Kothandan, A. Modified Blowfish Algorithm to Enhance Its Performance and Security. Ph.D. Thesis, National College of Ireland, Dublin, Ireland, 2020. 26. Yousif, S.F. Performance comparison between RSA and El-Gamal algorithms for Speech Data Encryption and decryption. Diyala J. Eng. Sci. 2023, 16, 123\u2013137. [CrossRef] 27. Ahmed, B.K.A.; Mahdi, R.D.; Mohamed, T.I.; Jaleel, R.A.; Salih, M.A.; Zahra, M.M.A. Secure and efficient data storage operations by using intelligent classification technique and RSA algorithm in IOT-based cloud computing. Sci. Program. 2022, 2022, 2195646. [CrossRef] 28. Tahat, N.; Shaqboua, R.; Abdallah, E.E.; Bsoul, M.; Shatanawi, W. A New Digital Signature Scheme with Message Recovery Using Hybrid Problems. Int. J. Electr. Comput. Eng. 2019, 9, 3576\u20133583. [CrossRef] 29. Adeniyi, E.A.; Falola, P.B.; Maashi, M.S.; Aljebreen, M.; Bharany, S. Secure Sensitive Data Sharing Using RSA and ElGamal Cryptographic Algorithms with Hash Functions. Information 2022, 13, 442. [CrossRef] 30. Kavin, B.; Ganapathy, S. A new digital signature algorithm for ensuring the data integrity in cloud using elliptic curves. Int. Arab. J. Inf. Technol. 2021, 18, 180\u2013190. [CrossRef] 31. Somsuk, K.; Thakong, M. Authentication system for e-certificate by using RSA\u2019s digital signature. Telecommun. Comput. Electron. Control 2020, 18, 2948. [CrossRef] 32. Imran, O.A.; Yousif, S.F.; Hameed, I.S.; Abed, W.N.A.-D.; Hammid, A.T. Implementation of el-gamal algorithm for speech signals encryption and decryption. Procedia Comput. Sci. 2020, 167, 1028\u20131037. [CrossRef] 33. Babu, T.G.; Jayalakshmi, V. Conglomerate energy efficient Elgamal encryption based data aggregation cryptosystems in Wireless Sensor Network. Int. J. Eng. 2022, 35, 417\u2013424. [CrossRef] 34. Kasodhan, R.; Gupta, N. A new approach of digital signature verification based on BioGamal algorithm. In Proceedings of the 2019 3rd International Conference on Computing Methodologies and Communication (ICCMC), Erode, India, 27\u201329 March 2019. [CrossRef] 35. Oracle. Class Cipher. Available online: https://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html (accessed on 10 January 2023).\nDisclaimer/Publisher\u2019s Note: The statements, opinions and data contained in all publications are solely those of the individual author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to people or property resulting from any ideas, methods, instructions or products referred to in the content."
        }
    ],
    "title": "Enhancing Organizational Data Security on Employee-Connected Devices Using BYOD Policy",
    "year": 2023
}