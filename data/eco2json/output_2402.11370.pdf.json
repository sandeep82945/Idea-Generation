{
    "abstractText": "We study a matching problem between agents and public goods, in settings without monetary transfers. Since goods are public, they have no capacity constraints. There is no exogenously defined budget of goods to be provided. Rather, each provided good must justify its cost, leading to strong complementarities in the \u201cpreferences\u201d of goods. Furthermore, goods that are in high demand given other already-provided goods must also be provided. The question of the existence of a stable solution (a menu of public goods to be provided) exhibits a rich combinatorial structure. We uncover sufficient conditions and necessary conditions for guaranteeing the existence of a stable solution, and derive both positive and negative results for strategyproof stable matching. \u2217Fish was supported by an NSF Graduate Research Fellowship. Gonczarowski\u2019s research was supported by the Harvard FAS Dean\u2019s Competitive Fund for Promising Scholarship and by the Harvard FAS Inequality in America Initiative. The authors thank Ulrike Schmidt-Kraepelin, Alex Meiburg, Noam Nisan, Alden Rogers, Ariel Procaccia, Marco Scarsini, and Ran Shorrer for helpful comments and insightful discussions. \u2020School of Engineering and Applied Sciences, Harvard University \u2014 Email: E-mail : sfish@g.harvard.edu \u2021Department of Economics and Department of Computer Science, Harvard University \u2014 E-mail : yannai@gonch.name. \u00a7Federmann Center for the Study of Rationality, Bogen Department of Economics, and Einstein Institute of Mathematics, The Hebrew University of Jerusalem \u2014 E-mail : hart@huji.ac.il. ar X iv :2 40 2. 11 37 0v 1 [ cs .G T ] 1 7 Fe b 20 24",
    "authors": [
        {
            "affiliations": [],
            "name": "Sara Fish"
        },
        {
            "affiliations": [],
            "name": "Yannai A. Gonczarowski"
        },
        {
            "affiliations": [],
            "name": "Sergiu Hart"
        }
    ],
    "id": "SP:3e3083870172956d11a9530c7966fef694bb9202",
    "references": [
        {
            "authors": [
                "H Aziz"
            ],
            "title": "Justified representation in approval-based committee voting",
            "venue": "(Feb",
            "year": 2017
        },
        {
            "authors": [
                "L. De Moura",
                "N. Bj\u00f8rner (Mar"
            ],
            "title": "Z3: an efficient SMT solver",
            "year": 2008
        },
        {
            "authors": [
                "L.E. Dubins",
                "D.A. Freedman (Aug"
            ],
            "title": "Machiavelli and the Gale-Shapley Algorithm",
            "venue": "The American Mathematical Monthly",
            "year": 1981
        },
        {
            "authors": [
                "J. Duggan",
                "T. Schwartz (Jan"
            ],
            "title": "Strategic manipulability without resoluteness or shared beliefs: Gibbard-Satterthwaite generalized",
            "venue": "Social Choice and Welfare",
            "year": 2000
        },
        {
            "authors": [
                "D. Gale",
                "L.S. Shapley (Jan"
            ],
            "title": "College Admissions and the Stability of Marriage",
            "venue": "The American Mathematical Monthly 69.1,",
            "year": 1962
        },
        {
            "authors": [
                "A. Gibbard"
            ],
            "title": "Manipulation of Voting Schemes: A General Result",
            "venue": "Econometrica 41.4,",
            "year": 1973
        },
        {
            "authors": [
                "J.W. Hatfield",
                "F. Kojima (Sept"
            ],
            "title": "Substitutes and stability for matching with contracts",
            "venue": "Journal of Economic Theory",
            "year": 2010
        },
        {
            "authors": [
                "J.W. Hatfield",
                "P.R. Milgrom (Sept"
            ],
            "title": "Matching with Contracts",
            "year": 2005
        }
    ],
    "sections": [
        {
            "text": "We study a matching problem between agents and public goods, in settings without monetary transfers. Since goods are public, they have no capacity constraints. There is no exogenously defined budget of goods to be provided. Rather, each provided good must justify its cost, leading to strong complementarities in the \u201cpreferences\u201d of goods. Furthermore, goods that are in high demand given other already-provided goods must also be provided. The question of the existence of a stable solution (a menu of public goods to be provided) exhibits a rich combinatorial structure. We uncover sufficient conditions and necessary conditions for guaranteeing the existence of a stable solution, and derive both positive and negative results for strategyproof stable matching.\n\u2217Fish was supported by an NSF Graduate Research Fellowship. Gonczarowski\u2019s research was supported by the Harvard FAS Dean\u2019s Competitive Fund for Promising Scholarship and by the Harvard FAS Inequality in America Initiative. The authors thank Ulrike Schmidt-Kraepelin, Alex Meiburg, Noam Nisan, Alden Rogers, Ariel Procaccia, Marco Scarsini, and Ran Shorrer for helpful comments and insightful discussions. \u2020School of Engineering and Applied Sciences, Harvard University \u2014 Email: E-mail : sfish@g.harvard.edu \u2021Department of Economics and Department of Computer Science, Harvard University \u2014 E-mail : yannai@gonch.name. \u00a7Federmann Center for the Study of Rationality, Bogen Department of Economics, and Einstein Institute of Mathematics, The Hebrew University of Jerusalem \u2014 E-mail : hart@huji.ac.il.\nar X\niv :2\n40 2.\n11 37\n0v 1\n[ cs\n.G T\n] 1\n7 Fe\nb 20\nContents"
        },
        {
            "heading": "1 Introduction 1",
            "text": "1.1 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4"
        },
        {
            "heading": "2 Model and Notation 5",
            "text": ""
        },
        {
            "heading": "3 Simple Lower and Upper Bounds 6",
            "text": ""
        },
        {
            "heading": "4 Tightness of the Lower Bound for g \u2264 6 8",
            "text": "4.1 Analytic Proof for g \u2264 4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 4.2 Computer-Assisted Proof for g = 5, 6 . . . . . . . . . . . . . . . . . . . . . . 12"
        },
        {
            "heading": "5 g = 7 and Beyond 14",
            "text": "5.1 Improved Lower Bound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 5.2 Improved Upper Bound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16"
        },
        {
            "heading": "6 Strategic Considerations 19",
            "text": "6.1 Strategyproof Mechanism for g = 2 . . . . . . . . . . . . . . . . . . . . . . . 20 6.2 Impossibility of Stategyproofness for 3 \u2264 g \u2264 6 . . . . . . . . . . . . . . . . . 21"
        },
        {
            "heading": "7 Discussion 21",
            "text": "References 23"
        },
        {
            "heading": "A Supporting Lemmas 24",
            "text": "B Inadequacy of a Greedy Algorithm for Finding a Stable Menu 26"
        },
        {
            "heading": "C Reformulation of the Covering Condition for Complete Preferences 27",
            "text": "D Validity of Improved Lower Bound for Complete Preferences 29\nE Upper Bound with Linear-Time Algorithm via Structural Results 30"
        },
        {
            "heading": "1 Introduction",
            "text": "Which courses should an online university offer? Courses have no cap on participation, but were the university to offer a non-demanded course, it would not recoup the cost of the course. On the other hand, were it to fail to offer a very demanded course, students would object. Where throughout a city would we expect to find ATMs (or vending machines)? There is virtually no limit on the amount of users of a single machine, however if a machine is in a spot that is not sufficiently convenient for many people, this machine would not cover its cost. On the other hand, if a spot that is convenient to many people does not have a machine, some company would respond to the opportunity. Finally, how should a group of hikers choose which trails to hike in small groups? On the one hand, heading out in too small of a group might not be safe. On the other hand, if a critical mass of people would rather hike another trail not included in the current plan, they would change plans and head together to that trail instead. Each of these problems can be viewed as a matching problem, of agents\u2014students, customers, or hikers\u2014to public goods\u2014courses, ATMs/vending machines, or trails.\nIn each of the above matching problems, there are no (upper) constraints on capacity for (i.e., no scarcity of \u201cusage slots\u201d for) public goods. However, there is a firm minimum usage on each provided public good; that is, the \u201cpreferences\u201d of public goods over individual exhibit strong complementarities. Each of these two features\u2014no capacity constraints on the one hand, and complementarities on the other hand\u2014makes this problem starkly different than much of the literature on stable matching or stable assignments. And yet, it is natural to ask in this scenario how one might formalize the stability of a given offering of public goods, whether such a stable offering of public goods is guaranteed to exist, and, if and when it is guaranteed, whether there are any strategyproof stable mechanisms. In this paper, we initiate the study of these questions.\nDefining Stability. We consider a setting with a finite number of public goods that might be provided, and a finite number of unit-demand agents, each with a strict preference list over the public goods. A menu of public goods is a set of public goods that are provided. If a specific menu is provided, then each agent consumes from their favorite public good from this menu. Such a menu is t-feasible if when provided, each public good from the menu is consumed by at least t agents.1 This is a desideratum that pushes for less public goods to be provided, and becomes more restrictive as t grows. A menu is u-contestable if there exists\n1In the courses example, this translates to the inability to charge more for some courses over others. In the ATM example, we thus capture settings in which there are fixed fees for ATM usage. In the vending machine example, we thus capture settings in which the prices of products sold are similar across machines.\na public good not on the menu that u students prefer to all public goods on the menu. A menu is u-uncontestable if it is not u-contestable.2 This is a desideratum that pushes for more public goods to be provided, and becomes more restrictive as u shrinks. A menu is (t, u)-stable if it is both t-feasible and u-uncontestable. The notion of (t, u)-stability captures the idea that a public good covers its cost when it is used by at least t agents, and that if u or more agents demand an unprovided good, then market forces will lead to its offering.3\nExistence. We start with the case of no setup costs or other frictions, i.e., with the case of (t, t)-stability.4 While for g = 2 a (t, t)-stable solution always exists, we show by an example that with g \u2265 3 public goods, there are menu selection problems and corresponding t such that no (t, t)-stable solution exists. Our first main question is for every g and t, therefore, how small (compared to t) can u be so that every menu selection problem with g goods has a (t, u)-stable solution. As it turns out, the answer is intimately connected to the ratio between u\u22121 and t\u22121, as already hinted by the following two relatively straightforward bounds:5 Proposition 1.1. For every g \u2265 3 and t, u \u2208 N such that u\u22121 t\u22121 < 2, there exists a menu selection problem with g public goods that has no (t, u)-stable menu.\nProposition 1.2. For every g \u2265 2 and t, u \u2208 N such that u\u22121 t\u22121 \u2265 g\u22121, every menu selection problem with g public goods has a (t, u)-stable menu.\nTrying to improve either of these bounds reveals intricate mathematical structure that must be mapped out and understood. Our first main result is that the lower bound in Proposition 1.1 is tight for all g \u2264 6.\nTheorem 1.3 (See Theorems 4.1 and 4.8). For every 3 \u2264 g \u2264 6 and t, u \u2208 N such that u\u22121 t\u22121 \u2265 2, every menu selection problem with g public goods has a (t, u)-stable menu.\nWe prove Theorem 1.3 analytically for g = 3, 4. For g = 5, 6, we first use structural insights to reduce the question of an existence of a counterexample to a polyhedra covering problem that we encode as an SMT problem, and then computationally show that no counterexample exists via an SMT solver.\n2In the courses example, one might imagine a complaint by u students as something that requires the university\u2019s attention. In the ATM example, u-contestability might result in market forces adding a machine.\n3Stability takes no stand on whether the public goods that are provided (or this hypothetical addition public good) are provided by the same provider or by different providers.\n4As for the case of t > u, beyond being less economically motivated, we note that it is immediate to see that in this case, a (t, u)-stable solution is not guaranteed to exist; indeed, consider one public good and u agents who desire it.\n5While this might suggest a reparametrization of the problem using t\u2032 := t\u22121 and u\u2032 := u\u22121, we avoid such a reparametrization as we find that the quantity t\u2032\u2014the maximum number of agents that is insufficient for sustaining the offering of a single public good\u2014has a lesser direct economic meaning than t.\nSurprisingly, running the same SMT problem for g = 7 reveals a counterexample showing\nthat Proposition 1.1 is no longer tight when g \u2265 7.6\nTheorem 1.4. For every g \u2265 7 and t, u \u2208 N such that u \u2264 23\u230a t\u22121 11 \u230b, there exists a menu selection problem with g public goods that has no (t, u)-stable menu. (When t\u22121 is divisible by 11, this condition is equivalent to u\u22121\nt\u22121 < 23 11 \u2248 2.1.)\nOur second main result is a somewhat improved upper bound for all g.\nTheorem 1.5. For every g \u2265 4 and t, u \u2208 N such that u\u22121 t\u22121 \u2265 g\u22122, every menu selection problem with g goods has a (t, u)-stable menu.\nStrategyproofness. In the second part of this paper, we focus on g \u2208 {2, 3, 4, 5, 6}, i.e., the case in which we have a tight characterization for guaranteed existence, and ask for each such g whether there exists a strategyproof stable mechanism, i.e., a mechanism whose inputs are a menu selection problem with g public goods and with u\u22121 t\u22121 \u2265 2, 7 and whose output is a (t, u)-stable menu, which is strategyproof when its output is viewed as the matching that matches each agent to their favorite public good in the output menu. Due to nature of menu selection problems and the motivation behind them, another desideratum that we look for is for the mechanism to be anonymous, i.e, not factor in the identities of the different agents when selecting a stable menu. We first find a positive result.\nTheorem 1.6 (For more details, see Proposition 6.5). For g = 2, there exists a strategyproof anonymous stable mechanism.\nThe mechanism constructed in Theorem 1.6 is based upon majority voting, carefully tweaked with respect to when both public goods should be provided and when none should be provided, on the one hand maintaining stability, and on the other controlling transitions between zero, one, and two provided public goods to remove any incentives to misreport. Our main result for strategyproofness is a negative result for higher numbers of goods.\nTheorem 1.7 (For more details, see Theorem 6.6). For g \u2208 {3, 4, 5, 6}, every anonymous stable mechanism is not strategyproof.\nThe major workhorse behind Theorem 1.7 is the Gibbard\u2013Satterthwaite theorem (Gibbard, 1973; Satterthwaite, 1975), and the main challenge is how to transform a voting\n6Ascertaining the tightness of the lower bound in Theorem 1.4, or alternatively further tightening it, whether for g = 7 or for higher values of g, seems beyond the computational capabilities at our disposal. Solving the same problem encoded as an ILP turns out to be even more computationally demanding (based on performance comparisons on lower values of g).\n7Or u\u22121t\u22121 \u2265 1 when g = 2.\nproblem with g alternatives into a menu selection problem such that all stable menus are singletons. As it turns out, it is possible to construct such a transformation, where furthermore stability of the solution implies unanimity.\nThis paper defines the stable menu selection problem, showcases that its solutions possess an intricate structure, providing nontrivial upper and lower bounds (tight for some g) for guaranteed existence, and maps out its strategic properties. While Theorem 1.3 completely resolves the guaranteed existence problem for g \u2264 6, Theorems 1.4 and 1.5 expose the complex structure of this problem for higher number of goods, and leave an asymptotic gap of constant vs. \u0398(g) for this question, which we leave as an open problem.\nOpen Question. For every g \u2265 7 and t \u2208 N, what is the minimal value ug(t) such that every menu selection problem with g public goods has a ( t, ug(t) ) -stable solution? In particular, what is the asymptotic dependence of maxt ug(t)\nt on g?"
        },
        {
            "heading": "1.1 Related Work",
            "text": "The stable matching literature began with the seminal paper of Gale and Shapley (1962), showing the existence of a stable matching for every 1-to-1 stable matching problem. It has been shown for various many-to-1 flavors of this problem that existence is maintained so long as the preferences on each side considers the entities on other side as substitutes (see, e.g., Hatfield and Milgrom, 2005; Hatfield and Kojima, 2010; Hatfield and Kominers, 2015). Strategic considerations for stable matching were first investigated by Dubins and Freedman (1981) and Roth (1982), who showed that the stable matching mechanism introduced by Gale and Shapley is strategyproof for one of the sides of the market. As noted, two major differences from the problems studies in this literature are the lack of (upper) capacity constraints on the public goods, and the strong complementarities exhibited by the \u201cpreferences\u201d of the goods over sets of agents.\nThe motivation for our problem is related to that of the literature on public projects (see, e.g., Papadimitriou, Schapira, and Singer, 2008), with a main difference being that no transfers are allowed in our model. The motivation is also related to that of facility location games initiated by (Hotelling, 1929), which features different solution concepts. Finally, there are also connections with the literature on committee selection (Aziz et al., 2017; Jiang, Munagala, and Wang, 2020), with a main difference being that in out model there is no exogenously determined \u201cbudget\u201d of how many public goods could be offered, but rather public goods can be offered as long as their usage justifies it."
        },
        {
            "heading": "2 Model and Notation",
            "text": "In this section, we formally introduce the stable menu selection problem. As will be seen below, we allow for students to have incomplete preference lists over public goods. While strictly speaking this makes the problem harder, we note that there does not seem to be a qualitative jump here. Indeed, we do not know how to significantly shorten our proofs for the case of only complete preferences, nor do we have additional or significantly stronger results for that setting (see also Lemma A.2 in Appendix A).\nDefinition 2.1 (Menu Selection Problem). A menu selection problem (with unit demand) is a triplet ( N,G, (\u227bi)i\u2208N ) , where:\n\u2022 N = {1, . . . , n} is a finite set of agents. A generic element of N will be denoted i.\n\u2022 G = {1, . . . , g} is a finite set of public goods. A generic element of G will be denoted j.\n\u2022 \u227bi is an order over G of the form j1 \u227b \u00b7 \u00b7 \u00b7 \u227b jg\u2032 , where g\u2032 \u2264 g, and for jk \u2208 G distinct. (In other words, agent i ranks their top g\u2032 choices, with g\u2032 potentially depending on i,\nand any unranked choice is as good as some outside option.)\nGiven a menu of public goods that are offered, each agent is assigned to their favorite of these public goods, if such a public good exists. Formally, we define the agent assignment as follows.\nDefinition 2.2 (Agent Assignment). Given a menu selection problem ( N,G, (\u227bi)i\u2208N ) , for a menu O \u2286 G (of goods to be offered), we define the corresponding agent assignment aO : N \u2192 O \u222a {\u22a5} (here \u22a5 is the \u201coutside option\u201d) as follows. For each agent i \u2208 N , let G\u2032 denote the public goods ranked in \u227bi. If O \u2229 G\u2032 \u0338= \u2205, let aO(i) be agent i\u2019s favorite public good (according to \u227bi) in O. Otherwise, if O \u2229G\u2032 = \u2205, then let aO(i) :=\u22a5.\nWe now define the two main desiderata for a menu of public goods. The first, feasibility, pushes toward offering fewer public goods, while the second, uncontestability, pushes toward offering more public goods. This tension is at the heart of the problem that we describe.\nDefinition 2.3 (Feasibility; Uncontestability). Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem, and let O \u2286 G be a menu of public goods to be offered.\n\u2022 For some t \u2208 N, the menu O is said to be t-feasible if \u2223\u2223a\u22121O (j)\u2223\u2223 \u2265 t for every j \u2208 O.\nThat is, every offered public good j \u2208 O is assigned to at least t agents.\n\u2022 For some u \u2208 N, the menu O is said to be u-uncontestable if there exists no unoffered public good j \u2208 G \\ O such that \u2223\u2223a\u22121O\u222a{j}(j)\u2223\u2223 \u2265 u. That is, no unoffered public good has a lobby of at least u agents who prefer it over all public goods in O.\nDefinition 2.4 (Stability). Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem. A menu of public goods O \u2286 G is said to be (t, u)-stable if it is t-feasible and u-uncontestable.\nFact 2.5 (Monotonicity). Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem, and let O \u2286 G be a menu of public goods to be offered.\n\u2022 If O is t-feasible for some t \u2208 N, then O\u2032 is t\u2032-feasible for all O\u2032 \u2286 O and t\u2032 \u2264 t.\n\u2022 If O is u-uncontestable for some u \u2208 N, then O\u2032 is u\u2032-uncontestable for all O\u2032 \u2287 O and u\u2032 \u2265 u.\nFinally we fix some notation. Let |j| := |a\u22121G (j)| denote the number of agents whose favorite public good is j. Let |j \u227b j\u2032| := |a\u22121{j,j\u2032}(j)| denote the number of agents who prefer public good j over public good j\u2032. And more generally, for j \u2208 G\\O, let |j \u227b O| := |a\u22121O\u222a{j}(j)| denote the number of agents who prefer public good j over all public goods in O \u2286 G."
        },
        {
            "heading": "3 Simple Lower and Upper Bounds",
            "text": "Our main question is for which menu selection problems a stable solution exists. As it turns out, an interesting (and useful) point of view into this question is to ask for which combination of parameters t, u \u2208 N, and more specifically, for which ratio between u\u22121 and t\u22121, a stable solution is guaranteed to exist for all assignment problems. We start by demonstrating that for some such combinations of parameters, the existence of a stable solution is not guaranteed. Here we split into two cases: first, g = 2 and u\u22121 t\u22121 < 1, and second, g \u2265 3 and u\u22121 t\u22121 < 2.\nProposition 3.1. For every t, u \u2208 N such that u < t,8 there exists a menu selection problem on two public goods that has no (t, u)-stable menu.\nProof. Consider a menu selection problem with u agents, all of whom have the preference list 1 \u227b 2. Then the menu \u2205 is not u-uncontestable, because all u agents would lobby for public good 1 (or 2). However, any nonempty menu O \u2286 {1, 2} is not t-feasible, because there are only u < t agents.\nProposition 1.1. For every g \u2265 3 and t, u \u2208 N such that u\u22121 t\u22121 < 2, there exists a menu selection problem with g public goods that has no (t, u)-stable menu.\nProof. Let x := \u2308 u 2 \u2309 < t. Set n := 3x, and set the preferences of the agents as follows:\n8Note u < t is equivalent to u\u22121t\u22121 < 1.\n\u2022 1 \u227bi 2 \u227bi 3 for every i \u2208 {1, . . . , x},\n\u2022 2 \u227bi 3 \u227bi 1 for every i \u2208 {x+1, . . . , 2x},\n\u2022 3 \u227bi 1 \u227bi 2 for every i \u2208 {2x+1, . . . , 3x}.\nFirst, observe that no O \u228a {1, 2, 3} can be t-feasible, because no agent will use public good k \u2208 O \\ {1, 2, 3}. So, a (t, u)-stable menu O must satisfy O \u2286 {1, 2, 3}. Reasoning by cases, we now show that no such O is both t-feasible and u-uncontestable.\n\u2022 |O| = 3: as the number of agents n satisfies n = 3x < 3t, we have that O is not t-feasible.\n\u2022 |O| = 2: by symmetry, assume without loss of generality that O = {1, 2}. By definition of aO, we have a \u22121 O (2) = {x+1, . . . , 2x}, and so \u2223\u2223a\u22121O (2)\u2223\u2223 = x < t. Thus, O is not tfeasible.\n\u2022 |O| = 1: by symmetry, assume without loss of generality that O = {1}. We have 3 \u227bi 1 = aO(i) for every i \u2208 U := {x+1, . . . , 3x}, while |U | = 2x \u2265 u, and so O is not u-uncontestable.\n\u2022 |O| = 0: as n = 3x \u2265 u, we have that O = \u2205 is not u-uncontestable.\nWe conclude this section with a fairly simple upper bound, showing that if the ratio\nbetween u\u2212 1 and t\u2212 1 is sufficiently large, then a stable solution is guaranteed to exist.\nProposition 1.2. For every g \u2265 2 and t, u \u2208 N such that u\u22121 t\u22121 \u2265 g\u22121, every menu selection problem with g public goods has a (t, u)-stable menu.\nProof. Let O := {k \u2208 G : |k| \u2265 t}. There are two cases. Case 1: O \u0338= \u2205. By construction, O is t-feasible. Additionally, each public good j \u2208 G\\O satisfies |j| < t, so the maximum possible lobby size is\nmax j\u2208G\\O\n|j \u227b O| \u2264 (g \u2212 |O|)(t\u22121) \u2264 (g\u22121)(t\u22121) < u.\nThus O is (t, u)-stable.\nCase 2: O = \u2205. If \u2205 is u-uncontestable, then \u2205 is (t, u)-stable, because \u2205 is trivially t-feasible. Otherwise, there exists some k \u2208 G such that |k \u227b \u2205| \u2265 u, so {k} is t-feasible. And if {k} is offered, the maximum possible lobby size is\nmax j\u2208G\\{k}\n|j \u227b {k}| \u2264 (g\u22121)(t\u22121) < u,\nso {k} is (t, u)-stable.\nNote that the gap between the lower bound of Proposition 1.1 and the upper bound of Proposition 1.2 is stark: the ratio between u and t is \u0398(1) in the former, while it is \u0398(g) in the latter. In the remainder of this paper, we explore the space between these two simple bounds."
        },
        {
            "heading": "4 Tightness of the Lower Bound for g \u2264 6",
            "text": "In this section, possibly surprisingly, we show that the simple lower bound of Proposition 1.1 is in fact precisely tight for all g \u2264 6. That is, the condition presented in Proposition 1.1 is not only sufficient but also necessary for the inexistence of a solution for such g. We start by proving this tightness analytically for g \u2264 4 (Section 4.1), and then identify an equivalence to a polyhedra covering problem, which allows us to prove this tightness computationally all the way up to g = 6 (Section 4.2). Interestingly, this tightness ceases to hold starting at g = 7; this will be shown in Section 5, where we further study the domain of g \u2265 7."
        },
        {
            "heading": "4.1 Analytic Proof for g \u2264 4",
            "text": "In this section we prove the first two parts of Theorem 1.3 from the introduction. That is, we prove the tightness of the lower bound of Proposition 1.1 in the case g \u2264 4. Specifically, we prove the following.\nTheorem 4.1. For every g \u2208 {3, 4} and t, u \u2208 N such that u \u2265 2t\u22121, every menu selection problem with g public goods has a (t, u)-stable menu.\nOur proof idea is as follows. One simple way to find a (t, u)-stable menu O is to run a greedy algorithm: repeatedly add public goods demanded by \u2265 u agents, and remove public goods only used by < t agents, until t-feasibility and u-uncontestability are both satisfied. If this algorithm stops, then the resulting menu is (t, u)-stable. However, this algorithm may not stop: In this case, by finiteness, it will cycle. As we will see, even for g = 4 this algorithm may indeed cycle (see Example 4.2), however an analysis of the cycle will allow us to nonetheless find a (t, u)-stable solution for g = 4.9\nWe begin by formally specifying the greedy algorithm (Algorithm 1). We denote a cycle of Algorithm 1 by, e.g.,\nO1 \u2212j1\u2212\u2212\u2192 O2 +j2\u2212\u2212\u2192 O3 +j3\u2212\u2212\u2192 \u00b7 \u00b7 \u00b7On +ji\u2212\u2212\u2192 O1, 9This approach turns out to be insufficient for the case of g \u2265 5. See Appendix B for a demonstration.\n10This can be replaced with any other menu of public goods with no change to the analysis below. 11This can be replaced with any other consistent tie-breaking with no change to the analysis below. 12This item can be consistently swapped with the preceding one with no change to the analysis below.\nAlgorithm 1 Greedy algorithm for the menu selection problem\nInitialize O \u2190 \u2205.10 while O is not (t, u)-stable do\nif O is not t-feasible then By definition there exists j \u2208 O such that |j \u227b O \\ {j}| < t. Let j be a minimal11 such j, and update O \u2190 O \\ {j}. else if O is not u-uncontestable12 then By definition there exists j \u2208 G \\O such that |j \u227b O| \u2265 u. Let j be a minimal11 such j, and update O \u2190 O \u222a {j}.\nend if end while\nwhere O2 = O1 \\{j1}, O3 = O2\u222a{j2}, etc., and refer to this expression as a cycle transcript. Next we give an example for when Algorithm 1 may cycle in the case g = 4 (which straightforwardly generalizes to larger g).\nExample 4.2 (Greedy algorithm may cycle when g = 4). Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem with g = 4 and the following agents:\n\u2022 t\u22121 agents have preference 4 \u227b 3 \u227b 2 \u227b 1\n\u2022 t\u22121 agents have preference 3 \u227b 2 \u227b 1 \u227b 4\n\u2022 t\u22121 agents have preference 2 \u227b 1 \u227b 4 \u227b 3\n\u2022 t\u22121 agents have preference 1 \u227b 4 \u227b 3 \u227b 2\nSet u := 2t\u22121. Then the (t, u)-stable menus are {1, 3} and {2, 4}. However, Algorithm 1 cycles in the following way:\n\u2205 +1\u2212\u2192 {1} +2\u2212\u2192 {1, 2} \u22121\u2212\u2192 {2} +3\u2212\u2192 {2, 3} \u22122\u2212\u2192 {3} +4\u2212\u2192 {3, 4} \u22123\u2212\u2192 {4} +1\u2212\u2192 {4, 1} \u22124\u2212\u2192 {1} \u2192 . . .\nThe cycle in Example 4.2 has a simple structure: it alternates between menus of size 1\nand 2. The following two lemmas show that when g = 4, all cycles must be of this form.\nLemma 4.3. Assume u \u2265 t. Each menu along a cycle of the above greedy algorithm has cardinality at least 1.\nProof. Suppose for the sake of contradiction that \u2205 appears in the cycle. Then the cycle transcript contains a step {j} \u2212j\u2212\u2192 \u2205 for some j \u2208 G. Because j was removed along the cycle, it must also be added: thus, there exists some A \u2286 G with j /\u2208 A such that A +j\u2212\u2192 A \u222a {j} appears in the cycle transcript. Now, the {j} \u2212j\u2212\u2192 \u2205 step implies |j \u227b \u2205| < t, and the\nA +j\u2212\u2192 A \u222a {j} step implies |j \u227b A| \u2265 u. But |j \u227b \u2205| \u2265 |j \u227b A|, and because u \u2265 t, we have a contradiction.\nLemma 4.4. Assume that u \u2265 2t\u22121. Each menu along a cycle of the above greedy algorithm has cardinality at most g\u22122.\nProof. Assume for contradiction that a menu with cardinality at least g\u22121 exists along a cycle. So, there exists a menu A with |A| \u2265 g\u22122 and a public good j /\u2208 A such that j is added to A along that cycle. Since j is added along that cycle, it is also removed from some menu B along that cycle. Thus, |j \u227b A| \u2265 u and |j \u227b B| < t. We cannot have B \u2286 A, because this would imply t > |j \u227b B| \u2265 |j \u227b A| \u2265 u, a contradiction. Thus B \u228a A. Since |A| = g\u22122 and j /\u2208 B, we have |B \\A| = 1. Let k \u2208 B \\A denote this unique element.\nSince |j \u227b A| \u2265 u, |j \u227b B| < t, and u \u2265 2t\u22121, there exist at least u\u2212 (t\u22121) \u2265 t agents which satisfy j \u227b A but not j \u227b B. The only way for an agent satisfying j \u227b A to violate j \u227b B is for them to violate j \u227b k. Thus |k \u227b j \u227b A| \u2265 t, which implies |k \u227b G \\ {k}| \u2265 t. In other words, at least t agents prefer k the most; therefore, k is always assigned to at least t agents if offered. But k /\u2208 A while k \u2208 B, so k is removed along that cycle\u2014a contradiction.\nLemma 4.4 implies that when g = 4, if Algorithm 1 cycles, the cycle must be of the form\n{j1} \u2192 {j1, j2} \u2192 {j2} \u2192 {j2, j3} \u2192 \u00b7 \u00b7 \u00b7 \u2192 {j\u2113\u22121} \u2192 {j\u2113\u22121, j\u2113} \u2192 {j\u2113} \u2192 {j\u2113, j1} \u2192 {j1},\nwhere \u2113 \u2208 {2, 3, 4}. It remains to analyze these cases. In Lemma 4.5 and Lemma 4.6, we show that \u2113 = 2, 3 are impossible. Finally, in Lemma 4.7, we show that when \u2113 = 4, a (t, u)-stable menu can be computed from the cycle transcript directly.\nLemma 4.5. Consider a menu selection problem ( N,G, (\u227bi)i\u2208N ) with g \u2265 2 and u \u2265 t. Algorithm 1 cannot cycle in the following way, for distinct j1, j2 \u2208 G:\n{j1} \u2192 {j1, j2} \u2192 {j1}.\nProof. Suppose such a cycle exists. The step {j1} \u2192 {j1, j2} implies |j2 \u227b j1| \u2265 u, and the step {j1, j2} \u2192 {j1} implies |j2 \u227b j1| < t. This cannot happen if u \u2265 t.\nLemma 4.6. Consider a menu selection problem ( N,G, (\u227bi)i\u2208N ) with g \u2265 3 and u \u2265 2t\u22121. Algorithm 1 cannot cycle in the following way, for distinct j1, j2, j3 \u2208 G:\n{j1} \u2192 {j1, j2} \u2192 {j2} \u2192 {j2, j3} \u2192 {j3} \u2192 {j3, j1} \u2192 {j1}.\nProof. Suppose such a cycle exists. The step {j1} \u2192 {j1, j2} implies |j2 \u227b j1| \u2265 u, and the steps {j2, j3} \u2192 {j3} and {j3, j1} \u2192 {j1} imply |j2 \u227b j3| < t and |j3 \u227b j1| < t. Notice that for any agent i for which j2 \u227bi j1, we must have j2 \u227bi j3 or j3 \u227bi j1. Thus |j2 \u227b j1| \u2264 |j2 \u227b j3|+ |j3 \u227b j1| \u2264 2(t\u22121) < u.\nLemma 4.7. Consider a menu selection problem ( N,G, (\u227bi)i\u2208N ) with g \u2265 4 and u \u2265 2t\u22121. For distinct j1, j2, j3, j4 \u2208 G, if Algorithm 1 cycles like\n{j1} \u2192 {j1, j2} \u2192 {j2} \u2192 {j2, j3} \u2192 {j3} \u2192 {j3, j4} \u2192 {j4} \u2192 {j4, j1} \u2192 {j1},\nthen {j1, j3} and {j2, j4} are t-feasible and u-uncontestable.\nProof. We will prove {j1, j3} is t-feasible and u-uncontestable, as the proof is symmetric for {j2, j4}. To show t-feasibility, notice\n|j3 \u227b j1| \u2265 |j3 \u227b j2| \u2212 |j1 \u227b j2| \u2265 t |j1 \u227b j3| \u2265 |j1 \u227b j4| \u2212 |j3 \u227b j4| \u2265 t,\nwhere here we are using |j3 \u227b j2|, |j1 \u227b j4| \u2265 u and |j1 \u227b j2|, |j3 \u227b j4| < t. To show u-uncontestability, notice\n|j2 \u227b {j1, j3}| \u2264 |j2 \u227b j3| < t \u2264 u |j4 \u227b {j1, j3}| \u2264 |j4 \u227b j1| < t \u2264 u,\nwhere here we are using |j2 \u227b j3|, |j4 \u227b j1| < t.\nFinally, we combine the above lemmas to prove Theorem 4.1.\nProof of Theorem 4.1. By Lemma A.4, it suffices to consider the case |j| < t for all j \u2208 G. In this setting, every O \u2286 G with |O| = 2 is u-uncontestable, because the maximum possible lobby size is\nmax j\u2208G\\O\n|j \u227b O| \u2264 (g\u2212|O|)(t\u22121) \u2264 2(t\u22121) < u.\nNow, run Algorithm 1 on this menu selection problem. If there is a cycle, the cycle must\nbe of the form\n{j1} \u2192 {j1, j2} \u2192 {j2} \u2192 {j2, j3} \u2192 \u00b7 \u00b7 \u00b7 \u2192 {j\u2113\u22121} \u2192 {j\u2113\u22121, j\u2113} \u2192 {j\u2113} \u2192 {j\u2113, j1} \u2192 {j1},\nwhere \u2113 \u2264 4. By Lemmas 4.5 and 4.6, in fact \u2113 = 4. And by Lemma 4.7, a t-feasible and u-uncontestable O \u2286 G exists."
        },
        {
            "heading": "4.2 Computer-Assisted Proof for g = 5, 6",
            "text": "In this section we prove the remaining two parts of Theorem 1.3 from the introduction. That is, we prove the tightness of the lower bound of Proposition 1.1 in the cases g \u2208 {5, 6}.\nTheorem 4.8. For every g \u2208 {5, 6} and t, u \u2208 N such that u \u2265 2t\u22121, every menu selection problem with g public goods has a (t, u)-stable menu.\nWe prove this upper bound in a computer-aided manner: we analytically show that any instance of a menu selection problem is equivalent to a polyhedra covering problem, which we solve using the open-source SMT solver z3 (De Moura and Bj\u00f8rner, 2008).13 Specifically, we can encode any instance of a menu selection problem on g public goods (for now assume complete preferences) as a point in Zg!, where each component counts the number of agents with a specific preference. Moreover, for each menu O \u2286 G, we show that the condition \u201cO is (t, u)-stable for a menu selection problem\u201d is equivalent to the condition \u201cthe menu selection problem\u2019s encoding x \u2208 Zg! is contained in some polyhedron P g,t,uO .\u201d Thus, every menu selection problem has a (t, u)-stable solution if and only if Zg!\u22650 is covered by the polyhedra P g,t,uO for all O \u2286 G."
        },
        {
            "heading": "4.2.1 Notation",
            "text": "Fix the number of public goods g, as well as the parameters t and u. Let G = {1, 2, . . . , g} denote the menu of all public goods. Let P denote some set of preferences \u227b over G, and fix some ordering of the elements of P .\nFirst we specify how to convert a menu selection problem into a point in high-dimensional\nspace.\nDefinition 4.9. Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem for which {\u227bi: i \u2208 N} \u2286 P for some set P of preferences over G. An agent cohort is a vector x \u2208 Z|P|, indexed by preferences \u227b\u2208 P , where x\u227b is defined to be the number of agents in ( N,G, (\u227bi)i\u2208N ) with preferences equal to \u227b.\nNext we define the polyhedra P g,t,uO for all O \u2286 G in such a way such that an agent cohort x satisfies x \u2208 P g,t,uO if and only if O is (t, u)-stable for the menu selection problem corresponding to x.\n13Our code is publicly available at the GitHub repository https://github.com/sara-fish/ stable-menus-of-public-goods. There we explore two methods for solving our particular polyhedra covering problem: One, by encoding as a SMT problem (and solving with z3), and two, by encoding as an ILP (and solving with Gurobi). The SMT solver approach is substantially faster, so we focus on it in our exposition.\nDefinition 4.10. The matrix associated with O \u2286 G is denoted Ag,t,uO . We specify A g,t,u O \u2208 Zg\u00d7|P| by specifying each row ai at a time. For all i = 1, . . . , g:\n\u2022 (t-feasibility) If i \u2208 O: for each \u227b\u2208 P , set a(\u227b)i = 1 if i \u227b O \\ {i}, and 0 otherwise.\n\u2022 (u-uncontestability) If i /\u2208 O: for each \u227b\u2208 P , set a(\u227b)i = 1 if i \u227b O, and 0 otherwise.\nDefinition 4.11. The polyhedron associated with O \u2286 G, denoted P g,t,uO , is given by {x \u2208 Z|P|\u22650 : DA g Ox \u2265 b}, where D \u2208 Zg\u00d7g and b \u2208 Zg are defined as follows:\n\u2022 To specify D, set D(ii) := 1 if i \u2208 O and D(ii) := \u22121 if i /\u2208 O (and D(ij) := 0 for i \u0338= j).\n\u2022 To specify b, set b(i) := t if i \u2208 O and b(i) := \u2212(u\u22121) if i /\u2208 O.\nThe following proposition follows directly from the above definitions.\nProposition 4.12. Fix t, u \u2208 N. The following two statements are equivalent:\n(1) The polyhedra P g,t,uO (for all O \u2286 G) cover Z |P| \u22650, that is, Z |P| \u22650 \u2286 \u22c3 O\u2286G P g,t,u O .\n(2) For every menu selection problem on g public goods, there exists a (t, u)-stable set."
        },
        {
            "heading": "4.2.2 SMT Solver Calculation",
            "text": "By Proposition 4.12, to prove there exists a (t, u)-stable menu for all menu selection problems (over preferences P) on g public goods, it suffices to show Z|P|\u22650 \u2286 \u22c3 O\u2286G P g,t,u O .\nIn other words, for g \u2264 6, we wish to show:\n\u2200x \u2208 Z|P|\u22650, \u2200t, u \u2208 N s.t. u \u2265 2t\u22121, \u2203O \u2286 G s.t. x \u2208 P g,t,u O ,\nor equivalently,\n\u00ac [\u2203x \u2208 Z|P|\u22650, \u2203t, u \u2208 N s.t. u \u2265 2t\u22121, s.t. \u2200O \u2286 G, x /\u2208 P g,t,u O ]. (\u2217)\nSMT solvers are especially well-equipped to verify expressions like (\u2217). An SMT (satisfiability modulo theories) solver takes as input simple mathematical and logical constraints over variables, and outputs whether the constraints are satisfiable or unsatisfiable.\nWe obtain the most general result when we let P be the set of all preferences of the form j1 \u227b \u00b7 \u00b7 \u00b7 \u227b jc\u2032 , where g\u2032 \u2264 g, and for ji distinct (that is, all preferences permitted in Definition 2.1). Note |P| = \u2211g k=0 g! k! .\nIn our case, the variables consist of |P| + 2 nonnegative integers (the |P| components of x, as well as t and u), and there are 2g constraints (one for each O \u2286 G). Recall\nP g,t,uO = {x \u2208 Z |P| \u22650 : DA g,t,u O x \u2265 b}, where D is a diagonal matrix. Let ai denote the ith row of Ag,t,uO \u2208 Zg\u00d7|P| and b(i) the ith entry of b \u2208 Zg. Thus,\nx /\u2208 P g,t,uO \u21d0\u21d2 g\u2228\ni=1\n[\u27e8D(ii)ai, x\u27e9 < b(i)].\nThis is an OR of g integer linear inequalities, which are constraints SMT solvers can generally handle.\nUsing Z3Py, a Python API, we input (\u2217) into the SMT solver z3. Specifically, we input the statement \u00ac(\u2217), so that an output of \u201cunsatisfiable\u201d means every menu selection problem has a (t, u)-stable set, for that particular value of g. For each g = 5, 6 (and also for g = 3, 4), the SMT solver returned \u201cunsatisfiable\u201d.\nProving upper bounds using this method becomes computationally infeasible for larger g. Note for example the exponential dependence of |P| on g. Moreover, fundamentally this method involves solving an instance of a polyhedra covering problem, and this family of problems is coNP-hard in general.14 Nonwithstanding there is much structure to this particular instance (especially in the case of complete preferences, see Appendix C). It is an interesting open problem to find a computationally efficient algorithm that checks, for fixed\ng, t, u, whether Z|P|\u22650 \u2286 \u22c3 O\u2286G P g,t,u O ."
        },
        {
            "heading": "5 g = 7 and Beyond",
            "text": "In Section 3, we show that a menu selection problem must have a solution when u\u22121 t\u22121 \u2265 g\u22121, and may not have a solution when u\u22121 t\u22121 < 2. In this section, we improve on these simple bounds in both directions."
        },
        {
            "heading": "5.1 Improved Lower Bound",
            "text": "Using an SMT solver (see Section 4.2 for details), we computationally found a menu selection problem on g = 7 public goods for which there exists no (t, u)-stable menu in the case u \u2265 2t\u22121. The SMT solver outputted a complex menu selection problem on n = 144 agents with t = 24 and u = 47 (these t, u in particular satisfy u\u22121\nt\u22121 = 2). By studying this\ncounterexample and manually simplifying it, we obtain the following improved lower bound (cf. Proposition 1.1).\n14To encode an instance of 3-SAT on n variables x1, . . . , xn as a polyhedra covering problem (whether input polyhedra Pi cover some polyhedron Q): set Q = [0, 1]\nn and encode each clause as follows: e.g. clause (xi \u2228 xj \u2228 \u00acxk) becomes the polyhedron {x : x(i) > 1/2} \u2229 {x : x(j) > 1/2} \u2229 {x : x(k) \u2264 1/2}. Finally, intersecting with Zn does not change this analysis.\nTheorem 1.4. For every g \u2265 7 and t, u \u2208 N such that u \u2264 23\u230a t\u22121 11 \u230b, there exists a menu selection problem with g public goods that has no (t, u)-stable menu. (When t\u22121 is divisible by 11, this condition is equivalent to u\u22121\nt\u22121 < 23 11 \u2248 2.1.)\nWe prove Theorem 1.4 by constructing a menu selection problem for which no (t, u)-stable\nsolution exists.\nTo construct this problem, let x := \u230a t\u22121 11 \u230b. Set u\u2032 := 23x and t\u2032 := 11x+ 1. Then u \u2264 u\u2032 and t\u2032 \u2264 t. By monotonicity (Fact 2.5), it suffices to find a menu selection problem for which there exists no (t\u2032, u\u2032)-stable menu of public goods. To this end, consider the set of agents in Table 1.\nFirst, observe that any t\u2032-feasible O \u2286 G must satisfy O \u2286 {1, 2, 3, 4, 5, 6, 7}, because these are the only ranked public goods. Thus, to show the set of agents in Table 1 has no (t\u2032, u\u2032)-stable menu of public goods, by monotonicity (Fact 2.5) it suffices to prove the following two lemmas.\nLemma 5.1. Every O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 3 is not u\u2032-uncontestable.\nLemma 5.2. Every O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 4 is not t\u2032-feasible.\nWe verify these claims by casework. Note by symmetry, each of the cases |O| = 3 and |O| = 4 only require checking ( 7 3 ) /7 = ( 7 4 ) /7 = 5 menus.\nProof of Lemma 5.1. By symmetry, it suffices to show each of the ( 7 3 ) /7 = 5 values of O are not u\u2032-uncontestable:\n\u2022 O = {1, 2, 3}. Then |6 \u227b O| = 5x+ 5x+ 5x+ 3x+ 3x+ x+ x = 23x \u2265 u\u2032.\n\u2022 O = {1, 2, 4}. Then |7 \u227b O| = 5x+ 5x+ 5x+ 3x+ 3x+ x+ x = 23x \u2265 u\u2032.\n\u2022 O = {1, 2, 5}. Then |7 \u227b O| = 5x+ 5x+ 3x+ 3x+ 3x+ x+ x+ x+ x = 23x \u2265 u\u2032.\n\u2022 O = {1, 2, 6}. Then |5 \u227b O| = 5x+ 5x+ 5x+ 3x+ 3x+ x+ x+ x+ x = 23x \u2265 u\u2032.\n\u2022 O = {1, 3, 5}. Then |7 \u227b O| = 5x+5x+3x+3x+x+x+x+x+x+x+x = 23x \u2265 u\u2032.\nProof of Lemma 5.2. By symmetry, it suffices to show each of the ( 7 4 ) /7 = 5 values of O are not t\u2032-feasible:\n\u2022 O = {1, 2, 3, 4}. Then |4 \u227b O \\ {4}| = 5x+ 3x+ x+ x+ x = 11x < t\u2032.\n\u2022 O = {1, 2, 3, 5}. Then |3 \u227b O \\ {3}| = 5x+ 3x+ x+ x+ x = 11x < t\u2032.\n\u2022 O = {1, 2, 3, 6}. Then |2 \u227b O \\ {2}| = 5x+ 3x+ x+ x+ x = 11x < t\u2032.\n\u2022 O = {1, 2, 4, 5}. Then |5 \u227b O \\ {5}| = 5x+ 3x+ x+ x+ x = 11x < t\u2032.\n\u2022 O = {1, 2, 4, 6}. Then |2 \u227b O \\ {2}| = 5x+ 3x+ x+ x = 10x < t\u2032.\nRemark 5.3. Using an SMT solver (see Section 4.2), we attempted to search for stronger lower bounds by checking whether 11u \u2265 23(t\u2212 1) + 1 is satisfiable when g \u2265 7. One month of computation on the equivalent of a modern laptop were not sufficient to determine satisfiability."
        },
        {
            "heading": "5.2 Improved Upper Bound",
            "text": "In this section we slightly improve upon the upper bound in Proposition 1.2. Our main result is the following.\nTheorem 1.5. For every g \u2265 4 and t, u \u2208 N such that u\u22121 t\u22121 \u2265 g\u22122, every menu selection problem with g goods has a (t, u)-stable menu.\nAt the heart of Theorem 1.5 is the following lemma.\nLemma 5.4. Fix any g \u2265 2 and t, u \u2208 N such that u \u2265 2t\u22121. Then for every menu selection problem, at least one of the following is true:\n(1) There exists some O \u2286 G with |O| = 1 such that O is u-uncontestable.\n(2) There exists some O \u2286 G with |O| = 2 such that O is t-feasible.\nRemark 5.5. In both of our lower bound constructions (Proposition 1.1, Theorem 1.4), the constructed menu selection problem not only satisfies the property that for all O \u2286 G, either O is not t-feasible or O is not u-uncontestable. In fact, a stronger property holds: there exists some k, such that all O \u2286 G with |O| = k are not u-uncontestable, and all O \u2286 G\nwith |O| = k + 1 are not t-feasible. (In the case of Proposition 1.1, we have k = 1, and in the case of Theorem 1.4, we have k = 3.) If there does not exist a menu selection problem satisfying this property, we say that there are no (k, k + 1)-gaps for parameters g, t, u.\nIn particular, Lemma 5.4 says that when u \u2265 2t\u22121, there are no (1,2)-gaps. Moreover, Proposition 1.1 demonstrates the existence of (1,2)-gaps when u \u2264 2t\u2212 2. Thus, by Proposition 4.12, when g \u2264 6, fixing t and u, we have that there are no (1,2)-gaps for g, t, u if and only if all menu selection problems have a (t, u)-stable solution.\nFor g \u2265 7, it is an open question whether such \u201cno gaps\u201d conditions are sufficient to imply the existence of (t, u)-stable solutions (it follows from monotonicity that they are necessary).\nWe first prove Theorem 1.5 using Lemma 5.4 as well as two simple lemmas that we prove\nin Appendix A, and later prove Lemma 5.4.\nProof of Theorem 1.5. By Lemma 5.4, it suffices to consider two cases.\nIn the first case, there exists some u-uncontestable O \u2286 G\u2032 with |O| = 1. Moreover, O is t-feasible, because by Lemma A.3, we can assume that each public good is ranked by at least t agents. Thus O is (t, u)-stable.\nIn the second case, there exists some t-feasible O \u2286 G\u2032 with |O| = 2. By Lemma A.4, we can assume |j| < t for each j \u2208 G, so the maximum possible lobby size is\nmax j\u2208G\u2032\\O\n|j \u227b O| \u2264 (|G\u2032| \u2212 |O|)(t\u22121) \u2264 (g\u22122)(t\u22121) < u.\nThus O is (t, u)-stable."
        },
        {
            "heading": "5.2.1 Proof of Lemma 5.4",
            "text": "Proof. Case g = 2: suppose neither (1) nor (2) holds. Then |1 \u227b 2| \u2265 u, |2 \u227b 1| \u2265 u, and |1 \u227b 2| < t OR |2 \u227b 1| < t. Since u \u2265 t these cannot all hold.\nNow we consider some g \u2265 3 (and assume the claim holds for smaller g). Again assume neither (1) nor (2) hold. We aim to derive a contradiction. Write xij := |i \u227b j| for short. Then all of the following statements hold:\n(\u2217) All O with |O| = 1 not u-uncontestable: For all i \u2208 G: \u2228\nj \u0338=i(xji \u2265 u).\n(\u2217\u2217) All O with |O| = 2 not t-feasible: For all {i, j} \u2286 G: (xij < t) \u2228 (xji < t).\nLet Bk := G \\ {k}. Consider the following smaller instance of the problem:\n\u2022 For all i \u2208 B: \u2228\nj \u0338=i(xji \u2265 u).\n\u2022 For all {i, j} \u2286 B: (xij < t) \u2228 (xji < t).\nBy (\u2217\u2217), all of the < t constraints here are true. By induction (this is a smaller subproblem), one of the \u2265 u constraints must be false. Specifically, say the constraint \u2228 j \u0338=ik(xjik \u2265 u) is the false one, for some ik \u2208 G. But also, we know all of the (\u2217) constraints are true. Thus xkik \u2265 u. Do this for all k.\nAlso note: since xkik \u2265 u for all k \u2208 G, by (\u2217\u2217), we have xikk < t for all k. Now, without loss of generality, we can relabel so that i1 = 2, i2 = 3, . . . , i\u2113 = 1 for some\n\u2113 \u2264 g. Thus we end up with the following constraints:\nx12 \u2265 u, x23 \u2265 u, . . . , x\u2113\u22121,\u2113 \u2265 u, x\u21131 \u2265 u\nx21 < t, x32 < t, . . . , x\u2113,\u2113\u22121 < t, x1\u2113 < t.\nNow we will use the following lemma many times:\nLemma 5.6. For all distinct i, j, k, when u \u2265 2t\u22121, if xij \u2265 u and xkj < t, then xik \u2265 t.\nProof. |i \u227b j| \u2265 u and |k \u227b j| < t means that there are u agents who prefer i over j, and only < t of them prefer k over j. This means that the rest prefer j over k. Thus there exist at least u \u2212 (t \u2212 1) \u2265 t agents with who prefer both i over j and j over k. In particular, there exist \u2265 t agents who prefer i over k.\nFinally we write down a table of deductions, until we reach a contradiction.\nRow # Reason\n1 x12 x23 . . . x\u2113\u22121,\u2113 x\u21131 \u2265 u Given 2 x21 x32 . . . x\u2113,\u2113\u22121 x1\u2113 < t (\u2217\u2217) on #1 3 x32 x43 . . . x1,\u2113 x21 < t rearrange 4 x13 x24 . . . x\u2113\u22121,1 x\u21132 \u2265 t Lemma 5.6 on #1, #3 5 x31 x42 . . . x1,\u2113\u22121 x2\u2113 < t (\u2217\u2217) on #4 6 x42 x53 . . . x2\u2113 x31 < t rearrange 7 x14 x25 . . . x\u2113\u22121,2 x\u21133 \u2265 t Lemma 5.6 on #1,#6 8 x41 x52 . . . x2,\u2113\u22121 x3\u2113 < t (\u2217\u2217) on # 7 ... ... ... ... ... ... ... ...\n3\u2113\u2212 4 x\u21131 x12 . . . x\u2113\u22122,\u2113\u22121 x\u2113\u22121,\u2113 < t as above\nHowever, rows 1 and 3\u2113 \u2212 4 conflict. Thus, the constraints xkik \u2265 u are not simultaneously satisfiable, which in turn implies that the original (\u2217) and (\u2217\u2217) are not simultaneously satisfiable."
        },
        {
            "heading": "6 Strategic Considerations",
            "text": "So far this paper has focused on the question of guaranteed existence of solutions to the menu selection problem: for which g, t, u does there exist a (t, u)-stable solution to every menu selection problem on g public goods? In this section, we focus on parameters g, t, u such that this existence question is settled in the affirmative,15 and instead consider the question of strategyproofness. Specifically, we ask: for which g does there exist a strategyproof stable menu selection mechanism? We start by defining what we mean by stable menu selection mechanism and by strategyproofness of such a mechanism.\nDefinition 6.1. Fix g \u2265 2 and let P be a set of menu selection problems on g public goods. A set of stability parameters S \u2286 N2 guarantees existence for P if for all (t, u) \u2208 S, every menu selection problem P \u2208 P has a (t, u)-stable solution.\nFor example, when g = 2, the set S = {(t, u) : u \u2265 t} guarantees existence for all menu selection problems, and when g \u2208 {3, 4, 5, 6}, the set S = {(t, u) : u \u2265 2t \u2212 1} guarantees existence for all menu selection problems.\nDefinition 6.2 (Stable Menu Selection Mechanism). Fix g \u2265 2 and let P be a set of menu selection problems on g public goods. Let S \u2286 N2 be a set of stability parameters that guarantees existence for P . A mechanismM : P \u00d7 S \u2192 2G is said to be stable if for every P \u2208 P and (t, u) \u2208 S, the menuM ( P, (t, u) ) is (t, u)-stable.\nDefinition 6.3 (Strategyproof Menu Selection Mechanism). Fix g \u2265 2 and let P be a set of menu selection problems on g public goods. Let S \u2286 N2 be a set of stability parameters that guarantees existence for P . A mechanismM : P \u00d7 S \u2192 2G is said to be strategyproof if for all agents i \u2208 N , for all menu selection problems ( N,G, (\u227bi)i\u2208N ) = P \u2208 P and(\nN,G, (\u227b\u2032i)i\u2208N ) = P \u2032 \u2208 P with \u227bj=\u227b\u2032j when j \u0338= i, we have\naM(P,(t,u))(i) \u227di aM(P \u2032,(t,u))(i).\nThat is, no agent can strictly improve their outcome by misreporting.\nDefinition 6.4 (Anonymous Menu Selection Mechanism). Fix g \u2265 2 and let P be a set of menu selection problems on g public goods. Let S \u2286 N2 be a set of stability parameters that guarantees existence for P . A mechanismM : P \u00d7 S \u2192 2G is said to be anonymous if for every menu selection problem ( N,G, (\u227bi)i\u2208N ) \u2208 P and every permutation \u03c3 : N \u2192 N we\n15When g = 2, we have guaranteed existence if and only if u \u2265 t. When g \u2208 {3, 4, 5, 6}, we have guaranteed existence if and only if u \u2265 2t\u2212 1.\nhave\nM (( N,G, (\u227bi)i\u2208N ) , (t, u) ) = M (( N,G, (\u227b\u03c3(i))i\u2208N ) , (t, u) ) .\nThat is, each agent is treated equally by the mechanism, in the sense that the output of the mechanism does not depend on the identity of the agent who submitted each preference list.\nIn this section, we ask for which numbers of goods g it is the case that strategyproof anonymous stable mechanisms exist. In the case g = 2, we exhibit a simple anonymous mechanism on complete preferences and prove it is stable and strategyproof (Section 6.1). In the case g \u2208 {3, 4, 5, 6}, we prove fundamental barriers for strategyproofness that contrast with the case of g = 2."
        },
        {
            "heading": "6.1 Strategyproof Mechanism for g = 2",
            "text": "Below, we exhibit a simple, natural strategyproof and anonymous mechanism that produces stable solutions to the menu selection problem for the case of complete preferences and g = 2.\nProposition 6.5 (Strategyproofness for g = 2 on Complete Preferences). Fix g = 2. Let S = { (t, u) \u2208 N2 \u2223\u2223 u \u2265 t}. Let P be the set of all menu selection problems on complete preferences with two public goods. Define a mechanismM : P \u00d7S \u2192 2G such that for every (t, u) \u2208 S and P \u2208 P:\n\u2022 If P has less than t agents, thenM ( P, (t, u) ) := \u2205. (\u201coffer \u2205 if no other option\u201d)\n\u2022 Otherwise, if {1, 2} is (t, u)-stable for P , thenM ( P, (t, u) ) := {1, 2}. (\u201coffer {1, 2} if\npossible\u201d)\n\u2022 Otherwise,M ( P, (t, u) ) := {1} if |1 \u227b 2| \u2265 |2 \u227b 1| andM ( P, (t, u) ) := {2} otherwise.\n(\u201cmajority vote\u201d)\nThenM is a strategyproof anonymous stable mechanism.\nProof. If P has less than t agents, then no manipulation can affect this condition, so \u2205 will be offered no matter what. Thus we can assume n \u2265 t.\nSet x1 := |1 \u227b 2| and x2 := |2 \u227b 1|. Observe the output ofM(\u00b7, (t, u)) only depends on x1 and x2 (the condition \u201c{1, 2} is (t, u)-stable\u201d is equivalent to \u201cx1 \u2265 t and x2 \u2265 t\u201d). We can thus define a function M : Z2\u22650 \u2192 2G given by M(x1, x2) := M(P, (t, u)), where P is any menu selection problem such that x1 := |1 \u227b 2| and x2 := |2 \u227b 1|. We call such an x the summary statistics of a given set of preferences.\nNext we observe that M satisfies monotonicity in the following sense: for all x \u2208 Z2\u22650 and j \u2208 {1, 2}, we have M(x+ ej) \\M(x) \u2286 {j}, where e1 = (1,\u22121) and e2 = (\u22121, 1).\nNow suppose there exists a profitable manipulation by an agent with preferences j \u227b k. If truthful reporting corresponds to summary statistics x, then this agent\u2019s manipulation would result in summary statistics x + ek. Because n \u2265 t, such a manipulation must cause this agent\u2019s top choice j to be offered, when it was previously not offered. But by monotonicity, if j /\u2208M(x), then j /\u2208M(x+ ek), so such a manipulation does not exist."
        },
        {
            "heading": "6.2 Impossibility of Stategyproofness for 3 \u2264 g \u2264 6",
            "text": "Next, we show that for g \u2208 {3, 4, 5, 6}, any anonymous mechanism that outputs stable solutions to the menu selection problem cannot also be strategyproof.\nTheorem 6.6. Fix g \u2208 {3, 4, 5, 6}. Let S = { (t, u) \u2208 N2 \u2223\u2223 u \u2265 2t\u2212 1}. Let P be the set of all menu selection problems on complete preferences with g public goods. Every anonymous stable mechanismM : P \u00d7 S \u2192 2G is not strategyproof.\nProof. LetM be an anonymous stable mechanism. Let t \u2208 N, let u = 2t\u22121, and let Pu \u2286 P be the set of all menu selection problems in P with u agents.\nFirst, we claim that M ( P, (t, u) ) is a singleton set for all P \u2208 Pu. Because P has u\nagents and the agents\u2019 preferences are complete, \u2205 is not (t, u)-stable, so \u2223\u2223M(P, (t, u))\u2223\u2223 \u2265 1. Additionally, if some O \u2286 G with |O| \u2265 2 were t-feasible, then there would be at least 2t agents. But there are only u = 2t\u22121 agents. Thus\n\u2223\u2223M(P, (t, u))\u2223\u2223 \u2264 1. BecauseM ( \u00b7, (t, u) ) always outputs a singleton set over Pu, it induces a voting rule on g alternatives and u voters. Anonymity ofM implies that this voting rule is nondictatorial. Moreover, because M is stable, this voting rule is unanimous. To see this, consider any problem P \u2208 Pu in which some public good j \u2208 G is top ranked by all agents. Then O = {j} is the unique (t, u)-stable solution, because |k \u227b j| = 0 for every public good k \u0338= j. SoM ( P, (t, u) ) = {j}.\nBy the Gibbard-Satterthwaite Theorem (Gibbard, 1973; Satterthwaite, 1975), a unanimous nondictatorial voting rule is manipulable. Therefore, the voting rule induced byM is manipulable, and hence so isM. Therefore,M is not strategyproof."
        },
        {
            "heading": "7 Discussion",
            "text": "In this paper we formulated and initiated the study of a matching problem of a new flavor, provided nontrivial upper and lower bounds on the existence of a solution, and investigated the possibility of a strategyproof solution while unearthing a connection to voting theory. The problem, as formulated, is rather stylized. Yet, some other matching problems that started out similarly stylized eventually found real-world applications.\nA main limitation of our results is that they only give practical unrestricted guarantees for small numbers of public goods. For example, an online university looking to select which subset of six electives to offer to students in a specific small department can make use of the fact that a (11, 21)-stable menu exists. But, if that same university instead aims to select which subset of 600 electives to offer to the entire student body, then absent further assumptions, we only give a considerably less useful guarantee of the existence of a (11, 5981)-stable menu. Under added assumptions, however, our results imply useful guarantees even in large-scale settings. For example, suppose the university offering 600 electives has 100 departments, each of which aims to select a subset of six electives to offer, taking in account the preferences of students only in that department (and students most prefer to take electives within their department). Then, due to the \u201cblock structure\u201d of the students\u2019 preferences, we guarantee the existence of a (11, 21)-stable menu despite the large scale of this scenario.\nFor the case of two public goods, our strategyproof mechanism is natural and practical: offer both if feasible; otherwise offer the most popular option. For between three and six public goods, we show that so long as u \u2265 2t\u22121, a stable menu of public goods exists, but it is generally impossible to find it in a strategyproof manner.\nWe write \u201cgenerally impossible\u201d because there might still be opportunity for strategyproof matching in special cases. Our proof of Theorem 6.6 (corresponding to Theorem 1.7 from the introduction) utilizes a special case with n = u = 2t\u22121 to derive the impossibility.16 In many real-life settings, it might suffice to consider u > 2t\u22121 (or more generally, a smaller set S of supported stability parameters) or n > u (or more generally, a smaller set P of supported menu selection problems), and future research might wish to more finely map out the landscape of possible S and P for which strategyproof matching might be possible, including for higher values of g.\nA potential barrier for usability from which our analysis does not suffer is computational tractability. Indeed, all our upper bounds are computationally tractable in the sense that a stable solution can be feasibly found. Our main open question from the introduction asks for tighter bounds for guaranteed existence of a stable solution, and it is plausible\n16In a nutshell, u = 2t\u22121 is used to guarantee singleton menus, and hence a single winner of the voting rule, which is needed in order to apply the Gibbard\u2013Satterthwaite Theorem. One might imagine relaxing this constrainst by appealing to variants of the Gibbard\u2013Satterthwaite Theorem that allow for nonsingleton sets of winners, such as the Duggan\u2014Schwartz Theorem (Duggan and Schwartz, 2000). Under suitable assumptions this would lead to the conclusion that the voting rule (and hence the menu selection mechanism) is manipulable, however, the notion of manipulability that is guaranteed by the Duggan\u2013Schwartz Theorem differs from ours, and crucially, counts as manipulations some things that we do not consider as such in the menu selection setting. For example, if one\u2019s true preferences are 2 \u227b 1, and {1, 2} is offered, in their setting misreporting so that only {2} is offered is considered a profitable manipulation, while in our setting we do not consider it as such.\nthat tighter upper bounds obtained in follow-up work might be harder (or impossible) to translate into tractable algorithms. An open question that we already have in a similar vain is on the precise asymptotic running time for our tighter upper bound from Theorem 1.5. The algorithm that follows from our proof of that theorem is quadratic in the number of public goods, while the algorithm that follows from the proof of the looser upper bound from Proposition 1.2 is linear. In Appendix E we prove an upper bound slightly weaker than that from Theorem 1.5 but nonetheless stronger than that from Proposition 1.2, which still yields a linear-time algorithm. Is there a linear-time algorithm for finding a stable menu for all g, t, u such that u\u22121 t\u22121 \u2265 g\u22122?\nA final direction for generalization is moving from complete preferences to incomplete preferences. Many of our proofs work also for incomplete preferences, but for some it remains to be seen whether they can be extended."
        },
        {
            "heading": "A Supporting Lemmas",
            "text": "Below we write \u2294 to denote disjoint union. Definition A.1. Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem on g public goods (with possibly incomplete preferences). Its complete embedding is defined to be the following menu\nselection problem ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) :\n\u2022 Let G\u2032 := G \u2294 {g + 1}.\n\u2022 Let N \u2032 := N \u2294 {n+ 1, . . . , n+ u}.\n\u2022 Pick i \u2208 N \u2032. We specify agent i\u2019s preferences as follows:\n\u2013 Case 1: i \u2208 N . Suppose agent i has preference j1 \u227bi \u00b7 \u00b7 \u00b7 \u227bi jg\u2032 in ( N,G, (\u227bi)i\u2208N ) ,\nwhere g\u2032 \u2264 g. Then we define agent i\u2019s preferences in ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) as follows: j1 \u227b\u2032i \u00b7 \u00b7 \u00b7 \u227b\u2032i jg\u2032 \u227b\u2032i g+1 \u227b\u2032i (arbitrary ranking of remaining public goods).\n\u2013 Case 2: i /\u2208 N . In this case we define agent i\u2019s preferences in ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) as\nfollows: g+1 \u227b\u2032i (arbitrary ranking of remaining public goods).\nLemma A.2 (Reduction from incomplete preferences on g public goods to complete preferences on g+1 public goods). Fix u \u2265 t. Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem\nand let ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) be its complete embedding. Then we have the following:\n(1) If O \u2286 G\u2032 is (t, u)-stable for ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) , then g+1 \u2208 O.\n(2) For each O \u2286 G, we have that O is (t, u)-stable for ( N,G, (\u227bi)i\u2208N ) if and only if\nO \u222a {g+1} is (t, u)-stable for ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) .\n(3) There exists a (t, u)-stable solution for ( N,G, (\u227bi)i\u2208N ) if and only if there exists a (t, u)-\nstable solution for its complete embedding ( N \u2032, G\u2032, (\u227b\u2032i)i\u2208N ) .\nProof. By construction, there are at least u agents whose favorite public good is g+1. This implies (1). Moreover, (3) is directly implied by (2). Finally, (2) is implied by the following:\n|k \u227b O \\ {k}| = |k \u227b\u2032 (O \u2294 {g+1}) \\ {k}| for all k \u2208 G, O \u2286 G.\nLemma A.3 (Removing rarely ranked public goods). Fix u \u2265 t and let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem. Let G\u2032 \u2286 G be the set of all public goods which are ranked by at least t agents. Now define ( N,G\u2032, (\u227b\u0303i)i\u2208N ) to be another menu selection problem, in which\neach agent i has the same preferences as in ( N,G, (\u227bi)i\u2208N ) , but with any public goods in\nG \\ G\u2032 removed from their ranking. Then O \u2286 G is (t, u)-stable for ( N,G, (\u227bi)i\u2208N ) if and\nonly if O \u2286 G\u2032 and O \u2286 G\u2032 is (t, u)-stable for ( N,G\u2032, (\u227b\u0303i)i\u2208N ) .\nProof. The main idea is to observe the following fact:\n|k \u227b O \\ {k}| = |k \u227b\u0303 O \\ {k}| for all k \u2208 G\u2032, O \u2286 G\u2032. (1)\nSuppose O \u2286 G is (t, u)-stable for ( N,G, (\u227bi)i\u2208N ) . Then O \u2286 G\u2032, because any k \u2208 G \\G\u2032 is\nranked by agents in ( N,G, (\u227bi)i\u2208N ) less than t times, so certainly |k \u227b O \\ {k}| < t. Then\nEq. (1) implies that O \u2286 G\u2032 is (t, u)-stable for ( N,G\u2032, (\u227b\u0303i)i\u2208N ) .\nNow suppose O \u2286 G\u2032 is (t, u)-stable for ( N,G\u2032, (\u227b\u0303i)i\u2208N ) . By Eq. (1), O is t-feasible for(\nN,G, (\u227bi)i\u2208N ) , and for u-uncontestability, it remains to check that |k \u227b O| < u for all\nk \u2208 G \\G\u2032. This holds because each k \u2208 G \\G\u2032 is ranked < t times, so |k \u227b O| < t \u2264 u.\nLemma A.4 (Offering sufficiently popular public goods). Fix u \u2265 t and let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem. Let G\u2032 \u2286 G be the set of all public goods k for which there exist (strictly) fewer than t agents with favorite public good k. Now define ( N,G\u2032, (\u227b\u0303i)i\u2208N\n) to be another menu selection problem, in which each agent i has the same preferences as\nin ( N,G, (\u227bi)i\u2208N ) , but with any public goods in or ranked below G \\ G\u2032 removed from their\nranking. Then O \u2294 (G \\G\u2032) \u2286 G is (t, u)-stable for ( N,G, (\u227bi)i\u2208N ) if and only if O \u2286 G\u2032 is\n(t, u)-stable for ( N,G\u2032, (\u227b\u0303i)i\u2208N ) .\nProof. The main idea is to observe the following fact:\n|k \u227b (O \u2294 (G \\G\u2032)) \\ {k}| = |k \u227b\u0303 O \\ {k}| for all k \u2208 G\u2032, O \u2286 G\u2032. (2)\nThe \u21d2 direction follows directly from Eq. (2). Now suppose O \u2286 G\u2032 is (t, u)-stable for( N,G\u2032, (\u227b\u0303i)i\u2208N ) . We wish to show O \u2294 (G \\ G\u2032) is (t, u)-stable for ( N,G, (\u227bi)i\u2208N ) . By\nEq. (2), O \u2294 (G \\G\u2032) is u-uncontestable for ( N,G, (\u227bi)i\u2208N ) , and for t-feasibility, it remains to check |j \u227b (O\u2294 (G \\G\u2032)) \\ {j}| \u2265 t for all j \u2208 G \\G\u2032. This holds because |j| \u2265 t for every j \u2208 G \\G\u2032, by assumption.\nB Inadequacy of a Greedy Algorithm for Finding a\nStable Menu\nIn Theorem 4.1, we prove that a (t, u)-stable menu of public goods exists for all menu selection problems with u \u2265 2t\u22121 in the case g = 4 by showing that if the greedy algorithm (Algorithm 1) cycles, then we can study the cycle transcript and find a (t, u)-stable O \u2286 G directly.\nUnfortunately, this approach does not immediately generalize to larger g. In this setting, the greedy algorithm (Algorithm 1) may cycle, and when it does, it is not possible to determine a (t, u)-stable menu from the cycle transcript alone.\nExample B.1 (Cycle transcript alone does not determine menu). Consider the following two instances of menu selection problems, for g = 5, t = 4, and u = 7:\nAgent Cohort A Agent Cohort B\nt = 4, u = 7, n = 15 t = 4, u = 7, n = 15\nAgent type Quantity\n5 \u227b 4 \u227b 3 \u227b 2 \u227b 1 2 4 \u227b 3 \u227b 2 \u227b 1 \u227b 5 2 3 \u227b 2 \u227b 1 \u227b 5 \u227b 4 2 2 \u227b 1 \u227b 5 \u227b 4 \u227b 3 2 1 \u227b 5 \u227b 4 \u227b 3 \u227b 2 2 5 \u227b 4 \u227b 2 \u227b 3 \u227b 1 1 1 \u227b 5 \u227b 3 \u227b 4 \u227b 2 1 2 \u227b 1 \u227b 4 \u227b 5 \u227b 3 1 3 \u227b 2 \u227b 5 \u227b 1 \u227b 4 1 4 \u227b 3 \u227b 1 \u227b 2 \u227b 5 1\nAgent type Quantity\n5 \u227b 4 \u227b 3 \u227b 2 \u227b 1 1 4 \u227b 3 \u227b 2 \u227b 1 \u227b 5 1 3 \u227b 2 \u227b 1 \u227b 5 \u227b 4 1 2 \u227b 1 \u227b 5 \u227b 4 \u227b 3 1 1 \u227b 5 \u227b 4 \u227b 3 \u227b 2 1 5 \u227b 3 \u227b 1 \u227b 4 \u227b 2 2 1 \u227b 4 \u227b 2 \u227b 5 \u227b 3 2 2 \u227b 5 \u227b 3 \u227b 1 \u227b 4 2 3 \u227b 1 \u227b 4 \u227b 2 \u227b 5 2 4 \u227b 2 \u227b 5 \u227b 3 \u227b 1 2\nRunning Algorithm 1 on both Agent Cohort A and Agent Cohort B results in the same cycle:\n{1, 2} \u2192 {1, 2, 3} \u2192 {2, 3} \u2192 {2, 3, 4} \u2192 {3, 4} \u2192 {3, 4, 5} \u2192\n{4, 5} \u2192 {1, 4, 5} \u2192 {1, 5} \u2192 {1, 2, 5} \u2192 {1, 2}.\nHowever, the set of t-feasible and u-uncontestable O \u2286 G for Agent Cohort A is\nOA := {{1, 3}, {4, 1}, {2, 4}, {5, 2}, {3, 5}},\nwhereas the set of t-feasible and u-uncontestable O \u2286 G for Agent Cohort B is\nOB := {{1, 2, 4}, {3, 4, 1}, {5, 1, 3}, {2, 3, 5}, {4, 5, 2}}.\nSince OA \u2229 OB = \u2205, the cycle transcript alone cannot determine a t-feasible and u-uncontestable O \u2286 G: more intricate information about the precise quantities and types of agents is needed.\nMoreover, the following summary statistics also do not suffice to determine a t-feasible and u-uncontestable O \u2286 G, as they are identical for Agent Cohort A and Agent Cohort B:\n\u2022 Number of agents n (we have n = 15 for both)\n\u2022 Number of agents who rank public good k in place p (this quantity is 3 for all k and p, due to the cyclic symmetry of both agent bodies)"
        },
        {
            "heading": "C Reformulation of the Covering Condition for",
            "text": "Complete Preferences\nIn Section 4.2, we prove that every menu selection problem on g \u2264 6 public goods with u \u2265 2t\u22121 has a (t, u)-stable menu via a reduction to a polyhedra covering problem. Specifically (Proposition 4.12), we show that for fixed g, t, u, the existence of (t, u)-stable solutions for\nall menu selection problems over preferences P is equivalent to showing Z|P|\u22650 \u2286 \u22c3 O\u2286G P g,t,u O , where P g,t,uO are polyhedra depending only on O, g, t, u,P . In this section we consider the special case of menu selection problems for which all agents have complete preferences over the public goods G. In this case, we show that the polyhedra P g,t,uO have a simple structure. It may be possible to utilize this structure to\nefficiently determine whether the covering condition Z|P|\u22650 \u2286 \u22c3 O\u2286G P g,t,u O is satisfied for larger values of g.\nFix g, t, u, and G = {1, . . . , g}. Let P be the set of all g! linear orders of G. Fix the following \u201clexicographic-cyclic\u201d ordering of P : when g = 2, the ordering is [1 \u227b 2, 2 \u227b 1], when g = 3, the ordering is [1 \u227b 2 \u227b 3, 1 \u227b 3 \u227b 2, 2 \u227b 3 \u227b 1, 2 \u227b 1 \u227b 3, 3 \u227b 1 \u227b 2, 3 \u227b 2 \u227b 1], and so on. A general definition is below.\nDefinition C.1 (\u201cLexicographic-cyclic\u201d ordering). Let g \u2208 N and G = {1, . . . , g}. Let P denote the set of all g! linear orders of G. Let \u2295g denote addition modulo g (where we take the result to be in {1, 2, . . . , g}). Then the lexicographic-cyclic ordering of P , which we denote (\u227b(i)G )i\u2208{1,...,g!}, is defined recursively as follows.\n\u2022 If g = 2, then \u227b(1)G := 1 \u227b 2, and \u227b (2) G := 2 \u227b 1.\n\u2022 Now suppose g \u2265 3. Pick i \u2208 {1, . . . , g!}. Write i = (g\u22121)!(i1 \u2212 1) + i2 for i1, i2 \u2208 {1, . . . , c}. Then set \u227b(i)G := i1 \u227b [\u227b i2 \u2212j\u2295gO\\j \u2295gj]. 17\nRecall (see Section 4.2) that each polyhedron P g,t,uO is given by P g,t,u O = {x \u2208 Z |P| \u22650 : DAg,t,uO x \u2265 b}, where D is a simple g \u00d7 g diagonal matrix (D(ii) = 1 if i \u2208 O and \u22121 otherwise) and b is a simple g \u00d7 1 vector (b(i) = t if i \u2208 O and \u2212(u\u22121) otherwise). Thus, most of the complexity in P g,t,uO comes from A g,t,u O . The following result demonstrates how to specify the matrix Ag,t,uO as a recurrence relation involving simple matrix operations.\nLemma C.2. First we fix some notation18:\n\u2022 Let ei \u2208 Rg be a row vector with ith entry 1 and all other entries 0.\n\u2022 Let \u03c3 be the permutation (12 \u00b7 \u00b7 \u00b7 g) on G. Let P\u03c3 be the g\u00d7 g permutation matrix of \u03c3.\n\u2022 For all i \u2208 G, let fi : [g\u22121] \u2192 G \\ {i} be the unique bijection such that fi(k) \u2261 k + i mod g. (So, for example, for g = 4 and i = 2, we have f2(1) = 3, f2(2) = 4, f2(3) = 1.)\nThen, for all g \u2265 2, and for all O \u2286 G,\nAg,t,uO = Ig \u2297 ( 1 \u00b7 \u00b7 \u00b7 1 ) \ufe38 \ufe37\ufe37 \ufe38\ng!\n+ \u2211\ni\u2208G\\O\nei \u2297 [ P\u03c3i\u22121 ( 0\nIg\u22121\n) Ag\u22121,t,u\nf\u22121i (O)\n]\nProof. Consider the ij-entry of Ag,t,uO , denote it aij. Write j := (g\u22121)!(j1 \u2212 1) + j2, for j2 \u2208 {1, . . . , (g\u22121)!} and j1 \u2208 {1, . . . , g}.\nCase 1: j1 \u2208 O. Then the preference relation \u227b corresponding to j ranks j first. This means aij = 1 if i = j1 and aij = 0 otherwise. The left term on the right-hand side has\n17This is well-defined because \u2212j \u2295g O \\ j = {1, . . . , g\u22121}. 18Note: in this lemma only, we use i to denote an index, rather than an agent.\nij-entry equal to 1 if i = j1 and 0 otherwise. The right term on the right-hand side has ij-entry equal to 0, because are summing over terms ej1\u2297 [something] for j1 \u2208 G\\O, so only columns with j1 \u2208 G \\O are affected.\nCase 2: j1 /\u2208 O and i = j1. Then the preference relation \u227b corresponding to j ranks i first, but i /\u2208 O. Thus aij = 1, because i is preferred over O to under \u227b. The left term on the right-hand side has ij-entry equal to 1, because i = j1. The right term on the right-hand\nside has ij-entry equal to 0, because P\u03c3i\u22121 ( 0 Ig\u22121 )T has an ith row consisting of all zeros.\nCase 3: j1 /\u2208 O and i \u0338= j1. Let Bj1 \u2208 Z(g\u22121)\u00d7(g\u22121)! be the result of removing the ith row and all columns of the form (g\u22121)!(j\u20321 \u2212 1) + j2 from A g,t,u O , for j \u2032 1 \u0338= j1, j\u20321 \u2208 {1, . . . , g}, and j2 \u2208 {1, . . . , (g\u22121)!}. Notice on the right-hand side, the left term does not contribute to any of the indices in Bj1 . Similarly, on the right-hand side, the only summand in the right term\nwhich contributes to any of the indices in Bj1 is ej1 \u2297 [ P\u03c3j1\u22121 ( 0 Ig\u22121 )T Ag\u22121,t,u\nf\u22121j1 (O)\n] .\nSo it suffices to show Bj1 is equal to P\u03c3j1\u22121 ( 0 Ig\u22121 )T Ag\u22121,t,u\nf\u22121j1 (O)\nwith the ith row removed\n(which, recall from Case 2, is just a zero row). This is a matter of relabeling. In Bj1 , the columns refer to all preferences with top choice j1, and the rows refer to all public goods except j1. So we are left with a copy of A g\u22121,t,u on the menu G\\{j1}, instead of {1, . . . , g\u22121}, and so when we reorder the rows (with Ig\u22121) and relabel the public goods (f \u22121 j1 (O)), we obtain a matrix equality.\nD Validity of Improved Lower Bound for Complete\nPreferences\nIn Theorem 1.4, we show that for all g \u2265 7 and u \u2264 23\u230a t\u22121 11 \u230b, there exists a menu selection problem for which no (t, u)-stable solution exists. We do so by constructing a set of 70x agents, for which there exists no (11x+1, 23x)-stable menu of public goods, where x := \u230a t\u22121 11 \u230b (see Table 1).\nIn this construction, each agent only ranks their top three or four choices. One might ask whether this result holds for the case of complete preferences. (In particular, notice that t-feasibility is more difficult to violate in the case of complete preferences than for incomplete preferences.) In fact, all possible ways of \u201cfilling in\u201d the preferences in Table 1 by adding missing public goods to the bottom of the preference list yield a menu selection problem with complete preferences for which there exists no (11x+ 1, 23x)-stable solution.\nLet \u227b refer to the original truncated preferences, and \u227b\u2032 refer to the (arbitrarily) completed preferences. Set u\u2032 := 23x and t\u2032 := 11x + 1. By Theorem 1.4, ( N,G, (\u227bi)i\u2208N ) does\nnot have a (t\u2032, u\u2032)-stable solution. We aim to show that ( N,G, (\u227b\u2032i)i\u2208N ) does not have a (t\u2032, u\u2032)-stable solution.\nSimilarly to Section 5.1, by monotonicity (Fact 2.5), it suffices to show the following. (1) Every O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 3 is not u\u2032-uncontestable for ( N,G, (\u227b\u2032i)i\u2208N ) .\n(2) Every O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 4, except O of the form {k, k+1, k+2, k+3}19, is not t\u2032-feasible for ( N,G, (\u227b\u2032i)i\u2208N ) .\n(3) Every O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 4 of the form {k, k+1, k+2, k+3} is not u\u2032-uncontestable for ( N,G, (\u227b\u2032i)i\u2208N ) .\n(4) Every O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 5 is not t\u2032-feasible.\nFirst we show (1). Notice for all O \u2286 {1, 2, 3, 4, 5, 6, 7} with |O| = 3 and all k /\u2208 O we have |k \u227b O| \u2264 |k \u227b\u2032 O|. Since all such O are not u\u2032-uncontestable for ( N,G, (\u227bi)i\u2208N ) , they\nare also not u\u2032-uncontestable for ( N,G, (\u227b\u2032i)i\u2208N ) .\nNext we show (2). Consider any O of the form specified in (2). Then every agent has an element of O ranked in their original preferences (before filling in). Thus for all k \u2208 O, |k \u227b O \\ {k}| = |k \u227b\u2032 O \\ {k}|. Since all such O are not t\u2032-feasible for ( N,G, (\u227bi)i\u2208N ) , they\nare also not t\u2032-feasible for ( N,G, (\u227b\u2032i)i\u2208N ) .\nNext we show (3). Consider any O of the form specified in (3). We claim |k\u22121 \u227b\u2032 O| \u2265 u\u2032. Notice every agent has an element of O\u222a{k\u2212 1} ranked in their original preferences (before filling in). Thus |k \u2212 1 \u227b\u2032 O| = |k \u2212 1 \u227b O| = |3 \u227b {4, 5, 6, 7}| = 5x + 5x + 5x + 3x + 3x + 3x+ x+ x = 26x \u2265 u\u2032.\nFinally we show (4). Then as in (2), for any O with |O| = 5, every agent has an element of O ranked in their original preferences (before filling in). Thus for all k \u2208 O, |k \u227b O \\ {k}| = |k \u227b\u2032 O \\ {k}|. Since all such O are not t\u2032-feasible for ( N,G, (\u227bi)i\u2208N ) (by\nFact 2.5 and Lemma 5.2), they are also not t\u2032-feasible for ( N,G, (\u227b\u2032i)i\u2208N ) ."
        },
        {
            "heading": "E Upper Bound with Linear-Time Algorithm via",
            "text": "Structural Results\nIn this section, we explore the possibility of obtaining upper bounds via structural results. Specifically, we show that when the ratio between u and t is sufficiently large, either there exists a (t, u)-stable menu of size \u2264 1, or the agents\u2019 preferences must have a highly specific structure. From this specific structure, we can compute a (t, u)-stable solution using a simple\n19With wraparound modulo 7 when applicable.\nalgorithm. The ratio between u and t needed to secure such a structural result exceeds that of Theorem 1.5, and as a result, this technique does not yield an improved upper bound. However, the tools employed here may shed additional light on the menu selection problem.\nAs a warmup, consider the case u \u2265 (g\u22121)(t\u22121). (This is slightly stronger than the trivial upper bound presented in Proposition 1.2.) Assume as usual (by applying Lemma A.4 and Lemma A.3) that |k| < t and {k} is t-feasible for all k \u2208 G. Suppose no (t, u)-stable menu of size \u2264 1 exists. Then for every public good k \u2208 G, there exists a public good j \u2208 G such that |j \u227b k| \u2265 u \u2265 (g\u22121)(t\u22121). The agents with favorite public good k cannot satisfy j \u227b k, so every agent whose favorite public good is not k must satisfy j \u227b k. Repeating this argument for all k \u2208 G, and relabeling the public goods, we get that every agent with favorite public good k must satisfy all of 2 \u227b 1, 3 \u227b 2, . . . , 1 \u227b g except k + 1 \u227b k. This imposes a rigid structure on the agents\u2019 preferences: it implies that the set of agents has preferences exactly as follows (see Table 2).\nThe following lemma shows that we can still guarantee much structure in the agents\u2019\npreferences if the ratio between u and t is relaxed to u \u2265 (g\u22121\u2212 \u03b5)(t\u22121).\nDefinition E.1. Let ( N,G, (\u227bi)i\u2208N ) be a menu selection problem and G\u2032 \u2286 G with G\u2032 = {j1, . . . , jm} for some 2 \u2264 m \u2264 g. An agent i \u2208 N is said to be regular (with respect to G\u2032) if they have favorite public good jk \u2208 G\u2032 and satisfy all of j2 \u227bi j1, j3 \u227bi j2, . . . , j1 \u227bi jm except jk+1 \u227bi jk. Otherwise, an agent is called irregular (with respect to G\u2032).\nLemma E.2 (Structural lemma). Let g \u2265 5, t \u2265 2, and u \u2265 (g\u22121\u2212 \u03b5)(t\u22121) for any \u03b5 \u2265 0. Then at least one of the following holds:\n(1) There exists some O \u2286 G with |O| \u2264 1 such that O is (t, u)-stable.\n(2) There exists a subset of public goods G\u2032 \u2286 G, with |G\u2032| = m for some 2 \u2264 m \u2264 g, such that \u2264 m\u03b5(t\u22121) agents are irregular with respect to G\u2032.\nProof. See Appendix E.1.\nLemma E.2 implies that in either case, we can find a (t, u)-stable solution using a simple algorithm. In the case of (1), we can find a (t, u)-stable O by brute force (only g+1 menus to check). Otherwise, if the agents\u2019 preferences have the structure of (2), then we can find a (t, u)-stable menu using Algorithm 2.\nAlgorithm 2 Computing a (t, u)-stable solution from structured preferences\nGiven: agents\u2019 preferences with the structure of (2) in Lemma E.2. Without loss of generality, relabel public goods so that G\u2032 = {1, . . . ,m}. xk \u2190 number of regular agents with favorite public good k. Initialize O \u2190 \u2205. Set p\u2190 1. (This is the currently \u2018pending\u2019 public good.) for k = 2, 3, . . . ,m do\nif xp + \u00b7 \u00b7 \u00b7+ xk \u2265 t then Set O \u2190 O \u222a {p}. Set p\u2190 k + 1.\nend if end for return O.\nLemma E.3. Let g \u2265 5, t \u2265 2, and u \u2265 (g\u22121 \u2212 \u03b5)(t\u22121) with \u03b5 < 1 6 . Then Algorithm 2 outputs a (t, u)-stable menu O with |O| \u2265 2.\nProof. See Appendix E.1.\nLemma E.2 and Lemma E.3 immediately imply the following upper bound.\nProposition E.4. Let g \u2265 5, t \u2265 2 and u \u2265 (g\u22121 \u2212 \u03b5)(t\u22121), where \u03b5 < 1 6 . Then every menu selection problem with g public goods has a (t, u)-stable solution.\nE.1 Proofs of Lemma E.2 and Lemma E.3\nProof of Lemma E.2. By Lemma A.4, we can assume |k| < t for all k \u2208 G. Suppose there does not exist a (t, u)-stable menu O \u2286 G with |O| \u2264 1. Then for all k \u2208 G, there exists some j \u2208 G such that |j \u227b k| \u2265 u. Apply this operation successively to obtain, for some m \u2208 {2, 3, . . . , g}, distinct public goods j1, . . . , jm \u2208 G such that |ji+1 \u227b ji| \u2265 u for each i \u2208 {1, . . . ,m} (set here m+ 1 := 1). Let G\u2032 := {j1, . . . , jm}.\nNow we bound the number of irregular agents from above. For each ji \u2208 G\u2032, the total number of agents for whom ji is not their favorite public good is \u2211 \u2113\u0338=ji |\u2113|. Also, there are\n\u2265 u agents with ji+1 \u227b ji. Thus\n|ji \u227b ji+1| \u2212 |ji| \u2264 \u2211 \u2113\u0338=ji |\u2113| \u2212 u\n\u2264 (g\u22121)(t\u22121)\u2212 (g\u22121\u2212\u03b5)(t\u22121)\n= \u03b5(t\u22121).\nSumming over all i \u2208 {1, . . . ,m} implies that there are at most m\u03b5(t\u22121) irregular agents.\nProof of Lemma E.3. Let O be the menu outputted by Algorithm 2. We would like to show that O is (t, u)-stable.\nRecall that xk denotes the number of regular agents with favorite k, that is, agents who satisfy all of 2 \u227b 1, 3 \u227b 2, . . . , 1 \u227b m except k+1 \u227b k. Let B denote the number of irregular agents. By Lemma E.2, B \u2264 m\u03b5(t\u22121).\nFirst we show |O| \u2265 2. Suppose |O| \u2264 1. If O = \u2205, then x1 + \u00b7 \u00b7 \u00b7 + xm < t. If O = {k} for some k \u2208 G, then x1 + \u00b7 \u00b7 \u00b7 + xk\u22121 < t and x1 + \u00b7 \u00b7 \u00b7 + xk \u2265 t. Additionally, because no other public good was added to O after k, we have xk+1 + \u00b7 \u00b7 \u00b7 + xm < t. By Lemma A.4, we can assume xk < t. Thus the number of regular agents is at most 3(t\u22121). This implies that the total number of agents is n \u2264 3(t\u22121)+B \u2264 (m\u03b5+3)(t\u22121). Additionally, n \u2265 (g\u22121 \u2212 \u03b5)(t\u22121). But 3 +m\u03b5 < g\u22121 \u2212 \u03b5 because \u03b5 < g\u22124\ng+1 whenever \u03b5 < 1 6 and g \u2265 5.\nThus we have a contradiction, so |O| \u2265 2. Now we show that O is (t, u)-stable.\nShowing t-feasibility: Pick some k \u2208 O. Let k\u2032 be the least element of O strictly greater than k, or m+1 if no such element exists. Then by the algorithm construction, xk + xk+1 + \u00b7 \u00b7 \u00b7 + xk\u2032\u22121 \u2265 t. Because a regular agent with favorite \u2113 has type \u2113 \u227b \u2113 \u2212 1 \u227b \u00b7 \u00b7 \u00b7 \u227b 1 \u227b m \u227b \u00b7 \u00b7 \u00b7 \u227b \u2113+ 1 (possibly with public goods in G \\G\u2032 inserted in this ranking), the regular agents with favorite k, k + 1, . . . , k\u2032 \u2212 1 prefer k over any other public good in O. Without even using the irregular agents, we have shown that public good k has at least t agents.\nShowing u-uncontestability: Pick some k /\u2208 O. If k \u2208 G \\ G\u2032, then since |O| \u2265 2, the maximum lobby size is |k \u227b O| \u2264 \u2211 \u2113\u2208G\\O |\u2113| \u2264 (g\u22122)(t\u22121) < u. It remains to consider the case k \u2208 G\u2032 \\ O. Again let k\u2032 be the least element of O strictly greater than k, or g+1 if no such element exists. Then the number of regular agents lobbying for k over O is xk + \u00b7 \u00b7 \u00b7 + xk\u2032\u22121. Let k\u2032\u2032 be the greatest element of O strictly less than k. (Such k\u2032\u2032 exists because 1 \u2208 O, since O \u0338= \u2205.)\nCase 1: k\u2032 \u2208 O. Because k\u2032 is the smallest value for which xk\u2032\u2032 + \u00b7 \u00b7 \u00b7+ xk\u2032\u22121 \u2265 t, we have\nxk\u2032\u2032 + \u00b7 \u00b7 \u00b7+ xk\u2032\u22122 < t. Also, xk\u2032\u22121 < t. Thus\nxk + \u00b7 \u00b7 \u00b7+ xk\u2032\u22121 \u2264 (xk\u2032\u2032 + \u00b7 \u00b7 \u00b7+ xk\u2032\u22122) + xk\u2032\u22121 \u2264 2(t\u22121).\nCase 2: k\u2032 = m+ 1. Then k is larger than any element of O. Let p be the element that was pending when k\u2032\u2032 was added. Since p was pending but never added, xp + \u00b7 \u00b7 \u00b7 + xm < t. Since k was added, xk + \u00b7 \u00b7 \u00b7+ xp\u22121 \u2265 t but xk + \u00b7 \u00b7 \u00b7+ xp\u22122 < t. Also, xp\u22121 < t. Thus\nxk + \u00b7 \u00b7 \u00b7+ xk\u2032\u22121 \u2264 (xk + \u00b7 \u00b7 \u00b7+ xp\u22122) + xp\u22121 + (xp + \u00b7 \u00b7 \u00b7+ xm) \u2264 3(t\u22121).\nThus, in either case, the number of regular agents lobbying for k over O is xk+\u00b7 \u00b7 \u00b7+xk\u2032\u22121 \u2264 3(t\u22121). Thus, the number of agents lobbying for k over O is\n|k \u227b O| \u2264 3(t\u22121) +B\n\u2264 3(t\u22121) +m\u03b5(t\u22121)\n= (3 +m\u03b5)(t\u22121)\n< (g\u22121\u2212 \u03b5)(t\u22121)\n\u2264 u,\nwhere here we observe 3 +m\u03b5 < g\u22121 \u2212 \u03b5 because \u03b5 < g\u22124 g+1 = 1 \u2212 5 c+1 whenever \u03b5 < 1 6 and g \u2265 5."
        }
    ],
    "title": "Stable Menus of Public Goods: A Matching Problem\u2217",
    "year": 2024
}