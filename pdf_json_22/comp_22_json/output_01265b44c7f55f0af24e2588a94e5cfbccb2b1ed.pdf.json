{
    "abstractText": "We obtain new parameterized algorithms for the classical problem of determining whether a directed acyclic graph admits an upward planar drawing. Our results include a new fixed-parameter algorithm parameterized by the number of sources, an XP-algorithm parameterized by treewidth, and a fixedparameter algorithm parameterized by treedepth. All three algorithms are obtained using a novel framework for the problem that combines SPQR tree-decompositions with parameterized techniques. Our approach unifies and pushes beyond previous tractability results for the problem on series-parallel digraphs, single-source digraphs and outerplanar digraphs. 2012 ACM Subject Classification Theory of computation \u2192 Parameterized complexity and exact algorithms; Human-centered computing \u2192 Graph drawings",
    "authors": [
        {
            "affiliations": [],
            "name": "Steven Chaplick"
        },
        {
            "affiliations": [],
            "name": "Emilio Di Giacomo"
        },
        {
            "affiliations": [],
            "name": "Fabrizio Frati"
        },
        {
            "affiliations": [],
            "name": "Robert Ganian"
        },
        {
            "affiliations": [],
            "name": "Chrysanthi N. Raftopoulou"
        },
        {
            "affiliations": [],
            "name": "Kirill Simonov"
        }
    ],
    "id": "SP:397f357cf85f68adbdfca6a7a7f55932056474ed",
    "references": [
        {
            "authors": [
                "R\u00e9my Belmonte",
                "Eun Jung Kim",
                "Michael Lampis",
                "Valia Mitsou",
                "Yota Otachi"
            ],
            "title": "Grundy distinguishes treewidth from pathwidth",
            "venue": "In 28th Annual European Symposium on Algorithms, ESA 2020,",
            "year": 2020
        },
        {
            "authors": [
                "Paola Bertolazzi",
                "Giuseppe Di Battista",
                "Carlo Mannino",
                "Roberto Tamassia"
            ],
            "title": "Optimal upward planarity testing of single-source digraphs",
            "venue": "SIAM J. Comput.,",
            "year": 1998
        },
        {
            "authors": [
                "Paola Bertolazzi",
                "Giuseppe Di Battista",
                "Giuseppe Liotta",
                "Carlo Mannino"
            ],
            "title": "Upward drawings of triconnected digraphs",
            "year": 1994
        },
        {
            "authors": [
                "Bernhard Bliem",
                "Michael Morak",
                "Marius Moldovan",
                "Stefan Woltran"
            ],
            "title": "The impact of treewidth on grounding and solving of answer set programs",
            "venue": "J. Artif. Intell. Res.,",
            "year": 2020
        },
        {
            "authors": [
                "Hans L. Bodlaender",
                "P\u00e5l Gr\u00f8n\u00e5s Drange",
                "Markus S. Dregi",
                "Fedor V. Fomin",
                "Daniel Lokshtanov",
                "Michal Pilipczuk"
            ],
            "title": "A cn 5-approximation algorithm for treewidth",
            "venue": "SIAM J. Comput.,",
            "year": 2016
        },
        {
            "authors": [
                "Glencora Borradaile",
                "Philip N. Klein",
                "Shay Mozes",
                "Yahav Nussbaum",
                "Christian WulffNilsen"
            ],
            "title": "Multiple-source multiple-sink maximum flow in directed planar graphs in near-linear time",
            "venue": "SIAM J. Comput.,",
            "year": 2017
        },
        {
            "authors": [
                "Guido Br\u00fcckner",
                "Markus Himmel",
                "Ignaz Rutter"
            ],
            "title": "An SPQR-tree-like embedding representation for upward planarity",
            "venue": "27th International Symposium on Graph Drawing and Network Visualization, GD 2019,",
            "year": 2019
        },
        {
            "authors": [
                "Guido Br\u00fcckner",
                "Ignaz Rutter"
            ],
            "title": "Partial and constrained level planarity",
            "venue": "editor, 28th Annual ACM-SIAM Symposium on Discrete Algorithms,",
            "year": 2017
        },
        {
            "authors": [
                "Sergio Cabello",
                "Christian Knauer"
            ],
            "title": "Algorithms for graphs of bounded treewidth via orthogonal range searching",
            "venue": "Comput. Geom.,",
            "year": 2009
        },
        {
            "authors": [
                "Hubert Y. Chan"
            ],
            "title": "A parameterized algorithm for upward planarity testing",
            "venue": "12th Annual European Symposium on Algorithms, ESA 2004,",
            "year": 2004
        },
        {
            "authors": [
                "Bruno Courcelle"
            ],
            "title": "The monadic second-order logic of graphs. I. Recognizable sets of finite graphs",
            "venue": "Inf. Comput.,",
            "year": 1990
        },
        {
            "authors": [
                "Giuseppe Di Battista",
                "Peter Eades",
                "Roberto Tamassia",
                "Ioannis G. Tollis"
            ],
            "title": "Graph Drawing: Algorithms for the Visualization of Graphs",
            "year": 1999
        },
        {
            "authors": [
                "Giuseppe Di Battista",
                "Roberto Tamassia"
            ],
            "title": "On-line planarity testing",
            "venue": "SIAM J. Comput.,",
            "year": 1996
        },
        {
            "authors": [
                "Walter Didimo",
                "Francesco Giordano",
                "Giuseppe Liotta"
            ],
            "title": "Upward spirality and upward planarity testing",
            "venue": "SIAM J. Discret. Math.,",
            "year": 2009
        },
        {
            "authors": [
                "Reinhard Diestel"
            ],
            "title": "Graph Theory, 4th Edition, volume 173 of Graduate texts in mathematics",
            "year": 2012
        },
        {
            "authors": [
                "Frederic Dorn"
            ],
            "title": "Dynamic programming and planarity: Improved tree-decomposition based algorithms",
            "venue": "Discret. Appl. Math.,",
            "year": 2010
        },
        {
            "authors": [
                "Rodney G. Downey",
                "Michael R. Fellows"
            ],
            "title": "Fundamentals of Parameterized Complexity",
            "venue": "Texts in Computer Science. Springer,",
            "year": 2013
        },
        {
            "authors": [
                "Eduard Eiben",
                "Robert Ganian",
                "Thekla Hamm",
                "Fabian Klute",
                "Martin N\u00f6llenburg"
            ],
            "title": "Extending partial 1-planar drawings",
            "venue": "47th International Colloquium on Automata, Languages, and Programming, ICALP 2020,",
            "year": 2020
        },
        {
            "authors": [
                "Robert Ganian",
                "Thekla Hamm",
                "Fabian Klute",
                "Irene Parada",
                "Birgit Vogtenhuber"
            ],
            "title": "Crossingoptimal extension of simple drawings",
            "venue": "48th International Colloquium on Automata, Languages, and Programming, ICALP 2021,",
            "year": 2021
        },
        {
            "authors": [
                "Robert Ganian",
                "Petr Hlinen\u00fd",
                "Joachim Kneis",
                "Daniel Meister",
                "Jan Obdrz\u00e1lek",
                "Peter Rossmanith",
                "Somnath Sikdar"
            ],
            "title": "Are there any good digraph width measures",
            "venue": "J. Comb. Theory, Ser. B,",
            "year": 2016
        },
        {
            "authors": [
                "Robert Ganian",
                "Fabrizio Montecchiani",
                "Martin N\u00f6llenburg",
                "Meirav Zehavi"
            ],
            "title": "Parameterized Complexity in Graph Drawing (Dagstuhl Seminar 21293)",
            "venue": "Dagstuhl Reports,",
            "year": 2021
        },
        {
            "authors": [
                "Robert Ganian",
                "Sebastian Ordyniak"
            ],
            "title": "The complexity landscape of decompositional parameters for ILP",
            "venue": "Artif. Intell.,",
            "year": 2018
        },
        {
            "authors": [
                "Robert Ganian",
                "M.S. Ramanujan",
                "Stefan Szeider"
            ],
            "title": "Combining treewidth and backdoors for CSP",
            "venue": "34th Symposium on Theoretical Aspects of Computer Science,",
            "year": 2017
        },
        {
            "authors": [
                "Ashim Garg",
                "Roberto Tamassia"
            ],
            "title": "On the computational complexity of upward and rectilinear planarity testing",
            "venue": "SIAM J. Comput.,",
            "year": 2001
        },
        {
            "authors": [
                "Carsten Gutwenger",
                "Petra Mutzel"
            ],
            "title": "A linear time implementation of SPQR-trees",
            "venue": "In Joe Marks, editor, 8th International Symposium on Graph Drawing, GD \u201900,",
            "year": 2000
        },
        {
            "authors": [
                "Patrick Healy",
                "Karol Lynch"
            ],
            "title": "Two fixed-parameter tractable algorithms for testing upward planarity",
            "venue": "Int. J. Found. Comput. Sci.,",
            "year": 2006
        },
        {
            "authors": [
                "John E. Hopcroft",
                "Robert Endre Tarjan"
            ],
            "title": "Dividing a graph into triconnected components",
            "venue": "SIAM J. Comput.,",
            "year": 1973
        },
        {
            "authors": [
                "Krist\u00f3f Husz\u00e1r",
                "Jonathan Spreer"
            ],
            "title": "3-manifold triangulations with small treewidth",
            "venue": "35th International Symposium on Computational Geometry, SoCG 2019,",
            "year": 2019
        },
        {
            "authors": [
                "Michael D. Hutton",
                "Anna Lubiw"
            ],
            "title": "Upward planar drawing of single source acyclic digraphs",
            "venue": "editor, 2nd Annual ACM/SIGACT-SIAM Symposium on Discrete Algorithms,",
            "year": 1991
        },
        {
            "authors": [
                "Michael D. Hutton",
                "Anna Lubiw"
            ],
            "title": "Upward planar drawing of single-source acyclic digraphs",
            "venue": "SIAM J. Comput.,",
            "year": 1996
        },
        {
            "authors": [
                "T. Kloks"
            ],
            "title": "Treewidth: Computations and Approximations",
            "year": 1994
        },
        {
            "authors": [
                "Jaroslav Nesetril",
                "Patrice Ossona de Mendez"
            ],
            "title": "Sparsity - Graphs, Structures, and Algorithms, volume 28 of Algorithms and combinatorics",
            "year": 2012
        },
        {
            "authors": [
                "Achilleas Papakostas"
            ],
            "title": "Upward planarity testing of outerplanar dags",
            "venue": "DIMACS International Workshop on Graph Drawing, GD \u201994,",
            "year": 1994
        },
        {
            "authors": [
                "Marko Samer",
                "Stefan Szeider"
            ],
            "title": "Constraint satisfaction with bounded treewidth revisited",
            "venue": "J. Comput. Syst. Sci.,",
            "year": 2010
        },
        {
            "authors": [
                "William T. Trotter",
                "John I. Moore Jr."
            ],
            "title": "The dimension of planar posets",
            "venue": "J. Comb. Theory, Ser. B,",
            "year": 1977
        }
    ],
    "sections": [
        {
            "text": "2012 ACM Subject Classification Theory of computation \u2192 Parameterized complexity and exact algorithms; Human-centered computing \u2192 Graph drawings\nKeywords and phrases Upward planarity, parameterized algorithms, SPQR trees, treewidth, treedepth\nDigital Object Identifier 10.4230/LIPIcs...\nRelated Version An extended abstract of this manuscript was accepted for publication in the proceedings of the 38th International Symposium on Computational Geometry (SoCG 2022).\nFunding Emilio Di Giacomo: MIUR, grant 20174LF3T8, Dip. Ing. - UNIPG, grants RICBA19FM and RICBA20EDG Fabrizio Frati: MIUR, grant 20174LF3T8 Robert Ganian: Austrian Science Fund (FWF) Project Y1329 Chrysanthi N. Raftopoulou: NTUA research program \u03a0EBE 2020 Kirill Simonov: Austrian Science Fund (FWF) Project P31336\nAcknowledgements The authors thank Fabrizio Montecchiani and Giuseppe Liotta for fruitful discussions on the topic of upward planarity. This research was initiated at Dagstuhl Seminar 21293: Parameterized Complexity in Graph Drawing [22].\n1 Introduction\nA digraph is called upward planar if it admits an upward planar drawing, that is, a planar drawing where all edges are oriented upward. The problem of upward planarity testing (Upward Planarity) and constructing an associated upward planar drawing arises, among others, in the context of visualization of hierarchical network structures; application domains include project management, visual languages and software engineering [2]. Upward planarity\n\u00a9 S. Chaplick, E. Di Giacomo, F. Frati, R. Ganian, C. N. Raftopoulou, K. Simonov; licensed under Creative Commons License CC-BY 4.0\nLeibniz International Proceedings in Informatics Schloss Dagstuhl \u2013 Leibniz-Zentrum f\u00fcr Informatik, Dagstuhl Publishing, Germany\nar X\niv :2\n20 3.\n05 36\n4v 1\n[ cs\n.C G\n] 1\n0 M\nar 2\nis the most prominent notion of planarity that is inherently directed, and also has classical connections to the theory of ordered sets: the orders arising from the transitive closure of upward planar single-source digraphs have bounded dimension [38].\nSince the introduction of the notion, Upward Planarity has become the focus of extensive theoretical research. The problem has been shown to be NP-complete more than 25 years ago [25, 26], but the first polynomial-time algorithms for restricted variants of Upward Planarity have been published even earlier [31, 32]. Among others, the problem is known to be polynomial-time tractable when G is provided with a planar embedding [3] (which also implies polynomial-time tractability for triconnected DAGs, since these admit a single planar embedding), or when restricted to the class of outerplanar DAGs [35], DAGs whose underlying graph is series-parallel [15], and most prominently single-source DAGs [2, 7, 32].\nIn spite of the number of results on Upward Planarity that analyze the classical complexity of the problem on specific subclasses of instances, the problem was up to now mostly unexplored from the more fine-grained perspective of parameterized complexity analysis1 [12, 18]. In particular, while it was known that Upward Planarity is fixedparameter tractable when parameterized by the cyclomatic number of the input DAG (or, equivalently, the feedback edge number of the underlying undirected graph) [10], by the number of triconnected components and cut vertices [28], or the number of triconnected components plus the maximum diameter of a split component [15], the complexity of the problem under classical structural parameterizations has remained completely open. Contribution. We develop a novel algorithmic framework for solving Upward Planarity which combines parameterized dynamic programming with the SPQR-tree decompositions of planar graphs [14, 27, 29]. In essence, our framework uses a characterization of the \u201cshapes\u201d of faces in an upward planar drawing that is inspired by earlier work on the notion of spirality [3, 15] and reduces Upward Planarity to the task of handling the \u201crigid\u201d nodes in these decompositions. Informally, the task that needs to be handled there can be stated as follows: what are all the possible ways to combine the possible shapes of the children of a rigid node to obtain an upward planar drawing for the node itself? The framework is formalized in the form of a general \u201cInterface Lemma\u201d (Lemma 24) which can be complemented with numerous parameterizations as well as other algorithmic approaches.\nIn the remainder of this article, we use this framework to push the boundaries of tractability for Upward Planarity. Our first result in this direction is a fixed-parameter algorithm for Upward Planarity parameterized by the number of sources in the input graph2. This result generalizes the polynomial-time tractability of the single-source case [2, 7] and answers an open question from a recent Dagstuhl seminar [22]. On a high level, we use the Interface Lemma to reduce the problem to a case where almost all children of a rigid node have a simple shape, and we show how this can be handled via a flow network approach.\nHaving established the tractability of instances with few sources, we turn towards understanding which structural properties of the underlying undirected graph can be used to solve Upward Planarity efficiently. In this context, there is a well-known hierarchy of fundamental structural parameters of graphs (see, e.g., [1, Figure 1]) and the study of their algorithmic applications is a prominent research direction that has been pursued not only for a number of problems in computational geometry [9, 30], but also in many other fields such as in artificial intelligence [4, 23] and constraint satisfaction [37, 24]. Yet,"
        },
        {
            "heading": "1 A basic introduction to parameterized complexity is provided in the preliminaries.",
            "text": ""
        },
        {
            "heading": "2 It is worth noting that this immediately also implies tractability parameterized by the number of sinks:",
            "text": "inverting all arcs results in an equivalent instance.\napart from the fixed-parameter tractability of Upward Planarity parameterized by the feedback edge number [10](which is one of the by far most restrictive parameterizations in the aforementioned hierarchy), nothing was known about whether the more widespread \u201cdecompositional\u201d parameters can be used to solve the problem. The parameters that will be of interest here are treewidth [36], the most prominent structural graph parameter, and treedepth [34], the arguably best known parameter that lies below treewidth in the parameter hierarchy.\nTo obtain new boundaries of tractability for Upward Planarity with respect to these two parameters, we first show that the problem posed by the Interface Lemma can be restated as a purely combinatorial problem on a suitable combinatorization of the embedding of the graph represented by the rigid node, and\u2014crucially\u2014that a bound on the input graph\u2019s treewidth also implies a bound for the treewidth of this combinatorization. Once that is done, we design a non-trivial dynamic program that exploits this treewidth bound to handle the rigid nodes, which together with the Interface Lemma allows us to solve Upward Planarity. This yields an XP-algorithm for Upward Planarity parameterized by the treewidth of the underlying undirected graph\u2014a result which unifies and generalizes the polynomial-time tractability of Upward Planarity on outerplanar as well as series-parallel graphs [15, 35]. Furthermore, a more detailed analysis of the dynamic program reveals that the same algorithm runs in fixed-parameter time when parameterized by treedepth.\nPaper Organization. After introducing the necessary preliminaries in Section 2, we introduce a characterization of components of the SPQR trees used by our framework (Section 3), provide the bulk of our framework for digraphs whose underlying undirected graph is 2- connected (Section 4), and then complete the description of the framework by handling general digraphs (Section 5). Sections 6 and 7 are then dedicated to applying the framework to Upward Planarity parameterized by the number of sources and treewidth along with treedepth, respectively.\n2 Preliminaries\nWe refer to the classical books for basic graph and graph drawing terminology [16, 13]. We use NG(v) to denote the set of vertices adjacent to a vertex v in a graph G."
        },
        {
            "heading": "2.1 Upward planar drawings and embeddings",
            "text": "A drawing of a graph maps each vertex to a point in the plane and each edge to a Jordan arc between the end-points of the edge. A drawing is planar if no two edges intersect, except at common end-points. A planar drawing partitions the plane into regions, called faces. The bounded faces are called internal, while the unbounded face is the outer face. Two planar drawings of a graph are equivalent if: (1) they have the same rotation system, that is, for each vertex v, the clockwise order of the edges incident to v is the same in both drawings; and (2) their outer faces are delimited by the same walk, that is, the order of the edges encountered when clockwise traversing the boundary of the outer face is the same in both drawings. A planar embedding of a graph is an equivalence class of planar drawings of that graph.\nThus, a planar embedding of a graph consists of a rotation system and a choice for the walk delimiting the outer face. We often talk about a face of a planar embedding, meaning a face of any planar drawing that respects the planar embedding. The flip of a planar embedding is the planar embedding obtained by reversing the clockwise order of the edges\nincident to each vertex and by reversing the order of the edges encountered when clockwise traversing the boundary of the outer face.\nThroughout the paper, we use the term digraph as short for \u201cdirected graph\u201d. A digraph is acyclic if it contains no directed cycle. An acyclic digraph is usually called DAG, for short. A vertex in a digraph is a source if it is only incident to outgoing edges and it is a sink if it is only incident to incoming edges. A vertex in a digraph is a switch if it is a source or a sink, and it is a non-switch otherwise. The underlying graph of a digraph is the undirected graph obtained from the digraph by ignoring the edge directions. A plane digraph is a digraph together with a prescribed planar embedding for its underlying graph.\nA drawing of a digraph is upward if every edge is represented by a Jordan arc monotonically increasing from the source to the sink of the edge, and it is upward planar if it is both upward and planar. A digraph is upward planar if it admits an upward planar drawing; we use Upward Planarity to denote the problem of determining whether a digraph is upward planar; w.l.o.g., we assume that the input digraph is connected.\nConsider an upward planar drawing \u0393 of a digraph G. An angle \u03b1 of a face f of \u0393 is a triple (e1, v, e2), where e1 and e2 are two edges of G that are incident to the vertex v, that are incident to the face f , and that are consecutive in the order of the edges encountered when clockwise traversing the boundary of f . We say that \u03b1 is flat if one between e1 and e2 is incoming v and the other one is outgoing v, otherwise \u03b1 is a switch angle. Then \u0393 defines an angle assignment, which assigns the value \u22121, 0, and 1 to each small, flat, and large angle, respectively, in every face of \u0393. The angle assignment, together with the planar embedding of the underlying graph of G in \u0393, constitutes an upward planar embedding of G.\nA switch angle at a vertex v is hence delimited by two outgoing or by two incoming edges for v. Each switch angle is further classified as large or small as follows. Consider a switch angle \u03b1 = (e1, v, e2) at a vertex v in a face f delimited by two outgoing edges (resp. by two incoming edges) and consider a disk D centered at v, sufficiently small so that its boundary has a single intersection with every edge incident to v. The edges e1 and e2 divide D into two regions, one of which contains part of f and contains no portion of any edge incident to v in its interior; call D\u2032 this region. Then we say that \u03b1 is large if D\u2032 contains a suitably short vertical segment that has v as its highest (resp. lowest) end-point, it is small otherwise.\nAn upward planar drawing hence defines an angle assignment, which is an assignment of the value \u22121, 0, and 1 to each small, flat, and large angle, respectively, in every face of \u0393. This angle assignment, together with the planar embedding of the underlying graph of G in \u0393, constitutes an upward planar embedding of G. An upward plane digraph is a digraph together with a prescribed upward planar embedding.\nThe angle assignments that enhance a planar embedding into an upward planar embedding have been characterized by Didimo et al. [15], building on the work by Bertolazzi et al. [3]. Note that, once the planar embedding E of a digraph G is specified, then so are the angles of the faces of E ; in particular, whether an angle is flat or switch only depends on E . Consider an angle assignment for E . If v is a vertex of G, we denote by ni(v) the number of angles at v that are labeled i, with i \u2208 {\u22121, 0, 1}. If f is a face of G, we denote by ni(f) the number of angles of f that are labeled i, with i \u2208 {\u22121, 0, 1}. The cited characterization is as follows.\nI Theorem 1 ([3, 15]). Let G be a digraph, E be a planar embedding of the underlying graph of G, and \u03bb be an assignment of each angle of each face in E to a value in {\u22121, 0, 1}. Then"
        },
        {
            "heading": "E and \u03bb define an upward planar embedding of G if and only if the following properties hold:",
            "text": "UP0 If \u03b1 is a switch angle, then \u03bb(\u03b1) \u2208 {\u22121, 1}, and if \u03b1 is a flat angle, then \u03bb(\u03b1) = 0. UP1 If v is a switch vertex of G, then n1(v) = 1, n\u22121(v) = deg(v)\u2212 1, n0(v) = 0.\nUP2 If v is a non-switch vertex of G, then n1(v) = 0, n\u22121(v) = deg(v)\u2212 2, n0(v) = 2. UP3 If f is a face of G, then n1(f) = n\u22121(f) \u2212 2 if f is an internal face and n1(f) =\nn\u22121(f) + 2 if f is the outer face.\nTheorem 1 has the following algorithmic consequence.\nI Theorem 2 ([3, 6]). Let G be an n-vertex digraph and E be a planar embedding of the underlying graph of G. It is possible to test in O(n log3 n) time whether there exists an angle assignment \u03bb such that E and \u03bb define an upward planar embedding of G. Consequently, it can be tested in O(n log3 n) time whether G admits an upward planar drawing \u0393 which respects E; in the positive case, \u0393 can be constructed within the same time bound.\nTheorem 2 was originally proved in [3] with an O(n2) running time. The main idea for its proof is the following. Construct a planar bipartite network N (S, T,A), where:\nS is a set of sources; there is a source sw for each vertex w of G; each source can supply a single unit of flow; T is a set of sinks; there is a sink tf for each face f of E ; each sink tf demands a number of units of flow equal to nf/2\u2212 1 or nf/2 + 1, depending on whether f is an internal face or the outer face of E , where nf is the number of switch angles incident to f ; and A is a set of arcs from the sources to the sinks; there is an arc from a source sw to a sink tf if the vertex w corresponding to sw is incident to the face f corresponding to tf ; each arc a has a capacity ca of a single unit of flow.\nIt was proved in [3] that there exists an angle assignment \u03bb such that E and \u03bb define an upward planar embedding of G if and only if the bipartite network N admits a flow whose value is the sum of the demands of the sinks in T (or the sum of the supplies of the sources in S). A flow is an assignment of a value \u03c6a \u2264 ca to each arc a such that the sum of the values assigned to the arcs outgoing each node sw does not exceed the supply of sw and the sum of the values assigned to the arcs incoming each node tf does not exceed the demand of tf . The value of a flow is the sum of the values assigned to its arcs.\nBorradaile et al. [6] presented an O(n log3 n) algorithm to find a maximum flow in a planar network with multiple sources and sinks. This result, plugged into the described framework by Bertolazzi et al. [3], gives us a proof of Theorem 2."
        },
        {
            "heading": "2.2 Parameterized Complexity",
            "text": "In parameterized complexity [12, 18], the complexity of a problem is studied not only with respect to the input size, but also with respect to some problem parameter(s). The core idea behind parameterized complexity is that the combinatorial explosion resulting from the NP-hardness of a problem can sometimes be confined to certain structural parameters that are small in practical settings. We now proceed to the formal definitions.\nA parameterized problem Q is a subset of \u2126\u2217 \u00d7 N, where \u2126 is a fixed alphabet. Each instance of Q is a pair (I, \u03ba), where \u03ba \u2208 N is called the parameter. A parameterized problem Q is fixed-parameter tractable (FPT) [18, 12], if there is an algorithm, called a fixed-parameter algorithm, that decides whether an input (I, \u03ba) is a member of Q in time f(\u03ba) \u00b7 |I|O(1), where f is a computable function. The class FPT denotes the class of all fixed-parameter tractable parameterized problems. A weaker notion of tractability is that of XP: a parameterized problem Q is in the class XP if there is an algorithm that decides whether an input (I, \u03ba) is a member of Q in time (|I|+ 1)f(\u03ba), where f is a computable function."
        },
        {
            "heading": "2.3 Treewidth and Treedepth",
            "text": "Here we consider the treewidth and treedepth of the underlying graphs3. A tree-decomposition T of a graph G = (V,E) is a pair (T, \u03c7), where T is a tree (whose vertices we call nodes) rooted at a node r and \u03c7 is a function that assigns each node t a set \u03c7(t) \u2286 V such that the following holds:\nFor every uv \u2208 E there is a node t such that u, v \u2208 \u03c7(t). For every vertex v \u2208 V , the set of nodes t satisfying v \u2208 \u03c7(t) forms a nonempty subtree of T .\nA tree-decomposition is nice if the following two conditions are also satisfied:\n|\u03c7(`)| = 1 for every leaf ` of T and |\u03c7(r)| = 0. There are only three kinds of non-leaf nodes in T :\nIntroduce node: a node t with exactly one child t\u2032 such that \u03c7(t) = \u03c7(t\u2032) \u222a {v} for some vertex v 6\u2208 \u03c7(t\u2032). Forget node: a node t with exactly one child t\u2032 such that \u03c7(t) = \u03c7(t\u2032) \\ {v} for some vertex v \u2208 \u03c7(t\u2032). Join node: a node t with two children t1, t2 such that \u03c7(t) = \u03c7(t1) = \u03c7(t2).\nThe width of a tree-decomposition (T, \u03c7) is the size of a largest set \u03c7(t) minus 1, and the treewidth of the graph G, denoted tw(G), is the minimum width of a tree-decomposition of G. It is known that a tree-decomposition can be transformed into a nice tree-decomposition of the same width in linear time. Efficient fixed-parameter algorithms are known for computing a nice tree-decomposition of near-optimal width [5, 33].\nI Proposition 3 ([5]). There exists an algorithm which, given an n-vertex graph G and an integer k, in time 2O(k) \u00b7 n either outputs a tree-decomposition of G of width at most 5k + 4 and O(n) nodes, or determines that tw(G) > k.\nWe let Tt denote the subtree of T rooted at a node t, and we use \u03c7(Tt) to denote the set \u22c3 t\u2032\u2208V (Tt) \u03c7(t\n\u2032). In the context of dynamic programming, the set past(t) = \u03c7(Tt) \\ \u03c7(t) is called the past while the set past(t) = V \\ \u03c7(Tt) is called the future.\nThe second structural parameter that we will be considering here is the treedepth of a graph G, denoted td(G) [34]. A useful way of thinking about graphs of bounded treedepth is that they are (sparse) graphs with no long paths.\nA rooted forest is a disjoint union of rooted trees. For a vertex x in a tree T of a rooted forest, the height (or depth) of x in the forest is the number of vertices in the path from the root of T to x. The height of a rooted forest is the maximum height of a vertex of the forest.\nI Definition 4 (Treedepth). Let the closure of a rooted forest F be the graph clos(F) = (Vc, Ec) with the vertex set Vc = \u22c3 T\u2208F V (T ) and the edge set Ec = {xy : x is an ancestor of y in some T \u2208 F}. A treedepth decomposition of a graph G is a rooted forest F such that G \u2286 clos(F). The treedepth td(G) of a graph G is the minimum height of any treedepth decomposition of G.\nWe will later use Tx to denote the vertex set of the subtree of T rooted at a vertex x of T . The following properties of treedepth will be crucial for our considerations.\nI Proposition 5 ([34]). For every path of length d in a graph G, it holds that td(G) \u2264 d \u2264 2td(G). Moreover, tw(G) \u2264 td(G).\n3 Directed alternatives to treewidth exist, but are typically not well-suited for algorithmic applications [21]."
        },
        {
            "heading": "2.4 Expansion",
            "text": "In our algorithms, we will employ a linear-time preprocessing step to simplify the input digraphs so that every vertex has at most one incoming edge or at most one outgoing edge; this operation, which was introduced by Bertolazzi et al. [2], is called expansion and is defined as follows. We begin by marking each non-switch vertex in the digraph G = (V,E) as unprocessed. We then loop over each non-switch unprocessed vertex v, for which we create two new processed vertices v1 and v2 and add the following edges to the digraph: {v1v2} \u222a {(av1 | av \u2208 E} \u222a {v2b || vb \u2208 E}, and then we delete v. In an expanded graph, that is, a graph that has gone through the expansion operation, every vertex has at most one outgoing or at most one incoming edge; in the former case we say it is a bottom vertex, while in the latter case it is a top vertex. The only outgoing (incoming) edge of a bottom (top) vertex of an expanded digraph is the special edge of that vertex. Since a non-switch vertex of degree 2 has exactly one incoming and one outgoing edge, it could be considered both a top and a bottom vertex. To avoid this ambiguity, we treat degree-2 vertices as top vertices.\nA digraph expansion preserves upward planarity [2]; furthermore, it preserves biconnectivity and the number of sources, and at most doubles the number of vertices. Moreover, below we show that applying expansion on graphs of bounded treedepth results in graphs which also have bounded treedepth. Hence, in the remainder, we will assume, without loss of generality, that each digraph for which we aim to test upward planarity has been expanded and thus each of its vertices has at most one incoming edge or at most one outgoing edge.\nI Observation 6. Let G be a digraph and G\u2032 be its expansion. The treedepth and treewidth of G\u2032 are at most twice the treedepth and treewidth of G, respectively. Moreover, G and G\u2032 have the same number of sources.\nProof. Consider a treedepth decomposition F of G, replace every vertex of this decomposition with an edge to obtain a rooted forest F \u2032. We claim that F \u2032 is a treedepth decomposition of G\u2032: For a vertex v of G corresponding to a vertex u in F , associate the respective vertices v1, v2 of G\u2032 with the endpoints of the edge in F \u2032 that replaced u. It can be easily seen that no ancestor-descendant relation is violated, and that the height of F \u2032 is at most twice the height of F .\nFor treewidth, it is possible to simply transform the original tree-decomposition of G into one of G\u2032 by replacing each vertex by the two vertices that replaced it, resulting in a new tree-decomposition of G\u2032 with at most twice the width of the original. Regarding the number of sources, it can be observed that each vertex that is not a source is replaced by two vertices which are not sources, and each source is replaced by two vertices of which precisely one is a source. J"
        },
        {
            "heading": "2.5 SPQR-tree decomposition",
            "text": "Let G be a biconnected undirected graph. A pair of vertices is a separation pair if its removal disconnects G. A split pair is either a separation pair or a pair of adjacent vertices. A split component of G with respect to a split pair {u, v} is either an edge (u, v) or a maximal subgraph Guv \u2282 G such that {u, v} is not a split pair of Guv. A split pair {s\u2032, t\u2032} of G is maximal with respect to a split pair {s, t} of G, if for every other split pair {s\u2217, t\u2217} of G, there is a split component that includes the vertices s\u2032, t\u2032, s and t.\nAn SPQR-tree T of G with respect to an edge e\u2217 is a rooted tree that describes a recursive decomposition of G induced by its split pairs [14]. In what follows, we call nodes the vertices of T , to distinguish them from the vertices of G. The nodes of T are of four types S, P, Q,\nand R. Each node \u00b5 of T is associated with a split pair {u, v} of G, where u and v are the poles of \u00b5, with a subgraph G\u00b5 of G, called the pertinent graph of \u00b5, which consists of one or more split components of G with respect to {u, v}, and with a multigraph sk(\u00b5), called the skeleton of \u00b5, which represents the arrangement of such split components in G\u00b5. The edges of sk(\u00b5) are called virtual edges. Each node \u00b5 of T whose pertinent graph is not a single edge has some children, each corresponding to a split components of G in G\u00b5. Each of these children is the root of a subtree of T .\nFormally, T is defined as follows. The root \u03c1 of T is a Q-node corresponding to the edge e\u2217 = (u, v). The child \u03c3 of \u03c1 has u and v as poles, and its pertinent graph is defined as G\u03c3 = G \\ e\u2217. Now consider a node \u00b5 of T with poles s and t and a pertinent graph G\u00b5; assume that G\u00b5 is st-biconnectible, i.e., it is either biconnected or it becomes so if the edge (s, t) is added to it. We distinguish some cases.\nBase case: G\u00b5 consists of a single edge e between s and t. Then, \u00b5 is a Q-node whose skeleton is the edge (s, t). The node \u00b5 is a leaf of T .\nSeries case: G\u00b5 is not biconnected; since G\u00b5 is st-biconnectible, each cut-vertex of G\u00b5 (i.e., each vertex whose whose removal disconnects G\u00b5) lies on any path from s to t. Then, \u00b5 is an S-node. Let v1, . . . , vk\u22121, where k \u2265 2, be the cut vertices of G\u00b5, in the order in which they are encountered in any path from s to t. The skeleton of \u00b5 is a path consisting of the virtual edges e1, . . . , ek; for i = 1, . . . , k, we have ei = (vi\u22121, vi), where v0 = s and vk = t. Further, \u00b5 has k children \u03bd1, . . . , \u03bdk; for i = 1, . . . , k, the poles of \u03bdi are vi\u22121 and vi, and the pertinent graph G\u03bdi of \u03bdi is the union of all the split components with respect to {vi\u22121, vi} that do not contain both s and t. The decomposition recurs on the nodes \u03bd1, . . . , \u03bdk.\nParallel case: G\u00b5 is not biconnected and {s, t} is a split pair of G\u00b5. Then \u00b5 is a P-node. If the split pair {s, t} defines k maximal split components of G\u00b5, then the skeleton of \u00b5 is a set of k parallel edges e1, . . . , ek between s and t. Further, \u00b5 has k children \u03bd1, . . . , \u03bdk; for i = 1, . . . , k, the poles of \u03bdi are s and t, and the pertinent graph G\u03bdi of \u03bdi is a maximal split component with respect to {s, t}. The decomposition recurs on the nodes \u03bd1, . . . , \u03bdk.\nRigid case: None of the other cases is applicable. Let {s1, t1}, . . . , {sk, tk} be the maximal split pairs of G with respect to {s, t} (k \u2265 1) such that {si, ti} belongs to G\u00b5, for i = 1, . . . , k. Then \u00b5 is an R-node whose skeleton is the graph whose vertex set is {s1, t1} \u222a \u00b7 \u00b7 \u00b7 \u222a {sk, tk} and whose edge set is {(s1, t1), . . . , (sk, tk)}. Then \u00b5 has k children \u03bd1, . . . , \u03bdk; for i = 1, . . . , k, the poles of \u03bdi are si and ti, and the pertinent graph G\u03bdi of \u03bdi is the union of all the split components with respect to {si, ti} that do not contain both s and t. The decomposition recurs on the nodes \u03bd1, . . . , \u03bdk.\nNote that each virtual edge ei in the skeleton of a node \u00b5 of T corresponds to the pertinent graph G\u03bdi of a child \u03bdi of \u00b5. We say that G\u03bdi is a component of G\u00b5. Figs. 1a and 1b show a planar graph and its SPQR-tree. To simplify our algorithms, we assume that every S-node of T has two children. If this is not the case, we can modify T to achieve this property (see Fig. 1c). An SPQR-tree T of an n-vertex planar graph has O(n) Q-, S-, P-, and R-nodes. Also, the total number of vertices of the skeletons for the nodes in T is O(n) [14].\nWhen talking about an SPQR-tree T of a biconnected directed graph G, we mean an SPQR-tree of its underlying graph. Let \u00b5 be a node of T with poles u and v. A uv-external upward planar embedding of G\u00b5 is an upward planar embedding of G\u00b5 such that u and v are incident to the outer face. In our algorithms, when testing the upward planarity of a digraph G, the fact that its SPQR-tree T is rooted at an edge e\u2217 of G corresponds to the requirement that e\u2217 is incident to the outer face of the upward planar embedding E of G we are looking for. For each node \u00b5 of T , the restriction of E to the vertices and edges of the pertinent graph G\u00b5 of \u00b5 is a uv-external upward planar embedding of G\u00b5.\n3 The Shapes of Components\nLet G be a biconnected DAG, let T be an SPQR-tree of G rooted at an edge e\u2217, let \u00b5 be a node of T with poles u and v, and let E\u00b5 be a uv-external upward planar embedding of G\u00b5. Let \u03bb be the angle assignment defined by E\u00b5. The poles u and v identify two paths on the boundary of the outer face f0 of E\u00b5: the left outer path Pl = \u3008v0 = u, v1, . . . , vk = v\u3009 is the path that leaves f0 on the left when walking from u to v; the right outer path Pr = \u3008w0 = u,w1, . . . , wh = v\u3009 of E\u00b5 is the path that leaves f0 on the right when walking from u to v; see Fig. 2. Notice that Pl and Pr may share some vertices other than u and v if G\u00b5 is not biconnected.For i = 0, 1, . . . , k, let \u03b1i denote the angle at vi inside f0 and, for i = 0, 1, . . . , h, let \u03b2i denote the angle at wi inside f0. The left-turn-number \u03c4l(E\u00b5, u, v) of E\u00b5 is defined as \u2211k\u22121 i=1 \u03bb(\u03b1i), while\nthe right-turn-number \u03c4r(E\u00b5, u, v) of E\u00b5 is \u2211h\u22121 i=1 \u03bb(\u03b2i). Note that \u03b10 = \u03b20 and \u03b1k = \u03b2h are the angles at u and v inside f0, respectively. The values \u03bb(\u03b10) and \u03bb(\u03b1k) are also denoted by \u03bb(E\u00b5, u) and \u03bb(E\u00b5, v), respectively. Finally, given a vertex w \u2208 {u, v}, let \u03c1l(E\u00b5, w) denote the orientation of the edge el of Pl incident to w, that is, \u03c1l(E\u00b5, w) = in if el is an incoming edge for w, \u03c1l(E\u00b5, w) = out otherwise. Analogously, let \u03c1r(E\u00b5, w) denote the orientation of the edge er of Pr incident to w. The shape description of E\u00b5 is the tuple \u3008\u03c4l(E\u00b5, u, v), \u03c4r(E\u00b5, u, v), \u03bb(E\u00b5, u), \u03bb(E\u00b5, v), \u03c1l(E\u00b5, u), \u03c1r(E\u00b5, u), \u03c1l(E\u00b5, v), \u03c1r(E\u00b5, v)\u3009; see Fig. 2.\nWe note that there are some dependencies between the values of a shape description. First, \u03c1l(E\u00b5, u) and \u03c1r(E\u00b5, u) have the same value if \u03bb(E\u00b5, u) \u2208 {\u22121, 1}, while they have different values if \u03bb(E\u00b5, u) = 0. Similarly, \u03c1r(E\u00b5, v) is implied by the values \u03c1l(E\u00b5, v) and \u03bb(E\u00b5, v). Furthermore, the values of \u03c4l(E\u00b5, u, v) and \u03c1l(E\u00b5, u) imply the value of \u03c1l(E\u00b5, v); indeed, if \u03c4l(E\u00b5, u, v) is even, then \u03c1l(E\u00b5, u) and \u03c1l(E\u00b5, v) are different, while if \u03c4l(E\u00b5, u, v) is odd, then \u03c1l(E\u00b5, u) and \u03c1l(E\u00b5, v) are the same. Finally, \u03bb(E\u00b5, v) is implied by \u03c4l(E\u00b5, u, v), \u03c4r(E\u00b5, u, v), and \u03bb(E\u00b5, u). This is a consequence of the following observation, which adopts the notation of Theorem 1 and follows from the definition of the involved parameters.\nI Observation 7. We have \u03c4l(E\u00b5, u, v) + \u03c4r(E\u00b5, u, v) +\u03bb(E\u00b5, u) +\u03bb(E\u00b5, v) = n1(f0)\u2212n\u22121(f0).\nObservation 7, together with Property UP3 of Theorem 1, implies the following.\nI Corollary 8. We have \u03c4l(E\u00b5, u, v) + \u03c4r(E\u00b5, u, v) + \u03bb(E\u00b5, u) + \u03bb(E\u00b5, v) = 2.\nRecall that if u is a top or bottom vertex of G, then it has at most one incoming edge or at most one outgoing edge, respectively, which is called the special edge of u. If G\u00b5 contains this edge, then G\u00b5 is a special component for u, otherwise we say that G\u00b5 is a normal component for u. Note that, if u is a source or a sink of G, then it has no special component. The following lemma bounds the right-turn number of a uv-external upward planar embedding E\u00b5 of G\u00b5 with respect to its left-turn number.\nI Lemma 9. Let G\u00b5 be a split component of an upward plane digraph G with respect to a split pair {u, v}. Let E\u00b5 be the induced uv-external upward planar embedding of G\u00b5 with shape description \u3008\u03c4l(E\u00b5, u, v), \u03c4r(E\u00b5, u, v), \u03bb(E\u00b5, u), \u03bb(E\u00b5, v), \u03c1l(E\u00b5, u), \u03c1r(E\u00b5, u), \u03c1l(E\u00b5, v), \u03c1r(E\u00b5, v)\u3009. If \u03c4l(E\u00b5, u, v) = c is the left turn-number of E\u00b5, then the right turn-number \u03c4r(E\u00b5, u, v) is \u2212c+ h where h \u2208 {0, 1, 2, 3, 4}. In particular, if G\u00b5 is a normal component for both u and v, then {\u03bb(E\u00b5, u), \u03bb(E\u00b5, v)} \u2286 {\u22121, 1} and\n1. \u03c4r(E\u00b5, u, v) = \u2212c, if \u03bb(E\u00b5, u) = \u03bb(E\u00b5, v) = 1 (see Fig. 3a); 2. \u03c4r(E\u00b5, u, v) = \u2212c+ 2, if {\u03bb(E\u00b5, u), \u03bb(E\u00b5, v)} = {\u22121, 1} (see Figs. 3b and 3c); and 3. \u03c4r(E\u00b5, u, v) = \u2212c+ 4, if \u03bb(E\u00b5, u) = \u03bb(E\u00b5, v) = \u22121 (see Fig. 3d).\nProof. If G\u00b5 is a normal component for u, then either all the edges incident to u are incoming u or they are all outgoing u, hence the angle incident to u in the outer face f0 of E\u00b5 is a switch angle and \u03bb(E\u00b5, u) \u2208 {\u22121, 1}. On the other hand, if G\u00b5 is a special component for u, then either \u03bb(E\u00b5, u) \u2208 {\u22121, 0}, if G\u00b5 contains at least one incoming and at least one outgoing edge of u, or \u03bb(E\u00b5, u) = 1, if G\u00b5 contains only the special\nv\nu\n(a)\nv\nu\n(b)\nu\nv\n(c)\nu\nv\n(d)\nFigure 3 Illustrations of the various cases of Lemma 9 for normal components.\nedge of u. Similar considerations hold true for v. The rest of the statement follows by Corollary 8. Indeed, we have that \u03c4l(E\u00b5, u, v) + \u03c4r(E\u00b5, u, v) + \u03bb(E\u00b5, u) + \u03bb(E\u00b5, v) = 2, hence \u03c4r(E\u00b5, u, v) = 2 \u2212 \u03c4l(E\u00b5, u, v) \u2212 \u03bb(E\u00b5, u) \u2212 \u03bb(E\u00b5, v), from which the statements follow for \u03c4l(E\u00b5, u, v) = c and by substituting the values of \u03bb(E\u00b5, u) and \u03bb(E\u00b5, v) of each case. J\nThe following two lemmata establish some useful properties for the shape descriptions of components that are parallel compositions of sub-components. Let G\u00b5 be the pertinent digraph of a P-node \u00b5. Let \u03bd\u20321, \u03bd\u20322 . . . , \u03bd\u2032k\u2032 be a subset of the children of \u00b5 in T and let G\u2032\u00b5 be the subgraph of G\u00b5 consisting of the union of G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 . Assume that the upward planar embedding E is such that the pertinent graphs G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 appear in this order from left to right around u. Denote by E\u03bd the upward planar embedding of G\u03bd in E . Then the outer boundary of G\u2032\u00b5 in E is formed by the left outer path of E\u03bd\u20321 and the right outer path of E\u03bd\u2032\nk\u2032 . Let f \u2032i be the face bounded by the right outer path of E\u03bd\u2032i and by the left\nouter path of E\u03bd\u2032 i+1 , for i = 1, 2, . . . , k\u2032 \u2212 1, and let f \u20320 be the outer face of G\u2032\u00b5 in E .\nI Lemma 10. Suppose f \u2032i is an internal face of G\u2032\u00b5 with respect to an upward planar embedding E where c is the right-turn-number of E\u03bd\u2032\ni , that is c = \u03c4r(E\u03bd\u2032 i , u, v), and \u03b1u(f \u2032i) and\n\u03b1v(f \u2032i) are the angles at vertices u and v inside f \u2032i . Then the left-turn-number \u03c4l(E\u03bd\u2032i+1 , u, v) of G\u03bd\u2032\ni+1 satisfies:\n1. \u03c4l(E\u03bd\u2032 i+1 , u, v) = \u2212c, if \u03bb(\u03b1u(f \u2032i)) = \u03bb(\u03b1v(f \u2032i)) = 1 2. \u03c4l(E\u03bd\u2032 i+1 , u, v) = \u2212c\u2212 2, if {\u03bb(\u03b1u(f \u2032i)), \u03bb(\u03b1v(f \u2032i))} = {\u22121, 1} 3. \u03c4l(E\u03bd\u2032 i+1 , u, v) = \u2212c\u2212 4, if \u03bb(\u03b1u(f \u2032i)) = \u03bb(\u03b1v(f \u2032i)) = \u22121.\nProof. By UP3 we have that n1(f \u2032i)+n\u22121(f \u2032i) = \u22122. Since the boundary of f \u2032i consists of the right outer path of E\u03bd\u2032\ni and the right outer path of E\u03bd\u2032 i+1 , it follows that n1(f \u2032i) + n\u22121(f \u2032i) =\n\u03c4r(E\u03bd\u2032i, u, v) + \u03c4l(E\u03bd\u2032i+1) + \u03bb(\u03b1u(f \u2032 i)) + \u03bb(\u03b1v(f \u2032i)) = \u22122. The lemma\u2019s statements follow by replacing \u03c4r(E\u03bd\u2032 i , u, v) with c and substituting the considered values of \u03bb(\u03b1u(f \u2032i)) and \u03bb(\u03b1v(f \u2032i)). J\nLet \u03bd be a child of \u00b5 and let G\u03bd be the corresponding pertinent graph with poles u and v. Suppose that G\u03bd admits a uv-external upward planar embedding E\u03bd such that the shape description of G\u03bd is s. We say that s is a thin shape description if it satisfies the following conditions, which we call thin conditions:\n\u03c4r(E\u03bd , u, v) = \u2212\u03c4l(E\u03bd , u, v); \u03bb(E\u03bd , u) = \u03bb(E\u03bd , v) = 1; \u03c1l(E\u03bd , u) = \u03c1r(E\u03bd , u); \u03c1l(E\u03bd , v) = \u03c1r(E\u03bd , v).\nLet N\u00b5 be the set of children \u03bd1, \u03bd2 . . . , \u03bdk of \u00b5. For any subset N of N\u00b5, we denote by GN the subgraph of G\u00b5 that consists of all component G\u03bd with \u03bd \u2208 N . Consider two subsets N1 and N2 of N such that N2 \u2286 N1 and assume that GN1 and GN2 are upward planar. We say that the upward planar embeddings EN1 and EN2 of GN1 and GN2 respectively, form an equivalence pair if the components of GN2 appear in the same order in GN1 around u starting from the outer face, and for every \u03bd \u2208 N2 component G\u03bd has the same shape description in both EN1 and EN2 . Let s be a thin shape description, and let Ns be a subset of N\u00b5 such that the pertinent graph G\u03bd , for \u03bd \u2208 Ns admits an upward planar embedding with shape description s. For N \u2286 N\u00b5 with N \u2229Ns 6= \u2205, we say that an upward planar embedding EN of GN respects shape description s for the subset Ns if the components G\u03bd for \u03bd \u2208 N \u2229Ns are consecutive around u when starting from the outer face of EN , and all have shape description s in EN .\nI Lemma 11. Let Ns be a subset of N\u00b5 such that the pertinent graph G\u03bd , for \u03bd \u2208 Ns admits an upward planar embedding with thin shape description s. Let also N1 and N2 be two subsets of N with N2 \u2286 N1 and N1 \\ N2 \u2286 Ns. Then, GN1 has an upward planar embedding EN1 that respects s for Ns if and only if GN2 has an upward planar embedding EN2 that respects s for Ns, and embeddings EN1 and EN2 form an equivalence pair. Furthermore, the shape descriptions of GN1 and GN2 in EN1 and EN2 , respectively, are the same.\nProof. Suppose first that GN1 has an upward planar embedding EN1 that respects s for Ns. The restriction of EN1 to GN2 is an upward planar embedding EN2 of GN2 that respects s for Ns. Moreover the components shared by GN1 and GN2 have the same shape description and appear in the same order around u, that is, EN1 and EN2 form an equivalence pair.\nSuppose now that GN2 has an upward planar embedding EN2 that respects s for Ns. Let G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 be the sequence of the components of GN2 in the left to right order defined by EN2 . Denote by E2\u03bd the upward planar embedding of component G\u03bd in EN2 , for \u03bd \u2208 N2. Let f \u2032i be the face bounded by the right outer path of E2\u03bd\u2032\ni and by the left outer\npath of E2\u03bd\u2032 i+1 , for i = 1, 2, . . . , k\u2032 \u2212 1, and let f \u20320 be the outer face of EN2 . As EN2 respects Ns, there exist consecutive components G\u03bd\u2032\n` , G\u03bd\u2032 `+1 , . . . , G\u03bd\u2032 `+j of GN2 such that \u03bd\u2032`+i \u2208 Ns\nand E2\u03bd\u2032 `+i has shape description s, for i = 0, . . . , j. We now change the upward planar embedding EN2 of GN2 to an upward planar embedding EN1 of GN1 as follows. Note that, since N2 \u2286 N1 \u222a Ns, if component G\u03bd of GN1 does not belong to GN2 then \u03bd \u2208 Ns. We replace components G\u03bd\u2032\n`+i (i = 0, . . . , j) with a sequence consisting of all the components\nG\u03bd of GN1 where \u03bd \u2208 Ns. Let Gs denote the subgraph of GN1 that contains components G\u03bd where \u03bd \u2208 N1 \u2229 Ns. To completely define EN1 we need to define the upward planar embedding of all the components in Gs, the labels of the angles at u and v inside the faces formed by consecutive elements of Gs, and the labels of the angles at u and v inside the faces f \u2032`\u22121 and f \u2032`+j (notice that the boundary of both faces is changed). For each component of Gs we choose an upward planar embedding such that the resulting shape description is s. We label \u22121 all the angles at u and v inside the faces formed by consecutive elements of Gs. For the angles at u and v inside f \u2032`\u22121 and f \u2032`+j , we preserve the labels they had in EN2 . We denote by E1\u03bd the upward planar embedding of G\u03bd in EN1 for \u03bd \u2208 N1. Note that E1\u03bd = E2\u03bd for every \u03bd \u2208 N1 \\Ns. In order to prove that the resulting labeling is a valid angle assignment we need to prove that properties UP0\u2013UP3 hold. Consider an angle \u03b1 at a vertex w. If \u03b1 is an angle that exists also in EN2 , then UP0 holds for \u03b1 in EN1 as well; if \u03b1 is an angle inside an internal face of E1\u03bd of a component G\u03bd \u2208 Gs then UP0 holds for \u03b1 in EN1 because it holds in the upward planar embedding chosen for G\u03bd . If \u03b1 is an angle inside the outer face of E1\u03bd at a vertex different from u and v, then again, UP0 holds in EN1 because it holds\nin the upward planar embedding chosen for G\u03bd . If \u03b1 is an angle at u or at v inside a face fj formed by consecutive elements G\u03bd and G\u03bd\u2032 of Gs then the two edges defining \u03b1 have the same orientation because the two upward planar embeddings E1\u03bd and E1\u03bd\u2032 have the same shape description; since \u03b1 is labeled 1, UP0 holds. Finally, if \u03b1 is an angle at u or at v inside f \u2032`\u22121 or f \u2032`+j , then the two edges defining \u03b1 have the same orientation with the two edges defining the corresponding angle in EN1 (because the leftmost component G\u03bd\u2032` of GN2 that is replaced by the sequence of components in Gs has the same shape description in EN2 as the leftmost component of Gs in EN1 , and the rightmost component G\u03bd\u2032`+j of GN2 has the same shape description in EN2 with the rightmost component of Gs in EN1). Since the label at \u03b1 is preserved, UP0 holds because it holds in EN2 . Concerning UP1 and UP2, we observe that for each vertex different from u and v UP1 or UP2 holds in EN1 because it either holds in EN2 or it holds in the upward planar embedding chosen for the components of Gs. So, the only vertices for which we have to prove UP1 or UP2 are u and v. To this aim we observe that either UP1 or UP2 holds for u and v in EN2 and that the angles at u and at v that are in EN1 but not in EN2 are all labeled \u22121; thus, they cannot create a violation of UP1 or of UP2. Concerning UP3, consider a face f of EN1 . If f is also a face of EN2 then UP3 holds for f in EN1 because it holds in EN2 . If f is an internal face of E1\u03bd of a component G\u03bd \u2208 Gs, then UP3 holds for EN1 because it holds for the upward planar embedding chosen for G\u03bd . If f is a face fj formed by consecutive elements G\u03bd and G\u03bd\u2032 of Gs, then its boundary is formed by the right outer path of E1\u03bd and by the left outer path of E1\u03bd\u2032 . Since G\u03bd and G\u03bd\u2032 have the same shape description that satisfies the thin conditions, we have \u03c4r(E1\u03bd , u, v) = \u2212\u03c4l(E1\u03bd\u2032 , u, v); moreover, the two angles at u and v inside fj are both labeled \u22121. Thus n1(f)\u2212 n\u22121(f) = \u03c4r(E1\u03bd , u, v) + \u03c4l(E1\u03bd\u2032 , u, v)\u2212 2 = \u22122 and UP3 holds. Consider now the case when f is the face f \u2032`\u22121 and assume that it is an internal face (a similar proof holds when it is the outer face). The boundary of f \u2032`\u22121 in EN2 consists of the right outer path of E2\u03bd\u2032 `\u22121 and of the left outer path of E2\u03bd\u2032 ` ; since UP3 holds for f \u2032`\u22121 in EN2 , we have n1(f) \u2212 n\u22121(f) = \u03c4r(E2\u03bd\u2032 `\u22121 , u, v) + \u03c4l(E2\u03bd\u2032 ` , u, v) + \u03b1u + \u03b1v = \u22122, where \u03b1u and \u03b1v are the angles at u and v inside f \u2032`\u22121, respectively. The boundary of f \u2032`\u22121 in EN1 consists of the right outer path of E1\u03bd\u2032 `\u22121 and of the left outer path of E1\u03bd , where G\u03bd is the first component of the set Gs. Thus, we have n1(f)\u2212 n\u22121(f) = \u03c4r(E1\u03bd\u2032 `\u22121 , u, v) + \u03c4l(E1\u03bd , u, v) + \u03b1u + \u03b1v; since E2\u03bd\u2032 ` and E1\u03bd have the same shape description we have \u03c4l(E2\u03bd\u2032 ` , u, v) = \u03c4l(E1\u03bd , u, v) and therefore UP3 holds for f \u2032`\u22121 in EN1 . If f is the face f \u2032`+j , the proof is analogous to the one for f \u2032`\u22121. This concludes the proof that properties UP0\u2013UP3 hold for EN1 . Now, since all Gs are consecutive in EN1 and have the same shape description s, it follows that EN1 respects s for Ns. Additionally EN1 and EN2 form an equivalence pair. Hence we proved that if GN2 has an upward planar embedding EN2 that respects s for Ns, then GN1 has an upward planar embedding EN1 that respects s for Ns and the two embeddings form an equivalence pair.\nIt remains to prove that the shape descriptions of GN1 in EN1 and of GN2 in EN2 are the same. In general, the shape description of a component in an upward planar embedding only depends on the outer boundary of that component. Let f10 and f20 be the outer faces of the two upward planar embeddings EN1 and EN2 described above. The boundary of f20 consists of the left outer boundary of E2\u03bd\u20321 and by the right outer boundary of E 2 \u03bd\u2032 k\u2032 . If neither \u03bd\u20321 nor \u03bd\u2032k\u2032 belong to Ns, then the boundary of f10 coincides with that of f20 , they have the same labeling and therefore EN1 and EN2 have the same shape description. If this is not the case then either \u03bd\u20321 \u2208 Ns or \u03bd\u2032k\u2032 \u2208 Ns. If \u03bd\u20321 \u2208 Ns the left boundary of f20 consists of the left outer path of E2\u03bd\u20321 and the left boundary of f 1 0 consists of the left outer path of E1\u03bd , where G\u03bd is a component of Gs. Since E2\u03bd\u20321 and E 1 \u03bd have the same shape description, they have the same\nleft-turn-number. Similarly, if \u03bd\u2032k\u2032 \u2208 Ns the right outer paths of f20 and f10 have the same right-turn-numbers. Since the angles at u and v inside f20 are the same as those inside f10 , EN1 and EN2 have the same shape description. J\n4 General Algorithm\nLet G be an n-vertex biconnected expanded DAG whose underlying undirected graph is planar and let T be an SPQR-tree decomposition of G. Let also \u03c4min and \u03c4max be two integers such that \u03c4min \u2264 \u03c4max. In this section, we present a general algorithm to compute the shape descriptions of all possible upward planar embeddings of G with respect to T , and such that the left- and right-turn numbers of the induced upward planar embeddings of all pertinent graphs of T are within the range [\u03c4min, \u03c4max]. In case G is not upward planar under these restrictions, the algorithm returns an empty set. We visit the nodes of T bottom-up and we compute for each node \u00b5 the set F\u00b5 of the shape descriptions of all possible upward planar embeddings of the pertinent graph G\u00b5 of \u00b5. We call F\u00b5 the feasible set of \u00b5. The feasible set F\u00b5 is computed starting from the feasible sets F\u03bd1 , F\u03bd2 , . . ., F\u03bdk , where \u03bd1, \u03bd2, . . ., \u03bdk are the children of \u00b5 in T . If at any point the feasible set F\u00b5 of node \u00b5 is empty, we conclude that G is not upward planar (under the above restrictions) and the process returns an empty set, otherwise we continue the traversal of T .\nStoring feasible sets\nFor each node \u00b5 of T we associate a matrix M(\u00b5) of size (\u03c4max \u2212 \u03c4min + 1) \u00d7 5 where the element M(\u00b5)[i, j] of the matrix contains all shape descriptions for G\u00b5 with left-turn-number \u03c4l = \u03c4min + i and right-turn-number \u03c4r = \u2212\u03c4l + j. Note that by Lemma 9, the right-turnnumber of G\u00b5 can only take values in [\u2212c,\u2212c + 4], where c is the left-turn-number \u03c4l. A shape description within M(\u00b5)[i, j] is stored as a pair \u3008\u03bb(E\u00b5, u), \u03c1l(E\u00b5, u)\u3009 as its first two values are implied by indices i and j and the other four values of the shape description can be derived from the indices and the stored values (recall that the values of a shape description are not all independent). The following lemma summarizes the space requirements and run-time of basic operations for feasible sets.\nI Lemma 12. Let \u03c4 = \u03c4max \u2212 \u03c4min + 1. Then:\n1. creating matrix M(\u00b5) for all nodes \u00b5 of T takes O(|T |\u03c4) time and O(|T |\u03c4) space; 2. retrieving all shape descriptions of M(\u00b5) takes O(\u03c4) time; 3. adding, deleting or finding a shape description in M(\u00b5) requires O(1) time;"
        },
        {
            "heading": "4. there are at most 18 shape descriptions with given left- or right-turn-number, and finding",
            "text": "them takes O(1) time.\nProof. The first part of the lemma is obvious. We now argue that for specific values of \u03c4l(E\u00b5, u, v) and \u03c4r(E\u00b5, u, v) there is a bounded number of possible shape descriptions with the given left- and right-turn-numbers. Indeed, for the pair \u3008\u03bb(E\u00b5, u), \u03c1l(E\u00b5, u)\u3009, \u03bb(E\u00b5, u) takes a value from {\u22121, 0, 1}, while \u03c1l(E\u00b5, u) \u2208 {in, out}. Hence the possible values for the pairs are in total six. Hence, each element M(\u00b5)[i, j] of matrix M(\u00b5) contains at most six pairs, and parts 2 and 3 of the lemma follows. For the last part of the lemma, we first argue that the number of shape descriptions with given left- or right-turn-number are at most 18. Indeed, if we specify the values \u03bb(E\u00b5, u), \u03bb(E\u00b5, v), \u03c1l(E\u00b5, u), and either the left- or the right-turn-number, then the remaining values of a shape description are uniquely determined. As there are 32 \u00b7 2 = 18 ways to specify all of \u03bb(E\u00b5, u), \u03bb(E\u00b5, v) and \u03c1l(E\u00b5, u), it follows that\nthere are at most 18 shape descriptions with specific left- or right-turn-number. Now, the shape descriptions with left-turn-number equal to \u03c4l are stored in row i = \u03c4l \u2212 \u03c4min of M(\u00b5), which has length 5. On the other hand, if the right-turn-number \u03c4r is given, by Lemma 9 the right-turn-number can only take values in the interval [\u03c4r,\u2212\u03c4r + 4], and therefore it suffices to consider the pairs of at most five elements of the matrix. In both cases the shape descriptions with given left- or right-turn-number can be found in O(1) time. J\nWe describe how to compute the feasible set F\u00b5 of a node \u00b5 of T depending on its type.\nQ-node\nIn this case, the pertinent graph G\u00b5 is a single directed edge connecting poles u and v. If the edge is directed from u to v then the feasible set consists of the tuple \u30080, 0, 1, 1, out, out, in, in\u3009, while if the edge is directed from v to u then it consists of the tuple \u30080, 0, 1, 1, in, in, out, out\u3009.\nI Lemma 13. Let \u00b5 be a Q-node of T . The feasible set F\u00b5 can be computed in O(1) time.\nS-node\nRecall that node \u00b5 has exactly two children in T , \u03bd1 and \u03bd2. Let u1, v1 be the poles of G\u03bd1 and u2, v2 be the poles of G\u03bd2 . The poles of G\u00b5 are u1 and v2, that is v1 = u2. Let \u3008\u03c4l(E\u03bd1 , u1, v1), \u03c4r(E\u03bd1 , u1, v1), \u03bb(E\u03bd1 , u1), \u03bb(E\u03bd1 , v1), \u03c1l(E\u03bd1 , u1), \u03c1r(E\u03bd1 , u1), \u03c1l(E\u03bd1 , v1), \u03c1r(E\u03bd1 , v1)\u3009 be a tuple in F\u03bd1 and let \u3008\u03c4l(E\u03bd2 , u2, v2), \u03c4r(E\u03bd2 , u2, v2), \u03bb(E\u03bd2 , u2), \u03bb(E\u03bd2 , v2), \u03c1l(E\u03bd2 , u2), \u03c1r(E\u03bd2 , u2), \u03c1l(E\u03bd2 , v2), \u03c1r(E\u03bd2 , v2)\u3009 be a tuple in F\u03bd2 .\nLet \u03b1l be the angle at the common pole that is created by the two left outer paths of E\u03bd1 and E\u03bd2 (see Fig. 4). Similarly, let \u03b1r be the angle at the common pole that is created by the two right outer paths of E\u03bd1 and E\u03bd2 . We assign the labels \u03bbl and \u03bbr to \u03b1l and \u03b1r respectively as follows: \u03bbl = 0 if \u03c1l(E\u00b5, v1) 6= \u03c1l(E\u00b5, u2) otherwise \u03bbl \u2208 {\u22121, 1}, and \u03bbr = 0 if \u03c1r(E\u00b5, v1) 6= \u03c1r(E\u00b5, u2) otherwise \u03bbr \u2208 {\u22121, 1}. Note that we exclude the case \u03bbl = \u03bbr = 1 as this would imply that two angles on the same vertex of G are large, which is not possible. Given the two values for \u03bbl and \u03bbr, we construct a candidate tuple \u3008\u03c4l(E\u00b5, u1, v2), \u03c4r(E\u00b5, u1, v2), \u03bb(E\u00b5, u1), \u03bb(E\u00b5, v2), \u03c1l(E\u00b5, u1), \u03c1r(E\u00b5, u1), \u03c1l(E\u00b5, v2), \u03c1r(E\u00b5, v2)\u3009 with\n\u03c4l(E\u00b5, u1, v2) = \u03c4l(E\u03bd1 , u1, v1) + \u03c4l(E\u03bd2 , u2, v2) + \u03bbl, \u03c4r(E\u00b5, u1, v2) = \u03c4r(E\u03bd1 , u1, v1) + \u03c4r(E\u03bd2 , u2, v2) + \u03bbr, \u03bb(E\u00b5, u1) = \u03bb(E\u03bd1 , u1), \u03bb(E\u00b5, v2) = \u03bb(E\u03bd2 , v2), \u03c1l(E\u00b5, u1) = \u03c1l(E\u03bd1 , u1), \u03c1r(E\u00b5, u1) = \u03c1r(E\u03bd1 , u1), \u03c1l(E\u00b5, v2) = \u03c1l(E\u03bd2 , v2), \u03c1r(E\u00b5, v2) = \u03c1r(E\u03bd2 , v2).\nWe accept the candidate tuple if and only if \u03c4l(E\u00b5, u1, v2) + \u03c4r(E\u00b5, u1, v2) + \u03bb(E\u00b5, u1) + \u03bb(E\u00b5, v2) = 2 holds, that is if Corollary 8 holds for the outer face of E\u00b5.\nI Lemma 14. Let \u00b5 be an S-node of T with children \u03bd1 and \u03bd2. The feasible set F\u00b5 can be computed in O(\u03c4 + |F\u03bd1 | \u00b7 |F\u03bd2 |) time.\nProof. By Lemma 12, getting the shape descriptions of each feasible set F\u03bd1 and F\u03bd2 takes O(\u03c4) time. There are |F\u03bd1 | \u00b7 |F\u03bd2 | pairs of shape descriptions for E\u03bd1 and E\u03bd2 , and for each pair, the candidate tuple is constructed in O(1) time. Finally, by Lemma 12 storing each accepted\nv\nu\n(a)\nv\nu\n(b)\nP-node\nLet \u00b5 be a P-node with poles u and v and children \u03bd1, \u03bd2 . . . , \u03bdk. Let \u03bd\u20321, \u03bd\u20322 . . . , \u03bd\u2032k\u2032 be a subset of the children of \u00b5 and let G\u2032\u00b5 be the subgraph of G\u00b5 consisting of the union of G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 . Consider an upward planar embedding E \u2032 \u00b5 of G\u2032\u00b5 and assume that the pertinent graphs G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 appear in this order from left to right around u. Denote by E\u03bd\u2032\ni the uv-external upward planar embedding of G\u03bd\u2032 i , for i = 1, 2, . . . , k\u2032. Then the outer\nboundary of E \u2032\u00b5 is formed by the left outer path of E\u03bd\u20321 and the right outer path of E\u03bd\u2032k\u2032 . Denote by f \u2032i the face bounded by the right outer path of E\u03bd\u2032i and by the left outer path of E\u03bd\u2032 i+1\n, for i = 1, 2, . . . , k\u2032\u22121, and let f \u20320 be the outer face of G\u2032\u00b5. Denote by S\u2032 the sequence of shape descriptions of the pertinent digraphs of \u03bd\u20321, \u03bd\u20322 . . . , \u03bd\u2032k\u2032 in the order G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k . The sequence S\u2032 is the shape sequence of G\u2032\u00b5 with respect to the upward planar embedding E \u2032\u00b5. To describe the sequence S\u2032 we use the following notation: a\u2217 denotes a subsequence of S\u2032 consisting of 0 or more elements equal to a; a+ denotes a subsequence of S\u2032 consisting of 1 or more elements equal to a. Not all sequences of shape descriptions of E\u03bd\u20321 , E\u03bd\u20322 , . . . , E\u03bd\u2032 k\u2032\nare shape sequences of G\u2032\u00b5. For G\u2032\u00b5 we say that a shape description s\u2032 corresponds to a shape sequence S\u2032 if there exists an upward planar embedding of G\u2032\u00b5 with shape description s\u2032 and whose shape sequence is S\u2032. Notice that, the same shape sequence might correspond to different upward planar embeddings of G\u2032\u00b5, even if the order of G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 is the same (see Fig. 5). Let S be a sequence of shape descriptions; the reduced sequence of S is the sequence of shape descriptions obtained from S by replacing each maximal subsequence a+ of S with the single element a. We define the size of S as the number of elements in its reduced sequence.\nI Lemma 15. Let S be a sequence of shape descriptions from the feasible sets of G\u03bd\u20321 , G\u03bd\u20322 ,\n. . . , G\u03bd\u2032 k\u2032 . We can decide whether S is a shape sequence of G\u2032\u00b5 and compute the corresponding shape descriptions of G\u2032\u00b5 in O(r3) time, where r is the size of S. Furthermore there are O(r2) computed shape descriptions of G\u2032\u00b5.\nProof. Assume first that S is reduced. We want to use UP0-UP3 in order to compute all possible corresponding shape descriptions of G\u2032\u00b5. Let E \u2032\u00b5 be an upward planar embedding of G\u2032\u00b5 with shape sequence S. Let G\u03bd\u2032i be a component of G \u2032 \u00b5. Denote by E\u03bd\u2032i its uvexternal upward embedding induced by E \u2032\u00b5 and let si = \u3008\u03c4l(si), \u03c4r(si), \u03bbu(si), \u03bbv(si), \u03c1l(u, si), \u03c1r(u, si), \u03c1l(v, si), \u03c1r(v, si)\u3009 be its shape description in S. For all faces f \u2032i of E \u2032\u00b5, UP3 gives \u03c4r(si)+\u03c4l(si+1)+\u03bb(\u03b1u(f \u2032i))+\u03bb(\u03b1v(f \u2032i)) = \u22122 holds if i 6= 0, and \u03c4r(sk\u2032)+\u03c4l(s1)+\u03bb(\u03b1u(f \u20320))+ \u03bb(\u03b1v(f \u20320)) = 2 for the outer face f \u20320. For the labels at the angles \u03b1u(f \u2032i) and \u03b1v(f \u2032i), we have that \u03bb(\u03b1w(f \u2032i)) = 0 (i.e. \u03b1w(f \u2032i) is a flat angle) if and only if \u03c1r(w, si) 6= \u03c1l(w, si+1), where w is a pole of \u00b5. Hence the label of \u03b1w(f \u2032i) is not determined only if it is a switch angle and its label can be either \u22121 or 1. Note that by UP2 there is exactly one angle with label 1. Then, if u is a switch vertex, the possible labelings of all angles \u03b1u(f \u2032i) are r + 1; namely there are r faces f \u2032i that can have the unique label 1, or none of them has label 1. Similarly if v is a switch vertex, the possible labelings of all angles \u03b1v(f \u2032i) are r + 1. This implies that there exist in total at most (r + 1)2 different labelings for the angles at u and v inside all faces f \u2032i of G\u2032\u00b5. For each labeling, we want to test whether UP3 holds for all faces f \u2032i of G\u2032\u00b5. This can be done in constant time for each face, and thus in O(r) time for all faces. Still we need to guarantee that UP1 and UP2 also hold.\nAssume that pole w is a switch vertex of G\u2032\u00b5. Note that if the shape description for a component G\u03bd\u2032\ni has label at pole w equal to \u22121, that is \u03bb(w, E\u03bd\u2032 i ) = \u22121, then the large angle\nof w is inside an interior face of E\u03bd\u2032 i . Then \u03bb(\u03b1w(f \u2032i)) = \u22121 must hold for all faces f \u2032i of E \u2032\u00b5, and \u03bb(w, E\u03bd\u2032j ) = 1 for all components G\u03bd\u2032j different from G\u03bd\u2032i . Otherwise, \u03bb(w, E\u03bd\u2032i) = 1 holds for all components G\u03bd\u2032 i , and the large angle of w must be inside a face f \u2032i of E \u2032\u00b5, that is \u03bb(\u03b1w(f \u2032i)) = 1 and \u03bb(\u03b1w(f \u2032j)) = \u22121 for all other faces f \u2032j . Note that all shape descriptions used for the components of G\u2032\u00b5 belong to their feasible sets. Then all angles of w in the interior of all components (except possibly for one angle in the interior of one E\u03bd\u2032\ni ) have label\n\u22121. This implies that the above restrictions are sufficient to test whether UP1 holds for w, and this can be done in O(r) time for each labeling. Now, assume that pole w is a non-switch vertex of G\u2032\u00b5. Note that if the shape description for a component G\u03bd\u2032i has label at pole w equal to \u22121, that is \u03bb(w, E\u03bd\u2032\ni ) = \u22121, then both flat angles of u are inside E\u03bd\u2032 i , while if the\nlabel equals 0 that is \u03bb(w, E\u03bd\u2032 i ) = 0, then one flat angle of u is inside E\u03bd\u2032 i . In the first case, we have that \u03bb(\u03b1w(f \u2032i)) = \u22121 must hold for all faces f \u2032i , and \u03bb(w, E\u03bd\u2032j ) = 1 for all components G\u03bd\u2032\nj different from G\u03bd\u2032 i . In the second case, G\u03bd\u2032 i is the unique special component of pole w,\nand \u03bb(w, E\u03bd\u2032 j ) = 1 must hold for all other components G\u03bd\u2032 j , while \u03bb(\u03b1w(f \u2032i)) = 1 must hold for all faces f \u2032i , except for one that must have label 0. In both cases, since all shape descriptions used for the components of G\u2032\u00b5 belong to their feasible sets, the switch angles of w in the interior of all components have label \u22121. Hence the above restrictions are sufficient to test whether UP2 holds for w, and this can be done in O(r) time for each labeling.\nOverall, there exist O(r2) possible labelings for the angles \u03b1u(f \u2032i) and \u03b1v(f \u2032i) of u and v respectively inside all faces f \u2032i of E \u2032\u00b5. Testing whether UP1-UP3 holds for each of them requires O(r) time. If this is the case, by Theorem 1 G\u2032\u00b5 is upward planar and the shape description of E \u2032\u00b5 can be computed in constant time from the first element of S, its last element, and the labels at u and v chosen for the outer face f \u20320. Thus, the overall complexity of deciding whether a sequence S is a shape sequence for G\u2032\u00b5 is O(r3). In the same time all O(r2) shape descriptions for G\u2032\u00b5 that correspond to S are computed.\nAssume now that S is not reduced. We describe how this case can be brought down to\nthe previous one. Let s+ be a maximal subsequence of S. Let G\u03bd\u2032 j , G\u03bd\u2032 j+1 , . . . , G\u03bd\u2032 j+` be the components of G\u2032\u00b5 that correspond to the subsequence s+ and let G+\u00b5 be the subgraph of G\u2032\u00b5 consisting of these components. Let S\u2212 be the sequence obtained from S by replacing s+ with s and let G\u2212\u00b5 the graph obtained from G\u2032\u00b5 by replacing G+\u00b5 with G\u03bd\u2032j .\nFirst we check under which conditions s+ is a shape sequence for G+\u00b5 . Let G\u03bd\u2032i and G\u03bd\u2032i+1 be two consecutive components of G\u2032\u00b5 that both have shape description s in S. The internal face f \u2032i of E \u2032\u00b5 is defined by the right outer path of E\u03bd\u2032i and the left outer path of E\u03bd\u2032i+1 . Let \u03b1u(f \u2032i) and \u03b1v(f \u2032i) be the angles at u and v respectively inside f \u2032i . If S is a shape sequence of G\u2032\u00b5, UP3 must be satisfied for f \u2032i , that is \u03c4r(s) + \u03c4l(s) + \u03bb(\u03b1u(f \u2032i)) + \u03bb(\u03b1v(f \u2032i)) = \u22122. Recall that by Lemma 9 the right-turn-number of s satisfies \u03c4r(s) = \u2212\u03c4l(s) + h with h = 0, 1, 2, 3, 4. Also the labels \u03bb(\u03b1u(f \u2032i)) and \u03bb(\u03b1v(f \u2032i)) take values in {\u22121, 0, 1}. The previous equation gives h+ \u03bb(\u03b1u(f \u2032i)) + \u03bb(\u03b1v(f \u2032i)) = \u22122 which is only satisfied if h = 0 and \u03bb(\u03b1u(f \u2032i)) = \u03bb(\u03b1v(f \u2032i)) = \u22121. Hence the shape description s = \u3008\u03c4l(s), \u03c4r(s), \u03bbu(s), \u03bbv(s), \u03c1l(u, s), \u03c1r(u, s), \u03c1l(v, s), \u03c1r(v, s)\u3009 must satisfy the thin conditions presented in Section 3. Checking whether s satisfies the thin conditions can be done in constant time. Let N1 be the set {\u03bd\u20321, . . . , \u03bd\u2032k\u2032} of children of \u00b5, Ns = {\u03bd\u2032j , . . . , \u03bd\u2032j+`} and N2 = N1 \\Ns \u222a {\u03bd\u2032j}. Note that G\u2032\u00b5 and G\u2212\u00b5 are the graphs GN1 and GN2 of Lemma 11. Also, an upward embedding EN1 of GN1 with shape sequence S, and an upward embedding EN2 of GN2 with shape sequence S\u2212, both respect s for the set Ns, and they form an equivalence pair. Hence, by Lemma 11, if s satisfies the thin conditions, then every shape description for G\u2032\u00b5 that corresponds to S is also a shape description for G\u2212\u00b5 that corresponds to S\u2212 and vice versa.\nWe try to replace every maximal subsequence s+ of S with s. If this is not possible, that is s does not satisfy the thin conditions, then S is not a shape sequence of G\u2032\u00b5. Otherwise, we have a subgraph G\u2212\u00b5 of G\u2032\u00b5 and a sequence S\u2212 which is reduced. By using the procedure described at the beginning of the proof, we can compute the shape descriptions of G\u2212\u00b5 that corresponds to S\u2212 in O(r3) time. J\nLet S\u2032 be the shape sequence of G\u2032\u00b5 with respect to E \u2032\u00b5. Let \u03bd be a child of G\u00b5 that is not in the set {\u03bd\u20321, \u03bd\u20322 . . . , \u03bd\u2032k\u2032}, let s be a shape description from the feasible set of G\u03bd , and let G\u2032\u2032\u00b5 be the subgraph of G\u00b5 consisting of the union of G\u03bd and G\u2032\u00b5. We say that S\u2032 can be extended with s to a shape sequence S\u2032\u2032 of G\u2032\u2032\u00b5 if S\u2032\u2032 is a shape sequence of G\u2032\u2032\u00b5, s belongs to S\u2032\u2032, and removing s from S\u2032\u2032 we obtain S\u2032. Notice that s can be either the first, or the last, or an intermediate element of S\u2032\u2032.\nI Lemma 16. Let S\u2032 be a shape sequence of G\u2032\u00b5. Given a shape description s from the feasible set of G\u03bd , we can decide whether S\u2032 can be extended with s to a shape sequence S\u2032\u2032 of G\u2032\u2032\u00b5 and compute the corresponding shape descriptions for G\u2032\u2032\u00b5 in O(r4) time, where r is the size of S\u2032.\nProof. The shape description s can be placed either at the beginning, at the end or between two consecutive elements of S\u2032. In the first two cases, S\u2032\u2032 = [s, S\u2032] or S\u2032\u2032 = [S\u2032, s]. The shape descriptions that correspond to S\u2032\u2032 can be computed using Lemma 15 in O(r3) time each. For the last case, let a and b be the two consecutive elements of S\u2032 where s is placed. If a 6= b there are at most r \u2212 1 possible placements for s, that is, r \u2212 1 different sequences S\u2032\u2032. Note that if s = a or s = b, then S\u2032\u2032 might be the same as S\u2032. On the other hand, if a = b there are at most r such sequences S\u2032\u2032. In fact, arguing similarly with the first part of the proof of Lemma 15, if s 6= a the sequence S\u2032\u2032 is not a shape sequence of G\u2032\u2032\u00b5 and if s = a then S\u2032\u2032 is the same sequence with S\u2032. By Lemma 15, we can test in O(r3) time if each produced sequence S\u2032\u2032 is a shape sequence of G\u2032\u2032\u00b5 or not. The total require time is O(r4) as claimed. J\nSuppose that G\u00b5 is upward planar and consider an upward planar embedding E\u00b5 of G\u00b5. We first remove the special components of u and v and the normal components G\u03bd whose uvexternal upward planar embedding E\u03bd induced by E\u00b5 has shape description with \u03bb(E\u03bd , u) = \u22121 or \u03bb(E\u03bd , v) = \u22121. Denote by G\u2032\u00b5 the subgraph of G\u00b5 obtained after this removal. We say that G\u2032\u00b5 is the thin subgraph of G\u00b5 with respect to E\u00b5. Denote by E \u2032\u00b5 the upward planar embedding of G\u2032\u00b5 Let \u03bd\u20321, \u03bd\u20322 . . . , \u03bd\u2032k\u2032 be the children of \u00b5 corresponding to the remaining components, that is, normal components of both u and v where \u03bb(E\u03bd\u2032\ni , u) = \u03bb(E\u03bd\u2032 i , v) = 1 for\ni = 1, \u00b7 \u00b7 \u00b7 , k\u2032. Assume that the pertinent graphs G\u03bd\u20321 , G\u03bd\u20322 , . . . , G\u03bd\u2032k\u2032 appear in this order from left to right around u, such that the outer boundary of E \u2032\u00b5 is formed by the left outer path of E\u03bd\u20321 and the right outer path of E\u03bd\u2032k\u2032 . We first present few technical lemmata that will be used later in this section.\nI Lemma 17. The thin subgraph of G\u00b5 with respect to an upward planar embedding E\u00b5 contains k\u2032 components of G\u00b5, where k \u2212 2 \u2264 k\u2032 \u2264 k.\nProof. As G\u00b5 has k components, the thin subgraph G\u2032\u00b5 contains k\u2032 \u2264 k components of G\u00b5. In order to prove that k\u2032 \u2265 k \u2212 2 we argue that there are most two components of G\u00b5 that don\u2019t belong to the thin subgraph G\u2032\u00b5. Note that if component G\u03bdi does not belong to G\u2032\u00b5, then either G\u03bdi is a special component of u or v, or it is a normal component for both poles u and v, with \u03bb(E\u03bdi , u) = \u22121 or \u03bb(E\u03bdi , v) = \u22121. We say that G\u03bdi is associated with pole w if G\u03bdi is either a special component of w or it is a normal component for both poles with \u03bb(E\u03bdi , w) = \u22121. Note that if G\u03bdi is a special component of w then w is a non-switch vertex of G\u00b5. On the other hand, if it is a normal component of w with \u03bb(E\u03bdi , w) = \u22121, then there is a large angle at w inside E\u03bdi and w is a switch vertex of G\u00b5. Assume for a contradiction that there exist at least three components that don\u2019t belong to the thin subgraph G\u2032\u00b5. Then at least two of them are associated with the same pole, say w. If w is a non-switch vertex, then both components are special components of w; contradiction, since there is at most one special component of w. Hence w is a switch vertex and both components are normal components with a large angle at w in their interior; contradiction to UP2, since, in any upward planar embedding, each switch vertex has exactly one large angle. J\nIn the next lemma, if w \u2208 {u, v} is a top vertex then \u03c1w = out, otherwise \u03c1w = in.\nI Lemma 18. Let \u00b5 be a P -node such that G\u00b5 is upward planar and let E\u00b5 be an upward planar embedding of G\u00b5 such that the left-turn-number of G\u2032\u00b5 is c. Then the shape sequence\nof G\u2032\u00b5 with respect to E\u00b5 is [s1+ , s2\u2217 , s3\u2217 ], with s1 = \u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, s2 = \u3008c \u2212 2, \u2212c+ 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, s3 = \u3008c\u2212 4,\u2212c+ 4, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009.\nProof. Since all components of G\u2032\u00b5 are normal components of both poles u and v, it follows that u and v are switch vertices of G\u2032\u00b5. Hence, for every i = 1, \u00b7 \u00b7 \u00b7 , k\u2032, \u03c1l(E\u03bd\u2032i , u) = \u03c1r(E\u03bd\u2032i , u) = \u03c1u and \u03c1l(E\u03bd\u2032\ni , v) = \u03c1r(E\u03bd\u2032 i , v) = \u03c1v. Additionally, at each pole u and v there is exactly one\nlarge angle. By our assumptions \u03bb(E\u03bd\u2032 i , u) = \u03bb(E\u03bd\u2032 i , v) = 1 for i = 1, \u00b7 \u00b7 \u00b7 , k\u2032, hence the large angles at u and v lie inside two (not necessarily distinct) faces of E \u2032\u00b5. Let fi and fj be the two faces where the large angle at u and v lie in respectively, where 0 \u2264 i, j < k\u2032. We distinguish some cases depending on whether i = 0 or j = 0 holds.\nCase 1: i = j = 0. The large angles at u and v are both inside the outer face of E \u2032\u00b5, that is, \u03bb(G\u2032\u00b5, u) = \u03bb(G\u2032\u00b5, v) = 1 (see Fig. 7a). In this case, by Lemma 9, the left and the right turn number of E \u2032\u00b5 are the same in absolute value, that is \u03c4l(E \u2032\u00b5, u, v) = \u2212\u03c4r(E \u2032\u00b5, u, v). Since the angles at u and v inside the face fh is small, it follows from Lemma 10 that \u03c4r(E\u03bd\u2032\nh , u, v) = \u2212\u03c4l(E\u03bd\u2032 h+1 , u, v), for each h = 1, 2, . . . , k \u2212 1. Also, since the angles at u\nand v inside the internal faces of E\u03bd\u2032 h are small, it follows that \u03bb(E\u03bd\u2032 h , u) = \u03bb(E\u03bd\u2032 h , v) = 1, which implies by Lemma 9 that \u03c4l(E\u03bd\u2032 h , u, v) = \u2212\u03c4r(E\u03bd\u2032 h , u, v). Combining these equalities we have that all E\u03bdh (gray components in Fig. 7a) have the same shape description \u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, where c = \u03c4l(E \u2032\u00b5, u, v). Hence the shape sequence is [\u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ ]. Case 2: i = 0 and j > 0. The large angle at u is inside the outer face of E \u2032\u00b5 while the large angle at v is inside face f \u2032j , with 1 \u2264 j < k\u2032, that is, \u03bb(E \u2032\u00b5, u) = 1 and \u03bb(E \u2032\u00b5, v) = \u22121 (see Fig. 7b). By Lemma 10 we have that \u03c4r(E\u03bd\u2032\ni , u, v) = \u2212\u03c4l(E\u03bd\u2032 i+1 , u, v) \u2212 2. For all h 6= j,\nthe angles at u and v inside the face f \u2032h are small, hence from Lemma 10 it follows that \u03c4r(E\u03bd\u2032\nh , u, v) = \u2212\u03c4l(E\u03bd\u2032 h+1 , u, v). Also, since the angles at u and v inside the internal faces\nof E\u03bd\u2032 h are small, it follows that \u03bb(E\u03bd\u2032 h , u) = \u03bb(E\u03bd\u2032 h , v) = 1, which implies by Lemma 9 that \u03c4l(E\u03bd\u2032 h , u, v) = \u2212\u03c4r(E\u03bd\u2032 h , u, v). Combining these equations, we conclude that all E\u03bdh with h \u2264 j (gray components in Fig. 7b) have the same shape description \u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, where c = \u03c4l(E \u2032\u00b5, u, v), while all E\u03bdh with h > j (orange components in Fig. 7b) have the same, yet different, shape description \u3008c\u2212 2,\u2212c+ 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009. Then the shape sequence for E \u2032\u00b5 is [\u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ , \u3008c\u2212 2,\u2212c+ 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ ] Case 3: i > 0 and j = 0. The large angle at v is inside the outer face of E \u2032\u00b5 while the large angle at u is inside face f \u2032i , with 1 \u2264 i < k\u2032, that is, \u03bb(E \u2032\u00b5, u) = \u22121 and \u03bb(E \u2032\u00b5, v) = 1 (see\nFig. 7c). Symmetrically to the previous case, we can prove that all E\u03bd\u2032 h with h \u2264 i (gray components in Fig. 7c) have the same shape description \u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, where c = \u03c4l(E \u2032\u00b5, u, v), while all E\u03bd\u2032h with h > i (orange components in Fig. 7c) have the same, yet different, shape description \u3008c \u2212 2,\u2212c + 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009. As before, the shape sequence for E \u2032\u00b5 is [\u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ , \u3008c\u2212 2,\u2212c+ 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ ]. Case 4: i, j > 0. None of the large angles at u and v is inside the outer face of E \u2032\u00b5, that is, \u03bb(E \u2032\u00b5, u) = \u03bb(E \u2032\u00b5, v) = \u22121. The large angle at u is inside face f \u2032i , with 1 \u2264 i < k\u2032 and the large angle at v is inside face f \u2032j , with 1 \u2264 j < k\u2032. Assume first that i < j holds. For each h 6= i, j, we have that the angles at u and v inside the face f \u2032h and inside the internal faces of E\u03bd\u2032\nh are small. By Lemmata 10 and 9 it follows that \u03c4r(E\u03bd\u2032 h , u, v) = \u2212\u03c4l(E\u03bd\u2032 h+1 , u, v) and\n\u03c4l(E\u03bd\u2032 h , u, v) = \u2212\u03c4r(E\u03bd\u2032 h , u, v). This means that all E\u03bd\u2032 h with h \u2264 i (gray components in Fig. 7d) have the same shape description \u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, where c = \u03c4l(E \u2032\u00b5, u, v), all E\u03bd\u2032\nh with i < h \u2264 j (orange components in Fig. 7d) have the same shape description\n\u3008c\u2212 2,\u2212c+ 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, and all E\u03bd\u2032 h with j < h (green components in Fig. 7d) have the same shape description \u3008c\u2212 4,\u2212c+ 4, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009; see Fig. 7d. The shape sequence defined is [\u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ , \u3008c\u2212 2,\u2212c+ 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ , \u3008c\u2212 4, \u2212c+ 4, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ ]. Note that the shape sequence is the same when i > j, while for i = j it becomes [\u3008c,\u2212c, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ , \u3008c \u2212 4,\u2212c + 4, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009+ ]; see Fig. 7e. J\nBased on Lemma 18, our algorithm computes the shape descriptions of all possible upward planar embeddings of G\u00b5 that match some fixed left- and right-turn-numbers in three steps. In the first step, we decide which sequences S\u2032 of shape descriptions given in Lemma 18 are shape sequences for some maximal subgraph G\u2032\u00b5 of G\u00b5. If S\u2032 is such a sequence, then, by Lemma 17, there are at most two children whose shape descriptions are not in S\u2032. So, in the second step we compute all possible extensions of S\u2032 with the missing shape descriptions to shape sequences of G\u00b5. In the last step, an extended sequence S of G\u00b5 is modified by appropriately changing the shape descriptions for at most two components of G\u2032\u00b5 in order to match the given left- and right-turn-numbers.\nWe now describe in detail how to compute the feasible set F\u00b5 of a P-node \u00b5. For each possible value cl of \u03c4l(E\u00b5, u, v) and cr of \u03c4r(E\u00b5, u, v), that is cl, cr \u2208 [\u03c4min, \u03c4max], we compute the shape descriptions for all possible upward planar embeddings of G\u00b5 with the given leftand right-turn-numbers. All normal components of G\u00b5 have uv-external upward planar embeddings with left- and right-turn-number odd if both u and v are either top or bottom vertices, and even if one of them is a top vertex and the other one is a bottom vertex. Then any uv-external upward planar embedding of every subgraph G\u2032\u00b5 that contains only normal components has a maximal left-turn-number c\u2032l that is either equal to cl or to cl \u2212 1 depending on the parity of both cl and c\u2032l. For the first step of the algorithm we consider all sequences of shape descriptions S\u2032 = [s1\u2217 , s2\u2217 , s3\u2217 ] where s1 = \u3008c\u2032l,\u2212c\u2032l, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, s2 = \u3008c\u2032l \u2212 2,\u2212c\u2032l + 2, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009, s3 = \u3008c\u2032l \u2212 4,\u2212c\u2032l + 4, 1, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009. For each of them we identify a maximal subgraph G\u2032\u00b5 of G\u00b5 such that S\u2032 is a shape sequence of G\u2032\u00b5. To this aim, we check whether it is possible to choose a shape description from the feasible set of the pertinent graph G\u03bdi of each child \u03bdi of \u00b5 (with i = 1, 2, . . . , k) and to sort these pertinent graphs so that the resulting shape sequence is S\u2032. We observe that S\u2032 contains at most three different shape descriptions, namely s1, s2 and s3 which can occur multiple times in the sequence. For each child \u03bdi of \u00b5 (with i = 1, 2, . . . , k) we check whether the feasible set F\u03bdi contains one of the three shape descriptions of S\u2032 in the order that they appear in S\u2032; if so, we choose it for G\u03bdi . Note that the shape description assigned to a child is the first one among s1, s2 and s3 that is contained in its feasible set. However, this does\nnot necessarily produce the desired sequence S\u2032 for G\u2032\u00b5, especially if S\u2032 has two or three elements. Thus, we check whether it is possible to modify the assigned shape descriptions so as to produce the sequence S\u2032. If S\u2032 consists of two elements and all components of G\u2032\u00b5 are assigned to the first one, we check whether one of them can be reassigned the second one. If this is not possible, then no subgraph G\u2032\u00b5 has S\u2032 as its shape sequence. If S\u2032 consists of three elements, that is S\u2032 = [s1+ , s2+ , s3+ ], then we first make sure that s2 has at least one assigned component by reassigning a component from s1, as in the previous case. If this is not possible, then no subgraph G\u2032\u00b5 has S\u2032 as its shape sequence. Otherwise, if s3 has at least one assigned component we are done. If not, we check whether a component from s1 or s2 can be reassigned to s3. If such a component exists, and both s1 and s2 have still at least one element, we are done. Otherwise if s1 is empty, then no subgraph G\u2032\u00b5 has S\u2032 as its shape sequence; if s2 is empty we check whether a component from s1 can be reassigned to s2.\nFor the second step of the algorithm, assume that for some sequence S\u2032 we have identified a maximal subgraph G\u2032\u00b5 of G\u00b5 such that S\u2032 is a shape sequence of G\u2032\u00b5. Consider now those children of \u00b5 where no shape description could be assigned for their pertinent graph. Recall that by Lemma 17 there can be at most two such children of \u00b5, say \u03bd and \u03bd\u2032. If this is not true, we conclude that G\u00b5 does not admit an upward drawing whose thin subgraph has S\u2032 as its shape sequence. Otherwise, let s\u03bd (s\u03bd\u2032) be a shape description in the feasible set of \u03bd (\u03bd\u2032, respectively), if it exists. Using Lemma 16 we compute all possible extensions of S\u2032 with s\u03bd to shape sequences of G\u2032\u2032\u00b5, where G\u2032\u2032\u00b5 is the subgraph of G\u00b5 consisting of G\u2032\u00b5 and G\u03bd . If \u03bd\u2032 does not exist, then G\u2032\u2032\u00b5 = G\u00b5 and each computed shape sequence S\u2032\u2032 is a shape sequence of G\u00b5. Otherwise, using the same lemma, for each computed shape sequence S\u2032\u2032, we further compute all possible extensions of S\u2032\u2032 with s\u03bd\u2032 to shape sequences of G\u00b5. For every computed shape sequence S of G\u00b5 we check whether it matches the given left- and right-turn-numbers, that is, the left-turn-number of the first element of S equals cl and the right-turn-number of its last element equals cr. If this is the case, then we add all shape descriptions for G\u00b5 that correspond to S to the feasible set F\u00b5 of \u00b5. Otherwise, we proceed to the third step of the algorithm with S.\nFor the last step of our algorithm, let S be a shape sequence of G\u00b5 given by the previous step. That is, S is an extension of S\u2032 and contains s\u03bd and s\u03bd\u2032 for children \u03bd and \u03bd\u2032 (if they exist) at specific positions, and such that the given left-turn-number and/or the rightturn-numbers are not matched. We consider cases depending on whether only one or both of the two turn-numbers are not matched. Assume first the the first element of S has left-turn-number different from cl, while the last element of S has right-turn-number equal to cr. Then the first element has left-turn-number smaller than cl. Our goal is to find a component G\u03bd\u2032 i of the thin subgraph G\u2032\u00b5, remove its current shape description from S and use another one from its feasible set at the beginning of the sequence in order to match the desired left-turn-number. Note that this is possible only if cl and c\u2032l have the same parity. So, consider component G\u03bd\u2032 i of the thin subgraph G\u2032\u00b5 and let si \u2208 {s1, s2, s3} be the shape description assigned to G\u03bd\u2032 i in S. Let s\u2032i be another shape description in the feasible set of G\u03bd\u2032 i that is different from s1, s2 and s3. We denote by S\u2212 the sequence S after removing si. Before proceeding, we want to assure that S\u2212 contains the same elements with S. This is not true if G\u03bd\u2032\ni was the only component assigned to si during the first step of\nthe algorithm. Note that all components of G\u2032\u00b5 are normal components for both u and v and the shape descriptions in their feasible sets have maximum left-turn-number equal to c\u2032l. Hence s1 does not belong to S, that is, the shape sequence of G\u2032\u00b5 is S\u2032 = [s2\u2217 , s3\u2217 ] and G\u03bd\u2032i is initially assigned either to s2 or to s3. If G\u03bd\u2032 i was the only component of G\u2032\u00b5 assigned to s2, then s2 does not belong to the feasible set of the other components of G\u2032\u00b5 and S\u2212 can\u2019t\nbe modified to contain all elements of S\u2032. If G\u03bd\u2032 i was the only component of G\u2032\u00b5 assigned to s3, then we check whether s2 belongs to the feasible set of the other components of G\u2032\u00b5. If we can\u2019t find such a component, then S\u2212 can\u2019t be modified to contain all elements of S\u2032, otherwise, we reassign that component to s2 and S\u2212 contains the same elements with S. Using Lemma 15, we can compute the shape descriptions of all upward planar embeddings of G\u00b5 that correspond to the sequence [s\u2032i, S\u2212]. The computed shape descriptions have the desired left- and right-turn-number and are added to the feasible set F\u00b5 of \u00b5.\nFor the case where S matches the left-turn-number cl but the last element of S has right-turn-number different from cr, we follow a similar approach. In this case, s3 does not belong to S and for each component G\u03bd\u2032 i of the thin subgraph G\u2032\u00b5 we first remove its current shape description si from S. If the new sequence S\u2212 does not contain all elements of S\u2032, then si = s2 and we check if we can reassign another component of G\u2032\u00b5 from s1 to s2. If this is not possible, then S\u2212 can\u2019t be modified to contain all elements of S\u2032. Otherwise, by Lemma 15, we can compute all possible shape descriptions for G\u00b5 that correspond to the sequence [S\u2212, s\u2032i]. The computed shape descriptions match the desired left- and right-turn-number and are added to the feasible set F\u00b5 of \u00b5.\nIn the special case where both the left- and right-turn-number of S do not match cl and cr respectively, then S does not contain neither s1 nor s3. Hence, the initial sequence for the thin subgraph G\u2032\u00b5 is S\u2032 = [s2+ ]. Now, the shape sequence of a normal component for both u and v that has left-turn-number equal to c\u2032l, right-turn-number at most \u2212c\u2032l + 2 and at least one label of the angles at u or v is \u22121, is either tul = \u3008c\u2032l,\u2212c\u2032l + 2,\u22121, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009 or tvl = \u3008c\u2032l,\u2212c\u2032l + 2, 1,\u22121, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009 (see Lemma 9). Similarly the shape sequence of such a component with left-turn-number at most c\u2032l \u2212 2 and right-turn-number \u2212c\u2032l + 4 is either tur = \u3008c\u2032l \u2212 2,\u2212c\u2032l + 4,\u22121, 1, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009 or tvr = \u3008c\u2032l \u2212 2,\u2212c\u2032l + 4, 1,\u22121, \u03c1u, \u03c1u, \u03c1v, \u03c1v\u3009. In order to match both the given left- and right-turn-numbers, S needs to be extended with tul or tvl at the beginning, and with tur or tvr at the end. As tul and tur both have \u03bb(u) = \u22121, and tvl and tvr both have \u03bb(v) = \u22121, the possible extensions of S are [tul , S, tvr ] and [tvl , S, tur ]. We consider all components G\u03bd\u2032 i of the thin subgraph G\u2032\u00b5 and check whether tul , tvl , tur and tvr are contained in their feasible set. Let Tul be the set of components G\u03bd\u2032i that contain t u l in their feasible set; sets T vl , Tur and T vr are defined similarly. For the sequence [tul , S, tvr ] we want to select one component from Tul and a different one from T vr and reassign their shape descriptions from s2 to tul and tvr respectively. This is not possible only if either one of Tul or T vr is empty, or if Tul is the same as T vr and they both contain one element. If this is the case, S can\u2019t be extended to [tul , S, tvr ], otherwise, we use Lemma 15 to decide whether this is a shape sequence of G\u00b5 and to compute the corresponding shape descriptions for F\u00b5. Similarly, S can\u2019t be extended to the second sequence [tvl , S, tur ] if either one of T vl and Tur is empty or if they both have size one and contain the same element, otherwise the shape descriptions for F\u00b5 that correspond to [tvl , S, tur ] are computed with Lemma 15 and added to the feasible set F\u00b5 of \u00b5.\nI Lemma 19. Let \u00b5 be an P-node of T . The described algorithm computes correctly the feasible set F\u00b5 of \u00b5.\nProof. Our algorithm computes sequences of shape descriptions for G\u00b5 based on the feasible sets of the pertinent graphs of the children of \u00b5. For each computed sequence Lemma 15 tests whether it is a shape sequence of G\u00b5 and the corresponding shape descriptions are added in the feasible set F\u00b5 of \u00b5. Hence, whenever a shape description s is computed for a sequence S, there exists an upward planar embedding E\u00b5 of G\u00b5 with shape sequence S and whose shape description is s.\nIt remains to prove that if s\u00b5 is a shape description of G\u00b5, then our algorithm finds a shape sequence S such that s\u00b5 corresponds to S. Let E\u00b5 be an upward planar embedding of G\u00b5 with shape sequence S\u00b5 and such that the shape description of G\u00b5 is s\u00b5. Let G\u2032E\u00b5 be the thin subgraph of G\u00b5 with respect to E\u00b5 and let S\u2032\u00b5 be its shape sequence.\nFor the left- and right-turn-numbers of s\u00b5, the first step of the algorithm computes a maximal thin subgraph G\u2032\u00b5 for S\u2032\u00b5 assigning each child of G\u00b5 to the first element of S\u2032\u00b5 that is contained in its feasible set. If an element of S\u2032\u00b5 is not assigned, the algorithm tries to reassign some components of G\u2032\u00b5. This is not possible only if an element of S\u2032\u00b5 is not contained in the feasible sets of all components of G\u00b5. Note that the children of \u00b5 whose pertinent graphs belong to the thin subgraph G\u2032E\u00b5 contain at least one element of S \u2032 \u00b5 in their feasible set. Hence, the algorithm will successfully compute a maximal thin subgraph G\u2032\u00b5 for S\u2032\u00b5. Additionally, the computed maximal thin subgraph G\u2032\u00b5 contains all components of G\u2032E\u00b5 , although they may be assigned to different elements of S\u2032\u00b5.\nIf G\u2032E\u00b5 = G\u00b5, that is S\u00b5 = S \u2032 \u00b5, then all components of G\u00b5 are assigned to elements of S\u2032\u00b5, the second step can\u2019t extend S\u2032\u00b5, and the left- and right-turn-numbers of S\u2032\u00b5 match the given values. Hence, during the third step of the algorithm all shape descriptions for G\u00b5 that correspond to S\u2032\u00b5 will be computed, including s\u00b5. So, assume that there is at least one component of G\u00b5, say G\u03bd , whose shape description s\u03bd in S\u00b5 is not an element of S\u2032\u00b5. If G\u03bd is a special component of one of the poles, or a normal component for both poles whose feasible set contains no element of S\u2032\u00b5, then the second step of the algorithm tests whether S\u2032\u00b5 can be extended with all shape descriptions in the feasible set of G\u03bd , including s\u03bd . Since S\u00b5 is a shape sequence of G\u00b5, the algorithm will extend S\u2032\u00b5 with s\u03bd to all possible shape sequences of the subgraph consisting of G\u2032\u00b5 and G\u03bd . In particular the sequence where s\u03bd is placed between the same elements of S\u2032\u00b5 as in S\u00b5, will be one of the computed shape sequences. If there is another component G\u03bd\u2032 that is either a special component of one of the poles, or a normal component for both poles whose feasible set contains no element of S\u2032\u00b5, then S\u2032\u00b5 will be further extended to contain the shape description s\u03bd\u2032 of G\u03bd\u2032 at the correct position. At the end of the second step, either the computed shape sequence S is the same with S\u00b5, or all elements of S appear in S\u00b5 in the same order from left to right.\nIf S has the same left- and right-turn-numbers with S\u00b5, then the set of shape descriptions that correspond to S will include s\u00b5, since all elements of S are contained in S\u2032\u00b5. So, we examine the case where the left- and/or the right-turn-numbers of S do not match those of S\u00b5. Assume first that the left-turn-number is different from S\u00b5, while the right-turn-number is the same. Let s1 be the first element of S\u00b5 that corresponds to component G\u03bd1 of G\u00b5 with respect to E\u00b5. Then, G\u03bd1 is a component G\u03bd\u2032i of the maximal thin subgraph G \u2032 \u00b5 computed in the first step, and its shape description in S belongs to S\u2032\u00b5. During the third step of the algorithm, it will be tested whether the sequence [s1, S] is a shape sequence for G\u00b5. Note that since all elements of [s1, S] belong to S\u00b5 in the same order, and the left- and right-turn-numbers of the two sequences are the same, the shape description s\u00b5 of G\u00b5 corresponds to both S\u00b5 and [s1, S] and will be therefore computed by the algorithm. Similarly, if S\u00b5 and S have the same left-turn-number and different right-turn-number, the third step of the algorithm will identify s\u00b5 as a shape description corresponding to the sequence [S, sk], where sk is the last element of S\u00b5 and it is the shape description used for the last component G\u03bdk of G\u00b5 with respect to E\u00b5. Hence it remains to consider the case where S and S\u00b5 have different leftand right-turn-numbers. In this case S\u00b5 is one of [tul , S\u2032\u00b5, tvr ] or [tvl , S\u2032\u00b5, tur ], and S\u2032\u00b5 = [s2+ ]. The last part of the algorithm tests whether it is possible to reassign two components of G\u00b5 from s2, one to tul and the other to tvr for the first sequence, or one to tvl and the other to tur for the second one. Hence S\u00b5 will be successfully identified as a shape sequence of G\u00b5,\nconcluding the lemma. J\nI Lemma 20. Let \u00b5 be an P-node of T . The feasible set F\u00b5 can be computed in O(\u03c4 \u00b7 k) time, where k is the number of children of \u00b5.\nProof. We prove that the time complexity of the algorithm described above is O(\u03c4 \u00b7 k). The number of choices for the left-turn-number cl of a uv-external upward planar embedding of G\u00b5 is \u03c4 , and for each value of cl by Lemma 9 the right-turn-number cr can only take values \u2212cl + h for h = 0, 1, 2, 3, 4. Hence there are 5\u03c4 possible pairs for cl and cr. For each pair, we compute the shape descriptions of all possible uv-external upward planar embeddings of G\u00b5 with left-turn-number equal to cl and right-turn-number equal to cr. For given cl and cr, first we retrieve the feasible sets of the children of \u00b5. For each feasible set we are only interested in those shape descriptions that have left-turn-number in [cl \u2212 4, cl] and right-turn-number in [cr \u2212 4, cr]. Let |F| denote the size of the largest feasible set under these constraints. By Lemma 12 the shape descriptions with specific left- and right-turn-numbers are at most six and can be fetched in O(1) time. Hence |F| is a constant and all feasible sets can be computed in O(k|F|) time.\nFor the first step of the algorithm, we consider all possible sequences S\u2032 = [s1\u2217 , s2\u2217 , s3\u2217 ]. There are eight such sequences depending on whether each of s1, s2 and s3 belongs to the sequence or not. Let S\u2032 be one of them. For i = 1, . . . , k we check if F\u03bdi contains one of the at most three elements of S\u2032; by Lemma 12 each check takes O(1) time, and we store which nodes among \u03bdi are assigned to s1, s2 and s3 (if they belong to S\u2032). This step takes O(k) time and the maximal thin subgraph G\u2032\u00b5 is identified. If an element of S\u2032 has no nodes assigned to it, at most two components of G\u2032\u00b5 are reassigned. Each reassignment process takes O(k) time, since a specific shape description is looked for in the feasible sets of the components of G\u2032\u00b5. Hence the maximal thin subgraph G\u2032\u00b5 with shape sequence S\u2032 is identified in O(k) time or the algorithm concludes that there is no subgraph of G\u00b5 with shape sequence S\u2032.\nThe second step considers children \u03bd and \u03bd\u2032 of \u00b5 (if they exist). For each s\u03bd \u2208 F\u03bd and s\u03bd\u2032 \u2208 F\u03bd\u2032 , shape sequence S\u2032 is extended in all possible ways with s\u03bd and s\u03bd\u2032 to a shape sequence S for G\u00b5. Each extension uses Lemma 16 and requires O(1) time, since S\u2032 has size at most three. Hence, computing all possible sequences S for G\u00b5 that extend a specific shape sequence S\u2032 of the first step can be done in O(|F|2) time.\nChecking whether the left- or right-turn-number of a sequence is equal to a given number takes O(1) time. If both the left- and right-turn-numbers are matched by S, the shape descriptions that correspond to S are computed with Lemma 15 in O(1) time (as S has size at most five). Otherwise the algorithm proceeds with the last step. We consider two cases depending on whether one of cl and cr are not matched or both. Consider first the case where one of them is not matched. Assume that the first element of S has left-turn-number different from cl and the right-turn-number equals cr; the case where S matches cl and not cr is similar. There are at most k choices for selecting component G\u03bd\u2032\ni . Computing the\nsequence S\u2212 takes constant time since its size is at most five. For at most one component, say G\u03bd\u2032 j , S\u2212 might not contain all elements of S\u2032; for this component only, we reassign in (k\u2032 \u2212 1)O(|F|) time another component from s2 to s3. We check whether all elements of S\u2032 have at least one node assigned to them in O(1) time. If this is the case, then the new sequence S\u2212 contains all elements of S\u2032. For each shape description s\u2032i of the feasible set of G\u03bd\u2032\ni with left-turn-number equal to cl we compute all possible shape descriptions for G\u00b5\nthat correspond to the sequence [s\u2032i, S\u2212] in O(1) time by Lemma 15. As the computed shape descriptions match the desired left- and right-turn-number, they are added to the feasible set F\u00b5 of \u00b5 in O(1) time each. The process for a component G\u03bd\u2032 i requires O(k|F|2) time if the\nsequence S\u2212 does not contain all elements of S\u2032, and O(|F|) time otherwise. Since this can occur for at most one component of G\u2032\u00b5, the third step runs in O(k|F|2) time, for the case where one of cl or cr are not matched.\nIn the special case where both the left- and right-turn-number of S do not match cl and cr respectively, then the four sets Tul , T vl , Tur and T vr are computed, by checking whether tul , tvl , tur or tvr respectively belong to the feasible set of all components of G\u2032\u00b5. By Lemma 12 each check takes O(1) time, hence the sets are computed in O(k) time. There are two possible sequences for G\u00b5, namely [tul , S, tvr ] and [tvl , S, tur ]. For each of them, we check if any of the corresponding sets is empty, or if they have both size one and contain the same element. If this is the case S can\u2019t be extended to match the given left- and right-turn-numbers, otherwise, by Lemma 15 the corresponding shape descriptions for F\u00b5 can be computed in O(1) time; each shape description is added to F\u00b5 in O(1) time. Hence, if S matches none of cl and cr the last step of the algorithm requires O(k) time.\nThe overall time complexity is 5\u03c4(O(k|F|) + 8 \u00b7 (O(k) +O(|F|2) \u00b7 (O(k|F|2) +O(k)))), where |F| = O(1), that is O(\u03c4 \u00b7 k), as claimed. J\nR-node\nWhile for S-, P- and Q-nodes we were able to provide polynomial-time procedures to compute the feasible sets, the NP-hardness of Upward Planarity prevents the existence of such a polynomial-time procedure for R-nodes. Indeed, obtaining a suitable algorithm that can compute the feasible sets for an R-node given the feasible sets for all of its children will be the task of our parameterized algorithms presented in Sections 6 and 7. In order to complete the description of our framework and also present it in a modular fashion which can be reused by future work, here we formalize the notion of an R-node subprocedure which, intuitively, is an algorithm that can compute a feasible set of an R-node.\nFormally, an R-node subprocedure is an algorithm which takes as input an R-node \u00b5 of T with skeleton H, a mapping S\u00b5 which assigns each child of \u00b5 to its feasible set, runs in time at most \u03b1(G\u00b5,S\u00b5), and computes the feasible set F\u00b5. For a digraph G with SPQR-tree T , let \u03b1(G) be\n\u2211 R-node \u00b5 \u03b1(G\u00b5,S\u00b5). We say that \u03b1(G) is the total time complexity of the R-node\nsubprocedure for graph G.\nRoot node\nWe now focus on the root node of the SPQR-tree T . The root node r corresponds to an edge e = (u, v) of G that lies on its outer face. Node r has only one child node \u00b5 with poles u and v. Let s be a shape description in the feasible set F\u00b5 of \u00b5. Then, there exists a uv-external upward planar embedding E\u00b5 of the pertinent graph G\u00b5 of node \u00b5, such that G\u00b5 has shape description s, and poles u and v are on the outer face of G\u00b5. Note that G\u00b5 = G \\ e. Hence, r can be treated as a P-node with poles u and v and two children; one of them is \u00b5 and the other one is a Q-node, say \u00b5\u2032 for the edge (u, v). Then the feasible set of \u00b5\u2032 contains only one shape description, namely s\u2032 = \u30080, 0, 1, 1, out, out, in, in\u3009. By Lemma 20 we can compute in O(\u03c4) time the feasible set of r. Since r has only two children, any shape sequence S of r contains s\u2032 as its first or last element. This implies that for any upward planar embedding E of Gr with shape sequence S, either the left or the right outer path of G\u00b5\u2032 belongs to the outer face of Gr with respect to E . As G\u00b5\u2032 consists only of edge (u, v), it follows that (u, v) belongs to the outer face of G in all possible upward planar embeddings.\nI Lemma 21. The feasible set Fr of the root node r of T can be computed in O(\u03c4) time.\nTime complexity\nFrom the discussion above and in particular from Lemmata 13, 14, 20 and 21, we obtain the following lemma.\nI Lemma 22. Let G be a biconnected DAG with n vertices and let T be an SPQR-tree of G rooted at a Q-node corresponding to an edge e = (u, v). Let \u03c4min and \u03c4max be two given integer values, and let \u03c4 = \u03c4max\u2212 \u03c4min + 1. Given an R-node subprocedure with total time complexity \u03b1(G), it is possible to compute in time O(\u03b1(G) + \u03c42 \u00b7 n) the shape descriptions of every upward planar embedding with e on the outer face, such that the left- and right-turn-numbers of the pertinent graph of every node of T are in the range [\u03c4min, \u03c4max].\n5 Extension to the Single-Connected Case\nIn this section, we show that Lemma 22 can be used as a blackbox to extend our results from the biconnected case to arbitrary graphs. Our goal is to prove Interface Lemma 24, which reduces the task of solving Upward Planarity to the one of obtaining an R-node subprocedure, for all graphs including single-connected ones. First, in the next definition we encapsulate the property that the shapes occuring in SPQR-tree decompositions of a graph have a bounded range of left- and right-turn-numbers, as in Sections 6 and 7 we obtain efficient algorithms precisely in this regime.\nI Definition 23. Let G be a digraph and \u03c4min, \u03c4max be two integers. We call G [\u03c4min, \u03c4max]turn-bounded if the following holds for every upward planar embedding E of G. For any biconnected component B of G and every SPQR-tree decomposition T of B that is rooted at a Q-node corresponding to an edge that lies on the outer face of B in the embedding induced by E, left- and right-turn-numbers of the pertinent graph of every node of T are in range [\u03c4min, \u03c4max].\nWe now give the precise statement of our Interface Lemma.\nI Lemma 24 (Interface Lemma). Let G be an n-vertex digraph, and \u03c4min, \u03c4max be integers such that G is [\u03c4min, \u03c4max]-turn-bounded. Given an R-node subprocedure with total time complexity \u03b1(G), it is possible to determine whether G admits an upward planar embedding in time O(n(\u03b1(G) + \u03c42 \u00b7 n)) where \u03c4 = \u03c4max \u2212 \u03c4min + 1.\nNote that, for a single-connected graph G, we define the total time complexity \u03b1(G) of an R-node subprocedure to be the sum of \u03b1(B) over all biconnected components B of G.\nTo give an intuition of the proof, we start by guessing the root of the block-cut tree of G, which is assumed to see the outer face in the desired upward planar embedding of G. The core of the proof is the following lemma, which states that leaf components can always be added on top of an upward planar embedding, up to simple conditions on the cut-vertex.\nI Lemma 25. Consider a rooted block-cut tree of G, its cut vertex v that is adjacent to leaf blocks B1,...,B`, and the parent block P . Denote by GP the corresponding component of G\u2212 {v}. Any upward planar embedding of GP where the root block sees the outer face can be extended to an embedding of G with the same property if the following holds:\n1. Each Bi has an upward-planar embedding with v on the outer face."
        },
        {
            "heading": "2. If v is a non-switch vertex in P , each Bi has an upward-planar embedding with v on the",
            "text": "outer face where the large angle of v is on the outer face.\nAs the conditions of Lemma 25 turn out to be necessary as well, our algorithm simply proceeds upwards along the block-cut tree, checking every time the conditions of the lemma and removing the respective leaf components. If at some point the conditions are not satisfied, we conclude that G is a no-instance; otherwise, any upward planar embedding of the root block can be iteratively extended to an embedding of the whole graph. Finally, finding upward planar embeddings of the blocks is performed via Lemma 22; it can also be used to verify conditions of Lemma 25.\nProof of Lemma 25. Fix an upward planar embedding EP of GP , and upward plannar embeddings EB1 , . . . , EB` of B1, . . . , B` subject to the conditions of the lemma. W.l.o.g. assume that the leaf blocks are indexed in such a way that for the first p blocks, the angle of v at the outer face is small or flat, for some 0 \u2264 p \u2264 `, and for the remaining blocks the outer angle at v is large. If p > 0, it follows from the conditions of the lemma that v is a switch vertex in P and in all the blocks B1, . . . , B` except maybe one; if there is a block where v is a non-switch vertex w.l.o.g. let that block be Bp.\nWe first consequently deal with the blocks B1, . . . , Bp, that is, we construct an upward planar embedding Ei of Gi = G[V (Gp) \u22c3i j=1 V (Bj)] for each i \u2208 [p] from an upward planar embedding Ei\u22121 of Gi\u22121, starting with the embedding E0 = EP of G0 = GP . For each vertex of Gi that is not v, we infer both the circular order of the incident edges and the angle assignment from Ei\u22121 or EBi , depending on whether the vertex belongs to Bi or not. To define a circular order on edges incident to v, split the ordering on neighbors of v in Gi\u22121 at a large angle of v (according to Ei\u22121), which necessarily exists as v is a switch vertex of Gi\u22121, and join it with the ordering of neighbors of v in Bi split at the outer angle of v in EBi . This results in two new angles, for each of them, we assign a value of \u22121 if it is a switch angle, and 0 if it is a flat angle. All the other angles around v keep their value from either Ei\u22121 or EBi . We now verify that the conditions UP0\u2013UP3 from Theorem 1 hold for the vertex v and the new face of the constructed embedding. UP0\u2013UP2 hold by construction, next we verify UP3 by considering two cases. In what follows, f denotes the newly formed face. We assume that UP3 is already verified for Ei\u22121.\nCase 1. The large angle at v is inside the outer face of Ei\u22121. This necessarily implies i = 1, as each Bi for i \u2208 [p] is embedded with a small angle at v on the outer face. Since we embed B1 in the outer angle of v, the newly formed face is the outer face. Observe that the set of angles at f is precisely the union of the angles of G0 and the angles of B1 on the outer faces in the respective embeddings, except for the angles at v. The angle at v on the outer face is necessarily 1 in E0, and there are two cases for the value in EB1 . If the corresponding angle is a switch angle, then the value is \u22121, and the two newly formed angles at v in f by construction receive the value \u22121 (see Fig. 8a). If the angle is flat in B1, its value is 0 and one of the newly formed angles is also flat, receiving a value of 0, while the other is a switch angle, receiving a value of \u22121 (see Fig. 8b). In either case, the sum of angle values on f at v is two less than the sum of two outer angles at v in G0 and B1. Thus, summing up all angle values along f we obtain two (sum of angles on the outer face of G0) plus two (sum of angles on the outer face of B1 minus two (difference in the angles at v), which satisfies UP3 since f is the outer face.\nCase 2. The large angle at v is inside an inner face of Ei\u22121. In this case, f is also an inner face in Ei. Analogously to Case 1, summing up the angles on f in Gi is equivalent to summing angles on the corresponding faces in Gi\u22121 and Bi accounting for the change of angles at v. By the same arguments, the change at v results in minus two, while the sum in Gi\u22121 is minus two (inner face) and the sum in Bi is two (outer face) by UP3 in Ei\u22121 and EBi , respectively. This sums up to minus two, fulfilling UP3 for f in Ei.\nIt remains to extend the resulting upward planar embedding of Gp by accounting for the block Bp+1, . . . , B` for which there is an upward planar embedding with a large angle at v on the outer face. Again, we consequently extend the embedding one block at a time, constructing an upward planar embedding Ei of Gi = G[V (Gp) \u22c3i j=1 V (Bj)] for each i \u2208 [p+ 1..`]. Fix Bi, v is a switch vertex in Bi since it has an adjacent large angle. We first define the embedding on every vertex except v, by repeating the respective circular order and angle assignment from Ei\u22121 or EBi . Now, consider a flat or large angle \u03b1 at v in Gi\u22121 as given by Ei\u22121, at least one necessarily exists by Theorem 1. Split the neighbor list of v in Gi\u22121 at \u03b1, split the neighbor list of v in Bi at the large angle, then join these lists to obtain a circular order of neighbors of v in Gi. Consider the two newly formed angles. If \u03b1 is flat, one of them is flat and the other is a switch angle, assign 0 to the former and \u22121 to the latter (see Fig. 8c). If \u03b1 is a large angle, either the edges at v are oriented differently in Gi\u22121 and Bi, in which case both new angles are flat (see Fig. 8d), or v is a switch vertex in Gi, then assign 1 to one of the newly formed edges and \u22121 to the other (arbitrarily) (see Fig. 8e). By construction, the conditions UP0\u2013UP2 of Theorem 1 are satisfied at v, it remains to verify UP3 for the newly formed face f . Analogously to the case i \u2264 p, the sum of angles on f can be computed as the sum of three parts: the sum of angles in Gi\u22121 and Bi on the corresponding faces, and the change in the angle values at v. The first part is two or minus two, depending on whether the large angle at v is on the outer face of Gi\u22121 or not, but it matches exactly the target value for f . The second part is always two since v is on the outer face of Bi. It can be easily seen that the third part is exactly minus two, in each of the three cases above. Thus, UP3 is satisfied for f , and Ei is a required upward planar embedding. Setting i = ` finishes the proof. J\nBy proceeding upwards along the block-cut tree of G, Lemma 24 follows shortly from Lemma 25.\nProof of Lemma 24. The algorithm proceeds as follows. First, compute the block-cut tree T of G. Then, branch on the choice of the root block BR of T . The algorithm now verifies whether there is an upward planar embedding of G where at least one edge of BR is incident to the outer face. To this end, the algorithm iteratively checks the conditions of Lemma 25 in the bottom-up fashion. Specifically, the algorithm picks a cut vertex v in T , such that all its adjacent blocks are leaves in T , except for the parent block P . For each of the leaf blocks B1, . . . , B`, the algorithm uses Lemma 22 to compute possible shape descriptions for every upward planar drawing where v lies on the outer face. That is, for every edge e incident to v in Bi, the algorithm constructs an SPQR-tree decomposition of Bi rooted at a Q-node corresponding to e, and runs Lemma 22 on this decomposition.\nIf some of the blocks does not admit any feasible shape at this stage, the algorithm\nimmediately concludes that G is a no-instance. Additionally, if v is a non-switch vertex in P , the algorithm checks whether for each i \u2208 [`] there exists a feasible shape description which assigns a large angle to the outer face at v. Since for each e = (v, u) \u2208 E(Bi), we have computed the shape descriptions of every upward planar embedding of Bi with edge e on the outer face via Lemma 22, this information is readily available to the algorithm. If for some component the condition does not hold, the algorithm finishes with reporting that G is a no-instance. Otherwise, the algorithm removes the blocks B1, . . . , B` from the graph and proceeds. The algorithm continues in this fashion until only the root block BR is left, where it finally uses Lemma 22 to check whether BR admits an upward planar drawing. That is, for every edge e \u2208 E(BR), the algorithm constructs an SPQR-tree decomposition of BR rooted at e and runs Lemma 22 on this decomposition. If for each e this results in an empty set of feasible shapes, the algorithm concludes that G is a no-instance. Otherwise, the algorithm returns that G is a yes-instance.\nCorrectness. First, assume that the algorithm concluded that G admits an upward planar embedding. Then, there is at least one feasible shape description of BR returned by the algorithm of Lemma 22, which means that there is an upward planar embedding of BR. By going through the sequence of considered cut vertices v in the reverse order, the embedding can be extended to all children blocks containing v by Lemma 25. Specifically, fix a cut vertex v that splits the graph into the leaf blocks B1, . . . , B` and the subgraph GP that contains the parent block, and assume that the existence of an upward planar embedding for GP is already shown. Now, by Lemma 25 this embedding extends to an upward planar embedding of G[V (GP )\u222aV (B1)\u222a \u00b7 \u00b7 \u00b7\u222aV (B`)]. When the whole block-cut tree T is traversed back in this way, we obtain an upward planar embedding of G.\nIn the other direction, we argue that if G has an upward planar embedding E\u2217, the algorithm necessarily returns one as well (not necessarily the same). In E\u2217, there is an edge e that is incident to the outer face, consider the block BR that contains e and the branch of the algorithm where BR is set to be the root block of the block-cut tree T of G. Since G admits an upward planar embedding, each block B in T admits one as well. Here we assume that a particular upward planar drawing of G is fixed as well, and an upward planar drawing for its subgraph is induced naturally by removing the respective part of the drawing of G. We now show that no step of the algorithm can result with reporting a no-instance, this immediately implies that the algorithm returns an upward planar embedding of G.\nFix a graph G\u2032 that is obtained from G by removing a sequence of leaf blocks (as during the work of our algorithm), E\u2217 induces an upward planar embedding of G\u2032 as well. If G\u2032 consists of a single biconnected block, our algorithm successfully decides whether there exists an upward planar embedding of this block by Lemma 22. Otherwise, consider a cut-vertex v with adjacent children leaf blocks B1, . . . , B` and the parent block P , denote the component of G\u2032 \u2212 v that contains P by GP . For each B1, . . . , B`, GP fix an upward planar embedding that is induced by E\u2217. Since GP contains BR, there is an edge e in GP that is incident to the outer face. This immideately implies that for each Bi, v is on the outer face in its embedding \u2014 otherwise the whole GP together with e lies in an inner face of an embedding of Bi, thus contradicting the choice of E\u2217 and e. This verifies the first condition of Lemma 25, we now move to the second condition. Let v be a non-switch vertex in P , then by the expansion procedure v is a switch vertex in all B1, . . . , B`. Assume there is a block Bi where v has a small angle on the outer face, in its fixed embedding. Then by the condition UP1 of Theorem 1, v has a large angle in one of the inner faces of Bi. However, since by the discussion above P is embedded in the outer face of Bi, the flat angles at v will end up being inside the small angle on the outer face of Bi. This contradicts the fact that E\u2217 is an\nupward planar embedding. Thus, at every intermediate step of the algorithm Lemma 25 is invoked successfully.\nRunning time. For a fixed rooting of the block-cut tree T , on each non-root block B our algorithm runs the algorithm of Lemma 22 on B for each edge incident to v, where v is the parent cut-vertex of this block. Additionally, on the root block BR Lemma 22 is invoked once for every edge of BR. Thus, over all possible rootings of T , Lemma 22 is run once on each block per edge of the block, and once for each edge incident to a cut vertex. The latter holds since if our algorithm queries Lemma 22 several times with the same block and the same root edge e, there is no need to recompute the set of admissible shape descriptions as it only depends on the block itself. Therefore, the running time is dominated by invocations of Lemma 22, where the number of invocations on a block is proportional to the number of vertices of the block, and that takes time\u2211\nB\u2208T O(|B|(\u03b1(B) + \u03c42 \u00b7 |B|)),\nSince the blocks of T intersect only in cut-vertices, and the amount of intersections is linear in n, the running time can be upper-bounded by n(\u03b1(G) + \u03c42 \u00b7 n), as required (here we also use that by definition \u03b1(B) \u2264 \u03b1(G) for each block B of G). Every other part of the algorithm (e.g. constructing the block-cut tree) takes linear time. J\n6 An Algorithm Parameterized by the Number of Sources\nLet G be an n-vertex digraph whose underlying graph is planar and let \u03c3 be the number of sources of G. First, we expand G. As discussed in Section 2, this operation does not alter whether G is upward planar, it preserves the number of sources and at most doubles the number of vertices of G. In view of Lemma 24, in order to obtain an algorithm for Upward Planarity parameterized by \u03c3, it suffices to devise an R-node subprocedure whose runtime depends on \u03c3 and, polynomially, on n. We hence consider a single biconnected component B of G and observe the following.\nI Observation 26. The digraph B is expanded and it has at most \u03c3 sources.\nProof. First, B is expanded since G is expanded and since each vertex of B has a set of incident edges which is a subset of the set of edges incident to the same vertex in G.\nWe prove that B has at most \u03c3 sources by induction on the number bG of biconnected components of G. Indeed, if bG = 1, then B = G and the statement is trivial. If bG > 1, remove from G a biconnected component B\u2032 6= B that has a single cut-vertex c; let G\u2032 be the resulting graph. We prove that G\u2032 has at most \u03c3 sources. This is obvious if c is a source of G or if c is not a source of G\u2032. Otherwise, suppose that c is not a source of G and it is a source of G\u2032. The two things imply that c is not a source of B\u2032; since G is acyclic, it follows that B\u2032 contains a source s 6= c of B\u2032; note that s is also a source of G. Thus, although G\u2032 contains the \u201cnew\u201d source c, it does not contain the source s, hence G\u2032 has at most \u03c3 sources. Since G\u2032 has one less biconnected component than G, the inductive hypothesis applies and we can conclude that B has \u03c3 sources. J\nFor the sake of familiarity of notation, in the following we denote by G the considered biconnected digraph, by n the number of its vertices, and by \u03c3 the number of its sources. Let e\u2217 be any edge of G; we compute an SPQR-tree T of G rooted at the Q-node representing e\u2217 in O(n) time [14, 27]. We will show how to compute, for each R-node \u00b5 of T , the feasible set F\u00b5, assuming that the feasible sets for the children of \u00b5 have been already computed. However, before doing that, we need to establish some combinatorial lemmata."
        },
        {
            "heading": "6.1 Turn-Numbers and Size of Feasible Sets",
            "text": "We start by proving that a bounded number of sources implies bounded left- and right-turnnumbers. Let \u00b5 be any node of T , let u and v be the poles of \u00b5, let \u03c3\u00b5 be the number of sources of G\u00b5 different from its poles, and let E\u00b5 be any uv-external upward planar embedding of G\u00b5. We have the following.\nI Lemma 27. The left- and right-turn-numbers of E\u00b5 are in the interval [\u22122\u03c3\u00b5\u2212 1, 2\u03c3\u00b5 + 1].\nProof. Let \u3008v0 = u, v1, v2, . . . , vk = v\u3009 and \u3008w0 = u,w1, w2, . . . , wh = v\u3009 be the left and right outer paths of E\u00b5, respectively. For i = 0, 1, . . . , k, denote by \u03b1i the angle at vi inside the outer face of E\u00b5 and, for i = 0, 1, . . . , h, by \u03b2i the angle at wi inside the outer face of E\u00b5.\nWe first prove that the left-turn-number of E\u00b5 is at most 2\u03c3\u00b5+ 1. This is done by proving, for every m = 1, . . . , k \u2212 1, the following claim. Let \u03c3m be the number of sources of G\u00b5 among v1, . . . , vm and let pm \u2264 m be the largest index such that \u03b1pm is a large angle, where pm is undefined if each angle among \u03b11, . . . , \u03b1m is small or flat. Note that, if pm is defined, then vpm is either a source or a sink of G\u00b5, by properties UP1-UP2 of Theorem 1. Then the claim is that:\u2211m\ni=1 \u03bb(\u03b1i) is smaller than or equal to 2\u03c3m + 1, if the index pm is defined and vpm is a sink; and\u2211m i=1 \u03bb(\u03b1i) is smaller than or equal to 2\u03c3m, if the index pm is undefined or vpm is a source.\nObserve that the claim, applied with m = k \u2212 1, implies that the left-turn-number of E\u00b5 is at most 2\u03c3\u00b5 + 1, since \u03c3k\u22121 \u2264 \u03c3\u00b5.\nThe proof is by induction on m. In the base case m = 1. We distinguish some cases, according to the type of \u03b11.\nIf \u03b11 is a non-large angle, then \u03bb(\u03b11) \u2264 0 = 2\u03c31. If \u03b11 is a large angle and v1 is a source of G\u00b5, then \u03bb(\u03b11) = 1 < 2 = 2\u03c31. If \u03b11 is a large angle and v1 is a sink of G\u00b5, then \u03bb(\u03b11) = 1 = 2\u03c31 + 1.\nFor the inductive case, suppose that the claim is true for some m \u2208 {1, . . . , k \u2212 2}, we prove that the claim is true for m+ 1 as well. We distinguish some cases, depending on the type of \u03b1m+1 and on whether pm is defined or not.\nFirst, suppose that \u03b1m+1 is a non-large angle and that pm is undefined; then pm+1 is undefined, \u03c3m+1 = \u03c3m, and \u03bb(\u03b1m+1) \u2264 0. It follows that \u2211m+1 i=1 \u03bb(\u03b1i) \u2264 \u2211m i=1 \u03bb(\u03b1i) \u2264 2\u03c3m = 2\u03c3m+1, where the second inequality uses the inductive hypothesis. Second, suppose that \u03b1m+1 is a non-large angle, that pm is defined, and that vpm is a source; then vpm+1 = vpm is a source, \u03c3m+1 = \u03c3m, and \u03bb(\u03b1m+1) \u2264 0. As in the previous case, it follows that \u2211m+1 i=1 \u03bb(\u03b1i) \u2264 \u2211m i=1 \u03bb(\u03b1i) \u2264 2\u03c3m = 2\u03c3m+1. Third, suppose that \u03b1m+1 is a non-large angle, that pm is defined, and that vpm is a sink; then vpm+1 = vpm is a sink, \u03c3m+1 = \u03c3m, and \u03bb(\u03b1m+1) \u2264 0. It follows that\u2211m+1 i=1 \u03bb(\u03b1i) = \u2211m i=1 \u03bb(\u03b1i) \u2264 2\u03c3m + 1 = 2\u03c3m+1 + 1. Fourth, suppose that \u03b1m+1 is a large angle and that vm+1 is a source; then \u03c3m+1 = \u03c3m+1 and \u03bb(\u03b1m+1) = 1. It follows that \u2211m+1 i=1 \u03bb(\u03b1i) = 1+ \u2211m i=1 \u03bb(\u03b1i) \u2264 1+(2\u03c3m+1) = 2\u03c3m+1. Fifth, suppose that \u03b1m+1 is a large angle, that vm+1 is a sink, and that pm is undefined; then \u03bb(\u03b1m+1) = 1. Further, each angle among \u03b11, . . . , \u03b1m is small or flat, hence\u2211m i=1 \u03bb(\u03b1i) \u2264 0. It follows that \u2211m+1 i=1 \u03bb(\u03b1i) \u2264 1 \u2264 2\u03c3m+1 + 1.\nSixth, suppose that \u03b1m+1 is a large angle, that vm+1 is a sink, that pm is defined, and that vpm is a source; then \u03c3m+1 = \u03c3m and \u03bb(\u03b1m+1) = 1. It follows that \u2211m+1 i=1 \u03bb(\u03b1i) =\n1 + \u2211m i=1 \u03bb(\u03b1i) \u2264 1 + 2\u03c3m = 2\u03c3m+1 + 1. Finally, suppose that \u03b1m+1 is a large angle, that vm+1 is a sink, that pm is defined, and that vpm is a sink; then \u03c3m+1 = \u03c3m and \u03bb(\u03b1m+1) = 1. With respect to the previous cases, here we need to prove the following observation: there exists (at least) one angle among \u03b1pm+1, \u03b1pm+2, . . . , \u03b1m that is small. Indeed, by definition of pm, each angle among \u03b1pm+1, \u03b1pm+2, . . . , \u03b1m is either small or flat. Further, since vpm is a sink, the edge between vpm and vpm+1 is incoming vpm . Now consider the smallest index i \u2265 1 such that the edge between vpm+i and vpm+i+1 is outgoing vpm+i; such an index exists, as otherwise vm+1 would not be a sink. Then the edges connecting vpm+i to vpm+i\u22121 and vpm+i+1 are both outgoing vpm+i; since \u03b1pm+i is not large, it is small, which proves the claimed observation. It follows that \u2211m+1 i=1 \u03bb(\u03b1i) = \u2211pm i=1 \u03bb(\u03b1i)+ \u2211m i=pm+1 \u03bb(\u03b1i)+\u03bb(\u03b1m+1) \u2264 (2\u03c3m+1)\u22121+1 = 2\u03c3m+1 + 1.\nThis completes the induction, hence proves the claim and that the left-turn-number of E\u00b5 is at most 2\u03c3\u00b5 + 1. An analogous proof shows that the right-turn-number of E\u00b5 is also at most 2\u03c3\u00b5 + 1. From this, it follows that \u2211k i=0 \u03bb(\u03b1i) \u2264 2\u03c3\u00b5 + 3 and \u2211h i=0 \u03bb(\u03b2i) \u2264 2\u03c3\u00b5 + 3 (the two sums are the left- and right-turn-number of E\u00b5, respectively, increased by the angles at u and v inside the outer face of E\u00b5). By property UP3 of Theorem 1, we have that\u2211k\u22121 i=1 \u03bb(\u03b1i)+ \u2211h i=0 \u03bb(\u03b2i) = 2, hence \u2211k\u22121 i=1 \u03bb(\u03b1i) = 2\u2212 \u2211h i=0 \u03bb(\u03b2i) \u2265 2\u2212(2\u03c3\u00b5+3) = \u22122\u03c3\u00b5\u22121, hence the left-turn-number of E\u00b5 is at least \u22122\u03c3\u00b5 \u2212 1. Analogously, the right-turn-number of E\u00b5 is at least \u22122\u03c3\u00b5 \u2212 1, which concludes the proof of the lemma. J\nA direct consequence of Lemma 27 is that we can bound the size of a feasible set F\u00b5 of \u00b5.\nI Lemma 28. The size of the feasible set F\u00b5 of \u00b5 is at most 72\u03c3\u00b5 + 54.\nProof. Note that G\u00b5 contains at most \u03c3\u00b5 sources other than u and v. By Lemma 27, the shape description of E\u00b5 has the value \u03c4l(E\u00b5, u, v) in [\u22122\u03c3\u00b5\u2212 1, 2\u03c3\u00b5 + 1], hence \u03c4l(E\u00b5, u, v) can have one of 4\u03c3\u00b5 + 3 possible values. By Lemma 12 there are at most 18 shape descriptions with given \u03c4l(E\u00b5, u, v). Hence, F\u00b5 has at most (4\u03c3\u00b5 + 3) \u00b7 18 = 72\u03c3\u00b5 + 54 possible shape descriptions. J"
        },
        {
            "heading": "6.2 An R-node Subprocedure",
            "text": "In the following, we show an algorithm running in O(\u03c31.45\u03c3 \u00b7 k log3 k)) time that computes the feasible set F\u00b5 of an R-node \u00b5 of T with k children. Let u and v be the poles of \u00b5. Let \u03c3\u00b5 be the number of sources of G\u00b5 different from its poles. Furthermore, let \u03bd1, . . . , \u03bdk be the children of \u00b5 and, for i = 1, . . . , k, let ui and vi be the poles of \u03bdi and ei be the virtual edge representing \u03bdi in the skeleton sk(\u00b5) of \u00b5. We assume that we have the feasible set F\u03bdi for each child \u03bdi of \u00b5.\nWe first introduce two classifications of the components of G\u00b5 (that is, G\u03bd1 , . . . , G\u03bdk). First, a component G\u03bdi is boring if it does not contain any sources except, possibly, for its poles, while it is interesting if it contains at least one source different from its poles. Because G\u00b5 has \u03c3\u00b5 sources, there are at most \u03c3\u00b5 interesting components among G\u03bd1 , . . . , G\u03bdk , while there can be any number of boring components. Second, a component G\u03bdi is extreme if ei is incident to a pole of \u00b5 and is incident to the face of the (unique) planar embedding of sk(\u00b5) containing u and v, it is non-extreme otherwise. Note that there are four extreme components\nvi\nui\n(a)\nvi\nui\n(b)\nvi\nui\n(c)\namong G\u03bd1 , . . . , G\u03bdk . Clearly, an O(n)-time pre-processing of G allows us to equip every virtual edge e in the skeleton of every R-node \u03c4 of T with a label, indicating whether the component of G\u03c4 corresponding to e is boring, interesting, extreme, or non-extreme. With such a labeling, we can produce in O(k) time (and thus in O(n) time over all the R-nodes of T ) an ordering of the components of G\u00b5 such that all the extreme or interesting components precede all the non-extreme boring components. We assume, w.l.o.g., that G\u03bd1 , . . . , G\u03bdk is such an order, where G\u03bd1 , . . . , G\u03bdh are the extreme or interesting components.\nThe outline of our algorithm to compute the feasible set F\u00b5 of \u00b5 is as follows. For each shape description s = \u3008\u03c4l, \u03c4r, \u03bbu, \u03bbv, \u03c1ul , \u03c1ur , \u03c1vl , \u03c1vr\u3009, where \u03c4l \u2208 [\u22122\u03c3\u00b5 \u2212 1, 2\u03c3\u00b5 + 1], \u03c4r \u2208 [\u2212\u03c4l,\u2212\u03c4l + 4], \u03bbu \u2208 {\u22121, 0, 1}, \u03bbv \u2208 {\u22121, 0, 1}, \u03c1ul \u2208 {in, out}, \u03c1ur \u2208 {in, out}, \u03c1vl \u2208 {in, out}, and \u03c1vr \u2208 {in, out}, we independently test whether G\u00b5 admits a uv-external upward planar embedding with shape description s; then F\u00b5 contains the shape descriptions for which the test was successful. In order to test whether G\u00b5 admits a uv-external upward planar embedding with shape description s, we consider all possible combinations of shape descriptions for the extreme and interesting components of G\u00b5. For each of these combinations, we create a flow network that admits a flow of a certain size if and only if G\u00b5 admits a uv-external upward planar embedding whose shape description is s and in which the shape descriptions of the extreme and interesting components are those in the considered combination."
        },
        {
            "heading": "6.2.1 Boring components",
            "text": "Despite their name, boring components play an important role in our algorithm. In the following we discuss their features.\nI Lemma 29. If G\u03bdi is a boring component, then the shape description of any uivi-external upward planar embedding of G\u03bdi is one of the following:\n1. \u30080, 0, 1, 1, out, out, in, in\u3009 (see Fig. 9a); 2. \u30080, 0, 1, 1, in, in, out, out\u3009 (see Fig. 9a with ui and vi inverted); 3. \u30080, 1, 1, 0, out, out, in, out\u3009 (see Fig. 9b); 4. \u30081, 0, 0, 1, out, in, out, out\u3009 (see Fig. 9b with ui and vi inverted); 5. \u30081, 0, 1, 0, out, out, out, in\u3009 (see Fig. 9c); 6. \u30080, 1, 0, 1, out, in, out, out\u3009 (see Fig. 9c with ui and vi inverted); 7. \u3008\u22121, 1, 1, 1, out, out, out, out\u3009 (see Fig. 9d); 8. \u30081,\u22121, 1, 1, out, out, out, out\u3009 (see Fig. 9d with ui and vi inverted); 9. \u30081, 1, 1,\u22121, out, out, out, out\u3009 (see Fig. 9e); and 10. \u30081, 1,\u22121, 1, out, out, out, out\u3009 (see Fig. 9e with ui and vi inverted);\nProof. Consider any uv-external upward planar embedding E\u03bdi of G\u03bdi . Let s\u03bdi be the shape description of E\u03bdi . Since G\u03bdi is a boring component, only ui and vi can be sources of G\u03bdi .\nThen, by Lemma 27, the left- and right-turn-numbers \u03c4l(E\u03bdi , ui, vi) and \u03c4r(E\u03bdi , ui, vi) of E\u03bdi can only take the values \u22121, 0, and 1.\nAssume first that both ui and vi are sources ofG\u03bdi . It follows that {\u03bb(E\u03bdi , ui), \u03bb(E\u03bdi , vi)} \u2286 {\u22121, 1}, that the last four values of s\u03bdi are all out, and that \u03c4l(E\u03bdi , ui, vi) and \u03c4r(E\u03bdi , ui, vi) are both odd. By Corollary 8, we have that \u03c4l(E\u03bdi , ui, vi) + \u03c4r(E\u03bdi , ui, vi) + \u03bb(E\u03bdi , ui) + \u03bb(E\u03bdi , vi) = 2. Hence:\nIf \u03bb(E\u03bdi , ui) = \u03bb(E\u03bdi , vi) = 1, then one between \u03c4l(E\u03bdi , ui, vi) and \u03c4r(E\u03bdi , ui, vi) is \u22121 and the other one is 1 (see Fig. 9d, possibly with ui and vi inverted). If {\u03bb(E\u03bdi , ui), \u03bb(E\u03bdi , vi)} = {\u22121,+1}, then \u03c4l(E\u03bdi , ui, vi) and \u03c4r(E\u03bdi , ui, vi) are both 1 (see Fig. 9e, possibly with ui and vi inverted). Note that \u03bb(E\u03bdi , ui) and \u03bb(E\u03bdi , vi) cannot be both \u22121, as otherwise \u03c4l(E\u03bdi , ui, vi) + \u03c4r(E\u03bdi , ui, vi) + \u03bb(E\u03bdi , ui) + \u03bb(E\u03bdi , vi) = 2 could not be satisfied, as \u03c4l(E\u03bdi , ui, vi) + \u03c4r(E\u03bdi , ui, vi) \u2264 2.\nAssume next that ui is a source of G\u03bdi and vi is not. It follows that the fifth and sixth values of s\u03bdi are both out.\nIf vi is a sink of G\u03bdi , then the seventh and eighth values of s\u03bdi are both in. Hence, \u03c4l(E\u03bdi , ui, vi) and \u03c4r(E\u03bdi , ui, vi) are even and thus they are both 0. By Corollary 8, we have that \u03c4l(E\u03bdi , ui, vi) + \u03c4r(E\u03bdi , ui, vi) + \u03bb(E\u03bdi , ui) + \u03bb(E\u03bdi , vi) = 2, hence \u03bb(E\u03bdi , ui) = \u03bb(E\u03bdi , vi) = 1 (see Fig. 9a). If vi is a non-switch vertex of G\u03bdi , then \u03bb(E\u03bdi , vi) = 0; further, either the seventh value of s\u03bdi is in and the eight value is out, or vice versa. In the former case (see Fig. 9b), \u03c4l(E\u03bdi , ui, vi) is even (and thus it is 0) and \u03c4r(E\u03bdi , ui, vi) is odd (and thus it is 1, as if it were \u22121, then \u03c4l(E\u03bdi , ui, vi) + \u03c4rE\u03bdi , ui, vi) + \u03bb(E\u03bdi , ui) + \u03bb(E\u03bdi , vi) = 2 could not be satisfied), thus \u03bb(E\u03bdi , ui) = 1. In the latter case (see Fig. 9c), \u03c4r(E\u03bdi , ui, vi) is even (and thus it is 0) and \u03c4l(E\u03bdi , ui, vi) is odd (and thus it is 1, as if it were \u22121, then \u03c4l(E\u03bdi , ui, vi) + \u03c4r(E\u03bdi , ui, vi) + \u03bb(E\u03bdi , ui) + \u03bb(E\u03bdi , vi) = 2 could not be satisfied), thus \u03bb(E\u03bdi , ui) = 1.\nThe case in which vi is a source of G\u03bdi and ui is not is symmetric to the previous one (see Figs. 9a\u20139c with ui and vi inverted). Finally, one of ui and vi is a source, given that G\u03bdi is acyclic. J\nIn the following, we call (inverted-) sausage the shape description in item 1 (resp. item 2) of Lemma 29, (inverted-) right-wing the shape descriptions in item 3 (resp. item 4) of Lemma 29, (inverted-) left-wing the shape description in item 5 (resp. item 6) of Lemma 29, (inverted-) hat the shape descriptions in item 7 (resp. item 8) of Lemma 29, and (inverted-) heart the shape descriptions in item 9 (resp. item 10) of Lemma 29. The next lemma describes the combinations of shape descriptions that can appear in the feasible set of a non-extreme boring component and which shape descriptions are \u201cbetter\u201d than others.\nI Lemma 30. For every i = 1, . . . , h, the following statements hold true:\nS1 If F\u03bdi contains the sausage or the inverted-sausage, then |F\u03bdi | = 1, i.e., F\u03bdi contains no other shape description.\nS2 If F\u03bdi contains the right-wing (the left-wing), then it contains the left-wing (resp. the right-wing), it might contain the heart, and it does not contain any other shape description.\nS3 If F\u03bdi contains the inverted-right-wing (the inverted-left-wing), then it contains the inverted-left-wing (the inverted-right-wing), it might contain the inverted-heart, and it does not contain any other shape description.\nS4 If F\u03bdi contains the hat (the inverted-hat), then it contains the inverted-hat (resp. the hat), it might contain the heart, it might contain the inverted-heart, and it does not contain any other shape description.\nS5 Suppose that G\u00b5 admits a uv-external upward planar embedding E\u00b5 with shape description s, in which the shape description of the uivi-external upward planar embedding E\u03bdi of G\u03bdi is the heart. Suppose also that G\u03bdi admits a uivi-external upward planar embedding E \u2032\u03bdi whose shape description is the right-wing, the left-wing, the hat, or the inverted-hat. Then replacing E\u03bdi with E \u2032\u03bdi in E\u00b5 results in a uv-external upward planar embedding E \u2032 \u00b5 of"
        },
        {
            "heading": "G\u00b5 with shape description s.",
            "text": "S6 Suppose that G\u00b5 admits a uv-external upward planar embedding E\u00b5 with shape description\ns, in which the shape description of the uivi-external upward planar embedding E\u03bdi of G\u03bdi is the inverted-heart. Suppose also that G\u03bdi admits a uivi-external upward planar embedding E \u2032\u03bdi whose shape description is the inverted-right-wing, the inverted-left-wing, the hat, or the inverted-hat. Then replacing E\u03bdi with E \u2032\u03bdi in E\u00b5 results in a uv-external upward planar embedding E \u2032\u00b5 of G\u00b5 with shape description s.\nProof. We prove statement S1. Suppose that F\u03bdi contains the sausage; the case in which F\u03bdi contains the inverted-sausage is analogous. Let E\u03bdi be a uivi-external upward planar embedding of G\u03bdi whose shape description is the sausage. Since both the edges incident to vi and to the outer face of E\u03bdi are incoming vi (as the seventh and eighth values in the sausage are both in) and since the angle at vi incident to the outer face of E\u03bdi is large (as the fourth value in the sausage is 1), it follows that vi contains no outgoing edge. In all other shape descriptions of a boring component, the seventh and eighth values contain at least one out (see items 2\u201310 in Lemma 29), hence they require at least one outgoing edge for vi. Hence, the sausage is the only shape description in the feasible set of \u00b5.\nWe prove statement S2. Suppose that F\u03bdi contains the right-wing; the case in which F\u03bdi contains the left-wing is analogous. Let E\u03bdi be a uivi-external upward planar embedding of G\u03bdi whose shape description is the right-wing. Then a uivi-external upward planar embedding of G\u03bdi whose shape description is the left-wing can be simply obtained by flipping E\u03bdi . By statement S1, we have that F\u03bdi does not contain the (possibly inverted-) sausage. Further, vi contains both incoming and outgoing edges (as the seventh and eighth values in the right-wing are one in and one out). On the other hand, each shape description among the inverted-right-wing, the inverted-left-wing, the hat, the inverted-hat, and the inverted-heart requires vi to only have outgoing edges (as, in each of such shape descriptions, the seventh and eighth values are both out and the fourth value is 1, see items 4, 6, 7, 8, and 10 in Lemma 29). Hence, F\u03bdi does not contain any of these shape descriptions.\nThe proof of statement S3 is analogous to the one of statement S2. We prove statement S4. Suppose that F\u03bdi contains the hat; the case in which F\u03bdi contains the inverted-hat is analogous. Let E\u03bdi be a uivi-external upward planar embedding of G\u03bdi whose shape description is the hat. Then a uivi-external upward planar embedding of G\u03bdi whose shape description is the inverted-hat can be simply obtained by flipping E\u03bdi . By statements S1\u2013S3, we have that F\u03bdi contains neither the (possibly inverted-) sausage, nor the (possibly inverted-) right-wing, nor the (possibly inverted-) left-wing.\nWe finally prove statement S5; the proof of statement S6 is analogous. Suppose that the shape description of E\u03bdi is the heart and that the one of E \u2032\u03bdi is the right-wing; the other cases are analogous. Let f (g) be the face of E\u00b5 that is to the left (resp. to the right) of E\u03bdi when traversing the left (resp. right) outer path of E\u03bdi from ui to vi. Similarly, let f \u2032 (g\u2032) be the face of E \u2032\u00b5 that is to the left (resp. to the right) of E \u2032\u03bdi when traversing the left (resp. right) outer path of E \u2032\u03bdi from ui to vi.\nLet us specify how the replacement of E\u03bdi with E \u2032\u03bdi in E\u00b5 defines the angle assignment of E \u2032\u00b5; refer to Fig. 10. First, every face h\u2032 of E \u2032\u00b5 different from f \u2032 and g\u2032 is also a face of E\u00b5 or of E \u2032\u03bdi , hence the value in {\u22121, 0, 1} assigned to a vertex incident to h\n\u2032 in E \u2032\u00b5 coincides with the one in E\u00b5. Second, for each vertex w /\u2208 {ui, vi} incident to f \u2032 (resp. to g\u2032), the value in {\u22121, 0, 1} assigned to w in f \u2032 (resp. in g\u2032) coincides with the value assigned to w in the outer face of E \u2032\u03bdi . Third, the value in {\u22121, 0, 1} assigned to ui in f\n\u2032 (resp. in g\u2032) coincides with the one assigned to ui in f (resp. in g). Finally, the values assigned to vi in f \u2032 and in g\u2032 are 0 and \u22121, respectively.\nIn order to prove that E \u2032\u00b5 is a uv-external upward planar embedding of G\u00b5, we need to prove that Properties UP0\u2013UP3 of Theorem 1 are satisfied by E \u2032\u00b5.\nUP0 Consider the angle \u03b1 = \u3008e\u20321, w, e\u20322\u3009 at a vertex w in a face h\u2032 of E \u2032\u00b5. If h\u2032 /\u2208 {f \u2032, g\u2032} or if w /\u2208 {ui, vi}, then \u03b1 is also an angle of E\u00b5 or of E \u2032\u03bdi and, by construction, the value assigned to \u03b1 in E \u2032\u00b5 is the same as the one assigned to \u03b1 in E\u00b5 or of E \u2032\u03bdi . Hence, from the fact that E\u00b5 and E \u2032\u03bdi are upward planar embeddings, it follows that the value assigned to \u03b1 is in {\u22121, 1} if \u03b1 is a switch angle, and 0 if \u03b1 is a flat angle. If h\u2032 \u2208 {f \u2032, g\u2032}, say h\u2032 = f \u2032, and w = ui, then e\u20321 is the edge incident to ui in the left outer path of E \u2032\u03bdi and e \u2032 2 is the edge incident to ui and different from e\u20321 in the boundary\nof f \u2032. Let \u03b2 = \u3008e1, w, e2\u3009 be the angle at w in f , where e\u20321 is the edge incident to ui in the left outer path of E\u03bdi and e2 is the edge incident to ui and different from e1 in the boundary of f . Note that e\u20322 = e2. Further, since the shape descriptions of E\u03bdi and E \u2032\u03bdi both have the fifth value equal to out (see items 9 and 3 in Lemma 29, respectively), e1 and e\u20321 are both outgoing ui. Hence, \u03b1 is a switch angle or a flat angle if and only if \u03b2 is a switch angle or a flat angle, respectively. By construction, the value assigned to \u03b1 in E \u2032\u00b5 coincides with the value assigned to \u03b2 in E\u00b5. Since E\u00b5 is an upward planar embedding, the value assigned to \u03b1 is in {\u22121, 1} if \u03b1 is a switch angle, and 0 if \u03b1 is a flat angle. If h\u2032 = f \u2032 and w = vi, then e\u20321 is the edge incident to vi in the left outer path of E \u2032\u03bdi and e\u20322 is the edge incident to vi and different from e\u20321 in the boundary of f \u2032. Since the shape description of E \u2032\u03bdi has the seventh value equal to in (see item 3 in Lemma 29), the edge e\u20321 is incoming vi. Further, we have that e\u20322 is outgoing vi. Indeed, since the shape description of E\u03bdi has the fourth value equal to \u22121 (see item 9 in Lemma 29), all the edges that are incident to vi in G\u00b5 and that do not belong to G\u03bdi are outgoing vi. It follows that \u03b1 is a flat angle; by construction, \u03b1 is assigned the value 0.\nIf h\u2032 = f \u2032 and w = vi, then e\u20321 is the edge incident to vi in the right outer path of E \u2032\u03bdi and e\u20322 is the edge incident to vi and different from e\u20321 in the boundary of g\u2032. Since the shape description of E \u2032\u03bdi has the eighth value equal to out (see item 3 in Lemma 29), the edge e\u20321 is outgoing vi. Further, we have that e\u20322 is outgoing vi, as all the edges that are incident to vi in G\u00b5 and that do not belong to G\u03bdi are outgoing vi. It follows that \u03b1 is a small angle; by construction, \u03b1 is assigned the value \u22121.\nUP1 Consider a switch vertex w of G\u00b5 and let n1(w), n0(w), and n\u22121(w) be the number of angles labeled 1, 0, and \u22121 in E \u2032\u00b5, respectively. First, suppose that w /\u2208 {ui, vi} of G\u00b5 and suppose that w belongs to G\u03bdi (to G\u00b5 \\G\u03bdi). Then we have n1(w) = 1, n0(w) = 0, and n\u22121(w) = deg(w) \u2212 1, because the same equalities hold true in E \u2032\u03bdi (resp. in E\u00b5) and because the number of angles incident to w assigned with the value 1, 0, and \u22121 in E \u2032\u00b5 coincides with the number of angles incident to w assigned with the value 1, 0, and \u22121, respectively, in E \u2032\u03bdi (resp. in E\u00b5). Second, suppose that w = ui. Since the shape descriptions of E\u03bdi and E \u2032\u03bdi have the third value equal to 1 (see items 9 and 3 in Lemma 29, respectively), all the angles incident to ui in the internal faces of E\u03bdi and E \u2032\u03bdi are assigned the value \u22121. Furthermore, the angle incident to ui in f \u2032 (in g\u2032) concides with the angle incident to ui in f (resp. in g); finally, every face h\u2032 of E \u2032\u00b5 that is incident to ui and that is not incident to edges of E \u2032\u03bdi is also a face of E\u00b5, hence the value assigned to the angle at ui in h\u2032 coincides with the one in E\u00b5. Thus, we have n1(w) = 1, n0(w) = 0, and n\u22121(w) = deg(w)\u2212 1 in E \u2032\u00b5 as the same equalities hold true in E\u00b5. Finally, we have that w 6= vi. Indeed, the shape description of E \u2032\u03bdi has the seventh and eighth values equal to in and out, respectively (see item 3 in Lemma 29), hence vi has at least one outgoing and one incoming edge, thus it is not a switch vertex.\nUP2 Consider a non-switch vertex w of G\u00b5 and let n1(w), n0(w), and n\u22121(w) be the number of angles labeled 1, 0, and \u22121 in E \u2032\u00b5, respectively. If w 6= vi, then the proof that n1(w) = 0, n0(w) = 2, and n\u22121(w) = deg(w)\u22122 is analogous to the proof that n1(w) = 1, n0(w) = 0, and n\u22121(w) = deg(w) \u2212 1 in the case in which w is a switch vertex. We prove that n1(vi) = 0, n0(vi) = 2, and n\u22121(vi) = deg(vi)\u2212 2. First, by construction, the angle at vi in f \u2032 has value 0, while the one at vi in g\u2032 has value \u22121. Second, since vi is a non-switch vertex of E \u2032\u03bdi , there are two angles labeled 0 and incident to vi in E \u2032 \u03bdi ; one of them is the\nangle in the outer face of E \u2032\u03bdi (which is not a face of E \u2032 \u00b5) and the other one is an angle in an internal face of E \u2032\u03bdi (this is also an angle labeled 0 in E \u2032 \u00b5). Every other angle incident to vi in an internal face of E \u2032\u03bdi has label \u22121. Finally, since the shape description of E\u03bdi has the fourth value equal to \u22121 (see item 9 in Lemma 29), all the angles incident to vi inside a face of E\u00b5 that lies outside E\u03bdi and that is different from f \u2032 and g\u2032 have label \u22121. UP3 Consider any face h\u2032 of E \u2032\u00b5. Denote by n1(h\u2032) and n\u22121(h\u2032) the number of angles of h\u2032 labeled 1 and \u22121, respectively. If h\u2032 /\u2208 {f \u2032, g\u2032}, then h\u2032 is also a face of E\u00b5 or of E \u2032\u03bdi ; further, by construction, the value assigned to each angle of h\u2032 in E \u2032\u00b5 is the same as the one assigned to it in E\u00b5 or in E \u2032\u03bdi . Hence, we have n1(h\n\u2032) = n\u22121(h\u2032)\u2212 2 if h\u2032 is an internal face of E \u2032\u00b5 or n1(h\u2032) = n\u22121(h\u2032) + 2 if h\u2032 is the outer face of E \u2032\u00b5, because the same is true in E\u00b5 or in E \u2032\u03bdi . We now prove that n1(f \u2032) = n\u22121(f \u2032)\u22122 if f \u2032 is an internal face of E \u2032\u00b5 or n1(f \u2032) = n\u22121(f \u2032)+2 if f \u2032 is the outer face of E \u2032\u00b5; the proof that n1(g\u2032) = n\u22121(g\u2032) \u2212 2 if g\u2032 is an internal face of E \u2032\u00b5 or n1(g\u2032) = n\u22121(g\u2032) + 2 if g\u2032 is the outer face of E \u2032\u00b5 is analogous. Let (ui = w1, w2, . . . , wx = vi) and (ui = w\u20321, w\u20322, . . . , w\u2032x\u2032 = vi) be the left outer paths of E\u03bdi and E \u2032\u03bdi , respectively. Further, let z1, . . . , zy be the vertices of G\u00b5 incident to f (and to f\n\u2032) and not in G\u03bdi . For i = 1, . . . , x, let \u03b1(wi) be angle incident to wi inside f . Furthermore,\nfor i = 1, . . . , x\u2032, let \u03b2(w\u2032i) be angle incident to w\u2032i inside f \u2032. Similarly, for i = 1, . . . , y, let \u03b1(zi) the angle incident to zi inside f and f \u2032. Denote by \u03bb the angle assignment of E\u00b5. Since E\u00b5 is an upward planar embedding, we have \u2211x\u22121 i=2 \u03bb(\u03b1(wi))+ \u2211y i=1 \u03bb(\u03b1(zi))+\u03bb(\u03b1(ui))+\u03bb(\u03b1(vi)) = \u22122 if f is an internal face of\nE\u00b5, or \u2211x\u22121 i=2 \u03bb(\u03b1(wi)) + \u2211y i=1 \u03bb(\u03b1(zi)) + \u03bb(\u03b1(ui)) + \u03bb(\u03b1(vi)) = 2 if f is the outer face of\nE\u00b5. The sum \u2211x\u22121 i=2 \u03bb(\u03b1(wi)) is the left-turn-number of E\u03bdi , hence it is equal to 1 (see the first value in the shape description at item 9 of Lemma 29). Further, the value \u03bb(\u03b1(vi)) is equal to \u22121, given that the shape description of E\u03bdi has the third value equal to \u22121 (see again item 9 of Lemma 29). It follows that \u2211y i=1 \u03bb(\u03b1(zi)) + \u03bb(\u03b1(ui)) = \u22122 if f is an\ninternal face of E\u00b5 or \u2211y i=1 \u03bb(\u03b1(zi)) + \u03bb(\u03b1(ui)) = 2 if f is the outer face of E\u00b5.\nDenote by \u03bb\u2032 the angle assignment of E \u2032\u00b5. We need to prove that \u2211x\u2032\u22121 i=2 \u03bb\n\u2032(\u03b2(w\u2032i)) +\u2211y i=1 \u03bb\n\u2032(\u03b1(zi)) + \u03bb\u2032(\u03b2(ui)) + \u03bb\u2032(\u03b2(vi)) = \u22122 if f \u2032 is an internal face of E \u2032\u00b5, or\u2211x\u2032\u22121 i=2 \u03bb(\u03b2(w\u2032i)) + \u2211y i=1 \u03bb\n\u2032(\u03b1(zi)) + \u03bb\u2032(\u03b2(ui)) + \u03bb\u2032(\u03b2(vi)) = 2 if f \u2032 is the outer face of E \u2032\u00b5. First, note that f is the outer face of E\u00b5 if and only if f \u2032 is the outer face of E \u2032\u00b5. Second, by construction we have \u03bb\u2032(\u03b2(ui)) = \u03bb(\u03b1(ui)), we have \u03bb\u2032(\u03b2(vi)) = 0, and, for i = 1, . . . , y, we have \u03bb\u2032(\u03b1(zi)) = \u03bb(\u03b1(zi)). Third, the sum \u2211x\u2032\u22121 i=2 \u03bb\n\u2032(\u03b2(w\u2032i)) is the left-turn-number of E \u2032\u03bdi , hence it is equal to 0 (see the first value in the shape description at item 3 of Lemma 29). It follows that the sum \u2211x\u2032\u22121 i=2 \u03bb \u2032(\u03b2(w\u2032i)) + \u2211y i=1 \u03bb\n\u2032(\u03b1(zi)) + \u03bb\u2032(\u03b2(ui)) + \u03bb\u2032(\u03b2(vi)) is equal to \u2211y i=1 \u03bb(\u03b1(zi)) + \u03bb(\u03b1(ui)), hence it is equal to \u22122 if f \u2032 is an internal face of E \u2032\u00b5 or to 2 if f \u2032 is the outer face of E \u2032\u00b5, as required.\nThis concludes the proof that E \u2032\u00b5 is a uv-external upward planar embedding of G\u00b5. It remains to prove that the shape description of E \u2032\u00b5 is s. Since G\u03bdi is a non-extreme component, the replacement of E\u03bdi with E \u2032\u03bdi does not alter the last six values of the shape description of the uv-external upward planar embedding of G\u00b5. We prove that the left-turnnumber of E \u2032\u00b5 is equal to the one of E\u00b5; the proof that the right-turn-number of E \u2032\u00b5 is equal to the one of E\u00b5. First, if the virtual edge ei of the skeleton of \u00b5 corresponding to G\u03bdi does not belong to the left outer path of the planar embedding of the skeleton of \u00b5 in E\u00b5, the replacement of E\u03bdi with E \u2032\u03bdi does not alter the left-turn-number of the uv-external upward planar embedding of G\u00b5. Otherwise, the contribution of E\u03bdi to the left-turn-number of E\u00b5 is given by the label of ui in the outer face of E\u00b5, plus the left-turn-number of E\u03bdi , plus the label of vi in the outer face of E\u00b5. Similarly, the contribution of E \u2032\u03bdi to the left-turn-number of E \u2032\u00b5 is given by the label of ui in the outer face of E \u2032\u00b5, plus the left-turn-number of E \u2032\u03bdi , plus the label of vi in the outer face of E \u2032\u00b5. The label of ui in the outer face of E\u00b5 coincides with the label of ui in the outer face of E \u2032\u00b5. Further, the left-turn-number of E\u03bdi is 1, while the left-turn-number of E \u2032\u03bdi is 0. Finally, the label of vi in the outer face of E\u00b5 is \u22121, while the label of vi in the outer face of E \u2032\u00b5 is 0. Hence, the contribution of E\u03bdi to the left-turn-number of E\u00b5 is equal to the contribution of E \u2032\u03bdi to the left-turn-number of E \u2032 \u00b5. It follows that the left-turn-number of E\u00b5 is equal to the one of E \u2032\u00b5, hence the shape description of E \u2032\u00b5 is s. J\nBased on Lemma 30, we can associate to each boring component \u03bdi a preferred set P\u03bdi , which is a subset of its feasible set F\u03bdi defined as follows.\nIf F\u03bdi contains the sausage or the inverted-sausage, then P\u03bdi coincides with F\u03bdi ; see statement S1 of Lemma 30. If F\u03bdi contains the left-wing, then P\u03bdi contains the left-wing and the right-wing; see statement S2 of Lemma 30. If F\u03bdi contains the inverted-left-wing, then P\u03bdi contains the inverted-left-wing and the inverted-right-wing; see statement S3 of Lemma 30.\nIf F\u03bdi contains the hat, then P\u03bdi contains the hat and the inverted-hat; see statement S4 of Lemma 30. If F\u03bdi does not satisfy any of the previous conditions, then, by statements S1\u2013S4 of Lemma 30, it contains only the heart, or the inverted-heart, or both. Then we let P\u03bdi coincide with F\u03bdi .\nBy Lemma 30, if there exists a uv-external upward planar embedding of G\u00b5 with some shape desription s, then there exists a uv-external upward planar embedding of G\u00b5 with some shape description s in which each boring component G\u03bdi has a shape description in its preferred set."
        },
        {
            "heading": "6.2.2 The Algorithm",
            "text": "We now present an algorithm to construct the feasible set F\u00b5 of \u00b5.\nConsider a shape description s = \u3008\u03c4l, \u03c4r, \u03bbu, \u03bbv, \u03c1ul , \u03c1ur , \u03c1vl , \u03c1vr\u3009, where \u03c4l \u2208 [\u22122\u03c3\u00b5\u22121, 2\u03c3\u00b5+ 1], \u03c4r \u2208 [\u2212\u03c4l,\u2212\u03c4l + 4], \u03bbu \u2208 {\u22121, 0, 1}, \u03bbv \u2208 {\u22121, 0, 1}, \u03c1ul \u2208 {in, out}, \u03c1ur \u2208 {in, out}, \u03c1vl \u2208 {in, out}, and \u03c1vr \u2208 {in, out}; we show how to test whether s \u2208 F\u00b5."
        },
        {
            "heading": "6.2.2.1 Checks",
            "text": "In order to test whether s \u2208 F\u00b5, we start by performing some preliminary checks, which might let us conclude that s /\u2208 F\u00b5.\nWe start with a coherence check. Recall that only four out of the eight values in s are independent. Thus, we check:\nwhether \u03c1ul and \u03c1ur have the same value if \u03bbu \u2208 {\u22121, 1}; whether \u03c1ul and \u03c1ur have different values if \u03bbu = 0; whether \u03c1vl and \u03c1vr have the same value if \u03bbv \u2208 {\u22121, 1}; whether \u03c1vl and \u03c1vr have different values if \u03bbv = 0; whether \u03c1ul and \u03c1vl have the same value if \u03c4l is odd; whether \u03c1ul and \u03c1vl have different values if \u03c4l is even; and whether \u03c4l + \u03c4r + \u03bbu + \u03bbv = 2 (see Corollary 8).\nIf any of these checks fails, we conclude that F\u00b5 does not contain s, otherwise we proceed. Second, for each extreme or interesting component G\u03bdi of G\u00b5, we select a shape description si \u2208 F\u03bdi . Clearly, the number ` of ways this selection can be done is the product of the cardinalities of the sets F\u03bdi of the extreme and interesting components of G\u00b5; that is, ` = \u220fh i=1 |F\u03bdi | (recall that G\u03bd1 , G\u03bd2 , . . . , G\u03bdh are the components of G\u00b5 that are extreme or interesting). We will argue later that ` can be bounded by a simply-exponential function of \u03c3 (and, in particular, is independent of the number of vertices of G\u00b5). For now, assume that shape descriptions s1 \u2208 F\u03bd1 , . . . , sh \u2208 F\u03bdh have been fixed. We also fix S\u00b5 to be a planar embedding of the skeleton sk(\u00b5) of \u00b5 in which u and v are incident to the outer face. Since \u00b5 is an R-node, there are two such planar embeddings, which are one the flip of the other one. The goal now becomes the one of testing whether G\u00b5 admits a uv-external upward planar embedding E\u00b5 such that:\nP1 the shape description of E\u00b5 is s; P2 for i = 1, . . . , h, the uivi-external upward planar embedding E\u03bdi of G\u03bdi in E\u00b5 has shape\ndescription si; and P3 the planar embedding of sk(\u00b5) induced by E\u00b5 is S\u00b5.\nThen we have that s belongs to F\u00b5 if and only if this test is successful for at least one selection of the shape descriptions s1, . . . , sh and of the planar embedding S\u00b5.\nWe start by performing an extreme-edge check. The rationale here is that, since the shape descriptions of the extreme components of G\u00b5 have been already selected, the direction of the edges incident to the outer face of any uv-external upward planar embedding E\u00b5 of G\u00b5 satisfying Property P2 is already determined. These directions have to be coherent with the last four values in s in order to satisfy Property P1. Let ei be the virtual edge of sk(\u00b5) that is incident to u and that belongs to the left outer path of S\u00b5; assume, w.l.o.g., that ui = u. Then we check whether the fifth value of si coincides with the fifth value of s. Three more checks are performed for the other edges incident to u and v and incident to the outer face of E\u00b5. If any of these checks fails, then there is no uv-external upward planar embedding of G\u00b5 satisfying Properties P1\u2013P3. Otherwise, we proceed (while being sure that, if a uv-external upward planar embedding E\u00b5 of G\u00b5 is found satisfying Property P2, then the last four values of the shape description of E\u00b5 are those specified in s).\nWe next perform an angle check. This verifies whether the shape descriptions s1, . . . , sh of the extreme or interesting components and the feasible sets F\u03bdh+1 , . . . ,F\u03bdk of the non-extreme boring components allow for an angle assignment that satisfies Properties UP0-UP2 of Theorem 1. Consider each vertex w of sk(\u00b5).\nWe first deal with the case in which w is a switch vertex of G\u00b5. Let lw be a counter, initially set to 0. The counter lw is going to represent, in any uv-external upward planar embedding E\u00b5 of G\u00b5 satisfying Property P2, the number of angles incident to w that are required to be large inside some component G\u03bdi of G\u00b5.\nFor each extreme or interesting component G\u03bdi such that w = ui (or w = vi) and such that the third (resp. the fourth) value of si is \u22121, increase lw by 1. Namely, if the third (resp. the fourth) value of si is equal to \u22121, there is a large angle at w in an internal face of every uivi-external upward planar embedding of G\u03bdi whose shape description is si. For each non-extreme boring component G\u03bdi such that w = vi (or w = ui), if F\u03bdi contains only the heart (resp. the inverted-heart), then increase lw by 1. Namely, if F\u03bdi contains only the heart (resp. the inverted-heart), there is a large angle at w in an internal face of every uivi-external upward planar embedding of G\u03bdi whose shape description is the heart (resp. the inverted-heart).\nWe now check whether lw \u2264 1. If the check fails, we conclude that there is no uv-external upward planar embedding of G\u00b5 satisfying Properties P1\u2013P3. Indeed, in order to satisfy Property P2, there should be at least two large angles incident to w, which is not possible by Property UP1. If lw = 1, then we label w as unavailable (meaning that w is already incident to a large angle inside some component of G\u00b5, hence it cannot be incident to another large angle), whereas if lw = 0, then we label w as available (meaning that w still has to be assigned a large angle).\nWe next deal with the case in which w is a non-switch vertex of G\u00b5. Recall that G is expanded, hence G\u00b5 contains a unique edge incoming w or a unique edge outgoing w. Let G\u03bdi be the component of G\u00b5 containing such an edge. Then we check whether the angles at w in the internal faces of every other component are all small. Thus, for each component G\u03bdj of G\u00b5 with j 6= i such that w = uj (or w = vj), we check whether the third value of sj (resp. the fourth value of sj) is equal to 1. If any of these checks fails, we conclude that there is no uv-external upward planar embedding of G\u00b5 satisfying Properties P1\u2013P3.\nThere is a final angle check that needs to be performed on the poles of \u00b5. Namely, if \u03bbu = 1 (\u03bbv = 1) and either u (resp. v) is not a switch vertex or it is an unavailable\nswitch vertex, then we conclude that there is no uv-external upward planar embedding of G\u00b5 satisfying Properties P1\u2013P3."
        },
        {
            "heading": "6.2.2.2 Flow network",
            "text": "We are now going to borrow ideas from the algorithm presented by Bertolazzi et al. in [3] for testing the upward planarity of a plane digraph. As described in Section 2.1, Bertolazzi et al. reduce the problem of testing whether a digraph with a fixed planar embedding E admits an upward planar embedding to the one of testing whether the vertex-face incidence network N of E (in which the capacities of the arcs of N and the supplies and demands of the nodes of N are suitably set) admits a flow with a certain value. The skeleton sk(\u00b5) of our R-node \u00b5 indeed has a fixed planar embedding S\u00b5. However, the edges of sk(\u00b5) are not actual edges, but rather virtual edges that correspond to components of G\u00b5. This is not really problematic for the extreme or interesting components, as we already fixed their shape description. In fact, as the shape description of a component G\u03bdi contains all the relevant information that describes how G\u03bdi interacts with the rest of G\u00b5, we do not even need to represent G\u03bdi in the flow network, but rather we just need to take into account the constant amount of information in its shape description. Handling non-extreme boring components is more challenging. According to Lemma 29, each boring component has O(1) shape descriptions in its feasible set, however the number of such components is not, in general, bounded by a function of \u03c3 only, hence we cannot try all possible combinations for their shape descriptions, as we are doing for the interesting components. Lemma 30 comes here to the rescue in order to restrict the possible shape descriptions of each boring component to at most two, namely those in its preferred set; the choice between these two shape descriptions can be plugged into the flow network.\nWe now define a bipartite network N (S, T,A), where S is a set of sources, T is a set of sinks, and A is a set of arcs from the sources to the sinks such that G\u00b5 admits a uv-external upward planar embedding satisfying Properties P1\u2013P3 if and only if N admits a flow of a certain size. Intuitively, and following the approach in [3], each unit of flow going from a source s to a sink t represents the choice that a vertex of G\u00b5 (represented by s) has a large angle in a face (represented by t) of the planar embedding of G\u00b5 we construct. The number of such large angles has to be equal to nt2 \u2212 1, where nt is the number of switch angles in t.\nThe network N is formally defined as follows. We start by defining the set S of sources.\nSwitch vertices. For each available switch vertex w of G\u00b5 that is a vertex of sk(\u00b5), there is a source sw in S which can supply a single unit of flow; see Figure 11a.\nNon-switch vertices. For each non-switch vertex w of G\u00b5 that is a vertex of sk(\u00b5), there is a source sw in S which can supply a single unit of flow if and only if the following three conditions are satisfied (see Figure 11b):\n1. The special component for w is a non-extreme boring component G\u03bdi of G\u00b5. 2. Either w = vi and the preferred set P\u03bdi of \u03bdi consists of the left-wing and the right-wing,\nor w = ui and P\u03bdi consists of the inverted-left-wing and the inverted-right-wing. 3. The special edge for w is outgoing w.\nExtreme or interesting components. Consider each extreme or interesting component G\u03bdi . If the shape description si has the first value (i.e., the left-turn-number) \u03c4 il greater than 0, then there is a source zil in S which can supply \u03c4 il units of flow. Further, if si has the second value (i.e., the right-turn-number) \u03c4 ir greater than 0, then there is a source zir in S which can supply \u03c4 ir units of flow; see Figures 11c and 11d. Non-extreme boring hats. For each non-extreme boring component G\u03bdi whose preferred set P\u03bdi consists of the hat and of the inverted-hat, there is a source bi which can supply a single unit of flow; see Figure 11e.\nNon-extreme boring hearts. For each non-extreme boring component G\u03bdi whose preferred set P\u03bdi consists of the heart, or of the inverted-heart, or of both, there are two sources bi1 and bi2, each of which can supply a single unit of flow; see Figure 11f.\nThe set T contains the following sinks. For a virtual edge ei of sk(\u00b5), denote by fl(ei) and fr(ei) the faces of S\u00b5 which are respectively to the left and to the right of ei when traversing such an edge from ui to vi.\nInternal faces. For each internal face f of S\u00b5, there is a sink tf in T that demands a number df of units of flow equal to nf2 \u2212 1, where nf is equal to the sum of the following numbers (roughly speaking, nf represents the number of switch angles incident to f which are not yet \u201cpaired\u201d with large angles incident to f ; what follows allows us to count the number of such switch angles although a planar embedding of G\u00b5 is not specified):\nFor each virtual edge ei incident to f such that G\u03bdi is an extreme or interesting component and such that f = fl(ei) (f = fr(ei)), the absolute value of \u03c4 il (resp. of \u03c4 ir). The number of virtual edges ei incident to f such that G\u03bdi is a non-extreme boring component whose preferred set consists of the hat and of the inverted-hat, or contains the heart and/or the inverted-heart. The number of switch vertices of sk(\u00b5) incident to f .\nThe number of non-switch vertices w of sk(\u00b5) incident to f that satisfy one of the following three conditions. Let ei and ej be the virtual edges incident to w and f . Assume, w.l.o.g. up to relabeling of ei with ej , that G\u03bdj is not the special component for w. Further, assume that w = ui; the case w = vi is analogous. Finally, assume that f = fl(ei); the case f = fr(ei) is analogous. The conditions are as follows. 1. G\u03bdi is not the special component for w (see Figure 12a); or 2. G\u03bdi is the special component for w, it is an extreme or interesting component, and\nthe fifth value of si is in if and only if the special edge for w is outgoing w (see Figures 12b and 12c); note that fifth value of si determines the direction of the edge of G\u03bdi that is incident to ui and to f in any uivi-external upward planar embedding of G\u03bdi whose shape description is si; or 3. G\u03bdi is the special component for w, it is a non-extreme boring component, and either (a) the preferred set P\u03bdi of G\u03bdi consists of the inverted-heart (see Figure 12d), or (b) P\u03bdi consists of the inverted-right-wing and the special edge is outgoing w (see Figure 12e).\nLeft- and right-turn-number. There are two sinks tl and tr which demand \u03c4l+nlf 2 and \u03c4r+nrf\n2 units of flow, respectively, where \u03c4l and \u03c4r are the left- and right-turn-numbers of the shape description s whose membership in F\u00b5 we are establishing, and where nlf (nrf ) is defined as nf in the previous item, however the face f is the outer face, and the virtual edges and the vertices to be considered in the count for nlf (resp. nrf ) are only those in the left (resp. right) outer path of S\u00b5 and different from u and v. Heart or inverted-heart. For each non-extreme boring component G\u03bdi whose preferred set consists of the heart and of the inverted-heart, there is a sink ti which demands a single unit of flow; see Figure 12c. Note that either an angle at ui or an angle at vi inside the upward planar embedding of G\u03bdi has to be large. Angle at u. If \u03bbu = 1, there is a sink tu which demands a single unit of flow. Angle at v. If \u03bbv = 1, there is a sink tv which demands a single unit of flow.\nFinally, the set A contains the following arcs.\nSwitch vertices to faces. For each available switch vertex w /\u2208 {u, v} in sk(\u00b5), there is an arc with capacity 1 from the corresponding source sw \u2208 S to each sink tf corresponding to a face f of S\u00b5 incident to w (among these sinks there is tl or tr, if w belongs to the left or to the right outer path of S\u00b5, respectively). Non-switch vertices to faces. For each non-switch vertex w of G\u00b5 that corresponds to a source sw in S, let ei be the virtual edge of sk(\u00b5) corresponding to the special component for w. Then there is an arc with capacity 1 from sw to each of the two sinks corresponding to the two faces fl(ei) and fr(ei) of S\u00b5 incident to ei (one of these sinks is tl or tr if ei belongs to the left or to the right outer path of S\u00b5, respectively). Extreme or interesting components to faces on the left. For each extreme or interesting component G\u03bdi such that the first value \u03c4 il of si is greater than 0, there is an arc with capacity \u03c4 il from zil to the sink tf corresponding to the face f = fl(ei) of S\u00b5; note that tf = tl or tf = tr if ei belongs to the left or to the right outer path of S\u00b5, respectively, and f is the outer face of S\u00b5. Extreme or interesting components to faces on the right. For each extreme or interesting component G\u03bdi such that the second value \u03c4 ir of si is greater than 0, there is an arc with capacity \u03c4 ir from zir to the sink tf corresponding to the face f = fr(ei) of S\u00b5; note that tf = tl or tf = tr if ei belongs to the left or to the right outer path of S\u00b5, respectively, and f is the outer face of S\u00b5.\nNon-extreme boring hats to faces. For each non-extreme boring component G\u03bdi whose preferred set P\u03bdi consists of the hat and of the inverted-hat, there is an arc with capacity 1 from bi to each of the two sinks corresponding to the faces fl(ei) and fr(ei) of S\u00b5 incident to ei (one of these sinks is tl or tr if ei belongs to the left or to the right outer path of S\u00b5, respectively). Non-extreme boring hearts to faces. For each non-extreme boring component G\u03bdi whose preferred set P\u03bdi consists of the heart, or of the inverted-heart, or of both, there is an arc with capacity 1 from bi1 to the sink corresponding to the face fl(ei) of S\u00b5 and there is an arc with capacity 1 from bi2 to the sink corresponding to the face fr(ei) of S\u00b5 (one of these sinks is tl or tr if ei belongs to the left or right outer path of S\u00b5, respectively). Switch vertices to non-extreme boring hearts and inverted-hearts. For each non-extreme boring component G\u03bdi whose preferred set contains the heart and the inverted-heart, there is an arc with capacity 1 from each pole of G\u03bdi that is an available switch vertex to the sink ti. First pole. If \u03bbu = 1, then there is an arc with capacity 1 from the source su to the sink tu. If u is a switch vertex and \u03bbu \u2208 {\u22121, 0}, there is an arc with capacity 1 from su to each sink tf corresponding to an internal face f of S\u00b5 incident to u. Second pole. If \u03bbv = 1, then there is an arc with capacity 1 from the source sv to the sink tv. If v is a switch vertex and \u03bbv \u2208 {\u22121, 0}, there is an arc with capacity 1 from sv to each sink tf corresponding to an internal face f of S\u00b5 incident to v.\nThis concludes the construction of the network N . Note that N has O(k) nodes and arcs,\nas sk(\u00b5) has O(k) vertices and virtual edges. We define F as the total number of units of flow that are demanded by the sinks in T . We test whether every sink has a non-negative demand and whether N admits a flow with value F . The latter can be done in O(k log3 k) time by means of an algorithm by Borradaile et al. [6]. We conclude that G\u00b5 admits a uv-external upward planar embedding satisfying Properties P1\u2013P3 if and only if the tests are successful.\nFigure 13 for an example of the described algorithm to construct N . In this example, the demand of each sink x is the following.\nFor the sink corresponding to the internal face x incident to u, a, and b, the demand is 1, as nx = 4: One unit comes from the switch vertex a, one from the non-switch vertex u, one from the boring component corresponding to the virtual edge (u, b), and one from the interesting component corresponding to the virtual edge (b, a). For the sink corresponding to the internal face x incident to u, b, and c, the demand is 1, as nx = 4: Three units come from the non-switch vertices u, b, and c, and one from the boring component corresponding to the virtual edge (u, b). For the sink corresponding to the internal face x incident to a, b, e, and f , the demand is 1, as nx = 4: Two units come from the switch vertices a and f , one from the non-switch vertex b, and one from the interesting component corresponding to the virtual edge (a, f). For the sink corresponding to the internal face x incident to b, c, d, and e, the demand is 1, as nx = 4: One unit comes from the switch vertex d, two from the non-switch vertices b and c, and one from the boring component corresponding to the virtual edge (d, e). For the sink corresponding to the internal face x incident to d, e, and g, the demand is 2, as nx = 6: Two units come from the switch vertices d and g, one from the non-switch vertex e, and three from the boring components corresponding to the virtual edges (d, e), (d, g), and (e, g). For the sink corresponding to the internal face x incident to e, f , g, and v, the demand is 2, as nx = 6: Three units come from the switch vertices f , g, and v, one from the non-switch vertex e, one from the boring component corresponding to the virtual edge (e, g), and one from the interesting component corresponding to the virtual edge (f, v). For the sink tl, the demand is 4, as \u03c4l is 1 and nlx = 7, where x is the outer face: Two units come from the switch vertices a and f , three units from the interesting component corresponding to the virtual edge (u, a), two units from the interesting components corresponding to the virtual edges (a, f) and (f, v). For the sink tr, the demand is 2, as \u03c4r is 0 and nrx = 4, where x is the outer face: Two units come from the switch vertices d and g, one from the non-switch vertex c, and one from the boring component corresponding to the virtual edge (d, g). For the sink corresponding to the boring component whose preferred set consists of the heart and the inverted-heart, the demand is 1. For the sink tv, the demand is 1, as \u03bbv = 1."
        },
        {
            "heading": "6.2.2.3 Correctness and Running Time",
            "text": "In Lemma 32 below, we argue about the correctness and the running time of our algorithm. For the latter, we need the following auxiliary lemma.\nI Lemma 31. We have ` \u2208 O(1.45\u03c3).\nProof. For i = 1, . . . , h, let \u03c3i be the number of sources of G\u03bdi different from ui and vi and note that \u2211h i=1 \u03c3i =: \u03c3 \u2264 \u03c3. By Lemma 28, the size of F\u03bdi is at most 72\u03c3i + 54. Hence, we\nhave that ` \u2264 \u220fh i=1(72\u03c3i + 54).\nRecall that each component amongG\u03bd1 , . . . , G\u03bdh is extreme or interesting, and that at most four components are extreme; each extreme component is either boring or interesting. Let 0 \u2264 m \u2264 4 be the number of boring components among G\u03bd1 , . . . , G\u03bdh and assume, w.l.o.g., that such components come first in the order G\u03bd1 , . . . , G\u03bdh . Hence, we have \u03c3i = 0 for i = 1, . . . ,m, and \u03c3i > 0 for i = m + 1, . . . , h. Then we have ` \u2264 ( \u220fm i=1 54) \u00b7 (\u220fh i=m+1(72\u03c3i + 54) ) \u2264\n544 \u00b7 73 \u220fh i=m+1 \u03c3i. We prove that \u220fh i=m+1 \u03c3i \u2264 e\u03c3/e.\nFirst, we have \u220fh i=m+1 \u03c3i \u2264 (\u03c3/x)x, where x := h\u2212m; that is, \u220fh i=m+1 \u03c3i is maximum when all the values \u03c3i are equal. Indeed, if there is a value \u03c3i > \u03c3/x and a value \u03c3j < \u03c3/x, then \u03c3i \u00b7 \u03c3j < (\u03c3/x) \u00b7 (\u03c3i + \u03c3j \u2212 \u03c3/x), as can be proved by substituting \u03c3i = \u03c3/x+ y and \u03c3j = \u03c3/x\u2212 y\u2032. Hence, the values \u03c3i can be modified into \u03c3/x one by one without altering the sum \u2211h i=m+1 \u03c3i = \u03c3 and while increasing the product \u220fh i=m+1 \u03c3i.\nSecond, we have that f(x) := (\u03c3/x)x has its maximum when x = \u03c3/e, where e is the base of the natural logarithm. Indeed, we have \u2202f(x)\u2202x = (\u03c3/x)\nx(ln(\u03c3/x) \u2212 1), which is positive for x \u2208 (0, \u03c3/e), null for x = \u03c3/e, and negative for x \u2208 (\u03c3/e, \u03c3]. The value of f(x) at its maximum is hence e\u03c3/e < 1.45\u03c3. It follows that ` \u2264 544 \u00b7 73 \u220fh i=m+1 \u03c3i \u2208 O(1.45\u03c3). J\nWe are now ready to prove the following.\nI Lemma 32. Let \u00b5 be an R-node of T . The feasible set F\u00b5 of \u00b5 can be computed in O(\u03c31.45\u03c3 \u00b7 k log3 k)) time, where k is the number of children of \u00b5 in T and \u03c3 is the number of sources of G.\nProof. First, we argue about the running time of the algorithm we presented. The number of shape descriptions that are checked for membership in F\u00b5 is in O(\u03c3), by Lemma 28; this determines the multiplicative factor of \u03c3 in the running time. For each shape description s, we consider ` possible choices for the shape descriptions of the extreme and interesting components of G\u00b5 and two possible choices for the planar embedding of sk(\u00b5). By Lemma 31, we have ` \u2208 O(1.45\u03c3); this determines the multiplicative factor of 1.45\u03c3 in the running time. Finally, for each choice for the shape descriptions of the extreme and interesting components of G\u00b5 and for each choice for the planar embedding of sk(\u00b5), we construct in O(k) time the planar bipartite network N and determine in O(k log3 k) time its maximum flow, by means of the algorithm by Borradaile et al. [6].\nWe now prove the correctness of the algorithm we presented for computing F\u00b5. Namely, we prove that, for any shape description s, the graph G\u00b5 admits a uv-external upward planar embedding E\u00b5 if and only if our algorithm determines that s \u2208 F\u00b5.\n(=\u21d2) Suppose first that G\u00b5 admits a uv-external upward planar embedding E\u00b5 with shape description s. We prove that our algorithm determines that s \u2208 F\u00b5. First, for each nonextreme boring component G\u03bdi of G\u00b5, we replace the uivi-external upward planar embedding of G\u03bdi contained in E\u00b5 with a uivi-external upward planar embedding of G\u03bdi whose shape description is one in the preferred set of G\u03bdi . By Lemma 30, this modification preserves the property that E\u00b5 is a uv-external upward planar embedding with shape description s.\nBy Lemma 27, the first value \u03c4l of s (i.e., the left-turn-number of E\u00b5) is an integer in the interval [\u22122\u03c3 \u2212 1, 2\u03c3 + 1]. By Lemma 9, the second value \u03c4r of s (i.e., the right-turn-number of E\u00b5) is a value in [\u2212\u03c4l,\u2212\u03c4l + 4]. Further, by definition, the third and fourth values \u03bbu and \u03bbv of s are in the set {\u22121, 0, 1} and the fifth, sixth, seventh, and eighth values \u03c1ul , \u03c1ur , \u03c1vl , and \u03c1vr of s are in the set {in, out}. It follows that our algorithm considers s as a possible shape description which is to be tested for membership in F\u00b5.\nAs discussed after the definition of shape description, we have that \u03c1ul and \u03c1ur have the same value if and only if \u03bbu \u2208 {\u22121, 1}, that \u03c1vl and \u03c1vr have the same value if and only\nif \u03bbv \u2208 {\u22121, 1}, that \u03c1ul and \u03c1vl have the same value if and only if \u03c4l is odd, and that \u03c4l + \u03c4r + \u03bbu + \u03bbv = 2. Hence, s does not fail the coherence check.\nLet S\u00b5 be the planar embedding of sk(\u00b5) in E\u00b5. Further, for each component G\u03bdi of G\u00b5, let E\u03bdi be the uivi-external upward planar embedding of G\u03bdi contained in E\u00b5, where ui and vi are the poles of \u03bdi, and let si be the shape description of E\u03bdi .\nRecall thatG\u03bd1 , . . . , G\u03bdh are the extreme or interesting components ofG\u00b5. For i = 1, . . . , h, since a uivi-external upward planar embedding of G\u03bdi with shape description si exists, we have that si \u2208 F\u03bdi . Hence, our algorithm tests whether G\u00b5 admits a uv-external upward planar embedding whose shape description is s, whose restriction to G\u03bdi is a uivi-external upward planar embedding with shape description si, for i = 1, . . . , h, and such that the corresponding planar embedding of sk(\u00b5) is S\u00b5. We now prove that, when considering the shape descriptions s1, . . . , sh for G\u03bd1 , . . . , G\u03bdh , respectively, and the planar embedding S\u00b5 for sk(\u00b5), our algorithm indeed concludes that s \u2208 F\u00b5.\nThe extreme-edge check does not fail, as the shape description si of each extreme component G\u03bdi of G\u00b5 is the one of a uivi-external upward planar embedding contained in a uv-external upward planar embedding of G\u00b5 with shape description s.\nThe angle check does not fail either. Indeed, consider any vertex w of sk(\u00b5). Suppose first that w is a switch vertex of G\u00b5. Since E\u00b5 is an upward planar embedding, by Property UP1 of Theorem 1, there is one angle incident to w in E\u00b5 which is labeled 1. Hence, at most one component G\u03bdi of G\u00b5 is such that the angle at w in one of the internal faces of E\u03bdi is large; hence, the counter lw is at most 1. Suppose next that w is a non-switch vertex of G\u00b5. Since E\u00b5 is an upward planar embedding, by Property UP2 of Theorem 1, no angle incident to w in E\u00b5 is labeled 1. Hence, for every non-special component G\u03bdi of G\u00b5, the angle at w in every internal face of E\u03bdi is small, hence the angle check does not fail.\nThe final check at u and v also does not fail. Namely, if \u03bbu = 1 (\u03bbv = 1), then by Properties UP1 and UP2 of Theorem 1, we have that u (resp. v) is a switch vertex; further, since the angle incident to u (resp. to v) in the outer face of E\u00b5 is large, it follows that every angle at u (resp. at v) inside every internal face of E\u00b5, and consequently inside every internal face of E\u03bdi , is small, hence u (resp. v) is available.\nIt remains to prove that the network N (S, T,A) admits a flow whose value is equal to the sum of the demands of the sinks in T . We compute such a flow as follows.\nSwitch vertices to faces. For each available switch vertex w in sk(\u00b5), if the large angle incident to w in E\u00b5 lies in the interior of a face of E\u00b5 corresponding to a face f of S\u00b5, we let one unit of flow pass from sw to the sink tf corresponding to f (this sink is tl or tr, if w belongs to the left or to the right outer path of S\u00b5 and the large angle incident to w lies in the outer face of E\u00b5). Non-switch vertices to faces. For each non-switch vertex w of G\u00b5 that corresponds to a source sw in S, let ei be the virtual edge of sk(\u00b5) corresponding to the special component for w. Then we let one unit of flow pass from sw to the sink corresponding to fl(ei) if w = vi and the shape description of E\u03bdi is the left-wing or if w = ui and the shape description of E\u03bdi is the inverted-right-wing, or we let one unit of flow pass from sw to the sink corresponding to fr(ei) if w = vi and the shape description of E\u03bdi is the right-wing or if w = ui and the shape description of E\u03bdi is the inverted-left-wing. Extreme or interesting components to faces on the left. For each extreme or interesting component G\u03bdi such that the first value \u03c4 il of si is greater than 0, we let \u03c4 il units of flow pass from zil to the sink tf corresponding to the face f = fl(ei) of S\u00b5. Extreme or interesting components to faces on the right. For each extreme or interesting component G\u03bdi such that the second value \u03c4 ir of si is greater than 0, we let \u03c4 ir units of\nflow pass from zir to the sink tf corresponding to the face f = fr(ei) of S\u00b5. Non-extreme boring hats to faces. For each non-extreme boring component G\u03bdi whose\npreferred set P\u03bdi consists of the hat and of the inverted-hat, we let one unit of flow pass from bi to the sink corresponding to the face fr(ei) or to the face fl(ei) of S\u00b5, depending on whether the shape description of E\u03bdi is the hat or the inverted-hat, respectively. Non-extreme boring hearts to faces. For each non-extreme boring component G\u03bdi whose preferred set P\u03bdi consists of the heart, or of the inverted-heart, or of both, we let one unit of flow pass from bi1 to the sink corresponding to the face fl(ei) of S\u00b5 and unit of flow pass from bi2 to the sink corresponding to the face fr(ei) of S\u00b5. Switch vertices to non-extreme boring hearts and inverted-hearts. For each non-extreme boring component G\u03bdi whose preferred set contains the heart and the inverted-heart, we let one unit of flow pass from vi to the sink ti or from ui to the sink ti, depending on whether the shape description of E\u03bdi is the heart or the inverted-heart, respectively (note that this satisfies the demand of the sink ti).\nFirst pole. If \u03bbu = 1, then we let one unit of flow pass from the source su to the sink tu (note that this satisfies the demand of the sink tu).\nSecond pole. If \u03bbv = 1, then we let one unit of flow pass from the source tu to the sink tv (note that this satisfies the demand of the sink tv).\nIt is easy to verify that each source in S sends a number of units of flow equal to the maximum number of units of flow it can supply. The only interesting sources to consider are:\nThe source su (similar arguments deal with sv); note that su exists only if \u03bbu = 1. If \u03bbu = 1, then su sends one unit of flow to tu and it does not send flow to any sink corresponding to an internal face of S\u00b5, as the angle at u in the outer face of E\u00b5 is large, hence the angle at u in any internal face of E\u00b5 is small. Each source sw that sends one unit of flow to a sink ti corresponding to a component G\u03bdi of G\u00b5 whose preferred set contains the heart and the inverted-heart. By the definition of the flow, the angle at the vertex w corresponding to sw in the outer face of E\u03bdi is small (as either w = vi and the shape of E\u03bdi is the heart or w = ui and the shape of E\u03bdi is the inverted-heart). It follows that the angle at w in any internal face of E\u00b5 that is not an internal face of E\u03bdi is small, hence sw does not send further units of flow.\nWe now prove that each sink receives a number of units of flow equal to its demand. This was already observed during the construction of the flow for the sinks tu and tv, as well as for each sink corresponding to a non-extreme boring component of G\u00b5 whose preferred set contains the heart and the inverted-heart. We now consider the sinks corresponding to internal faces of S\u00b5 and for the sinks tl and tr.\nConsider any sink tf corresponding to an internal face f of S\u00b5. First, recall that the demand of tf is equal to nf2 \u2212 1, by construction.\nFor each component G\u03bdi of G\u00b5, let si be the shape description of E\u03bdi , and let \u03c4 il and \u03c4 ir be the left- and right-turn-number of E\u03bdi , respectively. Let E1 (E2) be the set that contains every virtual edge ei of sk(\u00b5) such that f = fl(ei) (resp. f = fr(ei)). Let E\u20321 (E\u20322) be the subset of E1 (resp. E2) that only contains the virtual edges ei such that \u03c4 il > 0 (resp. \u03c4 ir > 0). Let fE be the face of E\u00b5 corresponding to f . Furthermore, let n\u20321(fE) and n\u2032\u22121(fE) be the number of large and small angles of fE , respectively, incident to vertices of sk(\u00b5). Finally, let g be the number of ignored virtual edges; a virtual edge ei is ignored if: (a) ei \u2208 E\u20321, si is the left-wing, and the special edge for vi is incoming vi; or (b) ei \u2208 E\u20322, si is the right-wing, and the special edge for vi is incoming vi; or (c) ei \u2208 E\u20321, si is the inverted-right-wing, and\nthe special edge for ui is incoming ui; or or (d) ei \u2208 E\u20322, si is the inverted-left-wing, and the special edge for ui is incoming ui.\nWe now prove a sequence of statements. B Claim 33. The amount of flow sent to tf is equal to \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322 \u03c4 ir + n\u20321(fE)\u2212 g.\nProof. The number of units of flow that are sent to tf from the sources in S corresponding to available switch vertices of sk(\u00b5) is equal to n\u20321(fE). Indeed, if a vertex of sk(\u00b5) is incident to a large angle in fE , it is an available switch vertex, by Property UP1 of Theorem 1.\nWe now deal with the flow sent to tf from the sources in S corresponding to components of G\u00b5. We need to prove that the total amount of such flow is \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322 \u03c4 ir \u2212 g.\nEach extreme or interesting component G\u03bdi such that ei \u2208 E\u20321(such that ei \u2208 E\u20322) sends to tf a number of units of flow equal to \u03c4 il (resp. to \u03c4 ir). Each non-extreme boring component G\u03bdi sends one unit of flow to tf if ei \u2208 E\u20321 and si is the left-hat, the heart, or the inverted-heart (in each case we have \u03c4 il = 1), or if ei \u2208 E\u20322 and si is the right-hat, the heart, or the inverted-heart (in each case we have \u03c4 ir = 1). A non-extreme boring component G\u03bdi such that ei \u2208 E\u20321 (ei \u2208 E\u20322), such that ei is not ignored, and such that si is the left-wing or the inverted-right-wing (resp. the right-wing or the inverted-left-wing) does not send any unit of flow to tf , while we have \u03c4 il = 1 (resp. \u03c4 ir = 1). However, this \u201cmissing\u201d unit of flow is \u201ccompensated\u201d by the non-switch vertex vi or ui, for which G\u03bdi is the special component, which sends one unit of flow to tf . Finally, a non-extreme boring component G\u03bdi such that ei \u2208 E\u20321 (ei \u2208 E\u20322), such that ei is ignored, and such that si is the left-wing or the inverted-right-wing (resp. the right-wing or the inverted-left-wing) does not send any unit of flow to tf , while we have \u03c4 il = 1 (resp. \u03c4 ir = 1). This \u201cmissing\u201d unit of flow is not \u201ccompensated\u201d by any non-switch vertex, which results in the g term subtracted from the amount of flow sent to tf .\nThis concludes the proof of the claim. J B Claim 34. We have nf = \u2211 ei\u2208E1 |\u03c4 i l |+ \u2211 ei\u2208E2 |\u03c4 i r|+ n\u20321(fE) + n\u2032\u22121(fE)\u2212 2g.\nProof. By Properties UP1 and UP2 of Theorem 1, every large angle of fE is incident to a switch vertex. Denote by p\u2032\u22121(fE) and q\u2032\u22121(fE) the number of small angles of fE incident to switch and non-switch vertices of sk(\u00b5), respectively. Then we have n\u2032\u22121(fE) = p\u2032\u22121(fE) + q\u2032\u22121(fE). By construction, each switch vertex of sk(\u00b5) incident to f contributes 1 to nf . Since a switch vertex does not have incident flat angles, the total contribution of the switch vertices to nf is n\u20321(fE) + p\u2032\u22121(fE).\nEach non-switch vertex incident to a small angle in fE contributes 1 to nf , except for the non-switch vertices w such that the special component G\u03bdi for w corresponds to an ignored virtual edge ei. By definition, the number of such non-switch vertices is g, hence the total contribution of the non-switch vertices to nf is q\u2032\u22121(fE)\u2212 g.\nWe now deal with the contributions to nf stemming from the components of G\u00b5.\nEach extreme or interesting component G\u03bdi such that ei \u2208 E1 (ei \u2208 E2) contributes to nf by an amount of |\u03c4 il | (resp. |\u03c4 ir|). Similarly, each non-extreme boring component G\u03bdi such that ei \u2208 E1 (ei \u2208 E2) and such that si is the hat, the inverted-hat, the heart, or the inverted-heart contributes to nf by an amount of |\u03c4 il | = 1 (resp. |\u03c4 ir| = 1). Further, each non-extreme boring component G\u03bdi such that ei \u2208 E1 and such that si is the sausage, the inverted-sausage, the right-wing, or the inverted-left-wing contributes to nf by an amount of |\u03c4 il | = 0.\nSimilarly, each non-extreme boring component G\u03bdi such that ei \u2208 E2 and such that si is the sausage, the inverted-sausage, the left-wing, or the inverted-right-wing contributes to nf by an amount of |\u03c4 ir| = 0. Each non-extreme boring component G\u03bdi such that ei \u2208 E1 (ei \u2208 E2), such that ei is not ignored, and such that si is the left-wing or the inverted-right-wing (resp. the right-wing or the inverted-left-wing) contributes by an amount of 0 to nf , while we have \u03c4 il = 1 (resp. \u03c4 ir = 1). However, this \u201cmissing\u201d contribution to nf is \u201ccompensated\u201d by the non-switch vertex vi or ui, for which G\u03bdi is the special component, which contributes 1 to nf while being incident to a flat angle in fE . Finally, each non-extreme boring component G\u03bdi such that ei \u2208 E\u20321 (ei \u2208 E\u20322), such that ei is ignored, and such that si is the left-wing or the inverted-right-wing (resp. the right-wing or the inverted-left-wing) contributes by an amount of 0 to nf , while we have \u03c4 il = 1 (resp. \u03c4 ir = 1). This \u201cmissing\u201d contribution to nf is not \u201ccompensated\u201d by any non-switch vertex, which results in a second g term subtracted from the value of nf .\nThis concludes the proof of the claim. J\nB Claim 35. We have \u2211 ei\u2208E\u20321 \u03c4 il \u2212 \u2211 ei\u2208E1\\E\u20321 |\u03c4 il |+ \u2211 ei\u2208E\u20322 \u03c4 ir \u2212 \u2211 ei\u2208E2\\E\u20322\n|\u03c4 ir|+ n\u20321(fE)\u2212 n\u2032\u22121(fE) = \u22122.\nProof. By definition, for each component G\u03bdi of G\u00b5 such that ei \u2208 E1 (ei \u2208 E2), the value \u03c4 il (resp. \u03c4 ir) is equal to the number of non-pole vertices of G\u03bdi incident to large angles in fE minus the number of non-pole vertices of G\u03bdi incident to small angles in fE . Hence, the sum \u2211 ei\u2208E1 \u03c4 i l + \u2211 ei\u2208E2 \u03c4 i r +n\u20321(fE)\u2212n\u2032\u22121(fE) = \u2211 ei\u2208E\u20321 \u03c4 il \u2212 \u2211 ei\u2208E1\\E\u20321 |\u03c4 il |+ \u2211 ei\u2208E\u20322\n\u03c4 ir \u2212\u2211 ei\u2208E2\\E\u20322\n|\u03c4 ir| + n\u20321(fE) \u2212 n\u2032\u22121(fE) is equal to the number of vertices of G\u00b5 incident to large angles in fE minus the number of vertices of G\u00b5 incident to small angles in fE . By Property UP3 of Theorem 1, this difference is equal to \u22122. J\nBy Claim 35, we have \u2211 ei\u2208E1\\E\u20321 |\u03c4 il |+ \u2211 ei\u2208E2\\E\u20322 |\u03c4 ir| = \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322\n\u03c4 ir+n\u20321(fE)\u2212 n\u2032\u22121(fE) + 2. This can be replaced into the equality nf = \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E1\\E\u20321\n|\u03c4 il | +\u2211 ei\u2208E\u20322 \u03c4 ir + \u2211 ei\u2208E2\\E\u20322\n|\u03c4 ir|+ n\u20321(fE) + n\u2032\u22121(fE)\u2212 2g given by Claim 34, in order to get that nf = 2 \u2211 ei\u2208E\u20321 \u03c4 il + 2 \u2211 ei\u2208E\u20322\n\u03c4 ir + 2n\u20321(fE) \u2212 2g + 2. Hence, the demand of tf is equal to nf 2 \u2212 1 = \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322\n\u03c4 ir + n\u20321(fE)\u2212 g, which by Claim 33 is equal to the flow sent to tf .\nConsider now the sink tl (the arguments for the sink tr are analogous). First, recall that the demand of tl is equal to \u03c4l+nlf 2 . We need to prove that the amount of flow which is sent to tl is equal to the same amount. The proof is very similar to the one for the sink tf corresponding to an internal face f of S\u00b5, and is hence only sketched here.\nFor each component G\u03bdi of G\u00b5, let \u03c4 il and \u03c4 ir be defined as before. Let E1 (E2) be the set that contains every virtual edge ei of sk(\u00b5) that belongs to the left outer path of S\u00b5 and such that the outer face of S\u00b5 is fl(ei) (resp. fr(ei)). Let E\u20321 (E\u20322) be the subset of E1 (resp. E2) that only contains the virtual edges ei such that \u03c4 il > 0 (resp. \u03c4 ir > 0). Let fE be the outer face of E\u00b5. Further, let n\u20321(fE) and n\u2032\u22121(fE) be the number of large and small angles, respectively, incident to fE and to non-pole vertices of the left outer path of S\u00b5. Finally, let g be defined as before.\nAs in the proof for the sink tf corresponding to an internal face f of S\u00b5, we need three statements. The first one is the analogue of Claim 33: The amount of flow which is sent to tl is equal to \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322\n\u03c4 ir + n\u20321(fE)\u2212 g; the proof is identical to the one of Claim 33. The second statement is the analogue of Claim 34: nlf = \u2211 ei\u2208E1 |\u03c4 i l |+ \u2211 ei\u2208E2 |\u03c4 i r|+n\u20321(fE) +\nn\u2032\u22121(fE)\u22122g; again, the proof is identical to the one of Claim 34. Finally, the third statement is similar to Claim 35: \u2211 ei\u2208E\u20321 \u03c4 il \u2212 \u2211 ei\u2208E1\\E\u20321 |\u03c4 il |+ \u2211 ei\u2208E\u20322 \u03c4 ir \u2212 \u2211 ei\u2208E2\\E\u20322\n|\u03c4 ir|+ n\u20321(fE)\u2212 n\u2032\u22121(fE) = \u03c4l; again, its proof follows the same lines of the proof of Claim 35, while using that the left-turn-number of E\u00b5 is \u03c4l in place of Property UP3 of Theorem 1.\nThe three statements imply that the amount of flow which is sent to tl is equal to \u03c4l+nlf\n2 , as requested. Indeed, by the third statement we have \u2211 ei\u2208E1\\E\u20321 |\u03c4 il | + \u2211 ei\u2208E2\\E\u20322\n|\u03c4 ir| =\u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322\n\u03c4 ir + n\u20321(fE) \u2212 n\u2032\u22121(fE) \u2212 \u03c4l. This can be replaced into the equality nlf = \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E1\\E\u20321 |\u03c4 il |+ \u2211 ei\u2208E\u20322 \u03c4 ir + \u2211 ei\u2208E2\\E\u20322\n|\u03c4 ir|+n\u20321(fE)+n\u2032\u22121(fE)\u22122g given by the second statement, in order to get that nlf = 2 \u2211 ei\u2208E\u20321 \u03c4 il +2 \u2211 ei\u2208E\u20322\n\u03c4 ir+2n\u20321(fE)\u22122g\u2212\u03c4l. Hence, the demand of tl is equal to nf+tl2 = \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322\n\u03c4 ir + n\u20321(fE)\u2212 g, which by the first statement is equal to the flow sent to tl.\n(\u21d0=) Suppose next that our algorithm determines that s \u2208 F\u00b5. We prove that G\u00b5 admits a uv-external upward planar embedding E\u00b5 with shape description s.\nOur algorithm determines that s \u2208 F\u00b5 when examining some shape descriptions s1, . . . , sh for the extreme and interesting components G\u03bd1 , . . . , G\u03bdh of G\u00b5, together with a planar embedding S\u00b5 for the skeleton sk(\u00b5) of \u00b5. If the corresponding flow network N admits a flow in which each sink is supplied with a number of units of flow equal to its demand, then our algorithm indeed concludes that s \u2208 F\u00b5.\nThe uv-external upward planar embedding E\u00b5 is constructed starting from S\u00b5, by selecting a uivi-external upward planar embedding E\u03bdi for each component G\u03bdi of G\u00b5, and by assigning a label to each vertex of sk(\u00b5) inside the faces of S\u00b5. Selecting a uivi-external upward planar embedding E\u03bdi for each component G\u03bdi of G\u00b5 implies that the label of each angle at a vertex w /\u2208 {ui, vi} of G\u03bdi in E\u00b5 is the same as in E\u03bdi ; further, the label of each angle in an internal face of E\u03bdi at ui or vi in E\u00b5 is the same as in E\u03bdi . Hence, after this selection, the only missing labels for an angle assignment are those for the vertices of sk(\u00b5) inside the faces of S\u00b5.\nFor i = 1, . . . , h, we select E\u03bdi to be any uivi-external upward planar embedding of G\u03bdi with shape description si. This embedding exists, as our algorithm only consider shape descriptions in F\u03bdi for the component G\u03bdi . It remains to select a uivi-external upward planar embedding E\u03bdi for each non-extreme boring component G\u03bdi of G\u00b5 and a label for each vertex of sk(\u00b5) inside each face of S\u00b5. This is done based on the solution for the flow network N .\nLet \u03b3 be a function that assigns to each arc a \u2208 A a value \u03b3(a) equal to the amount of flow traversing a in the solution for N . By the integral flow theorem, we can assume that \u03b3(a) is a non-negative integer, for each arc a \u2208 A. Similarly to [3], it can be proved that the total demand of the sinks in T is equal to the total amount of units of flow that can be supplied from the sources in S. This implies that each source sends out the maximum number of units of flow it can supply. Since the flow is integral and the only sources that can supply more than one unit of flow have a single incident arc, it follows that each source sends its flow on a single incident arc. This allows us to complete the construction of E\u00b5 as follows. Consider each non-extreme boring component G\u03bdi of G\u00b5 and its preferred set P\u03bdi .\nIf P\u03bdi contains a single shape description, then we select E\u03bdi to be any uivi-external upward planar embedding of G\u03bdi with that shape description. If P\u03bdi contains the hat and the inverted-hat, we select E\u03bdi to be any uivi-external upward planar embedding of G\u03bdi with the former or the latter shape description, depending on whether the source bi sends its unit of flow to the sink corresponding to the face fr(ei) or to the sink corresponding to the face fl(ei), respectively. If P\u03bdi contains both the heart and the inverted-heart, we select E\u03bdi to be any uiviexternal upward planar embedding of G\u03bdi with the former or the latter shape description,\ndepending on whether the unit of flow demanded by the sink ti is supplied by a source corresponding to vi or by a source corresponding to ui, respectively. If P\u03bdi contains both the left-wing and the right-wing (the case in which it contains both the inverted-left-wing and the inverted-right-wing is analogous), then we further distinguish two cases.\nvi is a bottom vertex: then we select E\u03bdi to be any uivi-external upward planar embedding of G\u03bdi whose shape description is the left-wing or the right-wing (the choice on whether to use one or the other shape description is arbitrary);\nvi is a top vertex: then we select E\u03bdi to be any uivi-external upward planar embedding of G\u03bdi whose shape description is the left-wing or the right-wing, depending on whether the source corresponding to the non-switch vertex vi sends its unit of flow to the sink corresponding to fl(ei) or to the sink corresponding to fr(ei), respectively.\nWe now have a planar embedding (which is not yet an upward planar embedding) of G\u00b5. For each vertex w of sk(\u00b5) that is a non-switch vertex of G\u00b5, we label each angle at w in a face of S\u00b5 incident to precisely one incoming edge of w with the value 0, and we label every other angle at w in a face of S\u00b5 with the value \u22121. For each vertex w of sk(\u00b5) that is an unavailable switch vertex of G\u00b5, we label each angle at w in a face of S\u00b5 with the value \u22121. For each vertex w of sk(\u00b5) that is an available switch vertex of G\u00b5, let f be the unique face of S\u00b5 such that the source corresponding to w sends its unit of flow to the sink corresponding to f ; then we label the angle at w in f with the value 1 and we label every other angle at w in a face of S\u00b5 with the value \u22121.\nThis completes the construction of the upward planar embedding E\u00b5 of G\u00b5. Since u and v are incident to the outer face of S\u00b5, by construction, it follows that E\u00b5 is uv-external. We now prove that E\u00b5 is actually an upward planar embedding of G\u00b5, i.e., it satisfies Properties UP0\u2013 UP3 of Theorem 1. Let \u03bb be the angle assignment in E\u00b5; for each vertex w of G\u00b5 and each face f of E\u00b5, we define n\u22121(w), n0(w), n1(w), n\u22121(f), and n1(f) as before Theorem 1.\nProperty UP0 (if \u03b1 is a switch angle of E\u00b5, then \u03bb(\u03b1) \u2208 {\u22121, 1}, and if \u03b1 is a flat angle, then \u03bb(\u03b1) = 0) is true for each angle \u03b1 internal to E\u03bdi and for each angle \u03b1 at a non-pole vertex of G\u03bdi , for any i \u2208 {1, . . . , k}, since E\u03bdi is an upward planar embedding. Further, it is true for each angle \u03b1 at a vertex of sk(\u00b5) inside a face of S\u00b5, by construction.\nProperty UP1 (if w is a switch vertex of G\u00b5, then n1(w) = 1, n\u22121(w) = deg(w) \u2212 1, n0(w) = 0) is true for each non-pole switch vertex of G\u03bdi , for any i \u2208 {1, . . . , k}, since E\u03bdi is an upward planar embedding. Further, Property UP1 is true for each available switch vertex w of sk(\u00b5), as the only angle at w which is labeled 1 is the one in the face f of S\u00b5 such that the source in S corresponding to w sends its unit of flow to the sink in T corresponding to f ; indeed, every other angle at w in a face of S\u00b5 is labeled \u22121, by construction, and every other angle at w in an internal face of an embedding E\u03bdi is labeled \u22121 since w is available. Moreover, Property UP1 is true for each unavailable switch vertex w of sk(\u00b5), as every angle at w in a face of S\u00b5 is labeled \u22121, by construction, and there is exactly one angle at w in an internal face of an embedding E\u03bdi that is labeled 1, while all the others are labeled \u22121, since w is unavailable. Finally, observe that a switch vertex is either available or unavailable, since the angle check does not fail.\nProperty UP2 (if w is a non-switch vertex of G\u00b5, then n1(w) = 0, n\u22121(w) = deg(w)\u2212 2, n0(w) = 2) is true for each non-switch vertex w of G\u00b5. Indeed, by Property UP1 and since G is expanded, there are two angles at w labeled 0. Moreover, every other angle \u03b1 at w is labeled \u22121. This is by construction if \u03b1 is in a face of S\u00b5; further, it is since E\u03bdi satisfies Property UP2 and the angle check did not fail if \u03b1 is in an internal face of E\u03bdi .\nWe prove Property UP3 (if fE is an internal face of E\u00b5, then n1(fE) = n\u22121(fE)\u2212 2, and if fE is the outer face of E\u00b5, then n1(fE) = n\u22121(fE) + 2). Consider an internal face fE of E\u00b5; the outer face of E\u00b5 can be dealt with similarly. If fE is also an internal face of E\u03bdi , for some i \u2208 {1, . . . , k}, then we have n1(fE) = n\u22121(fE)\u2212 2, given that E\u03bdi is an upward planar embedding. Otherwise, fE corresponds to an internal face f of S\u00b5. Let E1, E2, E\u20321, E\u20322, n\u20321(fE), n\u2032\u22121(fE), \u03c4 il , \u03c4 ir, and g be defined as in the proof of necessity.\nA key observation is the following.\nB Claim 36. If the number of small angles in fE at non-pole vertices of the components G\u03bdi of G\u00b5 is \u03c7, for some \u03c7 \u2265 0, then the number of large angles in fE at non-pole vertices of the components G\u03bdi of G\u00b5 is equal to \u03c7+ \u2211 ei\u2208E1 \u03c4 i l + \u2211 ei\u2208E2 \u03c4 i r.\nProof. For every edge ei \u2208 E1, we have that, if the number of small angles in fE at non-pole vertices of G\u03bdi is equal to xi, for some integer xi \u2265 0, then the number of large angles in fE at non-pole vertices of G\u03bdi is equal to \u03c4 il + xi; this just comes from the definition of the left-turn-number of E\u03bdi . A similar relationship (with \u03c4 ir in place of \u03c4 il ) holds true for every edge ei \u2208 E2. Then the claim follows with \u03c7 = \u2211 ei\u2208E1\u222aE2 xi. J\nBy Claim 36, the number of large angles in fE is equal to \u2211 ei\u2208E1 \u03c4 i l+ \u2211 ei\u2208E2 \u03c4 i r+\u03c7+n\u20321(fE), while the number of small angles in fE is equal to \u03c7 + n\u2032\u22121(fE). Hence, we want to prove that \u2211 ei\u2208E1 \u03c4 i l + \u2211 ei\u2208E2 \u03c4 i r + n\u20321(fE)\u2212 n\u2032\u22121(fE) = \u22122.\nThe rest of the proof proceeds similarly to the proof of sufficiency. First, we have that the amount of flow sent to the sink tf corresponding to f is equal to \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322\n\u03c4 ir + n\u20321(fE)\u2212 g (as in Claim 33). This is because:\n(a) we make the angle at a switch vertex of sk(\u00b5) large if and only if the source corresponding to the switch vertex sends one unit of flow to tf ; (b) tf receives \u03c4 il (\u03c4 ir) units of flow from an extreme or interesting component G\u03bdi such that ei \u2208 E1 (resp. ei \u2208 E2) if and only if \u03c4 il > 0 (resp. \u03c4 ir > 0); (c) for each edge ei \u2208 E1 such that G\u03bdi is non-extreme, boring, and non-ignored, we choose E\u03bdi in such a way that \u03c4 il = 1 if and only if tf receives one unit of flow from a source corresponding to G\u03bdi or corresponding to a non-switch vertex for which G\u03bdi is the special component;\n(d) for each edge ei \u2208 E2 such that G\u03bdi is non-extreme, boring, and non-ignored, we choose E\u03bdi in such a way that \u03c4 ir = 1 if and only if tf receives one unit of flow from a source corresponding to G\u03bdi or corresponding to a non-switch vertex for which G\u03bdi is the special component; and\n(e) for each edge ei \u2208 E1 (ei \u2208 E2) such that G\u03bdi is non-extreme, boring, and ignored, we have \u03c4 il = 1 (resp. \u03c4 ir = 1), although this does not correspond to any unit of flow received by tf ; this determines the \u2212g term in the amount of flow received by tf .\nSimilar considerations on the value of nf establish that nf = \u2211 ei\u2208E1 |\u03c4 i l |+ \u2211 ei\u2208E2 |\u03c4 i r|+ n\u20321(fE)+n\u2032\u22121(fE)\u22122g (as in Claim 34). Since the demand of tf is equal to nf 2 \u22121 and since the\namount of flow received by tf is equal to its demand, we get \u2211 ei\u2208E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322 \u03c4 ir+n\u20321(fE)\u2212\ng = \u2211 ei\u2208E1 |\u03c4 il |+ \u2211 ei\u2208E2 |\u03c4 ir|+n \u2032 1(fE)+n \u2032 \u22121(fE)\u22122g 2 \u2212 1, which is 2 \u2211 ei\u2208E\u20321 \u03c4 il + 2 \u2211 ei\u2208E\u20322\n\u03c4 ir + 2n\u20321(fE) = \u2211 ei\u2208E\u20321 \u03c4 il \u2212 \u2211 ei\u2208E1\\E\u20321 \u03c4 il + \u2211 ei\u2208E\u20322 \u03c4 ir \u2212 \u2211 ei\u2208E2\\E\u20322\n\u03c4 ir + n\u20321(fE) + n\u2032\u22121(fE) \u2212 2. This gives us \u2211 ei\u2208E1 \u03c4 i l + \u2211 ei\u2208E2 \u03c4 i r + n\u20321(fE)\u2212 n\u2032\u22121(fE) = \u22122, as desired.\nFinally, we need to prove that the shape description of E\u00b5 is s. The proof that the left-turn-number of E\u00b5 coincides with the first value of s, say \u03c4l, is very similar to the one we\njust presented that n1(fE) = n\u22121(fE)\u2212 2 (the main difference is that the demand of the sink tl is equal to nf+\u03c4l2 and this value is used in place of nf 2 \u2212 1); this proof is hence omitted here. Likewise for the proof that the right-turn-number of E\u00b5 coincides with the second value of s. That the label of u in the outer face of E\u00b5 coincides with the third value of s, say \u03bbu, comes from the requirement that the source su corresponding to u must send one unit of flow to the sink tu, if \u03bbu = 1, comes from the requirement that su must send one unit of flow to an internal face of S\u00b5 incident to u, if \u03bbu = \u22121, and comes from the extreme-edge check otherwise. A similar argument shows that the label of v in the outer face of E\u00b5 coincides with the fourth value of s. Finally, that the last four values in the shape description of E\u00b5 coincide with the last four values of s directly comes from the extreme-edge check. J\nWe are finally ready to state the main theorem of this section.\nI Theorem 37. It is possible to solve Upward Planarity in O(\u03c31.45\u03c3 \u00b7 n2 log3 n)) time for a digraph with n vertices and \u03c3 sources.\nProof. Let G be an n-vertex digraph whose underlying graph is planar and let \u03c3 be the number of sources of G. First, we expand G, which is done in O(n) time. As discussed in Section 2, an expansion does not alter whether G is upward planar, it preserves the number of sources, and at most doubles the number of vertices of G. By Observation 26, each biconnected component B of G is expanded and has at most \u03c3 sources. For any edge e\u2217 of B, the SPQR-tree T of B can be computed in O(n) time. By Lemma 27, for any R-node \u00b5 of T , the left- and right-turn-numbers of any uv-external upward planar embedding of the pertinent graph of \u00b5 are in O(\u03c3). Further, by Lemma 32, there exists an R-node subprocedure whose total time complexity is O(\u03c31.45\u03c3 \u00b7 n log3 n). Hence, by Lemma 24, Upward Planarity can be solved in O(n((\u03c31.45\u03c3 \u00b7 n log3 n) + (\u03c32 \u00b7 n))) \u2286 O(\u03c31.45\u03c3 \u00b7 n2 log3 n) time. J\n7 An Algorithm Parameterized by Treewidth\nThe aim of this section is to provide an R-node subprocedure which yields parameterized algorithms for Upward Planarity when parameterized by treewidth and treedepth. The idea behind this is to obtain a combinatorization of the task that is asked in the subprocedure. This will be done by extending the skeleton of the R-node with additional information, notably via a so-called embedding graph. The R-node subprocedure is then obtained by performing dynamic programming over the embedding graph. However, to obtain the desired runtime, we will first have to show that the embedding graph has bounded treewidth.\nIt is worth noting that the notion of embedding graph used here shares similarities with the embedding graphs that have been recently used to solve several drawing extension problems [19, 20]. However, the notions are not the same due to problem-specific differences, and the use of the combinatorizations differ as well: while in the two aforementioned papers the combinatorizations were used in conjunction with Courcelle\u2019s Theorem [11], this approach cannot be used here due to the fact that we will need to make the turn numbers add up to \u22122 for each non-outer face."
        },
        {
            "heading": "7.1 A Combinatorial Representation of the Skeleton",
            "text": "Let G be a connected graph with a planar embedding G, and let F be the set of faces of G. Let G\u2212 be the graph obtained from G by subdividing each edge e once, creating the vertex ve. We define the embedding graph G\u0303 of G as the graph obtained from G\u2212 by adding a vertex f for each face in F , and connecting f to each vertex in G\u2212 incident to f . Formally,\nV (G\u0303) = V (G)\u222aF \u222a{ve | e \u2208 E(G)} = V v\u222aV f\u222aV e, and E(G\u0303) = E(G\u2212)\u222a{fv | v \u2208 V (G)\u2227 v is incident to f }\u222a{fve | e \u2208 E(G)\u2227 both endpoints of e are incident to f }. Observe that G\u0303 is tripartite, and we call the three sets of vertices that occur in the definition of V (G\u0303) the true vertices, face-vertices and edge-vertices of G\u0303, respectively. An illustration is shown in Fig. 14.\nFurthermore, note that each edge-vertex is adjacent to at most two face-vertices. It is well known (and easy to show) that if the treewidth of a graph G is at most k, then\nthe treewidth of its subdivision is at most k [12, 18]. Our aim in this section, however, will be to show that if the treewidth of an embedded graph is bounded, then the treewidth of its embedding graph is also bounded. We begin by identifying a small number of faces that are, in some sense, \u201crelevant\u201d for a bag in a tree decomposition of G\u2212. We will then show that it is possible to construct a bounded-width decomposition of the embedding graph by adding the face-vertices of these relevant faces to the appropriate bags.\nGiven a tree-decomposition (T, \u03c7) of G\u2212, a face f \u2208 F is called crossing for a node t \u2208 T if f is incident to at least one vertex in fut(t) and to at least one vertex in past(t). Our first task is to bound the number of crossing faces in a bag.\nI Lemma 38. If G has treewidth k, then there exists a tree-decomposition (T, \u03c7) of width k such that there are at most 2k crossing faces for each node t of T .\nProof. The lemma follows from previous work on so-called geometric tree-decompositions [17]. In particular, Dorn [17, Theorem 1] showed that if a plane graph G has treewidth k, there exists a tree-decomposition (T, \u03c7) of G of width at most k with the additional property that for each node t \u2208 V (T ), the bag \u03c7(t) contains at most two vertex-subsets S1, S2 \u2286 \u03c7(t) and there is a partitioning of past(t) into past1(t), past2(t) with the following properties:\nS1, S2 are minimal separators in G that separate fut(t) from past1(t) and past2(t), respectively, and there are Jordan curves C1, C2 which intersect the drawing of G precisely in the vertices of S1, S2, respectively, and separate fut(t) from past1(t) and past2(t), respectively.\nGiven the above, consider such a geometric tree-decomposition (T, \u03c7) of an arbitrary drawing that realizes the embedding of G\u2212. Each crossing face must, by definition, be intersected by at least one of the Jordan curves C1, C2. Since each of these curves intersects at most k vertices and no edges, the total number of faces intersecting at least one of these curves is upper-bounded by 2k. J\nLet us now proceed with a tree-decomposition (T, \u03c7) satisfying Lemma 38, and let F (t) be the set of crossing faces for t. We say that a face is inside a bag t if every vertex on its boundary lies in t, and denote the set of faces inside t as I(t).\nI Observation 39. |I(t)| \u2264 2k \u2212 4.\nProof. Let H be the subgraph of G induced on \u03c7(t). Since H is planar, by Euler\u2019s formula we obtain that it contains at most 2k \u2212 4 faces. Moreover, I(t) is a subset of the faces of H. J\nFinally, in order to obtain a valid tree-decomposition for G\u0303, we will need to add the set F (t) of crossing faces also to all nodes adjacent to t (this will be important in cases where t is a forget node or when t\u2019s parent is an introduce node). Formally, let the propagation faces P (t) for t \u2208 T simply be defined as \u22c3 {p | pt\u2208E(T )} F (p). Since a nice tree-decomposition has degree at most 3, it follows that |P (t)| \u2264 3 \u00b7 2k. Let \u03c8(t) = \u03c7(t) \u222a F (t) \u222a I(t) \u222a P (t). While Lemma 38 together with Observation 39\nmeans that adding the face-vertices for the crossing, inside and propagation faces to the relevant bags (i.e., replacing \u03c7(t) with \u03c8(t)) would preserve a bound on the bag size, we need to show that this construction results in a valid tree-decomposition for G\u0303.\nI Lemma 40. (T, \u03c8(t)) is a tree-decomposition of G\u0303.\nProof. To prove the lemma, it suffices to verify that (1) every edge incident to F occurs in some bag, and (2) for each face-vertex f \u2208 F , the set of nodes of T satisfying f \u2208 \u03c7(t) forms a nonempty subtree of T . But first, we\u2019ll establish the following subclaim: for each face-vertex f , there exists a node t such that f \u2208 \u03c8(t).\nIndeed, if all vertices adjacent to f in G\u0303 occur together in some bag, say \u03c8(t), then f \u2208 \u03c8(t) and the subclaim holds. Otherwise, let us consider a forget node t with a child p such that \u03c7(p) \\ \u03c7(t) = {z} where zf \u2208 E(G\u0303) with the additional property that t achieves maximum distance from the root r (i.e., t is \u201cas far away\u201d from the root as possible). In particular, this implies that no other forget node which forgets a vertex adjacent to f occurs in the subtree rooted at t. Since \u03c7(p) does not contain all the neighbors of f and no neighbor of f was forgotten in the subtree rooted at t, there must exist some neighbor of f , say y, in fut(t). Since z \u2208 past(t), we have that f \u2208 F (t) and hence f \u2208 \u03c8(t), and the subclaim holds.\nLet us now turn to establishing property (1). Again, if all vertices adjacent to f in G\u0303 occur in some bag, then the property trivially holds. Otherwise, let v be an arbitrary vertex such that vf \u2208 E(G\u0303); our aim is to show that {v, f} occur together in some bag of (T, \u03c8). Recall that there must exist some node in T where f occurs as a crossing vertex; let us pick one such node, say u. Consider the node t where v was forgotten. We distinguish three cases.\nu is a descendant of t: There must exist some vertex w \u2208 past(u) adjacent to f . Consider the unique u-t path in T , and let s\u2032 be the unique node on this path such that its parent s\u2032 introduces v. Since v \u2208 fut(s) and w \u2208 past(s), it follows that f \u2208 F (s). But then {f, v} \u2286 P (s), as desired. u is an ancestor of t: There must exist some vertex w \u2208 fut(u) adjacent to f . But then w \u2208 fut(t) as well, and since v \u2208 past(t) we obtain that f \u2208 F (t). Then {f, v} \u2286 P (t\u2032) where t\u2032 is the unique child of t, as desired. u is neither an ancestor nor a descendant of t: There must exist some vertex w \u2208 past(u) adjacent to f . But then w \u2208 fut(t), and since v \u2208 past(t) we obtain that f \u2208 F (t). Then {f, v} \u2286 P (t\u2032) where t\u2032 is the unique child of t, as desired.\nFinally, let us establish property (2). In particular, let t, u be nodes of t such that f \u2208 \u03c8(t) \u2229 \u03c8(u), and it suffices to show that the bag of every node on the t-u path in T contains f . Let us first consider the case where f \u2208 I(t). Since the intersection of connected subtrees on T is itself a connected subtree and each vertex v adjacent to f occurs on a connected subtree of T , it follows that the set of bags where f \u2208 I(t) also forms a connected subtree. Moreover, this implies that in this case there can be no node u such that f \u2208 F (u), and so the claim holds.\nOn the other hand, assume that f \u2208 F (t)\u222aP (t). If f \u2208 P (t), then there exists a neighbor t\u2032 of t such that f \u2208 F (t\u2032) and the t\u2032-u path contains the t-u path; hence it suffices to establish the case where f \u2208 F (t). Moreover, the previous paragraph established that in this case f \u2208 F (u) \u222a P (u), and hence by the same argument as in the previous sentence it also suffices to consider the case where f \u2208 F (u). We now distinguish three cases.\nu is a descendant of t: By the definition of crossing faces, there must exist a vertex a \u2208 past(u) and a vertex b \u2208 fut(t) where a 6= b. But then each bag p on the u-t path in T satisfies that a \u2208 past(p) and b \u2208 fut(p), and in particular f \u2208 F (p). t is a descendant of u: This case is completely symmetrical to the previous one. u is neither an ancestor nor a descendant of t: By the definition of crossing faces, there must exist a vertex a \u2208 past(u) and a vertex b \u2208 past(t) where a 6= b. Let s by the least common ancestor of t and u. Each node p on the unique t-s path except for s satisfies that b \u2208 past(p) and a \u2208 fut(p), meaning that f \u2208 F (p). The same claim then holds symmetrically for the unique u-s path. Finally, since we showed that s has a neighbor p\u2032 satisfying f \u2208 F (p\u2032), we obtain f \u2208 P (s) as well. In particular, the bag of every node on the t-u path contains f . J\nLemma 38, Observation 39 and Lemma 40 together with the known fact that subdividing edges does not increase the treewidth [12, 18] immediately imply the following result, which we believe may be of general interest.\nI Theorem 41. Let G be a graph with a planar embedding of treewidth k where k \u2265 1. Then the embedding graph G\u0303 has treewidth at most 11k \u2212 4 \u2208 O(k)."
        },
        {
            "heading": "7.2 Problem Reformulation",
            "text": "While the embedding graph defined in Subsection 7.1 is well-suited for our purposes, we still need to formulate the problem we will be solving on these embedding graphs. First of all, the R-node subprocedure required by Lemma 24 can be straightforwardly reduced to the task of checking whether a specific shape description \u03c8 can be achieved at the R-node. This reduction takes time at most O(\u03c4) by Lemma 12. At this point, the input consists of (1) an R-node \u00b5 of T with skeleton H, (2) a mapping S\u00b5 which assigns each virtual edge in H to its feasible set, (3) a bound \u03ba on the treewidth of the embedding graph H\u0303 obtained from H, and (4) a target shape description \u03c8.\nThe main difficulty here\u2014and the task of this subsection\u2014will be to express the question of whether \u03c8 is in the feasible set of \u00b5 as a combinatorial problem over the embedding graph H\u0303 of H: Determine if there exists a valid angle mapping \u03b1 and a shape selector \u03b2. We will need some additional terminology to to elaborate on the meaning of \u201cvalid\u201d, \u201cangle mapping\u201d and \u201cshape selector\u201d. Denote the poles of \u00b5 by u\u0303, v\u0303. Fix a u\u0303v\u0303-external planar embedding EH\u00b5 of H. Let H\u0303 be the corresponding embedding graph, where V (H\u0303) = V v \u222a V e \u222a V f. Let F (H) denote the set of faces defined by EH\u00b5 , we may assume that the outer face fH \u2208 F (H) is fixed. For each edge e \u2208 E(H), denote by \u03bde the respective child of the node \u00b5 in the used\nSPQR decomposition, and recall that G\u03bde is then the corresponding pertinent graph. Let the set A\u00b5 of active switch vertices be defined as the set of all switch vertices in G\u00b5 which are contained in V (H). Then:\nan angle mapping \u03b1 maps each active switch vertex v \u2208 A\u00b5 to a vertex in NH\u0303(v); intuitively, this describes the placement of the large angle at v in the upward planar embedding of the pertinent graph (which could either be in a face between two virtual edges\u2014in which case \u03b1 maps v to the corresponding face vertex\u2014or in a virtual edges\u2014in which case \u03b1 maps v to that virtual edge). a shape selector \u03b2 maps each vertex ve in V e obtained from virtual edge e of H to a shape description that occurs in a feasible set in the range of S\u00b5(e).\nIt remains to formalize the meaning of \u201cvalid\u201d. For a true vertex v \u2208 V v and an edgevertex e \u2208 V e adjacent to v, denote by \u03bb\u03b2(v, ve) the value assigned to the outer angle of v in G\u03bde by the shape description \u03b2(ve). For a true vertex v \u2208 V v and an adjacent face vertex vf \u2208 V f, denote by \u03bb\u03b1(v, vf ) the value that \u03b1 induces for the angle at v inside vf . That is, if v \u2208 A\u00b5, \u03bb\u03b1(v, vf ) is equal to 1 if \u03b1(v) = vf , and \u22121 otherwise. If v /\u2208 A\u00b5, \u03bb\u03b1(v, vf ) is equal to 0 if the corresponding angle is flat angle, and \u22121 otherwise, independently of \u03b1. For a face vertex vf \u2208 V f and an adjacent edge-vertex ve \u2208 V e, denote by turn\u03b2(vf , ve) the turn number that \u03b2(ve) induces on the respective part of f . Specifically, if ve corresponds to the component (G\u03bde , u, v), then turn\u03b2(vf , ve) is the left-turn-number \u03c4l(G\u03bde , u, v) if u appears right before v in the cyclic order induced by EH\u00b5 on the vertices of H adjacent to vf , and the right-turn-number \u03c4r(G\u03bde , u, v) otherwise, where both \u03c4l(G\u03bde , u, v) and \u03c4r(G\u03bde , u, v) are defined by the shape \u03b2(ve). Analogously, for v adjacent to ve define \u03c1\u03b2(vf , ve, v) as the value \u03c1l(G\u03bde , v) or \u03c1r(G\u03bde , v).\nThe pair (\u03b1, \u03b2) is valid if the following three Validity Conditions hold:\n1. For each face vertex f \u2208 V f, we have that\n\u2211 ve\u2208V e\u2229N\nH\u0303 (vf )\nturn\u03b2(vf , ve) + \u2211\nv\u2208V v\u2229N H\u0303 (vf )\n\u03bb\u03b1(v, vf ) = {\n2, if f = fH \u22122, otherwise.\n2. For each true vertex v \u2208 V v, the following conditions hold on the pole angles in the shapes selected by \u03b2 for the incident edges: a. If v is a switch vertex in G\u00b5, for each ve \u2208 V e \u2229NH\u0303(v) \\ {\u03b1(v)}, \u03bb\u03b2(v, ve) = 1, and\n\u03bb\u03b2(v, ve) = \u22121 if ve = \u03b1(v). That is, in accordance with \u03b1, at most one of the virtual edges \u201ctakes\u201d a large angle inside, meaning that the outside angle of this component at v is small.\nb. If v is a non-switch vertex in G\u00b5, for each ve \u2208 V e \u2229NH\u0303(v), we distinguish two cases. If the interior of G\u03bde does not contain a flat angle at v, then \u03bb\u03b2(v, ve) = 1. Note that otherwise (i.e., if there is both an ingoing edge and an outgoing edge at v in G\u03bde), \u03bb\u03b2(v, ve) \u2208 {\u22121, 0}.\n3. (\u03b1, \u03b2) agrees with the target shape \u03c8, which denotes the tuple (\u03c4l(G\u00b5, u\u0303, v\u0303), \u03c4r(G\u00b5, u\u0303, v\u0303), \u03bb(G\u00b5, u\u0303), \u03bb(G\u00b5, v\u0303), \u03c1l(G\u00b5, u\u0303), \u03c1r(G\u00b5, u\u0303), \u03c1l(G\u00b5, v\u0303), \u03c1r(G\u00b5, v\u0303)). The circular order on the vertices and edges incident to fH induces a right path v\u20320 = u\u0303, e\u20321, v\u20321, . . . , e\u2032h, v\u2032h = v\u0303 and a left path v0 = u\u0303, e1, v1, . . . , e`, v` = v\u0303 from u\u0303 to v\u0303, where the left path is defined as the reverse of the corresponding path from v\u0303 to u\u0303 in the circular order. Let Le and Lv contain all intermediate edge-vertices and true vertices on the left path, respectively. That is, Le = {e1, e2, . . . , e`}, Lv = {v1, v2, . . . , v`\u22121}. For the right path, define analogously Re and Rv. The following holds:\na. Left-turn and right-turn numbers match, that is,\u2211 ve\u2208Le turn\u03b2(fH , ve) + \u2211 vv\u2208Lv\n\u03bb\u03b1(vv, fH) = \u03c4l(G\u00b5, u\u0303, v\u0303),\u2211 ve\u2208Re turn\u03b2(fH , ve) + \u2211 vv\u2208Rv \u03bb\u03b1(vv, fH) = \u03c4r(G\u00b5, u\u0303, v\u0303).\nb. Angles at the poles match,\n\u03bb\u03b1(u\u0303, fH) = \u03bb(G\u00b5, u\u0303), \u03bb\u03b1(v\u0303, fH) = \u03bb(G\u00b5, v\u0303).\nc. Boundary edge directions at the poles match,\n\u03c1\u03b2(fH , e1, u\u0303) = \u03c1l(G\u00b5, u\u0303), \u03c1\u03b2(fH , e\u20321, u\u0303) = \u03c1r(G\u00b5, u\u0303), \u03c1\u03b2(fH , e`, v\u0303) = \u03c1l(G\u00b5, v\u0303), \u03c1\u03b2(fH , e\u2032h, v\u0303) = \u03c1r(G\u00b5, v\u0303).\nWe are now ready to prove that the problem of determining whether there exists a valid pair (\u03b1, \u03b2) is equivalent to checking whether \u03c8 is in the feasible set of \u00b5.\nI Lemma 42. There is an upward planar embedding of G\u00b5 with the shape description \u03c8 if and only if there is a valid pair (\u03b1, \u03b2).\nProof. In the forward direction, take the upward planar embedding E\u00b5 of G\u00b5 that has shape description \u03c8 and produce the corresponding (\u03b1, \u03b2). For each children node \u03bd of \u00b5, consider the upward planar embedding E\u03bd induced by E\u00b5 on G\u03bd which is a subgraph of G\u00b5. Let e be the edge of H that corresponds to \u03bd, assign \u03b2(e) to be the shape in S\u00b5(e) that is defined by the embedding E\u03bd . For each active switch vertex v \u2208 A\u00b5, define \u03b1(v) as follows. By Theorem 1, there is precisely one large angle at v in E\u00b5. If this angle falls inside an inner face of G\u03bde for some virtual edge e, \u03b1(v) is set to be ve. Otherwise, this angle belongs to one of the faces induced by a face f of H; let \u03b1(v) be the corresponding vertex vf . It remains to verify that \u03b1 and \u03b2 defined in this way form a valid pair.\n1. By the condition UP3 of Theorem 1, in E\u00b5 the angles belonging to a face sum up to two if the face is the outer face, and to \u22122 otherwise. In particular, this holds for any face that is induced by a face f of H. The sum of angle values on f is precisely the left part of the Validity Condition 1, since for each v \u2208 V (H), \u03bb\u03b1(v, vf ) is by construction equal to the value of this angle in E\u00b5, and for each e \u2208 E(H) incident to v, turn\u03b2(vf , ve) is precisely the sum of angle values along the boundary walk of G\u03bde lying on f , by definition of a shape description.\n2. Validity Condition 2 follows immediately from conditions UP0\u2013UP2 of Theorem 1 applied to E\u00b5. 3. Validity Condition 3 boils down to verifying that the constructed pair (\u03b1, \u03b2) is set in accordance with the embedding E\u00b5 of G\u00b5 that has shape description \u03c8: 3a is shown analogously to Validity Condition 1, 3b is immediate by the construction of \u03b1, in 3c the values of \u03c1 on both sides are taken from the same embedding and thus necessarily match.\nIn the other direction, consider a valid pair (\u03b1, \u03b2). First, fix a planar embedding E\u00b5 of G\u00b5 based on (\u03b1, \u03b2) together with EH\u00b5 : For each children component (G\u03bde , u, v) fix a\nuv-external upward planar embedding that has the shape description given by \u03b2(ve) on the corresponding virtual edge ve. In particular that fixes a planar embedding E\u03bde of G\u03bde , and an angle assignment \u03bb\u03bde . It remains to fix the circular order of the edges incident to the vertices of the skeleton H and the walk defining the boundary of the outer face. For the former, the embedding EH\u00b5 defines a circular order on the set of virtual edges adjacent to each vertex v of H. On the other hand, the order of the edges incident to v inside each corresponding children component G\u03bde is given by the fixed planar embedding of G\u03bde . Together, this defines a circular order on all the edges of G\u00b5 incident to v. Finally, the boundary walk of the outer face is also defined unambiguouly from the outer face in EH\u00b5 and the embeddings of the children components. Specifically, consider a sequence of virtual edges ve1 ,. . . , ve` forming the boundary of the outer face in EH\u00b5 . Obtain a walk in G\u00b5 by replacing each vei in the above sequence by the left- or right-walk from ui to vi around the outer face in the fixed embeddding E\u03bdei of the component (G\u03bdei , ui, vi), where the left-walk is taken if ui appears right before vi in the clockwise boundary walk of the outer face in E\u03bdei , and the right-walk is taken otherwise. Clearly, E\u00b5 defined in this way is a valid planar embedding of G\u00b5.\nNext, from (\u03b1, \u03b2) we construct an angle assignment \u03bb for G\u00b5 with the embedding E\u00b5 that satisfies Theorem 1, while simultaneously achieving the shape description \u03c8 for (G\u00b5, u\u0303, v\u0303). In what follows we specify how \u03bb is defined for each pair of a vertex v and an incident face f . We distinguish the cases where v \u2208 V (H) and v /\u2208 V (H), and also the cases where f lies inside G\u03bde for some e \u2208 E(H), or f is induced by a face of H.\nCase 1: If f lies inside G\u03bde for some e \u2208 E(H), \u03bb(v, f) = \u03bb\u03bde(v, f), that is, the value of the angle assignment is copied from the corresponding angle assignment on G\u03bde that yields shape description \u03b2(ve). Case 2: If f is induced by a face f \u2032 of H, and v is a vertex of G\u03bde that does not belong to V (H), we put \u03bb(v, f) = \u03bb\u03bde(v, fe), where fe is the external face in the embedding E\u03bde of G\u03bde . Case 3: If f is induced by a face f \u2032 of H and v is a vertex of H, we consider two cases. If v is an active vertex, we put \u03bb(v, f) = 1 if \u03b1(v) = vf \u2032 and \u03bb(v, f) = \u22121 otherwise. If v is not an active vertex, \u03bb(v, f) = 0 if the corresponding angle is flat, and \u03bb(v, f) = \u22121 otherwise.\nNext, we verify that \u03bb defined in this way satisfies the conditions of Theorem 1. If v \u2208 V (G\u03bde), but not in V (H), \u03bb(v, f) is either \u03bb\u03bde(v, f) or \u03bb\u03bde(v, fe), and \u03bb\u03bde(v, \u00b7) satisfies UP0 since (E\u03bde , \u03bb\u03bde) is an upward planar embedding of G\u03bde . Moreover, UP1 and UP2 are also automatically satisfied for v since the angle assignment around v is identical to that of \u03bb\u03bde . Analogously, if f is a face inside G\u03bde , the condition UP3 holds since the angle assignment for the angles of f is identical to that of \u03bb\u03bde , which is a part of an upward planar embedding and thus satisfies UP3.\nIt remains to verify UP0\u20132 for v \u2208 V (H) and UP3 for each face f induced by a face of H. UP0 follows immediately from the definition of \u03bb, see Case 3. If v is a switch vertex of G\u00b5, v is an active vertex, and the mapping \u03b1 picks a certain value for v. If \u03b1(v) = vf \u2032 for some face f \u2032 of H, then \u03bb(v, f) = 1 for the corresponding face f of G\u00b5, and \u03bb(v, f) = \u22121 for all other faces of G\u00b5 that are induced by the faces of H. Moreover, by Validity Condition 2a, for each virtual edge e incident to v in H, the outer angle of v in G\u03bde is large, thus every angle of v inside G\u03bde is small, meaning that every angle at v in G\u00b5 is small, except for the angle at the face f . If \u03b1(v) = ve\u2032 for some edge e\u2032 of H, by Case 3 all the angles of form (v, f), where f is a face induced by H, are small. Analogously, for each virtual edge e incident to v in H, the outer angle of v in G\u03bde is large, meaning that all angles at v inside\nG\u03bde are small. Finally, for the angles at v inside G\u03bde\u2032 , exactly one of them is assigned to large, as the angle assignment follows that of \u03bb\u03bde , which satisfies UP1. Thus, UP1 holds for v.\nIf v is in H and not a switch vertex of G\u00b5, by Case 3 among the angles induced by faces of H, every flat angle is assigned 0, and every switch angle is assigned \u22121. Consider a virtual edge e incident to v in H. If the corresponding component contains only edges of the same direction from v, by Validity condition 2b the outer angle of G\u03bde at v is large, and thus each angle at v inside G\u03bde is small. If, on the other hand, G\u03bde contains a flat angle at v, then either both flat angles are inside G\u03bde , the outer angle of G\u03bde at v is large, and all the other angles at v in G\u03bde (and thus in G\u00b5) are small. Or, the second flat angle at v occurs in a face adjacent to G\u03bde , the outer angle of G\u03bde is flat, and and all the other angles are small. In either case, the Validity Condition 2b together with the fact that the angles assigned in G\u03bde by \u03bb\u03bde satisfy UP0\u20132, ensure the fact that the condition UP2 at v is satisfied.\nFor each face f of G\u00b5 induced by a face f \u2032 of H, Validity Condition 1 of a valid pair immediately implies that UP3 is satisfied. Specifically, for a vertex v in H, the angle of v is set exactly to \u03bb\u03b1(v, vf ). For a vertex v that is not in H, but inside a children component G\u03bde , the value of its angle is a part of the respective left- or right-turn number of G\u03bde , turn\u03b2(vf \u2032 , ve). Thus, the sum of angle values along f is precisely encoded in the left part of Validity Condition 1.\nFinally, it remains to see that the u\u0303v\u0303-external upward planar embedding (E\u00b5, \u03bb) of G\u00b5 has shape description \u03c8. Analogously to verifying UP3, the left parts in Validity Condition 3a can be seen to encode the sum of angle values along the left and right boundary walk of G\u00b5, thus the turn numbers of G\u00b5 are as required by \u03c8. Validity Condition 2b explicitly ensures that the outer pole angles of G\u00b5 are in accordance wit \u03c8. Finally, Validity Condition 3c verifies that the edges incident to the poles on the left and tight outer walk have the direction as specified by \u03c8. J"
        },
        {
            "heading": "7.3 Finding Valid Pairs Using Treewidth",
            "text": "Subsections 7.1 and 7.2 together result in a combinatorial problem that we can solve in order to provide an R-node subprocedure. To provide a more careful analysis of the running time, we introduce a new measure \u03b6 of the graph which, intuitively, bounds the maximum amount of spiraling that can occur for any face of the pertinent graph. Formally, \u03b6 is the maximum over n1(f) and n\u22121(f) (see Theorem 1), over all faces f of all possible planar embeddings of the pertinent graph G\u00b5 of \u00b5. Recalling Proposition 5, we obtain:\nI Observation 43. \u03b6 \u2264 V (G\u00b5), and moreover \u03b6 \u2264 2td(G\u00b5).\nWe can now design a dynamic program that solves the task at hand. The program computes sets of records for each node of a tree-decomposition in a leaf-to-root fashion, where each record is a tuple of the form (angle, shape, score, left, right) where angle and shape contain snapshots of \u03b1 and \u03b2 in the given bag, respectively; score keeps track of the sum of large and small angles for each face in the given bag; and left, right store information about the left-and right-turn-numbers of the outer face.\nI Lemma 44. There is an algorithm that runs in time \u03b6O(tw(H)) \u00b7 (|V (H)|+ |S\u00b5|) and either computes a valid pair, or correctly determines that no such pair exists.\nProof. As our first step, we compute the embedding graph H\u0303 of H and then use the well-known 5-approximation algorithm [5] to obtain a nice tree-decomposition (T, \u03c7) of the embedding graph of width at most 5tw(H\u0303), which is in O(tw(H)) by Lemma 41. We assume\nthat (T, \u03c7) is rooted at the node r and that \u03c7(r) = \u2205. Without loss of generality and for ease of presentation, we will alter this decomposition by adding the face-vertex vH of the outer face to every bag (other than \u03c7(r)) and apply the standard conversion to nice tree-decompositions in order to obtain a nice tree-decomposition with the property that vH is the first vertex introduced on each leaf and the last vertex forgotten just below the root. Let the width of the resulting tree-decomposition (T, \u03c7) be k. To complete the proof, we provide a dynamic programming algorithm A that processes T in a leaf-to-root fashion.\nWe begin by formalizing the records used by A. For each node t \u2208 V (T ), let V vt , V e t , V f t denote the intersection of \u03c7(t) with V v, V e, V f, respectively. At each node t \u2208 V (T ), we will store a record set Rt which will be a set of tuples of the form (angle, shape, score, left, right) where:\nangle maps each switch vertex in V vt \u2229A\u00b5 to an element of (V et \u222aV ft \u222a{assigned, todo}), shape maps each edge-vertex w \u2208 V et to a shape description in a feasible set in S\u00b5(w), score maps each face-vertex in V ft to an integer z such that \u2212\u03b6 \u2264 z \u2264 \u03b6, and left, right are integers whose absolute value is at most \u03b6.\nIntuitively, for each node t \u2208 V (T ) we will use Rt to store all the relevant combinatorial information about the behavior of a valid pair (\u03b1, \u03b2) of G w.r.t. the target shape description \u03c8 in the subgraph induced on \u03c7(Tt); let us call this subgraph Ht. To formalize the semantics of our records, we will first introduce a suitable projection of pairs to Ht: a t-pair is the restriction of pairs to \u03c7(Tt), i.e., a pair of the form (\u03b1t, \u03b2t) where the domain (but not the range) of both mappings \u03b1t and \u03b2t is restricted to \u03c7(Tt) = past(t) \u222a \u03c7(t). A t-pair is valid if Validity Conditions 1, 2, 3b and 3c are satisfied for all vertices in past(t)\u2014in particular, (1) each face-vertex in past(t) achieves the correct sum, (2) each true vertex in past(t) satisfies the condition on its pole angles, and (3b,c) the behavior of the poles and the edges on the outer face incident to the poles in past(t) match \u03c8. Note that Validity Condition 3a is not included in this definition, since it is a global condition that we will keep track of separately and check at the end.\nOur records for each node t will capture information about valid t-pairs as follows: for each tuple (angle, shape, score, left, right) of the form described above, (angle, shape, score, left, right) \u2208 Rt if and only if there exists a valid t-pair (\u03b1t, \u03b2t) with the following properties:\nFor each switch vertex v \u2208 V vt \u2229A\u00b5 such that \u03b1t(v) = w,\nangle(v) = w if and only if w \u2208 \u03c7(t), angle(v) = assigned if and only if w \u2208 past(t), and angle(v) = todo otherwise, i.e., if and only if w \u2208 fut(t).\nFor each ve \u2208 V et , shape(ve) = \u03b2t(ve). For each vf \u2208 V ft representing a face f of H, score(vf ) is the intermediate sum for the term in Validity Condition 1; formally, score(v) = \u2211 ve\u2208V e\u2229N\nH\u0303 (vf )\u2229\u03c7(Tt) turn\u03b2(vf , ve) +\u2211\nv\u2208V v\u2229N H\u0303 (vf )\u2229\u03c7(Tt) \u03bb\u03b1(v, vf ). right and left contain the intermediate sums of Validity Condition 3a, formally:\u2211\nve\u2208Le\u2229\u03c7(Tt)\nturn\u03b2(fH , ve) + \u2211\nvv\u2208Lv\u2229\u03c7(Tt)\n\u03bb\u03b1(vv, fH) = left,\n\u2211 ve\u2208Re\u2229\u03c7(Tt) turn\u03b2(fH , ve) + \u2211 vv\u2208Rv\u2229\u03c7(Tt) \u03bb\u03b1(vv, fH) = right.\nObserve that since Hr = H and \u03c7(r) = \u2205, the set of valid r-pairs is precisely the set of pairs for the instance satisfying all Validity Conditions except for 3a. Hence, in view of Lemma 42, in order to determine whether there exists a valid pair it suffices to verify whether there is a valid r-pair satisfying Validity Condition 3a\u2014i.e., whether there Rr contains a record such that left = \u03c4l(G\u00b5, u\u0303, v\u0303) and right = \u03c4r(G\u00b5, u\u0303, v\u0303).\nHaving defined the syntax and semantics of the records, we proceed to a description of the dynamic programming steps themselves\u2014in particular, we describe how one can compute the record set at each of the four kinds of nodes in a nice tree-decomposition. Leaf node. If t 6= r is a leaf in T with \u03c7(t) = {vH}, we recall that each leaf contains a single vertex vH and we simply set Rt to {(\u2205, \u2205, vH 7\u2192 0, 0, 0}. Introduce node. If t is an introduce node with child told and \u03c7(t) \\ \u03c7(told) = {v}, we compute Rt as follows.\nIf v \u2208 V v, then for each tuple (angle, shape, score, left, right) \u2208 Rtold and each w \u2208 (N(v)\u2229\u03c7(t))\u222a{todo}, we construct the tuple (angle\u222a{v 7\u2192 w}, shape, score\u2032, left\u2032, right\u2032) and add it to Rt where\nscore\u2032 is obtained from score by updating the values for each face vf \u2208 \u03c7(t), i.e., by adding the value of \u03bb\u03b1(v, vf ) to each score(vf ). Notably, if v \u2208 A\u00b5 then every face f \u2208 \u03c7(t) such that angle(v) 6= f has its score decreased by 1 while the face angle(v) has its score increased by 1 (the latter only applies if angle(v) 6= todo). On the other hand, if v 6\u2208 A\u00b5 then every face in \u03c7(t) has its score decreased by 1 for every small angle it has at v (which can be verified directly from H\u0303, regardless of the records). left\u2019 and right\u2019 are obtained from leftand right, respectively, by updating the values of the intermediate sums on the left side in Validicty Condition 3a based on the impact on the newly introduced vertex v. This update is only carried out if v \u2208 Lv or Rv, respectively, and is done by simply adding \u03bb\u03b1(v, fH) to score.\nIf v \u2208 V e, then for each tuple (angle, shape, score, left, right) \u2208 Rtold and each \u03b9 \u2208 S\u00b5, we construct the tuple (angle\u2032, shape\u222a{v 7\u2192 \u03b9}, score\u2032, left\u2032, right\u2032) where score\u2019, left\u2019 and right\u2019 are updated based on the value of turn\u03b2 of the newly introduced shape description \u03b9 in the same way as in the previous case. Moreover, for each vv \u2208 V vt \u2229N(v) such that angle(vv) = todo, we perform an additional branching to determine whether angle\u2032(vv) = todo or angle\u2032(vv) = v; we set angle\u2032 = angle for all vertices not satisfying the condition of this sentence. In each case, we verify whether Validity Condition 2 holds for the pair vv, ve; if not, we discard the non-compliant choice of angle\u2019, and otherwise we add the tuple (angle\u2032, shape \u222a {v 7\u2192 \u03b9}, score\u2032, left\u2032, right\u2032) to Rtold .\nIf v \u2208 V f, then for each tuple (angle, shape, score, left, right) \u2208 Rtold and each vv \u2208 V vt \u2229N(v) such that angle(vv) = todo, we branch to determine whether angle\u2032(vv) = todo or angle\u2032(vv) = v. In each branch, we construct the tuple (angle\u2032, shape, score\u2032, left, right) where score\u2032 matches score on all vertices other than v, and maps v to the intermediate sum of v obtained in an analogous way as in the previous two cases (in particular, we compute the sum turn\u03b2(v, ve) over all ve \u2208 V et plus the sum \u03bb\u03b1(vv, v) over all vV \u2208 V vt based on the information in angle\u2019 and shape). Join node. If t is a join node with children t1 and t2, we compute Rt as follows. For each \u03c11 = (angle1, shape1, score1, left1, right1) \u2208 Rt1 and each \u03c12 = (angle2, shape2, score2, left2, right2) \u2208 Rt2 , we perform two consistency checks:\nCheck the consistency of angle1 and angle2 for each vv \u2208 V vt \u2229A\u00b5: if angle1(vv) \u2208 \u03c7(t) then angle1(vv) = angle2(vv), if angle1(vv) = assigned then angle2(vv) = todo, and\nif angle1(vv) = todo then angle2(vv) \u2208 {todo, assigned}. We perform the analogous checks also for angle2(vv). If any of these checks fail, we discard the current pair of (\u03c11, \u03c12). Check the consistency of shape1 and shape2 for each ve \u2208 V et : it must hold that shape1(ve) = shape2(ve). If any of these checks fail, we discard the current pair of (\u03c11, \u03c12).\nIf the above checks succeeded, we construct a new entry (angle, shape, score, left, right) and add it to Rt. This is carried out as follows:\n1. For each vv \u2208 V vt \u2229A\u00b5 such that angle1(vv) = angle2(vv), set angle(vv) = angle1(vv). For each vv \u2208 V vt \u2229 A\u00b5 such that angle1(vv) 6= angle2(vv), based on the previous checks we know that one was set to assigned while the other to todo; we hence set angle(vv) = assigned. 2. For each ve \u2208 V et , set shape(ve) = shape1(ve). 3. For each vf \u2208 V ft , set score(vf ) = score1(vf ) + score2(vf ) \u2212 corr(vf ) where\ncorr(vf ) nullifies the double-counting of vertices in V vt \u222a V et and is computed as\u2211 ve\u2208V et \u2229N H\u0303 (vf ) turn\u03b2(vf , ve) + \u2211 v\u2208V vt \u2229N H\u0303 (vf ) \u03bb\u03b1(v, vf ) (where turn\u03b2 and \u03bb\u03b1 are ob-\ntained from shape and angle in the same way as for the introduce nodes). 4. Similarly as for score, set left = left1+left2\u2212leftcorr and right = right1+right2\u2212\nrightcorr. Here, leftcorr nullifies the double-counting of vertices in \u03c7(t)\u2229 (Lv \u222aLe) and is equal to \u2211 ve\u2208Le\u2229\u03c7(t) turn\u03b2(fH , ve) + \u2211 vv\u2208Lv\u2229\u03c7(t) \u03bb\u03b1(vv, fH). The value of rightcorr is defined and computed analogously.\nForget node. If t is a forget node with child told and \u03c7(told) \\ \u03c7(t) = {v}, we compute Rt as follows.\nIf v \u2208 V v, for each tuple (angle, shape, score, left, right) \u2208 Rtold we construct a new tuple (angle\u2032, shape, score, left, right) where angle\u2032 is obtained from angle by omitting v from the domain. If v is a pole of H, we also check that Validity Conditions 3b and 3c are satisfied for each neighbor of v, and if not we discard the computed tuple. Otherwise, we add the tuple to Rt.\nIf v \u2208 V e, for each tuple (angle\u2032, shape, score, left, right) \u2208 Rtold we construct a new tuple (angle, shape\u2032, score, left, right) where shape\u2032 is obtained from shape by omitting v from the domain and angle\u2032 is obtained from angle by mapping every vertex that anglemapped to v to assigned instead. If v is incident to a pole of H, we also check that Validity Condition 3c is satisfied. If it is, we add the tuple to Rt.\nIf v \u2208 V f, for each tuple (angle, shape, score, left, right) \u2208 Rtold we construct a new tuple (angle\u2032, shape, score\u2032, left, right) where score\u2032 is obtained from score by omitting v from the domain and angle\u2032 is obtained from angle by mapping every vertex that anglemapped to v to assigned instead. If Validity Condition 1 is satisfied (i.e., if score(v) = \u22122 or, in the case of v = fh, +2), we add the resulting tuple to Rt, and discard it otherwise.\nUsing the above procedures, we compute the record set of all nodes up to Rr, for which we check if there is a record such that left = \u03c4l(G\u00b5, u\u0303, v\u0303) and right = \u03c4r(G\u00b5, u\u0303, v\u0303). If yes, the algorithm outputs \u201cYes\u201d, and otherwise it outputs \u201cNo\u201d. This concludes the description of the algorithm.\nRegarding the running time, the size of each record set is upper-bounded by \u03b6O(tw), and the procedures described in the computation of each type of node can be completed in time at most \u03b6O(tw) per node. The resulting runtime can hence be upper-bounded by \u03b6O(tw) \u00b7 V (H).\nCorrectness follows from the correctness of the computation of the record set for each node t \u2208 V (T ), which can be verified directly from the definitions and the semantics of Rt. J\nAs an consequence of Lemma 44 together with Observation 43, Lemma 42 and Theorem 41, we obtain an R-node subprocedure that runs in XP-time parameterized by treewidth and fixedparameter time parameterized by treedepth. Combining this with the Interface Lemma 24, we conclude:\nI Theorem 45. It is possible to solve Upward Planarity in time nO(tw(G)) and time 2O(td(G)2) \u00b7 n2, where n is the number of vertices of the input digraph G.\n8 Concluding Remarks\nThe presented results show that the combination of SPQR-trees with parameterized techniques is a promising algorithmic tool for geometric graph problems. Indeed, for the case of upward planarity, our framework allows us to reduce the general problem to a similar one on 3- connected graphs, at which point it is possible to use parameter-specific approaches such as dynamic programming or flow networks to obtain a solution. We believe not only that the framework developed here can help obtain other algorithms for Upward Planarity, but that the idea behind the framework can be adapted to solve other problems of interest as well\u2014a candidate problem in this regard would be constrained level planarity testing [8].\nAll algorithms and arguments given within this paper are constructive and can be extended to output an upward planar drawing for each yes-instance of Upward Planarity. An open problem is whether Upward Planarity is W[1]-hard when parameterized by treewidth, or fixed-parameter tractable. It seems that improving the current dynamic programming algorithm to a fixed-parameter one would require non-trivial and non-obvious insights, but the problem has so far also proven resilient to our attempts at obtaining a W[1]-hardness reduction. Another question is whether the fixed-parameter tractability of Upward Planarity parameterized by the number of sources can be lifted to parameterizing by the maximum turn number of a face in the final drawing.\nReferences 1 R\u00e9my Belmonte, Eun Jung Kim, Michael Lampis, Valia Mitsou, and Yota Otachi. Grundy\ndistinguishes treewidth from pathwidth. In 28th Annual European Symposium on Algorithms, ESA 2020, volume 173 of LIPIcs, pages 14:1\u201314:19. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2020.\n2 Paola Bertolazzi, Giuseppe Di Battista, Carlo Mannino, and Roberto Tamassia. Optimal upward planarity testing of single-source digraphs. SIAM J. Comput., 27(1):132\u2013169, 1998.\n3 Paola Bertolazzi, Giuseppe Di Battista, Giuseppe Liotta, and Carlo Mannino. Upward drawings of triconnected digraphs. Algorithmica, 12(6):476\u2013497, 1994.\n4 Bernhard Bliem, Michael Morak, Marius Moldovan, and Stefan Woltran. The impact of treewidth on grounding and solving of answer set programs. J. Artif. Intell. Res., 67:35\u201380, 2020.\n5 Hans L. Bodlaender, P\u00e5l Gr\u00f8n\u00e5s Drange, Markus S. Dregi, Fedor V. Fomin, Daniel Lokshtanov, and Michal Pilipczuk. A ckn 5-approximation algorithm for treewidth. SIAM J. Comput., 45(2):317\u2013378, 2016.\n6 Glencora Borradaile, Philip N. Klein, Shay Mozes, Yahav Nussbaum, and Christian WulffNilsen. Multiple-source multiple-sink maximum flow in directed planar graphs in near-linear time. SIAM J. Comput., 46(4):1280\u20131303, 2017.\n7 Guido Br\u00fcckner, Markus Himmel, and Ignaz Rutter. An SPQR-tree-like embedding representation for upward planarity. In Daniel Archambault and Csaba D. T\u00f3th, editors, 27th International Symposium on Graph Drawing and Network Visualization, GD 2019, volume 11904 of Lecture Notes in Computer Science, pages 517\u2013531. Springer, 2019.\n8 Guido Br\u00fcckner and Ignaz Rutter. Partial and constrained level planarity. In Philip N. Klein, editor, 28th Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2017, pages 2000\u20132011. SIAM, 2017.\n9 Sergio Cabello and Christian Knauer. Algorithms for graphs of bounded treewidth via orthogonal range searching. Comput. Geom., 42(9):815\u2013824, 2009."
        },
        {
            "heading": "10 Hubert Y. Chan. A parameterized algorithm for upward planarity testing. In Susanne Albers",
            "text": "and Tomasz Radzik, editors, 12th Annual European Symposium on Algorithms, ESA 2004, volume 3221 of Lecture Notes in Computer Science, pages 157\u2013168. Springer, 2004."
        },
        {
            "heading": "11 Bruno Courcelle. The monadic second-order logic of graphs. I. Recognizable sets of finite",
            "text": "graphs. Inf. Comput., 85(1):12\u201375, 1990."
        },
        {
            "heading": "12 Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, D\u00e1niel Marx, Marcin",
            "text": "Pilipczuk, Michal Pilipczuk, and Saket Saurabh. Parameterized Algorithms. Springer, 2015.\n13 Giuseppe Di Battista, Peter Eades, Roberto Tamassia, and Ioannis G. Tollis. Graph Drawing: Algorithms for the Visualization of Graphs. Prentice-Hall, 1999.\n14 Giuseppe Di Battista and Roberto Tamassia. On-line planarity testing. SIAM J. Comput., 25(5):956\u2013997, 1996."
        },
        {
            "heading": "15 Walter Didimo, Francesco Giordano, and Giuseppe Liotta. Upward spirality and upward",
            "text": "planarity testing. SIAM J. Discret. Math., 23(4):1842\u20131899, 2009.\n16 Reinhard Diestel. Graph Theory, 4th Edition, volume 173 of Graduate texts in mathematics. Springer, 2012."
        },
        {
            "heading": "17 Frederic Dorn. Dynamic programming and planarity: Improved tree-decomposition based",
            "text": "algorithms. Discret. Appl. Math., 158(7):800\u2013808, 2010.\n18 Rodney G. Downey and Michael R. Fellows. Fundamentals of Parameterized Complexity. Texts in Computer Science. Springer, 2013."
        },
        {
            "heading": "19 Eduard Eiben, Robert Ganian, Thekla Hamm, Fabian Klute, and Martin N\u00f6llenburg. Extending",
            "text": "partial 1-planar drawings. In Artur Czumaj, Anuj Dawar, and Emanuela Merelli, editors, 47th International Colloquium on Automata, Languages, and Programming, ICALP 2020, volume 168 of LIPIcs, pages 43:1\u201343:19. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2020."
        },
        {
            "heading": "20 Robert Ganian, Thekla Hamm, Fabian Klute, Irene Parada, and Birgit Vogtenhuber. Crossing-",
            "text": "optimal extension of simple drawings. In Nikhil Bansal, Emanuela Merelli, and James Worrell, editors, 48th International Colloquium on Automata, Languages, and Programming, ICALP 2021, volume 198 of LIPIcs, pages 72:1\u201372:17. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2021."
        },
        {
            "heading": "21 Robert Ganian, Petr Hlinen\u00fd, Joachim Kneis, Daniel Meister, Jan Obdrz\u00e1lek, Peter Rossmanith,",
            "text": "and Somnath Sikdar. Are there any good digraph width measures? J. Comb. Theory, Ser. B, 116:250\u2013286, 2016."
        },
        {
            "heading": "22 Robert Ganian, Fabrizio Montecchiani, Martin N\u00f6llenburg, and Meirav Zehavi. Parameterized",
            "text": "Complexity in Graph Drawing (Dagstuhl Seminar 21293). Dagstuhl Reports, 11(6):82\u2013123, 2021."
        },
        {
            "heading": "23 Robert Ganian and Sebastian Ordyniak. The complexity landscape of decompositional",
            "text": "parameters for ILP. Artif. Intell., 257:61\u201371, 2018."
        },
        {
            "heading": "24 Robert Ganian, M. S. Ramanujan, and Stefan Szeider. Combining treewidth and backdoors for",
            "text": "CSP. In Heribert Vollmer and Brigitte Vall\u00e9e, editors, 34th Symposium on Theoretical Aspects of Computer Science, STACS 2017, March 8-11, 2017, Hannover, Germany, volume 66 of LIPIcs, pages 36:1\u201336:17. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2017."
        },
        {
            "heading": "25 Ashim Garg and Roberto Tamassia. On the computational complexity of upward and rectilinear",
            "text": "planarity testing. In Roberto Tamassia and Ioannis G. Tollis, editors, DIMACS International\nWorkshop on Graph Drawing, GD \u201994, volume 894 of Lecture Notes in Computer Science, pages 286\u2013297. Springer, 1994."
        },
        {
            "heading": "26 Ashim Garg and Roberto Tamassia. On the computational complexity of upward and rectilinear",
            "text": "planarity testing. SIAM J. Comput., 31(2):601\u2013625, 2001."
        },
        {
            "heading": "27 Carsten Gutwenger and Petra Mutzel. A linear time implementation of SPQR-trees. In Joe",
            "text": "Marks, editor, 8th International Symposium on Graph Drawing, GD \u201900, volume 1984 of Lecture Notes in Computer Science, pages 77\u201390. Springer, 2000."
        },
        {
            "heading": "28 Patrick Healy and Karol Lynch. Two fixed-parameter tractable algorithms for testing upward",
            "text": "planarity. Int. J. Found. Comput. Sci., 17(5):1095\u20131114, 2006."
        },
        {
            "heading": "29 John E. Hopcroft and Robert Endre Tarjan. Dividing a graph into triconnected components.",
            "text": "SIAM J. Comput., 2(3):135\u2013158, 1973."
        },
        {
            "heading": "30 Krist\u00f3f Husz\u00e1r and Jonathan Spreer. 3-manifold triangulations with small treewidth. In Gill",
            "text": "Barequet and Yusu Wang, editors, 35th International Symposium on Computational Geometry, SoCG 2019, June 18-21, 2019, Portland, Oregon, USA, volume 129 of LIPIcs, pages 44:1\u201344:20. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2019.\n31 Michael D. Hutton and Anna Lubiw. Upward planar drawing of single source acyclic digraphs. In Alok Aggarwal, editor, 2nd Annual ACM/SIGACT-SIAM Symposium on Discrete Algorithms, SODA 1991, pages 203\u2013211. ACM/SIAM, 1991."
        },
        {
            "heading": "32 Michael D. Hutton and Anna Lubiw. Upward planar drawing of single-source acyclic digraphs.",
            "text": "SIAM J. Comput., 25(2):291\u2013311, 1996.\n33 T. Kloks. Treewidth: Computations and Approximations. Berlin, 1994. 34 Jaroslav Nesetril and Patrice Ossona de Mendez. Sparsity - Graphs, Structures, and Algorithms,\nvolume 28 of Algorithms and combinatorics. Springer, 2012."
        },
        {
            "heading": "35 Achilleas Papakostas. Upward planarity testing of outerplanar dags. In Roberto Tamassia",
            "text": "and Ioannis G. Tollis, editors, DIMACS International Workshop on Graph Drawing, GD \u201994, volume 894 of Lecture Notes in Computer Science, pages 298\u2013306. Springer, 1994.\n36 Neil Robertson and Paul D. Seymour. Graph minors. III. Planar tree-width. J. Comb. Theory, Ser. B, 36(1):49\u201364, 1984."
        },
        {
            "heading": "37 Marko Samer and Stefan Szeider. Constraint satisfaction with bounded treewidth revisited. J.",
            "text": "Comput. Syst. Sci., 76(2):103\u2013114, 2010.\n38 William T. Trotter and John I. Moore Jr. The dimension of planar posets. J. Comb. Theory, Ser. B, 22(1):54\u201367, 1977."
        }
    ],
    "title": "Parameterized Algorithms for Upward Planarity",
    "year": 2022
}