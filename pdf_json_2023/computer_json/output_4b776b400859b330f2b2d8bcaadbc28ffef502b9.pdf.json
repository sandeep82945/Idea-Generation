{
    "abstractText": "Vehicles in platoons need to process many tasks to support various real-time vehicular applications. When a task arrives at a vehicle, the vehicle may not process the task due to its limited computation resource. In this case, it usually requests to offload the task to other vehicles in the platoon for processing. However, when the computation resources of all the vehicles in the platoon are insufficient, the task cannot be processed in time through offloading to the other vehicles in the platoon. Vehicular fog computing (VFC)-assisted platoon can solve this problem through offloading the task to the VFC which is formed by the vehicles driving near the platoon. Offloading delay is an important performance metric, which is impacted by both the offloading strategy for deciding where the task is offloaded and the number of the allocated vehicles in VFC to process the task. Thus, it is critical to propose an offloading strategy to minimize the offloading delay. In the VFC-assisted platoon system, vehicles usually adopt the IEEE 802.11p distributed coordination function (DCF) mechanism while having various computation resources. Moreover, when vehicles arrive and depart the VFC randomly, their tasks also arrive at and depart the system randomly. In this paper, we propose a semi-Markov decision process (SMDP) based offloading This work was supported in part by the National Natural Science Foundation of China under Grant No. 61701197, in part by the open research fund of State Key Laboratory of Integrated Services Networks under Grant No. ISN23-11, in part by the National Key Research and Development Program of China under Grant No. 2021YFA1000500(4), in part by the 111 Project under Grant No. B23008. (Corresponding Author: Hongmei Ge) Qiong Wu, Siyuan Wang and Hongmei Ge are with the School of Internet of Things Engineering, Jiangnan University, Wuxi 214122, China, and also with the State Key Laboratory of Integrated Services Networks (Xidian University), Xi\u2019an 710071, China (e-mail: qiongwu@jiangnan.edu.cn, {siyuanwang, hongmeige}@stu.jiangnan.edu.cn) Pingyi Fan is with the Department of Electronic Engineering, Beijing National Research Center for Information Science and Technology, Tsinghua University, Beijing 100084, China (e-mail: fpy@tsinghua.edu.cn). Qiang Fan is with Qualcomm, San Jose, CA 95110, USA (e-mail: qf9898@gmail.com) K. B. Letaief is with the Department of Electrical and Computer Engineering, the Hong Kong University of Science and Technology (HKUST), Hong Kong, and also with the Pengcheng Laboratory, Shenzhen 518055, China (e-mail:eekhaled@ust.hk). IEEE XXX, VOL. XX, NO. XX, XXX 2023 strategy while considering these factors to obtain the maximal long-term reward reflecting the offloading delay. Our research provides a robust strategy for task offloading in VFC systems, its effectiveness is demonstrated through simulation experiments and comparison with benchmark strategies. Index Terms Platoons, vehicular fog computing, offloading, delay.",
    "authors": [
        {
            "affiliations": [],
            "name": "Qiong Wu"
        },
        {
            "affiliations": [],
            "name": "Siyuan Wang"
        },
        {
            "affiliations": [],
            "name": "Hongmei Ge"
        },
        {
            "affiliations": [],
            "name": "Pingyi Fan"
        }
    ],
    "id": "SP:4fbfefc8c7d947a0cf69b8a7c5ec0f95db78bdad",
    "references": [
        {
            "authors": [
                "Q. Wu",
                "H. Ge",
                "P. Fan",
                "J. Wang",
                "Q. Fan",
                "Z. Li"
            ],
            "title": "Time-Dependent Performance Analysis of the 802.11p-Based Platooning Communications Under Disturbance",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 69, no. 12, pp. 15760-15773, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "Q. Wu",
                "S. Nie",
                "P. Fan",
                "H. Liu",
                "Q. Fan",
                "Z. Li"
            ],
            "title": "A Swarming Approach to Optimize the One-Hop Delay in Smart Driving Inter-Platoon Communications",
            "venue": "Sensors, Vol. 18, No. 10, Doc. No. 3307, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "N. Zhang",
                "P. Yang",
                "J. Ren",
                "D. Chen",
                "L. Yu",
                "X. Shen"
            ],
            "title": "Synergy of Big Data and 5G Wireless Networks: Opportunities, Approaches, and Challenges",
            "venue": "IEEE Wireless Communications, vol. 25, no. 1, pp. 12-18, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "Jing Fan",
                "Qiong Wu",
                "Junfeng Hao"
            ],
            "title": "Optimal Deployment of Wireless Mesh Sensor Networks based on Delaunay Triangulations",
            "venue": "Proc. of IEEE International Conference on Information, Networking and Automation (ICINA\u201910), Kunming, China, Oct. 2010, pp. 1-5.",
            "year": 2010
        },
        {
            "authors": [
                "Q. Wu",
                "Y. Zhao",
                "Q. Fan",
                "P. Fan",
                "J. Wang",
                "C. Zhang"
            ],
            "title": "Mobility-Aware Cooperative Caching in Vehicular Edge Computing Based on Asynchronous Federated and Deep Reinforcement Learning",
            "venue": "IEEE Journal of Selected Topics in Signal Processing, vol. 17, no. 1, pp. 66-81, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "Q. Wu",
                "S. Shi",
                "Z. Wan",
                "Q. Fan",
                "P. Fan",
                "C. Zhang"
            ],
            "title": "Towards V2I Age-aware Fairness Access: A DQN Based Intelligent Vehicular Node Training and Test Method",
            "venue": "Chinese Journal of Electronics, published online, 2022, doi: 10.23919/cje.2022.00.093.",
            "year": 2022
        },
        {
            "authors": [
                "X. Hou",
                "Y. Li",
                "M. Chen",
                "D. Wu",
                "D. Jin",
                "S. Chen"
            ],
            "title": "Vehicular Fog Computing: A Viewpoint of Vehicles as the Infrastructures",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 65, no. 6, pp. 3860-3873, 2016. IEEE XXX, VOL. XX, NO. XX, XXX 2023",
            "year": 2016
        },
        {
            "authors": [
                "X. Liu",
                "W. Chen",
                "Y. Xia",
                "C. Yang"
            ],
            "title": "SE-VFC: Secure and Efficient Outsourcing Computing in Vehicular Fog Computing",
            "venue": "IEEE Transactions on Network and Service Management, vol. 18, no. 3, pp. 3389-3399, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "A. Hammoud",
                "H. Otrok",
                "A. Mourad",
                "Z. Dziong"
            ],
            "title": "On Demand Fog Federations for Horizontal Federated Learning in IoV",
            "venue": "IEEE Transactions on Network and Service Management, vol. 19, no. 3, pp. 3062-3075, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "Z. Liu",
                "Y. Yang",
                "K. Wang",
                "Z. Shao",
                "J. Zhang"
            ],
            "title": "POST: Parallel Offloading of Splittable Tasks in Heterogeneous Fog Networks",
            "venue": "IEEE Internet of Things Journal, vol. 7, no. 4, pp. 3170-3183, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "N. Ding",
                "S. Cui",
                "C. Zhao",
                "Y. Wang",
                "B. Chen"
            ],
            "title": "Multi-Link Scheduling Algorithm of LLC Protocol in Heterogeneous Vehicle Networks Based on Environment and Vehicle-Risk-Field Model",
            "venue": "IEEE Access, vol. 8, pp. 224211-224223, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "Qiong Wu",
                "Jun Zheng"
            ],
            "title": "Performance Modeling of the IEEE 802.11p EDCA Mechanism for VANET",
            "venue": "Proc. of IEEE Global Communications Conference (Globecom\u201914), Austin, USA, Dec. 2014, pp. 57-63.",
            "year": 2014
        },
        {
            "authors": [
                "Q. Wu",
                "S. Xia",
                "P. Fan",
                "Q. Fan",
                "Z. Li"
            ],
            "title": "Velocity-Adaptive V2I Fair Access Scheme Based on IEEE 802.11 DCF for Platooning Vehicles",
            "venue": "Sensors, No. 4198, Dec. 2018.",
            "year": 2018
        },
        {
            "authors": [
                "H. Nguyen",
                "X. Xiaoli",
                "Md. Noor-A-Rahim",
                "Y. Guan",
                "D. Pesch",
                "H. Li",
                "A. Filippi"
            ],
            "title": "Impact of Big Vehicle Shadowing on Vehicle-to-Vehicle Communications",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 69, no. 7, pp. 6902-6915, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "J. Zheng",
                "Q. Wu"
            ],
            "title": "Performance Modeling and Analysis of the IEEE 802.11p EDCA Mechanism for VANET",
            "venue": "IEEE Transactions on Vehicular Technology, Vol. 65, No. 4, pp. 2673-2687, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "X. Fan",
                "T. Cui",
                "C. Cao",
                "Q. Chen",
                "K. Kwak"
            ],
            "title": "Minimum-Cost Offloading for Collaborative Task Execution of MEC- Assisted Platooning",
            "venue": "Sensors, vol. 19, no. 4, pp. 847, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "X. Ma",
                "J. Zhao",
                "Q. Li",
                "Y. Gong"
            ],
            "title": "Reinforcement learning based task offloading and take-back in vehicle platoon networks",
            "venue": "2019 IEEE International Conference on Communications Workshops (ICC Workshops), Shanghai, China, 2019, pp. 1-6, doi: 10.1109/ICCW.2019.8756836.",
            "year": 2019
        },
        {
            "authors": [
                "Y. Hu",
                "T. Cui",
                "X. Huang",
                "Q.Chen"
            ],
            "title": "Task Offloading Based on Lyapunov Optimization for MEC-assisted Platooning",
            "venue": "2019 11th International Conference on Wireless Communications and Signal Processing (WCSP), Xi\u2019an, China, 2019, pp. 1-5, doi: 10.1109/WCSP.2019.8928035.",
            "year": 2019
        },
        {
            "authors": [
                "H. Du",
                "S. Leng",
                "F. Wu",
                "L. Zhou"
            ],
            "title": "A Communication Scheme for Delay Sensitive Perception Tasks of Autonomous Vehicles",
            "venue": "2020 IEEE 20th International Conference on Communication Technology (ICCT), Nanning, China, 2020, pp. 687-691, doi: 10.1109/ICCT50939.2020.9295766.",
            "year": 2020
        },
        {
            "authors": [
                "D. Zheng",
                "Y. Chen",
                "L. Wei",
                "B.Jiao",
                "L. Hanzo"
            ],
            "title": "Dynamic NOMA-Based Computation Offloading in Vehicular Platoons",
            "venue": "IEEE Transactions on Vehicular Technology, doi: 10.1109/TVT.2023.3274252.",
            "year": 2023
        },
        {
            "authors": [
                "T. Xiao",
                "C. Chen",
                "Q. Pei",
                "H.H. Song"
            ],
            "title": "Consortium Blockchain-Based Computation Offloading Using Mobile Edge Platoon Cloud in Internet of Vehicles",
            "venue": "IEEE Transactions on Intelligent Transportation Systems, vol. 23, no. 10, pp. 17769-17783, Oct. 2022, doi: 10.1109/TITS.2022.3168358.",
            "year": 2022
        },
        {
            "authors": [
                "H. Liao",
                "Z. Zhou",
                "X. Zhao",
                "B. Ai",
                "S. Mumtaz"
            ],
            "title": "Task Offloading for Vehicular Fog Computing under Information Uncertainty: A Matching-Learning Approach",
            "venue": "2019 15th International Wireless Communications and Mobile Computing Conference (IWCMC), Tangier, Morocco, 2019, pp. 2001-2006, doi: 10.1109/IWCMC.2019.8766579.",
            "year": 2019
        },
        {
            "authors": [
                "Z. Zhou",
                "H. Liao",
                "X. Wang",
                "S. Mumtaz",
                "J. Rodriguez"
            ],
            "title": "When Vehicular Fog Computing Meets Autonomous Driving: Computational Resource Management and Task Offloading",
            "venue": "IEEE Network, vol. 34, no. 6, pp. 70-76, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "J. Shi",
                "J. Du",
                "J. Wang",
                "J. Wang",
                "J. Yuan"
            ],
            "title": "Priority-Aware Task Offloading in Vehicular Fog Computing Based on Deep Reinforcement Learning",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 69, no. 12, pp. 16067-16081, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "R. Yadav",
                "W. Zhang",
                "O. Kaiwartya",
                "H. Song",
                "S. Yu"
            ],
            "title": "Energy-Latency Tradeoff for Dynamic Computation Offloading in Vehicular Fog Computing",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 69, no. 12, pp. 14198-14211, 2020. IEEE XXX, VOL. XX, NO. XX, XXX 2023",
            "year": 2020
        },
        {
            "authors": [
                "J. Xie",
                "Y. Jia",
                "Z. Chen",
                "Z. Nan",
                "L. Liang"
            ],
            "title": "Efficient task completion for parallel offloading in vehicular fog computing",
            "venue": "China Communications, vol. 16, no. 11, pp. 42-55, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "S. Iqbal",
                "A.W. Malik",
                "A.U. Rahman",
                "R.M. Noor"
            ],
            "title": "Blockchain-Based Reputation Management for Task Offloading in Micro-Level Vehicular Fog Network",
            "venue": "IEEE Access, vol. 8, pp. 52968-52980, 2020, doi: 10.1109/ACCESS.2020.2979248.",
            "year": 2020
        },
        {
            "authors": [
                "S. Misra",
                "S. Bera"
            ],
            "title": "Soft-VAN: Mobility-Aware Task Offloading in Software-Defined Vehicular Network",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 69, no. 2, pp. 2071-2078, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "C. Liu",
                "K. Liu",
                "X. Xu",
                "H. Ren",
                "F. Jin",
                "S. Guo"
            ],
            "title": "Real-time Task Offloading for Data and Computation Intensive Services in Vehicular Fog Computing Environments",
            "venue": "2020 16th International Conference on Mobility, Sensing and Networking (MSN), Tokyo, Japan, 2020, pp. 360-366, doi: 10.1109/MSN50589.2020.00066.",
            "year": 2020
        },
        {
            "authors": [
                "K. Wang",
                "Y. Tan",
                "Z. Shao",
                "S. Ci",
                "Y. Yang"
            ],
            "title": "Learning-Based Task Offloading for Delay-Sensitive Applications in Dynamic Fog Networks",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 68, no. 11, pp. 11399-11403, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "C. Zhu",
                "J. Tao",
                "G. Pastor",
                "Y. Xiao",
                "Y. Ji",
                "Q. Zhou",
                "Y. Li",
                "A. Yl\u00e4-J\u00e4\u00e4ski"
            ],
            "title": "Folo: Latency and Quality Optimized Task Allocation in Vehicular Fog Computing",
            "venue": "IEEE Internet of Things Journal, vol. 6, no. 3, pp. 4150-4161, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "J. Zhao",
                "M. Kong",
                "Q. Li",
                "X. Sun"
            ],
            "title": "Contract-Based Computing Resource Management via Deep Reinforcement Learning in Vehicular Fog Computing",
            "venue": "IEEE Access, vol. 8, pp. 3319-3329, 2020, doi: 10.1109/ACCESS.2019.2963051.",
            "year": 2020
        },
        {
            "authors": [
                "W. Tang",
                "S. Li",
                "W. Rafique",
                "W. Dou",
                "S. Yu"
            ],
            "title": "An Offloading Approach in Fog Computing Environment",
            "venue": "2018 IEEE SmartWorld, Ubiquitous Intelligence and Computing, Advanced and Trusted Computing, Scalable Computing and Communications, Cloud and Big Data Computing, Internet of People and Smart City Innovation (SmartWorld/SCALCOM/UIC/ATC/CBDCom/IOP/SCI), Guangzhou, China, 2018, pp. 857-864, doi: 10.1109/Smart- World.2018.00157.",
            "year": 2018
        },
        {
            "authors": [
                "B. Yang",
                "M. Sun",
                "X. Hong",
                "X. Guo"
            ],
            "title": "A Deadline-Aware Offloading Scheme for Vehicular Fog Computing at Signalized Intersection",
            "venue": "2020 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops), Austin, TX, USA, 2020, pp. 1-6, doi: 10.1109/PerComWorkshops48775.2020.9156078.",
            "year": 2020
        },
        {
            "authors": [
                "A. Mourad",
                "H. Tout",
                "O.A. Wahab",
                "H. Otrok",
                "T. Dbouk"
            ],
            "title": "Ad Hoc Vehicular Fog Enabling Cooperative Low-Latency Intrusion Detection",
            "venue": "IEEE Internet of Things Journal, vol. 8, no. 2, pp. 829-843, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "C. Liu",
                "K. Liu",
                "S. Guo",
                "R. Xie",
                "V.C.S. Lee",
                "S.H. Son"
            ],
            "title": "Adaptive Offloading for Time-Critical Tasks in Heterogeneous Internet of Vehicles",
            "venue": "IEEE Internet of Things Journal, vol. 7, no. 9, pp. 7999-8011, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "B. Cho",
                "Y. Xiao"
            ],
            "title": "Learning-Based Decentralized Offloading Decision Making in an Adversarial Environment",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 70, no. 11, pp. 11308-11323, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "Y. Wu",
                "J. Wu",
                "L. Chen",
                "G. Zhou",
                "J. Yan"
            ],
            "title": "Fog Computing Model and Efficient Algorithms for Directional Vehicle Mobility in Vehicular Network",
            "venue": "IEEE Transactions on Intelligent Transportation Systems, vol. 22, no. 5, pp. 2599-2614, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "X. Huang",
                "L. He",
                "X. Chen",
                "L. Wang",
                "F. Li"
            ],
            "title": "Revenue and Energy Efficiency-Driven Delay-Constrained Computing Task Offloading and Resource Allocation in a Vehicular Edge Computing Network: A Deep Reinforcement Learning Approach",
            "venue": "IEEE Internet of Things Journal, vol. 9, no. 11, pp. 8852-8868, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "M.Z. Alam",
                "A. Jamalipour"
            ],
            "title": "Multi-Agent DRL-based Hungarian Algorithm (MADRLHA) for Task Offloading in Multi-Access Edge Computing Internet of Vehicles (IoVs)",
            "venue": "IEEE Transactions on Wireless Communications, vol. 21, no. 9, pp. 7641-7652, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "W. Fan",
                "J. Liu",
                "M. Hua",
                "F. Wu",
                "Y. Liu"
            ],
            "title": "Joint Task Offloading and Resource Allocation for Multi-Access Edge Computing Assisted by Parked and Moving Vehicles",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 71, no. 5, pp. 5314-5330, 2022. IEEE XXX, VOL. XX, NO. XX, XXX 2023",
            "year": 2022
        },
        {
            "authors": [
                "Y. Chen",
                "F. Zhao",
                "X. Chen",
                "Y. Wu"
            ],
            "title": "Efficient Multi-Vehicle Task Offloading for Mobile Edge Computing in 6G Networks",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 71, no. 5, pp. 4584-4595, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "C. Chen",
                "Y. Zeng",
                "H. Li",
                "Y. Liu",
                "S. Wan"
            ],
            "title": "A Multi-hop Task Offloading Decision Model in MEC-enabled Internet of Vehicles",
            "venue": "IEEE Internet of Things Journal, vol. 10, no. 4, pp. 3215-3230, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "Y. Lin",
                "Y. Zhang",
                "J. Li",
                "F. Shu",
                "C. Li"
            ],
            "title": "Popularity-Aware Online Task Offloading for Heterogeneous Vehicular Edge Computing Using Contextual Clustering of Bandits",
            "venue": "IEEE Internet of Things Journal, vol. 9, no. 7, pp. 5422-5433, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "L. Liu",
                "M. Zhao",
                "M. Yu",
                "M.A. Jan",
                "D. Lan",
                "A. Taherkordi"
            ],
            "title": "Mobility-Aware Multi-Hop Task Offloading for Autonomous Driving in Vehicular Edge Computing and Networks",
            "venue": "IEEE Transactions on Intelligent Transportation Systems, vol. 24, no. 2, pp. 2169-2182, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "B. Ma",
                "Z. Ren",
                "W. Cheng"
            ],
            "title": "Traffic Routing-Based Computation Offloading in Cybertwin-Driven Internet of Vehicles for V2X Applications",
            "venue": "IEEE Transactions on Vehicular Technology, vol. 71, no. 5, pp. 4551-4560, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "K. Zheng",
                "H. Meng",
                "P. Chatzimisios",
                "L. Lei",
                "X. Shen"
            ],
            "title": "An SMDP-Based Resource Allocation in Vehicular Cloud Computing Systems",
            "venue": "IEEE Transactions on Industrial Electronics, vol. 62, no. 12, pp. 7920-7928, 2015.",
            "year": 2015
        },
        {
            "authors": [
                "C. Wang",
                "C. Liang",
                "F.R. Yu",
                "Q. Chen",
                "L. Tang"
            ],
            "title": "Computation Offloading and Resource Allocation in Wireless Cellular Networks With Mobile Edge Computing",
            "venue": "IEEE Transactions on Wireless Communications, vol. 16, no. 8, pp. 4924-4938, 2017.",
            "year": 2017
        },
        {
            "authors": [
                "D. Malone",
                "K. Duffy",
                "D. Leith"
            ],
            "title": "Modeling the 802.11 Distributed Coordination Function in Nonsaturated Heterogeneous Conditions",
            "venue": "IEEE/ACM Transactions on Networking, vol. 15, no. 1, pp. 159-172, 2007.",
            "year": 2007
        },
        {
            "authors": [
                "Q. Wu",
                "H. Liu",
                "C. Zhang",
                "Q. Fan",
                "Z. Li",
                "K. Wang"
            ],
            "title": "Trajectory Protection Schemes Based on a Gravity Mobility Model in IoT",
            "venue": "Electronics, Vol. 8, No. 148, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "Q. Wu",
                "J. Zheng"
            ],
            "title": "Performance Modeling and Analysis of the ADHOC MAC Protocol for Vehicular Networks",
            "venue": "Wireless Networks, Vol. 22, No. 3, pp. 799-812, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "G. Bianchi"
            ],
            "title": "Performance analysis of the IEEE 802.11 distributed coordination function",
            "venue": "IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535-547, 2000.",
            "year": 2000
        },
        {
            "authors": [
                "Q. Wu",
                "H. Liu",
                "R. Wang",
                "P. Fan",
                "Q. Fan",
                "Z. Li"
            ],
            "title": "Delay Sensitive Task Offloading in the 802.11p Based Vehicular Fog Computing Systems",
            "venue": "IEEE IoT-J, vol. 7, no. 1, pp. 773-785, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "S. Mine",
                "M. Puterman"
            ],
            "title": "Markovian Decision Process",
            "venue": "Amsterdam, The Netherlands: Elsevier, 1970.",
            "year": 1970
        },
        {
            "authors": [
                "M. Puterman"
            ],
            "title": "Markov Decision Processes: Discrete Stochastic Dynamic Programming",
            "venue": "New York, NY , USA: Wiley, 2005.",
            "year": 2005
        },
        {
            "authors": [
                "B. Luo",
                "Y. Yang",
                "H. -N. Wu",
                "T. Huang"
            ],
            "title": "Balancing Value Iteration and Policy Iteration for Discrete-Time Control",
            "venue": "IEEE Transactions on Systems, Man, and Cybernetics: Systems, vol. 50, no. 11, pp. 3948-3958, 2020.",
            "year": 2020
        }
    ],
    "sections": [
        {
            "text": "ar X\niv :2\n30 9.\n10 23\n4v 1\n[ cs\n.N I]\n1 9\nSe p\nVehicles in platoons need to process many tasks to support various real-time vehicular applications. When a task arrives at a vehicle, the vehicle may not process the task due to its limited computation resource. In this case, it usually requests to offload the task to other vehicles in the platoon for processing. However, when the computation resources of all the vehicles in the platoon are insufficient, the task cannot be processed in time through offloading to the other vehicles in the platoon. Vehicular fog computing (VFC)-assisted platoon can solve this problem through offloading the task to the VFC which is formed by the vehicles driving near the platoon. Offloading delay is an important performance metric, which is impacted by both the offloading strategy for deciding where the task is offloaded and the number of the allocated vehicles in VFC to process the task. Thus, it is critical to propose an offloading strategy to minimize the offloading delay. In the VFC-assisted platoon system, vehicles usually adopt the IEEE 802.11p distributed coordination function (DCF) mechanism while having various computation resources. Moreover, when vehicles arrive and depart the VFC randomly, their tasks also arrive at and depart the system randomly. In this paper, we propose a semi-Markov decision process (SMDP) based offloading\nThis work was supported in part by the National Natural Science Foundation of China under Grant No. 61701197, in part by the open research fund of State Key Laboratory of Integrated Services Networks under Grant No. ISN23-11, in part by the National Key Research and Development Program of China under Grant No. 2021YFA1000500(4), in part by the 111 Project under Grant No. B23008. (Corresponding Author: Hongmei Ge)\nQiong Wu, Siyuan Wang and Hongmei Ge are with the School of Internet of Things Engineering, Jiangnan University, Wuxi 214122, China, and also with the State Key Laboratory of Integrated Services Networks (Xidian University), Xi\u2019an 710071, China (e-mail: qiongwu@jiangnan.edu.cn, {siyuanwang, hongmeige}@stu.jiangnan.edu.cn)\nPingyi Fan is with the Department of Electronic Engineering, Beijing National Research Center for Information Science and\nTechnology, Tsinghua University, Beijing 100084, China (e-mail: fpy@tsinghua.edu.cn).\nQiang Fan is with Qualcomm, San Jose, CA 95110, USA (e-mail: qf9898@gmail.com) K. B. Letaief is with the Department of Electrical and Computer Engineering, the Hong Kong University of Science and Technology (HKUST), Hong Kong, and also with the Pengcheng Laboratory, Shenzhen 518055, China (e-mail:eekhaled@ust.hk).\nstrategy while considering these factors to obtain the maximal long-term reward reflecting the offloading delay. Our research provides a robust strategy for task offloading in VFC systems, its effectiveness is demonstrated through simulation experiments and comparison with benchmark strategies.\nIndex Terms\nPlatoons, vehicular fog computing, offloading, delay.\nI. INTRODUCTION\nWith the development of autonomous driving technology, platoons have been widely studied to improve the road safety. A platoon is composed of several autonomous driving vehicles such as a leader vehicle and other member vehicles. The leader vehicle controls the velocity, acceleration and driving direction of the platoon. The member vehicles along the same lane follow the leader vehicle one by one [1], [2]. The on-board equipments of vehicles in the platoon such as radar and lidar collect a large amount of data to support various real-time vehicular applications such as automatic navigation, multimedia entertainment, high definition (HD) map and precise positioning [3]\u2013[6]. These data are usually redundant and thus vehicles in the platoon could compute and analyze the data to extract useful information. Therefore, vehicles in platoons may have many tasks to deal with.\nWhen a task arrives at a vehicle in a platoon, the vehicle may not be able to process the arrived task due to its limited computation resource. In this case, it usually offloads the task to the other vehicles in the platoon for assistant processing, whose result can be sent back to the vehicle. However, when the computation resources of the platoon are still insufficient, the task cannot be processed in time by offloading to the platoon. We have utilized a vehicular fog computing (VFC)-assisted system to tackle this problem, where the VFC is formed by the personal vehicles near the platoon. In VFC-assisted platoon, one vehicle is able to request to offload tasks to the VFC to assist the platoon for processing [7]\u2013[9]. When the requested vehicle offloads a task to the VFC, it transmits the task to the leader vehicle. Afterwards, the system determines how many vehicles in the VFC to process and then the leader vehicle divides the task into the corresponding number of subtasks. Then the leader vehicle transmits the subtasks to the corresponding vehicles in the VFC one by one. After that the vehicles process the assigned subtasks and send back the computing result to the leader vehicle who further forwards the computing result to the requested vehicle.\nOffloading delay is an important metric for the autonomous vehicles in the VFC-assisted platoon system [10]. If the offloading delay is large, the requested vehicle in the platoon would take a long time to receive the result, resulting in unsatisfying the requirements of vehicular applications. The offloading delay\nincludes transmitting delay, computing delay, and backhaul delay. In fact, transmitting delay represents the time that the requested vehicle transmits the task to other vehicles for assistant processing; computing delay represents the time that the vehicles process the task and the backhaul delay is the time that vehicles send back the computing result. The offloading delay is impacted by both the locations where tasks are offloaded and the number of vehicles allocated for task processing. On the one hand, determining the place where the task is offloaded will affect the offloading delay. Specifically, offloading the task to the VFC will incur a higher transmitting delay, while the VFC can provide more computation resources to process the task, which would cause a lower computing delay. Offloading the task to the platoon will incur a lower transmitting delay, while the computation resources in the platoon are limited, which would cause a higher computing delay. Hence, it is important to determine where the task is offloaded to minimize the offloading delay. On the other hand, the number of the allocated vehicles in VFC to process the task will also affect the offloading delay. Specifically, if more vehicles are chosen for offloading, the sufficient computation resources reduce the computing delay, while more subtasks would be divided and transmitted to the vehicles in the VFC in turn, which increases the transmitting delay. Hence, it is another important problem to determine how many vehicles in the VFC to process tasks to minimize the offloading delay. As far as we know, there is no work to design a task offloading strategy in the VFC-assisted platoon, which motivates us to conduct this work.\nIn the VFC-assisted platoon system, vehicles usually adopt the IEEE 802.11p distributed coordination function (DCF) mechanism to offload tasks [11]\u2013[15]. The computation resources of vehicles in the platoon are usually different. Meanwhile, tasks arrive and depart the system randomly, and the vehicles also arrive and depart the VFC randomly. These factors pose challenges to design the optimal offloading strategy to obtain the maximal the long-term reward related to offloading delay of the system. This paper jointly considers the 802.11p DCF mechanism and some factors, i.e., heterogeneous computation resource of vehicles in the platoon, the random task arrival and departure as well as the random arrival and departure of vehicles in the VFC, to design an semi-Markov decision process (SMDP) based offloading strategy by maximizing the long-term reward in the VFC-assisted platoon. The main contributions of this paper are summarized as follows.\n1) We propose an offloading strategy for a VFC-assisted platoon system. This strategy takes into account\nseveral factors, i.e., the heterogeneous computation resources of vehicles in the platoon, the random arrival and departure of task, the random arrival and departure of the vehicles in the VFC, and the 802.11p DCF mechanism. 2) We adopt the SMDP to model the task offloading process and design the SMDP framework including\nstate, action, reward and transition probability, where the transmitting delay is derived according to the 802.11p DCF mechanism to determine the reward. 3) We propose an iterative algorithm to solve the SMDP model to obtain the optimal offloading strategy.\nExtensive experiments demonstrated that the proposed offloading strategy outperforms the baseline strategy.\nThe rest of this paper is organized as follows. Section II reviews the related work. Section III describes the system model briefly. Section IV sets up the SMDP framework to model the offloading process in VFC-assisted platoon. Section V solves the SMDP model by an iterative algorithm. Section VI presents the simulation results. Section VII concludes this paper."
        },
        {
            "heading": "II. RELATED WORK",
            "text": "In this section, we review the state-of-art works on the offloading in platoons and offloading in VFC."
        },
        {
            "heading": "A. Task offloading in platoons",
            "text": "In recent years, some works designed the task offloading strategy in platoon to optimize various performances. In [16], Fan et al. designed the task offloading strategy in the mobile edge computing (MEC)-assisted platoon. They adopted the directed acyclic graph to model the task offloading process, and then employed the Lagrangian relaxation-based aggregated cost (LARAC) algorithm to minimize the cost of the task offloading. In [17], Ma et al. considered the change of vehicle velocity in the platoon and proposed a task offloading and task take-back strategy. The reinforcement learning is adopted to enhance the offloading efficiency and avoid the link disconnection resulting from task processing failures. In [18], Hu et al. designed the task offloading strategy in the MEC -assisted platoon under the stable condition of task queues. The Lyapunov optimization algorithm is employed to reduce the energy consumption of task execution and improve the offloading efficiency considering transmitting delay as well as computing delay. In [19], Du et al. considered the sensing, computation, communication and storage resources of a single autonomous vehicle and proposed a communication strategy for autonomous driving platoon. In addition, they adopted the genetic algorithm to design the offloading strategy to achieve the minimized processing delay. In [20], Zheng et al. proposed a platoon task offloading strategy based on the dynamic non-orthogonal multiple access (NOMA). The long-term energy consumption is minimized by optimizing the allocation of both the communication and computation resource based on the Lyapunov and block successive upper bound minimization (BSUM) methods. In [21], Xiao et al. considered a scenario where the requested vehicle offloads tasks to the vehicles in the platoon and proposed a resource allocation strategy based on the requested vehicle\u2019s service pricing to effectively utilize the resources in the platoon.\nHowever, the computation resource in a platoon is limited. When the resources in the platoon are not enough to process the task, a potential threat will be posed for safety. In this situation, the vehicles driving near the platoon may form a VFC to provide computation resource."
        },
        {
            "heading": "B. Task offloading in VFC",
            "text": "Many works have studied task offloading in the VFC. In [22], Liao et al. considered the uncertain information and designed a task offloading strategy in the VFC to get the minimized total network delay. In [23], Zhou et al. considered a two-stage VFC framework and designed a task offloading strategy according to the price-based matching algorithm to minimize the long-term task offloading delay. In [24], Shi et al. proposed a task offloading strategy, where vehicles are likely to share idle computation resources by dynamic pricing strategy to maximize the utility of offloading tasks. In [25], Yadav et al. considered the vehicular node mobility and end-to-end latency deadline constraints and designed an energy-efficient dynamic computation offloading and resources allocation strategy (ECOS) in the VFC to minimize energy consumption and service latency. In [26], Xie et al. considered the parallel computation task offloading problem in the VFC and proposed an offloading strategy to reduce the service time and improve the amount of the finished tasks by using the hidden Markov model. In [27], Lqbal et al. designed an offloading strategy to improve the performance of queuing delay, end-to-end delay and task completion rate based on the computing capacity and the workload of vehicles in the VFC. In [28], Misra et al. proposed a task offloading strategy in a software-defined VFC network to reduce the task computing delay and minimize the control overhead in the network. In [29], Liu et al. considered the dynamic requirements and resource constraints in the two-layer VFC architecture and proposed a task offloading strategy to maximize the task service rate. In [30], Wang et al. proposed an online learningbased task offloading algorithm in the VFC to minimize the task offloading latency. In [31], Zhu et al. proposed an event-triggered dynamic task allocation framework in the VFC by using linear programmingbased optimization and binary particle swarm optimization to minimize average service latency. In [32], Zhao et al. proposed a contract-based incentive mechanism that combines resource contribution and resource utilization in the VFC to improve the quality of service of vehicles. Moreover, they proposed a task offloading strategy based on the queuing model to enhance the performance of task offloading and resource allocation. In [33], Tang et al. considered the task deadline and proposed an offloading strategy in the VFC to enhance the offloading efficiency. In [34], Yang et al. considered the effective time of tasks in the VFC at the crossroads and proposed a low-cost offloading strategy to enhance the offloading efficiency among vehicles. In [35], Mourad et al. considered the intrusion detection tasks in the VFC and proposed a task offloading strategy to minimize the computation execution time and energy\nconsumption and meanwhile maximize the offloading survivability. In [36], Liu et al. considered a twolayer VFC and proposed an adaptive task offloading mechanism to get the maximal tasks\u2019 completion ratio. In [37], Cho et al. adopted the adversarial multi-armed bandit theory to propose an adversarial online learning algorithm with bandit feedback, which aimed to optimize the selection of vehicles in the VFC to minimize the offloading service costs including the delay and energy. In [38], Wu et al. considered directional vehicle mobility to propose a network model to minimize the average response time of the tasks. They further chose the neighboring vehicles to assist to process task based on a greedy algorithm. In [39], Huang et al. jointly considered the task type as well as the velocity of vehicle to propose the task offloading and resource allocation strategy, which decreases the vehicles\u2019 energy cost and increases the income of the vehicles considering the delay constraint. In [40], Alam et al. developed a three-layer generic decentralized cooperative VFC system to overcome the lack of robustness against the high mobility environment. In [41], Fan et al. proposed a joint task offloading and resource allocation strategy for a VFC including devices and vehicles covered by a base station. In [42], Chen et al. focused on a energy-powered multi-server VFC system with cybertwin, where vehicles send the current status of network and unprocessed vehicular application tasks to the macro base station to get the efficient resources allocation. In [43], Chen et al. proposed a distributed multi-hop task offloading model to get a low delay for the task execution in the VFC. In [44], Lin et al. proposed an online task offloading strategy for the unknown dynamics heterogeneous VFC environment based on the online clustering of bandits (CAB) approaches to minimize the expectation of total offloading energy consumption while satisfy stringent delay requirements by learning the relationship between historical observations and rewards. In [45], Liu et al. considered the vehicle mobility and proposed a task offloading strategy by exploiting the computation resources of vehicles in the VFC to get the minimized weighted sum of execution delay as well as computation cost. In [46], Ma et al. proposed a traffic routing-based computation offloading strategy in the cybertwin-driven VFC for vehicle-to-everything applications to reduce latency. However, these works have not considered the platooning scenario.\nThe works mentioned above show that the strategy of task offloading in VFC has been studied intensively, but for task offloading in the VFC-assisted platoon, to mitigate the limited computation resource, has not been studied. This motivates us to conduct this work. Different from the existing works about task offloading in VFC or platoons, we jointly take into account several factors, i.e., the heterogeneous computation resources of vehicles in the platoon, the random arrival and departure of task, the random arrival and departure of the vehicles in the VFC, and the 802.11p DCF mechanism. Moreover, we adopt the SMDP to model the task offloading process and design the SMDP framework including state, action, reward and transition probability."
        },
        {
            "heading": "III. SYSTEM MODEL",
            "text": "In this section, we first describe the VFC-assisted system, and then briefly review the IEEE 802.11p\nDCF mechanism.\n1) The VFC-assisted platoon: Consider N autonomous vehicles in a platoon driving on a lane with the same velocity and a VFC consisting of the personal vehicles within the communication range of the head vehicle of the platoon. The i-th vehicle in the platoon is Vi (i = 1, . . . , N), where V1 is the leader vehicle and V2, V3, . . . , VN are member vehicles. The computing rate of Vi, i.e., central processing unit (CPU) cycles per second, is denoted as fi(i = 1, . . . , N). The resource of each vehicle in the VFC is virtualized as a resource unit (RU) [47]. Each RU\u2019s computing rate is the same and denoted as fv. We consider the computing rate of an autonomous vehicle in the platoon is larger than the computing rate of a RU, thus fi > fv. The arrival and departure rate of vehicles in the VFC are denoted as \u03bbv and \u00b5v, respectively. The maximum number of vehicles in the VFC system is K (K \u2265 1).\nThe tasks arrive at each vehicle in the platoon according to the Poisson distribution with arrival rate \u03bbp. When a task arrives at a vehicle in the platoon, the system will make a decision to offload the task to the platoon, VFC, or to discard the task according to the available resources in the platoon and VFC. We consider the following two most general cases, (1) the task can be offloaded to only one vehicle in the platoon due to the sufficient computing rate of each vehicle in the platoon and (2) the task can be offloaded to multiple RUs in the VFC due to the limited computing rate of each RU. Specifically, if the available resources in the platoon are sufficient, the vehicle with the arrival task will request to offload\nthe task to the platoon. Otherwise, the system will check if the VFC has sufficient computation resource and offload the task to it instead. In this case, the requested vehicle first transmits the task to the leader vehicle of the platoon, then the system determines the vehicles in the VFC with available resources to process. The leader vehicle divides the task into the corresponding number of subtasks, and transmits the subtasks to the corresponding vehicles in the VFC one by one. After that each vehicle processes the assigned subtasks to him. Once all the subtasks are executed, the result is sent back to the leader vehicle and further forwarded to the requested vehicle. Note that after the system determines the VFC vehicles, they will not be occupied by other subtasks until all of them have finished the processing. Since the result is of small size, the backhaul delay is significantly small and thus can be neglected [48]. If the available resources are scarce in the platoon and VFC, the system will discard the task. Fig. 1 shows an example for the offloading process including task offloading to platoon and to VFC. The task offloading to platoon in Fig. 1 is described as follows. When a task arrives at V 2 in the platoon, and another vehicle Vi in the same platoon has available resource, V 2 offloads the task to Vi for processing. After Vi completes processing the task, it returns the result back to V 2. The task offloading to VFC in Fig. 1 is described as follows. When another task arrives at VN and all the sources of the vehicles in the platoon are occupied. VN first offloads the task to the leader vehicle V1 in the platoon. Then V1 offloads the task to three RUs in the VFC for processing. After processing, the result is returned to V1 and then returned back to VN .\nIn the offloading process, it is assumed that all vehicles in the platoon and VFC communicate with each other within one-hop communication area by adopting the 802.11p DCF mechanism. We will introduce the process of the 802.11p DCF mechanism.\n2) 802.11p DCF mechanism: At the beginning, each vehicle sets the minimum contention window (Wmin) based on 802.11p DCF mechanism [49]. When a vehicle transmits a task to Nv (Nv = 1, 2, 3...) vehicles, the vehicle will partition the task into Nv sub-tasks. When the vehicle transmits the one sub-task to an allocated vehicle, it first detects the state of the channel. If the channel keeps idle for distributed inter-frame space (DIFS), the vehicle will transmit the sub-task. Otherwise, if the channel is busy, the vehicle will continue to detect the channel state until the channel keeps idle for DIFS. Then a back-off process is initialized to transmit the sub-task. Specifically, the vehicle randomly selects a natural number within [0,W \u2212 1] for the backoff counter, where W is the contention window and is initialized as Wmin (i.e., the minimum contention window). The value of the backoff counter is decremented by one if the vehicle detects the idle state in a time slot. The vehicle will transmit the sub-task if the backoff counter is decreased to zero.\nThe sub-task is transmitted successfully if the vehicle receives an acknowledgment (ACK) after a short inter-frame space (SIFS). If the vehicle has not received an ACK after a specific ACK time out interval, the transmission fails. Then the vehicle will initialize another backoff process to retransmit the sub-task, where the contention window is doubled. If the number of retransmissions k does not reach the retransmission limit m, the contention window W will be doubled to 2kWmin and a new backoff process is initialized for retransmission. Otherwise, if the number of retransmissions k reaches the maximum number m, the vehicle will discard the sub-task and reset the contention window as Wmin to transmit the next sub-task. The following sub-tasks are transmitted sequentially according to the above procedure until all sub-tasks are transmitted successfully. Fig. 2 shows the process that the leader vehicle V1 transmits three sub-tasks to three vehicles (denoted as Va, Vb and Vc) in the VFC system."
        },
        {
            "heading": "IV. SMDP FRAMEWORK",
            "text": "In this section, we adopt the SMDP to model the task offloading process in the VFC-assisted platoon system, where the system learns the offloading decision by interacting with the environment in continuous time steps. The duration of each time step follows an exponential distribution. In each step, the system observes the state and then makes an action according to a policy. Afterwards, the system receives a reward which is related to the offloading delay to evaluate the benefit of the system under the state and action. The state transits to the next one according to the state transition probability. After that the system starts the next time step and repeats the above procedures. The target of the SMDP is to find the optimal policy to maximize the long-term reward. Next, we construct the SMDP framework which includes the state set, action set, reward function and state transition probability. For clearity, the notations in this paper are listed in Table I."
        },
        {
            "heading": "A. State set",
            "text": "The states reflect the resource conditions of the system, which is influenced by the events including a task\u2019s arrival and departure, a vehicle\u2019s arrival and departure in the VFC. Hence, we formulate the states as the resource conditions when different events occur. The state set S is formulated as\nS = {n1, . . . , nN , B1, . . . , BNR ,M, e}, (1)\nwhere ni (i = 1, . . . , N ) is a binary to indicate whether the resource of Vi is occupied or not, i.e., ni = 1 indicates that the resource of Vi is occupied and ni = 0 indicates that the resource of Vi is available. Bj (j = 1, . . . , NR) is the number of the tasks that occupy j RUs, NR is the maximum number of RUs that each task can occupy, M is the total number of RUs in the VFC. Thus, the total number of occupied RUs is calculated as \u2211NR\nr=1 rBr, where r is the number of RUs a task occupies, and Br is the number\nof the tasks that occupy r RUs. Then rBr represents the number of the occupied RUs for the tasks occupied r RUs. The total number of occupied RUs should not exceed the total number of RUs in VFC, i.e., \u2211NR\nr=1 rBr \u2264 M . e \u2208 {A,D1, . . . ,DN , L1, . . . , LNR , F+1, F\u22121} is an event, where A denotes that\na task arrives at the system, Di denotes that a task occupying the resource of Vi leaves the system, Lj denotes that a task occupying j RUs in the VFC leaves the system, F+1 denotes that a vehicle arrives at the VFC, F\u22121 denotes that a vehicle leaves the VFC."
        },
        {
            "heading": "B. Action set",
            "text": "The actions reflect the offloading decisions of the system, depending on different events. Specifically, when there is a task arriving, the system will make an offloading decision such as offloading to the platoon, offloading to the VFC or discarding the task, while the system will make no decision when other events occur. Thus, the action set A is formulated as\nA =\n   \n  \n{b, bp1, . . . , b p N , b vf 1 , . . . , b vf NR }, e = A\n{b\u22121}, e \u2208 {D1, . . . ,DN , L1, . . . , LNR , F+1, F\u22121}\n, (2)\nwhere bpi indicates that vehicle Vi in the platoon is allocated to process the offloaded task, b vf j indicates that the system offloads the task to the VFC and allocates total j RUs in the VFC to process the task, b indicates that the system discards the task. b\u22121 indicates that the system takes no action in the current moment."
        },
        {
            "heading": "C. Reward function",
            "text": "The reward function reflects the benefit which is related to the offloading delay under different states and actions. The system will transit from the current state s to the next state when an action a is taken, thus it gets an income U(s, a) when taking action a under state s, and incurs a cost G(s, a) during the duration from state s to the next state. Hence, the reward function under state s and action a is calculated as\nR(s, a) = U(s, a)\u2212G(s, a). (3)\nNext, we will formulate U(s, a) and G(s, a), respectively.\n1) Income: The state changes when an event occurs. Hence, we will formulate the income U(s, a)\nunder the following situations.\n(a) a = bpi , e = A: When there is a task arriving and the available resources of the platoon are sufficient,\nthe system makes an offloading decision to offload the task to vehicle Vi in the platoon. In this case, it has a lower offloading delay than being processed locally. The income is the saved delay. Hence, the income is formulated as \u03b7 (El \u2212 Tp \u2212 d/fi), where \u03b7 is a constant to denote the saved price of each time unit [47], El is the delay for processing the task locally, the transmitting delay Tp means the duration that a vehicle transmits the task to another vehicle in the platoon, d is the required CPU cycles to process each task, thus the processing delay of vehicle Vi is d/fi. (b) a = bvfj , e = A: When there is a task arriving, VFC may have sufficient resources but not for the\nplatoon, the system allocates j RUs to process the task. Thus the task will be first transmitted to the leader vehicle, which then transmits the task to j RUs for processing. Hence, task offloading delay is formulated as \u03b7(El \u2212 Tp \u2212 T vf j \u2212 d/(jfv)), where T vf j is the transmitting delay that the leader vehicle transmits the task to j RUs, and d/(jfv) is the processing delay of j RUs. (c) a = b, e = A: When there is a task arriving and the available resources of both platoon and VFC\nare insufficient, the system will make a decision to discard the task. This decision is detrimental because the vehicle cannot receive the result, thus the system receives a punishment \u2212\u03b6 . (d) a = b\u22121, e \u2208 {D1, . . . ,DN , L1, . . . , LNR , F+1}: When a task departs the system or there is a vehicle\narriving at the VFC, the system do not take action. In this situation, the income of the system is 0.\n(e) a = b\u22121, e = F\u22121, \u2211NR r=1 rBr < M : When there is a vehicle departing the VFC and the VFC has\nthe available RUs, the system takes no action and the income is also 0.\n(f) a = b\u22121, e = F\u22121, \u2211NR r=1 rBr = M : When a vehicle departs the VFC and there is no available RU\nin the VFC, the system also does not take action, but the departing vehicle will interrupt its task processing. Hence, the system receives a punishment \u2212\u03b6 .\nConclusively, the income of system is expressed as\nU(s, a) =         \n       \n\u03b7(El \u2212 Tp \u2212 d fi ), a = bpi , e = A \u03b7(El \u2212 Tp \u2212 T vf j \u2212 d jfv ), a = bvfj , e = A \u2212\u03b6, a = b, e = A 0, a = b\u22121, e \u2208 {D1, . . . ,DN , L1, . . . , LNR , F+1} 0, a = b\u22121, e = F\u22121, \u2211NR r=1 rBr < M \u2212\u03b6, a = b\u22121, e = F\u22121, \u2211NR r=1 rBr = M . (4)\nIn (4), as Tp and T vf j depend on the 802.11p DCF mechanism, we will derive Tp and T vf j accordingly. Let \u03b8 be the number of transmitted sub-tasks, Tslot be the average length of a time slot, Etr be the average number of time slots to transmit a task, thus the transmitting delay Ttr is calculated as\nTtr = \u03b8TslotEtr. (5)\nWhen a vehicle transmits the task to another vehicle in the platoon, the task is not divided and \u03b8 = 1. In this case, Tp = TslotEtr . When the leader vehicle of the platoon transmits a task to j RUs, the task is partitioned into j sub-tasks and \u03b8 = j, and thus we can get T vfj = jTslotEtr.\nNext, we will further derive Tslot and Etr , respectively. For the 802.11p DCF mechanism, a time slot may be at different statuses, such as successful transmission, collision or idle. Thus the average duration of a time slot can be expressed as\nTslot = qidleTidle + qsTs + qcTc, (6)\nwhere qidle, qs and qc are the probabilities of idle, successful transmission and collision, respectively. Tidle, Ts and Tc indicates the durations of idle, successful transmission and collision, respectively.\nBased on the 802.11p DCF mechanism [50]\u2013[52], Ts and Tc are calculated, respectively, as\n \n\nTs = Hh + E[P ]/\u03b8 + SIFS + \u03b4 +ACK +DIFS + \u03b4 Tc = Hh+E[P ]/\u03b8 + SIFS + \u03b4 +ACKtimeout , (7)\nwhere Hh denotes the packet header\u2019s length, E[P ] is a task\u2019s length, \u03b4 is the propagation delay, SIFS, ACK and DIFS are the length of SIFS, ACK and DIFS, respectively, and ACKtimeout is the ACK time out interval\u2019s length.\nNext, qidle, qs and qc are further derived. A time slot is idle when no other vehicles are transmitting in the one-hop communication range, which facilitates one vehicle to execute a successful transmission.\nThus we have\nqidle = (1\u2212 \u03c9) Ntr , (8)\nqs = \u03c9Ntr(1\u2212 \u03c9) Ntr\u22121, (9)\nqc = 1\u2212 qidle \u2212 qs, (10)\nwhere \u03c9 is the transmission probability of a vehicle in a time slot and Ntr is the number of vehicles in the one-hop communication area when a vehicle transmits a task. Note that vehicles in the platoon communicate with each other by one-hop communication over a common channel and the head vehicle communicates with the vehicles in the VFC through one-hop communication over another channel. Thus Ntr equals to N when a vehicle is transmitting the task to another vehicle in the platoon while Ntr becomes M + 1 when the leader vehicle is transmitting the task to vehicles in the VFC.\nIn Eqs. (8)-(10), \u03c9 can be calculated by solving the following equations [53], i.e.,\nq = 1\u2212 (1\u2212 \u03c9)Ntr\u22121, (11)\n\u03c9 = 2(1\u2212 2q)\n(1\u2212 2q)(Wmin + 1) + qWmin(1\u2212 (2q) m)\n, (12)\nwhere q is the collision probability when a vehicle is transmitting and Wmin is the minimum contention window.\nMoreover, according to [54], Etr in (5) can be calculated as\nEtr = 1\u2212 (m+ 2)qm+1 + (m+ 1)qm+2\n2(1\u2212 q) +\n(1\u2212 q)[1\u2212 (2q)m+1]Wmin 1\u2212 2q \u2212 (1\u2212 qm+1)Wmin 2 + qm+1\n2 [m+ 1 + (2m+1 \u2212 1)Wmin+\n(2\u2212 q)(2mWmin + 1)\n1\u2212 q ]\n. (13)\nAs derived above, given Wmin, one can calculate Tslot and Etr according to Eqs. (6)-(13), and Tp and\nT vfj according to (5), then we can get the income according to (4).\n2) Cost: We consider the long-term expected discounted cost during the time step as the cost G(s, a). Since the duration of each time step is assumed to follow an exponential distribution with parameter \u03b1,\nG(s, a) is calculated as [55]:\nG (s, a) = C (s, a)Eas\n \n\n\u03c4 \u222b\n0\ne\u2212\u03b1tdt\n \n\n= C (s, a)Eas\n{\n1\u2212 e\u2212\u03b1\u03c4\n\u03b1\n}\n= C(s, a)\n\u03b1+ \u03b2(s, a)\n, (14)\nwhere \u03b1 is the continuous-time discount factor, C (s, a) is the expected service time\u2019s cost rate under state s and action a, which is calculated as the number of vehicles that are occupied in the system, i.e.,\nC(s, a) = \u2211N\nk=1 nk +\n\u2211NR\nr=1 rBr. (15)\nMeanwhile, \u03b2(s, a) is the sum of the rate of all events under state s and action a. In the system, the rate that the vehicles arrive at the system is \u03bbv, the rate that the vehicles depart the system is \u00b5v, and the rate that tasks arrive at the system is N\u03bbp. In addition, the number of the tasks occupying vehicle Vi and j RUs are ni and Bj , respectively, thus the rates that the departure tasks depart the system after being processed at vehicles in the platoon and VFC can be expressed as \u2211N\nr=1 nk fk d and \u2211NR r=1 rBr fv d ,\nrespectively. Since the state is changed when an event occurs, we will further analyze \u03b2(s, a) under different actions for different events.\n(a) a = bpi , e = A: When there is a task arriving, the system offloads the task to Vi. Thus the rate that\nthe tasks occupying the vehicles in the platoon depart the system becomes \u2211N r=1 nk fk d + fi d .\n(b) a = bvfj , e = A: When there is a task arriving, system offloads the task to j vehicles in VFC.\nThus the rate that the tasks depart the system after being processed at vehicles of the VFC becomes \u2211NR\nr=1 rBr fv d + j fv d .\n(c) a = b\u22121, e = Di: When there is a task occupying vehicle Vi in the platoon, i.e., ni = 1, departs\nthe system, the system makes no action. Thus the rate that the tasks occupying the vehicles in the platoon depart the system becomes \u2211N\nr=1 nk fk d \u2212 fi d .\n(d) a = b\u22121, e = Lj: When a task occupying r vehicles in the VFC departs from the system, the system\nmakes no action. Thus the corresponding event rate becomes \u2211NR r=1 rBr fv d \u2212 r fv d .\n(e) a = b\u22121, e = F+1/F\u22121: When there is a vehicle arriving/departing the system, the system makes\nno action. Thus the rate of each event does not change.\nBased on analysis above, \u03b2(s, a) is summarized as:\n\u03b2(s, a) =                 \n               \nN\u03bbp + \u03bbv + \u00b5v + \u2211N r=1 nk fk d + \u2211NR r=1Brr fv d + fi d , e = A, a = bpi N\u03bbp + \u03bbv + \u00b5v + \u2211N k=1 nk fk d + \u2211NR r=1Brr fv d + j fv d , e = A, a = bvfj N\u03bbp + \u03bbv + \u00b5v + \u2211N k=1 nk fk d + \u2211NR r=1Brr fv d \u2212 fi d , e = Di, a = b\u22121 N\u03bbp + \u03bbv + \u00b5v + \u2211N k=1 nk fk d + \u2211NR r=1Brr fv d \u2212 j fv d , e = Lj , a = b\u22121 N\u03bbp + \u03bbv + \u00b5v + \u2211N k=1 nk fk d + \u2211NR r=1Brr fv d . e = F+1/F\u22121, a = b\u22121\n(16)\nFinally, G(s, a) can be calculated by substituting Eqs. (15) and (16) into (14)."
        },
        {
            "heading": "D. State Transition Probability",
            "text": "In this section, we will derive the state transition probability from the current state s to the next state s\u2032 after taking action a. Let e\u2032 be the event at the next state s\u2032, P (s\u2032|s, a) be the state transition probability from the current state s to the next state s\u2032 after taking action a. The definition of P (s\u2032|s, a) is discussed in the following six cases.\nWhen a task arrives under the current state and the task is offloaded to vehicle Vi in the platoon, the number of the tasks occupying vehicle Vi is incremented by one. In this case, six kinds of different rates are listed as follows: the rate that tasks arrive at the system is N\u03bbp, the rate that tasks occupying vehicle Vi depart the system is (ni + 1) fi d , the rate that the tasks occupying vehicle u (u 6= i) depart from the system is nu fu d , the rate that the tasks occupying j RUs depart the system is jBj fv d , the rate that vehicles arrive and depart the VFC are \u03bbv and \u00b5v, respectively.\nTherefore, the corresponding P (s\u2032|s, a) are calculated respectively as follows:\n(a) If the next event is a task arriving at the system, P (s\u2032|s, a) is calculated as N\u03bbp \u03b2(s,a) . (b) If the next event is that a task occupying vehicle Vi leaves the system, P (s \u2032|s, a) is calculated as\n(ni+1) fi\nd\n\u03b2(s,a) .\n(c) If the next event is that a task occupying vehicle u (u 6= i) leaves the system, P (s\u2032|s, a) is calculated\nas nu\nfu d\n\u03b2(s,a) .\n(d) If the next event is that a task occupying j vehicles in the VFC leaves the system, P (s\u2032|s, a) is\ncalculated as Bj\njfv d\n\u03b2(s,a) .\n(e) If the next event is a vehicle arriving at the VFC, P (s\u2032|s, a) is calculated as \u03bbv \u03b2(s,a) . (f) If the next event is a vehicle leaving the VFC, P (s\u2032|s, a) is calculated as \u00b5v \u03b2(s,a) .\nBased on the above analysis, when s = (n1, . . . , nN , B1, . . . , BNR ,M,A) and a = b p i , the transition\nprobability P (s\u2032|s, a) is given by\nP (s\u2032|s, a) =                    \n                   \nN\u03bbp \u03b2(s,a) , s\u2032 = (n1, . . . , ni + 1, . . . , nN , B1, . . . , BNR ,M,A) (ni+1)\nfi d\n\u03b2(s,a) ,\ns\u2032 = (n1, . . . , ni + 1, . . . , nN , B1, . . . , BNR ,M,Di) nu fu\nd \u03b2(s,a) , u 6= i, s\u2032 = (n1, . . . , ni + 1, . . . , nN , B1, . . . , BNR ,M,Du) Bj\njfv d\n\u03b2(s,a) , s\u2032 = (n1, . . . , ni + 1, . . . , nN , B1, . . . , BNR ,M,Lj)\n\u03bbv \u03b2(s,a) , s\u2032 = (n1, . . . , ni + 1, . . . , nN , B1, . . . , BNR ,M,F+1)\n\u00b5v \u03b2(s,a) , s\u2032 = (n1, . . . , ni + 1, . . . , nN , B1, . . . , BNR ,M,F\u22121)\n. (17)\nSimilarly, the transition probability P (s\u2032|s, a) under other events and actions is calculated as Eqs.\n(18)-(22).\nWhen s = (n1, . . . , nN , B1, . . . , BNR ,M,A), a = b vf j :\nP (s\u2032|s, a) =                     \n                  \nN\u03bbp \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj + 1, . . . , BNR ,M,A) ni\nfi d\n\u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj + 1, . . . , BNR ,M,Di) (Bj+1)\njfv d\n\u03b2(s,a) ,\ns\u2032 = (n1, . . . , nN , B1, . . . , Bj + 1, . . . , BNR ,M,Lj) Bc\ncfv d\n\u03b2(s,a) , c 6= j, s\u2032 = (n1, . . . , nN , B1, . . . , Bj + 1, . . . , BNR ,M,Lc)\n\u03bbv \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj + 1, . . . , BNR ,M,F+1)\n\u00b5v \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj + 1, . . . , BNR ,M,F\u22121)\n. (18)\nWhen s = (n1, . . . , sN , B1, . . . , BNR ,M,Di), a = b\u22121:\nP (s\u2032|s, a) =                    \n                  \nN\u03bbp \u03b2(s,a) , s\u2032 = (n1, . . . , ni \u2212 1, . . . , nN , B1, . . . , BNR ,M,A) (ni\u22121)\nfi d\n\u03b2(s,a) ,\ns\u2032 = (n1, . . . , ni \u2212 1, . . . , nN , B1, . . . , BNR ,M,Di)\nnk fk d \u03b2(s,a) , k 6= i, s\u2032 = (n1, . . . , ni \u2212 1, . . . , nN , B1, . . . , BNR ,M,Dk) Bjj\nfv d\n\u03b2(s,a) , s\u2032 = (n1, . . . , ni \u2212 1, . . . , nN , B1, . . . , BNR ,M,Lj)\n\u03bbv \u03b2(s,a) , s\u2032 = (n1, . . . , ni \u2212 1, . . . , nN , B1, . . . , BNR ,M,F+1)\n\u00b5v \u03b2(s,a) , s\u2032 = (n1, . . . , ni \u2212 1, . . . , nN , B1, . . . , BNR ,M,F\u22121)\n. (19)\nWhen s = (n1, . . . , nN , B1, . . . , BNR ,M,Lj), a = b\u22121:\nP (s\u2032|s, a) =                    \n                  \nN\u03bbp \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj \u2212 1, . . . , BNR ,M,A) ni fi\nd \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj \u2212 1, . . . , BNR ,M,Di) (Bj\u22121)j\nfv d\n\u03b2(s,a) ,\ns\u2032 = (n1, . . . , nN , B1, . . . , Bj \u2212 1, . . . , BNR ,M,Lj) Bcc fv\nd \u03b2(s,a) , c 6= j, s\u2032 = (n1, . . . , nN , B1, . . . , Bj \u2212 1, . . . , BNR ,M,Lc)\n\u03bbv \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj \u2212 1, . . . , BNR ,M,F+1)\n\u00b5v \u03b2(s,a) , s\u2032 = (n1, . . . , nN , B1, . . . , Bj \u2212 1, . . . , BNR ,M,F\u22121)\n. (20)\nWhen s = (n1, . . . , nN , B1, . . . , BNR ,M,F+1), a = b\u22121:\nP (s\u2032|s, a) =       \n     \nN\u03bbp \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M + 1, A) ni fi\nd \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M + 1,Di) Bjj fv d\n\u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M + 1, Lj)\n\u03bbv \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M + 1, F+1)\n\u00b5v \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M + 1, F\u22121)\n. (21)\nWhen s = (n1, . . . , nN , B1, . . . , BNR ,M,F\u22121), a = b\u22121:\nP (s\u2032|s, a) =        \n      \nN\u03bbp \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M \u2212 1, A) ni\nfi d\n\u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M \u2212 1,Di) Bjj fv d\n\u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M \u2212 1, Lj)\n\u03bbv \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M \u2212 1, F+1)\n\u00b5v \u03b2(s,a) , s \u2032 = (n1, . . . , nN , B1, . . . , BNR ,M \u2212 1, F\u22121)\n. (22)"
        },
        {
            "heading": "V. SOLUTION",
            "text": "In this section, we will employ an value iterative algorithm to derive the optimal policy, thus maximizing\nthe long-term reward. Next, we will describe our algorithm in detail.\nAt the beginning, the iteration number and the value function of each state are initialized to zero. Then, for each iteration l, the maximum value function of each state under different actions is calculated based on the Bellman equation until the maximum value function of each state converges. Specifically, the continuous-time SMDP model is first transformed into the discrete-time SMDP model to enable the value iterative algorithm to solve it, where a normalization factor y is introduced to normalize the reward, discount factor and state transition probability of the constructed continuous-time SMDP model [56], i.e.,\nR\u0303(s, a) = R(s, a) \u03b1+ \u03b2(s, a)\n\u03b1+ y , (23)\n\u03b3\u0303 = y\n\u03b1+ y , (24)\nP\u0303 (s\u2032|s, a) =\n \n\n1\u2212 [1\u2212P (s|s,a)]\u03b2(s,a) y , s\u2032 = s P (s\u2032|s,a)\u03b2(s,a) y , s\u2032 6= s , (25)\nwhere y is much larger than \u03b2(s, a) and is calculated as y = N\u03bbp + \u03bbv + \u00b5v + \u2211N i=1 fi +MNRfv/d.\nSubstituting Eqs. (23)-(25) into Bellman equation [57], it calculates the normalized maximum value\nfunction of each state s for iteration l + 1 by\nv\u0303l+1(s) = max a\u2208A\n[\nR\u0303(s, a) + \u03b3\u0303 \u2211\ns\u2032\u2208S\nP\u0303 (s\u2032|s, a)v\u0303l(s \u2032)\n]\n. (26)\nThen the absolute difference of this function of each state between two consecutive iterations, i.e., \u2016v\u0303l+1(s)\u2212 v\u0303l(s)\u2016, is calculated. The algorithm is terminated if the absolute difference is smaller than a very small positive threshold, i.e., \u2016v\u0303l+1(s)\u2212 v\u0303l(s)\u2016 < \u03b5(1 \u2212 \u03b3\u0303)/2\u03b3\u0303. Otherwise, the algorithm moves to the next iteration until it is terminated.\nWhen the algorithm is terminated, it outputs the optimal policy under each state, i.e.,\n\u03c0\u2217 = argmax a\u2208A\n[\nR\u0303(s, a) + \u03b3\u0303 \u2211\ns\u2032\u2208S\nP\u0303 (s\u2032|s, a)v\u0303(s\u2032)\n]\n. (27)\nThe optimal offloading strategy is the actions under the optimal policy \u03c0\u2217.\nThe pseudo-code of the value iteration algorithm is shown in Algorithm 1."
        },
        {
            "heading": "VI. SIMULATION RESULTS",
            "text": "In this section, we conduct simulation experiments to validate our strategy. We use two different\nstrategies as benchmarks:\n1) Greedy strategy, which always selects the maximum available resources in the system to offload\ntasks.\nAlgorithm 1: Value Iteration Algorithm\nInput: s,A, R(s, a), P (s\u2032|s, a), \u03b5(1 \u2212 \u03b3\u0303)/2\u03b3\u0303 Output: the optimal policy \u03c0\u2217\n1 Initialize v(s)=0, k = 0, for each s \u2208 S; 2 for each s \u2208 S do 3 v\u0303l+1(s) = max a\u2208A [ R\u0303(s, a) + \u03b3\u0303 \u2211\ns\u2032\u2208S\nP\u0303 (s\u2032|s, a)v\u0303l(s \u2032)\n]\n;\n4 if \u2016v\u0303l+1(s)\u2212 v\u0303l(s)\u2016 < \u03b5(1 \u2212 \u03b3\u0303)/2\u03b3\u0303 then 5 for each s \u2208 S do 6 \u03c0\u2217 = argmax a\u2208A [ R\u0303(s, a) + \u03b3\u0303 \u2211 s\u2032\u2208S P\u0303 (s\u2032|s, a)v\u0303(s\u2032) ] ; 7 else 8 l = l + 1; 9 return to Line 2;\n10 return the optimal policy \u03c0\u2217;\nSMDP-based strategy has the polynomial complexity of O(N2) [58], while the complexities of the greedy strategy and equal probability strategy are O(N) [59]. The experiment tool is MATLAB 2019a and the simulation scenario is described in section III. Some key parameters are listed in Table II by referring to [54].\nIn the simulation, Case0, Case1 and Case2 represent the decisions to offload the arriving tasks to the platoon, VFC or to discard the tasks, respectively. A1, A2 and A3 represent that the system allocates one, two and three RUs of the VFC for processing, respectively.\nFig. 3 shows the probabilities of Case0, Case1 and Case2 for different maximum number of RUs in VFC when the task arrival rate is 20 task/s and d is 40 cycles. We can see that the probability of\nCase2 always keeps a small value, which validates that our strategy can process most of tasks with high probability and only discard few tasks. In addition, the probability of Case0 is always larger than that of Case1. This is because that the platoon has more available resources than VFC, and the system tends to offload the task to the platoon. Moreover, the probability of Case1 first gradually increases and the probability of Case0 first gradually decreases, because the resources in the VFC are gradually increasing with the increase of the maximum number of RUs in the VFC. In this case, more RUs in the VFC can be allocated to process tasks, which decreases the computing delay, thus the system tends to offload the tasks to the VFC to get a larger long-term reward. It also can be seen that the probability of Case0 is increasing while the probability of Case1 is decreasing as the maximum number of RUs continues to increase, because as the maximum number of RUs continues to increase, more vehicles in the VFC will face a higher collision probability and thus prolongs the transmitting delay. In this case, the system tends to offload the task to the platoon to get a higher long-term reward. In summary, there exists one best number of vehicles in VFC to deal with the tasks. This result will help us to control the number of VFC\u2019s vehicles when designing VFC in applications.\nFig. 4 shows the probabilities of A1, A2 and A3 when the task arrival rate is 20 task/s and d is 40 cycles. We can see that the probability of A3 is always larger than those of A1 and A2, and the probability of A2 is larger than that of A1 at the beginning. This is because that the VFC needs to process a lot of tasks when the task arrival rate is 20 task/s. The system tends to allocate RUs as many as possible to process the task, and the computing delay can be reduced. In addition, the probabilities of A1 and A2 first decrease and the probability of A3 first increases with the increase of maximum number of RUs. This is because the resources in VFC gradually increase as the maximum number of RUs increases. The system tends to allocate more RUs in the VFC to reduce the computing delay and obtain a higher long-term reward. Moreover, the probability of A2 becomes smaller than that of A1 as the maximum number of RUs continues to increase. This is due to that the system allocates more RUs to process tasks due to the high probability of A3 in the VFC, which increases the collision probability and transmitting delay. In this case, the system tends to allocate tasks to one RU rather than two RUs to reduce the collision probability. We can also observe that the probabilities of A1 and A2 increase and the probability of A3 decreases as the maximum number of RUs continues to increase. This is because\nthat more vehicles transmit data with the increase of the maximum number of RUs, which increases the collision probability and incurs a large transmitting delay. Thus the system will tend to allocate less RUs to process the task.\nFig. 5 shows the long-term rewards for different maximum numbers of vehicles in VFC, different strategies and task arrival rates when d is 40 cycles. We can see that the long-term reward of the system gradually under different strategies increases with the increase of the maximum number of vehicles in VFC. This is because that the available resource increases as the maximum number of vehicles in VFC increases, which reduces both computing delay and transmitting delay and further improves the long-term reward. In addition, we can find that under different task arrival rates, our proposed strategy can obtain a larger long-term reward than the greedy strategy while the equal probability strategy is inferior to greedy strategy. The reason is that the equal probability strategy does not consider the potential available resources in platoons and VFC, and the greedy strategy always allocates the maximum available resource in the system without considering the long-term reward, while our strategy jointly considers various factors to maximize the long-term reward. Moreover, we can see the long-term reward of our strategy for\nthe task arrival rate \u03bbp being 20 task/s is smaller than that for \u03bbp being 13 task/s. This is because that when \u03bbp increases, there are more tasks in the system and thus the time of transmitting and processing tasks becomes longer, which results in smaller long-term reward. We also see that the long-term rewards of the greedy strategy and equal probability strategy are almost the same under different task arrival rates. This is because that the greedy strategy always allocates the maximum available resources for processing, and the equal probability strategy allocates resource based on equal probabilities without considering the variation of the task arrival rate.\nFig. 6 shows the probabilities of Case0, Case1 and Case2 for different task arrival rates when d is 40 cycles and K is 6. We can see that our system can keep a small probability of discarding the tasks, which validates that our strategy can process most of tasks with high probability and only discard few tasks. In addition, the probability of Case0 is always larger than that of Case1. This is because that the platoon has more available resources than VFC, and the system tends to offload the task to the platoon. When the task arrival rate is increasing, the probability of Case0 is decreasing and the probability of Case1 is increasing. This is because that the resources in the platoon are fixed, and thus when the task\narriving rate is large, system tends to allocate more tasks to VFC to process quickly.\nFig. 7 shows the probabilities of A1, A2 and A3 for different task arrival rates when d is 40 cycles and K is 6. We can see that when the task arrival rate increases, the probability of A1 decreases, the probability of A2 increases, and the probability of A3 first increases and then decreases. This is becase that when the task arrival rate is small, the collision probability is small and allocating more RUs will lead to fast task processing. As the task arrival rate keeps increasing, allocating 3 RUs will lead a large collision probability because that each task will be divided to 3 subtasks to transmit. In this case, the negative impact caused by the collision probability will lead a large delay, which outweights the positive impact of fast task processing. Therefore, the probability of A3 decreases when the task arrival rate is large.\nFig. 8 shows the delay of offloading a task for different required CPU cycles to process each task and different strategies when \u03bbp is 20 task/s and K is 6. We can see that the offloading delay under different strategies increases with the increasing of required CPU cycles to process each task. This is the time of processing a task becoming longer, thus the offloading delay is also increased. We also see that\nthe delay of the equal probability strategy is the highest and the delay of our strategy is slightly higher than that of the greedy strategy. This is because that the equal probability strategy allocates resource randomly without considering the performance including delay and resources consumption. In addition, our strategy has a slightly higher delay than that of the greedy strategy. This is because the optimization object of our strategy is not only the offloading delay but also the resource occupancy, which is detailed in Eq. (15). However, the system adopting greedy algorithm always chooses the available resource to minimize the offloading delay without considering the resource occupancy, thus its offloading delay is lower but its long-term reward is inferior to that of our strategy.\nFig. 9 shows the delay of offloading a task for different maximum numbers of vehicles and different strategies in VFC when \u03bbp is 20 task/s and d is 40 cycles. We can see that the delay of different strategies increases with the maximum number of vehicles in VFC increases. It is because that with the number of vehicles in VFC increases, the collision probability increases, which causes more transmitting delay. Moreover, the delay of equal probability strategy is the highest and the delay of greedy algorithm is slightly lower than that of our strategy. This is due to the same reason as shown in Fig. 8."
        },
        {
            "heading": "VII. CONCLUSIONS",
            "text": "In this paper, we jointly considered the 802.11p DCF mechanism, heterogeneous computation resource of vehicles in the platoon, random task arrival and departure as well as the random arrival and departure of vehicles in VFC. Then we proposed an offloading strategy to obtain the maximal long-term reward based on the SMDP. We first adopted the SMDP to model the offloading process and designed the SMDP framework including state set, action set, reward function and transition probability, where the transmitting delay are derived based on to the 802.11p DCF mechanism to determine the reward. Then we adopt the value iteration algorithm to solve the SMDP model to obtain the optimal offloading strategy. Extensive experiments have been conducted to demonstrate the outperformance of our strategy. According to the theoretical analysis and simulation results, the following conclusions are summarized:\n\u2022 Our strategy can process most of tasks and discard few tasks. In addition, the system prefers to\noffload to the platoon because the available resources in the platoon are larger than that in VFC. Moreover, there are more available RUs as the resources in the VFC increase, thus the system tends to offload task to the VFC. As the resources in the VFC keep increasing, the system tends to offload\nto the platoon due to the increase of the collision probability in the VFC.\n\u2022 The system under our strategy tends to allocate more RUs in the VFC for processing as increase\nof the resources in the VFC, but as the resources in the VFC keep increasing, the system tends to allocate less RUs for processing due to the increased collision probability in the platoon. \u2022 Our strategy performs better than the greedy strategy because the 802.11p DCF, heterogeneous\ncomputation resource of vehicles in the platoon, the random task arrival and departure as well as random arrival and departure of vehicles in VFC have been jointly considered to get the maximal long-term reward. \u2022 When the task is allocated to more RUs, the total delay which includes the transmitting delay in the\nplatoon, transmitting delay form the leader vehicle to VFC and the computing delay in the RUs is small. \u2022 When d and K are fixed, different task arrival rates will influence the action probability of A1, A2,\nA3, Case0, Case1 and Case2. The offloading delay is increasing with the increase of required CPU cycles due to the increasing computing delay in the RUs."
        },
        {
            "heading": "ACKNOWLEDGMENT",
            "text": "The authors are indebted to Wenhua Wang and Jiahou Chu with Jiangnan University, for their help\nwith this work."
        }
    ],
    "title": "Delay-sensitive Task Offloading in Vehicular Fog Computing-Assisted Platoons",
    "year": 2023
}