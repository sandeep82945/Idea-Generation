{
    "abstractText": "We present SSD \u2013 Software for Systems with Delays, a de novo MATLAB package for the analysis and model reduction of retarded time delay systems (RTDS). Underneath, our delay system object bridges RTDS representation and Linear Fractional Transformation (LFT) representation of MATLAB. This allows seamless use of many available visualizations of MATLAB. In addition, we implemented a set of key functionalities such as H2 norm and system gramian computations, balanced realization and reduction by direct integral definitions and utilizing sparse computation. As a theoretical contribution, we extend the frequency-limited balanced reduction to delay systems first time, propose a computational algorithm and give its implementation. We collected two set of benchmark problems on H2 norm computation and model reduction. SSD is publicly available in GitHub \u2217. Our reproducible paper and two benchmarks collections are shared as executable notebooks. \u2217 https://github.com/gumussoysuat/ssd",
    "authors": [
        {
            "affiliations": [],
            "name": "Suat Gumussoy"
        }
    ],
    "id": "SP:5f9cf0d8642c16421b73761c7a22949261b21cd7",
    "references": [
        {
            "authors": [
                "A.C. Antoulas"
            ],
            "title": "Approximation of Large-Scale",
            "venue": "Dynamical Systems. SIAM,",
            "year": 2005
        },
        {
            "authors": [
                "P. Appeltans",
                "W. Michiels"
            ],
            "title": "A pseudo-spectra based characterisation of the robust strong H-infinity norm of time-delay systems with real-valued and structured uncertainties",
            "year": 1909
        },
        {
            "authors": [
                "P. Appeltans",
                "S.-I. Niculescu",
                "W. Michiels"
            ],
            "title": "Analysis and Design of Strongly Stabilizing PID Controllers for Time-Delay Systems",
            "venue": "SIAM J. Control Optim.,",
            "year": 2022
        },
        {
            "authors": [
                "D. Breda",
                "S. Maset",
                "R. Vermiglio"
            ],
            "title": "TRACE-DDE: a Tool for Robust Analysis and Characteristic Equations for Delay Differential Equations",
            "venue": "Topics in Time Delay Systems, Springer,",
            "year": 2009
        },
        {
            "authors": [
                "D. Breda",
                "O. Diekmann",
                "M. Gyllenberg",
                "F. Scarabel",
                "R. Vermiglio"
            ],
            "title": "Pseudospectral discretization of nonlinear delay equations: New prospects for numerical bifurcation analysis",
            "venue": "SIAM J. Appl. Dyn. Syst.,",
            "year": 2016
        },
        {
            "authors": [
                "K. Engelborghs",
                "T. Luzyanina",
                "D. Roose"
            ],
            "title": "Numerical bifurcation analysis of delay differential equations using DDE-BIFTOOL",
            "venue": "ACM Transactions on Mathematical Software,",
            "year": 2002
        },
        {
            "authors": [
                "W.H. Enright",
                "H. Hayashi"
            ],
            "title": "A delay differential equation solver based on a continuous Runge-Kutta method with defect control",
            "venue": "Numerical Algorithms,",
            "year": 1997
        },
        {
            "authors": [
                "W. Gawronski",
                "J.-N. Juang"
            ],
            "title": "Model reduction in limited time and frequency intervals",
            "venue": "International Journal of Systems Science,",
            "year": 1990
        },
        {
            "authors": [
                "S. Gumussoy",
                "W. Michiels"
            ],
            "title": "A predictor\u2013corrector type algorithm for the pseudospectral abscissa computation of time-delay systems",
            "year": 2010
        },
        {
            "authors": [
                "S. Gumussoy",
                "W. Michiels"
            ],
            "title": "Fixed-Order H-Infinity Control for Interconnected Systems Using Delay Differential Algebraic Equations",
            "venue": "SIAM J. Control Optim,",
            "year": 2011
        },
        {
            "authors": [
                "S. Gumussoy",
                "B. Eryilmaz",
                "P. Gahinet"
            ],
            "title": "Working with Time-Delay Systems in MATLAB",
            "venue": "IFAC Proceedings Volumes,",
            "year": 2012
        },
        {
            "authors": [
                "E. Jarlebring",
                "T. Damm",
                "W. Michiels"
            ],
            "title": "Model reduction of time-delay systems using position balancing and delay",
            "venue": "Lyapunov equations. Math. Control Signals Syst.,",
            "year": 2013
        },
        {
            "authors": [
                "Y.-L. Jiang",
                "Z.-Y. Qiu",
                "P. Yang"
            ],
            "title": "Structure preserving model reduction of second-order time-delay systems via approximate Gramians",
            "venue": "IET Circuits, Devices & Systems,",
            "year": 2019
        },
        {
            "authors": [
                "S. Naderi Lordejani",
                "B. Besselink",
                "A. Chaillet",
                "N. van de Wouw"
            ],
            "title": "Model order reduction for linear time delay systems: A delay-dependent approach based on energy",
            "venue": "functionals. Automatica,",
            "year": 2020
        },
        {
            "authors": [
                "W. Michiels",
                "S. Gumussoy"
            ],
            "title": "Characterization and computation of H-infinity norms of time-delay systems",
            "venue": "SIAM Journal on Matrix Analysis and Applications,",
            "year": 2010
        },
        {
            "authors": [
                "W. Michiels",
                "E. Jarlebring",
                "K. Meerbergen"
            ],
            "title": "KrylovBased Model Order Reduction of Time-delay Systems",
            "venue": "SIAM J. Matrix Anal. Appl.,",
            "year": 2011
        },
        {
            "authors": [
                "W. Michiels"
            ],
            "title": "Spectrum-based stability analysis and stabilisation of systems described by delay differential algebraic equations",
            "venue": "IET Control Theory & Applications,",
            "year": 2011
        },
        {
            "authors": [
                "J. Peeters",
                "W. Michiels"
            ],
            "title": "Computing the H2 norm of large-scale time-delay systems",
            "venue": "IFAC Proceedings Volumes,",
            "year": 2013
        },
        {
            "authors": [
                "M. Saadvandi",
                "K. Meerbergen",
                "E. Jarlebring"
            ],
            "title": "On dominant poles and model reduction of second order time-delay systems",
            "venue": "Applied Numerical Mathematics,",
            "year": 2012
        },
        {
            "authors": [
                "G. Scarciotti",
                "A. Astolfi"
            ],
            "title": "Model Reduction by Moment Matching for Linear Time-Delay Systems",
            "venue": "IFAC Proceedings Volumes,",
            "year": 2014
        },
        {
            "authors": [
                "L.F. Shampine",
                "S. Thompson"
            ],
            "title": "Solving DDEs in Matlab",
            "venue": "Applied Numerical Mathematics,",
            "year": 2001
        },
        {
            "authors": [
                "T. Vyh\u013a\u0131dal"
            ],
            "title": "\u0179\u0131tek. QPmR-Quasi-polynomial rootfinder: Algorithm update and examples",
            "venue": "Delay Systems, Springer,",
            "year": 2014
        },
        {
            "authors": [
                "Z. Wu",
                "W. Michiels"
            ],
            "title": "Reliably computing all characteristic roots of delay differential equations in a given right half plane using a spectral method",
            "venue": "Journal of Computational and Applied Mathematics,",
            "year": 2012
        }
    ],
    "sections": [
        {
            "text": "Keywords: H2 norm, frequency-limited balanced reduction, software, sparse computation."
        },
        {
            "heading": "1. INTRODUCTION",
            "text": "Software packages are essential and practical tools for analysis and design of control systems. Considerable research effort is devoted to extend classical and modern control techniques to accommodate delays. Without being exhaustive and focusing only publicly available ones, we can group software packages as:\n\u2022 Solution of delay differential equations, Hairer et al. (1995); Enright et al. (1997); Shampine et al. (2001). \u2022 Stability and bifurcation analyses, Engelborghs et al.\n(2002); Breda et al. (2009); Wu et al. (2012); Avanessoff et al. (2013); Vyhlidal et al. (2014); Breda et al. (2016). \u2022 System norms and other metrics, Michiels et al.\n(2010); Gumussoy et al. (2010); Appeltans et al. (2019). \u2022 Controller design:\n\u00b7 Stabilization, Michiels (2011b). \u00b7 Pole placement, Boussaada et al. (2021). \u00b7 PID design, Gumussoy et al. (2012); Appeltans\net al. (2022). \u00b7 H\u221e control, Gumussoy et al. (2011).\nThis paper gives a guided tour to a new MATLAB package, Software for Delay Systems (SSD) focusing on model reduction and H2 norm computation for retarded time delay systems (RTDSs). Our main contributions are\n\u2022 allowing easy-to-access MATLAB\u2019s time and frequency domain visualizations by bridging RTDS and MATLAB\u2019s LFT representation, \u2022 publicly available implementation of model reduction and H2 norm computation using their direct defini-\ntions of the integral form and utilizing sparse computation, \u2022 as a theoretical contribution, extension of the frequencylimited balanced reduction first time for RTDS and a computational algorithm via integral expressions for delay systems, \u2022 collecting two sets of benchmark problems on model\nreduction and H2 norm computation and sharing them as two executable notebooks, \u2022 making our paper completely executable and repro-\nducible to facilitate reproducible research.\nOur goals are two folds: First, to introduce publicly available functionalities as a baseline approach for comparison with the advanced techniques in model reduction and H2 norm computation. Second, to facilitate the analysis of delay systems having small to mid-size state dimensions by SSD\u2019s easy-to-use interface.\nThe paper is organized as follows. First we define the delay system representation as an RTDS and show its use in the next section. We illustrate how time and frequency domain visualizations are used in Section 3. The model reduction functionalities and H2 norm computation are overviewed in Section 4. We summarized the collected benchmark problems in Section 5. We give details on the computational aspects of our MATLAB package in Section 6. We end our paper with concluding remarks and some future directions."
        },
        {
            "heading": "2. DELAY SYSTEM DEFINITION",
            "text": "SSD constructs a retarded time-delay system as\nar X\niv :2\n20 8.\n11 82\n7v 1\n[ m\nat h.\nO C\n] 2\n5 A\nug 2\n02 2\nx\u0307(t) = mA\u2211 i=0 Ai x(t\u2212 hAi ) + mB\u2211 i=0 Bi u(t\u2212 hBi ), (1)\ny(t) = mC\u2211 i=0 Ci x(t\u2212 hCi ) + mD\u2211 i=0 Di u(t\u2212 hDi ).\nThe system matrices are Ai \u2208 Rn\u00d7n, Bi \u2208 Rn\u00d7nu , Ci \u2208 Rny\u00d7n and Di \u2208 Rny\u00d7nu . The number of time delays are mA, mB for states and inputs in the state equation and mC , mD for states and inputs in the output equation. By convention, hA0 = h B 0 = h C 0 = h D 0 = 0. All delays are non-negative real numbers.\nThe ssd object is constructed using the function ssd as\n>> sys = ssd(A,hA,B,hB,C,hC,D,hD);\nwhere A, B, C, and D matrices are 3-dimensional matrices and hA, hB, hC, and hD are unique, increasing nonnegative vectors as shown below in Figure 1.\nWe borrow the following delay system from Jarlebring et al. (2013) as a motivational example,\nx\u0307(t) = [ \u22122 \u22121 \u22123/2 \u22121/2 ] x(t) + [ 0 1/2 1 0 ] x(t\u2212 1) + [ 1 \u22121 ] u(t),\ny(t) = [ 2 0.2 ]x(t).\nWe first define the system matrices as follows,\n>> A0 = [-2 -1; -3/2 -1/2]; >> A1 = [0 1/2; 1 0]; >> A = cat(3,A0,A1); >> B = [1; -1]; >> C = [2 0.2];\nThen we create the ssd object by\n>> sys = ssd(A,[0 1],B,0,C,0)\nsys =\nssd with properties:\nA: [2\u00d72\u00d72 double] hA: [0 1] B: [2\u00d71 double] hB: 0 C: [2 0.2000] hC: 0 D: 0\nhD: 0 name: []\nNote that there is no D matrix in the above example. Therefore, the matrix and its delay argument are not included. Alternatively, one can set them to empty vector, [ ] or enter zero matrix with appropriate dimensions and zero delay.\nThe interface of ssd is a natural extension of state-space object, ss(A,B,C,D), of MATLAB by introducing extra delays per system matrix. While the ssd object keeps the delay system structure, it also constructs the MATLAB\u2019s LFT-based ss object with delays behind the scenes to leverage pre-defined functionalities of MATLAB as we illustrate in the next section."
        },
        {
            "heading": "3. TIME / FREQUENCY DOMAIN VISUALIZATIONS",
            "text": "Time and frequency domain plots gives additional insights for the analysis and design of delay systems. The ssd object interfaces with MATLAB plotting functionality and enables frequency domain plots, bode, bodemag, sigma, nyquist and the time domain plot, step as in MATLAB including multiple system support.\nContinuing with the same system matrices of previous example, sys, we define two additional systems, one with a state delay of 0.5 and the other one with no delay.\n>> sys1 = ssd(A,[0 0.5],B,0,C,0); >> sys2 = ssd(sum(A,3),0,B,0,C,0); >> sys2.name=\u2019no delay\u2019; >> step(sys,\u2019r\u2019,sys1,\u2019g.-\u2019,sys2,\u2019b--\u2019);\nNote that sys2 is a standard state-space system with no delay. As seen in Figure 2, SSD shows the system names and allows the user to modify the names as needed."
        },
        {
            "heading": "4. H2 NORM AND MODEL REDUCTION",
            "text": "SSD provides a set of functionality on H2 norm computation and model reduction. In next two sections, we introduce the basic definitions, outline our direct computational approach and illustrate their use with the example codes."
        },
        {
            "heading": "4.1 H2 Norm Computation",
            "text": "Assuming the exponential stability of the delay system, its H2 norm is defined in frequency domain as,\n\u2016G\u20162 :=\n\u221a 1\n2\u03c0 \u222b \u221e \u2212\u221e trace (G(j\u03c9)\u2217G(j\u03c9)) dw (2)\nwhere G(s) = C(s) (sI \u2212A(s))\u22121 B(s) with the auxiliary terms, A(s) := \u2211mA i=0Aie \u2212j\u03c9hAi , B(s) := \u2211mB i=0Bie \u2212j\u03c9hBi ,\nand C(s) := \u2211mC\ni=0 Cie \u2212j\u03c9hCi . By definition, D matrix is\nzero for a well-defined H2 norm. We borrow the hot shower problem from Jarlebring et al. (2011) (included in benchmarks_h2norm.mlx at GitHub as the first benchmark). The system equations are\nx\u0307 = \u2212ax(t\u2212 h) + bu(t), y(t) = cx(t). This example admits a closed form for the H2 norm as, \u2016G\u201622 = c 2b2 2a cos(ah) 1\u2212sin(ah) . Set the system parameters as a = b = c = 1, then the following code computes the analytical and approximate H2 norms. >> a = 1; b = 1; c = 1; >> h = 0.1:.1:1; >> h2 = ((c*b)^2/2/a)*(cos(a*h)./(1-sin(a*h))); >> for ct=1:length(h) >> sys = ssd(cat(3,0,-a),[0 h(ct)],1,0,1,0); >> happrox(ct) = h2norm(sys); >> end >> plot(h,sqrt(h2),\u2019o\u2019,h,happrox);\nFigure 3 shows the comparison. The values are same within numerical tolerances.\nSSD utilizes sparse computation inside the integrals for H2 norm computation (2). For delay systems with large dimensions, enabling sparse option inside ssdoptions can speed up the computation considerably. Computing H2 norm without and with the sparse option enabled for the heated rod example sys4 of order 1000 (included in our benchmark problems) results in 50 times speed up.\n>> tic; h2 = h2norm(sys4); time=toc\ntime = 400.7489\n>> opt = ssdoptions(\u2019sparse\u2019,true); >> tic; h2_sparse = h2norm(sys4,opt); time=toc\ntime = 8.3189"
        },
        {
            "heading": "4.2 Balanced Reduction",
            "text": "SSD implements one of the standard model reduction techniques, the balanced reduction (a survey of model reduction techniques is given in Antoulas (2002)). In balanced reduction, a transformation matrix is computed where the transformed states are ordered from easy to difficult according to the measure of how difficult to observe and reach them simultaneously. Such transformation matrix is the balancing transformation and the transformed system is the balanced realization. The measure of reachability and observability for delay systems is defined in terms of system gramians in frequency domain as,\nWc = 1\n2\u03c0 \u222b \u221e \u2212\u221e GAB(j\u03c9)G \u2217 AB(j\u03c9)d\u03c9, (3)\nWo = 1\n2\u03c0 \u222b \u221e \u2212\u221e G\u2217CA(j\u03c9)GCA(j\u03c9)d\u03c9. (4)\nwhere GAB(s) = (sI \u2212A(s))\u22121 B(s) and GCA(s) = C(s) (sI \u2212A(s))\u22121.\nNote that we define the gramians in the sense of position balancing, Jarlebring et al. (2013), p.160. For convenience, we drop the term position in our paper.\nThe function gram computes the system gramians. It calculates the system gramians by the direct definitions (3) and (4) and the integral function of MATLAB. For our example system, sys, the system gramians are\n>> [Wc,Wo] = gram(sys,\u2019co\u2019)\nWc =\n0.9273 -1.7426 -1.7426 3.6292\nWo =\n1.2674 -0.4129 -0.4129 0.3674\nwhich are equal to the values given in Jarlebring et al. (2013), p.160. The sparse computation is also available for system gramians. It can be set from ssdoptions and passed to the gram function as an argument.\nThe function balreal computes the balanced realization. It first computes the system gramians as above, then finds the balancing transformation as in Algorithm 1 in Jarlebring et al. (2013), p.160 without any truncation and applies to the delay system.\n>> [sysb,info] = balreal(sys); >> plot(info)\nwhere sysb is a balanced realization of sys with the same system matrices given in Jarlebring et al. (2013), p. 162. One can see that the state contributions by plotting the info object. Figure 4 shows that the first transformed state\u2019s contribution is major.\nBased on the energy contributions of the states, the balanced reduction eliminates the states of the balanced realization upto a desired order defined by the user. The function balred performs this reduction. Figure 4 suggests that the first-order model may approximate the sys well. We reduce the system and compare the step responses of the original and the reduced systems by\n>> sysr = balred(sys,1); >> step(sys,sysr);\nFigure 5 shows that the first-order model captures most of the dynamics as expected.\nAs a theoretical contribution, to the best of the author\u2019s knowledge, SSD extends the frequency-limited balanced reduction to delay systems first time where the system gramians are computed over the frequency intervals of interest (see Gawronski et al. (1990) for standard case). The resulting reduced system approximates the dynamics better over the desired frequency range with less number of states.\nLet sys3 represent the delay system Example 3 in Jarlebring et al. (2011) (included as the third benchmark in benchmarks_h2norm.mlx). The frequency interval is defined in FreqInt field of ssdoptions object.\n>> sys3r = balred(sys3,2); >> opt = ssdoptions(\u2019FreqInt\u2019,[20 Inf]); >> sys3rf = balred(sys3,2,opt); >> sigma(sys3,sys3r,sys3rf);\n20 30 40 50 60 70 80 90 100 -42\n-40\n-38\n-36\n-34\n-32\n-30\n-28\n-26\nsys3 sys3r sys3rf\nSingular Values\nFrequency (rad/s)\nS in\ng u\nla r\nV a\nlu e\ns (\nd B\n)\nFig. 6. Reduced systems sys3r and sys3rf over [20,\u221e).\nThe zoomed version of the sigma plot, Figure 6, shows that the frequency-limited balanced reduction approximates better compared to the standard reduction over the focused frequency range.\nAs a final remark, the object info stores the gramian related information and the full balancing transformation matrices. The function balred\ncomputes the reduced orders very fast when info is provided since it does not recompute gramian information, i.e.,\n>> tic; [sys3r,info3] = balred(sys3,2); time=toc >> tic; sys3r1 = balred(sys3,4,info3); time=toc\ntime = 3.1990\ntime = 0.0041"
        },
        {
            "heading": "5. BENCHMARK PROBLEMS",
            "text": "We surveyed the literature and collected two sets of benchmark problems for the model reduction and the H2 norm computation. We prepared two executable notebooks in which we define the benchmark problems and show how to use SSD on them in GitHub repository."
        },
        {
            "heading": "5.1 Model Reduction",
            "text": "There are five benchmark problems provided in the executable notebook, benchmarks_model_reduction.mlx. We used the model reduction functionality of SSD on the selected benchmarks:\n(1) The heated rod (HR2) Example in Michiels (2011a): A 100th-order model with a single delay derived from the discretization of heat equations describing the temperature in a rod controlled with distributed delayed feedback.\n(2) Mass-spring (MS) system in Saadvandi et al. (2012): A 1000th-order coupled mass-spring system with dampers and feedback controls with delays. (3) Platoon of eight vehicles (P8V) in Scarciotti et al. (2014): A 23rd-order model describing the problem of controlling a group of vehicles tightly spaced following a leader, all moving in longitudinal direction. (4) Example 1 in Lordejani et al. (2020): A 6th-order synthetic model with one state and one output delay. (5) Second-order system with proportional damping example (SOSPD) in Jiang et al. (2019): A 2000th-order model with a single state delay.\nTable 1 shows the state, output, input dimensions and the number of delays for all system matrices. Since the maximum delay may affect the complexity of the method, this information is included in the table.\nThe examples in Saadvandi et al. (2012) and Jiang et al. (2019) are second-order mechanical systems and the orders of their first-order equivalent models are twice of their dimensions. The benchmark problems are single-inputsingle-output (SISO) systems and mostly single state delay in the state equation is considered.\nEx. Dimensions # Delays Max. (n,ny ,nu) (mA,mB ,mC ,mD) Delay\nHR2 (100, 1, 1) (1, 0, 0, 0) 1 MS (1000\u2020, 1, 1) (1, 0, 0, 0) 2 P8V (23, 1, 1) (1, 0, 0, 0) 0.005 Ex.1 (6, 1, 1) (1, 0, 1, 0) 1.6\nSOSPD (2000\u2020, 1, 1) (1, 0, 0, 0) 1\n\u2020 The dimension of the second-order system.\nTable 1. Model reduction benchmark problems\nA snapshot of the heated rod example from our notebook can be seen in Figure 7.\nFig. 7. A snapshot of the heated rod example.\nFig. 8. A snapshot of the hot shower example."
        },
        {
            "heading": "5.2 H2 Norm Computation",
            "text": "There are six benchmark problems for H2 norm computation collected in our notebook, benchmarks_h2norm.mlx:\n(1) The hot shower (HS) problem in Jarlebring et al. (2011), Ex.1: A first-order state-space model whose H2 norm can be computed analytically. Its delay can be set by the user. (2) Example 2.b in Jarlebring et al. (2011), Ex.2b: A 3rd-order synthetic model with two state delays.\n(3) Example 3 in Jarlebring et al. (2011), Ex.3: A 9th-order model with two state-delays obtained from discretization of partial differential equations with delays. (4) The heat exchanger (HE) example in Michiels et al. (2019): A 5th-order model with seven delays for a heat exchanger for which the controller based on a combination of static state feedback and proportional integral control. (5) The heated rod (HR2) Example in Peeters et al. (2013): A 100th-order model with a single delay, same as the previous example in the model reduction benchmarks. (6) The heated rod (HR4) Example in Michiels et al. (2019): A 10000th-order model with a single delay, same as the previous example with larger size.\nTable 2 summarizes the dimensions and the number of delays for all system matrices. In general, the examples in the literature has one or two state delays and no delays at input and output matrices excluding D matrices which must be zero for well-posedness of the norm. Most examples are SISO systems. Finally, we share a snapshot from the executable notebook for the hot shower example in Figure 8."
        },
        {
            "heading": "6. COMPUTATIONAL ASPECTS",
            "text": "For experimental 1 testing of the computational complexity of balanced reduction and H2 norm computation, we randomly generate delay systems with the following properties:\n\u2022 Input and output sizes are 3, ny = nu = 3, \u2022 There are 3 delays, mA = mB = mC = 3, \u2022 All delays are uniformly selected from (0, 1), \u2022 All matrices are dense whose elements uniformly\nselected from [\u22123, 3] and in addition, 3I subtracted from A0 matrix to make it stable. \u2022 D matrices are set to zero since they are not needed\nfor H2 norm computation and balanced reduction. We validated that the generated delay systems have rich dynamics. We measured the computation time of h2norm and gram (computing both gramians) functions since the latter function is the main computational bottleneck of balreal and balred. The number of states varies as 1 \u2212 10, 10 \u2212 100 by 10 increments and 100 \u2212 500 for by 100 increments (The upper bound is 400 for model reduction). For each step, we created 5 delay systems, computed the average of computational times and the standard deviation. 1 All experiments are performed on HP Z6 G4 Workstation with Intel Xeon Silver 4114 2.2GHz CPU, 64GB RAM.\nFigure 9 (left) shows that the H2 norm computation time is in the order of seconds upto 100 states, that of minutes upto 300 states and around 8 minutes for 500 states.\nFigure 9 (right) shows that the gram(sys,\u2019co\u2019) computation time is under a minute upto 50 states, under 10 minutes upto 200 states and almost 2 hours for 400 states. In the light of these experiments, we see that SSD can handle small to medium size state dimensions.\nFor large-scale delay systems with sparse matrices, the sparse option of ssdoptions can be used to speed up the computation. As a large-scale benchmark, we computed the H2 norm of HR4 example with 10, 000 states from Section 5.2. We set the absolute tolerance a little high 10\u22123 to make the relative error active and set the relative error to 10\u22124 as reported in Michiels et al. (2019) and get similar order of time magnitude, around 6 seconds, compared to their results 4.8 seconds obtained by their special large-scale approach.\n>> opt = ssdoptions(\u2019Sparse\u2019,true, ... \u2019RelTol\u2019,1e-4, \u2019AbsTol\u2019,1e-3); >> tic >> h2 = h2norm(sys_hr4,opt) >> time=toc\nh2 = 0.4357\ntime = 5.9651\nAs a final remark, the function integral over [0,\u221e] interval may be computationally expensive or less accurate when the integrand has highly oscillatory behavior for a large part of the interval. In our experiments, it shows satisfactory performance."
        },
        {
            "heading": "7. CONCLUDING REMARKS",
            "text": "We took a guided tour of a new MATLAB package, SSD, on several examples. SSD seamlessly integrates with the time and frequency domain visualization capabilities of MATLAB while offering new features on model reduction and H2 norm computations built on a frequentlyused RTDS delay system representation. The list of SSD functions is given in Table 3.\nOur computational analysis shows that SSD is suitable for small to mid-size state dimensions. We hope that SSD\u2019s delay system definition of matrices and delays, easy-to-use interface, and provided functionalities will facilitate the analysis of delay systems and be used as a baseline for advanced techniques.\nAll the examples in this paper are reproducible by our executable notebook, introduction.mlx. We share two executable notebooks, benchmarks_model_reduction.mlx and benchmarks_h2norm.mlx with a collection of benchmark problems on model reduction andH2 norm computation. SSD and three notebooks are available at the GitHub repo\nhttps://github.com/gumussoysuat/ssd."
        },
        {
            "heading": "ACKNOWLEDGEMENTS",
            "text": "The author thanks Izmir D. Gumussoy for the fruitful discussions."
        }
    ],
    "title": "SSD \u2013 Software for Systems with Delays: Reproducible Examples and Benchmarks on Model Reduction and H2 Norm Computation",
    "year": 2022
}