{
    "abstractText": "Compact directed acyclic word graphs (CDAWGs) [Blumer et al. 1987] are a fundamental data structure on strings with applications in text pattern searching, data compression, and pattern discovery. Intuitively, the CDAWG of a string T is obtained by merging isomorphic subtrees of the suffix tree [Weiner 1973] of the same string T , thus CDAWGs are a compact indexing structure. In this paper, we investigate the sensitivity of CDAWGs when a single character edit operation (insertion, deletion, or substitution) is performed at the left-end of the input string T , namely, we are interested in the worst-case increase in the size of the CDAWG after a left-end edit operation. We prove that if e is the number of edges of the CDAWG for string T , then the number of new edges added to the CDAWG after a left-end edit operation on T is less than e. Further, we present almost matching lower bounds on the sensitivity of CDAWGs for all cases of insertion, deletion, and substitution.",
    "authors": [
        {
            "affiliations": [],
            "name": "Hiroto Fujimaru"
        },
        {
            "affiliations": [],
            "name": "Yuto Nakashima"
        },
        {
            "affiliations": [],
            "name": "Shunsuke Inenaga"
        }
    ],
    "id": "SP:139b61ade8f29f416bbd3d198a735cd61c205c97",
    "references": [
        {
            "authors": [
                "T. Akagi",
                "M. Funakoshi",
                "S. Inenaga"
            ],
            "title": "Sensitivity of string compressors and repetitiveness measures",
            "venue": "Information and Computation, 291:104999",
            "year": 2023
        },
        {
            "authors": [
                "D. Belazzougui",
                "F. Cunial"
            ],
            "title": "Fast label extraction in the CDAWG",
            "venue": "SPIRE 2017, pages 161\u2013175",
            "year": 2017
        },
        {
            "authors": [
                "D. Belazzougui",
                "F. Cunial",
                "T. Gagie",
                "N. Prezza",
                "M. Raffinot"
            ],
            "title": "Composite repetition-aware data structures",
            "venue": "CPM 2015, pages 26\u201339",
            "year": 2015
        },
        {
            "authors": [
                "A. Blumer",
                "J. Blumer",
                "D. Haussler",
                "R. McConnell",
                "A. Ehrenfeucht"
            ],
            "title": "Complete inverted files for efficient text retrieval and analysis",
            "venue": "Journal of the ACM, 34(3):578\u2013595",
            "year": 1987
        },
        {
            "authors": [
                "M. Burrows",
                "D.J. Wheeler"
            ],
            "title": "A block sorting lossless data compression algorithm",
            "venue": "Technical Report 124, Digital Equipment Corporation",
            "year": 1994
        },
        {
            "authors": [
                "M. Crochemore",
                "R. V\u00e9rin"
            ],
            "title": "On compact directed acyclic word graphs",
            "venue": "Structures in Logic and Computer Science: A Selection of Essays in Honor of A. Ehrenfeucht, pages 192\u2013211. Springer",
            "year": 1997
        },
        {
            "authors": [
                "H. Fujimaru",
                "Y. Nakashima",
                "S. Inenaga"
            ],
            "title": "On sensitivity of compact directed acyclic word graphs",
            "venue": "CoRR, abs/2303.01726",
            "year": 2023
        },
        {
            "authors": [
                "S. Inenaga",
                "H. Hoshino",
                "A. Shinohara",
                "M. Takeda",
                "S. Arikawa",
                "G. Mauri",
                "G. Pavesi"
            ],
            "title": "On-line construction of compact directed acyclic word graphs",
            "venue": "Discrete Applied Mathematics, 146(2):156\u2013179",
            "year": 2005
        },
        {
            "authors": [
                "D. Kempa",
                "N. Prezza"
            ],
            "title": "At the roots of dictionary compression: string attractors",
            "venue": "STOC 2018, pages 827\u2013840",
            "year": 2018
        },
        {
            "authors": [
                "T. Kociumaka",
                "G. Navarro",
                "N. Prezza"
            ],
            "title": "Towards a definitive measure of repetitiveness",
            "venue": "LATIN 2020, pages 207\u2013219",
            "year": 2020
        },
        {
            "authors": [
                "J. Radoszewski",
                "W. Rytter"
            ],
            "title": "On the structure of compacted subword graphs of Thue-Morse words and their applications",
            "venue": "J. Discrete Algorithms, 11:15\u201324",
            "year": 2012
        },
        {
            "authors": [
                "M. Senft",
                "T. Dvor\u00e1k"
            ],
            "title": "Sliding CDAWG perfection",
            "venue": "SPIRE 2008, pages 109\u2013120",
            "year": 2008
        },
        {
            "authors": [
                "T. Takagi",
                "K. Goto",
                "Y. Fujishige",
                "S. Inenaga",
                "H. Arimura"
            ],
            "title": "Linear-size CDAWG: New repetition-aware indexing and grammar compression",
            "venue": "SPIRE 2017, pages 304\u2013316",
            "year": 2017
        },
        {
            "authors": [
                "M. Takeda",
                "T. Matsumoto",
                "T. Fukuda",
                "I. Nanri"
            ],
            "title": "Discovering characteristic expressions from literary works: a new text analysis method beyond n-gram statistics and KWIC",
            "venue": "Discovery Science 2000, pages 112\u2013126",
            "year": 2000
        },
        {
            "authors": [
                "P. Weiner"
            ],
            "title": "Linear pattern matching algorithms",
            "venue": "Proceedings of the 14th Annual Symposium on Switching and Automata Theory, pages 1\u201311. IEEE",
            "year": 1973
        },
        {
            "authors": [
                "J. Ziv",
                "A. Lempel"
            ],
            "title": "A universal algorithm for sequential data compression",
            "venue": "IEEE Transactions on Information Theory, 23",
            "year": 1977
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "Compact directed acyclic word graphs (CDAWGs) [4] are a fundamental data structure on strings that have applications in fields including text pattern searching [6, 8], data compression [2, 13], and pattern discovery [14]. Intuitively, the CDAWG of a string T , denoted CDAWG(T ), is obtained by merging isomorphic subtrees of the suffix tree [15] of the same string T . Thus the size of the CDAWG is always smaller than that of the suffix tree.\nIt is well known that the nodes of CDAWG(T ) correspond to maximal repeats in T , and the number e of right-extensions of maximal repeats in T , which is equal to the number of edges of CDAWG(T ), has been used as one of repetitiveness measures of strings. Namely, when e is small, then the string contains a lot of repetitive substrings hence being well compressible. Indeed, it is known that e can be as small as \u0398(log n) with highly repetitive strings [11]. Further, one can obtain a grammar-based compression of size O(e) via the CDAWG of the input\nar X\niv :2\n30 3.\n01 72\n6v 2\n[ cs\n.D S]\n6 A\nstring T [2]. Some relations between e and the number r of equal-letter runs in the Burrows-Wheeler transform (BWT ) [5] have also been investigated [3].\nRecently, Akagi et al. [1] proposed the notion of sensitivity of string repetitiveness measures and string compressors, including the aforementioned e and r, the smallest string attractor size \u03b3 [9], the substring complexity \u03b4 [10], and the Lempel-Ziv parse size z [16]. The sensitivity of a repetitiveness measure c asks how much the measure size increases when a single-character edit operation is performed on the input string, and thus the sensitivity allows one to evaluate the robustness of the measure/compressor against errors/edits.\nThis paper investigates the sensitivity of CDAWGs when a single character edit operation (insertion, deletion, or substitution) is performed at the left-end of the input string T , namely, we are interested in the worst-case increase in the size of the CDAWG after an left-end edit operation. We prove that if e is the number of edges of the CDAWG for string T , then the number of new edges which are added to the CDAWG after an left-edit operation on T is always less than e. Further, we present almost matching lower bounds on the sensitivity of CDAWGs for any left-end insertion, deletion, and substitution (see Table 1 for a summary of these results). We generalize our lower-bound instances for leftend insertion to leftward online construction of the CDAWG, and show that it requires \u2126(n2) time. This contrasts with the case of rightward online CDAWG construction for which a linear-time algorithm exists [8].\nA full version of this paper can be found in [7].\n1.0.1 Related work.\nAkagi et al. [1] presented lower bounds when a new character is deleted (resp. substituted) in the middle of the string, with a series of strings for which the size e of the CDAWG additively increases by e\u2212 4 (resp. e\u2212 2). They also showed a lower bound when a new character is inserted at the right-end of the string, showing a series of strings for which the size of the CDAWG additively increases by e \u2212 2. While an additive e + O(1) upper bound for the case of right-end insertion readily follows from the rightward online construction of CDAWGs [8], no non-trivial upper bounds for the other edit operations, including our case of left-end edit operations, are known. Our \u2126(n2) lower-bound for leftward online construction of the CDAWG extends the quadratic lower-bound for maintaining the CDAWG in the sliding window model [12] (remark that fixing the right-end of the sliding window is equivalent to our leftward online construction)."
        },
        {
            "heading": "2 Preliminaries",
            "text": "Let \u03a3 be an alphabet of size \u03c3. An element of \u03a3\u2217 is called a string. For a string T \u2208 \u03a3\u2217, the length of T is denoted by |T |. The empty string, denoted by \u03b5, is the string of length 0. Let \u03a3+ = \u03a3\u2217 \\ {\u03b5}. If T = uvw, then u, v, and w are called a prefix, substring, and suffix of T , respectively. The sets of prefixes, substrings, and suffixes of string T are denoted by Prefix(T ), Substr(T ), and Suffix(T ), respectively. For a string T of length n, T [i] denotes the ith character of T for 1 \u2264 i \u2264 n, and T [i..j] = T [i] \u00b7 \u00b7 \u00b7T [j] denotes the substring of T that begins at position i and ends at position j on T for 1 \u2264 i \u2264 j \u2264 n. For two strings u and T , let BegPos(u, T ) = {i | T [i..i + |u| \u2212 1] = u} and EndPos(u, T ) = {i | T [i\u2212 |u|+ 1..i] = u} denote the sets of beginning positions and the set of ending positions of u in T , respectively.\nFor any substrings u, v \u2208 Substr(T ) of a string T , we write u \u2261LT v iff EndPos(u, T ) = EndPos(v, T ). Let [\u00b7]LT denote the equivalence class of strings under \u2261LT . For x \u2208 Substr(T ), let long([x]LT ) denote the longest member of [x]LT . Let LeftM(T ) = {long([x]LT ) | x \u2208 Substr(T )}. Any element u \u2208 LeftM(T ) is said to be left-maximal in T , since there are two distinct characters c, d \u2208 \u03a3 such that cu, du \u2208 Substr(T ), or u \u2208 Prefix(T ). For any non-longest element y \u2208 [x]LT \\ {long([x]LT )} there exists a unique non-empty string \u03b1 such that \u03b1y = long([x]LT ), i.e. any occurrence of y in T is immediately preceded by \u03b1.\nSimilarly, we write u \u2261RT v iff BegPos(u, T ) = BegPos(v, T ). Let [\u00b7]RT denote the equivalence class of strings under \u2261RT . For x \u2208 Substr(T ), let long([x]RT ) denote the longest member of [x]RT . Let RightM(T ) = {long([x]RT ) | x \u2208 Substr(T )}. Any element u \u2208 RightM(T ) is said to be right-maximal in T , since there are two distinct characters c, d \u2208 \u03a3 such that uc, ud \u2208 Substr(T ), or u \u2208 Suffix(T ). For any non-longest element y \u2208 [x]RT \\ {long([x]RT )} there exists a unique nonempty string \u03b2 such that y\u03b2 = long([x]RT ), i.e. any occurrence of y in T is immediately followed by \u03b2. Let M(T ) = LeftM(T ) \u2229 RightM(T ). Any element of M(T ) is said to be maximal in T .\nThe compact directed acyclic word graph (CDAWG) of a string T , denoted CDAWG(T ) = (V,E), is an edge-labeled DAG such that\nVT = {[x]LT | x \u2208 RightM(T )}, ET = {([x]LT , \u03b2, [x\u03b2]LT ) | \u03b2 \u2208 \u03a3+, x, x\u03b2 \u2208 RightM(T ), y\u03b2 \u2208 [x\u03b2]LT for any y \u2208 [x]LT }.\nSee Fig. 1 for a concrete example of CDAWGs. Intuitively, the strings in RightM(T ) correspond to the nodes of the suffix tree [15] of T , and the operator [\u00b7]LT merges the isomorphic subtrees of the suffix tree. Recall that the nodes of the suffix tree for T correspond to the right-maximal substrings of T . Since long([x]LT ) is a maximal substring of T for any x \u2208 RightM(T ), we have the following fact:\nFact 1. There is a one-to-one correspondence between the elements of M(T ) and the nodes of CDAWG(T ).\nWe can regard each element of M(T ) as a node of CDAWG(T ) by Fact 1. We thus sometimes identify VT with M(T ) for convenience. For any x \u2208 M(T ), dT (x) denotes the out-degree of the node x in CDAWG(T ).\nA non-empty substring x of string T is called a maximal repeat in T if x is maximal in T and |BegPos(x, T )| = |EndPos(x, T )| \u2265 2. We remark that the set of maximal repeats in T coincides with M(T ) \\ {\u03b5, T}, namely the longest elements of all internal nodes of CDAWG(T ) are maximal repeats in T , and they are the only maximal repeats in T .\nThe size of CDAWG(T ) = (VT ,ET ) for a string T of length n is the number e(T ) = |ET | of edges in CDAWG(T ), which is also referred to as the number of right-extensions of maximal repeats in T . Using this measure e, we define the worst-case additive sensitivity of the CDAWG with left-end edit operations (resp. insertion, deletion, and substitution) by:\nASLeftIns(e, n) = max T\u2208\u03a3n,a\u2208\u03a3\n{e(aT )\u2212 e(T )},\nASLeftDel(e, n) = max T\u2208\u03a3n\n{e(T [2..n])\u2212 e(T )},\nASLeftSub(e, n) = max T\u2208\u03a3n,a\u2208\u03a3\\{T [1]}\n{e(aT [2..n])\u2212 e(T )}.\nFor the sensitivity of CDAWGs, we first briefly describe the special case where both the original string T and an edited string T \u2032 are unary. Let T = an. Clearly, every ai with 1 \u2264 i < n is a maximal substring of T and it is only followed by a. Thus e(T ) = n \u2212 1. In case of insertion, i.e. T \u2032 = aT = an+1, we similarly have e(T \u2032) = n. Thus e(T \u2032) \u2212 e(T ) = 1 for unary strings. Symmetrically, we have e(T \u2032)\u2212e(T ) = \u22121 in the case of deletion with T \u2032 = an\u22121. There is no substitution when \u03c3 = 1. In what follows, we focus on the case where \u03c3 \u2265 2."
        },
        {
            "heading": "3 Sensitivity of CDAWGs with left-end insertions",
            "text": "We consider the worst-case additive sensitivity ASLeftIns(e, n) of CDAWG(T ) when a new character a is prepended to input string T of length n, i.e. T \u2032 = aT .\n3.1 Upper bound for ASLeftIns(e, n) on CDAWGs\nWe divide the value e(T \u2032)\u2212 e(T ) into two components fIns(T ) and gIns(T ) s.t.\n\u2022 fIns(T ) is the total out-degrees of new nodes that appear in CDAWG(aT );\n\u2022 gIns(T ) is the total number of new out-going edges of nodes that already exist in CDAWG(T ).\nClearly e(T \u2032) \u2212 e(T ) \u2264 fIns(T ) + gIns(T ). We first consider the above two components separately, and then we merge them to obtain the desired upper bound.\n3.1.1 fIns(T ): total out-degrees of new nodes.\nSuppose u is a new node for CDAWG(aT ), where u /\u2208 M(T ) and u \u2208 M(aT ). This implies that there is a new occurrence of u in aT as a prefix. Let u = ax. The following is our key lemma:\nLemma 1. If ax /\u2208 M(T ) and ax \u2208 M(aT ) (i.e. ax is a new node in CDAWG(aT )), then x \u2208 M(T ). Also, daT (ax) \u2264 dT (x).\nProof. Since ax \u2208 Prefix(aT ), x \u2208 Prefix(T ). Thus x is left-maximal in T . Assume on the contrary that x is not right-maximal in T . Then there exists a non-empty string \u03b2 \u2208 \u03a3+ such that x\u03b2 = long([x]RT ), which means that any occurrence of x in T is immediately followed by \u03b2. Thus ax is also immediately followed by \u03b2 in aT , however, this contradicts the precondition that ax \u2208 M(aT ). Thus x is right-maximal in T . It immediately follows from EndPos(ax, aT ) \u2286 EndPos(x, T ) that daT (ax) \u2264 dT (x).\nIt follows from Lemma 1 that the out-degree of each new node in CDAWG(aT ) does not exceed the maximum out-degree of CDAWG(T ). Also, there is an injective mapping from a new node ax in CDAWG(aT ) to an existing node x in CDAWG(T ) by Lemma 1. Thus fIns(T ) \u2264 e(T ) for any string T .\nIn the sequel, we give a tighter bound fIns(T ) \u2264 e(T )\u2212 1. For this purpose, we pick up the case where x = \u03b5, assume that ax = a becomes a new node in CDAWG(aT ), and compare the out-degree of the source \u03b5 of CDAWG(T ) and the out-degree of the new node a in CDAWG(aT ). We consider the cases with \u03c3 = 2 and with \u03c3 \u2265 3 separately:\nLemma 2. Let \u03c3 = 2. If\n1. a /\u2208 M(T ),\n2. a \u2208 M(aT ), and\n3. there exists a string x \u2208 M(T ) \\ {\u03b5, T} such that ax /\u2208 M(T ) and ax \u2208 M(aT ),\nthen daT (a) < dT (\u03b5).\nProof. Let \u03a3 = {a, b}. We can exclude the case where T = bn due to the following reason: Since abi for each 1 \u2264 i < n is not maximal in aT = abn, no new nodes are created in CDAWG(abn) (only a new edge labeled abn from the source to the sink is created).\nFrom now on, consider the case where T contains both a and b. This means that dT (\u03b5) = \u03c3 = 2. Since a \u2208 M(aT ), a is a node of CDAWG(aT ). Assume on the contrary that daT (a) = dT (\u03b5). We then have daT (a) = 2, which means aa, ab \u2208 Substr(aT ). There are two cases depending on the first character of T :\n\u2022 If T [1] = a, then let T = aw. Then, since aT = aaw, we have ab \u2208 Substr(T ). Since a /\u2208 M(T ) (the first precondition), b is the only character that immediately follows a in T , meaning that aa /\u2208 Substr(T ). Recall that the new node ax must be a prefix of aT = aaw. Since x 6= \u03b5 (the third precondition), |ax| \u2265 2, and thus aa is a prefix of ax. However, since aa /\u2208 Substr(T ), aa occurs in aT exactly once as a prefix and thus ax occurs exactly once in aT . This contradicts the third precondition that ax is a new node in CDAWG(aT ).\n\u2022 If T [1] = b, then we have that ab /\u2208 Substr(T ) by similar arguments as above. Thus T must be of form bman\u2212m with 1 \u2264 m < n. Moreover, since a /\u2208 M(T ) and a \u2208 M(aT ) (the first and second preconditions), we have T = bn\u22121a. Then, for the edited string aT = abn\u22121a, any new internal node ax in CDAWG(aT ) must be in form abi with 1 \u2264 i < n. However, each ax = abi occurs in aT exactly once, meaning that long([abi]RaT ) = aT . This contradicts the third precondition that ax is a new node in CDAWG(aT ).\nConsequently, daT (a) < dT (\u03b5).\nLemma 3. Let \u03c3 \u2265 3. If a /\u2208 M(T ) and a \u2208 M(aT ), then daT (a) < dT (\u03b5).\nProof. By similar arguments to the proof for Lemma 2, we have that T contains at least three distinct characters, one of which is a. Thus dT (\u03b5) = \u03c3 \u2265 3.\nAssume on the contrary that daT (a) = dT (\u03b5) = \u03c3 \u2265 3. Since a /\u2208 M(T ) (i.e. a is not maximal in T ), we have the two following cases:\n\u2022 If a is not left-maximal in T , then T [1] 6= a and there is a unique character b ( 6= a) that immediately precedes a in T , meaning that aa /\u2208 Substr(T ). Since T [1] 6= a, we also have aa /\u2208 Substr(aT ). Thus daT (a) < \u03c3 = dT (\u03b5), a contradiction.\n\u2022 If a is not right-maximal in T , then there is a unique character b that immediately follows a in T . The occurrence of a as a prefix of aT is followed by T [1], and thus the number daT (a) of distinct characters following a in aT is at most 2 < \u03c3 = dT (\u03b5), a contradiction.\nConsequently, daT (a) < dT (\u03b5).\nBy Lemmas 2 and 3, even if there appear new nodes ax in CDAWG(aT ) corresponding to all existing nodes x in CDAWG(T ), we have a credit dT (\u03b5) \u2212 daT (a) \u2265 1 in most cases. The only exception is when \u03c3 = 2 and M(T ) = {\u03b5, T}. However, in this specific case CDAWG(T ) consists only of the two nodes (source and sink), namely e(T ) = 2. Conversely, we have that the above arguments hold for any e(T ) \u2265 3, which leads to the following:\nLemma 4. For any string T with e(T ) \u2265 3, fIns(T ) \u2264 e(T )\u2212 1.\n3.1.2 gIns(T ): number of new branches from existing nodes.\nThe following lemma states that the out-degrees of most existing nodes of CDAWG(T ) do not change in CDAWG(aT ), except for a single unique node that can obtain a single new out-going edge in CDAWG(aT ):\nLemma 5. For any y \u2208 Substr(T ) such that y \u2208 M(T ) and y \u2208 M(aT ), daT (y) \u2208 {dT (y), dT (y) + 1}. Also, there exists at most one substring y with daT (y) = dT (y) + 1. Consequently gIns(T ) \u2264 1.\nProof. Since y \u2208 M(T ) and y \u2208 M(aT ), y is a node in both CDAWG(T ) and CDAWG(aT ). Then we have that:\ndaT (y) = { dT (y) + 1 if y \u2208 Prefix(aT ) and yb occurs in aT only as a prefix, dT (y) otherwise,\nwhere b is the character that immediately follows the occurrence of y as a prefix of aT , namely b = T [|y|].\nAssume on the contrary that there exist two distinct substrings x, y \u2208 M(T )\u2229M(aT ) such that daT (x) = dT (x)+1 and daT (y) = dT (y)+1. Since both x and y must be distinct prefixes of aT , we can assume w.l.o.g. that |x| < |y|, which means that x is a proper prefix of y. Thus the occurrence of x as a prefix of aT is immediately followed by the character c = y[|x|+ 1]. We recall that y occurs in T since y \u2208 M(T ). Therefore there is an occurrence of x in T that is immediately followed by c, which leads to daT (x) = dT (x), a contradiction."
        },
        {
            "heading": "3.1.3 Putting all together.",
            "text": "Due to Lemma 4 and Lemma 5, we have an upper bound e(T \u2032) \u2212 e(T ) \u2264 fIns(T ) + gIns(T ) \u2264 e(T )\u2212 1 + 1 = e(T ) for \u03c3 \u2265 2. We remark that the equality holds only if both of the following conditions are satisfied:\n(a) For any x \u2208 M(T ) \\ {\u03b5}, ax /\u2208 M(T ), ax \u2208 M(aT ), and daT (ax) = dT (x);\n(b) There exists a unique string x \u2208 Substr(T ) such that daT (x) = dT (x) + 1.\nHowever, in the next lemma, we show that no strings x can satisfy both Conditions (a) and (b) simultaneously:\nLemma 6. If ax /\u2208 M(T ) and ax \u2208 M(aT ), then daT (x) = dT (x).\nProof. Assume on the contrary that daT (x) 6= dT (x). By Lemma 5 we have that daT (x) = dT (x) + 1. Then, it also follows from the proof of Lemma 5 that x is a prefix of aT and the character b = T [|x|] that immediately follows the prefix occurrence of x in aT differs from any other characters that immediately follow the occurrences of x in T . Namely, we have b /\u2208 \u03a3\u2032 = {T [i + 1] | i \u2208 EndPos(x, T )}. Moreover, by Lemma 1, ax is also a prefix of aT . This means that x is a prefix of ax, and hence ax = xb, which means that x = a|x| and a = b. Because \u03c3 \u2265 2, T 6= x. Since ax \u2208 M(aT ) and x 6= T , ax (= xb) occurs in T . This means that b = c for some c \u2208 \u03a3\u2032, a contradiction. Thus, daT (x) = dT (x).\nWe have e(T ) \u2265 3 only if |T | \u2265 3. By wrapping up Lemma 4, Lemma 5, and Lemma 6, we obtain the main result of this subsection:\nTheorem 1. For any n \u2265 3 and e \u2265 3, ASLeftIns(e, n) \u2264 e\u2212 1.\n3.2 Lower bound for ASLeftIns(e, n) on CDAWGs\nThe next lower bound for ASLeftIns(e, n) holds (see Appendix A.1 for a proof).\nTheorem 2. There exists a family of strings T such that e(T \u2032)\u2212e(T ) = e(T )\u22122, where T \u2032 = bT with b \u2208 \u03a3. Therefore ASLeftIns(e, n) \u2265 e\u2212 2."
        },
        {
            "heading": "4 Sensitivity of CDAWGs with left-end deletions",
            "text": "In this section we investigate the worst-case additive sensitivity ASLeftDel(e, n) of CDAWG(T ) when T [1] is deleted from the original input string T of length n.\n4.1 Upper bound for ASLeftDel(e, n) on CDAWGs\nLet a = T [1] be the first character of string T . Let T = aS and T \u2032 = S, and we consider left-end deletion aS \u21d2 S. Since deleting the left-end character from T never increases the right-contexts of any substring in S, it suffices for us to consider fDel(T ) = fDel(aS), the total out-degrees of new nodes that appear in CDAWG(T \u2032) = CDAWG(S), namely e(S)\u2212 e(aS) \u2264 fDel(aS).\nLet x be a new node in CDAWG(S). We have the following:\nLemma 7. If x /\u2208 M(aS) and x \u2208 M(S), then x \u2208 Prefix(S) and ax \u2208 M(aS). Also, dS(x) = daS(ax).\nProof. Since x /\u2208 M(aS), x is either not left-maximal or not right-maximal in aS. If x is not right-maximal in aS, then x is also not right-maximal in S, hence x /\u2208 M(S). However, this contradicts the precondition x \u2208 M(S). Thus x is not left-maximal in aS. Then, there exists a non-empty unique string \u03b1 \u2208 \u03a3+ such that \u03b1x = long([x]LaS), which means that any occurrence of x in aS is immediately preceded by \u03b1. Assume on the contrary that x /\u2208 Prefix(S). Since x \u2208 M(S), x = long([x]LS) = long([x]LaS), however, this contradicts that \u03b1 is a non-empty string. Thus x \u2208 Prefix(S), and hence ax \u2208 Prefix(aS). Since ax \u2208 Prefix(aS) and x is right-maximal in aS, ax is a maximal string of aS. Thus ax \u2208 M(aS).\nSince x is not left-maximal in aS and since ax \u2208 Prefix(aS), EndPos(ax, aS) = EndPos(x, aS) = EndPos(x, S). This leads to daS(ax) = dS(x).\nBy Lemma 7, the out-degree of each new node in CDAWG(S) does not exceed the maximum out-degree of CDAWG(aS). Also by Lemma 7, there is an injective mapping from a new node x in CDAWG(S) to an existing node ax in M(aS)\\{\u03b5}. Since daS(\u03b5) = \u03c3 \u2265 2, it holds that e(S) \u2264 2(e(T )\u2212 \u03c3) + \u03c3 \u2264 2e(aS)\u2212 2, that is:\nTheorem 3. For any n, ASLeftDel(e, n) \u2264 e\u2212 2.\n4.2 Lower bound for ASLeftDel(e, n) on CDAWGs\nThe next lower bound for ASLeftDel(e, n) holds (see Appendix A.2 for a proof).\nTheorem 4. There exists a family of strings T such that e(S)\u2212e(T ) = e(T )\u22124, where T = aS with a \u2208 \u03a3. Therefore ASLeftDel(e, n) \u2265 e\u2212 4."
        },
        {
            "heading": "5 Sensitivity of CDAWGs with left-end substitutions",
            "text": "We consider the worst-case additive sensitivity ASLeftSub(e, n) of CDAWG(T ) when T [1] is substituted by a new character b 6= T [1], i.e. T \u2032 = bT [2..n].\n5.1 Upper bound for ASLeftSub(e, n) on CDAWGs\nSimilarly to the case of insertions, we separate e(T \u2032)\u2212e(T ) into the two following components fSub(T ) and gSub(T ) such that\n\u2022 fSub(T ) is the total out-degrees of new nodes that appear in CDAWG(T \u2032);\n\u2022 gSub(T ) is the total number of new out-going edges of nodes that already exist in CDAWG(T ).\nWe regard a substitution as a sequence of a deletion and an insertion, i.e. two consecutive edit operations such that aS (= T )\u21d2 S \u21d2 bS (= bT [2..n] = T \u2032).\n5.1.1 fSub(T ): total out-degrees of new nodes.\nLet u be a new node in CDAWG(bS) that does not exist in CDAWG(aS), namely u \u2208 M(bS) and u /\u2208 M(aS). We categorize each new node u to the two following types u1 and u2 as:\n1. u1 \u2208 M(T ) so that u1 is generated by deletion aS \u21d2 S;\n2. u2 /\u2208 M(T ) so that u2 is generated by insertion S \u21d2 bS.\nNode u1 is a new node that appears in CDAWG(S). Thus, it follows from Lemma 7 that node au1 exists in CDAWG(aS). Since u2 is not a node in CDAWG(S), it follows from Lemma 1 that u2 = bx and x is a node in CDAWG(S). Based on the this observation, we will show that there is an injective mapping from the new nodes in CDAWG(bS) = CDAWG(T \u2032) to the existing nodes in CDAWG(aS) = CDAWG(T ). In so doing, we must resolve the two non-injective situations where:\n(i) a new node bx is generated by insertion S \u21d2 bS, where x is generated by deletion aS \u21d2 S and x remains as a node in CDAWG(bS);\n(ii) a new node bax generated by insertion S \u21d2 bS, where x is generated by deletion aS \u21d2 S and x remains as a node in CDAWG(bS).\nSuppose (on the contrary) that Case (i) happens. Then, a new node x is generated from an existing node ax, and bx is generated from x. Therefore, two new nodes could be generated from on existed node ax \u2208 M(aS). However, the next lemma shows that this situation (Case (i)) does not occur unless x = S:\nLemma 8. If x 6= S, x /\u2208 M(aS), x \u2208 M(S), and x \u2208 M(bS), then bx /\u2208 M(bS).\nProof. Since x /\u2208 M(aS) and x \u2208 M(S), x \u2208 Prefix(S) by Lemma 7. Since x \u2208 M(S) and ax \u2208 Prefix(aS), ax \u2261LaS x and ax = long([x]LaS). This means that bx occurs exactly once in bS as a proper prefix. Thus, bx /\u2208 RightM(bS) which leads to bx /\u2208 M(bS).\nAs for Lemma 8, the situation (Case (i)) can occur if x = S. However, if x = S, then S \u2208 M(bS) which implies that S occurs in bS as prefix bS[1..(n\u22121)]. Thus, S = bn, T = aS = abn and T \u2032 = bS = bn+1. It is clear that e(aS) = e(bS) = n+ 1. Therefore the size of the CDAWG does not change when x = S.\nNow we turn our attention to Case (ii) and assume (on the contrary) that it happens. Then, two new nodes bax and x could be generated from a single existing node ax. According to the following lemma, however, this situation cannot occur:\nLemma 9. If ax \u2208 M(aS), x /\u2208 M(aS), bax /\u2208 M(aS), x \u2208 M(S), and bax /\u2208 M(S), then bax /\u2208 M(bS).\nProof. Assume on the contrary that bax \u2208 M(bS). Since x /\u2208 M(aS) and x \u2208 M(S), x \u2208 Prefix(S) by Lemma 7. Also, since bax /\u2208 M(S) and bax \u2208 M(bS), ax \u2208 Prefix(S) by Lemma 1. This means that x \u2208 Prefix(ax) and x = a|x|. Since ax = a|x|+1 is a maximal substring of aS, x is also a maximal substring of aS. Thus x \u2208 M(aS), however, this contradicts the precondition that x /\u2208 M(aS). Thus bax /\u2208 M(bS).\nAs a result, there is an injective mapping from the new nodes u1 (resp. u2 = bx) in CDAWG(bS) to the existing nodes au1 (resp. x) in CDAWG(aS) by Lemmas 1, 7, 8, and 9. It also follows from these lemmas that the out-degree of each new node in CDAWG(bS) does not exceed the maximum out-degree of CDAWG(aS). Finally, we consider the source \u03b5. By Lemmas 2, 3, and 7, if b \u2208 M(bS), b /\u2208 M(aS), and e(aS) \u2265 3, then dbS(b) \u2264 daS(\u03b5). Thus we have:\nLemma 10. For any string T with e(T ) \u2265 3, fSub(T ) \u2264 e(T )\u2212 1.\n5.1.2 gSub(T ): number of new branches from existing nodes.\nSince left-end deletions do not create new branches from existing nodes (recall Section 4), it is immediate from Lemma 5 that:\nLemma 11. For any string T , gSub(T ) \u2264 1."
        },
        {
            "heading": "5.1.3 Wrapping up.",
            "text": "Our main result of this section follows from Lemmas 10 and 11:\nTheorem 5. For any n \u2265 4 and e \u2265 3, ASLeftSub(e, n) \u2264 e.\n5.2 Lower bound for ASLeftSub(e, n) on CDAWGs\nThe next lower bound for ASLeftSub(e, n) holds (see Appendix A.3 for a proof).\nTheorem 6. There exists a family of strings T such that e(T \u2032)\u2212e(T ) = e(T )\u22123, where T \u2032 = bT [2..n] with b \u2208 \u03a3 \\ {T [1]}. Therefore ASLeftSub(e, n) \u2265 e\u2212 3."
        },
        {
            "heading": "6 Quadratic-time bound for leftward online construc-",
            "text": "tion\nThe leftward online construction problem for the CDAWG is, given a string T of length n, to maintain CDAWG(T [i..n]) for decreasing i = n, . . . , 1. By extending our lower bound on the sensitivity with left-end insertions/deletions, a quadratic bound for this online CDAWG construction follows:\nTheorem 7. There exists a family of strings Tm for which the total work for building CDAWG(Tm[i..n]) for decreasing i = n, . . . , 1 is \u2126(n 2), where n = |Tm|.\nProof. Consider string Tm = (ab) 2mcab(ab)2m$, where a, b, c, $ \u2208 \u03a3. For 0 \u2264 k \u2264 m, let Tk,m denote a series of suffixes of Tm such that Tk,m = (ab)m+kcab(ab)2m$. Notice Tm,m = Tm, m = \u0398(n) with n = |Tm,m|, and Tk,m = Tm[2(m\u2212 k) + 1..n].\nNow, we consider building CDAWG(Tm[i..n]) for decreasing i = n, . . . , 1, and suppose we have already built CDAWG(Tk,m). For this string Tk,m, we have that M(Tk,m) = {\u03b5, ab, (ab)2, . . . , (ab)2m, Tk,m}. For any node v of CDAWG(Tk,m) = (VTk,m ,ETk,m), let dTk,m(v) denote the out-degree of v. Then, since dTk,m(\u03b5) = 4, dTk,m((ab)\ni) = 3 for every 1 \u2264 i \u2264 m+k, dTk,m((ab)j) = 2 for every m+k+ 1 \u2264 j \u2264 2m, and dTk,m(Tk,m) = 0. Therefore e(Tk,m) = 5m+ k + 4.\nLet us now prepend character b to Tk,m and obtain Tk+1,m = bTk,m = b(ab)m+kc(ab)2m$. It is clear that bTk,m = Tm,m[2(m\u2212 k)..n]. We have that\nM(bTk,m) = {\u03b5, ab, (ab)2, ..., (ab)2m, b, bab, b(ab)2, ..., b(ab)m+k, bTk,m} = (M(Tk,m) \\ {Tk,m}) \u222a {b, bab, b(ab)2, ..., b(ab)m+k} \u222a {bTk,m},\nand that dbTk,m(\u03b5) = 4, dbTk,m(b) = 3, dbTk,m((ab) i) = dbTk,m(b(ab) i) = 3 for every 1 \u2264 i \u2264 m + k, dbTk,m(b(ab)j) = 2 for every m + k + 1 \u2264 j \u2264 2m, and dbTk,m(bTk,m) = 0. Thus e(bTk,m) = 8m + 4k + 7. Therefore, building CDAWG(Tk+1,m) from CDAWG(Tk,m) requires to add |e(Tk+1,m) \u2212 e(Tk,m)| = 3m+ 3k + 3 = \u2126(m) new edges (see the first step of Fig. 2 for illustration).\nLet us move on to the next step, where we prepend character a to bTk,m and obtain Tk+1,m = abTk,m = ab(ab)\nm+kc(ab)2m$. Note that abTk,m = Tk+1,m = Tm[2(m \u2212 k) \u2212 1..n], and M(Tk+1,m) = {\u03b5, ab, (ab)2, ..., (ab)2m, Tk+1,m}. We also have dTk+1,m(\u03b5) = 4, dTk+1,m((ab)\ni) = 3 for every 1 \u2264 i \u2264 m + k + 1, dTk+1,m((ab)\nj) = 2 for every m + k + 2 \u2264 j \u2264 2m, and dTk+1,m(Tk+1,m) = 0. This leads to e(Tk+1,m) = 5m+k+5. Therefore, building CDAWG(Tk+1,m) from CDAWG(bTk,m) requires to remove |e(Tk+1,m)\u2212e(bTk,m)| = 3m+3k+2 = \u2126(m) existing edges (see the second step of Fig. 2 for illustration).\nThis process of adding and removing \u2126(m) edges in every two steps repeats when we update CDAWG(Tk,m) to CDAWG(Tk+1,m) for every increasing k = 1, . . . ,m\u22121. Since m = \u0398(n), the total work for building CDAWG(Tm[i..n]) for decreasing i = n, . . . , 1 is \u2126(m2) = \u2126(n2).\nRemark 1. The linear-time algorithm of [8] for rightward online CDAWG construction maintains a slightly modified version of the CDAWG, which becomes isomorphic to our CDAWG when a terminal symbol $ is appended to the string. Still, our lower bound instance from Theorem 7 shows that $ does not help improve the time complexity of leftward online CDAWG construction."
        },
        {
            "heading": "7 Conclusions and further work",
            "text": "This paper investigated the worst-case additive sensitivity of the size of CDAWGs when a single-character edit operation is performed on the left-end of the input string. We proved that the number of new edges that appear after a left-end edit operation is at most the number of existing edges (upper bound). We also showed that there are almost matching lower bounds for all cases of left-end insertions, deletions, and substitutions.\nAn apparent future work is to close the small gap between our upper and lower bounds, which is at most by an additive factor of 3 (recall Table 1).\nAnother intriguing open question is the sensitivity of CDAWGs when an edit operation can be performed at an arbitrary position in the string. Our left-end sensitivity results should partly contribute to the general case, since maximal repeats that touch the edited position can be analyzed in a similar way. What remains is how to deal with maximal repeats which contain the edited position."
        },
        {
            "heading": "Acknowledgements",
            "text": "The authors thank Mitsuru Funakoshi for discussions. This work was supported by KAKENHI grant numbers 21K17705 and 22H03551."
        },
        {
            "heading": "A Appendix: Lower bounds on sensitivity of CDAWGs",
            "text": "with left-end edits\nWe present infinite families of strings that exhibit almost tight lower bounds on the worst-case additive sensitivity of CDAWGs with left-end edit operations.\nA.1 Proof for Lemma 2 (left-end insertions)\nProof. Consider string T = (ab)mc(ab)m+1, where a, b, c \u2208 \u03a3. We have that\nM(T ) = {\u03b5, ab, (ab)2, ..., (ab)m, T}.\nThen, since dT (\u03b5) = 3, dT ((ab) i) = 2 for every 1 \u2264 i \u2264 m, and dT (T ) = 0, we have e(T ) = 2m+ 3. Let us now prepend character b to T and obtain T \u2032 = b(ab)mc(ab)m+1. We have that\nM(T \u2032) = {\u03b5, ab, (ab)2, ..., (ab)m, b, bab, b(ab)2, ..., b(ab)m, T \u2032} = (M(T ) \\ {T}) \u222a {b, bab, b(ab)2, ..., b(ab)m} \u222a {T \u2032},\nand that dT \u2032(\u03b5) = 3, dT \u2032((ab) i) = 2 for every 1 \u2264 i \u2264 m, dT \u2032(b(ab)i) = 2 for every 0 \u2264 i \u2264 m \u2212 1, dT \u2032(b(ab)m) = 1, and dT \u2032(T \u2032) = 0 (see Fig. 3 for illustration). Thus e(T \u2032) = 4m + 4 = 2(2m + 3) \u2212 2 = 2e(T ) \u2212 2 which shows the claim ASLeftIns(e, n) \u2265 e\u2212 2.\nA.2 Proof for Theorem 4 (left-end deletions)\nProof. Consider string T = (ab)m+1c(ab)m, where a, b, c \u2208 \u03a3. We have that\nM(T ) = {\u03b5, ab, (ab)2, ..., (ab)m, T}.\nThen, since dT (\u03b5) = 3, dT ((ab) i) = 2 for every 1 \u2264 i \u2264 m, and dT (T ) = 0, we have e(T ) = 2m+ 3. Let us now deleted the first character a = T [1] from T and obtain T \u2032 = b(ab)mc(ab)m. We have that\nM(T \u2032) = {\u03b5, ab, (ab)2, ..., (ab)m, b, bab, b(ab)2, ..., b(ab)m\u22121, T \u2032} = (M(T ) \\ {T}) \u222a {b, bab, b(ab)2, ..., b(ab)m\u22121} \u222a {T \u2032},\nand that dT \u2032(\u03b5) = 3, dT \u2032((ab) i) = 2 for every 1 \u2264 i \u2264 m \u2212 1, dT \u2032(b(ab)i) = 2 for every 0 \u2264 i \u2264 m \u2212 1, dT \u2032((ab)m) = 1, and dT \u2032(T \u2032) = 0 (see Fig. 4 for illustration). Thus e(T \u2032) = 4m + 2 = 2(2m + 3) \u2212 4 = 2e(T ) \u2212 4 which shows the claim that ASLeftDel(e, n) \u2265 e\u2212 4.\nA.3 Proof for Theorem 6 (left-end substitutions)\nProof. Consider string T = (ab)m+1c(ab)m, where a, b, c \u2208 \u03a3. We have that\nM(T ) = {\u03b5, ab, (ab)2, ..., (ab)m, T}.\nThen, since dT (\u03b5) = 3, dT ((ab) i) = 2 for every 1 \u2264 i \u2264 m, and dT (T ) = 0, we have e(T ) = 2m+ 3. Let us now replace the first character a = T [1] of T by b and obtain T \u2032 = bb(ab)mc(ab)m. We have that\nM(T \u2032) = {\u03b5, ab, (ab)2, ..., (ab)m, b, bab, b(ab)2, ..., b(ab)m\u22121, T \u2032} = (M(T ) \\ {T}) \u222a {b, bab, b(ab)2, ..., b(ab)m\u22121} \u222a {T \u2032},\nand that dT \u2032(\u03b5) = dT \u2032(b) = 3, dT \u2032((ab) i) = dT \u2032(b(ab) i) = 2 for every 1 \u2264 i \u2264 m \u2212 1, dT \u2032(b(ab)m) = 1, and dT \u2032(T \u2032) = 0 (see Fig. 5 for illustration). Thus e(T \u2032) = 4m + 3 = 2(2m + 3) \u2212 3 = 2e(T ) \u2212 3 which shows the claim that ASLeftSub(e, n) \u2265 e\u2212 3."
        }
    ],
    "title": "On Sensitivity of Compact Directed Acyclic Word Graphs",
    "year": 2023
}