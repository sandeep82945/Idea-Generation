{
    "abstractText": "This study proposes an approach to minimize the maximum makespan of the integrated scheduling problem in flexible job-shop environments, taking into account conflict-free routing problems. A hybrid genetic algorithm is developed for production scheduling, and the optimal ranges of crossover and mutation probabilities are also discussed. The study applies the proposed algorithm to 82 test problems and demonstrates its superior performance over the Sliding Time Window (STW) heuristic proposed by Bilge and the Genetic Algorithm proposed by Ulusoy (UGA). For conflict-free routing problems of Automated Guided Vehicles (AGVs), the genetic algorithm based on AGV coding is used to study the AGV scheduling problem, and specific solutions are proposed to solve different conflicts. In addition, sensors on the AGVs provide real-time data to ensure that the AGVs can navigate through the environment safely and efficiently without causing any conflicts or collisions with other AGVs or objects in the environment. The Dijkstra algorithm based on a time window is used to calculate the shortest paths for all AGVs. Empirical evidence on the feasibility of the proposed approach is presented in a study of a real flexible job-shop. This approach can provide a highly efficient and accurate scheduling method for manufacturing enterprises.",
    "authors": [
        {
            "affiliations": [],
            "name": "Jiachen Sun"
        },
        {
            "affiliations": [],
            "name": "Zifeng Xu"
        },
        {
            "affiliations": [],
            "name": "Zhenhao Yan"
        },
        {
            "affiliations": [],
            "name": "Lilan Liu"
        },
        {
            "affiliations": [],
            "name": "Yixiang Zhang"
        }
    ],
    "id": "SP:2f4679e41ba3096bbd48821baeb08cc8fb81f846",
    "references": [
        {
            "authors": [
                "A.I. Sonmez",
                "A. Baykasoglu"
            ],
            "title": "A new dynamic programming formulation of (nxm) flowshop sequencing problems with due dates",
            "venue": "Int. J. Prod. Res",
            "year": 1998
        },
        {
            "authors": [
                "H.E. Nouri",
                "O.B. Driss",
                "K. Gh\u00e9dira"
            ],
            "title": "Simultaneous scheduling of machines and transport robots in flexible job shop environment using hybrid metaheuristics based on clustered holonic multiagent model",
            "year": 2016
        },
        {
            "authors": [
                "P.L. Mareddy",
                "S.R. Narapureddy",
                "V.R. Dwivedula",
                "P.R. Karanam"
            ],
            "title": "Optimum scheduling of machines, automated guided vehicles and tools without tool delay in a multi-machine flexible manufacturing system using symbiotic organisms search algorithm",
            "venue": "Concurr. Comput. Pract. Exp. 2022,",
            "year": 2022
        },
        {
            "authors": [
                "G. Ulusoy",
                "\u00dc. Bilge"
            ],
            "title": "Simultaneous scheduling of machines and automated guided vehicles",
            "venue": "Int. J. Prod. Res",
            "year": 1993
        },
        {
            "authors": [
                "K.V. Subbaiah",
                "M. Nageswara Rao",
                "K. Narayana Rao"
            ],
            "title": "Scheduling of AGVs and machines in FMS with makespan criteria using sheep flock heredity algorithm",
            "venue": "Int. J. Phys. Sci. 2009,",
            "year": 2009
        },
        {
            "authors": [
                "M. Badakhshian",
                "S.B. Sulaiman",
                "M.K.A. Ariffin"
            ],
            "title": "Performance optimization of simultaneous machine and automated guided vehicle scheduling using fuzzy logic controller based genetic algorithm",
            "venue": "Int. J. Phys. Sci",
            "year": 2012
        },
        {
            "authors": [
                "N.S. Reddy",
                "D.V. Ramamurthy",
                "K.P. Rao",
                "M.P. Lalitha"
            ],
            "title": "Practical simultaneous scheduling of machines, AGVs, tool transporter and tools in a multi machine FMS using symbiotic organisms search algorithm",
            "venue": "Int. J. Comput. Integr. Manuf",
            "year": 2021
        },
        {
            "authors": [
                "R. Erol",
                "C. Sahin",
                "A. Baykasoglu",
                "V. Kaplanoglu"
            ],
            "title": "A multi-agent based approach to dynamic scheduling of machines and automated guided vehicles in manufacturing systems",
            "venue": "Appl. Soft Comput",
            "year": 2012
        },
        {
            "authors": [
                "G. Zhang",
                "L. Gao",
                "Y. Shi"
            ],
            "title": "An effective genetic algorithm for the flexible job-shop scheduling problem",
            "venue": "Expert Syst. Appl",
            "year": 2011
        },
        {
            "authors": [
                "J. Yan",
                "Z. Liu",
                "C. Zhang",
                "T. Zhang",
                "Y. Zhang",
                "C. Yang"
            ],
            "title": "Research on flexible job shop scheduling under finite transportation conditions for digital twin workshop",
            "venue": "Robot. Comput.-Integr. Manuf",
            "year": 2021
        },
        {
            "authors": [
                "J.J. Palacios",
                "M.A. Gonz\u00e1lez",
                "C.R. Vela",
                "I. Gonz\u00e1lez-Rodr\u00edguez",
                "J. Puente"
            ],
            "title": "Genetic tabu search for the fuzzy flexible job shop problem",
            "venue": "Comput. Oper. Res",
            "year": 2015
        },
        {
            "authors": [
                "D. Wei"
            ],
            "title": "An optimized floyd algorithm for the shortest path problem",
            "venue": "J. Netw. 2010,",
            "year": 2010
        },
        {
            "authors": [
                "T.T. Mac",
                "C. Copot",
                "D.T. Tran",
                "R. De Keyser"
            ],
            "title": "A hierarchical global path planning approach for mobile robots based on multi-objective particle swarm optimization",
            "venue": "Appl. Soft Comput",
            "year": 2017
        },
        {
            "authors": [
                "X. Chen",
                "X. Zhang",
                "W. Huang",
                "S. Liu",
                "H. Dai"
            ],
            "title": "Coordinated optimal path planning of multiple substation inspection robots based on conflict detection",
            "venue": "In Proceedings of the 2019 Chinese Automation Congress (CAC), Hangzhou, China,",
            "year": 2019
        },
        {
            "authors": [
                "G. Sun",
                "R. Zhou",
                "B. Di",
                "Z. Dong",
                "Y. Wang"
            ],
            "title": "A novel cooperative path planning for multi-robot persistent coverage with obstacles and coverage period constraints",
            "venue": "Sensors 2019,",
            "year": 1994
        },
        {
            "authors": [
                "R.H. M\u00f6hring",
                "E. K\u00f6hler",
                "E. Gawrilow",
                "B. Stenzel"
            ],
            "title": "Conflict-free real-time AGV routing",
            "venue": "In Proceedings of the Operations Research Proceedings",
            "year": 2004
        },
        {
            "authors": [
                "G. Desaulniers",
                "A. Langevin",
                "D. Riopel",
                "B. Villeneuve"
            ],
            "title": "Dispatching and conflict-free routing of automated guided vehicles: An exact approach",
            "venue": "Int. J. Flex. Manuf. Syst. 2003,",
            "year": 2003
        },
        {
            "authors": [
                "N. Lin",
                "L.J. Xing"
            ],
            "title": "Application of Improved A* Algorithm in Magnetic Guidance AGV Path Planning",
            "venue": "Autom. Technol. Appl. 2019,",
            "year": 2019
        },
        {
            "authors": [
                "L. Xing",
                "Y. Liu",
                "H. Li",
                "C.C. Wu",
                "W.C. Lin",
                "X. Chen"
            ],
            "title": "A novel tabu search algorithm for multi-AGV routing problem",
            "year": 2020
        },
        {
            "authors": [
                "K. Murakami"
            ],
            "title": "Time-space network model and MILP formulation of the conflict-free routing problem of a capacitated AGV system",
            "venue": "Comput. Ind. Eng",
            "year": 2020
        },
        {
            "authors": [
                "Z. Yuan",
                "Z. Yang",
                "L. Lv",
                "Y. Shi"
            ],
            "title": "A bi-level path planning algorithm for multi-AGV routing problem",
            "venue": "Electronics 2020,",
            "year": 2020
        },
        {
            "authors": [
                "M. Saidi-Mehrabad",
                "S. Dehnavi-Arani",
                "F. Evazabadian",
                "V. Mahmoodian"
            ],
            "title": "An Ant Colony Algorithm (ACA) for solving the new integrated model of job shop scheduling and conflict-free routing of AGVs",
            "year": 2015
        },
        {
            "authors": [
                "L.L. Fu",
                "M.A. Aloulou",
                "C. Triki"
            ],
            "title": "Integrated production scheduling and vehicle routing problem with job splitting and delivery time windows",
            "venue": "Int. J. Prod. Res",
            "year": 2017
        },
        {
            "authors": [
                "\u00dc. Bilge",
                "G. Ulusoy"
            ],
            "title": "A time window approach to simultaneous scheduling of machines and material handling system in an FMS",
            "venue": "Oper. Res",
            "year": 1995
        },
        {
            "authors": [
                "Y. Tanaka",
                "T. Nishi",
                "M. Inuiguchi"
            ],
            "title": "Dynamic optimization of simultaneous dispatching and conflict-free routing for automated guided vehicles-Petri net decomposition approach",
            "venue": "J. Adv. Mech. Des. Syst. Manuf",
            "year": 2010
        },
        {
            "authors": [
                "A.I. Corr\u00e9a",
                "A. Langevin",
                "L.M. Rousseau"
            ],
            "title": "Scheduling and routing of automated guided vehicles: A hybrid approach",
            "venue": "Comput. Oper. Res",
            "year": 2007
        },
        {
            "authors": [
                "L. Liu",
                "K. Guo",
                "Z. Gao",
                "J. Li",
                "J. Sun"
            ],
            "title": "Digital Twin-Driven Adaptive Scheduling for Flexible Job Shops",
            "venue": "Sustainability 2022,",
            "year": 2022
        },
        {
            "authors": [
                "T.F. Abdelmaguid",
                "A.O. Nassef",
                "B.A. Kamal",
                "M.F. Hassan"
            ],
            "title": "A hybrid GA/heuristic approach to the simultaneous scheduling of machines and automated guided vehicles",
            "venue": "Int. J. Prod. Res",
            "year": 2004
        },
        {
            "authors": [
                "T.F. Abdelmaguid"
            ],
            "title": "Scheduling of Flexible Manufacturing Systems Using Hybrid Genetic Algorithm",
            "year": 2000
        }
    ],
    "sections": [
        {
            "text": "Citation: Sun, J.; Xu, Z.; Yan, Z.; Liu,\nL.; Zhang, Y. An Approach to\nIntegrated Scheduling of Flexible\nJob-Shop Considering Conflict-Free\nRouting Problems. Sensors 2023, 23,\n4526. https://doi.org/10.3390/\ns23094526\nAcademic Editor: Iwona Grobelna\nReceived: 9 April 2023\nRevised: 29 April 2023\nAccepted: 5 May 2023\nPublished: 6 May 2023\nCopyright: \u00a9 2023 by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an open access article\ndistributed under the terms and\nconditions of the Creative Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n4.0/).\nKeywords: integrated scheduling; flexible job-shop; conflict-free routing problem; hybrid genetic algorithm; production scheduling; automated guided vehicle; path planning"
        },
        {
            "heading": "1. Introduction",
            "text": "Job-shop Scheduling Problems (JSPs) are known as typical NP-complete problems [1]. Flexible Job-shop Scheduling Problems (FJSPs) are an extension of JSP. Unlike the classical JSP, the FJSP does not predefine the machine for each operation. Instead, FJSP provides the opportunity to select from multiple machines for each operation, making it more closely aligned with real-world situations [2]. The integrated scheduling problem in a flexible job shop mainly involves scheduling production machines and AGVs. It requires a scientific and reasonable scheduling arrangement for production tasks to achieve the optimal allocation of equipment and resources in the system and ultimately achieve the purpose of improving production efficiency [3]. The literature review in this paper is carried out in two aspects: the scheduling problem of flexible job-shops and the routing problem of multiple AGVs. Ulusoy et al. [4] were the first to propose an algorithm for integrated scheduling by using AGVs and production equipment simultaneously as the object of study for the scheduling problem under the assumption that there is no path conflict. They used a genetic algorithm to solve the problem of scheduling production equipment and AGVs simultaneously and established classical cases. Subbaiah [5] used a flock genetic algorithm to solve the scheduling problem with a fixed number of AGVs. He used maximum completion time and minimum average delay as the objective function and determined the optimal solution with a smaller number of iterations. Badakhshian [6] used a fuzzy logic\nSensors 2023, 23, 4526. https://doi.org/10.3390/s23094526 https://www.mdpi.com/journal/sensors\nSensors 2023, 23, 4526 2 of 25\ncontroller to control the operators of the genetic algorithm to filter better combinations of initial parameters. Reddy et al. [7] dealt with machine, AGV, and tool simultaneous scheduling in a multi-machine flexible manufacturing system considering jobs\u2019 transport times among machines to minimize makespan. Erol [8] proposed a multi-agent system for simultaneous dynamic scheduling of AGVs and production equipment and compared it with five different algorithms. Zhang et al. [9] proposed an effective genetic algorithm to minimize makespan and designed Global Selection (GS) and Local Selection (LS) to generate a high-quality initial population in the initialization stage. Yan et al. [10] addressed the constraint influence imposed by finite transportation conditions in the FJSP and analyzed the coupling relationship between transportation and processing stages. Palacios [11] proposed an effective genetic algorithm hybridized with tabu search and heuristic seeding to minimize the makespan. However, the above research studies have primarily centered on production and AGV scheduling but have neglected vehicle collisions and routing problems. Conflict-free Routing Problem (CFRP) is a policy that plans a path for an AGV to avoid path conflicts caused by paths occupied by other AGVs during its run time. These multiple AGV systems need to consider conflict avoidance and efficiency between multiple AGVs. Path planning for multiple AGVs has long been proven to be an \u201cNP-complete\u201d problem. Path planning is generally divided into two stages: (1) representing the environment discretely; (2) searching for the optimal path using the graph search algorithm. In terms of discrete representation of the environment, there are two main methods: the raster method and the road map method. In most industrial scenarios, there are pre-planned routes, and road maps exist naturally. Path search is based on the road map. There are many classical algorithms for graph-based searches, such as the Dijkstra algorithm, A* algorithm, and Floyd algorithm [12]. In actual engineering, the layout of the workshop is mostly single-lane. If path planning of AGVs only considers the shortest path, AGVs are bound to encounter path conflicts during transportation. Mac T T et al. [13] used the Dijkstra algorithm to obtain an optimal conflict-free path a the triangular decomposition graph and used a genetic algorithm to smooth the path obtained from the planning. Zhang et al. [14] proposed a Dijkstra-based path planning algorithm to generate optimal collisionfree paths for substation inspection multi-robots. Sun et al. [15] proposed an improved A* algorithm to solve the multi-robot collaborative path planning for the large area coverage problem. They optimized the previously calculated paths by the A* algorithm to minimize the distance traveled by the vehicle and provided the optimal solution based on the path planning problem in the multi-robot system. A deadlock is a state of a system where two or more processes are unable to proceed further because each process is waiting for the other to release the resources they need. This results in a standstill where both processes are stuck and cannot proceed unless one of the processes releases its resources. M\u00f6hring et al. [16] used a time window function to solve the common deadlock problem during conflict-free path planning. Desauliners et al. [17] proposed an exact solution to the real-time scheduling and conflict-free routing problem of AGVs, with the goal of reducing the production costs associated with production delays. Lin et al. [18] proposed a path-planning method using A* algorithm with RFID technology. This method mainly calculates the shortest path based on the coordinate information provided by the RFID tag and selects the path with the smallest angle in the current driving direction, and finally attains the result of fewer turns and the shortest path. Xing et al. [19] proposed a novel tabu search algorithm that aims to enhance the operational efficiency of AGVs in an automated warehouse. Murakami [20] addressed an AGV routing problem by formulating the dispatch and conflict-free routing problem of a capacitated AGV system as a mixed-integer linear programming problem. Yuan et al. [21] proposed a bi-level path planning algorithm to optimize the routing of multi-AGVs. Previous studies primarily focused on the vehicle routing problem and collision-free routing problem while neglecting problems of production scheduling or assuming optimality in the scheduling problem. However, optimal path planning may not necessarily align with optimal scheduling and may not result in the ideal makespan.\nSensors 2023, 23, 4526 3 of 25\nMost of the research in this area concentrates on production scheduling problems, AGV scheduling problems, or a combination of both. Little research has also been conducted considering the path conflicts of AGVs. Saidi-Mehrabad et al. [22] proposed an ant colony algorithm to address a JSP by considering the CFRP and the transportation time. Fu et al. [23] studied a production scheduling and vehicle routing problem with job splitting and delivery time windows in a company working in the metal packaging industry. However, their research did not specifically focus on the FJSP problem. Hence, this paper takes into account the integrated scheduling of the flexible job-shop, which involves scheduling machines and AGVs simultaneously while also considering path conflicts and transportation time."
        },
        {
            "heading": "2. Problem Description",
            "text": ""
        },
        {
            "heading": "2.1. Integrated Scheduling Problem of Flexible Job-Shop",
            "text": "Flexible job-shop mainly completes the manufacturing process of workpieces. As the main equipment for material transportation, AGVs complete the transportation of materials between various stations. Materials are loaded or unloaded at different stations. Therefore, AGV trips can be classified as either deadheading or loaded trips. During deadheading trips, the AGV moves empty from its current station to a different station where it loads material. In contrast, during loaded trips, the AGV moves material between stations. Due to the conflict routing problem, the scheduling of AGVs cannot take the shortest path but the shortest transportation time as the optimization goal. In a flexible job-shop, manufacturing machines and transportation equipment can only effectively improve the overall production efficiency by cooperating with each other. Since the conflict-free routing problem causes uncertainty in the transportation time of multiple AGVs, it is important for the optimal allocation of production resources to realize the integrated scheduling of machines and AGVs. In the flexible job-shop, it is assumed that there are m sets of machines and w sets of AGVs, which have the same transport capacity, assigned the task of processing n workpieces. Each workpiece comprises multiple processing operations. Machines in the job-shop have a high degree of automation, and each machine can complete multiple different operations on different workpieces. Therefore, each operation can be completed by different machines. However, the time required to complete the same operation varies for different machines. Our laboratory functions as a workshop for the production of personalized custom cars, with five unique models available. With each model having a unique set of operations, the predetermined durations for each operation are known. It is in line with the flexible job-shop problem. Figure 1 shows the layout of our laboratory. There are three AGVs. Node 1 is the L/U station. AGVs depart from the L/U station with the materials and carry the finished workpiece back to the L/U station. Four machines are distributed in Nodes 8, 9, 17, and 18, respectively. Table 1 shows the processing machines for each operation and the time required. Table 2 shows the transportation time.\nSensors 2023, 23, 4526 4 of 25\nTable 1. Cont.\nWorkpiece Operation Machine Time(s)\n4 1 3 6 2 1 14\n5 1 4 20 Sensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 4\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\n\u00a0 Figure\u00a01.\u00a0Layout\u00a0of\u00a0the\u00a0flexible\u00a0job\u2010shop.\u00a0\nTable\u00a01\u00a0shows\u00a0 the\u00a0processing\u00a0machines\u00a0 for\u00a0each\u00a0operation\u00a0and\u00a0 the\u00a0 time\u00a0 required.\u00a0\nTable\u00a02\u00a0shows\u00a0the\u00a0transportation\u00a0time.\u00a0\nTable\u00a01.\u00a0Processing\u00a0machines\u00a0for\u00a0each\u00a0process\u00a0and\u00a0the\u00a0time\u00a0required.\u00a0\nWorkpiece\u00a0 Operation\u00a0 Machine\u00a0 Time(s)\u00a0\n1\u00a0 1\u00a0 2\u00a0 8\u00a0 2\u00a0 4\u00a0 10\u00a0\n2\u00a0 1\u00a0 4\u00a0 10\u00a0 2\u00a0 3\u00a0 14\u00a0\n3\u00a0 1\u00a0 1\u00a0 20\u00a0\n4\u00a0 1\u00a0 3\u00a0 6\u00a0 2\u00a0 1\u00a0 14\u00a0\n5\u00a0 1\u00a0 4\u00a0 20\u00a0\nTable\u00a02.\u00a0Transportation\u00a0time(s).\u00a0\nFrom/To\u00a0 L/U\u00a0 M1\u00a0 M2\u00a0 M3\u00a0 M4\u00a0 L/U\u00a0 0\u00a0 18\u00a0 16\u00a0 12\u00a0 8\u00a0 M1\u00a0 18\u00a0 0\u00a0 14\u00a0 14\u00a0 18\u00a0 M2\u00a0 16\u00a0 14\u00a0 0\u00a0 12\u00a0 12\u00a0 M3\u00a0 12\u00a0 14\u00a0 12\u00a0 0\u00a0 16\u00a0 M4\u00a0 8\u00a0 18\u00a0 12\u00a0 16\u00a0 0\u00a0\n2.2.\u00a0CFRP\u00a0 In\u00a0the\u00a0study\u00a0of\u00a0path\u00a0planning,\u00a0due\u00a0to\u00a0the\u00a0constant\u00a0travel\u00a0speed\u00a0of\u00a0AGVs,\u00a0the\u00a0path\u00a0 with\u00a0the\u00a0shortest\u00a0distance\u00a0 in\u00a0a\u00a0single\u00a0AGV\u00a0manufacturing\u00a0system\u00a0 is\u00a0generally\u00a0the\u00a0path\u00a0 with\u00a0the\u00a0shortest\u00a0time.\u00a0However,\u00a0in\u00a0a\u00a0multi\u2010AGV\u00a0system,\u00a0multiple\u00a0AGVs\u00a0are\u00a0responsible\u00a0 for\u00a0different\u00a0process\u00a0transportation\u00a0tasks\u00a0at\u00a0the\u00a0same\u00a0time,\u00a0so\u00a0the\u00a0path\u00a0with\u00a0the\u00a0shortest\u00a0 distance\u00a0may\u00a0be\u00a0occupied\u00a0by\u00a0other\u00a0AGVs\u00a0and\u00a0require\u00a0a\u00a0certain\u00a0waiting\u00a0time.\u00a0So,\u00a0the\u00a0path\u00a0 with\u00a0the\u00a0shortest\u00a0distance\u00a0is\u00a0not\u00a0necessarily\u00a0the\u00a0path\u00a0with\u00a0the\u00a0shortest\u00a0time.\u00a0The\u00a0objective\u00a0 function\u00a0of\u00a0the\u00a0multi\u2010AGV\u00a0manufacturing\u00a0system\u00a0comprises\u00a0the\u00a0shortest\u00a0time\u00a0path\u00a0plan\u2010 ning\u00a0to\u00a0optimize\u00a0transportation\u00a0equipment\u00a0allocation\u00a0and\u00a0AGV\u00a0utilization.\u00a0\n\u00a0 \u00a0\nfl - .\nTable 2. Transportation time(s).\nFrom/To L/U M1 M2 M3 M4\nL/U 0 18 16 12 8 M1 18 0 14 14 18 M2 16 14 0 12 12 M3 12 14 12 0 16 M4 8 18 12 16 0"
        },
        {
            "heading": "2.2. CFRP",
            "text": "In the study of path planning, due to the constant travel speed of AGVs, the path with the shortest distance in a single AGV manufacturing system is generally the path with the shortest time. However, in a multi-AGV system, multiple AGVs are responsible for different process transportation tasks at the same time, so the path with the shortest distance may be occupied by other AGVs and require a certain waiting time. So, the path with the shortest distance is not necessarily the path with the shortest time. The objective function of the multi-AGV manufacturing system comprises the shortest time path planning to optimize transportation equipment allocation and AGV utilization.\n(1) Conflict classification\nDuring the operation of multiple AGVs, there are mainly three types of conflict: node conflict, catch-up conflict, and opposite conflict. Since it is assumed in this paper that AGVs travel at a constant speed during transportation, the catch-up conflicts caused by different speeds will not be discussed in this paper.\n1. Opposite conflict\nWhen two AGVs travel towards each other on the same path, only one AGV is allowed to pass on each path at the same time. In this case, two AGVs collide, resulting in a deadlock,\nSensors 2023, 23, 4526 5 of 25\nas shown in Figure 2a. Similarly, if an AGV moves from one path into the path of another, they will collide when moving in opposite directions, as illustrated in Figure 2b,c.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 5\u00a0 of\u00a0 25\u00a0 \u00a0\n(1) Conflict\u00a0classification\u00a0 During\u00a0the\u00a0operation\u00a0of\u00a0multiple\u00a0AGVs,\u00a0there\u00a0are\u00a0mainly\u00a0three\u00a0types\u00a0of\u00a0conflict:\u00a0node\u00a0 conflict,\u00a0 catch\u2010up\u00a0 conflict,\u00a0and\u00a0opposite\u00a0 conflict.\u00a0Since\u00a0 it\u00a0 is\u00a0assumed\u00a0 in\u00a0 this\u00a0paper\u00a0 that\u00a0 AGVs\u00a0travel\u00a0at\u00a0a\u00a0constant\u00a0speed\u00a0during\u00a0transportation,\u00a0the\u00a0catch\u2010up\u00a0conflicts\u00a0caused\u00a0by\u00a0 different\u00a0speeds\u00a0will\u00a0not\u00a0be\u00a0discussed\u00a0in\u00a0this\u00a0paper.\u00a0\n1. Opposite\u00a0conflict\u00a0 When\u00a0two\u00a0AGVs\u00a0travel\u00a0towards\u00a0each\u00a0other\u00a0on\u00a0the\u00a0same\u00a0path,\u00a0only\u00a0one\u00a0AGV\u00a0is\u00a0al\u2010\nlowed\u00a0to\u00a0pass\u00a0on\u00a0each\u00a0path\u00a0at\u00a0the\u00a0same\u00a0time.\u00a0In\u00a0this\u00a0case,\u00a0two\u00a0AGVs\u00a0collide,\u00a0resulting\u00a0in\u00a0a\u00a0 deadlock,\u00a0as\u00a0shown\u00a0in\u00a0Figure\u00a02a.\u00a0Similarly,\u00a0if\u00a0an\u00a0AGV\u00a0moves\u00a0from\u00a0one\u00a0path\u00a0into\u00a0the\u00a0path\u00a0 of\u00a0another,\u00a0they\u00a0will\u00a0collide\u00a0when\u00a0moving\u00a0in\u00a0opposite\u00a0dir ctions,\u00a0as\u00a0illustrated\u00a0in\u00a0Figure\u00a0 2b,c.\u00a0\nFigure\u00a02.\u00a0Opposite\u00a0conflict.\u00a0\n2. Node\u00a0conflict\u00a0 When\u00a0AGV1\u00a0and\u00a0AGV2\u00a0arrive\u00a0at\u00a0the\u00a0same\u00a0node\u00a0at\u00a0the\u00a0same\u00a0time,\u00a0a\u00a0node\u00a0conflict\u00a0will\u00a0\noccur\u00a0at\u00a0this\u00a0station,\u00a0resulting\u00a0in\u00a0collision\u00a0and\u00a0deadlock.\u00a0 (2) Regulation\u00a0principle\u00a0\n1. Shortest\u00a0path\u00a0 Under\u00a0the\u00a0condition\u00a0that\u00a0the\u00a0speed\u00a0is\u00a0fixed,\u00a0the\u00a0shorter\u00a0the\u00a0path,\u00a0the\u00a0shorter\u00a0the\u00a0time\u00a0\nto\u00a0execute\u00a0the\u00a0transportation\u00a0task,\u00a0which\u00a0can\u00a0maximize\u00a0the\u00a0proportion\u00a0of\u00a0the\u00a0transporta\u2010 tion\u00a0time\u00a0in\u00a0the\u00a0total\u00a0completion\u00a0time\u00a0and\u00a0ensure\u00a0that\u00a0the\u00a0AGV\u00a0after\u00a0the\u00a0completion\u00a0of\u00a0the\u00a0 transportation\u00a0task\u00a0can\u00a0be\u00a0put\u00a0into\u00a0the\u00a0next\u00a0scheduling\u00a0task\u00a0as\u00a0soon\u00a0as\u00a0possible,\u00a0saving\u00a0the\u00a0 transportation\u00a0resources\u00a0and\u00a0the\u00a0cost\u00a0generated\u00a0by\u00a0the\u00a0AGV\u2019s\u00a0own\u00a0driving.\u00a0\n2. Minimum\u00a0waiting\u00a0time\u00a0 Time\u00a0is\u00a0wasted\u00a0when\u00a0AGVs\u00a0collide\u00a0or\u00a0choose\u00a0a\u00a0suboptimal\u00a0path.\u00a0\n3.\u00a0Mathematical\u00a0Models\u00a0 3.1.\u00a0Integrated\u00a0Scheduling\u00a0Problem\u00a0of\u00a0Flexible\u00a0Job\u2010Shop\u00a0\nBased\u00a0on\u00a0the\u00a0above\u00a0description,\u00a0the\u00a0problem\u00a0under\u00a0study\u00a0needs\u00a0to\u00a0meet\u00a0the\u00a0following\u00a0 assumptions:\u00a0 (1) Each\u00a0machine\u00a0is\u00a0capable\u00a0of\u00a0processing\u00a0only\u00a0one\u00a0job\u00a0at\u00a0a\u00a0time;\u00a0 (2) Each\u00a0operation\u00a0can\u00a0only\u00a0be\u00a0processed\u00a0on\u00a0one\u00a0machine,\u00a0not\u00a0split\u00a0onto\u00a0two\u00a0machines;\u00a0 (3) The\u00a0AGVs\u00a0travel\u00a0at\u00a0a\u00a0constant\u00a0speed\u00a0in\u00a0the\u00a0system,\u00a0including\u00a0the\u00a0time\u00a0it\u00a0takes\u00a0to\u00a0turn\u00a0 and\u00a0crossroads;\u00a0 (4) An\u00a0AGV\u00a0is\u00a0assigned\u00a0the\u00a0task\u00a0of\u00a0transporting\u00a0a\u00a0single\u00a0job\u00a0at\u00a0a\u00a0time;\u00a0 (5) It\u00a0does\u00a0not\u00a0consider\u00a0the\u00a0charging\u00a0problem\u00a0and\u00a0fault\u00a0problem\u00a0of\u00a0the\u00a0AGVs,\u00a0and\u00a0AGVs\u00a0 are\u00a0always\u00a0available;\u00a0 (6) There\u00a0is\u00a0no\u00a0sequence\u00a0constraint\u00a0on\u00a0the\u00a0operations\u00a0between\u00a0different\u00a0workpieces;\u00a0 (7) AGV\u00a0transportation\u00a0and\u00a0machine\u00a0processing\u00a0cannot\u00a0be\u00a0interrupted;\u00a0\n2. Node conflict\nhen 1 and 2 arrive at the sa e o e at t e sa e ti e, e flict ill occ r at this station, resulting in collision and deadlock.\n(2) Regulation principle\n1. Shortest path\nUnder the condition that the speed is fixed, the shorter the path, the shorter the time to execute the transportation task, which can maximize the proportion of the transportation time in the total completion time and ensure that the AGV after the completion of the transportation task can be put into the next scheduling task as soon as possible, saving the transportation resources and the cost generated by the AGV\u2019s own driving.\n2. Minimum waiting time\nTime is wasted when AGVs collide or choose a suboptimal path."
        },
        {
            "heading": "3. athematical odels",
            "text": ""
        },
        {
            "heading": "3.1. I te r te c e li g roble of Flexible Job-Shop",
            "text": "ased on t e e scri tion, the roble nder study eeds to eet t ll i ass ptions:\n(1) j t ti ; (2) i , t lit t t c i es; (3) , i l i t e ti e it t es t t r\n(4) j ti ; (5) It t i t i l f lt le f t s, s r l il l ; (6) ere is se e ce c strai t t e erati s et ee iffere t r ieces; (7) trans ortation an achine rocessing cannot be interr te ;\nThe meanings of symbols and variables in the established mathematical model are shown in Table 3 [24].\nSensors 2023, 23, 4526 6 of 25\nSensors 2023, 23, 4526 7 of 25\nw\n\u2211 v=1 xijv = 1, \u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui} (5)\nw \u2211\nv=1 yijv = 1, S\u2032Ti\u2032 j\u2032v \u2265 CTijv,\n\u2200i, i\u2032 \u2208 {1, 2, . . . , n}, \u2200j, j\u2032 \u2208 {1, 2, . . . , ui}, \u2200v \u2208 {1, 2, . . . , w} (6)\nCijk = Sijk + tijk, \u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui}, \u2200k \u2208 {1, 2, . . . , m}\n(7)\nS\u2032Tijv\u2032 \u2265 CTi(j\u22121)v + m \u2211\nk=1 \u03b1i(j\u22121)k \u00b7 ti(j\u22121)k,\n\u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui}, \u2200v, v\u2032 \u2208 {1, 2, . . . , w}, \u2200k \u2208 {1, 2, . . . , w} (8)\nCTijv \u2265 STijv + m \u2211\nk=1\nm \u2211\nk\u2032=1 \u03b1i(j\u22121)k\u2032 \u00b7 \u03b1ijk \u00b7 tkk\u2032 ,\n\u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui}, \u2200k, k\u2032 \u2208 {1, 2, . . . , m}, \u2200v \u2208 {1, 2, . . . , w} (9)\nw\n\u2211 v=1 zvst \u2264 1, \u2200s \u2208 {1, 2, . . . , p}, \u2200t \u2208 C (10)\nSTijv \u2265 max ( C\u2032Tijv, Ci(j\u22121) ) , \u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui} (11)\nSijk \u2265 max { CTijv, max { Cpqk | \u2200p = 1, 2, . . . , n, q 6= j }}\n, \u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui}, \u2200k \u2208 {1, 2, . . . , m}, \u2200v \u2208 {1, 2, . . . , w}\n(12)\ni f \u03b1ijk = 1, xijv = 1, C\u2032Tijv \u2265 Ci(j\u22121)k, then STijv = C\u2032Tijv; i f \u03b1ijk = 1, xijv = 1, C\u2032Tijv < Ci(j\u22121)k, then STijv = Ci(j\u22121)k.\n\u2200i \u2208 {1, 2, . . . , n}, \u2200j \u2208 {1, 2, . . . , ui}, \u2200v \u2208 {1, 2, . . . , w}\n(13)\nFormula (1) shows that minimizing the maximum makespan is the primary objective. Constraint 2 states that the optimal number of AGVs is equal to the minimum number of AGVs in the job-shop when the maximum completion time is minimum. Constraint 3 indicates that each process can only be processed on one device. Constraint 4 prevents overlapping of the workpiece processing by mandating the start time of a workpiece to come after its completion time. Constraint 5 indicates that each process must be handled by a single AGV for transportation. Constraint 6 ensures that AGVs only move to the next transportation task after completing the previous one to ensure continuity of work and avoid simultaneous tasks. It also ensures that AGVs will not execute two or more transportation tasks at the same time. Constraint 7 indicates that the processing interruptions caused by AGV failure or equipment failure are not considered in the processing process. Constraint 8 indicates that the next no-load transportation task can only commence after the current AGV task is finished. Constraint 9 indicates that the load travel time of the current AGV transportation task should be greater than or equal to the sum of its no-load time and the transportation time required between the two processing machines. This is because the completion time of the last process may be after the time when the AGV arrives at the machine, and the AGV needs to wait for the completion of the last operation before it can execute the transportation task. Constraint 10 indicates that each node can only be occupied by one AGV at a time. Constraint 11 mandates that the AGV cannot start the transportation task until it has completed the preceding operation and arrived at the destination. Constraint 12 indicates that machining can only begin after the end of the load stroke. Constraint 13 restricts the process sequence of the same workpiece and ensures the continuity of the transportation process. If the no-load AGV reaches the position of the\nSensors 2023, 23, 4526 8 of 25\nprocessing equipment after the workpiece is processed, the no-load end time is equal to the start time of the load transport. If the no-load AGV arrives before the workpiece is finished, the load transport start time is equal to the workpiece process completion time. In the production process, the perfect transportation process is similar to this: at the end of the AGV no-load stroke, the last process is just finished; When the AGV load ends, the processing machine just completes the processing task of the current workpiece. If an AGV with no load travel arrives before the completion of the previous process, Ci(j\u22121)k > C\u2032Tijv; On the same processing equipment, the completion time of the current workpiece process is greater than the end time of the loading stroke of the next workpiece AGV, Cpqk \u00b7 \u03b2pqijk > CTijv. Both cases will form invalid waiting times, reduce the utilization rate of AGVs and ultimately affect the final completion time of the whole production."
        },
        {
            "heading": "3.2. CFRP",
            "text": "In flexible systems, AGVs need to drive continuously in the workshop to transport the workpieces and materials to their destination and need to address and change the path constantly. Therefore, it is necessary to solve various conflicts that may be encountered in path planning at the algorithm level [25]. Traditional path-planning strategies are usually divided into two types. One path strategy prioritizes the optimal path and chooses to wait in place or in other idle paths according to the conflict type to ensure the shortest AGV distance. Another routing strategy does not consider path conflicts but only ensures the principle of avoiding conflicts during AGV movement. Once a path or node is occupied, the second-best feasible path is selected. Neither of these two strategies can guarantee the shortest transportation time for AGVs. On the basis of these two strategies, a new recursive discriminant strategy is proposed in this paper, which not only solves the path conflict problem but also plans an accurate conflict-free path for AGVs to ensure the shortest transportation time of AGVs. In the multi-AGV manufacturing system, the current problem to be solved is how to make the car find a sub-optimal path to reach the destination with the shortest time and minimum cost loss while avoiding a collision. We provided each car with a different task, entered the shop in turn, completed the task, and arrived at the destination. The map adopts a single-row bidirectional job-shop layout, so before establishing a mathematical model for the planning problem, basic assumptions should be made about the system where the AGV resides [26]:\n(1) One AGV can only perform one task at a time. (2) All AGVs move at a constant velocity and possess identical features. (3) Breakdowns and charging problems are not taken into account. (4) Once AGV is working, it is not allowed to be interrupted.\nThe mathematical model employs the following set of symbols and variables:\nw : index o f AGVs\nkv: set of AGVs, v \u2208 {1, 2, . . . , w}; Ns: set of nodes, s \u2208 {1, 2, . . . , p}, p represents the node number;\ntss\u2032 : the travel time of the AGV from notes s to node s \u2032, s, s\u2032 \u2208 {1, 2, . . . , p}, s 6= s\u2032; Zvst = {\n1, i f AGV v occupies node s at time t 0, else ;\nAs1s2t\n{ 1, i f the path f rom s1 to the adjacent node s2 can pass at time t, s1 6= s2\n0, else ;\nVs1s2vt = { 1, i f AGV v occupies the path f rom s1 to the adjacent node s2 at time t, s1 6= s2 0, i f there are other AGVs coming in the opposite direction on the same path\nSensors 2023, 23, 4526 9 of 25\nAGVs travel at a constant speed, and the mathematical model takes the shortest total travel time of all AGVs as the objective function, as shown in Formula (14).\nminZ = min w\n\u2211 v=1 Qv (14)\nFirstly, mathematical modeling is carried out for possible path conflicts in path planning. Node conflict is caused by more than one car arriving at a node at the same time. Formula (15) indicates that only one car can occupy a node at the same time, as shown in Figure 3.\nw\n\u2211 v=1 zvst \u2264 1, \u2200s \u2208 {1, 2, . . . , p} (15)\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 9\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\n\ud835\udc4d 1\uff0c\ud835\udc56\ud835\udc53 \ud835\udc34\ud835\udc3a\ud835\udc49 \ud835\udc63 \ud835\udc5c\ud835\udc50\ud835\udc50\ud835\udc62\ud835\udc5d\ud835\udc56\ud835\udc52\ud835\udc60 \ud835\udc5b\ud835\udc5c\ud835\udc51\ud835\udc52 \ud835\udc60 \ud835\udc4e\ud835\udc61 \ud835\udc61\ud835\udc56\ud835\udc5a\ud835\udc52 \ud835\udc610\uff0c\ud835\udc52\ud835\udc59\ud835\udc60\ud835\udc52 ;\u00a0\n\ud835\udc34 1\uff0c\ud835\udc56\ud835\udc53 \ud835\udc61\u210e\ud835\udc52 \ud835\udc5d\ud835\udc4e\ud835\udc61\u210e \ud835\udc53\ud835\udc5f\ud835\udc5c\ud835\udc5a \ud835\udc60 \ud835\udc61\ud835\udc5c \ud835\udc61\u210e\ud835\udc52 \ud835\udc4e\ud835\udc51\ud835\udc57\ud835\udc4e\ud835\udc50\ud835\udc52\ud835\udc5b\ud835\udc61 \ud835\udc5b\ud835\udc5c\ud835\udc51\ud835\udc52 \ud835\udc60 \ud835\udc50\ud835\udc4e\ud835\udc5b \ud835\udc5d\ud835\udc4e\ud835\udc60\ud835\udc60 \ud835\udc4e\ud835\udc61 \ud835\udc61\ud835\udc56\ud835\udc5a\ud835\udc52 \ud835\udc61\uff0c\ud835\udc60 \ud835\udc600\uff0c\ud835\udc52\ud835\udc59\ud835\udc60\ud835\udc52 ;\u00a0\n\ud835\udc49 1\uff0c\ud835\udc56\ud835\udc53 \ud835\udc34\ud835\udc3a\ud835\udc49 \ud835\udc63 \ud835\udc5c\ud835\udc50\ud835\udc50\ud835\udc62\ud835\udc5d\ud835\udc56\ud835\udc52\ud835\udc60 \ud835\udc61\u210e\ud835\udc52 \ud835\udc5d\ud835\udc4e\ud835\udc61\u210e \ud835\udc53\ud835\udc5f\ud835\udc5c\ud835\udc5a \ud835\udc60 \ud835\udc61\ud835\udc5c \ud835\udc61\u210e\ud835\udc52 \ud835\udc4e\ud835\udc51\ud835\udc57\ud835\udc4e\ud835\udc50\ud835\udc52\ud835\udc5b\ud835\udc61 \ud835\udc5b\ud835\udc5c\ud835\udc51\ud835\udc52 \ud835\udc60 \ud835\udc4e\ud835\udc61 \ud835\udc61\ud835\udc56\ud835\udc5a\ud835\udc52 \ud835\udc61\uff0c\ud835\udc60 \ud835\udc600\uff0c\ud835\udc56\ud835\udc53 \ud835\udc61\u210e\ud835\udc52\ud835\udc5f\ud835\udc52 \ud835\udc4e\ud835\udc5f\ud835\udc52 \ud835\udc5c\ud835\udc61\u210e\ud835\udc52\ud835\udc5f \ud835\udc34\ud835\udc3a\ud835\udc49\ud835\udc60 \ud835\udc50\ud835\udc5c\ud835\udc5a\ud835\udc56\ud835\udc5b\ud835\udc54 \ud835\udc56\ud835\udc5b \ud835\udc61\u210e\ud835\udc52 \ud835\udc5c\ud835\udc5d\ud835\udc5d\ud835\udc5c\ud835\udc60\ud835\udc56\ud835\udc61\ud835\udc52 \ud835\udc51\ud835\udc56\ud835\udc5f\ud835\udc52\ud835\udc50\ud835\udc61\ud835\udc56\ud835\udc5c\ud835\udc5b \ud835\udc5c\ud835\udc5b \ud835\udc61\u210e\ud835\udc52 \ud835\udc60\ud835\udc4e\ud835\udc5a\ud835\udc52 \ud835\udc5d\ud835\udc4e\ud835\udc61\u210e \u00a0\nAGVs\u00a0travel\u00a0at\u00a0a\u00a0constant\u00a0speed,\u00a0and\u00a0the\u00a0mathematical\u00a0model\u00a0takes\u00a0the\u00a0shortest\u00a0total\u00a0 travel\u00a0time\u00a0of\u00a0all\u00a0AGVs\u00a0as\u00a0the\u00a0objective\u00a0function,\u00a0as\u00a0shown\u00a0in\u00a0Formula\u00a0(14).\u00a0\n\ud835\udc5a\ud835\udc56\ud835\udc5b\ud835\udc4d \ud835\udc5a\ud835\udc56\ud835\udc5b \ud835\udc44 \u00a0 (14)\nFirstly,\u00a0mathematical\u00a0modeling\u00a0is\u00a0carried\u00a0out\u00a0for\u00a0possible\u00a0path\u00a0conflicts\u00a0in\u00a0path\u00a0plan\u2010 ning.\u00a0Node\u00a0conflict\u00a0is\u00a0caused\u00a0by\u00a0more\u00a0than\u00a0one\u00a0car\u00a0arriving\u00a0at\u00a0a\u00a0node\u00a0at\u00a0the\u00a0same\u00a0time.\u00a0 Formula\u00a0(15)\u00a0indicates\u00a0that\u00a0only\u00a0one\u00a0car\u00a0can\u00a0occupy\u00a0a\u00a0node\u00a0at\u00a0the\u00a0same\u00a0time,\u00a0as\u00a0shown\u00a0in\u00a0 Figure\u00a03.\u00a0\nFigure\u00a03.\u00a0Node\u00a0conflict.\u00a0\n\ud835\udc67 1,\u2200\ud835\udc60 \u2208 1,2, \u2026 ,\ud835\udc5d \u00a0 (15)\nIf\u00a0two\u00a0AGVs\u00a0do\u00a0not\u00a0arrive\u00a0at\u00a0a\u00a0node\u00a0at\u00a0the\u00a0same\u00a0time,\u00a0but\u00a0the\u00a0AGV\u00a0closest\u00a0to\u00a0the\u00a0node\u00a0 needs\u00a0to\u00a0drive\u00a0to\u00a0another\u00a0occupied\u00a0path\u00a0through\u00a0this\u00a0node,\u00a0and\u00a0the\u00a0AGV\u00a0near\u00a0the\u00a0node\u00a0is\u00a0 on\u00a0the\u00a0opposite\u00a0path,\u00a0the\u00a0AGV\u00a0near\u00a0the\u00a0node\u00a0has\u00a0two\u00a0choices:\u00a0(1)\u00a0Wait\u00a0for\u00a0another\u00a0car\u00a0to\u00a0 release\u00a0the\u00a0path;\u00a0(2)\u00a0Replace\u00a0another\u00a0suboptimal\u00a0path.\u00a0For\u00a0the\u00a0first\u00a0case,\u00a0suppose\u00a0there\u00a0are\u00a0 two\u00a0AGVs;\u00a0AGV2\u00a0is\u00a0closer\u00a0to\u00a0the\u00a0node\u00a0 \ud835\udc60 ,\u00a0AGV1\u00a0turns\u00a0to\u00a0the\u00a0adjacent\u00a0path\u00a0of\u00a0AGV2,\u00a0as\u00a0 shown\u00a0in\u00a0Figure\u00a02b,\u00a0then\u00a0the\u00a0mathematical\u00a0model\u00a0of\u00a0such\u00a0conflicts\u00a0is\u00a0as\u00a0follows:\u00a0\n\ud835\udc3c\ud835\udc53 \ud835\udc49 \u2217 \ud835\udc49 1, \ud835\udc601, \ud835\udc602, \ud835\udc603 \u2208 1,2, \u2026 ,\ud835\udc5d , \ud835\udc601 \ud835\udc602 \ud835\udc603, \ud835\udc631, \ud835\udc632 \u2208 1,2, \u2026 ,\ud835\udc64 , \ud835\udc631 \ud835\udc632\uff0c\n\ud835\udc47\u210e\ud835\udc52\ud835\udc5b \ud835\udc34 1 \u00a0 (16)\nFor\u00a0the\u00a0conflict\u00a0type\u00a0in\u00a0Figure\u00a02b,\u00a0if\u00a0AGV1\u00a0is\u00a0closer\u00a0to\u00a0the\u00a0node\u00a0 \ud835\udc60 \u00a0 and\u00a0turns\u00a0to\u00a0the\u00a0 adjacent\u00a0path\u00a0of\u00a0AGV2;\u00a0AGV1\u00a0has\u00a0two\u00a0choices:\u00a0wait\u00a0or\u00a0change\u00a0paths.\u00a0Assuming\u00a0that\u00a0the\u00a0 time\u00a0used\u00a0by\u00a0the\u00a0original\u00a0optimal\u00a0path\u00a0to\u00a0reach\u00a0the\u00a0end\u00a0node\u00a0is\u00a0 \ud835\udc61,\u00a0the\u00a0total\u00a0waiting\u00a0time\u00a0 of\u00a0the\u00a0car\u00a0at\u00a0the\u00a0intersection\u00a0is\u00a0 \u0394\ud835\udc61,\u00a0and\u00a0the\u00a0time\u00a0required\u00a0by\u00a0the\u00a0replacement\u00a0of\u00a0the\u00a0subop\u2010 timal\u00a0path\u00a0is\u00a0 \ud835\udc61\u2019.\u00a0However,\u00a0since\u00a0the\u00a0suboptimal\u00a0path\u00a0also\u00a0needs\u00a0to\u00a0consider\u00a0the\u00a0path\u00a0con\u2010 flict\u00a0problem,\u00a0this\u00a0path\u00a0optimization\u00a0strategy\u00a0is\u00a0easy\u00a0to\u00a0fall\u00a0into\u00a0the\u00a0local\u00a0optimal.\u00a0In\u00a0order\u00a0 to\u00a0reduce\u00a0the\u00a0solution\u00a0space,\u00a0the\u00a0suboptimal\u00a0solution\u00a0that\u00a0does\u00a0not\u00a0consider\u00a0path\u00a0conflicts\u00a0 is\u00a0first\u00a0determined,\u00a0and\u00a0the\u00a0suboptimal\u00a0solution\u00a0 \ud835\udc61 \u0394\ud835\udc61 min \ud835\udc61 , \ud835\udc61 , \ud835\udc61 \u2026 \ud835\udc61 \u00a0 that\u00a0is\u00a0less\u00a0 than\u00a0the\u00a0total\u00a0transportation\u00a0time\u00a0of\u00a0the\u00a0optimal\u00a0path\u00a0selected.\u00a0Then,\u00a0considering\u00a0the\u00a0path\u00a0\nIf two AGVs do not arrive at a node at the same time, but the AGV closest to the node needs to drive to another occupied path through this node, and the AGV near the node is on the opposite path, the AGV near the node has two choices: (1) Wait for another car to release the path; (2) Replace another suboptimal path. For the first case, suppose there are two AGVs; AGV2 is closer to the node s2, AGV1 turns to the adjacent path of AGV2, as shown in Figure 2b, then the mathematical model of such conflicts is as follows:\nI f Vs1s2v1t \u2217Vs3s2v2t = 1, s1, s2, s3 \u2208 {1, 2, . . . , p}, s1 6= s2 6= s3, v1, v2 \u2208 {1, 2, . . . , w}, v1 6= v2,\nThen As2s3(t+ts3s2 ) = 1 (16)\nFor the conflict type in Figure 2b, if AGV1 is closer to the node s2 and turns to the adjacent path of AGV2; AGV1 has two choices: wait or change paths. Assuming that the time used by the original optimal path to reach the end node is t, the total waiting time of the car at the intersection is \u2206t, and the time required by the replacement of the suboptimal path is t\u2032. However, since the s boptimal path also n eds o consider the path conflict probl m, this path optimization strategy is ea y to fall into th local optimal. In order to reduce the solution space, the subop imal solution that d es not consider path confl cts is first determined, and the uboptimal solution t + \u2206t \u2265 min[t\u2032, t\u2032\u2032 , t\u2032\u2032\u2032 . . . tn] at is less han the total transportation time of the selected. Then, considering the path conflict of the second-best path, the ca usually has multiple second-best aths from one device to another device. A recursive s rategy is used to plan a global sho test-time path judgment method for AGV, as shown in F rmula (17). Assuming that the sh rtest path of AGV from node p to node p\u2032 need to pass t roug n nodes, which will be encountered in the driving process, then the AGV will encounter at most n + 1 path conflicts of the same type when it reaches node p\u2032, and it needs to determine whether to choose the second-best path each time. Therefore \u2211 \u2206t = \u2206\u22061 + \u2206t2 + \u2206t3 . . . + \u2206n+1, the waiting time for the conflict of the second-best path is the same. According to the comparison of the transportation time and waiting time of the sub-optimal\nSensors 2023, 23, 4526 10 of 25\npath, the optimal path scheme is selected. If Formula (17) holds, the optimal path is selected; otherwise, the suboptimal path is selected.\nt + \u2211 \u2206t \u2264 min [ t\u2032 + \u2211 \u2206t\u2032, t\u2032\u2032 + \u2211 \u2206t\u2032\u2032 , t\u2032\u2032\u2032 + \u2211 \u2206t\u2032\u2032\u2032 . . . ] (17)\nFor the type of locking in Figure 2c, the general adjustment strategy is to let the car that first arrives at the conflict node change the path and, at the same time, ensure that there is a second optimal path available for replacement. Assuming that the AGV1 is closer to the conflict node s2, the adjustment strategy is shown in Formula (18).\nI f Vs1s2v1t \u2217 Vs3s2v2t = 1, As2s1(t+ts1s2 ) = 1, As2s3(t+ts1s2 ) = 0, # s1, s2, s3, s4, s5 \u2208 {1, 2, . . . , p}, s1 6= s2 6= s3 6= s4 6= s5, s2 is an adjacent node to s1, s3, s4, s5,\nv1, v2 \u2208 {1, 2, . . . , w}, v1 6= v2, Then As2s4(t+ts1s2 ) + As2s5(t+ts1s2 ) \u2265 1\n(18)\nVs1s2v1t \u2217 Vs3s2v2t = 1 indicates that the paths from s1 to s2 and from s3 to s2 are occupied by AGV1 and AGV2 respectively. As2s1(t+ts1s2 ) = 1 indicates that after time ts1s2 , AGV1 first reaches the conflict node s2, but AGV2 still occupies the path from s3 to s2. As2s4(t+ts1s2 ) + As2s5(t+ts1s2 ) \u2265 1 means that at least one of the other two paths from s2 is a viable path. If the conflict node s2 in Figure 2b has only three adjacent nodes, which means deadlock occurs at the T-junction, then the adjustment strategy is shown as follows.\nI f Vs1s2v1t \u2217 Vs3s2v2t = 1, As2s1(t+ts1s2 ) = 1, As2s3(t+ts1s2 ) = 0 s1, s2, s3, s4 \u2208 {1, 2, . . . , p}, s1 6= s2 6= s3 6= s4, s2 is an adjacent node to s1, s3, s4,\nv1, v2 \u2208 {1, 2, . . . , w}, v1 6= v2, Then As2s4(t+ts1s2 ) \u2265 1\n(19)\nFormulas (18) and (19) are designed to ensure that there is room for adjustment of such conflicts. If the two formulas are valid, the earliest AGV arriving at the node can choose to wait on the free path until the original path is released or choose the second-best path. For specific adjustment schemes, refer to Formula (17). In cases when Formulas (18) and (19) are not valid, Figure 2b is categorized under the same type of unadjustable deadlock as Figure 2a. The situation description and adjustment scheme in Figure 2a: If a path is occupied by an AGV, then this path does not allow AGVs in the opposite direction to enter at the same time. Since the AGVs in the system travel at the same speed, two AGVs traveling in the same direction are allowed on the same path. Formula (20) ensures that multiple AGVs can travel in the same direction on the same path and that two or more AGVs are not allowed to travel in the same direction on the same path.\nI f Vs1s2v1t = 1, s1, s2 \u2208 {1, 2, . . . , p}, s1 6= s2,\nv1, v2, v3 \u2208 {1, 2, . . . , w}, v1 6= v2 6= v3, Then Vs1s2v2t = 1, Vs2s1v3t = 0\n(20)"
        },
        {
            "heading": "4. Approach Statement",
            "text": "Integrated scheduling of flexible job-shop is solved in two stages: production scheduling and AGV scheduling. In the first stage, a hybrid genetic algorithm is used to solve the production scheduling problem. In the second stage, according to the production scheduling scheme obtained in the first stage, an AGV coding-based genetic algorithm is used to study the AGV scheduling problem. At the same time, AGV routing problems and path conflicts are taken into account, and finally, a better feasible scheduling scheme is obtained.\nSensors 2023, 23, 4526 11 of 25\n4.1. Production Scheduling 4.1.1. Encoding Method\nGenetic algorithms are largely determined by the choice of an appropriate encoding scheme. It is desirable to keep the chromosome length as short as possible to reduce unnecessary computational burden and focus on promising solution alternatives. For the exploration of all potential solutions within the search space, the encoding method should be capable of accurately representing them. In the case of scheduling operations, there are parallels between the job-shop scheduling problem and the first part of the studied problem in theory. Thus, an operation-based encoding method is used in the approach. Figure 4 depicts the encoding method. The sum of all operations represents the length of the chromosome. Assume that the operations chromosome is [2 3 1 1 2 2 3 2]; the first 2 represents the first operation O21 of workpiece J2, and the second 2 represents the second process O22 of workpiece J2. The rest can be performed using the same method. So, the sequence of the operations is O21, O31, O11, O12, O22, O23, O32, O24.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 11\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\n4.\u00a0Approach\u00a0Statement\u00a0 Integrated\u00a0scheduling\u00a0of\u00a0flexible\u00a0job\u2010shop\u00a0is\u00a0solved\u00a0in\u00a0two\u00a0stages:\u00a0production\u00a0sched\u2010 uling\u00a0and\u00a0AGV\u00a0scheduling.\u00a0In\u00a0the\u00a0first\u00a0stage,\u00a0a\u00a0hybrid\u00a0genetic\u00a0algorithm\u00a0is\u00a0used\u00a0to\u00a0solve\u00a0 the\u00a0production\u00a0 scheduling\u00a0problem.\u00a0 In\u00a0 the\u00a0 second\u00a0 stage,\u00a0 according\u00a0 to\u00a0 the\u00a0production\u00a0 scheduling\u00a0scheme\u00a0obtained\u00a0in\u00a0the\u00a0first\u00a0stage,\u00a0an\u00a0AGV\u00a0coding\u2010based\u00a0genetic\u00a0algorithm\u00a0is\u00a0 used\u00a0to\u00a0study\u00a0the\u00a0AGV\u00a0scheduling\u00a0problem.\u00a0At\u00a0the\u00a0same\u00a0time,\u00a0AGV\u00a0routing\u00a0problems\u00a0and\u00a0 path\u00a0conflicts\u00a0are\u00a0taken\u00a0into\u00a0account,\u00a0and\u00a0finally,\u00a0a\u00a0better\u00a0feasible\u00a0scheduling\u00a0scheme\u00a0is\u00a0 obtained.\u00a0\n4.1.\u00a0Production\u00a0Scheduling\u00a0 4.1.1.\u00a0Encoding\u00a0Method\u00a0\nGenetic\u00a0algorithms\u00a0are\u00a0largely\u00a0determined\u00a0by\u00a0the\u00a0choice\u00a0of\u00a0an\u00a0appropriate\u00a0encoding\u00a0 scheme.\u00a0It\u00a0is\u00a0desirable\u00a0to\u00a0keep\u00a0the\u00a0chromosome\u00a0length\u00a0as\u00a0short\u00a0as\u00a0possible\u00a0to\u00a0reduce\u00a0un\u2010 necessary\u00a0computational\u00a0burden\u00a0and\u00a0 focus\u00a0on\u00a0promising\u00a0solution\u00a0alternatives.\u00a0For\u00a0 the\u00a0 exploration\u00a0of\u00a0all\u00a0potential\u00a0solutions\u00a0within\u00a0the\u00a0search\u00a0space,\u00a0the\u00a0encoding\u00a0method\u00a0should\u00a0 be\u00a0capable\u00a0of\u00a0accurately\u00a0representing\u00a0them.\u00a0In\u00a0the\u00a0case\u00a0of\u00a0scheduling\u00a0operations,\u00a0there\u00a0are\u00a0 parallels\u00a0between\u00a0the\u00a0job\u2010shop\u00a0scheduling\u00a0problem\u00a0and\u00a0the\u00a0first\u00a0part\u00a0of\u00a0the\u00a0studied\u00a0prob\u2010 lem\u00a0in\u00a0theory.\u00a0Thus,\u00a0an\u00a0operation\u2010based\u00a0encoding\u00a0method\u00a0is\u00a0used\u00a0in\u00a0the\u00a0approach.\u00a0 Figure\u00a0 4\u00a0 depicts\u00a0 the\u00a0 encoding\u00a0method.\u00a0 The\u00a0 sum\u00a0 of\u00a0 all\u00a0 operations\u00a0 represents\u00a0 the\u00a0 length\u00a0of\u00a0the\u00a0chromosome.\u00a0Assume\u00a0that\u00a0the\u00a0operations\u00a0chromosome\u00a0is\u00a0[2\u00a03\u00a01\u00a01\u00a02\u00a02\u00a03\u00a02];\u00a0the\u00a0 first\u00a02\u00a0represents\u00a0the\u00a0first\u00a0operation\u00a0 \ud835\udc42 \u00a0 of\u00a0workpiece\u00a0 \ud835\udc3d ,\u00a0and\u00a0the\u00a0second\u00a02\u00a0represents\u00a0the\u00a0 second\u00a0process\u00a0 \ud835\udc42 \u00a0 of\u00a0workpiece\u00a0J2.\u00a0The\u00a0rest\u00a0can\u00a0be\u00a0performed\u00a0using\u00a0the\u00a0same\u00a0method.\u00a0 So,\u00a0the\u00a0sequence\u00a0of\u00a0the\u00a0operations\u00a0is\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 ,\u00a0 \ud835\udc42 .\u00a0\nFigure\u00a04.\u00a0Operations\u2010based\u00a0encoding.\u00a0\n4.1.2.\u00a0Decoding\u00a0Method\u00a0 The\u00a0proposed\u00a0approach\u00a0utilizes\u00a0the\u00a0Vehicle\u00a0Assignment\u00a0Algorithm\u00a0(VAA)\u00a0to\u00a0address\u00a0 the\u00a0vehicle\u00a0assignment\u00a0and\u00a0scheduling\u00a0issues\u00a0integrated\u00a0into\u00a0the\u00a0decoding\u00a0method.\u00a0The\u00a0 pseudocode\u00a0for\u00a0the\u00a0decoding\u00a0method\u00a0is\u00a0shown\u00a0in\u00a0Algorithm\u00a01.\u00a0\nAlgorithm\u00a01:\u00a0Decoding\u00a0method\u00a0 1. \u00a0 \u00a0 \u00a0 for\u00a0each\u00a0operation\u00a0 \ud835\udc5c\ud835\udc5d\u00a0 in\u00a0the\u00a0chromosome\u00a0do\u00a0 2. machine\u00a0\ud835\udc5a\ud835\udc50\u00a0 =\u00a0processing\u00a0machine\u00a0of\u00a0 \ud835\udc5c\ud835\udc5d\u00a0 3. predecessor\u00a0 \ud835\udc5d\ud835\udc5f\ud835\udc52\u00a0 =\u00a0preceding\u00a0operation\u00a0of\u00a0 \ud835\udc5c\ud835\udc5d\u00a0 \u00a0 4. if\u00a0 \ud835\udc5d\ud835\udc5f\ud835\udc52 \ud835\udc41\ud835\udc48\ud835\udc3f\ud835\udc3f\u00a0 then\u00a0 5. start_time\u00a0 \ud835\udc60\ud835\udc61\u00a0 =\u00a00\u00a0 6. else\u00a0 7. start_time\u00a0 \ud835\udc60\ud835\udc61\u00a0 =\u00a0pre.\u00a0completion_time\u00a0 8. end\u00a0if\u00a0 9. number_of_scheduled_ops\u00a0 \ud835\udc5b\ud835\udc60\u00a0 =\u00a0number\u00a0of\u00a0scheduled\u00a0operations\u00a0on\u00a0machine\u00a0\ud835\udc5a\ud835\udc50\u00a0 10. if\u00a0 \ud835\udc5b\ud835\udc60 0\u00a0 then\u00a0\n4.1.2. Decoding Method\nThe proposed approach utilizes the Vehicle Assignment Algorithm (VAA) to address the vehicle assignment and scheduling issues integrated into the decoding method. The pseudocode for the decoding method is shown in Algorithm 1.\nAlgorithm 1: Decoding method\n1. for each operation op in the chromosome do 2. machine mc = processing machine of op 3. predecessor pre = preceding operation of op 4. if pre == NULL then 5 start_time st = 0 6. else 7. start_time st = pre. completion_time 8. end if 9. number_of_scheduled_ops ns = number of scheduled operations on machine mc 10. if ns > 0 then 11. last_scheduled_op sched = last scheduled operation on machine mc 12. completion_time ct = sched. completion_time 13. if st < ct then 14. start_time st = ct 5. end if 16. end if 17. completion_time ct = st + op. processing_time 18. schedule operation op on machine mc with completion time ct 19. end for\nDuring the decoding process, the VAA acquires crucial information, such as the current operation (op), its recommended start time (st), and the preceding operation within the sequence (pre). The VAA determines which AGV can complete the transportation in the least amount of time and adjusts the start time st to account for transportation duration. The pseudocode for the VAA is demonstrated in Algorithm 2.\nSensors 2023, 23, 4526 12 of 25\nAlgorithm 2: Vehicle assignment algorithm\n1. min_time_to_finish = infinity 2. best_AGV = null 3. for each AGV in available_AGVs do 4. S = AGV. last_trip_destination 5. if pre ! = null then 6. D = processing machine responsible for operation pre 7. else 8. D = station for loading or unloading materials 9. end if 10. dht = travel time between S and D 11. time_to_finish = max(pre.completion_time, AGV.last_trip_ f inish_time) + dht 12. if time_to_ f inish < min_time_to_ f inish then 13. min_time_to_finish = time_to_finish 14. best_AGV = AGV 15. end if 16. end for 17. add_trips_to_best_AGV (best_AGV, operation_op) 18. time_to_start = best_AGV. last_trip_finish_time 19. if st < time_to_start then 20. st = time_to_start 21. end if\nThe VAA, an optimization algorithm, is designed to determine the AGV that provides the earliest possible start time for a given operation processed by its allocated machine. The VAA uses the maximum value between the AGV\u2019s last trip finish time and the preceding operation completion time in evaluating the start time for a deadheading trip, considering the required deadheading trip time. The calculation of start time depends on adding the available start times for deadheading trips, which are exclusively related to the deadheading trip durations of AGVs due to their identical loaded trip times. The decoding method employed in this algorithm is based on a critical observation that a machine schedule generated using the operations-based coding approach tends to stretch when vehicle transportation times are factored. This is due to a shift in each operation\u2019s start time. During operation, the VAA aims to minimize these changes in start times to reduce the makespan. In doing so, the algorithm searches for AGVs that have minimum completion times for each trip, thus minimizing the shift in start time for each operation.\n4.1.3. Crossover Operator\nUniform crossover is a crossover method utilized in generating a new chromosome from two matching chromosomes. In this method, each gene in the chromosome is exchanged with a predetermined probability. Uniform crossover can be seen as a variation of the multi-point crossover method, with specific rules in place to ensure the preservation of the parent genes and maintain the coding structure. To generate a new chromosome via a uniform crossover, a crossover mask is randomly generated with the same length as the parent chromosomes. The mask is then applied to the two matched chromosomes. Genes corresponding to \u201c1\u201d in the mask are swapped between chromosomes, while genes that correspond to \u201c0\u201d remain unchanged. By randomly crossing every bit of the parent chromosomes with the same probability, two child chromosomes are eventually created. Figure 5 provides a visual representation of the uniform crossover mechanism.\nSensors 2023, 23, 4526 13 of 25\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 13\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\nadding\u00a0the\u00a0available\u00a0start\u00a0times\u00a0for\u00a0deadheading\u00a0trips,\u00a0which\u00a0are\u00a0exclusively\u00a0related\u00a0to\u00a0 the\u00a0deadheading\u00a0trip\u00a0durations\u00a0of\u00a0AGVs\u00a0due\u00a0to\u00a0their\u00a0identical\u00a0loaded\u00a0trip\u00a0times.\u00a0 The\u00a0decoding\u00a0method\u00a0employed\u00a0in\u00a0this\u00a0algorithm\u00a0is\u00a0based\u00a0on\u00a0a\u00a0critical\u00a0observation\u00a0 that\u00a0a\u00a0machine\u00a0schedule\u00a0generated\u00a0using\u00a0the\u00a0operations\u2010based\u00a0coding\u00a0approach\u00a0tends\u00a0to\u00a0 stretch\u00a0when\u00a0vehicle\u00a0transportation\u00a0times\u00a0are\u00a0factored.\u00a0This\u00a0is\u00a0due\u00a0to\u00a0a\u00a0shift\u00a0in\u00a0each\u00a0oper\u2010 ation\u2019s\u00a0start\u00a0 time.\u00a0During\u00a0operation,\u00a0 the\u00a0VAA\u00a0aims\u00a0 to\u00a0minimize\u00a0 these\u00a0changes\u00a0 in\u00a0start\u00a0 times\u00a0to\u00a0reduce\u00a0the\u00a0makespan.\u00a0In\u00a0doing\u00a0so,\u00a0the\u00a0algorithm\u00a0searches\u00a0for\u00a0AGVs\u00a0that\u00a0have\u00a0 minimum\u00a0completion\u00a0times\u00a0for\u00a0each\u00a0trip,\u00a0thus\u00a0minimizing\u00a0the\u00a0shift\u00a0in\u00a0start\u00a0time\u00a0for\u00a0each\u00a0 operation.\u00a0 4.1.3.\u00a0Crossover\u00a0Operator\u00a0 Uniform\u00a0crossover\u00a0is\u00a0a\u00a0crossover\u00a0method\u00a0utilized\u00a0in\u00a0generating\u00a0a\u00a0new\u00a0chromosome\u00a0 from\u00a0two\u00a0matching\u00a0chromosomes.\u00a0In\u00a0this\u00a0method,\u00a0each\u00a0gene\u00a0 in\u00a0the\u00a0chromosome\u00a0 is\u00a0ex\u2010 changed\u00a0with\u00a0a\u00a0predetermined\u00a0probability.\u00a0Uniform\u00a0crossover\u00a0can\u00a0be\u00a0seen\u00a0as\u00a0a\u00a0variation\u00a0 of\u00a0the\u00a0multi\u2010point\u00a0crossover\u00a0method,\u00a0with\u00a0specific\u00a0rules\u00a0in\u00a0place\u00a0to\u00a0ensure\u00a0the\u00a0preservation\u00a0 of\u00a0the\u00a0parent\u00a0genes\u00a0and\u00a0maintain\u00a0the\u00a0coding\u00a0structure.\u00a0\nTo\u00a0generate\u00a0a\u00a0new\u00a0chromosome\u00a0via\u00a0a\u00a0uniform\u00a0crossover,\u00a0a\u00a0crossover\u00a0mask\u00a0 is\u00a0ran\u2010 domly\u00a0generated\u00a0with\u00a0the\u00a0same\u00a0length\u00a0as\u00a0the\u00a0parent\u00a0chromosomes.\u00a0The\u00a0mask\u00a0is\u00a0then\u00a0ap\u2010 plied\u00a0 to\u00a0 the\u00a0 two\u00a0matched\u00a0 chromosomes.\u00a0Genes\u00a0 corresponding\u00a0 to\u00a0 \u201c1\u201d\u00a0 in\u00a0 the\u00a0mask\u00a0 are\u00a0 swapped\u00a0between\u00a0chromosomes,\u00a0while\u00a0genes\u00a0that\u00a0correspond\u00a0to\u00a0\u201c0\u201d\u00a0remain\u00a0unchanged.\u00a0 By\u00a0randomly\u00a0crossing\u00a0every\u00a0bit\u00a0of\u00a0the\u00a0parent\u00a0chromosomes\u00a0with\u00a0the\u00a0same\u00a0probability,\u00a0two\u00a0 child\u00a0chromosomes\u00a0are\u00a0eventually\u00a0created.\u00a0Figure\u00a05\u00a0provides\u00a0a\u00a0visual\u00a0representation\u00a0of\u00a0 the\u00a0uniform\u00a0crossover\u00a0mechanism.\u00a0\n\u00a0\nFigure\u00a05.\u00a0Uniform\u00a0crossover.\u00a0\n4.1.4.\u00a0Mutation\u00a0Operator\u00a0 Mutation\u00a0operators\u00a0refer\u00a0to\u00a0the\u00a0genetic\u00a0algorithm\u00a0components\u00a0that\u00a0are\u00a0responsible\u00a0 for\u00a0introducing\u00a0genetic\u00a0diversity\u00a0into\u00a0the\u00a0population\u00a0of\u00a0potential\u00a0solutions.\u00a0These\u00a0opera\u2010 tors\u00a0randomly\u00a0modify\u00a0one\u00a0or\u00a0more\u00a0genes\u00a0or\u00a0components\u00a0of\u00a0a\u00a0candidate\u00a0solution,\u00a0essen\u2010 tially\u00a0creating\u00a0a\u00a0new\u00a0candidate\u00a0solution\u00a0that\u00a0is\u00a0slightly\u00a0different\u00a0from\u00a0its\u00a0parent.\u00a0This\u00a0di\u2010 versity\u00a0helps\u00a0the\u00a0algorithm\u00a0to\u00a0move\u00a0beyond\u00a0local\u00a0optima\u00a0and\u00a0discover\u00a0better\u00a0solutions\u00a0in\u00a0 unexplored\u00a0areas\u00a0of\u00a0the\u00a0search\u00a0space.\u00a0In\u00a0swap\u00a0mutation,\u00a0two\u00a0genes\u00a0are\u00a0randomly\u00a0selected\u00a0 from\u00a0the\u00a0parent\u00a0chromosome,\u00a0and\u00a0then\u00a0their\u00a0position\u00a0is\u00a0swapped,\u00a0as\u00a0illustrated\u00a0in\u00a0Figure\u00a06.\u00a0\n\u00a0 Figure\u00a06.\u00a0Swap\u00a0mutation.\u00a0\n\u00a0 \u00a0\nFigure 5. Uniform crossover.\n4.1.4. Mutation Operator\nMutation operators refer to the genetic algorithm components that are responsible for introducing genetic diversity into the population of potential solutions. These operators randomly modify one or more genes or components of a candidate solution, essentially creating a new candidate solution that is slightly different from its parent. This diversity helps the algorithm to move beyond local optima and discover better solutions in unexplored areas of the search space. In swap mutation, two genes are randomly s lected from the pa nt chromosome, and then th ir position is swapped, as illustrated in Figure 6.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 13\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\nadding\u00a0the\u00a0available\u00a0start\u00a0times\u00a0for\u00a0deadheading\u00a0trips,\u00a0which\u00a0are\u00a0exclusively\u00a0related\u00a0to\u00a0 the\u00a0deadheading\u00a0trip\u00a0durations\u00a0of\u00a0AGVs\u00a0due\u00a0to\u00a0their\u00a0identical\u00a0loaded\u00a0trip\u00a0times.\u00a0 The\u00a0decoding\u00a0method\u00a0employed\u00a0in\u00a0this\u00a0algorithm\u00a0is\u00a0based\u00a0on\u00a0a\u00a0critical\u00a0observation\u00a0 that\u00a0a\u00a0machine\u00a0schedule\u00a0generated\u00a0using\u00a0the\u00a0operations\u2010based\u00a0coding\u00a0approach\u00a0tends\u00a0to\u00a0 stretch\u00a0when\u00a0vehicle\u00a0transportation\u00a0times\u00a0are\u00a0factored.\u00a0This\u00a0is\u00a0due\u00a0to\u00a0a\u00a0shift\u00a0in\u00a0each\u00a0oper\u2010 ation\u2019s\u00a0start\u00a0 time.\u00a0During\u00a0operation,\u00a0 the\u00a0VAA\u00a0aims\u00a0 to\u00a0minimize\u00a0 these\u00a0changes\u00a0 in\u00a0start\u00a0 times\u00a0to\u00a0reduce\u00a0the\u00a0makespan.\u00a0In\u00a0doing\u00a0so,\u00a0the\u00a0algorithm\u00a0searches\u00a0for\u00a0AGVs\u00a0that\u00a0have\u00a0 minimum\u00a0completion\u00a0times\u00a0for\u00a0each\u00a0trip,\u00a0thus\u00a0minimizing\u00a0the\u00a0shift\u00a0in\u00a0start\u00a0time\u00a0for\u00a0each\u00a0 operation.\u00a0 4.1.3.\u00a0Crossover\u00a0Operator\u00a0 Uniform\u00a0crossover\u00a0is\u00a0a\u00a0crossover\u00a0method\u00a0utilized\u00a0in\u00a0generating\u00a0a\u00a0new\u00a0chromosome\u00a0 from\u00a0two\u00a0matching\u00a0chromosomes.\u00a0In\u00a0this\u00a0method,\u00a0each\u00a0gene\u00a0 in\u00a0the\u00a0chromosome\u00a0 is\u00a0ex\u2010 changed\u00a0with\u00a0a\u00a0predetermined\u00a0probability.\u00a0Uniform\u00a0crossover\u00a0can\u00a0be\u00a0seen\u00a0as\u00a0a\u00a0variation\u00a0 of\u00a0the\u00a0multi\u2010point\u00a0crossover\u00a0method,\u00a0with\u00a0specific\u00a0rules\u00a0in\u00a0place\u00a0to\u00a0ensure\u00a0the\u00a0preservation\u00a0 of\u00a0the\u00a0parent\u00a0genes\u00a0and\u00a0maintain\u00a0the\u00a0coding\u00a0structure.\u00a0 To\u00a0generate\u00a0a\u00a0new\u00a0chromosome\u00a0via\u00a0a\u00a0uniform\u00a0crossover,\u00a0a\u00a0crossover\u00a0mask\u00a0 is\u00a0ran\u2010 domly\u00a0generated\u00a0with\u00a0the\u00a0same\u00a0length\u00a0as\u00a0the\u00a0parent\u00a0chromosomes.\u00a0The\u00a0mask\u00a0is\u00a0then\u00a0ap\u2010 plied\u00a0 to\u00a0 the\u00a0 two\u00a0matched\u00a0 chromosomes.\u00a0Genes\u00a0 corresponding\u00a0 to\u00a0 \u201c1\u201d\u00a0 in\u00a0 the\u00a0mask\u00a0 are\u00a0 swapped\u00a0between\u00a0chromosomes,\u00a0while\u00a0g es\u00a0that\u00a0correspond\u00a0to\u00a0\u201c0\u201d\u00a0remain\u00a0unch nged.\u00a0 By\u00a0randomly\u00a0cros ing\u00a0every\u00a0bit\u00a0of\u00a0the\u00a0parent\u00a0chromosomes\u00a0w th\u00a0the\u00a0same\u00a0probability,\u00a0 wo\u00a0 child\u00a0chrom somes\u00a0are\u00a0eventually\u00a0created.\u00a0Figure\u00a05\u00a0provides\u00a0a\u00a0visual\u00a0representation\u00a0of\u00a0 the\u00a0uniform\u00a0crossover\u00a0mechanism.\u00a0\n\u00a0\nFigure\u00a05.\u00a0Uniform\u00a0crossover.\u00a0\n. . .\u00a0 i \u00a0 t \u00a0 tation\u00a0operators\u00a0refer\u00a0to\u00a0the\u00a0genetic\u00a0algorithm\u00a0compo ents\u00a0that\u00a0are\u00a0responsible\u00a0 for\u00a0introducing\u00a0genetic\u00a0diversity\u00a0into\u00a0the\u00a0population\u00a0 f\u00a0potential\u00a0solutions.\u00a0These\u00a0opera\u2010 tors\u00a0rando ly\u00a0modify\u00a0one\u00a0 r\u00a0more\u00a0genes\u00a0or\u00a0c mponents\u00a0of\u00a0a\u00a0candidate\u00a0s lution,\u00a0essen\u2010 tially\u00a0creating\u00a0a\u00a0new\u00a0candidate\u00a0solution\u00a0that\u00a0is\u00a0slightly\u00a0different\u00a0from\u00a0its\u00a0parent.\u00a0This\u00a0di\u2010 versity\u00a0helps\u00a0the\u00a0algorithm\u00a0to\u00a0move\u00a0beyond\u00a0local\u00a0optima\u00a0and\u00a0discover\u00a0better\u00a0solutions\u00a0in\u00a0 unexplored\u00a0areas\u00a0of\u00a0the\u00a0search\u00a0space.\u00a0In\u00a0swap\u00a0mutation,\u00a0two\u00a0genes\u00a0are\u00a0randomly\u00a0selected\u00a0 from\u00a0the\u00a0parent\u00a0chro osome,\u00a0and\u00a0then\u00a0their\u00a0position\u00a0is\u00a0swapped,\u00a0as\u00a0illustrated\u00a0in\u00a0Figure\u00a06.\u00a0\n\u00a0\nFigure\u00a06.\u00a0Swap\u00a0mutation.\u00a0\n\u00a0 \u00a0\nFigure 6. S ap utation.\n4.1.5. The Schedule Recovery Algorithm\nThe schedule recovery algorithm is a crucial step after applying the genetic operators of crossover and mutation in order to ensure that technological restrictions are met during the GA search. This algorithm is accomplished by rearranging the operations while ensuring that each operation in the sequence is executed within the specified technological constraints. Ultimately, the algorithm aims to produce a feasible and optimized schedule that meets all the necessary constraints. As shown in Figure 7, the operation o22 is behind operation o23 and operation o11 is behind operation o12 after swap mutation. In this case, the schedule recovery algorithm is needed. The pseudocode for the schedule recovery algorithm is demonstrated in Algorithm 3.\n4.1.6. Elite Preservation\nThe paper employs an elite preservation strategy to minimize the loss of the best-fit individuals during the GA run. This strategy entails preserving a group of the best-fit individuals across the generations and updating them with better individuals when they emerge. The size of the set remains constant throughout the run since it is specified by the user during the algorithm\u2019s configuration.\nSensors 2023, 23, 4526 14 of 25\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 14\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\n4.1.5.\u00a0The\u00a0Schedule\u00a0Recovery\u00a0Algorithm\u00a0 The\u00a0schedule\u00a0recovery\u00a0algorithm\u00a0is\u00a0a\u00a0crucial\u00a0step\u00a0after\u00a0applying\u00a0the\u00a0genetic\u00a0operators\u00a0\nof\u00a0crossover\u00a0and\u00a0mutation\u00a0in\u00a0order\u00a0to\u00a0ensure\u00a0that\u00a0technological\u00a0restrictions\u00a0are\u00a0met\u00a0during\u00a0 the\u00a0GA\u00a0search.\u00a0This\u00a0algorithm\u00a0is\u00a0accomplished\u00a0by\u00a0rearranging\u00a0the\u00a0operations\u00a0while\u00a0en\u2010 suring\u00a0that\u00a0each\u00a0operation\u00a0in\u00a0the\u00a0sequence\u00a0is\u00a0executed\u00a0within\u00a0the\u00a0specified\u00a0technological\u00a0 constraints.\u00a0Ultimately,\u00a0the\u00a0algorithm\u00a0aims\u00a0to\u00a0produce\u00a0a\u00a0feasible\u00a0and\u00a0optimized\u00a0schedule\u00a0 that\u00a0meets\u00a0all\u00a0the\u00a0necessary\u00a0constraints.\u00a0 As\u00a0shown\u00a0in\u00a0Figure\u00a07,\u00a0the\u00a0operation\u00a0 \ud835\udc5c \u00a0 is\u00a0behind\u00a0operation\u00a0 \ud835\udc5c \u00a0 and\u00a0operation\u00a0 \ud835\udc5c \u00a0 is\u00a0behind\u00a0operation\u00a0 \ud835\udc5c \u00a0 after\u00a0 swap\u00a0mutation.\u00a0 In\u00a0 this\u00a0case,\u00a0 the\u00a0schedule\u00a0 recovery\u00a0algo\u2010 rithm\u00a0is\u00a0needed.\u00a0The\u00a0pseudocode\u00a0for\u00a0the\u00a0schedule\u00a0recovery\u00a0algorithm\u00a0is\u00a0demonstrated\u00a0in\u00a0 Algorithm\u00a03.\u00a0\n\u00a0 Figure\u00a07.\u00a0The\u00a0schedule\u00a0recovery\u00a0algorithm.\u00a0\nAlgorithm\u00a03:\u00a0The\u00a0schedule\u00a0recovery\u00a0algorithm\u00a0 1. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for\u00a0each\u00a0operation\u00a0 \ud835\udc5c\ud835\udc5d\u00a0 in\u00a0the\u00a0chromosome\u00a0do\u00a0 2. \ud835\udc5c\ud835\udc5d\ud835\udc56\u00a0 =\u00a0operation\u00a0located\u00a0at\u00a0position\u00a0 \ud835\udc56\u00a0 \u00a0 3. \ud835\udc5d\ud835\udc5f\ud835\udc52\ud835\udc56 =\u00a0preceding\u00a0operation\u00a0of\u00a0 \ud835\udc5c\ud835\udc5d\ud835\udc56\u00a0 \u00a0 4. if\u00a0 \ud835\udc5d\ud835\udc5f\ud835\udc52\ud835\udc56 \ud835\udc41\ud835\udc48\ud835\udc3f\ud835\udc3f\u00a0 then\u00a0 5. for\u00a0each\u00a0operation\u00a0 \ud835\udc5c\ud835\udc5d\u00a0 in\u00a0the\u00a0chromosome\u00a0do\u00a0 6. \ud835\udc5c\ud835\udc5d\ud835\udc57 \u2190\u00a0 operation\u00a0located\u00a0at\u00a0position\u00a0 \ud835\udc57\u00a0 7. if\u00a0 \ud835\udc5d\ud835\udc5f\ud835\udc52\ud835\udc56 \ud835\udc5c\ud835\udc5d\ud835\udc57\u00a0 then\u00a0 8. Swap\u00a0positions\u00a0of\u00a0 \ud835\udc5c\ud835\udc5d\ud835\udc56\u00a0 and\u00a0 \ud835\udc5c\ud835\udc5d\ud835\udc57\u00a0 9. end\u00a0if\u00a0 10. end\u00a0for\u00a0 11. end\u00a0if\u00a0 12. end\u00a0for\u00a0\n4.1.6.\u00a0Elite\u00a0Preservation\u00a0 The\u00a0paper\u00a0employs\u00a0an\u00a0elite\u00a0preservation\u00a0strategy\u00a0to\u00a0minimize\u00a0the\u00a0loss\u00a0of\u00a0the\u00a0best\u2010fit\u00a0 individuals\u00a0during\u00a0 the\u00a0GA\u00a0run.\u00a0This\u00a0strategy\u00a0entails\u00a0preserving\u00a0a\u00a0group\u00a0of\u00a0 the\u00a0best\u2010fit\u00a0 individuals\u00a0across\u00a0the\u00a0generations\u00a0and\u00a0updating\u00a0them\u00a0with\u00a0better\u00a0individuals\u00a0when\u00a0they\u00a0 emerge.\u00a0The\u00a0size\u00a0of\u00a0the\u00a0set\u00a0remains\u00a0constant\u00a0throughout\u00a0the\u00a0run\u00a0since\u00a0it\u00a0is\u00a0specified\u00a0by\u00a0the\u00a0 user\u00a0during\u00a0the\u00a0algorithm\u2019s\u00a0configuration.\u00a0\n\u00a0 \u00a0\ni . l l it .\nAlgorithm 3: The schedule recovery algorithm\n1. for each operation op in the chromosome do 2. opi = operation located at position i 3. prei = preceding operation of opi 4. if prei 6= NULL then 5. for each operation op in the chromosome do 6. opj\u2190 operation located at position j 7. if prei = opj then 8. Swap positions of opi and opj 9. end if 10. end for 11. end if 12. end for"
        },
        {
            "heading": "4.2. AGV Scheduling",
            "text": "Product scheduling result is a known condition that has been solved in the first stage. Therefore, in the second stage, the scheduling scheme of the processing machine, the processing time of the machine, and the process sequence on each processing machine are taken as the input conditions. Then the problems to be solved in the second stage become the AGV routing problem and the scheduling problem of AGVs. In the second stage, the scheduling scheme of the processing machine is decomposed into corresponding transportation tasks, and the scheduling problem of AGVs becomes the process of assigning different transportation tasks to AGVs while considering the problem of path conflict. AGVs are equipped with sensors for the purpose of providing real-time location data. Formulating conflict-free paths ensures that AGVs will not collide accidentally.\n4.2.1. Dijkstra\nThe Dijkstra algorithm is a classical path planning algorithm based on graph theory G = (V, E) to solve the shortest distance between two nodes. Where V represents the set of all nodes in the topological map, and E represents the set of all lines in the topological map. According to the layout of the job-shop, the important equipment position is set as the node, the path that can be directly connected between the node and the node is represented by the line, and the corresponding edge is assigned the corresponding weight according to the distance of the connecting path or through the time. In this study, unit time is used to represent the weight between the two nodes so that the complex shop environment can be abstracted into the topological map represented by the node and the line. Topological maps are expressed in the form of an Adjacency Matrix (AM) in the algorithm. The core of the Dijkstra algorithm is to take the start node as the center and find the optimal path\nSensors 2023, 23, 4526 15 of 25\nwith the smallest sum of ownership values to the end node according to the weights of the adjacency matrix and lines between nodes. The procedures are as follows: Step 1: Set initial conditions: start node S0 and end node U0. Calculate the shortest distance from the start node to the end node. Step 2: Set and initialize the node set S (the set of nodes with the lowest weight that has been calculated so far) and U (the weight of S0 to the remaining nodes). Where S contains S0, and the distance from S0 to S0 is known to be 0; U contains other nodes except S0. The distance between nodes is initialized. If two nodes are adjacent, the weight is the weight of the line between two nodes; if not, the weight is infinite. Step 3: Go through all nodes in the set U, determine the adjacency Sk closest to S0, delete Sk from the set U and add Sk to the set S, and determine whether Sk is U0. If yes, the algorithm terminates and Sk is the shortest path in the map; otherwise, update the weight G0\u2192k of S0 to Sk and jump to the next step. Step 4: Calculate Sk as the start node to traverse all nodes in set U and take the node Sk+1 with the shortest distance from Sk, delete Sk+1 from set U and add it to set S, and update the weight of S0 in set U to the other nodes. If G0\u2192k+1 < G0\u2192k + Gk\u2192k+1, update the weight of G0\u2192k+1 in set S; Otherwise, proceed to the next step. Step 5: Determine whether Sk+1 is U0. If it is, terminate the algorithm to obtain the shortest path information and minimum weight. Otherwise, loop steps 4 and 5 until you find the end node U0.\n4.2.2. Time Window\nThe basic idea of a time window is to mark the direction of the occupied path. Other AGVs cannot pass through this path in the opposite or the same direction. AGVs can only wait or change other paths until the occupied path ends and other AGVs can pass through. In the time window method, path L is often divided into two parts: idle time window set FL and reserved time window set RL. The commonly used mathematical model of the time window is as follows:\nFL = { f k = [ ak, bk ]}\n(21)\nRL = { rk = [ ck, dk ]} (22)\nIn Formula (21), f k represents the idle time period of path L, and k represents the kth idle time period, starting from ak and ending from bk. Similarly, rk in Formula (22) represents the occupied period of path L, starting from ck and ending with dk.\n4.2.3. Algorithm Design\nSince the scheduling problem of the processing machine has been solved, based on the mathematical model of the integrated scheduling problem, the mathematical scheduling model of the second stage only needs to consider the processing sequence constraint of the same workpiece, the process sequence constraint of the workpiece on the same equipment and the AGV scheduling problem. The solution of the AGV routing problem and path conflict problem refers to the solution strategy in Section 3.2. Taking the minimum completion time of the maximum transportation process as the objective function, the mathematical model of the second stage is as follows:\nC = min(CTmax) = min (\nn max i=1 ( CTiui\u03bd )) (23)\ni f \u03b1ijk = \u03b1pqk = 1, \u03b2ijpqk = 1, Cijk + ITW \u2264 Spqk,\n\u2200i, p \u2208 {1, 2, . . . , n}, \u2200j, q \u2208 {1, 2, . . . , ui}, k \u2208 {1, 2, . . . , m} (24)\nSensors 2023, 23, 4526 16 of 25\nFormula (23) takes the minimum completion time of the maximum transportation process as the objective function. Formula (24) guarantees that workpieces are processed in a specific sequence on each processing machine. A genetic algorithm that employs AGV-encoding is utilized in the second stage to resolve AGV scheduling and conflict-free routing issues, with the incorporation of the time window-based Dijkstra algorithm.\n1. Encoding method\nIn this section, AGV-based encoding is adopted. Since the working procedure of the workpiece on each machine is known, chromosomes are arranged according to the sequence of workpieces and their operations. The number on the chromosome represents the AGV number responsible for transporting that operation. For example, there are five genes in the coding position of Workpiece 1, which respectively imply five operations of Workpiece 1. The first operation of Workpiece 1 will be transported to machine M1 by AGV2, as shown in Figure 8.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 16\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\n\ud835\udc39 \ud835\udc53 \ud835\udc4e ,\ud835\udc4f \u00a0 (21) \ud835\udc45 \ud835\udc5f \ud835\udc50 ,\ud835\udc51 \u00a0 (22) In\u00a0Formula\u00a0(21),\u00a0 \ud835\udc53 represents\u00a0the\u00a0idle\u00a0time\u00a0period\u00a0of\u00a0path \ud835\udc3f,\u00a0and\u00a0 \ud835\udc58\u00a0 represents\u00a0the\u00a0 \ud835\udc58 \u00a0 idle\u00a0 time\u00a0period,\u00a0 starting\u00a0 from\u00a0 \ud835\udc4e \u00a0 and\u00a0ending\u00a0 from\u00a0 \ud835\udc4f .\u00a0Similarly,\u00a0 \ud835\udc5f \u00a0 in\u00a0Formula\u00a0 (22)\u00a0represents\u00a0the\u00a0occupied\u00a0period\u00a0of\u00a0path\u00a0 \ud835\udc3f,\u00a0starting\u00a0from\u00a0 \ud835\udc50 \u00a0 and\u00a0ending\u00a0with\u00a0 \ud835\udc51 .\u00a0 4.2.3.\u00a0Algorithm\u00a0Design\u00a0 Since\u00a0the\u00a0scheduling\u00a0problem\u00a0of\u00a0the\u00a0processing\u00a0machine\u00a0has\u00a0been\u00a0solved,\u00a0based\u00a0on\u00a0 the\u00a0mathematical\u00a0model\u00a0of\u00a0the\u00a0integrated\u00a0scheduling\u00a0problem,\u00a0the\u00a0mathematical\u00a0schedul\u2010 ing\u00a0model\u00a0of\u00a0the\u00a0second\u00a0stage\u00a0only\u00a0needs\u00a0to\u00a0consider\u00a0the\u00a0processing\u00a0sequence\u00a0constraint\u00a0 of\u00a0 the\u00a0 same\u00a0workpiece,\u00a0 the\u00a0process\u00a0 sequence\u00a0 constraint\u00a0of\u00a0 the\u00a0workpiece\u00a0on\u00a0 the\u00a0 same\u00a0 equipment\u00a0and\u00a0the\u00a0AGV\u00a0scheduling\u00a0problem.\u00a0 The\u00a0solution\u00a0of\u00a0the\u00a0AGV\u00a0routing\u00a0problem\u00a0and\u00a0path\u00a0conflict\u00a0problem\u00a0refers\u00a0to\u00a0the\u00a0so\u2010 lution\u00a0 strategy\u00a0 in\u00a0Section\u00a0 3.2.\u00a0Taking\u00a0 the\u00a0minimum\u00a0 completion\u00a0 time\u00a0of\u00a0 the\u00a0maximum\u00a0 transportation\u00a0process\u00a0as\u00a0the\u00a0objective\u00a0function,\u00a0 the\u00a0mathematical\u00a0model\u00a0of\u00a0the\u00a0second\u00a0 stage\u00a0is\u00a0as\u00a0follows:\u00a0\n\ud835\udc36 \ud835\udc5a\ud835\udc56\ud835\udc5b \ud835\udc36\ud835\udc47 \ud835\udc5a\ud835\udc56\ud835\udc5b \ud835\udc5a\ud835\udc4e\ud835\udc65 \ud835\udc36\ud835\udc47 \u00a0 (23)\n\ud835\udc56\ud835\udc53 \ud835\udefc \ud835\udefc 1,\ud835\udefd 1, \ud835\udc36 \ud835\udc3c\ud835\udc47\ud835\udc4a \ud835\udc46 ,\n\u2200\ud835\udc56,\ud835\udc5d \u2208 1,2, \u2026 ,\ud835\udc5b ,\u2200\ud835\udc57, \ud835\udc5e \u2208 1,2, \u2026 ,\ud835\udc62 ,\ud835\udc58 \u2208 1,2, \u2026 ,\ud835\udc5a (24)\nFormula\u00a0 (23)\u00a0takes\u00a0 the\u00a0minimum\u00a0completion\u00a0time\u00a0of\u00a0the\u00a0maximum\u00a0 transportation\u00a0 proce s\u00a0as\u00a0the\u00a0objective\u00a0function.\u00a0Formula\u00a0(24)\u00a0gu rantees\u00a0that\u00a0workpieces\u00a0are\u00a0proc ssed\u00a0 in\u00a0a\u00a0specific\u00a0sequence\u00a0on\u00a0each\u00a0processing\u00a0machine.\u00a0 A\u00a0genetic\u00a0algorithm\u00a0that\u00a0employs\u00a0AGV\u2010encoding\u00a0is\u00a0utilized\u00a0in\u00a0the\u00a0second\u00a0stage\u00a0to\u00a0 resolve\u00a0AGV\u00a0scheduling\u00a0and\u00a0conflict\u2010free\u00a0 routing\u00a0 issues,\u00a0with\u00a0 the\u00a0 incorporation\u00a0of\u00a0 the\u00a0 time\u00a0 indow\u2010based\u00a0Dijkstra\u00a0algorithm.\u00a0 1. co i g\u00a0 ethod\u00a0\nIn\u00a0this\u00a0s ti ,\u00a0 \u2010 \u00a0 i \u00a0is\u00a0adopted.\u00a0Since\u00a0the\u00a0working\u00a0procedure\u00a0of\u00a0the\u00a0 workpiece\u00a0on\u00a0each\u00a0machine\u00a0 is\u00a0known,\u00a0chrom somes\u00a0are\u00a0arr nged\u00a0according\u00a0 to\u00a0 he\u00a0s \u2010 quence\u00a0of\u00a0workpieces\u00a0and\u00a0their\u00a0 ti .\u00a0 \u00a0 \u00a0 \u00a0t \u00a0chro oso e\u00a0represents\u00a0 the\u00a0AGV\u00a0number\u00a0responsible\u00a0for\u00a0transporting\u00a0that\u00a0operation.\u00a0For\u00a0example,\u00a0there\u00a0are\u00a0five\u00a0 genes\u00a0in\u00a0the\u00a0coding\u00a0position\u00a0of\u00a0Workpiece\u00a01,\u00a0which\u00a0respectively\u00a0imply\u00a0five\u00a0operations\u00a0of\u00a0 Workpiece\u00a01.\u00a0The\u00a0first\u00a0operation\u00a0of\u00a0 orkpiece\u00a01\u00a0wi l\u00a0be\u00a0transported\u00a0to\u00a0machine\u00a0M1\u00a0by\u00a0 AGV2,\u00a0as\u00a0shown\u00a0in\u00a0Figure\u00a08.\u00a0\n\u00a0\nFigure\u00a08.\u00a0Encoding\u00a0and\u00a0decoding\u00a0method\u00a0based\u00a0on\u00a0AGV\u00a0number\u00a0and\u00a0obtained\u00a0scheduling\u00a0\nscheme.\u00a0\nWhen\u00a0the\u00a0objective\u00a0function\u00a0is\u00a0to\u00a0minimize\u00a0the\u00a0maximum\u00a0completion\u00a0time,\u00a0the\u00a0max\u2010 imum\u00a0number\u00a0of\u00a0AGVs\u00a0usually\u00a0has\u00a0an\u00a0upper\u00a0limit.\u00a0In\u00a0order\u00a0to\u00a0rationally\u00a0allocate\u00a0logistics\u00a0 equipment\u00a0resources,\u00a0the\u00a0upper\u00a0limit\u00a0of\u00a0the\u00a0number\u00a0of\u00a0AGVs\u00a0in\u00a0the\u00a0chromosome\u00a0is\u00a0set,\u00a0 and\u00a0the\u00a0variation\u00a0of\u00a0the\u00a0mutation\u00a0operator\u00a0 1, . . .\ud835\udc64 \u00a0 is\u00a0set.\u00a0The\u00a0number\u00a0of\u00a0AGVs\u00a0is\u00a0cross\u2010\nFigure 8. Encoding and decoding method based on AGV number and obtained scheduling scheme.\nWhen the objective function is to minimize the maximum completion time, the maximum number of AGVs us ally has an upper limi . In order to rationally allocat logistics equipment resources, the upper limit of the nu ber of AGVs in the chrom some is set, and the variation of the mutation operator [1, . . . w] is set. The number of AGVs is cro smuta ed. Calculate the fitness fu ction of each iteration result, a d th number of AGV is finally obtained when the maximum completion time is minimum. Finally, output the optimal scheduling scheme.\n2. Decoding method\nAGVs are assigned to transport tasks according to the number of AGVs in chromosomes. The AGV makes route planning according to the assigned transportation tasks and finds the shortest conflict-free path so as to transport the last workpiece to the finished product warehouse as the maximum completion time. Specific decoding steps are shown as follows: Step 1: Transform the chromosome based on the process code of the gene chain into a specific process chain. Step 2: Read every gene of the process chain according to the sequence of different workpiece areas. The gene number indicates that the corresponding process is responsible for Oij. Read the implied information of the gene, the corresponding processing machine k, the processing time of the corresponding machine is tijk, and the processing sequence of the process on the machine k. Step 3: Make sure \u03b1ijk = \u03b1pqk = 1, \u03b2ijpqk = 1. According to the completion time Ci(j\u22121)k\u2032 of the tight preceding procedure Oi(j\u22121) of procedure Oij, the completion time Ci\u2032 j\u2032k of the tight preceding procedure in machine k, the number of the AGV in charge of the processing task and the location of the node where the AGV is located, determine the time S\u2032Tijv when the AGV can start no-load transportation. Step 4: Route planning for no-load transportation. According to the available time S\u2032Tijv of the AGV in charge of the transportation task (or the end time CTi\u2032 j\u2032v of load transportation of the last process that v is responsible for), the location node, the node position S of the machine in charge of the process Oi(j\u22121) and the adjacency matrix Adj M,\nSensors 2023, 23, 4526 17 of 25\nthe next node N of the shortest path of no-load transportation, is determined by the Dijkstra algorithm. Go to Step 7. Step 5: Route planning for load transportation. Compare the completion time of the tight preceding process Ci(j\u22121)k\u2032 , if Ci(j\u22121)k\u2032 > C\u2032Tijv, then STijv = Ci(j\u22121)k\u2032 (The transportation of a load begins only after completion of the preceding process directly connected to it). On the contrary, if the AGV arrives at k when the tight preceding process has been completed, the completion time of the tight preceding process is regarded as the start time of load transportation, that is, STijv = C\u2032Tijv. Step 6: According to the adjacency matrix Adj M, the position node S of the tight preceding operation, the position node T of the processing machine responsible for the current operation, and the start time of the load transportation use the Dijkstra algorithm based on the time window to calculate the next node N of the load transportation path. Go to Step 7 and repeat Step 5 until N = T. Step 7: Path conflict detection. Determine if the planned paths conflict with each other based on their respective time windows, and if there are no conflicts identified, proceed to Step 8. If there are conflicts, proceed to Step 9. Step 8: Update the time window of each section on the topology map. In the no-load transport phase, check whether N = S. If yes, go back to Step 5. Otherwise, return to step 4 until N = S is true, and then return to step 5. If N = T during the load transport phase, generate the shortest path plan and revise the time window of each section accordingly. Go to Step 11. Otherwise, continue to search for the next node of the shortest path through the Dijkstra algorithm and return to Step 7.\nStep 9: Detect the path conflict type. Step 10: Determine if the transportation is over. If N = S, return to Step 5, output\nthe shortest path, and update the time windows of each section; If N = T, compare the completion time of the previous process Ci\u2032 j\u2032k of k. If Ci\u2032 j\u2032k > CTijv, the start time of Oij Sijk = Ci\u2032 j\u2032k; if Ci\u2032 j\u2032k < CTijv, the start time is equal to the end time of load transportation, that is Sijk = CTijv. Then, output the shortest path and update the time windows of each section. Go to Step 11. Otherwise, select the suboptimal path and go to Step 7. Step 11: Output the start time, end time, and available time based on the shortest path and time window of the process. Step 12: Iterate Steps 3\u201311 until the selection of all workpieces and process transportation tasks has been accomplished, and output the path planning scheme, that is, the final scheduling scheme, according to the time set of each workpiece (such as the time and sequence of each working process)."
        },
        {
            "heading": "5. Computational Results",
            "text": ""
        },
        {
            "heading": "5.1. Parameter Settings",
            "text": "The performance of the algorithm is heavily affected by the crossover probability Pc and mutation probability Pm, which are critical components of the algorithm. An increase in the crossover probability improves the ease of generating new individuals. However, setting the crossover probability too high might cause the individuals\u2019 structures to disintegrate. Meanwhile, decreasing the crossover probability might significantly reduce the algorithm\u2019s search efficiency. When the mutation probability value is too low, producing new individuals becomes challenging. Conversely, an extremely high mutation probability can convert the genetic algorithm into a random search algorithm, significantly reducing the algorithm\u2019s efficiency [27]. Experiments are conducted on a Windows 10 computer with an Intel Core i7-8750H CPU, clocked at 2.50 GHz, and 16.00 GB of RAM, using Python programming language version 3.9. The performance of the genetic algorithm is analyzed by manipulating the crossover and mutation probabilities, ranging from 0.4 to 1.0 and 0.0001 to 1.0, respectively [28]. Based on 20 independent genetic algorithm trials, the algorithm\u2019s effectiveness is assessed by averaging the makespan. The results of the study concluded that higher probabilities of crossover and mutation result in more optimal solutions. As shown in\nSensors 2023, 23, 4526 18 of 25\nFigure 9, the optimal range of crossover probability is determined to be between 0.8 and 1.0, while the ideal range for mutation probability is confirmed at a range between 0.4 to 1.0. In addition, the algorithm\u2019s uniform performance within these parametric ranges is presented.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 18\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\ntransportation,\u00a0 that\u00a0 is\u00a0 \ud835\udc46 \ud835\udc36\ud835\udc47 .\u00a0Then,\u00a0output\u00a0 the\u00a0shortest\u00a0path\u00a0and\u00a0update\u00a0 the\u00a0 time\u00a0 windows\u00a0of\u00a0each\u00a0section.\u00a0Go\u00a0to\u00a0Step\u00a011.\u00a0Otherwise,\u00a0select\u00a0the\u00a0suboptimal\u00a0path\u00a0and\u00a0go\u00a0to\u00a0 Step\u00a07.\u00a0 Step\u00a011:\u00a0Output\u00a0the\u00a0start\u00a0time,\u00a0end\u00a0time,\u00a0and\u00a0available\u00a0time\u00a0based\u00a0on\u00a0the\u00a0shortest\u00a0path\u00a0 and\u00a0time\u00a0window\u00a0of\u00a0the\u00a0process.\u00a0 Step\u00a012:\u00a0Iterate\u00a0Steps\u00a03\u201311\u00a0until\u00a0the\u00a0selection\u00a0of\u00a0all\u00a0workpieces\u00a0and\u00a0process\u00a0transpor\u2010 tation\u00a0tasks\u00a0has\u00a0been\u00a0accomplished,\u00a0and\u00a0output\u00a0the\u00a0path\u00a0planning\u00a0scheme,\u00a0that\u00a0is,\u00a0the\u00a0final\u00a0 scheduling\u00a0scheme,\u00a0according\u00a0 to\u00a0 the\u00a0 time\u00a0set\u00a0of\u00a0each\u00a0workpiece\u00a0 (such\u00a0as\u00a0 the\u00a0 time\u00a0and\u00a0 sequence\u00a0of\u00a0each\u00a0working\u00a0process).\u00a0 5.\u00a0Computational\u00a0Results\u00a0 5.1.\u00a0Parameter\u00a0Settings\u00a0 The\u00a0performance\u00a0of\u00a0the\u00a0algorithm\u00a0is\u00a0heavily\u00a0affected\u00a0by\u00a0the\u00a0crossover\u00a0probability\u00a0 \ud835\udc43 \u00a0 and\u00a0mutation\u00a0probability\u00a0 \ud835\udc43 ,\u00a0which\u00a0are\u00a0critical\u00a0components\u00a0of\u00a0the\u00a0algorithm.\u00a0An\u00a0increase\u00a0 in\u00a0the\u00a0crossover\u00a0probability\u00a0improves\u00a0the\u00a0ease\u00a0of\u00a0generating\u00a0new\u00a0individuals.\u00a0However,\u00a0 setting\u00a0the\u00a0crossover\u00a0probability\u00a0too\u00a0high\u00a0might\u00a0cause\u00a0the\u00a0individuals\u2019\u00a0structures\u00a0to\u00a0disin\u2010 tegrate.\u00a0Meanwhile,\u00a0decreasing\u00a0the\u00a0crossover\u00a0probability\u00a0might\u00a0significantly\u00a0reduce\u00a0the\u00a0 algorithm\u2019s\u00a0search\u00a0efficiency.\u00a0When\u00a0the\u00a0mutation\u00a0probability\u00a0value\u00a0is\u00a0too\u00a0low,\u00a0producing\u00a0 new\u00a0individuals\u00a0becomes\u00a0challenging.\u00a0Conversely,\u00a0an\u00a0extremely\u00a0high\u00a0mutation\u00a0probabil\u2010 ity\u00a0can\u00a0convert\u00a0the\u00a0genetic\u00a0algorithm\u00a0into\u00a0a\u00a0random\u00a0search\u00a0algorithm,\u00a0significantly\u00a0reduc\u2010 ing\u00a0the\u00a0algorithm\u2019s\u00a0efficiency\u00a0[27].\u00a0 Experiments\u00a0are\u00a0conducted\u00a0on\u00a0a\u00a0Windows\u00a010\u00a0computer\u00a0with\u00a0an\u00a0Intel\u00a0Core\u00a0i7\u20108750H\u00a0 CPU,\u00a0clocked\u00a0at\u00a02.50\u00a0GHz,\u00a0and\u00a016.00\u00a0GB\u00a0of\u00a0RAM,\u00a0using\u00a0Python\u00a0programming\u00a0language\u00a0 version\u00a03.9.\u00a0The\u00a0performance\u00a0of\u00a0the\u00a0genetic\u00a0algorithm\u00a0 is\u00a0analyzed\u00a0by\u00a0manipulating\u00a0the\u00a0 crossover\u00a0and\u00a0mutation\u00a0probabilities,\u00a0ranging\u00a0from\u00a00.4\u00a0to\u00a01.0\u00a0and\u00a00.0001\u00a0 to\u00a01.0,\u00a0respec\u2010 tively\u00a0[28].\u00a0Based\u00a0on\u00a020\u00a0independent\u00a0genetic\u00a0algorithm\u00a0trials,\u00a0the\u00a0algorithm\u2019s\u00a0effectiveness\u00a0 is\u00a0assessed\u00a0by\u00a0averaging\u00a0the\u00a0makespan.\u00a0The\u00a0results\u00a0of\u00a0the\u00a0study\u00a0concluded\u00a0that\u00a0higher\u00a0 probabilities\u00a0of\u00a0crossover\u00a0and\u00a0mutation\u00a0 result\u00a0 in\u00a0more\u00a0optimal\u00a0solutions.\u00a0As\u00a0shown\u00a0 in\u00a0 i re\u00a09,\u00a0t e\u00a0 ti al\u00a0ra e\u00a0 f\u00a0cr ss er\u00a0 r a ilit \u00a0is\u00a0 eter i e \u00a0t \u00a0 e\u00a0 et ee \u00a00.8\u00a0a \u00a0 1.0,\u00a0 hile\u00a0the\u00a0ideal\u00a0range\u00a0for\u00a0mutation\u00a0probability\u00a0is\u00a0confirmed\u00a0at\u00a0a\u00a0range\u00a0between\u00a00.4\u00a0to\u00a0 1.0.\u00a0In\u00a0addition,\u00a0the\u00a0algorithm\u2019s\u00a0uniform\u00a0performance\u00a0within\u00a0these\u00a0parametric\u00a0ranges\u00a0is\u00a0 presented.\u00a0"
        },
        {
            "heading": "5.2. Comparative Experiment",
            "text": "The comparative experiment utilizes the collection of 82 test problems suggested by Ulusoy and Bilge. These problems consist of four workshop layouts and 10 production tasks and are divided into two groups according to the proportion of transportation time and processing time. For 40 cases with t/p > 0.25 and 42 cases with t/p < 0.25, t represents the transportation time between different processing machines, and p represents the time of operation. When t/p > 0.25, AGV transportation time takes up a large proportion. The purpose is to verify the algorithm\u2019s searching ability for integrated scheduling and path planning. When t/p < 0.25, problem number mantissa 0 means that all processing time is doubled, and mantissa 1 means that all processing time is multiplied by three. At the same time, the path in the map is halved to reduce the influence factors of path planning in the problem. In order to ensure the consistency of data comparison, this paper also adopts the same path planning strategy, AGV number, and process constraints. Experiments use the same map as the classical example. The algorithm settings used in this study entail a crossover probability of 0.9, a mutation probability of 0.5, a population size of 100, an elite set size of 10, number of generations set to 100, with a uniform crossover as the crossover operator, swap mutation as the mutation operator, roulette wheel as the selection scheme, and 20 genetic algorithm (GA) runs. Results are shown in the proposed algorithm in Tables 4 and 5. The LB value is the theoretical optimal value obtained by the lower limit method proposed by Ulusoy. The STW value is the optimal value obtained by the sliding time window heuristic proposed by Bilge. The UGA value is the optimal value obtained by the genetic algorithm proposed by Ulusoy. The improvement value is defined as the discrepancy between the optimal outcomes achieved by the UGA and those achieved by the proposed algorithm.\nSensors 2023, 23, 4526 19 of 25\nSensors 2023, 23, 4526 20 of 25\nSensors 2023, 23, 4526 21 of 25\nEX1040 0.17 219 240 244 240 +4\nIn general, the proposed algorithm is in good agreement with the LB value obtained by the lower limit method proposed by Ulusoy. In comparison with the STW heuristic, the proposed algorithm outperforms it in all problems examined, while the UGA underperforms in six cases. Moreover, the proposed algorithm delivers better solutions for twenty-one problems having t/p ratios exceeding 0.25, surpassing the UGA\u2019s improved solutions in only four. However, for the problems with t/p ratios below 0.25, the UGA outperforms the proposed GA in six issues, while the proposed GA can only achieve for three issues. Abdelmaguid [29] has invalidated the UGA\u2019s results for seven problems, namely EX81, EX82, EX83, EX810, EX820, EX830, and EX840, where the STW used the best methods. If the results generated by the UGA are ignored, it becomes evident that the proposed algorithm outperforms the UGA by a significant margin. Specifically, the proposed algorithm obtains improved solutions for twenty-four problems, while the UGA is only better in three problems."
        },
        {
            "heading": "5.3. Case Verification",
            "text": "We solve the case presented in Section 2.1 to verify both the efficacy and feasibility of the proposed algorithm with regard to addressing path conflicts. The white rectangular in Figure 10 represents the AGVs\u2019 deadheading trips. The various colors correspond to different workpieces: red represents J1, blue represents J2, yellow represents J3, orange represents J4, and green represents J5. Figure 10 illustrates that the makespan for production scheduling is 110 s.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 21\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\nEX640\u00a0 0.19\u00a0 161\u00a0 185\u00a0 184\u00a0 184\u00a0 0\u00a0\nEX740\u00a0 0.24\u00a0 137\u00a0 138\u00a0 137\u00a0 137\u00a0 0\u00a0\nIn\u00a0general,\u00a0the\u00a0proposed\u00a0algorithm\u00a0is\u00a0in\u00a0good\u00a0agreement\u00a0with\u00a0the\u00a0LB\u00a0value\u00a0obtained\u00a0 by\u00a0the\u00a0lower\u00a0limit\u00a0method\u00a0proposed\u00a0by\u00a0Ulusoy.\u00a0In\u00a0comparison\u00a0with\u00a0the\u00a0STW\u00a0heuristic,\u00a0 the\u00a0proposed\u00a0algorithm\u00a0outperforms\u00a0it\u00a0in\u00a0all\u00a0problems\u00a0examined,\u00a0while\u00a0the\u00a0UGA\u00a0under\u2010 performs\u00a0 in\u00a0 six\u00a0 cases.\u00a0Moreover,\u00a0 the\u00a0proposed\u00a0 algorithm\u00a0delivers\u00a0 better\u00a0 solutions\u00a0 for\u00a0 twenty\u2010one\u00a0problems\u00a0having\u00a0 \ud835\udc61/\ud835\udc5d\u00a0 ratios\u00a0exceeding\u00a00.25,\u00a0surpassing\u00a0the\u00a0UGA\u2019s\u00a0improved\u00a0 solutions\u00a0in\u00a0only\u00a0four.\u00a0However,\u00a0for\u00a0the\u00a0problems\u00a0with\u00a0 \ud835\udc61/\ud835\udc5d\u00a0 ratios\u00a0below\u00a00.25,\u00a0the\u00a0UGA\u00a0 outperforms\u00a0the\u00a0proposed\u00a0GA\u00a0in\u00a0six\u00a0issues,\u00a0while\u00a0the\u00a0proposed\u00a0GA\u00a0can\u00a0only\u00a0achieve\u00a0for\u00a0 three\u00a0issues.\u00a0 Abdelmaguid\u00a0 [29]\u00a0has\u00a0 invalidated\u00a0 the\u00a0UGA\u2019s\u00a0 results\u00a0 for\u00a0 seven\u00a0problems,\u00a0namely\u00a0 EX81,\u00a0EX82,\u00a0EX83,\u00a0EX810,\u00a0EX820,\u00a0EX830,\u00a0and\u00a0EX840,\u00a0where\u00a0the\u00a0STW\u00a0used\u00a0the\u00a0best\u00a0meth\u2010 ods.\u00a0If\u00a0the\u00a0results\u00a0generated\u00a0by\u00a0the\u00a0UGA\u00a0are\u00a0ignored,\u00a0it\u00a0becomes\u00a0evident\u00a0that\u00a0the\u00a0proposed\u00a0 algorithm\u00a0outperforms\u00a0the\u00a0UGA\u00a0by\u00a0a\u00a0significant\u00a0margin.\u00a0Specifically,\u00a0the\u00a0proposed\u00a0algo\u2010 rithm\u00a0obtains\u00a0improved\u00a0solutions\u00a0for\u00a0twenty\u2010four\u00a0problems,\u00a0while\u00a0the\u00a0UGA\u00a0is\u00a0only\u00a0better\u00a0 in\u00a0three\u00a0problems.\u00a0\n5.3.\u00a0Case\u00a0Verification\u00a0 We\u00a0solve\u00a0the\u00a0case\u00a0presented\u00a0in\u00a0Section\u00a02.1\u00a0to\u00a0verify\u00a0both\u00a0the\u00a0efficacy\u00a0and\u00a0feasibility\u00a0 of\u00a0the\u00a0proposed\u00a0algorithm\u00a0with\u00a0regard\u00a0to\u00a0addressing\u00a0path\u00a0conflicts.\u00a0The\u00a0white\u00a0rectangular\u00a0 in\u00a0Figure\u00a010\u00a0represents\u00a0the\u00a0AGVs\u2019\u00a0deadheading\u00a0trips.\u00a0The\u00a0various\u00a0colors\u00a0correspond\u00a0to\u00a0 different\u00a0workpieces:\u00a0red\u00a0represents\u00a0J1,\u00a0blue\u00a0represents\u00a0J2,\u00a0yellow\u00a0represents\u00a0J3,\u00a0orange\u00a0 represents\u00a0J4,\u00a0and\u00a0green\u00a0represents\u00a0J5.\u00a0Figure\u00a010\u00a0illustrates\u00a0that\u00a0the\u00a0makespan\u00a0for\u00a0produc\u2010 tion\u00a0scheduling\u00a0is\u00a0110\u00a0s.\u00a0\n\u00a0 Figure\u00a010.\u00a0Gantt\u00a0chart\u00a0of\u00a0production\u00a0scheduling.\u00a0Figure 10. Gant chart of production scheduling.\nSensors 2023, 23, 4526 22 of 25\nFigure 11 illustrates the time window without considering path conflicts, where the red color represents AGV1, blue color represents AGV2, and green color represents AGV3. AGV1, AGV2, and AGV3 depart from node 4 at the same time, so we have to let them pass in order of priority. As is shown in Figure 12a, the route of AGV2 from 7 s to 14 s is \u201c10-15-14-9-14-15-10\u201d, which is the same as that of AGV3, so AGV3 cannot pass. According to the scheme, AGV3 will go to node 19 from node 15 and wait until AGV2 leaves node 15. Figure 12b illustrates another conflict at 47 s. AGV2 and AGV3 need to go to M1, so AGV3 will have to stay at node 22 until AGV2 leaves node 21.\ne s rs\u00a0 ,\u00a0 ,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 2 \u00a0 of\u00a0 \u00a0 \u00a0\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fl \u00a0 \u00a0 \u00a0 \u00a0 color\u00a0 represents\u00a0AGV1,\u00a0 blue\u00a0 color\u00a0 presents\u00a0AGV2,\u00a0 and\u00a0 green\u00a0 color\u00a0 represents\u00a0 3.\u00a0 1,\u00a0AGV2,\u00a0and\u00a0AGV3\u00a0depart\u00a0from\u00a0node\u00a04\u00a0at\u00a0the\u00a0same\u00a0time,\u00a0so\u00a0we\u00a0have\u00a0 o\u00a0let\u00a0 them\u00a0pass\u00a0in\u00a0 rder\u00a0 f\u00a0priority.\u00a0As\u00a0is\u00a0shown\u00a0in\u00a0Figure\u00a012a,\u00a0th \u00a0route\u00a0of\u00a0AGV2\u00a0from\u00a07\u00a0s\u00a0to\u00a0 14\u00a0s\u00a0is\u00a0\u201c10\u201015\u2010 4\u20109\u201014\u201015\u201010\u201d,\u00a0w ich\u00a0is\u00a0the\u00a0same\u00a0as\u00a0that\u00a0of\u00a0 ,\u00a0so\u00a0AGV3\u00a0cannot\u00a0pass.\u00a0 According\u00a0to\u00a0the\u00a0scheme,\u00a0AGV3\u00a0will\u00a0go\u00a0to\u00a0node\u00a019\u00a0from\u00a0node\u00a015\u00a0and\u00a0wait\u00a0until\u00a0AGV2\u00a0 leaves\u00a0node\u00a015.\u00a0Figure\u00a012b\u00a0illustrates\u00a0 nother\u00a0conflict\u00a0at\u00a047\u00a0s.\u00a0AGV2\u00a0and\u00a0AGV3\u00a0need\u00a0to\u00a0go\u00a0 to\u00a0M1,\u00a0so\u00a0AGV3\u00a0will\u00a0have\u00a0to\u00a0stay\u00a0at\u00a0node\u00a022\u00a0until\u00a0AGV2\u00a0leaves\u00a0node\u00a021.\u00a0\nFigure\u00a011.\u00a0Time\u00a0window\u00a0without\u00a0considering\u00a0path\u00a0conflicts.\u00a0\nFigure\u00a012.\u00a0Path\u00a0conflicts\u00a0happen\u00a0in\u00a0production\u00a0scheduling.\u00a0\nFigures\u00a013\u00a0and\u00a014\u00a0show\u00a0the\u00a0Gantt\u00a0Chart\u00a0and\u00a0the\u00a0 time\u00a0window\u00a0of\u00a0final\u00a0scheduling\u00a0 after\u00a0optimizing\u00a0the\u00a0path\u00a0conflicts.\u00a0The\u00a0route\u00a0of\u00a0AGV1\u00a0is\u00a0\u201cL/U\u2010M1\u2010M4\u2010L/U\u2010M4\u2010M3\u2010L/U\u201d.\u00a0 The\u00a0route\u00a0of\u00a0AGV2\u00a0 is\u00a0\u201cL/U\u2010M4\u2010L/U\u2010M3\u2010M1\u2010L/U\u201d.\u00a0The\u00a0route\u00a0of\u00a0AGV3\u00a0 is\u00a0\u201cL/U\u2010M4\u2010L/U\u2010 M2\u2010M1\u2010L/U\u2010M2\u2010M4\u2010L/U\u201d.\u00a0All\u00a0path\u00a0 conflicts\u00a0 among\u00a0AGVs\u00a0 are\u00a0 eliminated.\u00a0 Finally,\u00a0 the\u00a0 maximum\u00a0completion\u00a0time\u00a0is\u00a0determined\u00a0to\u00a0be\u00a0136\u00a0s.\u00a0\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 22\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\nFigure\u00a011\u00a0illustrates\u00a0the\u00a0time\u00a0window\u00a0without\u00a0considering\u00a0path\u00a0conflicts,\u00a0where\u00a0the\u00a0 red\u00a0 color\u00a0 represents\u00a0AGV1,\u00a0 blue\u00a0 color\u00a0 represents\u00a0AGV2,\u00a0 and\u00a0 green\u00a0 color\u00a0 represents\u00a0 AGV3.\u00a0AGV1,\u00a0AGV2,\u00a0and\u00a0AGV3\u00a0depart\u00a0from\u00a0node\u00a04\u00a0at\u00a0the\u00a0same\u00a0time,\u00a0so\u00a0we\u00a0have\u00a0to\u00a0let\u00a0 them\u00a0pass\u00a0in\u00a0order\u00a0of\u00a0priority.\u00a0As\u00a0is\u00a0shown\u00a0in\u00a0Figure\u00a012a,\u00a0the\u00a0route\u00a0of\u00a0AGV2\u00a0from\u00a07\u00a0s\u00a0to\u00a0 14\u00a0s\u00a0is\u00a0\u201c10\u201015\u201014\u20109\u201014\u201015\u201010\u201d,\u00a0which\u00a0is\u00a0the\u00a0same\u00a0as\u00a0that\u00a0of\u00a0AGV3,\u00a0so\u00a0AGV3\u00a0cannot\u00a0pass.\u00a0 According\u00a0to\u00a0the\u00a0scheme,\u00a0AGV3\u00a0will\u00a0go\u00a0to\u00a0node\u00a019\u00a0from\u00a0node\u00a015\u00a0and\u00a0wait\u00a0until\u00a0AGV2\u00a0 leaves\u00a0node\u00a015.\u00a0Figure\u00a012b\u00a0illustrates\u00a0another\u00a0conflict\u00a0at\u00a047\u00a0s.\u00a0AGV2\u00a0and\u00a0AGV3\u00a0need\u00a0to\u00a0go\u00a0 to\u00a0M1,\u00a0so\u00a0AGV3\u00a0will\u00a0have\u00a0to\u00a0stay\u00a0at\u00a0node\u00a022\u00a0until\u00a0AGV2\u00a0leaves\u00a0node\u00a021.\u00a0\nFigure\u00a012.\u00a0Path\u00a0conflicts\u00a0happen\u00a0in\u00a0production\u00a0scheduling.\u00a0\nFigures\u00a013\u00a0and\u00a014\u00a0show\u00a0the\u00a0Gantt\u00a0Chart\u00a0and\u00a0the\u00a0 time\u00a0window\u00a0of\u00a0final\u00a0scheduling\u00a0 after\u00a0optimizing\u00a0the\u00a0path\u00a0conflicts.\u00a0The\u00a0route\u00a0of\u00a0AGV1\u00a0is\u00a0\u201cL/U\u2010M1\u2010M4\u2010L/U\u2010M4\u2010M3\u2010L/U\u201d.\u00a0 The\u00a0route\u00a0of\u00a0AGV2\u00a0 is\u00a0\u201cL/U\u2010M4\u2010L/U\u2010M3\u2010M1\u2010L/U\u201d.\u00a0The\u00a0route\u00a0of\u00a0AGV3\u00a0 is\u00a0\u201cL/U\u2010M4\u2010L/U\u2010 M2\u2010M1\u2010L/U\u2010M2\u2010M4\u2010L/U\u201d.\u00a0All\u00a0path\u00a0 conflicts\u00a0 among\u00a0AGVs\u00a0 are\u00a0 eliminated.\u00a0 Finally,\u00a0 the\u00a0 maximum\u00a0completion\u00a0time\u00a0is\u00a0determined\u00a0to\u00a0be\u00a0136\u00a0s.\u00a0\nFigures 13 and 14 show the Gantt Chart and the time window of final scheduling after optimizing the path conflicts. The route of AGV1 is \u201cL/U-M1-M4-L/U-M4-M3-L/U\u201d. The route of AGV2 is \u201cL/U-M4-L/U-M3-M1-L/U\u201d. The route of AGV3 is \u201cL/U-M4-L/UM2-M1-L/U-M2-M4-L/U\u201d. All path conflicts among AGVs are eliminated. Finally, the maximum completion time is determined to be 136 s.\nSensors 2023, 23, 4526 23 of 25Sensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 23\u00a0 of\u00a0 25\u00a0\u00a0\n\u00a0\n\u00a0 Figure\u00a013.\u00a0Gantt\u00a0chart\u00a0of\u00a0final\u00a0scheduling.\u00a0\n\u00a0\nFigure\u00a014.\u00a0Time\u00a0window\u00a0of\u00a0final\u00a0scheduling.\u00a0\n6.\u00a0Conclusions\u00a0 This\u00a0 study\u00a0addresses\u00a0 the\u00a0 integrated\u00a0 scheduling\u00a0problem\u00a0of\u00a0 flexible\u00a0 job\u2010shops\u00a0 that\u00a0 considers\u00a0CFRP,\u00a0with\u00a0 the\u00a0objective\u00a0of\u00a0minimizing\u00a0 the\u00a0maximum\u00a0makespan.\u00a0The\u00a0study\u00a0 develops\u00a0a\u00a0hybrid\u00a0genetic\u00a0algorithm\u00a0for\u00a0production\u00a0scheduling,\u00a0with\u00a0the\u00a0optimal\u00a0range\u00a0of\u00a0 crossover\u00a0and\u00a0mutation\u00a0probabilities\u00a0identified\u00a0as\u00a00.8\u20131.0\u00a0and\u00a00.4\u20131.0,\u00a0respectively.\u00a0Two\u00a0 comparative\u00a0experiments\u00a0demonstrate\u00a0the\u00a0superior\u00a0efficiency\u00a0of\u00a0the\u00a0proposed\u00a0GA\u00a0over\u00a0 the\u00a0STW\u00a0and\u00a0the\u00a0UGA.\u00a0The\u00a0study\u00a0implements\u00a0AGV\u2010encoding\u00a0as\u00a0a\u00a0basis\u00a0for\u00a0a\u00a0genetic\u00a0al\u2010 gorithm\u00a0that\u00a0tackles\u00a0the\u00a0problem\u00a0of\u00a0scheduling\u00a0AGVs.\u00a0Conflict\u00a0resolution\u00a0strategies\u00a0are\u00a0 presented,\u00a0 and\u00a0 a\u00a0 time\u00a0window\u2010based\u00a0Dijkstra\u2019s\u00a0 algorithm\u00a0 is\u00a0 employed\u00a0 to\u00a0 identify\u00a0 the\u00a0 shortest\u00a0conflict\u2010free\u00a0route,\u00a0facilitating\u00a0efficient\u00a0planning\u00a0rooted\u00a0in\u00a0production\u00a0scheduling.\u00a0 The\u00a0study\u00a0verifies\u00a0the\u00a0feasibility\u00a0of\u00a0the\u00a0proposed\u00a0approach\u00a0by\u00a0applying\u00a0it\u00a0to\u00a0a\u00a0real\u00a0case.\u00a0\nFigure 13. Gantt chart of final scheduling.\nSensors\u00a02023,\u00a023,\u00a0x\u00a0FOR\u00a0PEER\u00a0REVIEW\u00a0 23\u00a0 of\u00a0 25\u00a0 \u00a0\n\u00a0\n\u00a0 Figure\u00a013.\u00a0Gantt\u00a0chart\u00a0of\u00a0final\u00a0scheduling.\u00a0\n\u00a0\nFigure\u00a014.\u00a0Time\u00a0window\u00a0of\u00a0final\u00a0scheduling.\u00a0\n6.\u00a0Conclusions\u00a0 This\u00a0 study\u00a0addresses\u00a0 the\u00a0 integrated\u00a0 scheduling\u00a0problem\u00a0of\u00a0 flexible\u00a0 job\u2010shops\u00a0 that\u00a0 considers\u00a0CFRP,\u00a0with\u00a0 the\u00a0objective\u00a0of\u00a0minimizing\u00a0 the\u00a0maximum\u00a0makespan.\u00a0The\u00a0study\u00a0 develops\u00a0a\u00a0hybrid\u00a0genetic\u00a0algorithm\u00a0for\u00a0production\u00a0scheduling,\u00a0with\u00a0the\u00a0optimal\u00a0range\u00a0of\u00a0 crossover\u00a0and\u00a0mutation\u00a0probabilities\u00a0identified\u00a0as\u00a00.8\u20131.0\u00a0and\u00a00.4\u20131.0,\u00a0respectively.\u00a0Two\u00a0 comparative\u00a0experiments\u00a0demonstrate\u00a0the\u00a0superior\u00a0efficiency\u00a0of\u00a0the\u00a0proposed\u00a0GA\u00a0over\u00a0 the\u00a0STW\u00a0and\u00a0the\u00a0UGA.\u00a0The\u00a0study\u00a0implements\u00a0AGV\u2010encoding\u00a0as\u00a0a\u00a0basis\u00a0for\u00a0a\u00a0genetic\u00a0al\u2010 gorithm\u00a0that\u00a0tackles\u00a0the\u00a0problem\u00a0of\u00a0scheduling\u00a0AGVs.\u00a0Conflict\u00a0resolution\u00a0strategies\u00a0are\u00a0 presented,\u00a0 and\u00a0 a\u00a0 time\u00a0window\u2010based\u00a0Dijkstra\u2019s\u00a0 algorithm\u00a0 is\u00a0 employed\u00a0 to\u00a0 identify\u00a0 the\u00a0 shortest\u00a0conflict\u2010free\u00a0route,\u00a0facilitating\u00a0efficient\u00a0planning\u00a0rooted\u00a0in\u00a0production\u00a0scheduling.\u00a0 The\u00a0study\u00a0verifies\u00a0the\u00a0feasibility\u00a0of\u00a0the\u00a0proposed\u00a0approach\u00a0by\u00a0applying\u00a0it\u00a0to\u00a0a\u00a0real\u00a0case.\u00a0\nFigure 14. Time window of final scheduling.\n. cl sions\nis t y resses the integrated scheduling problem of flexible job-shops that si ers F P, j ti f i i izi g t e axi u akespan. The study\nl ri genetic algorith for production scheduling, with the optimal range of s er a tation probabilities identified as 0.8\u20131.0 and 0.4\u20131.0, respectively. Two\narative experi ents demonstrate the superior efficiency of the proposed GA over t ST and the UGA. The study implements AGV-encoding s basis for a genetic algorithm that tackles the problem of scheduling AGVs. Conflict res lution strategi s are presented, and a time window-based Dijkstra\u2019s algorithm is employed to identify the s rtest co flict-free route, facilitating efficient pla ning r oted in production scheduling.\ne st y erifies t e feasibility of t e ro ose a roac by applying it to a real case.\nSensors 2023, 23, 4526 24 of 25\nFuture research will investigate the impact of equipment maintenance and breakdowns on production scheduling and explore the use of advanced algorithms to enhance its efficiency.\nAuthor Contributions: Conceptualization, J.S.; methodology, J.S.; software, J.S.; validation, Z.X.; formal analysis, Y.Z.; investigation, J.S.; resources, J.S.; data curation, J.S.; writing\u2014original draft preparation, J.S.; writing\u2014review and editing, J.S.; visualization, L.L.; supervision, Z.Y.; project administration, L.L.; funding acquisition, L.L. All authors have read and agreed to the published version of the manuscript.\nFunding: This research was funded by the National Key Research and Development Program of China (Grant No. 2021YFB3300503).\nInstitutional Review Board Statement: Not applicable.\nInformed Consent Statement: Not applicable.\nData Availability Statement: The data may be obtained from the authors upon reasonable request.\nConflicts of Interest: The authors declare no conflict of interest.\nReferences 1. Sonmez, A.I.; Baykasoglu, A. A new dynamic programming formulation of (nxm) flowshop sequencing problems with due dates. Int. J. Prod. Res. 1998, 36, 2269\u20132283. [CrossRef] 2. Nouri, H.E.; Driss, O.B.; Gh\u00e9dira, K. Simultaneous scheduling of machines and transport robots in flexible job shop environment using hybrid metaheuristics based on clustered holonic multiagent model. Comput. Ind. Eng. 2016, 102, 488\u2013501. [CrossRef] 3. Mareddy, P.L.; Narapureddy, S.R.; Dwivedula, V.R.; Karanam, P.R. Optimum scheduling of machines, automated guided vehicles\nand tools without tool delay in a multi-machine flexible manufacturing system using symbiotic organisms search algorithm. Concurr. Comput. Pract. Exp. 2022, 34, e6950. [CrossRef]\n4. Ulusoy, G.; Bilge, \u00dc. Simultaneous scheduling of machines and automated guided vehicles. Int. J. Prod. Res. 1993, 31, 2857\u20132873. [CrossRef] 5. Subbaiah, K.V.; Nageswara Rao, M.; Narayana Rao, K. Scheduling of AGVs and machines in FMS with makespan criteria using sheep flock heredity algorithm. Int. J. Phys. Sci. 2009, 4, 139\u2013148. 6. Badakhshian, M.; Sulaiman, S.B.; Ariffin, M.K.A. Performance optimization of simultaneous machine and automated guided vehicle scheduling using fuzzy logic controller based genetic algorithm. Int. J. Phys. Sci. 2012, 7, 1461\u20131471. [CrossRef] 7. Reddy, N.S.; Ramamurthy, D.V.; Rao, K.P.; Lalitha, M.P. Practical simultaneous scheduling of machines, AGVs, tool transporter and tools in a multi machine FMS using symbiotic organisms search algorithm. Int. J. Comput. Integr. Manuf. 2021, 34, 153\u2013174. [CrossRef] 8. Erol, R.; Sahin, C.; Baykasoglu, A.; Kaplanoglu, V. A multi-agent based approach to dynamic scheduling of machines and automated guided vehicles in manufacturing systems. Appl. Soft Comput. 2012, 12, 1720\u20131732. [CrossRef] 9. Zhang, G.; Gao, L.; Shi, Y. An effective genetic algorithm for the flexible job-shop scheduling problem. Expert Syst. Appl. 2011, 38, 3563\u20133573. [CrossRef] 10. Yan, J.; Liu, Z.; Zhang, C.; Zhang, T.; Zhang, Y.; Yang, C. Research on flexible job shop scheduling under finite transportation conditions for digital twin workshop. Robot. Comput.-Integr. Manuf. 2021, 72, 102198. [CrossRef] 11. Palacios, J.J.; Gonz\u00e1lez, M.A.; Vela, C.R.; Gonz\u00e1lez-Rodr\u00edguez, I.; Puente, J. Genetic tabu search for the fuzzy flexible job shop problem. Comput. Oper. Res. 2015, 54, 74\u201389. [CrossRef] 12. Wei, D. An optimized floyd algorithm for the shortest path problem. J. Netw. 2010, 5, 1496. [CrossRef] 13. Mac, T.T.; Copot, C.; Tran, D.T.; De Keyser, R. A hierarchical global path planning approach for mobile robots based on multi-objective particle swarm optimization. Appl. Soft Comput. 2017, 59, 68\u201376. [CrossRef] 14. Chen, X.; Zhang, X.; Huang, W.; Liu, S.; Dai, H. Coordinated optimal path planning of multiple substation inspection robots\nbased on conflict detection. In Proceedings of the 2019 Chinese Automation Congress (CAC), Hangzhou, China, 22\u201324 November 2019; pp. 5069\u20135074.\n15. Sun, G.; Zhou, R.; Di, B.; Dong, Z.; Wang, Y. A novel cooperative path planning for multi-robot persistent coverage with obstacles and coverage period constraints. Sensors 2019, 19, 1994. [CrossRef] 16. M\u00f6hring, R.H.; K\u00f6hler, E.; Gawrilow, E.; Stenzel, B. Conflict-free real-time AGV routing. In Proceedings of the Operations Research Proceedings 2004: Selected Papers of the Annual International Conference of the German Operations Research Society (GOR)\u2014Jointly Organized with the Netherlands Society for Operations Research (NGB), Tilburg, The Netherlands, 1\u20133 September 2004; Springer: Berlin/Heidelberg, Germany, 2005; pp. 18\u201324. 17. Desaulniers, G.; Langevin, A.; Riopel, D.; Villeneuve, B. Dispatching and conflict-free routing of automated guided vehicles: An exact approach. Int. J. Flex. Manuf. Syst. 2003, 15, 309\u2013331. [CrossRef]\nSensors 2023, 23, 4526 25 of 25\n18. Lin, N.; Xing, L.J. Application of Improved A* Algorithm in Magnetic Guidance AGV Path Planning. Autom. Technol. Appl. 2019, 38, 5\u20138. 19. Xing, L.; Liu, Y.; Li, H.; Wu, C.C.; Lin, W.C.; Chen, X. A novel tabu search algorithm for multi-AGV routing problem. Mathematics 2020, 8, 279. [CrossRef] 20. Murakami, K. Time-space network model and MILP formulation of the conflict-free routing problem of a capacitated AGV system. Comput. Ind. Eng. 2020, 141, 106270. [CrossRef] 21. Yuan, Z.; Yang, Z.; Lv, L.; Shi, Y. A bi-level path planning algorithm for multi-AGV routing problem. Electronics 2020, 9, 1351. [CrossRef] 22. Saidi-Mehrabad, M.; Dehnavi-Arani, S.; Evazabadian, F.; Mahmoodian, V. An Ant Colony Algorithm (ACA) for solving the new integrated model of job shop scheduling and conflict-free routing of AGVs. Comput. Ind. Eng. 2015, 86, 2\u201313. [CrossRef] 23. Fu, L.L.; Aloulou, M.A.; Triki, C. Integrated production scheduling and vehicle routing problem with job splitting and delivery time windows. Int. J. Prod. Res. 2017, 55, 5942\u20135957. [CrossRef] 24. Bilge, \u00dc.; Ulusoy, G. A time window approach to simultaneous scheduling of machines and material handling system in an FMS. Oper. Res. 1995, 43, 1058\u20131070. [CrossRef] 25. Tanaka, Y.; Nishi, T.; Inuiguchi, M. Dynamic optimization of simultaneous dispatching and conflict-free routing for automated guided vehicles-Petri net decomposition approach. J. Adv. Mech. Des. Syst. Manuf. 2010, 4, 701\u2013715. [CrossRef] 26. Corr\u00e9a, A.I.; Langevin, A.; Rousseau, L.M. Scheduling and routing of automated guided vehicles: A hybrid approach. Comput. Oper. Res. 2007, 34, 1688\u20131707. [CrossRef] 27. Liu, L.; Guo, K.; Gao, Z.; Li, J.; Sun, J. Digital Twin-Driven Adaptive Scheduling for Flexible Job Shops. Sustainability 2022, 14, 5340. [CrossRef] 28. Abdelmaguid, T.F.; Nassef, A.O.; Kamal, B.A.; Hassan, M.F. A hybrid GA/heuristic approach to the simultaneous scheduling of machines and automated guided vehicles. Int. J. Prod. Res. 2004, 42, 267\u2013281. [CrossRef] 29. Abdelmaguid, T.F. Scheduling of Flexible Manufacturing Systems Using Hybrid Genetic Algorithm. Master\u2019s Thesis, Cairo University, Giza, Egypt, 2000.\nDisclaimer/Publisher\u2019s Note: The statements, opinions and data contained in all publications are solely those of the individual author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to people or property resulting from any ideas, methods, instructions or products referred to in the content."
        }
    ],
    "title": "An Approach to Integrated Scheduling of Flexible Job-Shop Considering Conflict-Free Routing Problems",
    "year": 2023
}