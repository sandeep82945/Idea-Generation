{
    "abstractText": "Planning as theorem proving in situation calculus was abandoned 50 years ago as an impossible project. But we have developed a Theorem Proving Lifted Heuristic (TPLH) planner that searches for a plan in a tree of situations using the A* search algorithm. It is controlled by a delete relaxationbased domain independent heuristic. We compare TPLH with Fast Downward (FD) and Best First Width Search (BFWS) planners over several standard benchmarks. Since our implementation of the heuristic function is not optimized, TPLH is slower than FD and BFWS. But it computes shorter plans, and it explores fewer states. We discuss previous research on planning within KR&R and identify related directions. Thus, we show that deductive lifted heuristic planning in situation calculus is actually doable.",
    "authors": [],
    "id": "SP:375e33a578258e5bc0ac6545a260a65e4be8ffb1",
    "references": [
        {
            "authors": [
                "F. Bacchus",
                "F. Kabanza"
            ],
            "title": "Using temporal logics to express search control knowledge for planning",
            "venue": "Artif. Intell. 116(1-2):123\u2013191.",
            "year": 2000
        },
        {
            "authors": [
                "J.A. Baier",
                "C. Fritz",
                "S.A. McIlraith"
            ],
            "title": "Exploiting procedural domain control knowledge in state-of-the-art planners",
            "venue": "17th International Conference on Automated Planning and Scheduling (ICAPS-07), 26\u201333.",
            "year": 2007
        },
        {
            "authors": [
                "V. Batusov",
                "M. Soutchanski"
            ],
            "title": "A logical semantics for PDDL+",
            "venue": "29th International Conference on Automated Planning and Scheduling, ICAPS 2018, 40\u201348. AAAI Press.",
            "year": 2019
        },
        {
            "authors": [
                "V. Batusov"
            ],
            "title": "Deterministic Planning in Incompletely Known Domains with Local Effects, Master Thesis",
            "venue": "Technical report, Ryerson University, Dep. of Computer Science.",
            "year": 2014
        },
        {
            "authors": [
                "W. Bibel"
            ],
            "title": "A deductive solution for plan generation",
            "venue": "New Gener. Comput. 4(2):115\u2013132.",
            "year": 1986
        },
        {
            "authors": [
                "W. Bibel"
            ],
            "title": "Let\u2019s plan it deductively! Artif",
            "venue": "Intell. 103(1-2):183\u2013208.",
            "year": 1998
        },
        {
            "authors": [
                "S. Biundo"
            ],
            "title": "Present\u2013Day Deductive Planning",
            "venue": "Proceedings of the 2nd European Workshop on AI Planning (EWSP-93), Current Trends in Artificial Intelligence Planning, 1\u20135. IOS Press.",
            "year": 1994
        },
        {
            "authors": [
                "I. Bratko"
            ],
            "title": "Prolog: Programming For Artificial Intelligence, 3/E",
            "venue": "Addison Wesley.",
            "year": 2001
        },
        {
            "authors": [
                "D. Bryce",
                "S. Kambhampati"
            ],
            "title": "Planning Graph Based Reachability Heuristics",
            "venue": "AI Mag. 28(1):47\u201383.",
            "year": 2007
        },
        {
            "authors": [
                "J. Cla\u00dfen",
                "P. Eyerich",
                "G. Lakemeyer",
                "B. Nebel"
            ],
            "title": "Towards an Integration of Golog and Planning",
            "venue": "Veloso, M. M., ed., IJCAI 2007, 20th International Joint Conference on Artificial Intelligence, 1846\u20131851.",
            "year": 2007
        },
        {
            "authors": [
                "J. Cla\u00dfen",
                "G. R\u00f6ger",
                "G. Lakemeyer",
                "B. Nebel"
            ],
            "title": "PLATAS - Integrating Planning and the Action Language Golog",
            "venue": "K\u00fcnstliche Intell. 26(1):61\u201367.",
            "year": 2012
        },
        {
            "authors": [
                "J. Cla\u00dfen"
            ],
            "title": "Planning and Verification in the agent language Golog",
            "venue": "Ph.D. Dissertation, RWTH Aachen Univ.",
            "year": 2013
        },
        {
            "authors": [
                "J. Cohen"
            ],
            "title": "A Tribute to Alain Colmerauer",
            "venue": "Theory and Practice of Logic Programming 1(6):637\u2013646.",
            "year": 2001
        },
        {
            "authors": [
                "A.J. Coles",
                "A. Coles",
                "M. Fox",
                "D. Long"
            ],
            "title": "Forward-chaining partial-order planning",
            "venue": "Proceedings of the 20th International Conference on Automated Planning and Scheduling, ICAPS 2010, Toronto, Ontario, Canada, May 12-16, 2010, 42\u201349. AAAI.",
            "year": 2010
        },
        {
            "authors": [
                "A. Colmerauer",
                "P. Roussel"
            ],
            "title": "The Birth of Prolog",
            "venue": "New York, NY, USA: ACM. 331\u2013367.",
            "year": 1996
        },
        {
            "authors": [
                "A. Colmerauer"
            ],
            "title": "An Introduction to Prolog III",
            "venue": "Commun. ACM 33(7):69\u201390.",
            "year": 1990
        },
        {
            "authors": [
                "S.A. Cook",
                "Y. Liu"
            ],
            "title": "A complete axiomatization for blocks world",
            "venue": "J. Log. Comput. 13(4):581\u2013594.",
            "year": 2003
        },
        {
            "authors": [
                "A.B. Corr\u00eaa",
                "J. Seipp"
            ],
            "title": "Best-first width search for lifted classical planning",
            "venue": "32nd International Conference on Automated Planning and Scheduling, ICAPS, 11\u201315.",
            "year": 2022
        },
        {
            "authors": [
                "A.B. Corr\u00eaa",
                "G. Franc\u00e8s",
                "F. Pommerening",
                "M. Helmert"
            ],
            "title": "Delete-relaxation heuristics for lifted classical planning",
            "venue": "Proceedings of the 31st ICAPS, Guangzhou, China (virtual), 2021, 94\u2013102. AAAI Press.",
            "year": 2021
        },
        {
            "authors": [
                "A.B. Corr\u00eaa",
                "F. Pommerening",
                "M. Helmert",
                "G. Franc\u00e8s"
            ],
            "title": "The FF heuristic for lifted classical planning",
            "venue": "Thirty-Sixth AAAI Conference on Artificial Intelligence, Virtual Event, February 22 - March 1, 2022, 9716\u20139723.",
            "year": 2022
        },
        {
            "authors": [
                "S. Cresswell",
                "A. Smaill",
                "J. Richardson"
            ],
            "title": "Deductive synthesis of recursive plans in linear logic",
            "venue": "Biundo, S., and Fox, M., eds., Recent Advances in AI Planning, 5th European Conference on Planning (ECP-99), volume 1809 of Lecture Notes in Computer Science, 252\u2013264. Springer.",
            "year": 1999
        },
        {
            "authors": [
                "Y. Dimopoulos",
                "M. Gebser",
                "P. L\u00fchne",
                "J. Romero",
                "T. Schaub"
            ],
            "title": "plasp 3: Towards effective ASP planning",
            "venue": "Theory Pract. Log. Program. 19(3):477\u2013504.",
            "year": 2019
        },
        {
            "authors": [
                "H.B. Enderton"
            ],
            "title": "A Mathematical Introduction to Logic",
            "venue": "Second edition: Harcourt Press.",
            "year": 2001
        },
        {
            "authors": [
                "Y. Fan",
                "M. Cai",
                "N. Li",
                "Y. Liu"
            ],
            "title": "A first-order interpreter for knowledge-based golog with sensing based on exact progression and limited reasoning",
            "venue": "Proc. of the 26th Conference on Artificial Intelligence AAAI-12, 734\u201342.",
            "year": 2012
        },
        {
            "authors": [
                "R.E. Fikes",
                "N.J. Nilsson"
            ],
            "title": "STRIPS: A new approach to the application of theorem proving to problem solving",
            "venue": "Artificial Intelligence 2(3-4):189\u2013208.",
            "year": 1971
        },
        {
            "authors": [
                "A. Finzi",
                "F. Pirri",
                "R. Reiter"
            ],
            "title": "Open world planning in the situation calculus",
            "venue": "Proceedings of the 7th AAAI2000, 754\u2013760. Menlo Park, CA: AAAI Press.",
            "year": 2000
        },
        {
            "authors": [
                "B. Fronh\u00f6fer"
            ],
            "title": "Situational Calculus, Linear Connection Proofs and STRIPS-like Planning: An Experimental Comparison",
            "venue": "Proceedings of the 5th International Workshop, Theorem Proving with Analytic Tableaux and Related Methods (TABLEAUX-96), volume 1071 of Lecture Notes in",
            "year": 1996
        },
        {
            "authors": [
                "B. Fronh\u00f6fer"
            ],
            "title": "Plan generation with the linear connection method",
            "venue": "Informatica (Lithuanian Academy of Sciences) 8:3\u201322.",
            "year": 1997
        },
        {
            "authors": [
                "M. Gebser",
                "B. Kaufmann",
                "J. Romero",
                "R. Otero",
                "T. Schaub",
                "P. Wanko"
            ],
            "title": "Domain-specific heuristics in answer set programming",
            "venue": "27th Conference on Artificial Intelligence AAAI-2013.",
            "year": 2013
        },
        {
            "authors": [
                "H. Geffner",
                "B. Bonet"
            ],
            "title": "A Concise Introduction to Models and Methods for Automated Planning",
            "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan & Claypool Publishers.",
            "year": 2013
        },
        {
            "authors": [
                "M. Ghallab",
                "D. Nau",
                "P. Traverso"
            ],
            "title": "Automated Planning: Theory and Practice",
            "venue": "Morgan Kaufmann.",
            "year": 2004
        },
        {
            "authors": [
                "C.C. Green"
            ],
            "title": "Application of theorem proving to problem solving",
            "venue": "Proceedings of the 1st International Joint Conference on Artificial Intelligence, Washington, DC, USA, May 7-9, 1969, 219\u2013240. William Kaufmann.",
            "year": 1969
        },
        {
            "authors": [
                "C.C. Green"
            ],
            "title": "The Application of Theorem Proving to Question-Answering Systems",
            "venue": "Ph.D. Dissertation, Stanford Univ., available at https://www.kestrel.edu/home/people/green/publications/green-thesis.pdf https://en.wikipedia.org/wiki/Cordell Green.",
            "year": 1969
        },
        {
            "authors": [
                "G. Gro\u00dfe",
                "S. H\u00f6lldobler",
                "J. Schneeberger"
            ],
            "title": "Linear deductive planning",
            "venue": "J. Log. Comput. 6(2):233\u2013262.",
            "year": 1996
        },
        {
            "authors": [
                "P. Haslum",
                "N. Lipovetzky",
                "D. Magazzeni",
                "C. Muise"
            ],
            "title": "An Introduction to the Planning Domain Definition Language",
            "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan & Claypool Publishers.",
            "year": 2019
        },
        {
            "authors": [
                "P.J. Hayes"
            ],
            "title": "Computation and deduction",
            "venue": "Mathematical Foundations of Computer Science: Proceedings of Symposium and Summer School, Strbsk\u00e9 Pleso, High Tatras, Czechoslovakia, September 3-8, 1973, 105\u2013117.",
            "year": 1973
        },
        {
            "authors": [
                "Helmert et. al."
            ],
            "title": "Fast Downward at Github",
            "venue": "https://github.com/aibasel/downward. Accessed: 2022-11-",
            "year": 2022
        },
        {
            "authors": [
                "M. Helmert"
            ],
            "title": "The Fast Downward Planning System",
            "venue": "J. Artif. Intell. Res",
            "year": 2006
        },
        {
            "authors": [
                "J. Hoffmann",
                "R. Brafman"
            ],
            "title": "Conformant planning via heuristic forward search: A new approach",
            "venue": "\u201dArtificial Intelligence\u201d 170(6\u20137):507\u2013541.",
            "year": 2006
        },
        {
            "authors": [
                "J. Hoffmann",
                "B. Nebel"
            ],
            "title": "The FF Planning System: Fast Plan Generation Through Heuristic Search",
            "venue": "J. Artif. Intell. Res. 14:253\u2013302.",
            "year": 2001
        },
        {
            "authors": [
                "S. H\u00f6lldobler",
                "J. Schneeberger"
            ],
            "title": "A new deductive approach to planning",
            "venue": "New Gener. Comput. 8(3):225\u2013244.",
            "year": 1990
        },
        {
            "authors": [
                "R. Horc\u0131\u0301k",
                "D. Fiser",
                "\u00c1. Torralba"
            ],
            "title": "Homomorphisms of lifted planning tasks: The case for delete-free relaxation heuristics",
            "venue": "In 36th AAAI Conference on Artificial Intelligence,",
            "year": 2022
        },
        {
            "authors": [
                "P. K\u00f6rner",
                "M. Leuschel",
                "J. Barbosa",
                "V.S. Costa",
                "V. Dahl",
                "M.V. Hermenegildo",
                "J.F. Morales",
                "J. Wielemaker",
                "D. Diaz",
                "S. Abreu",
                "G. Ciatto"
            ],
            "title": "50 Years of Prolog and Beyond",
            "venue": "Theory Pract. Log. Program. 22(6):776\u2013858.",
            "year": 2022
        },
        {
            "authors": [
                "R.A. Kowalski"
            ],
            "title": "The early years of logic programming",
            "venue": "Commun. ACM 31(1):38\u201343.",
            "year": 1988
        },
        {
            "authors": [
                "R. Kowalski"
            ],
            "title": "Logic programming",
            "venue": "Handbook of the History of Logic: Computational Logic, volume 9, 523\u2013569.",
            "year": 2014
        },
        {
            "authors": [
                "G. Lakemeyer",
                "H.J. Levesque"
            ],
            "title": "Evaluation-based reasoning with disjunctive information in first-order knowledge bases",
            "venue": "Proc of the 8th KR-2002, 73\u201381.",
            "year": 2002
        },
        {
            "authors": [
                "P. Lauer",
                "\u00c1. Torralba",
                "D. Fiser",
                "D. H\u00f6ller",
                "J. Wichlacz",
                "J. Hoffmann"
            ],
            "title": "Polynomial-time in PDDL input size: Making the delete relaxation feasible for lifted planning",
            "venue": "Proceedings of the 30th IJCAI 2021, Virtual Event / Montreal, Canada, 4119\u20134126. ijcai.org.",
            "year": 2021
        },
        {
            "authors": [
                "H. Levesque",
                "F. Pirri",
                "R. Reiter"
            ],
            "title": "Foundations for the situation calculus",
            "venue": "Link\u00f6ping Electronic Articles in Computer and Information Science. Available at: http://www.ep.liu.se/ea/cis/1998/018/ vol. 3, N 18.",
            "year": 1998
        },
        {
            "authors": [
                "H.J. Levesque"
            ],
            "title": "What is planning in the presence of sensing",
            "venue": "In Proceedings of the 13th National Conference on Artificial Intelligence AAAI 96,",
            "year": 1996
        },
        {
            "authors": [
                "H.J. Levesque"
            ],
            "title": "A Completeness Result for Reasoning with Incomplete First-Order KBs",
            "venue": "KR-1998, 14\u201323.",
            "year": 1998
        },
        {
            "authors": [
                "H.J. Levesque"
            ],
            "title": "Thinking as Computation: A First Course",
            "venue": "MIT Press.",
            "year": 2012
        },
        {
            "authors": [
                "J. Li",
                "Y. Liu"
            ],
            "title": "Automatic verification of liveness properties in the situation calculus",
            "venue": "The 34th AAAI Conference on Artificial Intelligence, AAAI 2020, 2886\u20132892.",
            "year": 2020
        },
        {
            "authors": [
                "V. Lifschitz"
            ],
            "title": "Answer set planning",
            "venue": "Schreye, D. D., ed., Logic Programming: The 1999 International Conference, Las Cruces, New Mexico, USA, November 29 - December 4, 1999, 23\u201337. MIT Press.",
            "year": 1999
        },
        {
            "authors": [
                "F. Lin",
                "R. Reiter"
            ],
            "title": "How to Progress a Database",
            "venue": "Artificial Intelligence 92:131\u2013167.",
            "year": 1997
        },
        {
            "authors": [
                "F. Lin"
            ],
            "title": "An ordering on subgoals for planning",
            "venue": "Ann. Math. Artif. Intell. 21(2-4):321\u2013342.",
            "year": 1997
        },
        {
            "authors": [
                "F. Lin"
            ],
            "title": "Planner R: a variant of STRIPS, available at https://cse.hkust.edu.hk/faculty/flin/papers/r.ps",
            "venue": "Technical report,",
            "year": 2001
        },
        {
            "authors": [
                "F. Lin"
            ],
            "title": "Situation calculus",
            "venue": "Handbook of Knowledge Representation, volume 3 of Foundations of Artificial Intelligence. Elsevier. 649\u2013669.",
            "year": 2008
        },
        {
            "authors": [
                "N. Lipovetzky",
                "H. Geffner"
            ],
            "title": "Best-first width search: Exploration and exploitation in classical planning",
            "venue": "31st AAAI-2017, San Francisco, USA, 3590\u20133596.",
            "year": 2017
        },
        {
            "authors": [
                "Lipovetzky",
                "Geffner."
            ],
            "title": "Best First Width Search Planner, Github repository",
            "venue": "https://github.com/nirlipo/BFWS-public. Accessed: 2022-11-17.",
            "year": 2022
        },
        {
            "authors": [
                "Y. Liu",
                "G. Lakemeyer"
            ],
            "title": "On First-Order Definability and Computability of Progression for Local-Effect Actions and Beyond",
            "venue": "21st IJCAI-2009, 860\u2013866.",
            "year": 2009
        },
        {
            "authors": [
                "Y. Liu",
                "H.J. Levesque"
            ],
            "title": "Tractable reasoning with incomplete first-order knowledge in dynamic systems with context-dependent actions",
            "venue": "19th International Joint Conference on Artificial Intelligence, IJCAI-2005, 522\u2013527.",
            "year": 2005
        },
        {
            "authors": [
                "Y. Liu"
            ],
            "title": "Tractable Reasoning in Incomplete FirstOrder Knowledge Bases",
            "venue": "Ph.D. Dissertation, Department of Computer Science, University of Toronto.",
            "year": 2005
        },
        {
            "authors": [
                "J. Lloyd"
            ],
            "title": "Foundations of Logic Programming",
            "venue": "Symbolic Computation. Springer, 2nd edition.",
            "year": 2012
        },
        {
            "authors": [
                "Z. Manna",
                "R.J. Waldinger"
            ],
            "title": "How to clear a block: A theory of plans",
            "venue": "J. Autom. Reason. 3(4):343\u2013377.",
            "year": 1987
        },
        {
            "authors": [
                "A. Masoumi",
                "M. Antoniazzi",
                "M. Soutchanski"
            ],
            "title": "Modeling Organic Chemistry and Planning Organic Synthesis",
            "venue": "Global Conference on AI, GCAI-2015, Georgia, volume 36 of EPiC Series in Computing, 176\u2013195. EasyChair.",
            "year": 2015
        },
        {
            "authors": [
                "D.A. McAllester",
                "D. Rosenblitt"
            ],
            "title": "Systematic nonlinear planning",
            "venue": "9th National Conference on Artificial Intelligence (AAAI-91), Volume 2, 634\u2013639.",
            "year": 1991
        },
        {
            "authors": [
                "J. McCarthy",
                "P. Hayes"
            ],
            "title": "Some Philosophical Problems from the Standpoint of Artificial Intelligence",
            "venue": "Meltzer, B., and Michie, D., eds., Machine Intelligence, volume 4. Edinburgh Univ. Press. 463\u2013502.",
            "year": 1969
        },
        {
            "authors": [
                "J. McCarthy"
            ],
            "title": "Situations, actions and causal laws",
            "venue": "Technical Report Memo 2, Stanford University AI Laboratory, Stanford, CA. Reprinted in Marvin Minsky, editor, Semantic Information Processing, MIT Press, 1968.",
            "year": 1963
        },
        {
            "authors": [
                "E.T. Mueller",
                "G. Sutcliffe"
            ],
            "title": "Discrete event calculus deduction using first-order automated theorem proving",
            "year": 2005
        },
        {
            "authors": [
                "X. Nguyen",
                "S. Kambhampati"
            ],
            "title": "Reviving partial order planning",
            "venue": "17th International Joint Conference on Artificial Intelligence (IJCAI-2001), 459\u2013464.",
            "year": 2001
        },
        {
            "authors": [
                "A. Parmar"
            ],
            "title": "A Declarative Implementation of Planning with Control",
            "venue": "Provetti, A., and Son, T. C., eds., Answer Set Programming, Towards Efficient and Scalable Knowledge Representation and Reasoning, Proc. of the 1st Intl. ASP\u201901 Workshop, Stanford, CA, USA, March 26-28, 2001.",
            "year": 2001
        },
        {
            "authors": [
                "A. Parmar"
            ],
            "title": "A Logical Measure of Progress for Planning",
            "venue": "18th National Conference on Artificial Intelligence AAAI-2002, 498\u2013506.",
            "year": 2002
        },
        {
            "authors": [
                "E.P.D. Pednault"
            ],
            "title": "ADL and the State-Transition Model of Action",
            "venue": "J. of Logic and Comput. 4(5):467\u2013512.",
            "year": 1994
        },
        {
            "authors": [
                "J.S. Penberthy",
                "D.S. Weld"
            ],
            "title": "UCPOP: A sound, complete, partial order planner for ADL",
            "venue": "3rd Intern. Conf. on Principles of Knowledge Representation and Reasoning (KR\u201992), 103\u2013114. Morgan Kaufmann.",
            "year": 1992
        },
        {
            "authors": [
                "R. Petrick"
            ],
            "title": "A Knowledge-Level Approach for Effective Acting, Sensing, and Planning",
            "venue": "Ph.D. Dissertation, Department of Computer Science, University of Toronto.",
            "year": 2006
        },
        {
            "authors": [
                "F. Pirri",
                "R. Reiter"
            ],
            "title": "Some contributions to the metatheory of the situation calculus",
            "venue": "Journal of the ACM (JACM) 46(3):325\u2013361.",
            "year": 1999
        },
        {
            "authors": [
                "D. Poole",
                "A. Mackworth",
                "R. Goebel"
            ],
            "title": "Computational Intelligence: A Logical Approach",
            "venue": "Oxford Un. Press.",
            "year": 1998
        },
        {
            "authors": [
                "H. Qovaizi"
            ],
            "title": "Efficient Lifted Planning with Regression-Based Heuristics, Master Thesis",
            "venue": "Technical report, TMU, Toronto Metropolitan (formerly Ryerson) University, Department of Computer Science.",
            "year": 2019
        },
        {
            "authors": [
                "B. Raphael"
            ],
            "title": "The Thinking Computer: Mind Inside Matter",
            "venue": "W.H. Freeman and Company.",
            "year": 1976
        },
        {
            "authors": [
                "R. Reiter"
            ],
            "title": "An Approach to Deductive QuestionAnswering",
            "venue": "BBN Technical Report 3649 (Accession Number : ADA046550), Bolt Beranek and Newman, Inc.",
            "year": 1977
        },
        {
            "authors": [
                "R. Reiter"
            ],
            "title": "On Closed World Data Bases",
            "venue": "Logic and Data Bases, 55\u201376. Plenum Press.",
            "year": 1978
        },
        {
            "authors": [
                "R. Reiter"
            ],
            "title": "Equality and Domain Closure in First-Order Databases",
            "venue": "J. ACM 27(2):235\u2013249.",
            "year": 1980
        },
        {
            "authors": [
                "R. Reiter"
            ],
            "title": "The Frame Problem in the Situation Calculus: A Simple Solution (sometimes) and a Completeness Result for Goal Regression",
            "venue": "Lifschitz, V., ed., AI and Mathematical Theory of Computation: Papers in Honor of John McCarthy, 359\u2013380. San Diego: Academic Press.",
            "year": 1991
        },
        {
            "authors": [
                "R. Reiter"
            ],
            "title": "Proving Properties of States in the Situation Calculus",
            "venue": "Artif. Intell. 64(2):337\u2013351.",
            "year": 1993
        },
        {
            "authors": [
                "R. Reiter"
            ],
            "title": "Knowledge in Action",
            "venue": "Logical Foundations for Specifying and Implementing Dynamical Systems. MIT, available at http://cognet.mit.edu/book/knowledge-action.",
            "year": 2001
        },
        {
            "authors": [
                "S. Richter",
                "M. Westphal"
            ],
            "title": "The LAMA planner: Guiding cost-based anytime planning with landmarks",
            "venue": "J. Artif. Intell. Res. 39:127\u2013177.",
            "year": 2010
        },
        {
            "authors": [
                "B. Ridder",
                "M. Fox"
            ],
            "title": "Heuristic evaluation based on lifted relaxed planning graphs",
            "venue": "Proc 24th ICAPS-2014, Portsmouth, New Hampshire, USA.",
            "year": 2014
        },
        {
            "authors": [
                "G. R\u00f6ger",
                "M. Helmert",
                "B. Nebel"
            ],
            "title": "On the Relative Expressiveness of ADL and Golog: The Last Piece in the Puzzle",
            "venue": "11th Intern. Confer., KR-2008, 544\u2013550.",
            "year": 2008
        },
        {
            "authors": [
                "G. R\u00f6ger"
            ],
            "title": "Planning Techniques and the Action Language Golog, Dissertation",
            "venue": "Technical report, Technische Fakult\u00e4t Albert-Ludwigs-Universit\u00e4t, Freiburg, Germany.",
            "year": 2014
        },
        {
            "authors": [
                "S. Schiffel",
                "M. Thielscher"
            ],
            "title": "Reconciling situation calculus and fluent calculus",
            "venue": "21st National Conference on Artificial Intelligence (AAAI-2006), 287\u2013292.",
            "year": 2006
        },
        {
            "authors": [
                "M. Shanahan"
            ],
            "title": "An Abductive Event Calculus Planner",
            "venue": "J. Log. Program. 44(1-3):207\u2013240.",
            "year": 2000
        },
        {
            "authors": [
                "J. Sierra-Santib\u00e1\u00f1ez"
            ],
            "title": "Declarative Formalization of Reasoning Strategies: A Case Study on Heuristic Nonlinear Planning",
            "venue": "Ann. Math. Artif. Intell. 39(1-2):61\u2013100.",
            "year": 2003
        },
        {
            "authors": [
                "J. Sierra-Santib\u00e1\u00f1ez"
            ],
            "title": "Heuristic planning: A declarative approach based on strategies for action selection",
            "venue": "Artif. Intell. 153(1-2):307\u2013337.",
            "year": 2004
        },
        {
            "authors": [
                "T.C. Son",
                "E. Pontelli",
                "M. Balduccini",
                "T. Schaub"
            ],
            "title": "Answer Set Planning: A Survey",
            "venue": "Theory and Practice of Logic Programming.",
            "year": 2022
        },
        {
            "authors": [
                "M. Soutchanski"
            ],
            "title": "Planning as Heuristic Controlled Reasoning in the Situation Calculus",
            "venue": "PROLOG source code, TMU (formerly Ryerson), Dep. of Computer Science, https://www.cs.torontomu.ca/\u223cmes/, Toronto, Canada.",
            "year": 2017
        },
        {
            "authors": [
                "L. Sterling",
                "E. Shapiro"
            ],
            "title": "The Art of Prolog: Advanced Programming Techniques",
            "venue": "MIT Press, 2nd edition.",
            "year": 1994
        },
        {
            "authors": [
                "S.T. To",
                "T.C. Son",
                "E. Pontelli"
            ],
            "title": "A Generic Approach to Planning in the Presence of Incomplete Information: Theory and implementation",
            "venue": "Artif. Intell. 227:1\u201351.",
            "year": 2015
        },
        {
            "authors": [
                "M.H. van Emden",
                "R.A. Kowalski"
            ],
            "title": "The Semantics of Predicate Logic as a Programming Language",
            "venue": "J. ACM 23(4):733\u2013742",
            "year": 1976
        },
        {
            "authors": [
                "R. Waldinger"
            ],
            "title": "Achieving Several Goals Simultaneously",
            "venue": "Machine Intelligence, volume 8, 94\u2013136. Edinburgh, Scotland: Ellis Horwood.",
            "year": 1977
        },
        {
            "authors": [
                "D.S. Weld"
            ],
            "title": "Recent advances in AI planning",
            "venue": "AI Mag. 20(2):93\u2013123.",
            "year": 1999
        },
        {
            "authors": [
                "H.L.S. Younes",
                "R.G. Simmons"
            ],
            "title": "VHPOP: versatile heuristic partial order planner",
            "venue": "J. Artif. Intell. Res. 20:405\u2013430.",
            "year": 2003
        },
        {
            "authors": [
                "N. Zhou",
                "R. Bart\u00e1k",
                "A. Dovier"
            ],
            "title": "Planning as tabled logic programming",
            "venue": "Theory Pract. Log. Program. 15(4-5):543\u2013558.",
            "year": 2015
        }
    ],
    "sections": [
        {
            "text": "ar X\niv :2\n30 3.\n13 63\n8v 3\n[ cs\n.A I]\n2 0\nJu n\n20 23"
        },
        {
            "heading": "1 Introduction",
            "text": "From the very beginning of Artificial Intelligence (AI), it was recognized that the planning problems at the common sense level can be conveniently formulated in situation calculus (SC) as the entailment problem in predicate logic. (McCarthy 1963). In 1969, Green proposed to solve the (planning) problems using resolution-based theorem proving in situation calculus (Green 1969a; Green 1969b). However, because at that time the resolution algorithms were very inefficient, the famous frame problem was not yet solved even for direct effects, and because he did not anticipate any control over unrestricted resolution, his computer program did not work well, and there was no immediate fix. This is discussed in many publications, e.g., see (Hayes 1973; Raphael 1976; Kowalski 1988; Weld 1999; Kowalski 2014).\nSubsequent planning research moved away from theorem proving in SC to specialized non-logical representations such as STRIPS (Fikes and Nilsson 1971) and ADL (Pednault 1994). In modern automated (common-sense) AI planning, the instances of the planning problem are usually solved with domainindependent heuristics (Geffner and Bonet 2013; Ghallab, Nau, and Traverso 2004) in a single model of a discrete transition system using modelbased approaches. Meanwhile, the frame problem for direct effects of actions has been solved for a large class of action theories (Reiter 1991; Reiter 2001), and the SLD resolution algorithms were efficiently implemented, helping to develop PROLOG (Colmerauer 1990; Colmerauer and Roussel 1996; van Emden and Kowalski 1976; Cohen 2001; Lloyd 2012; Ko\u0308rner et al. 2022).\nThere were several proposals to continue Green\u2019s planning as theorem proving approach, e.g., (Bibel 1986; Bibel 1998; Manna and Waldinger 1987; Ho\u0308lldobler and Schneeberger 1990; Biundo 1994; Fronho\u0308fer 1996; Fronho\u0308fer 1997; Levesque 1996; Lin 1997; Mueller and Sutcliffe 2005; Schiffel and Thielscher 2006; Li and Liu 2020), and implement the automated deterministic planners in PROLOG e.g., see (Shanahan 2000; Finzi, Pirri, and Reiter 2000; Lin 2001; Zhou, Barta\u0301k, and Dovier 2015; Batusov 2014; Qovaizi 2019), or compute plans using the Answer Set Programming, e.g., see (Lifschitz 1999; Son et al. 2022), but they were not supported with efficient implementations using domain independent heuristics. Despite this history, there are potential advantages to theorem-proving based planning over the model-based approach, e.g., the former can operate even if there are many different infinite logical models (Enderton 2001) for an application domain, or if an initial state theory is incomplete. Model-based approaches rely on both the Closed World Assumption (CWA) and the Domain Closure Assumption (DCA) (Reiter 1977; Reiter 1978; Reiter 1980). The main reason for relying on the (unrealistic) DCA in model-based approaches is the need for instantiating the transition system before search starts. But the DCA can be avoided in a theorem-proving based forward search planner using progression in local effect SC action theories (Liu and Lakemeyer 2009) with an incomplete initial theory (i.e. no CWA) (Lakemeyer and Levesque 2002).\nIn this paper, we revisit the deductive approach to planning in SC despite a common incorrect belief that efficient deductive planning in SC is impossible. In particular, we show how to design a new SC-based Theorem Proving Lifted Heuristic (TPLH) planner that builds on (Soutchanski 2017). It is \u201clifted\u201d in a sense that it works with action schemata at run-time, but not with actions instantiated before planning starts. Our planner does forward search over a situation tree, in contrast to modern modelbased planners that usually search over a state space. Moreover, it makes use of a domain independent heuristic. To the best of our knowledge this is the first ever deductive planner to incorporate both of these features. This is our main contribution. Essentially, ourA\u2217 planner provides heuristic control over resolution, but in (Green 1969a; Green 1969b) control was not anticipated. The current version of our planner works with a domain independent delete relaxation heuristic inspired by the FF planner (Hoffmann and Nebel 2001; Bryce and Kambhampati 2007), but any other domain independent heuristics can be implemented as well.\nWe start with a review of SC, then we explain how\nour TPLH planner can be developed in SC from the first principles as a search over the situation tree. We did experimental comparison with the state-of-the-art (SOTA) planners. We compare the performance of our TPLH planner, the recent version of FastDownward (FD) planner (Helmert 2006; Richter and Westphal 2010; Helmert et. al. 2022) and Best First Width Search (BFWS) planner (Lipovetzky and Geffner 2017; Lipovetzky and Geffner 2022) on a set of the usual PDDL (Haslum et al. 2019) benchmarks. We report the experimental results, discuss all known directly related previous work, future research directions and then conclude."
        },
        {
            "heading": "2 Background",
            "text": "The situation calculus (SC) is a logical approach to representation and reasoning about actions and their effects. It was introduced in (McCarthy 1963; McCarthy and Hayes 1969) to capture common sense reasoning about the actions and events that can change properties of the world and mental states of the agents. SC was refined by Reiter (Reiter 1991; Reiter 2001) who introduced the Basic Action Theories (BAT). Unlike the notion of state that is common in modelbased planning, SC relies on situation, namely a sequence of actions, which is a concise symbolic representation and a convenient proxy for the state in the cases when all actions are deterministic (Levesque, Pirri, and Reiter 1998; Lin 2008). We use variables s, s\u2032, s1, s2 for situations, variables a, a\u2032 for actions, and x\u0304, y\u0304 for tuples of object variables. The constant S0 represents the initial situation, and the successor function do : action \u00d7 situation 7\u2192 situation, e.g., do(a, s), denotes situation that results from doing action a in previous situation s. The terms \u03c3, \u03c3\u2032 denote situation terms, and Ai(x\u0304), or \u03b1, \u03b11, \u03b12, \u03b1\n\u2032, represent action functions and action terms, respectively. The shorthand do([\u03b11, \u00b7 \u00b7 \u00b7 , \u03b1n], S0)) represents situation do(\u03b1n, do(\u00b7 \u00b7 \u00b7 , do(\u03b11, S0) \u00b7 \u00b7 \u00b7 )) resulting from execution of actions \u03b11, \u00b7 \u00b7 \u00b7 , \u03b1n in S0. The relation \u03c3 \u228f \u03c3\u2032 between situations terms \u03c3 and \u03c3\u2032 means that \u03c3 is an initial sub-sequence of \u03c3\u2032. Any predicate symbol F (x\u0304, s) with exactly one situation argument s and possibly a tuple of object arguments x\u0304 is called a (relational) fluent. Without loss of generality, we consider only relational fluents in this paper, but the language of SC can also include functional fluents. A first order logic (FO) formula \u03c8(s) composed from fluents, equalities and situation independent predicates is called uniform in s if all fluents in the formula \u03c8 mention only situation s as their situation argument, and there are no quantifiers over s in the formula.\nThe basic action theories (BAT)D is the conjunction of the following classes of axiomsD=\u03a3\u2227Dss\u2227Dap\u2227Duna\u2227DS0 We use examples from the Blocks World (BW) application domain (Reiter 2001; Cook and Liu 2003). For brevity, all x\u0304, a, s variables are assumed \u2200-quantified at the outer level. Dap is a set of action precondition axioms of the form \u2200s\u2200x\u0304. poss(A(x\u0304), s)\u2194 \u03a0A(x\u0304, s), where poss(a, s) is a new predicate symbol meaning that an action a is possible in situation s, \u03a0A(x\u0304, s) is a formula uniform in s, and A is an n-ary action function. In most planning benchmarks, the formula \u03a0A is simply\na conjunction of fluent literals and possibly negations of equality. We consider a version of BW, where there are three actions: move-b-to-b(x, y, z), move a block x from a block y to another block z, move-b-to-t(x, y), move a block x from a block y to the table, move-t-to-b(x, z), move a block x from the table to a block z. poss(move-b-to-b(x,y,z), s)\u2194 clear(x,s) \u2227 clear(z,s)\u2227\non(x, y, s) \u2227 x 6= z. poss(move-b-to-t(x, y), s)\u2194 clear(x, s) \u2227 on(x, y, s). poss(move-t-to-b(x, z), s)\u2194 ontable(x, s)\u2227\nclear(x, s) \u2227 clear(z, s).\nLet Dss be a set of the successor state axioms (SSA): F (x\u0304, do(a,s))\u2194 \u03b3+F (x\u0304, a,s) \u2228 F (x\u0304, s) \u2227 \u00ac\u03b3 \u2212 F (x\u0304, a,s),\nwhere x\u0304 is a tuple of object arguments of the fluent F , and each of the \u03b3F \u2019s is a disjunction of uniform formulas [\u2203z\u0304].a = A(u\u0304) \u2227 \u03c6(x\u0304, z\u0304, s),where A(u\u0304) is an action with a tuple u\u0304 of object arguments, \u03c6(x\u0304, z\u0304, s) is a context condition, and z\u0304 \u2286 u\u0304 are optional object arguments. It may be that x\u0304 \u2282 u\u0304. If u\u0304 in an action function A(u\u0304) does not include any z variables, then there is no optional \u2203z\u0304 quantifier. If not all variables from x\u0304 are included in u\u0304, then it is said that A(u\u0304) has a global effect, since the fluent F has at least one \u2200-quantified object argument x not included in u\u0304. Therefore, F experiences changes beyond the objects explicitly named in A(u\u0304). For example, if a truck drives from one location to another, driving action does not mention any boxes loaded on the truck, then the location of all loaded boxes change. When the tuple of action arguments u\u0304 contains all fluent arguments x\u0304, and possibly contains z\u0304, we say that the action A(u\u0304) has a local effect. A BAT is called a local-effect BAT if all of its actions have only local effects. In a local-effect action theory, each action can change values of fluents only for objects explicitly named as arguments of the action. In our implementation, we focus on a simple class of local-effect BAT, where SSAs have no context conditions. However, since (Pednault 1994), it is common to consider a broader class of SSAs with conditional effects that depend on contexts \u03c6(x\u0304, z\u0304, s). Often, contexts are quantifier-free formulas, and then SSA is called essentially quantifier-free. In BW, we consider fluents clear(x, s), block x has no blocks on top of it, on(x, y, s), block x is on block y in situation s, ontable(x, s), block x is on the table is s. The following SSAs are local-effect (with implicit outside \u2200x, \u2200y, \u2200a, \u2200s). clear(x, do(a, s))\u2194 \u2203y,z(a=move-b-to-b(y,x,z))\u2228\u2203y(a=move-b-to-t(y,x))\u2228\nclear(x, s) \u2227 \u00ac\u2203y, z(a=move-b-to-b(y, z, x))\u2227 \u00ac\u2203y(a=move-t-to-b(y, x)),\non(x, y, do(a, s))\u2194 \u2203z(a=move-b-to-b(x, z, y))\u2228\u2203y(a=move-t-to-b(x, y)\u2228\non(x, y, s) \u2227 \u00ac\u2203z(a=move-b-to-b(x, y, z))\u2227 \u00ac\u2203y(a=move-b-to-t(x, y)),\nontable(x, do(a, s))\u2194 \u2203y(a=move-b-to-t(x, y))\u2228 ontable(x, s) \u2227 \u00ac\u2203y(a=move-t-to-b(x, y)).\nDuna is a finite set of unique name axioms (UNA) for actions and named objects. For example,\nmove-b-to-b(x, y, z) 6= move-b-to-t(x, y), move-b-to-t(x, y)=move-b-to-b(x\u2032, y\u2032)\u2192 x=x\u2032 \u2227 y=y\u2032.\nDS0 is a set of FO formulas whose only situation term is S0. It specifies the values of fluents in the initial state. It describes all the (static) facts that are not changeable by actions. Also, it includes domain closure for actions such as \u2200a. \u2203x, y, z(a=move-b-to-b(x, y, z)) \u2228\n\u2203x, y(a=move-b-to-t(x, y))\u2228 \u2203x, y(a=move-t-to-b(x, y)).\nIn particular, it may include axioms for domain specific constraints (state axioms), e.g., \u2200x\u2200y(on(x, y, S0)\u2192 \u00acon(y, x, S0))\u2227 \u2200x\u2200y\u2200z(on(y, x, S0) \u2227 on(z, x, S0)\u2192 y=z)\u2227 \u2200x\u2200y\u2200z(on(x, y, S0) \u2227 on(x, z, S0)\u2192 y=z). Notice we did not include any state constraint (axioms uniform in s) into BAT, e.g., \u2200x\u2200y\u2200z\u2200s. on(y, x, s) \u2227 on(z, x, s) \u2192 y = z. As stated in (Reiter 2001), they are entailed from the similar sentences about S0 for any situation that includes only consecutively possible actions.\nFinally, the foundational axioms \u03a3 are generalization of axioms for a single successor function (see Section 3.1 in (Enderton 2001)) since SC has a family of successor functions do(\u00b7, s), and each situation may have multiple successors. As argued in (Enderton 2001), the complete FO theory of single successor has countably many axioms, but it has non-standard models. To eliminate undesirable non-standard models for situations, by analogy with Peano second-order (SO) axioms for non-negative integers, where the number 0 is similar to S0, (Reiter 1993) proposed the following axioms for situations (with implicit \u2200s1, a1, s2, a2, s, a, s\u2032).\ndo(a1, s1)=do(a2, s2)\u2192 a1=a2 \u2227 s1=s2\n\u00ac(s \u228f S0) s \u228f do(a, s\u2032)\u2194 s \u2291 s\u2032, where s \u2291 s\u2032 def = (s \u228f s\u2032 \u2228 s=s\u2032) \u2200P. ( P (S0) \u2227 \u2200a\u2200s(P (s)\u2192 P (do(a, s))) ) \u2192 \u2200s(P (s))\nThe last second order axiom limits the sort situation to the smallest set containing S0 that is closed under the application of do to an action and a situation. These axioms say that the set of situations is really a tree: there are no cycles, no merging. These foundational axioms \u03a3 are domain independent. Since situations are finite sequences of actions, they can be implemented as lists in PROLOG, e.g., S0 is like [ ], and do(A,S) adds an action A to the front of a list representing S, i.e. [A|S]. Therefore, in PROLOG, all situation terms implicitly satisfy the above foundational axioms (Reiter 2001) and no SO reasoning is required.\nIt is often convenient to consider only executable (legal) situations: these are action histories in which it is actually possible to perform the actions one after the other. s < s\u2032 def = s\u228f s\u2032\u2227\u2200a\u2200s\u2217(s \u228f do(a, s\u2217) \u2291 s\u2032 \u2192 Poss(a, s\u2217)) where s < s\u2032 means that s is an initial sub-sequence of s\u2032 and all intermediate actions are possible. Subsequently, we use the following abbreviations: s \u2264 s\u2032 def = (s < s\u2032)\u2228 s=s\u2032. Also, executable(s) def = S0 \u2264 s. (Reiter 2001) formulates\nTheorem 1. executable(do([\u03b11, \u00b7 \u00b7 \u00b7 , \u03b1n], S0))\u2194 poss(\u03b11, S0) \u2227 \u2227n i=2 poss(\u03b1i, do([\u03b11, \u00b7 \u00b7 \u00b7 , \u03b1i\u22121], S0)). Theorem 2. (Pirri and Reiter 1999) A basic action theory D=\u03a3\u2227Dss\u2227Dap\u2227Duna\u2227DS0 is satisfiable iff Duna\u2227DS0 is satisfiable.\nTheorem 2 states that no SO axioms \u03a3 are needed to check for satisfiability of BAT D. This result is the key to tractability of D, since Duna \u2227 DS0 are sentences in FOL.\nThere are two main reasoning mechanisms in SC. One of them relies on the regression operator (Waldinger 1977; Reiter 1991) that reduces reasoning about a query formula uniform in a given situation \u03c3 to reasoning about regression of the formula wrtDS0 . Another mechanism called progression (Lin and Reiter 1997) is responsible for reasoning forward, where after each action \u03b1 the initial theory DS0 is updated to a new theory DS\u03b1 . In this paper, we focus on progression in a local effect BAT, where SSAs are essentially quantifier free, as defined before. For a local effect BAT, (Liu and Lakemeyer 2009) show that in a general case the size of DS\u03b1 can increase in comparison to the size of DS0 . For this reason, the paper (Liu and Lakemeyer 2009) considers a special case of a proper+ DS0 . The proper + theories are proposed in (Lakemeyer and Levesque 2002) as a generalization of a proper KB (Levesque 1998), which is equivalent to a possibly infinite consistent set of ground literals. Let e be an ewff, a well-formed formula whose only predicate is equality, and let a clause d be a disjunction of fluent literals. Then, the universal closure \u2200(e \u2283 d) is called a guarded clause, or a proper+-formula. An initial theory is in a proper+ form, if it is a finite non-empty set of guarded clauses supplemented with the axioms of equality and the set of UNA for constants. The proper+ initial theories generalize databases by allowing incomplete disjunctive knowledge about some of the named elements of the domain (Lakemeyer and Levesque 2002). It turns out, that for a local effect BAT with essentially quantifier free contexts, if an initial theory DS\u03b1 is in proper\n+ form, then its progression DS\u03b1 can be computed efficiently, namely in linear time wrt the size of DS0 (Liu and Lakemeyer 2009). Therefore, progression can be consecutively computed for arbitrarily long sequences of actions.\nThe Domain Closure Assumption (DCA) for objects (Reiter 1977; Reiter 1980) means that the domain of interest is finite, the names of all objects in DS0 are explicitly given as a set of constantsC1, C2, . . . , CK , and for any object variable x it holds that \u2200x(x = C1 \u2228 x = C2 \u2228 . . . \u2228 x = CK) According to the Closed World Assumption (CWA), an initial theory DS0 is conjunction of ground fluents, and all fluents not mentioned inDS0 are assumed by default to be false (Reiter 1978; Reiter 1980). According to an opposite, Open World Assumption (OWA), an initial theory DS0 can have a more general form, e.g., it can be in a proper+ form. As proved in Theorem 4.1 in (Reiter 1980), in the case of a data base augmented with the axioms of equality, the queries that include only \u2203-quantifiers over object variables can be answered without DCA. Similar results can be proved for a DS0 in a proper\n+ form, assuming there are no object function symbols other than constants. From this fact, the above mentioned results, and the results from (Liu 2005), it follows that in the case of a BAT where DS0 is in a proper\n+ form, the context conditions in SSAs are essentially quantifier free, where the preconditions \u03a0A(x\u0304, s) in Dap include only \u2203- quantifiers over object variables, the goal formula includes only \u2203-quantifiers over object variables, and all sets of ax-\nioms use only a bounded number of variables, the lengthbounded planning problem can be solved without DCA over the object variables (and without CWA). In the next section, we formulate the (bounded) planning problem for BATs and show a planner can be developed from the first principles."
        },
        {
            "heading": "3 Bounded Lifted Planning with BATs",
            "text": "Let G(s) be a goal formula that is uniform in s and has no other free variables. Let Length(s) be a number of actions in situation s, i.e.,Length(do([\u03b11, \u00b7 \u00b7 \u00b7 , \u03b1N ], S0))=N and Length(S0)=0. Following (Reiter 2001), the bounded planning problem can be formulated in SC as\nD |= \u2203s. Length(s) \u2264 N \u2227 executable(s)\u2227G(s), (1)\nwhere N \u2265 0 is an upper bound. From the Theorem 1, definition of executable(s) and the foundational axioms \u03a3, it follows this can be equivalently reformulated for N > 2 as D |= G(S0) \u2228 \u2203a1 ( poss(a1, S0) \u2227G(do(a1, S0)) )\n\u2228 \u2203a1\u2203a2 ( S0 < do([a1, a2], S0)\u2227 (\nG(do([a1, a2], S0)) \u2228 \u2203s(do([a1, a2], S0) \u2264 s \u2227 Length(s)\u2264N \u2227G(s)) ) )\n. This simply means that if there exists a situation term that solves the planning problem (1), then either it is S0, or for some action a1 that is possible in S0, it is do(a1, S0), or for some actions a1 and a2 that are consecutively possible from S0, either G(do([a1, a2], S0)) holds, or there exists situation s that is executable from do([a1, a2], S0) such that its total length is less than or equal to N and the formula G(s) holds in s. Suppose that a BAT D has k different action functions A1(x\u03041), . . . , Ak(x\u0304k). Then, according to the domain closure axioms for actions, any formulas \u2203a\u03c8(do(a, S0)) and \u2203a\u2203a\u2032 \u03c8(do(a\u2032, do(a, S0))) are respectively equivalent to \u2228k\ni=1 \u2203x\u0304i\u03c8 ( do(Ai(x\u0304i), S0) )\nand \u2228k j=1\u2203x\u0304j \u2228k i=1\u2203x\u0304i\u03c8 ( do(Aj(x\u0304j),do(Ai(x\u0304i), S0)) ) . Therefore:\nTheorem 3. A ground situation term do([\u03b11,\u00b7 \u00b7 \u00b7, \u03b1n], S0), n \u2264 N is a solution to problem (1) iff for some sequence (i1, \u00b7 \u00b7 \u00b7 , in) of action indices, 1 \u2264 ij \u2264 k, there are ground substitutions for action arguments that unify Ai1(x\u0304i1 ) with \u03b11,. . . , Ain(x\u0304in) with \u03b1n, and for these substitutions both \u2203x\u0304in \u00b7 \u00b7 \u00b7 \u2203x\u0304i1G ( do([Ai1 (x\u0304i1),\u00b7 \u00b7 \u00b7, Ain(x\u0304in)], S0) ) and the formula \u2203x\u0304in \u00b7 \u00b7 \u00b7\u2203x\u0304i1S0 \u2264 do([Ai1(x\u0304i1 ),\u00b7 \u00b7 \u00b7, Ain(x\u0304in)],S0) are entailed from a BAT D.\nThis theorem is the first key observation that helps design a lifted planner based on SC. The planner has to search over executable sequences of actions on a situation tree. Note that the state space and states themselves remain implicit, since situations serve as symbolic proxies to states. Whenever a sequence of i ground actions determined by search results in a situation do([\u03b11, \u00b7 \u00b7 \u00b7 , \u03b1i], S0)), to find the next action the planner must check among the actions A1(x\u03041), . . . , Ak(x\u0304k) for which of the values of their object arguments these actions are possible in do([\u03b11, \u00b7 \u00b7 \u00b7 , \u03b1i], S0)). Since this computation is done at run-time, but not before the planner starts searching for actions, the SC-based planner is naturally lifted, no extra efforts are required.\nThe second key observation is that an efficient deductive planner needs control that helps select for each situation the most promising next possible action to execute. This control\ncan be provided by an A\u2217 algorithm that relies on a domain independent heuristic function. In the next section, we show how our heuristic deductive planner can be implemented in PROLOG. This implementation requires both DCA and CWA. A more general implementation is left to future work."
        },
        {
            "heading": "4 Implementation",
            "text": "Our SC-based TPLH planner is implemented in PROLOG following the two key observations mentioned in the previous section. The planner is driven by theorem proving that is controlled by a version of A\u2217 search for a shortest sequence of actions that satisfies (1). The distinctive feature of TPLH is that it does forward search over the situation tree from S0. Since each search node is a unique situation, the previously visited nodes cannot be reached by search again, and there is no need to keep them in memory. Moreover, frontier nodes cannot be reached along different paths since each situation represents a unique path on the situation tree. Therefore, there is no need to check whether new neighbors to be explored have been already included in the frontier. For simplicity, the cost of every action is considered to be 1, and the cost of a path to a node is simply the length of situation representing the node. This search terminates as soon as it finds a ground situation S that satisfies a goal G(S). In Algorithm 1, a plan is a situation that is represented as a list of actions from S0, while S0 is represented as the empty list.\nThe main advantage of this design is that the frontier stored in a priority queue consists of situations and their f -values1 computed as the sum of situation length and a heuristic estimate. Therefore, situations serve as convenient symbolic proxies for states. As usual, a state corresponding to situation s is a set of fluents that are true in s. However, in hard-to-ground domains, each state can be very large, and storing all intermediate states can exhaust all memory. This issue was demonstrated on realistic domains such as Organic Synthesis (Masoumi, Antoniazzi, and Soutchanski 2015). Moreover, in the case of planning in physical space and real time, the state space is infinite, but a deductive planner can still search (without ad-hoc discretizations of space and time) over finite sequences of actions according to semantics in (Batusov and Soutchanski 2019).\nIn Algorithm 1, the sub-procedure InitialState(DS0) on Line 5 takes the initial theory as its input, and computes the initial state under the usual DCA and CWA. (Note this is a limitation of the current implementation, but not of the TPLH approach in general.) We store this initial state Init in a specialized data structure that facilitates computing progression efficiently. On the Line 7, the algorithm extracts the next most promising situation S from the frontier. Then,\n1This is a term from the area of heuristic search, see (Geffner and Bonet 2013; Ghallab, Nau, and Traverso 2004). There are plan costs g(s) (the number of actions in s), and there are heuristic estimates (h values) of the number of actions remaining before the goal can be reached. The total priority of each search node (in our case it is a situation s) is estimated as f(s) = g(s)+h(s). A smaller total effort f(s) indicates a more promising successor situation s.\nAlgorithm 1: A\u2217 search over situation tree to find a plan\nInput: (D, G) - a BAT D and a goal formula G Input: H - Heuristic function Input: N - Upper-bound on plan length Output: S that satisfies (1) \u22b2 Plan is the list of actions in S\n1: procedure PLAN(D, G,N,H, S) 2: PriorityQueue\u2190 \u2205 \u22b2 Initialize PQ 3: S0.V al\u2190 (N + 1) 4: PriorityQueue.insert(S0, S0.V al) 5: Init\u2190 InitialState(DS0) \u22b2 Initialize state 6: while not PriorityQueue.empty() do 7: S \u2190 PriorityQueue.remove() 8: Now \u2190 Progress(Init, S) \u22b2 Current state 9: if Satisfy(Now,G) then 10: return S \u22b2 Found list of actions 11: end if 12: Acts\u2190 FindAllPossibleActions(Now) 13: if Acts == \u2205 then 14: continue \u22b2 No actions are possible in S 15: end if 16: for Ai \u2208 Acts do 17: Sn \u2190 do(Ai, S) \u22b2 Sn is next situation 18: St\u2190 Progress(Now,Ai) \u22b2 Next state 19: if Length(S) \u2265 N then 20: continue \u22b2 Sn exceeds upper bound 21: else d\u2190 N\u2212Length(S) \u22b2 d is depth bound 22: end if 23: Sn.V al \u2190 Length(Sn)+H(D,G,d,Sn,St) 24: PriorityQueue.insert(Sn, Sn.V al) 25: end for 26: end while 27: return False \u22b2 No plan for bound N 28: end procedure\non Line 8, it computes progression Now of the initial state using the actions mentioned in S. This is rather straightforward update of the initial state Init that is facilitated by our data structure. Note that in the case of incompleteDS0 , and a local effect BAT, one would need a more sophisticated algorithm for progression, as explained before. On Line 9, there is a check whether the goal formulaG is satisfied in the current state Now. If it is, then S is returned as a plan. If not, then on Line 12, the algorithm finds all actions that are possible from the current state using the precondition axioms. In fact, the sub-procedure FindAllPossibleActions is using preconditions to ground all action functions from the given BAT in the current state. Since actions are grounded at run-time, TPLH is a lifted planner by design. If there are no actions possible from Now, then the algorithm proceeds to the next situation from the frontier. Otherwise, for each possible ground action Ai, it constructs the next situation Sn = do(Ai, S), and if its length does not exceed the upper boundN , it computes the positive integer number d on Line 21 as N\u2212Length(S). This bound d is provided as an input to the heuristic function H(D, G, d, Sn, St) that does limited look-ahead up to depth d from St to evaluate situation Sn. On Line 24, Sn and its f -value Sn.V al are inserted into\nAlgorithm 2: GraphPlan heuristic with delete relaxation\nInput: (D, G) - BAT D and a goal formula G Input: d \u2265 1 - Look-ahead bound for the heuristic algorithm Input: Sn, L - The current situation and its length Input: St - The current state Output: Score - A heuristic estimate for the given situation\n1: procedure H(D, G, d, Sn, St) 2: Depth\u2190 0 3: PG\u2190 \u3008Sn, St\u3009 \u22b2 Initialize Planning Graph 4: while not Satisfy(St,G) and Depth \u2264 d do 5: {ActSet} \u2190 FindAllPossibleActions(St) 6: NewActs\u2190 Select relevant actions fromActSet 7: St\u2190 ProgressRelaxed(St,NewActs) 8: \u22b2 Add all new positive effects NewEffs to the state 9: NextLayer\u2190 \u3008NewEffs,NewActs, St\u3009\n10: \u22b2 Record actions added, their effects, the current state 11: PG.extend(NextLayer) 12: Depth\u2190 Depth+ 1 13: end while 14: Goal \u2190 Convert G into a set of literals 15: if Depth > d then return (L+ d) \u22b2 Penalty 16: else return Reachability(D, Goal, PG) 17: end if 18: end procedure\nthe frontier, and then search continues until the algorithm finds a plan, or it explores all situations with at most N actions. The for-loop, Lines 16-24, makes sure that all possible successors of S are constructed, evaluated and inserted into the frontier. This is important to guarantee completeness of Algorithm 1. The bound N \u2265 0 makes sure that search will always terminate in a finite domain, since there are finitely many ground situations with length less than or equal to N , and in the worst case, all of them will be explored. However, due to this upper bound, search may terminate prematurely, i.e., without reaching a goal state, if the shortest plan includes more than N action. Consequently, this planner is complete only if the bound N is greater than or equal to the length of a shortest plan. Obviously, the planner is sound.\nNote that Progress(Init, S) computes afresh the current state from the given initial state and the list of actions in S. If the computed state Now does not satisfy a goal formula, it is not preserved after computing heuristic value from Now. Only successor situations are retained in the frontier, but not their corresponding states. This is an important contribution of TPLH approach. The previous planning algorithms usually retained states, but not situations in their frontiers: see Discussion section for details. Only the initial state Init remains in memory, but all other intermediate states are recomputed from Init when needed. Therefore, TPLH trades speed for memory. Since the memory footprint of TPLH is smaller than it is for alternative implementations, our approach is suitable for planning in hard to ground domains.\nComputing the heuristic function is done in two stages, with usual delete relaxation: Algorithm 2. First, a planning graph is built from the current state, layer-by-layer until all goal literals are satisfied. Supporting actions are then found\nAlgorithm 3: Reachability score for a set of goal literals\nInput: (D, G) - A BAT D and a set G of goal literals Input: PG - A planning graph, initialized to \u3008Sn, St\u3009 Output: V - A heuristic estimate for achieving G\n1: procedure Reachability(D, G, PG) 2: if PG == \u3008Sn, St\u3009 then return 0 3: else \u3008Effs,Acts,St\u3009\u2190 PG.removeOuterLayer 4: end if 5: CurrGoals\u2190G\u2229Effs \u22b2 The set of achieved goals 6: NewGoals\u2190 \u2205 \u22b2 To collect preconditions 7: BestSupport\u2190 \u2205 \u22b2 Easiest causes for CurrGoals 8: for g \u2208 CurrGoals do 9: Relev\u2190{actions fromActswith g as add effect} 10: for a \u2208 Relev do 11: a.Pre\u2190 {the set of preconditions of a} 12: a.Estimate\u2190 Reachability(D,P re,PG) 13: end for 14: BestAct\u2190 ArgMin {a.Estimate overRelev} 15: \u22b2 Find the action from Relev with minimum estimate 16: NewGoals\u2190 NewGoals \u222aBestAct.Pre 17: BestSupport\u2190 BestSupport \u222aBestAct 18: end for 19: RemainGoals\u2190 G\u2212 CurrGoals 20: NextGoals\u2190 RemainGoals \u222aNewGoals 21: C1 \u2190 Count(BestSupport) \u22b2 i.e. # of best actions 22: C2 \u2190 Reachability(D, NextGoals, PG) 23: return C1 + C2 24: end procedure\nfor the goal literals, going backwards through the graph.\nThe planning graph is initialized to the current situation and state. At each step in building the planning graph, all possible actions for the current state are found, and then filtered so that only those actions with one or more new (positive) add effects not in the current state are kept. The state is updated using relaxed progression to incorporate their new add effects. These \u2018relevant actions\u2019, their new add effects and the updated state are inserted into the next layer of the planning graph, and the process is repeated.\nOnce all goal literals are satisfied, the most recent layer of the planning graph is examined. For each of the new add effects in this layer belonging to the set of goal literals, all relevant actions from the layer which achieve the effect are selected. These are referred to as the \u2018supporting actions\u2019 for the goal literal. For each supporting action, a \u2018reachability\u2019 score is recursively computed using its preconditions as the new goal literals. The easiest action whose preconditions have the lowest reachability is considered the \u2018best supporting action\u2019. Thus, our reachability score represents the estimated cost of achieving a set of literals. If all literals are satisfied in the initial layer of PG, then the set\u2019s reachability is 0. Otherwise, its reachability is equal to the reachability of the remaining goals and preconditions for the set of the easiest actions, plus the number of best support actions.\nExperimental Results To evaluate our implementation experimentally, we run our planner on several STRIPS benchmarks, where preconditions of actions are conjunctions of fluents (though they can include negations of equality between variables or constants), the SSAs have no context conditions, and the goal formula is a conjunction of ground fluents.\nTests were run separately using the TPLH, FD, and BFWS planners. TPLH and FD used the A\u2217 algorithm to prioritize shorter plan lengths, whereas BFWS used a default greedy search algorithm. Both TPLH and FD did eager search with FF heuristic. All testing was done on a desktop with an Intel(R) Core(TM) i7-3770 CPU running at 3.40GHz. Tests measured total time spent, plan length, and number of states (situations) visited. Comparisons are made based on the average ratio of the values for TPLH to those of FD and BFWS across all problems in a given domain. The TPLH planner, domain files and problem instances have been loaded, compiled and run within ECLiPSe Constraint Logic Programming System, Version 7.0 #63 (x86 64 linux), released on April 24, 2022. In comparison, the FD and BFWS were compiled into executable files. This difference should be taken into account while reviewing the results below. For example, as shown in Table 1, on BW, TPLH spent an order of 102 more time per plan step than FD, and an order of 104 more time per plan step than BFWS. Recall that BFWS does default greedy best first search, and this is why it takes less time than FD that does A\u2217 eager search with FF heuristic.\nDomains and Problem Generation\nTesting was done over randomly generated problems for 8 different popular domains that represent well the variety of planning problems from the competitions. These domains were Barman, BlocksWorld, ChildSnack, Depot, FreeCell, Grippers, Logistics, and Miconic. In addition, testing was also done on 10 pre-existing problems belonging to the PipesWorld domain. All domains are in STRIPS, extended to include negated equalities and object typing. For simplicity, the Barman domain was modified to remove action costs.\nRoughly 100 problems with varying numbers of objects were generated for each of the specified domains, using publicly available PDDL generators. All PDDL domains and generated instances files were automatically translated from PDDL to PROLOG using our program that constructs a hash table based representation of an initial theory. The TPLH planner was run over every problem using a 30min timeout limit, and a 50 MB global stack size limit. Problems for which the planner timed out were discarded, as were problems with 0-step solutions (i.e., where the initial state satisfied the goal state). The number of kept instances for each domain is shown in parentheses after the domain name in Table 1. The TPLH planner was given the upper bound N = 100 for all planning instances that usually had short solutions, e.g., 20 steps or less. Recall N is used to guarantee completeness of TPLH, but it has little effect in this set of experiments. Namely, when we tried different values N = {25, 50, 75, 100, 125, 150} over some domains, the total time varied within 0.5%, and plan length and the number of situations visited by TPLH did not change at all.\nBefore TPLH could be tested on a domain, the domain file was converted from PDDL to PROLOG, and initial state hash tables were built for each individual problem. Translating domains files themselves took very little time (under 0.1 seconds in all cases), and this cost was further amortized by the fact that it only needed to be done once, regardless of how many problems were tested. Building initial state hash tables however could take a non-negligible amount of time. This time was consistent across all problems belonging to a domain, and ranged from approximately 1.5 seconds per problem (for BlocksWorld) to nearly 10 seconds per problem (for Barman). The inefficiency here is tied to the current implementation of the script used, and is not inherent to the task of creating the hash tables themselves. Preprocessing time for each problem was added to the time spent by the planner itself to get the total time required to solve a problem. (Performance of TPLH on easy instances was much better when preprocessing was factored out.)\nPlan Lengths and Number of Situations Visited\nWhen testing the problems using TPLH, the number of situations visited was recorded, as was the length of the produced plan and the total time taken. A situation was considered as having been visited upon checking whether it satisfied a goal state. Thus, the minimum number of situations visited by TPLH is one greater than the length of the produced plan. The same data was gathered when testing using the FD and BFWS planners, with the distinction that the number of states visited by each planner was recorded, rather than situations. First, we compare TPLH to FD, and second, we compare TPLH to BFWS, see Table 1.\nThe number of situations visited by TPLH is considerably smaller than the number of states visited by FD across eight of the nine domains that were tested: see the middle column in Table 1. In this regard, TPLH outperformed FD on all randomly generated problems except for five (one of these belonging to the BlocksWorld domain, and the other four to Logistics). TPLH also managed to produce plans that were mostly on-par with FD in terms of plan length, see the left most column in Table 1. In five of the domains, each planner produced plans of exactly equal length across all problems. Out of the other four domains, FD had a slight edge in three\nof them. The PipesWorld domain is a notable outlier from the others in that TPLH had to visit far more situations on average than both FD and BFWS.\nWhen comparing to BFWS, TPLH produced shorter average plans across all nine domains, see the left column related to BFWS in Table 1. This is not surprising since BFWS does greedy search, but TPLH does A\u2217 search. When comparing the average number of situations/states visited, TPLH outperformed BFWS in four of the domains, but was beaten in the ChildSnack, Depot, Grippers, Logistics, and PipesWorld domains, see the middle column in Table 1. Looking into the data, it appears that for three of the domains, Depot, Grippers, and Logistics, TPLH beat BFWS for a majority of the problems, but lost overall. In other words, TPLH actually visited fewer situations in the majority of the problems; in the ones which it lost, however, it did so by a large margin, see the right-most column in Table 2. Additionally, TPLH beat BFWS in this regard on exactly 50% of the problems from the PipesWorld domain.\nIn Table 1, the middle column related to BFWS, you see TPLH visited on average 23.75 times more situations than the number of states visited by BFWS. A few inherent aspects of the ChildSnack domain lead to the heuristic performing poorly wrt BFWS. Firstly, plans in this domain are highly \u2019interleavable\u2019; i.e. there are several permutations of the same actions which are all valid solutions. Secondly, ChildSnack problems have relatively few goal atoms, which are all achieved by the last few actions of a plan. Third, no heuristic is perfect. As the heuristic is domain-independent, it is natural that there will be some domains where it excels, and some where it struggles. Notice that TPLH performs better than FD with a similar FF heuristic in terms of the ratio situations/states visited: our ratio is 0.09 of FD.\nRefer to Table 2 for % of problems across each domain for which TPLH performed at least as well as its competitors on plan length (left column) and situations visited (right).\nThe heuristic used by TPLH performed remarkably well on certain problems, only ever visiting situations which were a subsequence of the final plan. In the FreeCell domain for example, this was true of every problem tested. This is likely due to the nature of the Planning Graph data structure and the process used for finding best supporting actions. When evaluating actions which achieve the goal state for the re-\nlaxed problem, the cost of achieving the preconditions of each action is recursively computed, and the action with the lowest such cost is selected.\nThis means that for highly sequential problems, where a specific chain of actions is necessary to allow a sub-goal to be achieved (e.g. in FreeCell, cards must be placed on the foundation pile in sequential order), the heuristic can identify situations which allow for shorter causal chains. As long as a given move completes a step in this chain, TPLH recognizes the resulting situation as more promising than the previous one, and pursues it. When the causal chain is complete for the final goal, the problem is solved.\nMeasuring the ratio r of the length of the plan produced to the number of situations visited by TPLH, we can evaluate the performance of our heuristic across each of the nine domains tested. We used a cutoff value of r \u2265 0.75 to identify the % of problems that the heuristic guided effectively, see Table 3. As previously discussed, the heuristic was able to effectively guide 100% of problems in the FreeCell domain. It also performed well on the BlocksWorld domain (53%) and the Depot domain (51%). At the lowest end, none of the problems from Barman met this threshold r \u2265 0.75.\nThe recursive nature of finding the best supporting actions necessitates a lot of redundant computations. The current non-optimized implementation of the heuristic redoes these computations each time, and therefore spends the vast majority (upwards of 95 percent) of its time computing heuristic values. This is part of the reason why TPLH is orders of magnitude slower than FD and BFWS. Memoization would eliminate these repeated calculations, and has the potential to greatly increase the planner\u2019s efficiency."
        },
        {
            "heading": "5 Discussion",
            "text": "To the best of our knowledge, TPLH is the first deductive planner based on SC with a domain independent heuristic. There were several earlier proposals to develop a situation calculus inspired deductive planner in PROLOG (Lin 2001; Reiter 2001; Levesque 2012), but these planners do uninformed forward depth-first search, e.g., with an iterative deepening strategy. They require both DCA and CWA.\nThe earlier work on deductive planning in the 1980s90s is well reviewed in (Biundo 1994; Fronho\u0308fer 1996; Fronho\u0308fer 1997; Bibel 1998). The interested readers can\nfind other references in those publications. This earlier work includes well-known research on using the linear connection method that circumvents the frame problem and thereby facilitates deductive planning (Bibel 1986; Bibel 1998; Ho\u0308lldobler and Schneeberger 1990). Another line of research on deductive planning adapted linear logic, e.g., see (Gro\u00dfe, Ho\u0308lldobler, and Schneeberger 1996; Cresswell, Smaill, and Richardson 1999), and this research continues up to date. However, to the best of our knowledge, the earlier work did not lead to a competitive implementation and did not use domain independent heuristics. (Fronho\u0308fer 1996) noted that to his surprise an implementation based on SC was comparable with an alternative implementations based on the linear connection method, and both deductive planners were competitive with the specialized planner UCPOP (Penberthy and Weld 1992). He compared run time using randomly generated small instances of BW and the briefcase planning problems. He concluded: \u201cThis opens up the question whether further exploitation of up-to-date theorem proving technology will bring about further gains in efficiency, and whether it might lead eventually to a complete rehabilitation of Situational Calculus\u201d.\nThere are several variants of conformant planning with an OWA. For example, a sound and complete conformant planner based on the situation calculus is described in the paper (Finzi, Pirri, and Reiter 2000) and in Chapter 10 of (Reiter 2001). Their planner represents an initial theory DS0 as conjunction of prime implicates, it makes DCA and relies on regression of a goal formula, but it does depth-first forward search to compute a plan. The knowledge-level planner PKS described in (Petrick 2006) works under OWA, and moreover, it exceeds the usual DCA since it allows the function symbols, e.g., the term parentOf(john) can be an argument of an action. PKS focuses mostly on epistemic and contingent planning, it does search over state space, and for these reasons it is different in scope from TPLH. To the best of our knowledge, most publications in automated AI planning rely on DCA, including previous work on conformant planners, e.g., see (To, Son, and Pontelli 2015; Hoffmann and Brafman 2006) that use representations different from situation calculus BATs, and they do not consider lifted deductive planning. In the latter paper (Hoffmann and Brafman 2006), search goes over executable sequences of actions rather than state space, but there is no connection with SC, their system relies on a SAT solver, and therefore it can be problematic in the large, hard-to-ground domains.\nHowever, since the progression of a DS0 in a proper + form does not require CWA (Liu and Lakemeyer 2009), one can develop a SC-based conformant planner that solves (1) in this more general case, see (Batusov 2014). The latter planner does iterative deepening non-informed forward search to find a plan. Notice that if the initial theory DS0 is in a proper+ form, i.e., with the \u2200-quantifier over object variables, then it is not clear how this planning instance can be formulated in PDDL (Haslum et al. 2019). (Liu and Levesque 2005) developed their tractable solution to the projection problem when the initial theory is proper, and mentioned they would like to develop a first-order plan-\nning system. This research direction led to (Fan et al. 2012), where DS0 is given in a proper\n+ form, and an implementation is tested on small instances of Wumpus world and BW, but planning is assisted with Golog programs, and domain independent heuristics are not considered.\nIn fact, most of the previous research on deductive planning in SC centered around control strategies formulated in Golog, e.g., see (Baier, Fritz, and McIlraith 2007) and earlier work reviewed in Chapter 12 of (Ghallab, Nau, and Traverso 2004), where implementations rely on DCA and CWA. A related line of research, e.g., see (Cla\u00dfen et al. 2007; Ro\u0308ger, Helmert, and Nebel 2008; Cla\u00dfen et al. 2012; Cla\u00dfen 2013; Ro\u0308ger 2014), explored semantics of planning languages in SC and possibilities of combining Golog-style planning in SC with an external heuristic PDDL planner. But their research did not produce a deductive SC-based heuristic planner like our TPLH planner, their implementations implicitly required DCA, and it is not clear how their integration can be upgraded to infinite models with numerical fluents and continuous processes. We believe that our approach is more future-proof since it is more open to extensions, e.g., see (Batusov and Soutchanski 2019). We have to mention also the previous work on planning with declarative, domainspecific heuristics, e.g., see (Bacchus and Kabanza 2000; Parmar 2001; Parmar 2002; Sierra-Santiba\u0301n\u0303ez 2003; Sierra-Santiba\u0301n\u0303ez 2004), but our work is different since we developed a deductive lifted planner that controls search with a domain independent numerical heuristic.\nMore broadly, there are several well-known best-first search (BFS) planners implemented in PROLOG, e.g., see (Sterling and Shapiro 1994; Poole, Mackworth, and Goebel 1998; Bratko 2001). However, all these planners were doing search in a state space, not over situations, there were no connections with SC, and they did not have a domain independent heuristic.\nAs for answer set planning (Son et al. 2022), this survey paper reviews the planners that have to perform grounding in advance, since otherwise they cannot take advantage of existing ASP solvers. Therefore, those planners are not lifted. Moreover, they are not doing BFS to compute a plan, since there are no domain independent heuristics for answer set planning (Gebser et al. 2013; Dimopoulos et al. 2019).\n(Ghallab, Nau, and Traverso 2004), see Chapter 5, review early research on plan-space planning and several well-known systems, e.g., (McAllester and Rosenblitt 1991; Penberthy and Weld 1992; Younes and Simmons 2003; Nguyen and Kambhampati 2001). None of these had any connections with SC or with deductive planning, but TPLH is designed from the first principles as theorem proving in SC. Note that only the plan-space search algorithms need a bound on the plan length to guarantee completeness, but the modern model-based planners like FD and BFWS do not need it, since they search in the finite state space, but not over partial plans. It remains to be seen if any of the methods from plan-space planning can help design a more efficient lifted deductive planner.\nMost of the modern model-based planning systems are\nnot lifted, i.e., they require construction of a completely grounded transition system before search for a plan can even start. Therefore, a non-lifted model-based approach has issues with scalability as the number of objects in the domain increases. There are several realistic applications that demonstrate that grounding often results in out-of-memory problem, e.g., they are mentioned in (Corre\u0302a et al. 2022; Masoumi, Antoniazzi, and Soutchanski 2015). This limitation has been recently recognized by the planning community, and within model-based approach there are several competitive lifted planners, e.g., see (Lauer et al. 2021; Corre\u0302a et al. 2021; Horc\u0131\u0301k, Fiser, and Torralba 2022; Corre\u0302a and Seipp 2022; Corre\u0302a et al. 2022). The main difference between our lifted approach and recent model-based lifted planners is that we plan over situations that serve as concise pointers to large (potentially infinite) states, but other papers focus on model-based planning in a finite state space. The latter approach has limits as the size of the state space can exceed available memory. If we used a lifted version of FF-heuristic, as in (Ridder and Fox 2014), then our planner would still have minimal memory requirements even in the domains with continuous numerical fluents."
        },
        {
            "heading": "6 Conclusion and Future Work",
            "text": "We developed a sound and complete lifted planner based on theorem proving in the situation calculus. It does A\u2217 search for a plan in a tree of situations, but not in a state space, and therefore it has minimal memory footprint. It is controlled using FF-inspired heuristic. To the best of our knowledge, TPLH is the first deductive planner based on SC with a domain independent heuristic.\nIn future, we would like to develop lifted versions of several heuristics, implement them efficiently, introduce tiebreaking for the cases when heuristic values are the same, consider lazy search and preferred actions. It did not escape from our attention that goal counting and novelty heuristics from BFWS work really well, and TPLH can benefit from these ideas. It is easy to consider arbitrary action costs within TPLH. It is relatively easy to develop a planner that works not only with context-free domains, but also with more general BATs, where SSAs have context conditions.\nIt happens that deductive planning in SC leads naturally to lifted planning with action schemas at run time. However, in this paper we do not compare our planner with other recent lifted planners. This study remains an interesting and important future work.\nSince we ground actions at run-time by evaluating their preconditions, and this is one of the computational bottlenecks, e.g., in the domains with complex preconditions (Masoumi, Antoniazzi, and Soutchanski 2015; Qovaizi 2019), we need a better algorithm for finding possible actions.\nIn addition, we would like to develop an implementation that does not rely on DCA for objects, e.g., an implementation for the planning problems where the actions can create or destroy objects. This is doable within our theoremproving approach to planning."
        },
        {
            "heading": "7 Acknowledgments",
            "text": "Thanks to the Natural Sciences and Engineering Research Council of Canada for partial funding of this research."
        }
    ],
    "year": 2023
}