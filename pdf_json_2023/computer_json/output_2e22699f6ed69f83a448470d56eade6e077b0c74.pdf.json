{
    "abstractText": "The emergence of Time-Sensitive Networking (TSN) has enabled network determinism to a new level, offering high reliability and bounded latency for critical communications. However, the unpredictable nature of traffic generation also poses new challenges to TSN. While TSN is designed to maintain backward compatibility with the 802.1 standards, many end nodes may not be equipped to understand TSN. This can result in a less deterministic TSN, and suboptimal resource utilization, mainly driven by Residual Service Time (RST). To address these challenges, this study proposes three scheduling mechanisms to reduce RST: q-learning, active time slot update, and polynomial forecasting. Real-world data captured from our wireless-TSN (WTSN) evaluation kit is used to compare the proposed approaches in terms of one-way latency. The results show that the machine learning approach outperforms the other methods in terms of overall latency. However, it is less effective in identifying the optimal time slot position compared to the other methods. Keywords\u2014wireless time-sensitive networking; scheduling; machine learning; reinforcement learning; residual service time.",
    "authors": [
        {
            "affiliations": [],
            "name": "Pablo Avila-Campos"
        },
        {
            "affiliations": [],
            "name": "Jetmir Haxhibeqiri"
        },
        {
            "affiliations": [],
            "name": "Merkebu Girmay"
        },
        {
            "affiliations": [],
            "name": "Ingrid Moerman"
        },
        {
            "affiliations": [],
            "name": "Jeroen Hoebeke"
        }
    ],
    "id": "SP:83f503f99c645ca40ad33e353a9b7bdb4a91ad52",
    "references": [
        {
            "authors": [
                "Cisco"
            ],
            "title": "Time-Sensitive Networking: A Technical Introduction White Paper",
            "venue": "2017.",
            "year": 2017
        },
        {
            "authors": [
                "Intel Corpotation"
            ],
            "title": "Time-Sensitive Networking: From Theory to Implementation in Industrial Automation",
            "venue": "2018.",
            "year": 2018
        },
        {
            "authors": [
                "M. Ali",
                "F. Naeem",
                "G. Kaddoum",
                "S. Member",
                "E. Hossain"
            ],
            "title": "Metaverse Communications, Networking, Security, and Applications: Research Issues, State-of-the-Art, and Future Directions",
            "venue": "12 2022. [Online]. Available: https://arxiv.org/abs/2212.13993v2",
            "year": 2022
        },
        {
            "authors": [
                "R. Salazar",
                "T. Godfrey",
                "L. Winkel",
                "N. Finn",
                "C. Powell",
                "B. Rolfe",
                "M. Seewald"
            ],
            "title": "Utility Applications of Time Sensitive Networking White Paper",
            "venue": "2018. [Online]. Available: http://www.ieee.org/web/aboutus/whatis/policies/p9-26.html.",
            "year": 2018
        },
        {
            "authors": [
                "S. Bush"
            ],
            "title": "Avnu Alliance\u00ae White Paper Wireless TSN-Definitions, Use Cases & Standards Roadmap",
            "venue": "2020.",
            "year": 2020
        },
        {
            "authors": [
                "J. Farkas"
            ],
            "title": "IEEE 802.1 Time-Sensitive Networking (TSN) Task Group (TG) Overview DetNet-TSN workshop",
            "venue": "2018.",
            "year": 2018
        },
        {
            "authors": [
                "X. Liu",
                "C. Xu",
                "H. Yu"
            ],
            "title": "Network Calculus-based Modeling of Time Sensitive Networking Shapers for Industrial Automation Networks",
            "venue": "2019 11th International Conference on Wireless Communications and Signal Processing, WCSP 2019, 10 2019.",
            "year": 2019
        },
        {
            "authors": [
                "X. Jiao",
                "W. Liu",
                "M. Mehari",
                "M. Aslam",
                "I. Moerman"
            ],
            "title": "Openwifi: A free and open-source IEEE802.11 SDR implementation on SoC",
            "venue": "IEEE Vehicular Technology Conference, vol. 2020-May, 5 2020.",
            "year": 2020
        },
        {
            "authors": [
                "L. Zhao",
                "P. Pop",
                "Z. Zheng",
                "Q. Li"
            ],
            "title": "Timing analysis of AVB traffic in TSN networks using network calculus",
            "venue": "Proceedings of the IEEE Real- Time and Embedded Technology and Applications Symposium, RTAS, pp. 25\u201336, 8 2018.",
            "year": 2018
        },
        {
            "authors": [
                "N. Reusch",
                "L. Zhao",
                "S.S. Craciunas",
                "P. Pop"
            ],
            "title": "Window-Based Schedule Synthesis for Industrial IEEE 802.1Qbv TSN Networks",
            "venue": "IEEE International Workshop on Factory Communication Systems - Proceedings, WFCS, vol. 2020-April, 4 2020.",
            "year": 2020
        },
        {
            "authors": [
                "X. Wang",
                "H. Yao",
                "T. Mai",
                "T. Nie",
                "L. Zhu",
                "Y. Liu"
            ],
            "title": "Deep Reinforcement Learning aided No-wait Flow Scheduling in Time-Sensitive Networks",
            "venue": "IEEE Wireless Communications and Networking Conference, WCNC, vol. 2022-April. Institute of Electrical and Electronics Engineers Inc., 2022, pp. 812\u2013817.",
            "year": 2022
        },
        {
            "authors": [
                "M. Barzegaran",
                "N. Reusch",
                "L. Zhao",
                "S.S. Craciunas",
                "P. Pop"
            ],
            "title": "Real-Time Guarantees for Critical Traffic in IEEE 802.1Qbv TSN Networks with Unscheduled and Unsynchronized End-Systems",
            "venue": "5 2021. [Online]. Available: https://arxiv.org/abs/2105.01641v1",
            "year": 2021
        },
        {
            "authors": [
                "D.B. Mateu",
                "M. Ashjaei",
                "A.V. Papadopoulos",
                "J. Proenza",
                "T. Nolte"
            ],
            "title": "LETRA: Mapping Legacy Ethernet-Based Traffic into TSN Traffic Classes",
            "venue": "IEEE International Conference on Emerging Technologies and Factory Automation, ETFA, vol. 2021-September, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "Amrani Amine"
            ],
            "title": "Q-Learning Algorithm: From Explanation to Implementation",
            "venue": "2020. [Online]. Available: https://towardsdatascience.com/qlearning-algorithm-from-explanation-to-implementation-cdbeda2ea187",
            "year": 2020
        }
    ],
    "sections": [
        {
            "text": "Keywords\u2014wireless time-sensitive networking; scheduling; machine learning; reinforcement learning; residual service time.\nI. INTRODUCTION\nLed by the promise of bounded latencies and guaranteed packet delivery, Time-Sensitive Networking (TSN) is attracting the attention of industry [1], [2]. New paradigms that mingle digital and physical worlds such as the metaverse are grounded by the integration of extended reality (XR) and degrees of augmented and virtual reality (AR/VR). This integration is opening a new window of applications that include basic tasks such as virtual or real objects\u2019 movement, where end-to-end communication latency of less than 1 ms and 99.999% reliability are a must to enjoy a smooth experience [3].\nFurthermore, such network demands are also required by mission-critical industrial applications such as aerospace, automotive, and machine control applications. Most of these applications currently depend on the old-fashioned best-effort network packet delivery capabilities, which in most cases are unacceptable [4]. Additionally, for a wide range of these applications having a wired solution is not sufficient. Hence, wireless-TSN (W-TSN) as an extension of TSN, which would bring mobility and plug-and-play capabilities, represents a natural next move [5].\nTSN\u2019s strategy to achieve an advantage over traditional networks is based on combining features leading to determinism. Such components are defined by the IEEE TSN Task Group1 in four categories: Synchronization, Reliability, Latency, and\n1http://www.ieee802.org/1/tsn\nResource Management. Every component comprises a series of standards, some of which are still under development [6]. However, even though TSN is developed over IEEE 802.1, during the initial deployment stage, it is expected that most end devices or data generators will not be fully TSN compatible. As a result, some of its benefits will only be partially available to those non-TSN end devices.\nJitter, a widely known concept in best-effort networks, is highly reduced in TSN thanks to transmission time slot alignment achieved by the IEEE802.1Qbv Time-Aware Scheduler (TAS) [7]. Hence, a frame would hop between nodes toward its destination with a reduced delay. However, the incorporation of non-TSN end nodes in a TSN might still generate latency jitter that is proportional to Residual Service Time (RST). The RST comes as an intrinsic characteristic of the cyclic scheduling in TSN and is defined as the elapsed time when a frame is available to be transmitted until it gets transmitted in the medium. The addition of an end node in a TSN is typically achieved by connecting it directly to a TSN switch for wired connections, or by using a W-TSN station (STA) for wireless connections [8]. This represents a key difference between the two types of TSN, and provides an opportunity to optimize the RST through the use of the STA.\nRST mainly occurs when non-TSN end devices generate frames independently of the TSN time-synchronization or scheduling process. This behavior can be acceptable for some applications that primarily require reliability, but it is not suitable for most time-sensitive traffic flows, as it leads to suboptimal use of network resources and non-deterministic waiting times. Given that the problem is mainly related to the lack of control over frame generation, it is natural to propose approaches that focus on two main aspects: i) incorporating TSN features into end nodes, or ii) implementing forecastingrelated solutions such as prediction algorithms or machine learning techniques for frame generation prediction. The latter being the specific focus of the present work.\nBased on real captured data using our imec\u2019s W-TSN evaluation kit which has been built on top of openwifi [9], this paper\u2019s main contribution corresponds to a one-way latency comparison of an optimization best-guess-based selection algorithm, and a polynomial-fitting forecasting method, against a reinforcement learning approach for non-TSN end-device frame generation prediction. An efficient wireless STA-based generation forecast capable of processing small time slots could align TSN time slots with data generation time, thus\nreducing latency and jitter in the TSN. The remainder of the paper is organized as follows. First, in Section II, related works on TSN residual service time are presented, followed by a brief overview of residual time optimization in Section III. Next, in Section IV, the proposed management algorithms are explained, to finally present the results in Section V and conclude in Section VI."
        },
        {
            "heading": "II. RELATED WORKS",
            "text": "The absence of a standardized TSN traffic scheduling algorithm has resulted in a substantial amount of work from the community. This work is mainly concentrated on network calculus, machine learning, or heuristic optimization approaches that tackle the problem from a system-wide perspective. As a result, most of the defined systems consist of a static collection of interconnected TSN switches with end nodes as flow generators [8], [10], [11], [12].\nSome studies, such as the one in [13], take an additional step by addressing end nodes without synchronization or scheduling to provide timing guarantees. This approach aims to reduce the likelihood of non-TSN and TSN traffic arriving at the same priority switch queue, thereby affecting TSN traffic determinism. However, our work differs significantly from these studies in several key ways. Firstly, we concentrate solely on the TSN access time slot (see Fig. 2), which is crucial in our proposal to integrate wireless into TSN, given the substantial differences between wired and wireless networks. In principle, we anticipate that the W-TSN will be situated at the TSN\u2019s edge, acting as access for end nodes. Therefore, unlike wired TSN, where a switch serves as the network entrance point for end nodes, in wireless, an end node\u2019s flow access device is an STA, which presents a promising opportunity point to filter non-TSN traffic by implementing the strategies outlined in our research.\nMoreover, authors in [14] address unsynchronized traffic by incorporating it into their mapping procedure from legacy Ethernet to wired TSN. However, they only provide a basic level of timing guarantee by classifying it as an Audio-VideoBridging (AVB) type. Hence, lowering the TSN guarantees.\nAdditionally, authors in [15], propose utilizing a hierarchical structure to reduce the size of the schedule calculation problem by partitioning the stream set. However, this approach, which is commonly found in the current literature, does not consider non-TSN-compliant unsynchronized end node traffic. Nonetheless, studies like this complement the work we propose, as they would determine the best schedule from the wireless access point to the information receiver.\nIn conclusion, since the TSN working group began proposing initial concepts for incorporating determinism in best-effort networks in 2012, numerous studies have focused on achieving optimal scheduling. However, many of these studies do not take into account real-world hardware in their analyses, nor do they address the difficulties involved in integrating wireless into TSN."
        },
        {
            "heading": "III. RESIDUAL SERVICE TIME OPTIMIZATION",
            "text": "This section\u2019s aim is to provide an overview of RST as well as a description of the proposed strategies."
        },
        {
            "heading": "A. Residual Service Time (RST)",
            "text": "General strategies are defined by TSN\u2019s current standards to describe an automated traffic flow scheduler. The lack of a standardized scheduling method is not an obstacle for wired TSN due to its steady nature, where fixed schedules are manually set at the boot-up time using the Central Network Controller (CNC) and Centralized User Configuration (CUC). However, driven by the mobile nature of W-TSN the need for an adaptable scheduler is evident. Furthermore, once the schedule is computed, and distributed to the TSN end nodes, the management system will need to keep adapting to the network and end node changes. One of the most critical delays that might be improved by adaptation is the Residual Service Time (RST).\nRST is mainly generated by the lack of time synchronization, variable processing times, and lack of awareness of the schedule between the end node and the TSN. In the first update stage from non-TSN to TSN, it is expected that most end devices will not have TSN capabilities. In some cases, modifying the end node software and/or hardware to include basic TSN features such as time-synchronization will not be an option. An example of the one-way latency of a non-TSNaware end node can be found in Fig. 1.\nFig. 1 shows a typical time-triggered traffic (TT) end node generation with respect to the TSN gated schedule. Despite the end node running an application with the same generation cycle as the TSN, the generation of frames is shifted due to the jitter on generation and processing time. This synchronization mismatch leads to latency jitter that could be as high as communication cycle time, an unwanted characteristic for some applications. For instance, if one transmission slot is open per cycle for the end node, the frame latency in one hop can be calculated by adding the RST, the processing delay, and the packet transmission time. Here, because of its shifting nature, the RST amount will fluctuate from 0 when both generation and TSN cycle are aligned and the generation happens during\nthe assigned time slot, to Cycle \u2212 Timeslotsize, when the frame is generated just after the time slot ends."
        },
        {
            "heading": "B. Strategies to Reduce RST",
            "text": "Theoretically, in an optimal TSN, where even processing delay is predictable (e.g., in a real-time operating system), RST is low or nonexistent. The strategies to solve or improve the RST in real development will be mainly related to the nature of the end node. There are two main aspects to consider: the traffic type and the end node capabilities to include TSN features.\nRegarding the traffic type, a periodic traffic type such as the machine control one, not only reduces the mismatch possibilities but also opens the door to several strategies to reduce RST. The one proposed in this work is to provide a pulse-based time synchronization from the TSN to the end node. This would undoubtedly lower RST, however, the quality of the time synchronization, plus variable processing times at the end node would still generate RST. Hence, extra strategies need to be explored. The details behind the pulsebased synchronization are explored in section V-A. Another potential solution to synchronization would be to incorporate a packet-based synchronization mechanism like Precision Time Protocol (PTP). However, it\u2019s important to note that this approach would require the end node to be compatible with PTP in order to be effective.\nThe proposed strategy in this paper is to adapt the TSN access time slot position in presence of pulse-based synchronized traffic generation to reduce RST. Such adaptation, from a management point of view, has two stages. The first, as it is depicted in Fig. 2, considers the W-TSN STA node sending information such as frames arrival timestamp to the network management (CUC and CNC). By using this, and conditioned by the available resources, the time slot location can be predicted and set in an optimal place. During the second stage, the end node application has the option to delay its transmissions in order to optimize frame generation and time slot alignment. This strategy can be particularly useful when a time slot is already in use or when the ideal time slot position falls between two existing time slot locations. By strategically delaying generations, the end node can improve the RST."
        },
        {
            "heading": "IV. ALGORITHMS IMPLEMENTATION",
            "text": "Three access time slot scheduling approaches are proposed to diminish the RST. The first is an optimization-based method that considers only the last arrival timestamp at the W-TSN STA as the best prediction for the next time slot access position. The second and third are forecasting methods. The former fits a polynomial equation using a number of past samples. In contrast, the latter uses Reinforcement Learning (RL) to model the arrivals pattern to find the best next time slot position.\nAs shown in Fig. 3, the scheduling works as a feedback system using the one-way latency of the frames as the algorithm\u2019s input. The output is then represented as an access time slot position.\nTime slot length is expressed as a power of 2. As such the start and the end of the time slot can be set only on a fixed offset during the communication cycle. Hence, based on the cycle length and time slot size, there is a finite number of positions where such time slot can be placed inside the communication cycle.\nThe environment function task is to provide a realistic oneway latency value which is then used as a variable to optimize the algorithms. By using the cycle length, time slot position, frame arrival time, frame length, and data rate, it delivers the one-way latency of the frame. With the aim to improve the realism of the results, a random Clear Channel Assessment (CCA) delay value is also added to emulate Wi-Fi\u2019s backoff."
        },
        {
            "heading": "A. Active Update",
            "text": "This optimization-based function is shown in Algorithm 1. It starts by calculating an error, which is defined as the time distance between the previous arrival time and the middle of the time slot. Then, as in a typical proportional controller, by considering the maximum latency, the algorithm defines how many time slot positions (stepsleft) the time slot should\nbe shifted. In addition, if a time slot is already in use, the algorithm will select the next best available time slot.\nAlgorithm 1 Active Update Input: environment(env), time slot space(S), tx time,\nTSsize, cycle, arrivals Output: Access Time slot Position (s)\n1: errormax = (2 \u2217 cycle\u2212 TS size)/2 2: for t=1,2,...T do 3: lnow = env(arrivals(t), s) 4: if lnow > tx time then 5: TS = S(s) 6: error = (2 \u2217 lnow + TSend \u2212 TSstart)/2 7: stepsleft = round(error \u2217 smax)/errormax 8: if s\u2212 stepsleft \u2264 0 then 9: s = smax + s\u2212 stepsleft\n10: else 11: s = s\u2212 stepsleft 12: end if 13: end if 14: end for 15: return s"
        },
        {
            "heading": "B. Polynomial Fitting Forecasting",
            "text": "The second approach is the polynomial regression forecasting which can be found in Algorithm 2. By using the last k arrivals saved in a moving vector (mv), a degree m polynomial is fitted, and the next time slot position is forecasted. Then, the best time slot position is found from the time slot position space S. The present method brings a clear advantage over the low variability of consecutive arrivals.\nAlgorithm 2 Polynomial Fitting Input: arrivals, block size(k), degree(m) Output: Access Time slot Position (s)\n1: for t=1,2,...T do 2: if mod(arrivals(t), k) = 0 then 3: mv = arrivals(0 : k) 4: function = polyfit(mv,m) 5: prediction = function(k + 1) 6: s = min(abs(S \u2212 prediction)) 7: end if 8: end for 9: return s"
        },
        {
            "heading": "C. Reinforcement Learning (RL)",
            "text": "For the Reinforcement Learning (RL) algorithm, a Qlearning approach is used. First, by using the arrival timestamps the exploration and exploitation stages follow an exponential decay function. The RL online learning algorithm uses the previous experience to learn its policy which is contained in a Q-function given in (1) [15].\nQt+1(st, s \u2032 t) = (1\u2212 \u03b1)Qt(st, s\u2032t)+ \u03b1[rt + \u03b3maxs\u2032Qt(st+1, s \u2032)]\n(1)\nwhere \u03b3 is the discount factor, and \u03b1 \u2208 [0,1] is the learning rate. In the same way as in Fig. 3, the algorithm, in this case, the so-called agent, takes a decision about the time slot position, then the environment block would provide a latency reward (l) and time slot current position (s) which are used to fill the Q-table. The Q-table is a TSxTS table with TS being the number of possible time slots in the communication cycle. Then, every slot would record the reward of going from TSi to TSj which is used in the exploring and testing stages. The Algorithm 3, presents details regarding the learning phase.\nAlgorithm 3 Q-Learning Input: time slot space(S),\nexploration probability (\u03f5), discount factor (\u03b3), learning rate(\u03b1)\nOutput: Q Initialization :\n1: Q\u2190 Q0 2: for t=1,2,...T do\n3: at = { argmaxaQ(st, a) with probability 1-\u03f5 random action with probability \u03f5 4: Perform action at 5: Check new state st+1 and reward rt using environment 6: Q\u2190 L(Q, lnow, \u03b3, \u03b1) 7: end for 8: return Q"
        },
        {
            "heading": "V. RESULTS",
            "text": "This section will introduce the architecture used for measuring as well as the algorithm\u2019s results in terms of latency and accuracy."
        },
        {
            "heading": "A. Test Setup and Capture",
            "text": "The testing setup is divided into two parts: i) data gathering and ii) algorithms implementation and verification.\nFig. 4 shows the data collecting topology used. The end node bears an analog infrared sensor connected to an analogdigital converter attached to a Raspberry Pi 4. The former is then connected to imec\u2019s W-TSN Evaluation Kit (EK) through the W-TSN STA using Ethernet. The W-TSN STA is a ZedBoard and the AP is a Xilinx ZC706 both using a TSN-enhanced version of openwifi 2 [9]. Finally, the network controllers (CUC and CNC), are physically placed in a central node as shown in Fig. 2.\nThe data capture is done at the W-TSN STA driver. Here the arrival timestamp of UDP frames generated by the end node are filtered just before getting to the W-TSN STA gating system. Such capture location allows to include generation and processing delays both in the END-NODE and W-TSN STA. An electrical pulse is generated by the W-TSN STA on a cycle basis, triggering the end node\u2019s sensor capture, analogdigital conversion, and frame generation. Further, the three algorithm approaches and environment explained in Section\n2https://github.com/open-sdr/openwifi\nIV were implemented in Matlab. By using the captured data set the algorithms were tested and the results are presented in the next subsection."
        },
        {
            "heading": "B. Algorithms Results",
            "text": "Fig. 5 presents a comparison of the mean one-way latency of the proposed algorithms using different time slot sizes for the access time slot (see Fig. 2). The results indicate that RL consistently outperforms the other algorithms in terms of mean latency across all time slot sizes. The active update approach is generally the second-best option, with the exception of the 128\u00b5s time slot, where Forecasting(k = 100,m = 3) exhibits a lower mean latency. This poor performance of the active update approach for the 128\u00b5s time slot comes as a result of a short time slot, increasing the possibility of update cases where the time slot is positioned before the generation time increasing thus the one-way latency.\nThe worst-case scenario for RST occurs when a frame is generated immediately after the time slot. To evaluate the algorithms\u2019 performance in this scenario, the percentage of frames with a latency greater than 60ms is presented in Fig. 6. The results clearly demonstrate the advantage of ML algorithms, which can learn from arrival patterns and avoid\nthis worst-case scenario. However, the Active update and Forecasting approaches, which provide a fast response, may lead to a higher percentage of frames with latency exceeding 60ms, especially for short time slot sizes.\nEvaluating both the worst-case and best-case scenarios is crucial. Fig. 7 illustrates the percentage of frames with oneway latencies below 100 microseconds. The ML approach is optimized for latency, which enables it to avoid worst-case scenarios by scheduling time slots mostly after frame arrivals. However, this cautious approach may reduce the percentage of frames with the lowest latency in small time slots. Despite this, all algorithms perform well with 2048 and 1024 microsecond time slots due to the number of arrivals fitting in the time slot being bigger.\nThe 512\u00b5s time slot size exhibited notably poor performance. The space S of time slots is generated based on the cycle length and the number of time slots, and the algorithm selects the best possible option within this space. However, in this case, the start and end positions of the time slots are fixed, and it appears that the positions of the 512\u00b5s time slots did not contribute to accurate frame arrival times.\nData quality and quantity are crucial for ML. The Q-table size depends on the time slot; for 128\u00b5s slots, there are 262,144 positions. Filling them would improve the agent\u2019s understanding and decision-making. But only 17.87% are filled with the smallest slot. These results are not only related to the data distribution but also to the number of arrival data points used (100k)."
        },
        {
            "heading": "C. Q-Table Cyclic Shifting",
            "text": "In the context of frame arrivals, it may be necessary to establish a fixed generation time delay at the end node in the event of a TSN schedule update. Rather than worsening the results, this fixed delay could actually help reduce hop latency by locating the frame generation in a more favorable position with respect to the time slot. However, when using Qlearning, a schedule update would alter the known information,\nrequiring a re-learning delay. To avoid this, and assuming that the distribution of frame arrivals remains unchanged, a circular shifting of the Q-table K steps is proposed to account for the fixed delay at the end node, which is denoted by (2).\nQnew = circshift(Q,K) (2)\nTable I presents a comparison of the average one-way latency between two scenarios: when training is conducted from scratch and when a circular or cyclic shift is applied to an already learned Q-table. The K-value was calculated based on the mean value of the shifted arrival distribution. Better approaches to finding K are out of the scope of this work. The table demonstrates the feasibility of using the shifting approach as an alternative to re-learning."
        },
        {
            "heading": "VI. CONCLUSION AND FUTURE WORK",
            "text": "The Residual Service Delay (RST) poses a critical challenge in realizing the full benefits of time-sensitive networks (TSN). This study examined the problem\u2019s nature in a W-TSN context and proposed three distinct methods for reducing RST. The effectiveness of the proposed algorithms was evaluated through measuring simulations using real data frame arrival information captured from our W-TSN evaluation kit. Our findings revealed that the machine learning approach exhibited the best overall latency across different time slot sizes. However, when comparing the percentage of frames with the lowest latency in small time slot sizes, the active update and forecasting methods\noutperformed it. These results, coupled with the Q-table cyclic shifting proposal, represent a promising initial step towards more efficient TSN scheduling techniques. Such techniques will not only consider traffic flow requirements and resources but also constraints related to the end nodes\u2019 frame generation nature and topology in W-TSN."
        },
        {
            "heading": "ACKNOWLEDGMENT",
            "text": "This research was partially funded by the imec ICON project VELOCe - VErifiable, LOw-latency audio Communication (Agentschap Innoveren en Ondernemen project nr.HBC.2021.0657), the Flemish FWO SBO S003921N VERIEND.com (Verifiable and elastic end-to-end communication infrastructures for private professional environments) project, and the Flemish Government under the \u201cOnderzoeksprogramma Artificiele Intelligentie (AI) Vlaanderen\u201d program."
        }
    ],
    "title": "Residual Service Time Optimization for legacy Wireless-TSN end nodes",
    "year": 2023
}