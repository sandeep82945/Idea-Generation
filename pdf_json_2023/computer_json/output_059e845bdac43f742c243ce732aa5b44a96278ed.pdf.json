{
    "abstractText": "Vertex models are a widespread approach for describing the biophysics and behaviors of multicellular systems, especially of epithelial tissues. Vertex models describe a wide variety of developmental scenarios and behaviors like cell rearrangement and tissue folding. Often, these models are implemented as single\u2010use or closed\u2010source software, which inhibits reproducibility and decreases accessibility for researchers with limited proficiency in software development and numerical methods. We developed a physics\u2010based vertex model methodology in Tissue Forge, an open\u2010 source, particle\u2010based modeling and simulation environment. Our methodology describes the properties and processes of vertex model objects on the basis of vertices, which allows integration of vertex modeling with the particle\u2010based formalism of Tissue Forge, enabling an environment for developing mixed\u2010method models of multicellular systems. Our methodology in Tissue Forge inherits all features provided by Tissue Forge, delivering open\u2010source, extensible vertex modeling with interactive simulation, real\u2010time simulation visualization and model sharing in the C, C++ and Python programming languages and a Jupyter Notebook. Demonstrations show a vertex model of cell sorting and a mixed\u2010method model of cell migration combining vertex\u2010 and particle\u2010based models. Our methodology provides accessible vertex modeling for a broad range of scientific disciplines, and we welcome community\u2010developed contributions to our open\u2010source software implementation.",
    "authors": [
        {
            "affiliations": [],
            "name": "T. J. Sego"
        },
        {
            "affiliations": [],
            "name": "Tien Comlekoglu"
        },
        {
            "affiliations": [],
            "name": "Shayn M. Peirce"
        },
        {
            "affiliations": [],
            "name": "Douglas W. Desimone"
        },
        {
            "affiliations": [],
            "name": "James A. Glazier"
        }
    ],
    "id": "SP:ab7f1b59856e615c3b330a1f14e587343fc34ffd",
    "references": [
        {
            "authors": [
                "C. Guillot",
                "T. Lecuit"
            ],
            "title": "Mechanics of epithelial tissue homeostasis and morphogenesis",
            "venue": "Science 340,",
            "year": 2013
        },
        {
            "authors": [
                "M. Marder"
            ],
            "title": "Soap-bubble growth",
            "venue": "Phys. Rev. A 36,",
            "year": 1987
        },
        {
            "authors": [
                "T. Okuzono",
                "Kawasaki",
                "K. Intermittent flow behavior of random foams"
            ],
            "title": "A computer experiment on foam rheology",
            "venue": "Phys. Rev. E 51, 1246\u20131253",
            "year": 1995
        },
        {
            "authors": [
                "S. Okuda",
                "Y. Inoue",
                "M. Eiraku",
                "T. Adachi",
                "Y. Sasai"
            ],
            "title": "Vertex dynamics simulations of viscosity-dependent deformation during tissue morphogenesis",
            "venue": "Biomech. Model. Mechanobiol",
            "year": 2015
        },
        {
            "authors": [
                "G. Erdemci-Tandogan",
                "M.L. Manning"
            ],
            "title": "Effect of cellular rearrangement time delays on the rheology of vertex models for confluent tissues",
            "venue": "PLoS Comput. Biol. 17,",
            "year": 2021
        },
        {
            "authors": [
                "X Wang"
            ],
            "title": "Anisotropy links cell shapes to tissue flow during convergent extension",
            "venue": "Proc. Natl. Acad. Sci. USA",
            "year": 2020
        },
        {
            "authors": [
                "P. Spahn",
                "R. Reuter"
            ],
            "title": "A vertex model of Drosophila ventral furrow formation",
            "venue": "PLoS ONE 8,",
            "year": 2013
        },
        {
            "authors": [
                "Y Inoue"
            ],
            "title": "Mechanical roles of apical constriction, cell elongation, and cell migration during neural tube formation in Xenopus",
            "venue": "Biomech. Model. Mechanobiol",
            "year": 2016
        },
        {
            "authors": [
                "S. Okuda",
                "Y. Inoue",
                "T. Adachi"
            ],
            "title": "Three-dimensional vertex model for simulating multicellular morphogenesis",
            "venue": "Biophys. Physicobiol. 12,",
            "year": 2015
        },
        {
            "authors": [
                "J. Metzcar",
                "Y. Wang",
                "R. Heiland",
                "P. Macklin"
            ],
            "title": "A review of cell-based computational modeling in cancer biology",
            "venue": "JCO Clin. Cancer Inform",
            "year": 2019
        },
        {
            "authors": [
                "A.G. Fletcher",
                "M. Osterfield",
                "R.E. Baker",
                "S.Y. Shvartsman"
            ],
            "title": "Vertex models of epithelial morphogenesis",
            "venue": "Biophys. J. 106,",
            "year": 2014
        },
        {
            "authors": [
                "S. Alt",
                "P. Ganguly",
                "Salbreux",
                "G. Vertex models"
            ],
            "title": "From cell mechanics to tissue morphogenesis",
            "venue": "Philos. Trans. R. Soc. Lond. B 372, 20150520",
            "year": 2017
        },
        {
            "authors": [
                "Karr",
                "J. et al. Model integration in computational biology"
            ],
            "title": "The role of reproducibility, credibility and utility",
            "venue": "Front. Syst. Biol. 2, 7",
            "year": 2022
        },
        {
            "authors": [
                "Sussman",
                "D.M. cellGPU"
            ],
            "title": "Massively parallel simulations of dynamic vertex models",
            "venue": "Comput. Phys. Commun. 219, 400\u2013406",
            "year": 2017
        },
        {
            "authors": [
                "Cooper",
                "F.R. et al. Chaste"
            ],
            "title": "Cancer, heart and soft tissue environment",
            "venue": "J. Open Source Softw. 5, 1848",
            "year": 2020
        },
        {
            "authors": [
                "O. Canela-Xandri",
                "S. Anbari",
                "Buceta",
                "J. TiFoSi"
            ],
            "title": "An efficient tool for mechanobiology simulations of epithelia",
            "venue": "Bioinformatics 36, 4525\u20134526",
            "year": 2020
        },
        {
            "authors": [
                "T.J. Sego",
                "J. Sluka",
                "H. Sauro",
                "Glazier",
                "J. Tissue forge"
            ],
            "title": "Interactive biological and biophysics simulation environment",
            "venue": "BioRxiv https:// doi. org/ 10. 1101/ 2022. 11. 28. 518300",
            "year": 2022
        },
        {
            "authors": [
                "M.A. Spencer",
                "Z. Jabeen",
                "D.K. Lubensky"
            ],
            "title": "Vertex stability and topological transitions in vertex models of foams and epithelia",
            "venue": "Eur. Phys. J. E Soft Matter 40,",
            "year": 2017
        },
        {
            "authors": [
                "P G\u00f3mez-G\u00e1lvez"
            ],
            "title": "Scutoids are a geometrical solution to three-dimensional packing of epithelia",
            "venue": "Nat. Commun",
            "year": 2018
        },
        {
            "authors": [
                "Steinberg",
                "M.S. Reconstruction of tissues by dissociated cells"
            ],
            "title": "Some morphogenetic tissue movements and the sorting out of embryonic cells may have a common explanation",
            "venue": "Science 141, 401\u2013408",
            "year": 1963
        },
        {
            "authors": [
                "F. Graner",
                "J.A. Glazier"
            ],
            "title": "Simulation of biological cell sorting using a two-dimensional extended Potts model",
            "venue": "Phys. Rev. Lett. 69,",
            "year": 1992
        },
        {
            "authors": [
                "J.M. Osborne",
                "A.G. Fletcher",
                "J.M. Pitt-Francis",
                "P.K. Maini",
                "D.J. Gavaghan"
            ],
            "title": "Comparing individual-based approaches to modelling the self-organization of multicellular tissues",
            "venue": "PLoS Comput. Biol. 13,",
            "year": 2017
        },
        {
            "authors": [
                "S. SenGupta",
                "C.A. Parent",
                "J.E. Bear"
            ],
            "title": "The principles of directed cell migration",
            "venue": "Nat. Rev. Mol. Cell Biol",
            "year": 2021
        }
    ],
    "sections": [
        {
            "text": "1 Vol.:(0123456789) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nwww.nature.com/scientificreports"
        },
        {
            "heading": "General, open\u2011source vertex",
            "text": "modeling in biological applications using Tissue Forge T. J. Sego 1*, Tien Comlekoglu 2,3, Shayn M. Peirce 2, Douglas W. Desimone 3 &"
        },
        {
            "heading": "James A. Glazier 4",
            "text": "Vertex models are a widespread approach for describing the biophysics and behaviors of multicellular systems, especially of epithelial tissues. Vertex models describe a wide variety of developmental scenarios and behaviors like cell rearrangement and tissue folding. Often, these models are implemented as single\u2011use or closed\u2011source software, which inhibits reproducibility and decreases accessibility for researchers with limited proficiency in software development and numerical methods. We developed a physics\u2011based vertex model methodology in Tissue Forge, an open\u2011 source, particle\u2011based modeling and simulation environment. Our methodology describes the properties and processes of vertex model objects on the basis of vertices, which allows integration of vertex modeling with the particle\u2011based formalism of Tissue Forge, enabling an environment for developing mixed\u2011method models of multicellular systems. Our methodology in Tissue Forge inherits all features provided by Tissue Forge, delivering open\u2011source, extensible vertex modeling with interactive simulation, real\u2011time simulation visualization and model sharing in the C, C++ and Python programming languages and a Jupyter Notebook. Demonstrations show a vertex model of cell sorting and a mixed\u2011method model of cell migration combining vertex\u2011 and particle\u2011based models. Our methodology provides accessible vertex modeling for a broad range of scientific disciplines, and we welcome community\u2011developed contributions to our open\u2011source software implementation.\nEpithelial sheets are instrumental in diverse physiological functions and in maintaining the mechanical integrity of many tissues and organs. Understanding the mechanics and dynamics of epithelial tissue is central to research on morphogenesis of tissues and organs early in development and wound healing of physiologically complex tissues1. Vertex modeling has been particularly useful in understanding the mechanics of confluent epithelial tissues, especially the movement of cells within epithelial sheets and the bending of epithelial sheets.\nVertex models (VMs) are off-lattice models where individual bodies (usually representing cells) are represented by polygons in two dimensions and polyhedrons in three dimensions, and tissues are represented by a connected mesh of these polygons or polyhedral elements. Neighboring bodies share vertices and edges, and faces in three dimensions, and the motion of the vertices is dictated by approximations of the mechanical interactions within and between the bodies, faces, and edges, which result in drag and forces that act upon the vertices. VMs have been applied to study a variety of physical phenomena, from the rheology of foams and soap bubbles to those of biological tissues2\u20135. Vertex methods have been increasingly adopted to investigate biological tissue morphogenesis, convergent extension, ventral furrow formation, and neurulation among others6\u20138.\nThe original two-dimensional (2D) VM, where polygonal bodies are connected in a flat or deformed plane, has been extended to more complicated formulations. We refer to these as 2.5-dimensional (2.5D) or threedimensional (3D), where bodies are represented as a monolayer quasi-cylindrical of 3D polyhedra (2.5D) or a bulk mesh aggregate of polyhedra (3D)9. VMs can reproduce common topological transitions of vertices, edges, and faces and body rearrangement within the mesh representation of a tissue as a result of forces generated within cells, such as anisotropic or differential contraction of edges resulting from actomyosin contraction, or external forces applied to tissues. Topological processes include adjacent bodies coming into contact and extending a shared edge while detaching two previously adjacent bodies and destroying their shared edge (a two dimensional T1 transition), multiple T1 transitions resulting in the classic \u201crosette formation\u201d phenomenon, cell extrusion\nOPEN\n1Department of Medicine, University of Florida, Gainesville, FL, USA. 2Department of Biomedical Engineering, University of Virginia, Charlottesville, VA, USA. 3Department of Cell Biology, University of Virginia, Charlottesville, VA, USA. 4Department of Intelligent Engineering and Biocomplexity Institute, Indiana University, Bloomington, IN, USA. *email: timothy.sego@ufl.edu\n2 Vol:.(1234567890) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nfrom the epithelial sheet (or disappearance of a cell) represented by collapsing a face into a vertex (T2 transition), formation of new contacts between bodies as they collide (T3 transition), and division of a body into two adjacent bodies to represent, for example, mitosis (Division). These behaviors emerge from the explicit representation of resultant forces on discrete vertices. Resultant forces are calculated as the sum of explicit forces with a gradient of an \u201ceffective energy\u201d functional that integrates mathematical representations of multiple physical processes. This combination of explicit forces and effective-energy-based forces is also used in Cellular Potts (Glazier\u2013Graner\u2013Hogeweg), center- and particle-based modeling methods10. For further discussion of VMs, their applications, and numerical methods, we recommend the reviews by Fletcher et\u00a0al. and Alt, Ganguly, and Salbreux11,12.\nStudying epithelial dynamics at relevant biological scales necessitates the construction of reproducible, reusable computational models13. Most software implementations of published VMs are either not publicly available, or are single-use implementations with limited to no support for usage and extension by others. Some publicly available software exists for general development and application of VMs, with varying support for research applications14\u201316. cellGPU implements two-dimensional VMs that can be accelerated via available graphical processing units. Chaste supports three-dimensional VMs and is well tested. Both cellGPU and Chaste support model specification in the C++ programming language and thus require compilation of source code to execute a simulation. TiFoSi supports XML-specified two-dimensional VMs that embed cell signaling models, models of which can be generated using the graphical user interface ANISE. So far, no available software package supports VM model specification in multiple programming languages and provides critically important features for overall research productivity in multicellular modeling like real-time data visualization, event-based modeling and interactive simulation. Here, we introduce a novel, physics-based VM methodology and its implementation in the Tissue Forge interactive biophysics modeling and simulation environment17. This methodology allows for computationally efficient handling of mesh topology expected of the VM formalism and enables general VM development and application through generalization of dynamical models that can be applied to a mesh. Implementation of the VM methodology in Tissue Forge provides all capabilities already available in Tissue Forge, such as event-based modeling, interactive simulation, support for the C, C++ and Python programming languages and Jupyter Notebook execution, model and simulation data sharing, and real-time simulation visualization, as well as seamless integration of VMs with particle-based and subcellular modeling methods. For instructions on installing Tissue Forge v0.1.0, which includes the work presented here, see Supplementary Text S1."
        },
        {
            "heading": "Models and methods",
            "text": "The VM methodology describes the dynamics, properties and processes of model objects constructed from vertices in a mesh. A vertex in the VM methodology represents a region of space. All space that is described by a VM is contained within the mesh, and the topology of the mesh describes kinematic relationships between the regions of space represented by a vertex. The topology of a mesh is defined in terms of higher-dimensional mesh objects. A surface is a two-dimensional mesh object that occupies a simply connected area and has a perimeter, normal vector and straight edges. A body is a three-dimensional mesh object that occupies a connected volume (Fig.\u00a01). All VM objects ultimately resolve to a set of vertices with relationships that define the topology of the mesh, and all VM properties and dynamics resolve to properties and dynamics of vertices according to the mesh objects that the vertices define. As such, vertices in the VM methodology have defined measures like area and volume according to the higher-dimensional VM objects that they define so that model physics on the basis of higher-dimensional mesh object consistently translate to physics on the basis of vertices. This is to say, models that define physics for higher-dimensional objects (e.g., a force on a surface) ultimately produce forces that act on the vertices that define those higher-dimensional objects. The VM methodology defines two classes of temporal processes in VM dynamics, which either act continuously in time to update vertex position, or discretely in time to change mesh topology. In general, a total force f Vi (V) acts on each vertex V and updates its position according to overdamped dynamics where, for vertex position ri(V) and drag MV (V),\n(1)f Vi (V) = M V (V)\ndri(V)\ndt .\nFigure\u00a01. Vertex model objects. Visual examples of vertex model objects that form meshes in the simulation environment. A vertex (left) occupies a location. An edge (left-center) connects two vertices. A surface (rightcenter) encloses a simply connected area with three or more edges and has a centroid. A body (right) encloses a connected volume with four or more surfaces and also has a centroid.\n3 Vol.:(0123456789) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x"
        },
        {
            "heading": "Topological structure and properties",
            "text": "A vertex can define an arbitrary number of surfaces, and a surface is defined by an ordered set of three or more vertices. For a surface S i and vertices V i1 ,V i2 , . . . that define the surface, we write the surface as the cycle S i = { V i1 ,V i2 , . . . }\nand V i1 \u2208 S i when describing a vertex that defines a surface. A surface can define at most two bodies, and a body is defined by an unordered set of four or more surfaces with appropriately shared vertices to enclose a connected volume. For a body Bj and surfaces S j1 ,S j2 , . . . that define the body, we also write the body as the set Bj = { S j1 ,S j2 , . . . }\nand S j1 \u2208 Bj when describing a surface that defines the body. For a mesh M , a vertex in a three-dimensional VM can then be succinctly written as V i \u2208 S j \u2208 Bk \u2208 M , and likewise for a two-dimensional VM as V i \u2208 S j \u2208 M . Resolving a body B to its constituent vertices is also defined as the operator Z(B),\nThe VM methodology does not explicitly define edges, since each edge connects two vertices and so is implicitly described by the cycles of vertices that define surfaces (e.g., two adjacent vertices in a cycle implies an edge). This convention and the definition of a surface, namely that edges are straight, provide sufficient information to identify and describe all edges of the mesh. We do sometimes refer to edges, which we mean only in the graphtheoretic sense. We describe two vertices joined by an edge as connected, and the same for two surfaces that share at least one vertex, and for two bodies that share a surface.\nThe VM methodology imposes that each surface is a flat, convex polygon so that a surface can be described using a triangulation according to its constituent vertices. Each vertex that defines a surface defines two triangles of the surface, and all triangles of a surface share a point at the centroid of the surface. For surface S , the centroid of the surface CSi (S) is the mean of the positions of the vertices that define the surface,\nA triangulation T ( S j ) = { T j1 ,T j2 , . . . } of surface S j defines local normal vectors and contributions of area and volume on the basis of vertices. Each triangle T jk = { V jk ,V jk+1 }\n\u2282 S j is geometrically described by positions { ri ( V jk ) , ri ( V jk+1 ) ,CSi ( S j )}\n. The normal vector \u03b7Si (S) of a surface S is defined as the normalized sum of normal vectors \u03b7Ti of the triangles in the triangulation of S,\nThe normal vector of a triangle T j = { V j1 ,V j2 }\nis calculated using the cross product of the positions of the vertices that define the triangle relative to the centroid of the surface,\nHere \u01ebimn is the permutation tensor. The area AS(S) of surface S is defined as the sum of areas AT of the triangles in the triangulation of S,\nwhere the area of a triangle T is calculated using (5),\nIt follows that the surface area AB(B) of a body B is the sum of areas of the surfaces that define the body,\nand the centroid CBi (B) is the weighted sum of the centroids of all surfaces that define the body,\nThe area AV (V) of a vertex V is defined as the sum of area contributions AV ,S(V;S) over all surfaces defined by the vertex,\nwhere each vertex is assumed to contribute half of the area of each triangle that it defines,\n(2)Z(B) = {V : V \u2208 S \u2208 B}\n(3)C S i (S) =\n1\n|S|\n\u2211\nV\u2208S\nri(V).\n(4)\u03b7Si (S) = \u2211 T \u2208T(S) \u03b7 T i (T )\n\ufffd \u2211 T \u2208T(S) \u03b7 T i (T )\ufffd\n.\n(5)\u03b7Ti ( T j ) = \u01ebimn\n(\nrm ( V j1 ) \u2212 CSm(S) )( rn ( V j2 ) \u2212 CSn (S) ) ,T j \u2208 T(S).\n(6)A S (S) =\n\u2211\nT \u2208T(S)\nAT (T ),\n(7)AT (T ) = 1\n2 \ufffd\u03b7Ti (T )\ufffd.\n(8)A B(B) =\n\u2211\nS\u2208B\nAS (S),\n(9)C B i (B) =\n1\nAB(B)\n\u2211\nS\u2208B\nCSi (S)A S (S).\n(10)A V (V) =\n\u2211\nS:V\u2208S\nAV ,S (V;S),\n4 Vol:.(1234567890) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nThe volume VB(B) of a body B is defined using the Divergence Theorem in terms of the volume contributions VS of each surface that defines the body,\nHere \u03b1(B,S) = 1 when the normal vector of surface S is outward-facing with respect to body B , and \u03b1(B,S) = \u22121 when the normal vector of S is inward-facing. The volume contribution of each surface is defined as a summation of volume contributions VT of the triangles in the triangulation of the surface,\nand the volume contribution of each triangle is calculated using (3) and (5),\nIt follows that the volume VV (V) of a vertex V is the sum of volume contributions of the vertex to each body that it defines,\nwhere the volume contribution of a vertex to a body is defined as proportional to the volume of the body (12) and relative area contribution of the vertex to the body using (8) and (11),\nThe vertex drag MV of (1) is derived by considering the equivalent equation of motion for a body when treated as a particle. The VM methodology assumes that a body B subjected to a uniformly applied force exhibits a corresponding bulk displacement proportionally to a drag \u03c1(B)VB(B) and experiences no deformation. On the basis of vertices, the equivalent drag of a vertex with respect to a body is then equal to the volume contribution of the vertex to the body and body drag parameter \u03c1(B) such that\nFor a two-dimensional VM, the same derivations hold but for surfaces using (11)."
        },
        {
            "heading": "Actors",
            "text": "The structure of the VM methodology provides a consistent framework for defining VM properties and processes on the basis of various mesh objects and deriving their corresponding forces on the vertices that define those mesh objects. In general, we refer to a model that produces forces on vertices to implement a VM object property or process an actor. The definition of an actor can consist of explicit or implicit forces that result from the configurations of various mesh objects, so long as it resolves to a description of forces on vertices. Typical biological models include multiple actors, and the VM methodology assumes that all actors act simultaneously.\nExplicit traction forces that uniformly act on a surface directly translate to forces acting on the vertices of the surface using (11). For a uniform traction force \u03c4i(S) acting on surface S , a corresponding force f V ,Si (V;S) acts on each vertex V that defines the surface,\nLikewise, body forces that uniformly act on a body directly translate to forces acting on the vertices of the body using (16). For a uniform body force f Bi (B) acting on body B , a corresponding force f V ,B i (V;B) acts on each vertex V that defines the surfaces of the body,\nEnergy-based actors can define forces through a scalar-valued function that defines an effective energy. Any effective energy that can be written in terms of the position of one or more vertices implicitly describes forces acting on those vertices, where the forces act to minimize the effective energy. In general, an effective energy function H that can be written in terms of the position of a vertex V implicitly describes a corresponding force f V ,Hi (V),\n(11)A V ,S (V;S) =\n1\n2\n\u2211\nT \u2208T(S):V\u2208T\nAT (T ).\n(12)V B(B) =\n\u2211\nS\u2208B\n\u03b1(B,S)VS (S).\n(13)V S (S) =\n\u2211\nT \u2208T(S)\nVT (T ),\n(14)VT (T ) = 1\n6 CSi (S)\u03b7 T i (T ), T \u2208 T(S).\n(15)V V (V) =\n\u2211\nB:V\u2208Z(B)\nVV ,B(V;B),\n(16)VV ,B(V;B) = VB(B)\nAB(B)\n\u2211\nS\u2208B\nAV ,S (V;S).\n(17)M V (V) =\n\u2211\nB:V\u2208Z(B)\n\u03c1(B)VV ,B(V;B).\n(18)f V ,Si (V;S) = A V ,S (V;S)\u03c4i(S), V \u2208 S .\n(19)f V ,Bi (V;B) = VV ,B(V;B)\nVB(B) f Bi (B), V \u2208 Z(B).\n5 Vol.:(0123456789) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nFor example, suppose an effective energy Hadh(B1,B2) describes adhesion between bodies B1 and B2 . A scalar-valued monotonic function of the area of their shared surfaces (i.e., B1 \u22c2\nB2 ) produces compressive forces in shared surfaces when the function is monotonically increasing, and tensile forces in shared surfaces when the function is monotonically decreasing. In the simplest case, a linear function of surface area as defined in (6) and an adhesion parameter adh(B1,B2) can produce such behavior,\nUsing (6), (7), (5) and (3), (20) can produce a compact expression for the force f V ,adhi (V) acting on each relevant vertex according to (21),\nCurrently available actors developed in this work are described in Implementation."
        },
        {
            "heading": "Dynamic topology",
            "text": "Changes in mesh topology are temporally discrete events. These events occur whenever connectedness of mesh objects change or when mesh objects are created or destroyed (e.g., at mitosis, cell death, junctional rearrangement). The VM methodology supports changes to the topology of a mesh while enforcing the defined rules for mesh objects (e.g., a surface is a cycle of three or more vertices). The VM methodology applies local operations that transform the topology of the mesh to improve the quality of the mesh, called quality operations. For example, when the area of a surface becomes sufficiently small, the VM methodology converts the surface into a vertex (i.e., a T2 transformation, Fig.\u00a02). In general, a quality operation can occur when its condition is satisfied, and the connectivity of each mesh object can be affected by a quality operation at most once per simulation step. This work primarily focuses on quality operations for two-dimensional simulations. The transformations on three-dimensional meshes are more complex and we will discuss them in future work. For example, a geometric criterion for the T2 transformation is well defined (see below) but, to our knowledge, no general criterion exists to define a reverse T2 transformation in a three-dimensional VM, which would describe the topological dynamics of the surfaces of a cell infiltrating across a monolayer (e.g., during transendothelial extravasation by neutrophils).\nWhen two connected vertices approach each other, the area of the triangle that they both define goes to zero according to (5) and (7). As such, the two vertices are merged into one vertex in a vertex merge operation (Fig.\u00a02, top row left). The vertex merge operation is restricted to only occur for vertices that define surface cycles of four or more vertices, since the operation decrements the number of vertices that define at least one surface. One vertex of a vertex merge operation is randomly selected for removal, and the removed vertex is replaced by the remaining vertex in the cycle of all surfaces that the removed vertex defines.\nA vertex split operation creates a new, connected vertex from an existing vertex (Fig.\u00a02, top row right). The criterion for the vertex split operation is adapted from18, which derives an analytic expression for the growth rate of an edge that would be created during a candidate vertex split from a given effective energy and vertex connectivity, and accepts the vertex split on the condition that the edge would grow. Since the VM methodology does not impose any set of actors or upper bound on the connectedness of a vertex, it instead employs an approximation for the growth rate of an edge that would be created by a candidate vertex split operation using the connectedness of a vertex and local forces (Fig.\u00a03). The total relative force on all connected vertices of the candidate vertex is calculated relative to the force acting on the candidate vertex. A candidate topology is calculated from a cut plane that intersects the candidate vertex and normal to the total relative force on all connected vertices. In the candidate topology, the two vertices of the split are connected and separated by a small and equal displacement along or opposite the normal of the cut plane, moving from the candidate vertex, and all vertices connected to the candidate vertex are instead connected to whichever vertex of the split is on the same side of the cut plane. The total relative force on all connected vertices of each vertex of the split is calculated, excluding the force contribution by the vertices of the split, where each vertex of the split is assumed to experience half the force experienced by the candidate vertex. The vertex split operation is accepted when the total relative force on each vertex of the split is oriented away from the cut plane (i.e., when the new edge is in tension). It follows that a T1 transformation consists of consecutive vertex merge and vertex split operations.\nLike the vertex merge operation, the VM methodology defines the surface demote operation to handle when a surface becomes too small (Fig.\u00a02, middle row). In such a scenario, the area of the surface goes to zero according to (6), as does the area of all triangles of its triangulation according to (7) and the area contribution of the vertices that define it according to (11). The surface demote operation handles this scenario by creating a new vertex at the centroid of the surface according to (3) and then replacing the surface with the new vertex. Connectivity of the new vertex is determined by replacing all vertices in the cycle of the removed surface with the new vertex in the cycle of each surface that was connected to the removed surface (Fig.\u00a04A). For connected surface cycles with multiple replaced vertices (i.e., one or more edges), the replacement inserts the new vertex once. Connected surface cycles with less than three vertices as a result of the replacement are also removed to prevent invalid mesh topologies. The surface demote operation only occurs for surfaces that do not define body sets of four surfaces,\n(20)f V ,Hi (V) = \u2212 \u2202H\n\u2202ri(V) .\n(21)H adh(B1,B2) = adh(B1,B2) \u2211\nS\u2208B1 \u22c2 B2\nAS (S).\n(22)f Vi (V) = \u2212 adh(B1,B2)\n2\n\u2211\nS\u2208B1 \u22c2 B2\n\u2211\nT \u2208T(S)\n\u2202\ufffd\u03b7Tj (T )\ufffd\n\u2202ri(V) , \u2200V \u2208 Z\n(\nB1\n\u22c2\nB2\n)\n.\n6 Vol:.(1234567890) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nsince the operation decrements the number of surfaces in all body sets that contain the removed surface. As such, the surface demote operation cannot remove a body from a mesh but can remove one or more connected surfaces, which significantly decreases the algorithmic complexity of handling topological changes. The surface demote operations performs a T2 transformation.\nThe VM methodology defines the body demote operation to handle when a body becomes too small. When a body becomes too small, its volume goes to zero according to (12), and so on for the area of each surface in its set, the area of each triangle, and the area and volume contributions of each vertex. The body demote operation creates a new vertex at the centroid of the body according to (9) and then replaces the body with the new vertex. The body demote operation also removes all bodies that are invalidated by the operation, as well as the surfaces that define them but no remaining bodies (Fig.\u00a04B). The body demote operation first determines which, if any, additional bodies are removed by the following algorithm,\n1. Initialize the current set of removed bodies as the removed body of the body demote operation. 2. Get the current set of surfaces of the current set of removed bodies. 3. Get all surfaces that would be removed by performing a surface demote operation on each surface in the\ncurrent set of surfaces. 4. Add any bodies to the current set of removed bodies that are invalidated by 3. 5. If any bodies were added to the current set of removed bodies in 4, then go to 2.\nFigure\u00a02. Examples of automatic mesh quality operations in two-dimensional simulation. Vertices are merged when they are too close (\u201cVertex merge\u201d) and a vertex splits if the resulting edge is predicted to grow (\u201cVertex split\u201d, top row). A surface becomes a vertex if its area is too small (\u201cSurface demote\u201d, middle row). Two surfaces collide if a vertex from a surface penetrates the perimeter of a nearby surface (\u201cVertex insert\u201d, bottom row). Quality operations on bodies convert a body to a vertex when the volume of the body is too small. T1 and T3 transformations are completely reversible by automatic mesh quality operations, whereas T2 transformations can be reversed by replacing a vertex with a surface.\n7 Vol.:(0123456789) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nAfter determining which bodies are removed, the body demote operation removes those bodies and the surfaces that only define them. The body demote operation then performs a surface demote operation on each surface that defines both one of the bodies that was removed and a body that was not removed.\nThe VM methodology defines the vertex insert operations to handle when two unconnected surfaces collide. When a vertex of a surface penetrates the edge of an unconnected surface, the vertex is inserted into the cycle of the unconnected surface, between the two vertices of the penetrated edge. The vertex insert operation performs the T3 transformation. Note that a vertex split operation can disconnect two connected surfaces if they share only one vertex (Fig.\u00a02, bottom row)."
        },
        {
            "heading": "Implementation",
            "text": "The VM methodology is implemented as a module and solver of Tissue Forge, a particle-based modeling and simulation environment17. The Tissue Forge module, which we refer to as the VM module, consists of (1) a user interface for model object-, type- and event-based specification and mesh creation and manipulation; (2) methods for simulation data visualization, importing and exporting; and (3) the solver, which we refer to as the VM solver. In the Tissue Forge implementation, a vertex corresponds to an underlying Tissue Forge particle. The VM solver translates a VM specification and the configuration of a mesh into properties of, and forces on, those Tissue Forge particles for integration according to (1) for a domain with no-flux boundary conditions. After Tissue Forge updates the position of each particle using explicit time integration, the solver then implements quality operations according to the configuration of the mesh.\nThe VM solver automatically disables the vertex insert operation when three-dimensional objects are present in a simulation, since quality operations for three-dimensional collisions are not currently defined. Hence, three-dimensional collision detection is reserved for future work. The VM module provides an interface to particularize all parameters associated with each quality operation (e.g., split distance, Fig.\u00a03), or to completely disable all quality operations (i.e., simulate a static topology). The VM solver also implements VMs with fixed vertex drag by default, and uses the variable formalism for vertex drag presented in this manuscript when a model specification provides a drag parameter as in (17).\nLike the rest of current Tissue Forge (v0.1.0), the VM module supports modeling and simulation in the C, C++ and Python programming languages, and interactive simulation in IPython and Jupyter Notebooks. Custom simulations events (e.g., mesh object creation, modification and destruction) can occur at any time during simulation. VM simulations can be saved and loaded to and from file, and mesh objects can be created using exported data from popular mesh modeling software like Blender in various three-dimensional data formats (e.g., \u201c.blend\u201d, \u201c.obj\u201d, \u201c.stl\u201d).\nFigure\u00a03. Diagram of a possible vertex split operation on a candidate vertex. The total relative force (green arrow) on connected vertices is calculated with respect to the force acting on a candidate vertex (top left). A candidate topology is calculated from a cut plane that intersects the candidate vertex with a normal along the total relative force, which places two vertices of the split operation on opposite sides of the cut plane and separated by a small distance (i.e., the \u201csplit distance\u201d, bottom left). The vertex split operation is accepted when the newly created edge of the vertex split operation (green dashed line) is predicted to be in tension (top right) and rejected when in compression (bottom right). Circles and lines indicate vertices and edges, respectively. Blue and orange vertices indicate the vertices that define two different surfaces in the candidate topology. Blue and orange arrows indicate the total relative force on each vertex of the split operation in the candidate topology.\n8 Vol:.(1234567890) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nThe VM module follows the main principles of the Tissue Forge user interface for specifying objects and dynamics in a model. A two-dimensional Tissue Forge VM specification defines surface types, and a threedimensional specification also defines body types. Surface and body types are categorical descriptors by which surface and body instances, respectively, are identified for type-based model descriptions. As such, each surface is an instance of a surface type, and each body is an instance of a body type. A Tissue Forge VM specification creates instances of actors and applies them to mesh objects by instance or type, which in Tissue Forge is called binding. Binding actors to mesh objects and types is additive in that successive binding operations of various actors to the same object or type constructs a summation of model terms that describe the dynamics of the object or type. Actors allow modifications to the parameters of the model that they implement so that the dynamics of objects or types can be changed during simulation. At the time of writing this manuscript, the VM module provides the following actors for binding to surfaces and surface types,\nAdhesion Models adhesion as a compressive or tensile force that acts along the shared edges of connected surfaces. Convex polygon constraint Imposes a force so that surfaces are convex. Automatically applied. Edge tension Applies a tensile force between connected vertices of surfaces.\nFigure\u00a04. Automatic mesh quality operations can convert surfaces and bodies to a vertex. (A) Schematic of a surface demote operation, which converts a surface to a vertex. Beginning with an initial set of connected surfaces (top), a surface is selected for conversion to a vertex (middle, red). A new vertex (green dot) is created at the centroid of the selected surface, and the connectivity of the new vertex (green lines) is determined by replacing the vertices of the converted surface that define surfaces connected to it (relevant edges shown as blue lines). Connected surfaces that are invalidated by the operation are also removed (bottom). (B) Consecutive body demote operations, which convert a body to a vertex, on a mesh of connected cubes. From top to bottom, cubes are selected (white) and made to reduce their volume to zero, resulting in a body demote operation. A body demote operation that does not invalidate any other body only converts its target body to a vertex, but any invalidated body is also converted to the resulting vertex (bottom two rows).\n9 Vol.:(0123456789) Scientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nFlat surface constraint Imposes a force so that surfaces are flat. Automatically applied. Normal stress Uniformly applies a force on surfaces along their normal vector. Perimeter constraint Applies a force between connected vertices of surfaces so that their perimeter tends towards a value. Surface area constraint Applies a surface pressure so that the area of surfaces tends towards a value. Surface traction Uniformly applies a force over surfaces.\nFor bodies and body types, the VM module provides the following actors,\nAdhesion Models adhesion as a compressive or tensile force that acts on the shared surfaces of connected bodies. Body force Uniformly applies a force over bodies. Surface area constraint Applies a surface pressure so that the surface area of bodies tends towards a value. Volume constraint Applies a pressure so that the volume of bodies tends towards a value.\nExpressions for all implemented actors are available in Supplementary Text S2. The software implementation of the actor formalism facilitates community-driven development and project-specific customization by modularizing each actor into separate source code with a simple interface. Adding a new actor to the VM module, including loading from and saving to file and adding to all supported software language interfaces, almost entirely consists of developing the source code to implement the actor itself.\nThe VM module supports constructing and modifying a mesh at various levels of detail. Individual mesh objects can be manually constructed and assembled (e.g., explicitly creating vertices, then surfaces from vertices, then bodies from surfaces; splitting a surface or body into two), and the VM solver will respect the topology of the assembled mesh. The VM module provides a library of functions for rapidly generating primitive two- and three-dimensional meshes, which can be further refined into more complex meshes (Fig.\u00a05A). Mesh objects can also be constructed from imported data in three-dimensional file formats using built-in Tissue Forge functionality (Fig.\u00a05B,C). Mesh manipulations can also be performed during simulation through Tissue Forge events, which allows for implementing model events like cell division and wounding a tissue. The VM solver also provides support for using various Tissue Forge modeling features like explicit forces or bonded interactions (Fig.\u00a05D). Mesh objects can be repeatedly modified during simulation to construct shapes relevant to modeling epithelial like the scutoid19 (Fig.\u00a05E).\nThe VM solver employs a number of performance-enhancing strategies to provide real-time, interactive VM simulation. Vertices, surfaces and bodies are stored in contiguous blocks of memory, which are automatically reallocated if more mesh objects are requested during a simulation. Each vertex, surface and body is assigned a unique identification integer that corresponds to its location in the array of vertices, surfaces and bodies, respectively. The VM module user interface provides handles to safely interact with mesh objects during simulation (e.g., in the event of memory reallocation). Each mesh object stores a reference to all mesh objects that define it, and to those that it defines, which are also refreshed during reallocation of mesh objects. This internal referencing scheme leverages the actor formalism, which implements a model in terms of forces on vertices, to safely parallelize the computations of VM dynamics over all mesh vertices. Rendering is parallelized over surfaces, and surfaces are rendered by assembling triangles according to the triangulation of each surface.\nQuality operations are parallelized such that all changes to mesh topology in a simulation step occur in parallel without race conditions. We consider operations at each level of the hierarchy of mesh objects from most primitive (vertices) to most complex (bodies). For each level of the hierarchy, we calculate all operations that could happen. We accept operations that do not affect any mesh object that is affected by any other operation, or that was affected by operations at previously evaluated levels of the hierarchy. We order the evaluation of operations by assigning a priority to each operation based on the mesh object that \u201cowns\u201d the operation, where the priority of the operation increases with decreasing identification integer of the owning mesh object. For vertex merge operations, the vertex with the lesser identification integer owns the operation. For vertex split operations, the vertex that splits owns the operation. For surface and body demote operations, the removed surface and body, respectively, owns the operation. For vertex insert operations, the penetrated surface owns the operation. Creation and destruction of mesh objects are serial procedures, since they affect contiguous memory of stored mesh objects (and particles, in the case of vertices). We also require that each operation leaves the mesh in a valid state (e.g., no surfaces with less than three vertices) to eliminate the need for mesh cleanup after all operations are performed, and also to make each operation available for mesh modification during simulation construction. Otherwise, parallelization of operations employs standard multithreading features (e.g., mutexes) to evaluate all operation criteria and perform all operation-specific peripheral calculations in parallel. Rendering is parallelized over surfaces, and surfaces are rendered by assembling triangles according to the triangulation of each surface."
        },
        {
            "heading": "Results",
            "text": "This section presents results using the VM methodology as described in \u201cModels and Methods\u201d. Results are intended to convey some (but not all) of the most critical features and capabilities of the VM methodology relevant to applications in cell-based spatial modeling. All models were developed with unitless dimensions and simulated using our implementation in Tissue Forge.\n10\nVol:.(1234567890)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nFigure\u00a05. Select examples of vertex model capabilities in Tissue Forge. (A) Mesh generators can quickly assemble simple meshes (left), which can be subsequently transformed into different shapes and topologies (right). (B) Complex 3D meshes describing tissue structures like a vasculature are developed in mesh-editing software like Blender and imported to create executable vertex-model meshes. See Supplementary Code S3. (C) Detailed views of the Tissue Forge mesh that was generated from the imported Blender mesh shown in (B). (D) A model can impose event-based manipulations on a mesh during simulation, or apply modeling features from Tissue Forge. From left to right, a two-dimensional tissue is wounded during simulation by removing a surface, and contractility is applied to every edge along the wound using Tissue Forge bonded interactions. (E) Iterative modification of a three-dimensional body. Initially, the body consists of an extruded pentagon with a volume constraint and surface edge tension (left) and is converted to a 5\u20136 scutoid by cutting the body at a corner (left-middle). After relaxation (middle), the same operation can be performed on any vertex of the body (rightmiddle) and relaxed to a new equilibrium shape (right).\n11\nVol.:(0123456789)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x"
        },
        {
            "heading": "Cell sorting",
            "text": "Multicellular aggregates of two different types, when initially randomly distributed, will rearrange by type. The differential adhesion hypothesis proposes that rearrangement by type occurs through minimization of intercellular adhesion energy20. The same has been shown using cell-based modeling methodologies like the Cellular Potts model21 and vertex modeling22.\nThe Tissue Forge implementation of the VM methodology well supports modeling and simulation of cell sorting in multicellular aggregates. We reproduced the two-dimensional cell sorting simulation from22 using the built-in actors provided in the Tissue Forge implementation of the VM methodology. The VM of cell sorting represents each cell as a surface, and models a deformable cell area using a surface area constraint, cell circularity using a perimeter constraint, intercellular adhesion (e.g., cadherins, homophilic and heterophilic adhesion), cell-environment adhesion using edge tension, and random motility using a Tissue Forge built-in random force (applied to vertices). The total effective energy of each cell S of type \u03c4(S) for the surface area constraint, perimeter constraint, edge tension and adhesion is\nHere AS(S) is the area of cell S as defined in (6), Ao(\u03c4 ) is the target area of type \u03c4 , L(S) is the perimeter of cell S , Lo is the target perimeter of type \u03c4 , C ( S ,S \u2032 )\nis the length of edges shared by cells S and S \u2032 , N(S) is the set of surfaces connected to S , and area(\u03c4 ) , per(\u03c4 ) , ten(\u03c4 ) and adh(\u03c4 ) are area constraint, perimeter constraint, edge tension and adhesion model parameters of type \u03c4 , respectively. Note that the original model includes cell-environment adhesion using a surface energy term and does not use edge tension. Our implementation accomplishes the same with edge tension and appropriate adjustment in adhesion parameters. Note also that the Tissue Forge implementation of VM adhesion counts adhesion energy on the basis of edge (hence the premultiplier of one-half), whereas the original model counts adhesion energy along an edge for each surface that shares the edge. We used a merge distance (i.e., the distance threshold below which a vertex merge operation is performed on two vertices) equal to that of the original model and assumed a split distance equal to twice the merge distance (to prevent automatic successive vertex split and merge operations). We also applied a random force of equal magnitude as that in the original model to all vertices, and used a time step equal to half the value in the source simulation, as we found that the vertex split operation could cause numerical instabilities when using the original time step value (Table\u00a01). To compare results to those of the original simulation, we quantified cell sorting by computing the fractional length of heterotypic boundaries every 100 simulation steps, where the fractional length at each reported time is the total length of heterotypic boundaries normalized by the same measurement at time 0. For the source code for our implementation, see Supplementary Code S4.\nThe simulation was initialized as a square and each cell was randomly assigned to one of the two cell types. The simulation was executed for 1000\u00a0h of simulation time (400,000 steps, Fig.\u00a06). In general, sorting by phenotype occurred similarly to the original simulation and at a comparable rate. By simulation time 100, stratification had already occurred as evidenced by three major aggregates of one of the cell types (shown as white in Fig.\u00a06A) and a few smaller aggregates by cell type. Rounding of phenotypic aggregates also occurred by simulation time\n(23) H(S) = area(\u03c4 (S))\n( AS (S)\u2212 Ao(\u03c4 (S)) )2 + per(\u03c4 (S)) ( L(S)\u2212 Lo(\u03c4 (S)) )2\n+ ten(\u03c4 (S)) \u2211\nV j\u2208S\n\ufffdri ( V j ) \u2212 ri ( V j+1 ) \ufffd + 1\n2\n\u2211\nS \u2032\u2208N(S)\nadh\n( \u03c4(S), \u03c4 ( S \u2032 )) C ( S ,S \u2032 ) .\n12\nVol:.(1234567890)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\n1000, demonstrating minimization of adhesion energy at heterotypic interfaces. We also observed marginally slower organization by phenotype than the original simulation, the cause of which is currently unclear, whether due to system stochasticity and sensitivity to the initial configuration of the system, or to differences in methods related to topological dynamics (Fig.\u00a06B). Simulations were performed on an Intel i9-12900H and required approximately 1.15\u00a0ms per simulation step."
        },
        {
            "heading": "Cell migration",
            "text": "The VM module in Tissue Forge provides a straightforward way to develop and employ models that combine explicit models of cell shape using vertex modeling with particle-based biophysical models that Tissue Forge naturally supports. Computational models of the biomechanical and biomolecular details of cell migration can be constructed using such mixed-method approaches, where a vertex model describes the shape of a cell, and particle-based models describe the extracellular matrix (ECM) and its interactions with cells leading to changes in cell shape. In general, integrin transmembrane receptors link the cell cytoskeleton to nearby ECM proteins, which serve as anchors for the cytoskeleton that then generates protrusive (e.g., through pseudopodia, lamellipodia and/or filopodia) or contractile (e.g., through stress fibers) forces23.\nWe developed a simple, quasi-two-dimensional model of cell migration over a substrate of ECM. The model considers the migration of a single cell represented as a surface according to the VM methodology. Our simulation initializes a single cell as a hexagon of area 1.0 on a substrate of ECM and imposes a bias on the cell such that it migrates across the spatial domain through interactions with the substrate. To show that interactions with the ECM produce cell migration, the substrate in the simulation is initialized as a distribution of ECM fibers of random length and orientation within the space between two sine waves of fixed width, amplitude, and period, which constrains the possible trajectories that the cell can travel along. The total effective energy of the cell includes an area constraint and edge tension,\n(24)H(S) = area\n( AS (S)\u2212 Ao )2 + ten \u2211\nV j\u2208S\n\ufffdri ( V j ) \u2212 ri ( V j+1 ) \ufffd 2 ,\nFigure\u00a06. Simulation of cell sorting in Tissue Forge. (A) A multicellular aggregate is initialized with a random distribution of two cell types (type 1, red and type 2, white). The aggregate organizes by cell type through differential adhesion. (B) Fractional length of heterotypic contacts over the first 100\u00a0h of simulation. Fractional length at each reported time is measured as the total length of heterotypic contacts at the reported time divided by the same measurement at time 0.\n13\nVol.:(0123456789)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nwhere AS(S) is the area of cell S , Ao is a target area, and area and ten are the strengths of the area constraint and edge tension, respectively.\nThe model describes a biochemically homogeneous ECM arranged as individual, interacting, deformable fibers, where each fiber consists of particles that represent segments of ECM fiber, henceforth referred to as fiber segment particles. Each fiber is a Tissue Forge cluster, which permits defining different interactions between fiber segment particles in the same and different fibers. Each fiber is assembled by placing fiber segment particles along a line and then assigning a Tissue Forge bonded interaction (i.e., an interaction that occurs between an explicit sets of particles) between neighboring fiber segment particles. A bonded interaction between adjacent fiber segment particles of the same fiber models tensile rigidity using the potential,\nwhere r is the distance between the bonded two particles, ro,tensile is a target length, and ktensile is the fiber elastic modulus. A second bonded interaction between a fiber segment particle and the two adjacent fiber segment particles in the same fiber models bending rigidity using the potential,\nwhere \u03b8 is the angle between the two adjacent fiber segment particles, \u03b8o,bending is a target angle and kbending is the fiber bending modulus. We consider adhesion and neglect friction between fibers by modeling the interactions between fibers as interactions between fiber segment particles in different fibers according to the potential,\nwhere ro,inter is a target length and kinter and ainter are the fiber adhesion magnitude and width parameters, respectively.\nWe model integrins as particles that are constrained to lie within the area occupied by the cell. Each integrin particle interacts with a fiber through a bonded interaction between the integrin and a fiber segment particle. The bonded interaction between an integrin and fiber segment particle occurs according to the potential,\nwhere ro,integ is a target length and kinteg is the fiber-integrin elastic modulus. Our model considers protrusive forces generated by the cytoskeleton (through polymerization of cytoskeletal elements) on the cell membrane. We model the cytoskeleton as bonded interactions between each integrin and the two leading vertices of the cell (here, the right-most two vertices), which is possible in the Tissue Forge implementation of the VM methodology because each vertex corresponds to an underlying Tissue Forge particle. Bonded interactions between integrins and vertices occur according to the potential,\nwhere kcyto is the cytoskeleton model parameter. Hence, deformations in cell shape occur through coupling of the cytoskeleton and local ECM.\nWe assume that the cell has a fixed number of integrins, and that recycling of integrins is governed by cell shape, location of each integrin on the cell (i.e., in the area occupied by the cell), and the ECM distribution in the neighborhood of the cell. When an integrin is created, a fiber segment particle is randomly selected within a distance of 5% and 25% of the circumradius of the initial cell shape from the leading edge of the cell, and the integrin is placed on the cell directly above the selected fiber segment particle. We assume a polarized state by implementing a pre-established, fixed \u201cforward\u201d direction of migration (i.e., the direction along which the cell tends to move), where the two forward-most vertices of the cell at the time of integrin creation define the leading edge (i.e., which edge is the leading edge can change). Once bonded interactions are established between an integrin and the two vertices of the leading edge, the bonded interactions do not change vertices (e.g., when a different edge becomes the leading edge). A bonded interaction between an integrin and a vertex is destroyed when the length of the bonded interaction exceeds 150% of the circumradius of the initial cell shape. An integrin is destroyed when either its position is no longer in the area occupied by the cell, or both of its bonded interactions with vertices of the cell are destroyed. Model events for creation and destruction of integrins are implemented using the Tissue Forge event system. All interaction potentials and bonded interactions are implemented using built-in Tissue Forge features. All parameters of the model are listed in Table\u00a02. The source code for our implementation is available in Supplementary Code S5.\nSimulation showed that the model readily produces a cell that migrates along an ECM substrate and therefore demonstrates the ability to generate testable predictions of force generation and plastic deformation of the ECM during single cell migration (Fig.\u00a07). After 2000 simulation steps, the simulated cell traversed most of the substrate while leaving behind observable deformations in the fibers of the ECM (Fig.\u00a07, inset). Changes in the ECM distribution were also observed as nearby fibers accumulated due to inter-fiber adhesion. Changes in cell shape tended to orient the leading edge of the cell orthogonally to the path of the substrate, which we also observed in test simulations that used more than six vertices to model cell shape.\n(25)Utensile(r) = ktensile ( r \u2212 ro,tensile )2 ,\n(26)Ubending (\u03b8) = kbending ( \u03b8 \u2212 \u03b8o,bending )2 ,\n(27)Uinter(r) = kinter ( 1\u2212 e\u2212a inter(r\u2212ro,inter) )2 ,\n(28)Uinteg (r) = kinteg ( r \u2212 ro,integ )2 ,\n(29)Ucyto(r) = kcytor,\n14\nVol:.(1234567890)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nName Symbol Value\nTime step n/a 0.01\nNumber of integrins n/a 100\nNew integrin distance range from leading edge n/a [0.0310, 0.155]\nMaximum integrin bond length n/a 0.921\nFiber particle length range n/a [10, 100]\nSubstrate width n/a 1.00\nSubstrate period n/a 4.00\nDamping coefficient\u2014vertices\nM\n1.00\nDamping coefficient\u2014fiber segment particles 1.00\nDamping coefficient\u2014integrins 0.100\nTarget area Ao 1.00\nStrength of the area constraint area 1.00\nStrength of the edge tension ten 0.500\nFiber tensile target length ro,tensile 0.0100\nFiber elastic modulus ktensile 10.0\nFiber bending target angle \u03b8o,bending \u03c0\nFiber bending modulus kbending 1.00 \u00d7 10\u20134\nFiber adhesion target length ro,inter 0.0200\nFiber adhesion magnitude parameter kinter 0.00100\nFiber adhesion width parameter ainter 12.0\nFiber-integrin target length ro,integ 0.0100\nFiber-integrin elastic modulus kinteg 1.00\nCytoskeleton model parameter kcyto \u2212\u00a00.0100\nFigure\u00a07. Simulation of single cell migration over extracellular matrix fibers using combined vertex- and particle-based modeling in Tissue Forge. Integrins (green particles) bind to extracellular matrix fibers (red particles) and generate protrusive forces (green lines) on the vertices that describe the shape of the cell (red polygon). Detailed view shows deformations in the ECM caused by force generation during cell migration.\n15\nVol.:(0123456789)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x"
        },
        {
            "heading": "Discussion",
            "text": "The VM methodology supports a flexible mesh structure with no upper bound on vertex order and defines a flexible, physics- and vertex-based formalism for describing VM dynamics. The Tissue Forge VM module exploits this formalism to provide a modular and extensible software package that seamlessly integrates with Tissue Forge particle-based modeling features, allowing for convenient, powerful, mixed-method modeling. The Tissue Forge VM module is general-purpose, publicly available, open-source vertex modeling and simulation software with permissible licensing. The module supports collaborative model development in multiple languages, interactive simulation execution with real-time visualization, and the generation of publishable and sharable results.\nThe VM module provides for vertex models useful modeling and simulation capabilities already available in Tissue Forge for particle-based modeling. For example, the Tissue Forge event system provides a straightforward way to develop application-specific event-driven simulation and agent-based models. The VM module also supports declarative model specification and construction of vertex models through cumulative application of individual vertex model mechanisms at the levels of both model objects and object types (i.e., binding actors to objects and object types). The VM module provides a sizable collection of built-in actors and supports developing and distributing additional actors in the C++ and C programming languages.\nWe demonstrated both the vertex model example of cell sorting (Fig.\u00a06) and a novel, multi-method model of cell migration on a deformable fiber ECM (Fig.\u00a07). The ability to combine vertex and particle-based models may be especially helpful when developing detailed multicellular models of tissues that consider biophysical aspects that particle-based methods are well-suited to describe (e.g., transport dissipative particle dynamics modeling of convection, as already supported by Tissue Forge). With the work in this project, Tissue Forge now supports combining vertex-based and particle-based modeling methods as appropriate for a particular modeling application.\nReproducing an existing vertex model simulation of cell sorting showed differences that will require methodological research. Our simulations required a smaller time step than that of the source paper to produce a stable simulation. Cell sorting was also slightly slower than in the source simulation for identical model parameters. A likely cause of these differences is the difference in handling the T1 transformation. T1 transformations in our methodology occur as a result of consecutive vertex merge and vertex split operations (as depicted in Fig.\u00a02), which occur as a consequence of the mechanics of the vertices and are not imposed (e.g., a vertex split operation is not forced to occur after a vertex merge operation). In the reproduced simulation, the T1 transformation always occurs when two vertices are sufficiently close, and the resulting two vertices are arranged such that their edge is orthogonal to the edge of the original two vertices24. Our approach does not assume a configuration of the resulting edge during the T1 transformation, but instead calculates it from local forces. If these differences in methodology cause differences in numerical stability and simulation results like those that we observed, then the T1 transformation of the original simulation may neglect significant effects of highly localized mechanical forces (which are considered in our methodology) by constraining junctional rearrangement to configurations that are independent of local forces. Future work should investigate the consequences of such methodological differences in terms of their effects on both numerical stability and emergent behavior using simpler multicellular systems. Of particular interest to describing multicellular organization is the extent to which allowing more permissive mesh topologies such as is provided in our methodology aligns with observed junctional rearrangement in experiments.\nThe quality operations presented here currently target flat or convex surfaces, resulting in stable support for two-dimensional vertex modeling, and limited support for complex three-dimensional vertex modeling. These operations include all well-established two-dimensional topological transformations, including the so-called T1, T2 and T3 transformations, as well as reverse transformations for both T1 and T3 transformations. Future efforts will expand support for three-dimensional vertex modeling, such as defining and implementing a reverse T2 (i.e., a \u201csurface promotion\u201d operation) transformation in complex three-dimensional meshes. Additionally, future work will develop support for periodic boundary conditions, vertex-surface collision events (i.e., three-dimensional T3 transformations), edge-based mesh actors, convenience features for supporting detailed data generation and analysis, generalization of vertex model specification, and two- and three-dimensional state-based modeling to allow for mixed-method particle transport and diffusion on and across surfaces."
        },
        {
            "heading": "Conclusion",
            "text": "This work developed a VM methodology and implemented it in the open-source, publicly available Tissue Forge modeling and simulation environment. Our work provides a general and extensible framework for developing and employing vertex models of multicellular systems in multiple programming languages, with robust support for collaborative model development and sharing of simulation results. Implementation of our VM methodology in Tissue Forge provides a straightforward path to combining vertex- and particle-based methodologies for new modeling applications. Our hope is that the work presented here provides readily available vertex modeling capability for a broad range of applications in the life sciences and lowers the barrier to employing well-established vertex models by researchers with little to no background of software development. We invite biologists, modelers and software developers to provide feedback and contribute new features and/or feature requests throughout continuing development and improvement of our VM methodology and its implementation in Tissue Forge."
        },
        {
            "heading": "Data availability",
            "text": "Implementation source code is publicly available at https:// github. com/ tissue- forge/ tissue- forge. Source code for all simulations is available in Supplementary Information.\nReceived: 2 May 2023; Accepted: 16 October 2023\n16\nVol:.(1234567890)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x"
        },
        {
            "heading": "Acknowledgements",
            "text": "T.J.S. and J.A.G. acknowledge funding from National Institutes of Health Grant U24 EB028887. T.C. acknowledges funding from National Institutes of Health Grant T32-GM145443. S.M.P. acknowledges funding from National Institutes of Health Grant R01 HL155143-01. D.W.D. acknowledges funding from National Institutes of Health Grant R35 GM131865."
        },
        {
            "heading": "Author contributions",
            "text": "T.J.S. and T.C. contributed to conception and design of the work, acquisition, analysis and interpretation of data, creation of new software used in the work, and drafting and revision of the work. S.M.P. and D.W.D. contributed to revision of the work. J.A.G. contributed to conception of the work, analysis and interpretation of data, and revision of the work."
        },
        {
            "heading": "Competing interests",
            "text": "The authors declare no competing interests."
        },
        {
            "heading": "Additional information",
            "text": "Supplementary Information The online version contains supplementary material available at https:// doi. org/ 10. 1038/ s41598- 023- 45127-x.\nCorrespondence and requests for materials should be addressed to T.J.S.\nReprints and permissions information is available at www.nature.com/reprints.\nPublisher\u2019s note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.\n17\nVol.:(0123456789)\nScientific Reports | (2023) 13:17886 | https://doi.org/10.1038/s41598-023-45127-x\nOpen Access This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or\nformat, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article\u2019s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article\u2019s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http:// creat iveco mmons. org/ licen ses/ by/4. 0/.\n\u00a9 The Author(s) 2023"
        }
    ],
    "title": "General, open\u2010source vertex modeling in biological applications using Tissue Forge",
    "year": 2023
}