 The results, containing only the match signals, were again written back to the RAM using DMA. In the experiment a data rate of 1.33 GB/s could be achieved, which is sufficient to process incoming data from a 10 GBit/s network interface at line rate. Accordingly, our system would also be suitable for passing the ingress data from a network interface directly to the RFs. The filtered data can then be transferred with the DMA into the RAM, in order to process the data directly on the on-chip ARM CPU. Such a setup could be used, for example, as an IoT gateway that directly performs pre-processing of the received data. Alternatively, a SmartNIC can be implemented by forwarding the filtered data to a host CPU via PCIe. Thus, the RFs can significantly increase the achieved data rate or relieve the host CPU without a risk of performance degradation. Since the presented RFs require only a small amount of resources, even more RFs can be used to process multiple data streams in parallel. Furthermore, the programmable logic can be reconfigured, allowing the RFs to be replaced when a new query is to be executed. v. conclusion and future work Raw filters have the potential to relieve the CPU workload and create a potential speedup for CPU-bound stream processing applications. Even for I/O-bound applications, it may be possible to free up CPU cycles. Unlike CPU-based solutions, our versatile primitives allow us to filter a variety of different data sets. Moreover, the RFs can be configured
in such a way that the best possible FPR is achieved for a given resource requirement. Currently, the RFs are created manually by brute force searching for Pareto points.