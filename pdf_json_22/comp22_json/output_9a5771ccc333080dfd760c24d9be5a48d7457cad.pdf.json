{
    "abstractText": "The closed kinematic structure of Gough\u2013Stewart platforms causes the kinematic control problem, particularly forward kinematics. In the traditional hybrid algorithm (backpropagation neural network and Newton\u2013Raphson), it is difficult for the neural network part to train different datasets, causing training errors. Moreover, the Newton\u2013Raphson method is unable to operate on a singular Jacobian matrix. In this study, in order to solve the forward kinematics problem of Gough\u2013 Stewart platforms, a new hybrid algorithm is proposed based on the combination of an artificial bee colony (ABC)\u2013optimized BP neural network (ABC\u2013BPNN) and a numerical algorithm. ABC greatly improves the prediction ability of neural networks and can provide a superb initial value to numerical algorithms. In the design of numerical algorithms, a modification of Newton\u2019s method (QMn-M) is introduced to solve the problem that the traditional algorithm model cannot be solved when it is trapped in singular matrix. Results show that the maximal improvement in ABC\u2013BPNN error optimization was 46.3%, while the RMSE index decreased by 42.1%. Experiments showed the feasibility of QMn-M in solving singular matrix data, while the percentage improvement in performance for the average number of iterations and required time was 14.4% and 13.9%, respectively.",
    "authors": [
        {
            "affiliations": [],
            "name": "Zhongyuan Wang"
        },
        {
            "affiliations": [],
            "name": "Tao Lu"
        },
        {
            "affiliations": [],
            "name": "Yuntao Wu"
        },
        {
            "affiliations": [],
            "name": "Huizhi Zhu"
        },
        {
            "affiliations": [],
            "name": "Wenxia Xu"
        },
        {
            "affiliations": [],
            "name": "Baocheng Yu"
        },
        {
            "affiliations": [],
            "name": "Feng Ding"
        },
        {
            "affiliations": [],
            "name": "Lei Cheng"
        },
        {
            "affiliations": [],
            "name": "Jian Huang"
        }
    ],
    "id": "SP:f96824e77b64b1bacec5d45c8eb5f24453e8aa4c",
    "references": [
        {
            "authors": [
                "J.P. Merlet"
            ],
            "title": "Parallel Robots, 2nd ed.; Springer: Dordrecht",
            "venue": "The Netherlands,",
            "year": 2006
        },
        {
            "authors": [
                "Q. Wang",
                "J. Su",
                "Z. Lv",
                "L. Zhang",
                "H. Lin",
                "G. Xu"
            ],
            "title": "Efficient hybrid method for forward kinematics analysis of parallel robots based on signal decomposition and reconstruction",
            "venue": "Adv. Mech. Eng. 2017,",
            "year": 2017
        },
        {
            "authors": [
                "H. Sadjadian",
                "H.D. Taghirad"
            ],
            "title": "Numerical methods for computing the forward kinematics of a redundant parallel manipulator",
            "venue": "In Proceedings of the IEEE Conference on Mechatronics and Robotics, Germany, Aachen,",
            "year": 2004
        },
        {
            "authors": [
                "Y. Li",
                "Q. Xu"
            ],
            "title": "Kinematic analysis of a 3-PRS parallel manipulator",
            "venue": "Robot. Comput. Integr. Manuf",
            "year": 2007
        },
        {
            "authors": [
                "Merlet",
                "J.-P"
            ],
            "title": "Solving the forward kinematics of a Gough-type parallel manipulator with interval analysis",
            "venue": "Int. J. Robot. Res",
            "year": 2004
        },
        {
            "authors": [
                "D. Gan",
                "Q. Liao",
                "J.S. Dai",
                "S. Wei",
                "L.D. Seneviratne"
            ],
            "title": "Forward displacement analysis of the general 6\u20136 Stewart mechanism using Gr\u00f6bner bases",
            "venue": "Mech. Mach. Theory",
            "year": 2009
        },
        {
            "authors": [
                "S.-H. Chen",
                "L.-C. Fu"
            ],
            "title": "The forward kinematics of the 6-6 Stewart platform using extra sensors",
            "venue": "In Proceedings of the 2006 IEEE International Conference on Systems, Man and Cybernetics,",
            "year": 2006
        },
        {
            "authors": [
                "A. Morell",
                "M. Tarokh",
                "L. Acosta"
            ],
            "title": "Solving the forward kinematics problem in parallel robots using Support Vector Regression",
            "venue": "Eng. Appl. Artif. Intell",
            "year": 2013
        },
        {
            "authors": [
                "P.J. Parikh",
                "S.S.Y. Lam"
            ],
            "title": "A hybrid strategy to solve the forward kinematics problem in parallel manipulators",
            "venue": "IEEE Trans. Robot",
            "year": 2005
        },
        {
            "authors": [
                "P.J. Parikh",
                "S.S. Lam"
            ],
            "title": "Solving the forward kinematics problem in parallel manipulators using an iterative artificial neural network strategy",
            "venue": "Int. J. Adv. Manuf. Technol",
            "year": 2009
        },
        {
            "authors": [
                "I. Kardan",
                "A. Akbarzadeh"
            ],
            "title": "An improved hybrid method for forward kinematics analysis of parallel robots",
            "venue": "Adv. Robot",
            "year": 2015
        },
        {
            "authors": [
                "Q. Zhu",
                "Z. Zhang"
            ],
            "title": "An efficient numerical method for forward kinematics of parallel robots",
            "venue": "IEEE Access 2019,",
            "year": 2019
        },
        {
            "authors": [
                "Q. Zhu",
                "Z. Zhang",
                "X. Ji"
            ],
            "title": "General approach for real-time forward kinematics solution of Stewart platform",
            "venue": "J. Harbin Eng. Univ. 2021,",
            "year": 2021
        },
        {
            "authors": [
                "E.G. L\u00f3pez",
                "W. Yu",
                "X. Li"
            ],
            "title": "Optimum design of a parallel robot using neuro-genetic algorithm",
            "venue": "J. Mech. Sci. Technol",
            "year": 2021
        },
        {
            "authors": [
                "W. Lv",
                "L.T. Wei",
                "E.M. Feng"
            ],
            "title": "A modification of Newton\u2019s method solving non-linear equations with singular Jacobian",
            "venue": "Kongzhi Juece Control Decis. 2017,",
            "year": 2017
        },
        {
            "authors": [
                "D. Karaboga",
                "B. Basturk"
            ],
            "title": "A powerful and efficient algorithm for numerical function optimization: Artificial bee colony (ABC) algorithm",
            "venue": "J. Glob. Optim",
            "year": 2007
        },
        {
            "authors": [
                "C. Yang",
                "J. He",
                "J. Han",
                "X. Liu"
            ],
            "title": "Real-time state estimation for spatial six-degree-of-freedom linearly actuated parallel robots",
            "venue": "Mechatronics 2009,",
            "year": 2009
        },
        {
            "authors": [
                "Q. Xu",
                "J. Chen",
                "X. Liu",
                "J. Li",
                "C. Yuan"
            ],
            "title": "An ABC-BP-ANN algorithm for semi-active control for Magnetorheological damper",
            "venue": "KSCE J. Civ. Eng. 2017,",
            "year": 2017
        },
        {
            "authors": [
                "L. Cui",
                "K. Zhang",
                "G. Li",
                "X. Wang",
                "S. Yang",
                "Z. Ming",
                "J.Z. Huang",
                "N. Lu"
            ],
            "title": "A smart artificial bee colony algorithm with distance-fitness-based neighbor search and its application",
            "venue": "Future Gener. Comput. Syst",
            "year": 2018
        },
        {
            "authors": [
                "S. Chen",
                "G. Fang",
                "X. Huang",
                "Y. Zhang"
            ],
            "title": "Water quality prediction model of a water diversion project based on the improved artificial bee colony\u2013backpropagation neural network",
            "venue": "Water 2018,",
            "year": 2018
        },
        {
            "authors": [
                "H. Li",
                "Y. Lu",
                "C. Zheng",
                "M. Yang",
                "S. Li"
            ],
            "title": "Groundwater level prediction for the arid oasis of Northwest China based on the artificial bee colony algorithm and a back-propagation neural network with double hidden layers",
            "year": 2019
        },
        {
            "authors": [
                "D. Karaboga",
                "B. Akay"
            ],
            "title": "A comparative study of artificial bee colony algorithm",
            "venue": "Appl. Math. Comput",
            "year": 2009
        },
        {
            "authors": [
                "D. Karaboga",
                "C. Ozturk"
            ],
            "title": "A novel clustering approach: Artificial Bee Colony (ABC) algorithm",
            "venue": "Appl. Soft Comput",
            "year": 2011
        },
        {
            "authors": [
                "D. Karaboga",
                "B. Basturk"
            ],
            "title": "On the performance of artificial bee colony (ABC) algorithm",
            "venue": "Appl. Math. Comput",
            "year": 2008
        },
        {
            "authors": [
                "D. Karaboga",
                "B. Gorkemli",
                "C. Ozturk",
                "N. Karaboga"
            ],
            "title": "A comprehensive survey: Artificial bee colony (ABC) algorithm and applications",
            "venue": "Artif. Intell. Rev",
            "year": 2014
        },
        {
            "authors": [
                "J. Kou",
                "Y. Li",
                "X. Wang"
            ],
            "title": "Efficient continuation Newton-like method for solving systems of non-linear equations",
            "venue": "Appl. Math. Comput",
            "year": 2006
        },
        {
            "authors": [
                "C.L. Howk"
            ],
            "title": "A class of efficient quadrature-based predictor\u2013corrector methods for solving nonlinear systems",
            "venue": "Appl. Math. Comput",
            "year": 2016
        }
    ],
    "sections": [
        {
            "text": "Citation: Zhu, H.; Xu, W.; Yu, B.;\nDing, F.; Cheng, L.; Huang, J. A\nNovel Hybrid Algorithm for the\nForward Kinematics Problem of 6\nDOF Based on Neural Networks.\nSensors 2022, 22, 5318. https://\ndoi.org/10.3390/s22145318\nAcademic Editors: Zhongyuan Wang,\nTao Lu, Yuntao Wu and Huabing\nZhou\nReceived: 15 June 2022\nAccepted: 9 July 2022\nPublished: 16 July 2022\nPublisher\u2019s Note: MDPI stays neutral\nwith regard to jurisdictional claims in\npublished maps and institutional affil-\niations.\nCopyright: \u00a9 2022 by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an open access article\ndistributed under the terms and\nconditions of the Creative Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n4.0/).\nKeywords: Gough\u2013Stewart; forward kinematics problem; ABC\u2013BPNN; Newton\u2019s method"
        },
        {
            "heading": "1. Introduction",
            "text": "Gough\u2013Stewart platforms (GSPs) are typical six-degree-of-freedom (6-DOF) parallel robots that have the advantages of high rigidity, high precision, and large carrying capacity [1]. GSPs are widely used in various large-scale motion simulation platforms such as flight, automotive, ship, and tank simulators. Generally, GSPs comprise three structures: universal and cylindrical and universal joint (6-UCU), 6-UPS, and 6-SPS, in which 6 represents six identical structures, U represents a universal joint, C represents a cylindrical joint, P represents a prismatic joint, and S represents a spherical joint. GSPs can be divided into 6\u20136, 3\u20133, and 6\u20133 structures according to the connection modes of the upper and lower hinge points. In this paper, the 6-UCU structure and 6\u20136 connection model are used. GSPs, with its structure and benefits, compensates for the many deficiencies of serial robots. It has a wide variety of applications in the future industry and intelligent manufacturing. Because it can give mapping between a Cartesian and joint space, the kinematics problem is critical for parallel robotics. Solving the forward kinematics problem (FKP) is an essential step in the modeling and control of parallel robots, particularly for real-time applications. The FKP is a challenging and essential robotics topic in GSPs. Due to the high\nSensors 2022, 22, 5318. https://doi.org/10.3390/s22145318 https://www.mdpi.com/journal/sensors\nnonlinearity and the varied closed-loop kinematic architectures of parallel robots [2], there is currently no acknowledged generic solution to solve the FKP. To control GSPs, advanced algorithms with higher computation loads that achieve better performance can be used. Therefore, it is significant to find a more powerful algorithm to reduce the computation time of the FKP. The FKP of GSPs is, therefore, a hot topic for researchers. Studies on the FKP of GSPs can be classified into the traditional approach and the intelligent algorithm approach. Conventional traditional approaches include the numerical method, analytical method, and adding extra sensors. The numerical method can obtain an iterative solution without suffering the multisolution problem [3]. The Newton\u2013Raphson (NR) method is a prominent numerical approach for analyzing a parallel robot\u2019s forward kinematics [4]. The NR method with good initial values is used to numerically solve nonlinear FKP equations for root finding. The method is overly sensitive to initial values, and results diverge if the initial values are inappropriate. The analytical method tends to find a closedform solution [5,6]. This method forms a series of sophisticated derivations and is only useful for certain structures. The method of adding more sensors [7] is a strategy to find a unique approach with the least amount of computing. Unfortunately, due to the high cost of this method, and measurement and assembly faults, its application range is limited. With the advancement of computer application technology and artificial intelligence, an increasing number of researchers have begun to use intelligent algorithms to solve the FKP, such as artificial neural networks (ANNs) and support vector machines (SVM). Morell et al. [8] solved FKP by using the support vector regression approach, which had a unique notion, but the model training time was too long and would not completely satisfy the requirements in real-time control. ANNs are employed in the field of intelligent algorithms to train the inverse kinematics values of the GSP to produce a set of forward kinematics solutions [9]. Subsequently, the NR method is used to obtain the exact values of the approximations. Using the hybrid strategy to solve FKP has been recognized by some scholars. This hybrid strategy [10] can be combined with a high level of solving speed and accuracy. Moreover, it can leverage the superb initial value provided by a neural network to perform a Newtonian iteration, which compensates for the Newtonian iteration\u2019s sensitivity to the initial value. It also overcomes the problem of a neural network\u2019s predicted value having a forecasting deviation. The approach is adaptable to parallel robots with a variety of structural properties [11]. Many researchers have used this foundation to improve the algorithm\u2019s efficiency and accuracy in real-time motion. To ensure the feasibility of realtime application, Zhu et al. exploited the optimization of numerical iteration efficiency by creating a deviation-driven algorithm [12]. After that, a velocity Jacobian matrix iteration was used to improve the hybrid algorithm\u2019s overall speed [13]. The advantages of the neural network and genetic algorithm are combined in the neurogenetic algorithm [14], which maximizes the robot\u2019s workspace volume. For the neural network part, the well-known BP neural network (BPNN) is mostly employed in the traditional hybrid strategy. BPNN has good nonlinear mapping ability, i.e., f {LO1, LO2, LO3, LO4, LO5, LO6} \u2192 {\u03b1, \u03b2, \u03b3, x, y, z}, which is the relationship between joint displacement and end-effector pose. Although the BPNN model can achieve promising performance and has a flexible network structure, it still has some drawbacks: (i) For BPNNs, the training effect depends on the dataset, i.e., limited self-adaptation ability for different datasets. (ii) It is possible to fall into a local optimum for the model system with six inputs and six outputs, which cannot ensure a global training effect. (iii) The model is sensitive to initial parameters. Randomly initializing weights and thresholds impacts the model. Moreover, there is also a flaw with the numerical algorithm part. (iv) A set of inverse of Jacobian matrices J\u22121 are formed in the process of solving nonlinear equations with the Newton\u2013Raphson method [12]. That is, when the Jacobian matrix is singular, the equations have no solution. On the basis of the above problems, this paper proposes a novel hybrid algorithm that can guarantee efficient and accurate problem solving, so that any value input to the mechanism under the feasible motion space can have a solution, rendering it a universal algorithm for the 6-DOF forward kinematics problem.\nThe major contributions of our work are as follows:\n\u2022 An optimization method via an artificial bee colony (ABC) to optimize the BPNN (ABC\u2013BPNN) is proposed. Good weights and thresholds are obtained through the process of the ABC\u2019s population iteration to prevent the training model from falling into a local optimum. \u2022 A modification of Newton\u2019s method for solving nonlinear equations with a singular Jacobian matrix is introduced. \u2022 We used QMn-M (a modification of Newton\u2019s method from Lv et al. [15]) combined with a simplified Newtonian iteration (SNR). \u2022 We used the length error threshold to reduce the frequency of ANN calls to improve the efficiency of real-time control.\nFirst, ABC\u2013BPNN [16] was employed to achieve outstanding prediction values, adjust them to the requirements of this hybrid strategy, and improve the overall strategy convergence and computing performance. Second, the QMn-M algorithm [15] can effectively solve the problem of a numerical method for solving forward kinematics suffering from a singular Jacobian matrix. Third, the global Newton\u2013Raphson method with monotonic descent (GNRDM) proposed by Yang et al. [17] was combined with SNR to improve the efficiency of the algorithm [12]. Inspired by this technique, we used QMn-M combined with SNR to ensure the accuracy of numerical solutions. Moreover, it can reduce the computation time and iterations in overall algorithm. Lastly, the length error threshold \u03b50 was designed into the overall algorithm process to determine whether the previous set of solutions Qpre satisfied the required value of the current iteration. If this is the case, it is directly used to carry out SNR. As a result, the frequent invocation of ANNs can be reduced. The overall operation efficiency and the problem-solving efficiency of ANNs in real-time motion control can be improved. The structure of this paper is as follows: In Section 2, we describe the establishment of the kinematics model of GSP, including inverse kinematics problem analysis and the established FKP equations of GSP. The structure of ANNs and the proposed ABC\u2013BPNN applied on the FKP is described in Section 3. Section 4 mainly describes the design and analysis of numerical algorithms. Section 5 outlines a comparative experiment that was conducted on a neural network and numerical algorithm. Lastly, Section 6 concludes the paper."
        },
        {
            "heading": "2. Kinematics Model of GSPs",
            "text": ""
        },
        {
            "heading": "2.1. Inverse Kinematics",
            "text": "Compared with the FKP, the inverse kinematics problem (IKP) is relatively easy. The GSP consists of two platforms that are connected by several links, as shown in Figure 1. The base platform is fixed to the ground, and the mobile platform works as the end effector. The motion of six links causes the movement of the end effector. According to Figure 1, the coordinates of the six lower hinge points are defined as Ai(i = 1, 2, . . . . . . , 6), the coordinates of the six upper hinge points are Bi(i = 1, 2, . . . . . . , 6). Li(i = 1, 2, . . . . . . , 6) is the length of the link between the connection point Ai and Bi at initial state. The radii of the six lower- and higher-hinge points are R1 and R2 respectively, as shown in Figure 2.\nThe overall structure of 6\u20136 GSP and its initial state coordinate system are shown in Figure 2. For the base coordinate system {A}, defined by its base platform and its origin OA in the platform\u2019s geometric center. The moving coordinate system {B} is attached to the mobile platform, with its origin OB at the platform\u2019s geometric center. The IKP is to calculate the value of joint variable LOi by giving the pose of the moving coordinate system. The pose of moving coordinate system {B} is expressed as follows:\nQ = [ \u03b8T \u2223\u2223\u2223OTB]T=[\u03b1, \u03b2, \u03b3, x, y, z]T (1)\nwhere x, y, z are the surge, sway, and heave lines of the mobile platform respectively; and \u03b1, \u03b2, \u03b3 are the roll, pitch, and yaw angles of the mobile platform. Equation (3), which is the IKP\u2019s formula for the GSP, can be used to solve the displacement of i-th actuator using the geometric technique.\nLOi=[LO1, LO2, LO3, LO4, LO5, LO6]T (2)\nLOi = fi(Q) = ||ARBBi + OB \u2212 Ai|| \u2212 Lli (3)\nwhere LOi denotes the displacement of the i-th link, Lli indicates the length of i-th link when Q is the initial state, and R is the rotation matrix in the (Pitch-Roll-Yaw) Euler angle representation, as follows:\nRPRY(\u03b1, \u03b2, \u03b3) = c\u03b3 \u2212s\u03b3 0s\u03b3 c\u03b3 0 0 0 1  c\u03b2 0 s\u03b20 1 0 \u2212s\u03b2 0 c\u03b2 1 0 00 c\u03b1 \u2212s\u03b1 0 s\u03b1 c\u03b1  =\nc\u03b2c\u03b3 s\u03b1s\u03b2c\u03b3\u2212 c\u03b1s\u03b3 c\u03b1s\u03b2c\u03b3 + s\u03b1s\u03b3c\u03b2s\u03b3 s\u03b1s\u03b2s\u03b3 + c\u03b1s\u03b3 c\u03b1s\u03b2s\u03b3\u2212 s\u03b1c\u03b3 \u2212s\u03b2 s\u03b1c\u03b2 c\u03b1c\u03b2  (4)\nwhere c\u03b1 is cos\u03b1, s\u03b1 is sin\u03b1, etc."
        },
        {
            "heading": "2.2. FKP Equations",
            "text": "The numerical algorithm\u2019s solution necessitates the construction of a set of nonlinear equations for iteration and root finding. To establish the FKP equations of GSP, IKP\u2019s formula of GSP, Equation (3) is needed. fi(Q) is the function mapping the pose from Cartesian space to the displacement of the i-th actuator LOi in joint space. The FKP of GSP is to solve corresponding pose Q by giving LOi; we can construct Equation (5) to form a set of nonlinear equations whose constructed equations are Equation (6).\nFi(Q) = fi(Q)\u2212 Lni = 0 (5) f1(Q)\u2212 Ln1 = 0 f2(Q)\u2212 Ln2 = 0 f3(Q)\u2212 Ln3 = 0 f4(Q)\u2212 Ln4 = 0 f5(Q)\u2212 Ln5 = 0 f6(Q)\u2212 Ln6 = 0 (6)\nwhere Lni is the input value of the FKP (the displacement of the i-th actuator)."
        },
        {
            "heading": "3. Artificial Bee Colony-Based BP Neural Network Algorithm",
            "text": "Artificial neural networks (ANNs) have good nonlinear mapping ability, and can realize the mapping relationship between the displacement of several links and the endeffector pose without considering the intermediate operation process. In the ANN-based IKP method, data were obtained by IKP for sample training. LOi was the input, Q was the output, and only approximate output values could be obtained. The backpropagation neural network (BPNN) is a widely used artificial neural network in GSPs [9].\nABC\u2013BP Neural Network\nAccording to the mapping relation of f {LO1, LO2, LO3, LO4, LO5, LO6} \u2192 {\u03b1, \u03b2, \u03b3, x, y, z}, a BPNN with 6 input nodes, 6 output nodes, and 1 hidden layer was designed as shown in Figure 3. Sigmoid function was chosen to be the activation function. The BPNN model achieved promising performance and flexible network structure. However, it had several deficiencies that prevented it from completing this mission. To optimize the BPNN, the artificial bee colony (ABC) algorithm was used to ensure the stability of the deviation between the predicted and real values of the IKP\u2019s dataset of BPNN training, and to enhance the model training effect, namely, ABC\u2013BPNN [18\u201321].\nFor the BPNN model, the initialization weights and thresholds are given as follows, respectively:\nW1 =  0.0662 \u22121.6832 \u22121.527 \u22121.4254 \u22121.0288 2.0796 \u22120.9240 2.5984 \u22121.9986 \u22121.1251 1.9704 \u22120.8427 \u22122.9220 2.1942 \u22120.7272 0.4587 \u22121.2002 \u22122.6277 \u22121.2651 \u22120.7931 1.6843 1.4514 \u22122.1420 \u22122.4401 2.2850 \u22122.6858 1.3005 1.4514 2.6247 1.6386 2.6616 1.1087 0.6891 \u22121.3788 0.1340 2.3670 2.6722 \u22121.5912 1.3156 \u22122.1011 1.9623 0.4815 1.9344 \u22121.4598 1.9829 2.7022 \u22121.8650 1.4510 1.9723 \u22121.9167 0.1324 \u22122.7276 0.9876 0.6103 2.5931 \u22122.5397 0.0078 \u22120.7973 1.4428 1.8874  B1 =  0.9841 0.7650 \u22122.2820 \u22122.1350 \u22121.4340 1.5495 0.3450 2.5649 2.2165 \u22120.6414 \nW2 =  \u22121.7583 \u22121.4096 2.8489 0.9987 \u22121.8899 \u22120.0096 1.8149 \u22120.7841 1.9333 0.0338 2.6185 \u22121.6147 1.4687 \u22121.8757 2.7148 0.8056 0.9578 1.2417 2.6779 \u22120.0114 \u22121.9383 2.7488 1.1466 0.4589 0.1704 \u22121.2281 0.6174 0.5256 \u22120.8983 1.1637 0.6082 \u22120.7252 \u22120.5100 2.5182 \u22121.6204 \u22121.5583 1.1490 1.1365 2.4286 0.9827 0.9567 \u22121.1117 1.9906 \u22120.0194 \u22122.0536 2.4177 2.2674 \u22120.1703 1.1783 2.2060 \u22121.9097 1.8553 \u22120.2285 \u22120.8113 \u22120.3779 0.7793 \u22121.4021 2.8468 0.5574 1.5143  B2 =  1.4588 \u22120.9130 1.0489 0.3667 2.6758 \u22121.6079 \nDue to its benefits of fast convergence and global search, the ABC method is frequently used to solve optimization issues. Bees and food sources are the two most important components of the ABC algorithm. Scout, employed, and onlookers are the three sorts of bees. Scout bees are entrusted to search for food sources at random, while employed and onlooker bees are in charge of nectar mining [22,23]. Numerous studies showed that the ABC algorithm outperforms the genetic algorithm (GA), particle swarm optimization (PSO), and other methods in terms of accuracy and convergence rate [24,25]. In fact, the principle of the ABC algorithm is dealing with the problem of function optimization by simulating the nectar-gathering mechanism of actual bees. The ABC algorithm iterates continuously, compares the advantages and disadvantages of the problem, keeps the good individuals and eliminates the bad ones, and constantly approaches the global optimal solution. The ABC algorithm replaces the solution to the optimal honey of the colony with\nthe solution to the optimal weights and thresholds of the neural network. The optimized BPNN is trained by the global optimal weights and thresholds provided by ABC. The whole ABC\u2013BPNN algorithm is shown in Algorithm A1. The specific steps are as follows:\n1. Build a BPNN model. 2. Initialize the parameters of the ABC algorithm: self-variable dimension D, population\nnumber N (the number of employed bees is N1, the number of onlookers is N2, and the number of solutions is N3), maximal cycle number G, and threshold of iteration number for scout bees limit.\nD = Ninput \u00d7 Nhidden + Nhidden + Nhidden \u00d7 Noutput + Noutput (7)\nN = N1 + N2 = 2N3 (8)\nwhere Ninput is the number of nodes in the input layer, Nhidden is the number of nodes in the hidden layer, and Noutput is the number of nodes in the output layer.\n3. Employed-bee search. New solution Vi(j) is generated by employed bees searching the field and is compared with old solution Xi(j) by using the principle of the greedy algorithm. The strategy compares the size by calculating the fitness value. If the fitness value of the new solution is greater than that of the solution, the solution is replaced by the updated solution. Otherwise, the number of updates is f ailures + 1. The fitness value is calculated with Equation (10), and Vi(j) is calculated with Equation (9).\nVi(j) = Xi(j) + (\u22121 + 2rand(0, 1))\u00d7 (Xi(j)\u2212 Xr1(j)) (9)\nwhere Xi(j) is a random selection of other employed bees, different from themselves, r1 \u2208 [1, 2, 3, . . . , N3].\nf (xi) =  1 (MSEi + 1) , MSEi > 0\n1 , MSEi < 0 (10)\nMSEi = n\n\u2211 m=1\n(yim \u2212 y\u0302im)2\nn (11)\nwhere MSEi is the mean square error generated by training the i-th solution in the BPNN, y\u0302im indicates the predicted value during training in the BPNN, yim indicates the actual value, and n indicates the total number of training samples.\nXt+1i =\n{ V , f (V) < f (Xti )\nXti , f (V) \u2265 f (Xti ) (12)\nwhere Xti represents the i-th individual in the population of the t generation. 4. Onlookers search. Onlookers calculate possible value Pi with Equation (13), and use\nthe roulette to find a new solution among existing ones.\nPi = f (xi)\nN3 \u2211\nn=1 f (xn)\n(13)\n5. Scout-bee search. The rapid convergence of employed and scout bees may lead to a decrease in the overall diversity of the population. In order to avoid the population entering the local optimum, the search mechanism of scout bees was designed on the basis of the ABC algorithm. If the number of update f ailures exceeds limit, the solution is discarded and replaced by a new solution generated by Equation (14), and\nthe number of update f ailures is initialized to zero. In this paper, the value of limit is the product of N3 and D.\nXi = Xmin + rand(0, 1)(Xmax \u2212 Xmin) (14)\n6. If the current cycle number is greater than maximal cycle number G, Step 3 is repeated. Otherwise, the solution with the maximal fitness is output at the end of the training. 7. According to the optimal solution provided by the ABC algorithm, the initial weights and thresholds of the BPNN are obtained. Subsequently, the ABC\u2013BPNN model is trained and tested with the sample data to achieve the pose prediction of GSP."
        },
        {
            "heading": "4. Analysis and Design of the Numerical Algorithm",
            "text": ""
        },
        {
            "heading": "4.1. Newton\u2013Raphson Algorithm",
            "text": "In the traditional hybrid algorithm (BPNN and numerical algorithm), Newton\u2013Raphson is used as the main method for numerical solutions. Some other improved Newtonian methods are used for the numerical iteration of optimization algorithms, as shown in Figure 4.\n\u2022 Newton\u2013Raphson method: The formula of the NR method for solving nonlinear equations of FKP is:\nQn+1=Qn \u2212 J\u22121QnF(Qn) (n = 0, 1, 2, 3 . . . . . .) (15)\nwhere J is a Jacobian matrix, and its formula is:\nJ =  \u2202F1 \u2202\u03b11 . . . \u2202F1 \u2202z1 ... . . .\n... \u2202F6 \u2202\u03b16 . . . \u2202F6 \u2202z6\n (16)\n\u2022 Newton downhill method: The formula for the Newton downhill (NR-dh) method for solving nonlinear equations of FKP is:\nQn+1=Qn \u2212 \u03bbJ\u22121QnF(Qn) (0 < \u03bb \u2264 1) (17)\nwhere \u03bb is the descent factor; when \u03bb = 1, it is the NR method. When ||F(Qn + 1)|| < ||F(Qn)||, \u03bb remains the same. On the other hand, \u03bb = 2\u2212t, (t = 0, 1, 2 . . . . . .)."
        },
        {
            "heading": "4.2. Improved Newton\u2019s Method for Nonlinear Singular Equations",
            "text": "Neither the traditional nor the above method can solve the singular Jacobian matrix of FKP nonlinear equations. According to Equation (15), a new set of J is formed continuously in the process of the solving iteration, and its inverse is required. In the process of iteration, when J forms a singular matrix, Rank(J)< 6, its inverse cannot be solved. Therefore, the general solution formula of NR method should be:\nQn+1=Qn \u2212 J+QnF(Qn) (n = 0, 1, 2, 3 . . . . . .) (18)\nwhere continuous iterating pseudoinverse matrix J+ slows down the solution process, affects the overall efficiency, and cannot guarantee accuracy of computation. To solve these problems, any value that is input into the feasible motion space of the mechanism can have a solution. Therefore, an improved Newton\u2019s method for solving nonlinear singular equations was introduced [15]. Lv et al. [15] combined the methods that were proposed in Kou et al. [26], and Howk et al. [27]; a diagonal matrix containing parameters was added to the singular Jacobian matrix to change the irreversible characteristics of the Jacobian matrix in the iterative process, and the convergence order of this new singular algorithm was second. The equation proposed in Kou et al. [26] is as follows:\nQn+1 = Qn \u2212 [ diag ( \u00b5i (n)F(Qn) ) + J ]\u22121 F(Qn) (19)\nwhere \u00b5i(n) \u2208 R\\{0}. when J is for the singular matrix, the diag ( \u00b5i (n)F(Qn) ) join can solve this problem. The formula of the improved Newton\u2019s method for nonlinear singular equations is: when n = 0, the formula is:\nQ\u22170 = Q0, Q1 = Q0 \u2212 [diag(\u00b5i(0)F(Q0)) + F\u2032(\u03b3(Q0) + (1\u2212 \u03b3)Q0\u2217)] \u22121 F(Q0) (20)\nwhen n \u2265 1, the formula is:\nQ\u2217n = Qn \u2212 [ diag ( \u00b5i (n)F(Qn) ) + F\u2032(\u03b3Qn\u22121 + (1\u2212 \u03b3))Q\u2217n\u22121 ]\u22121 F(Qn),\nQn+1 = Qn \u2212 [ diag ( \u03bbi (n)F(Qn) ) + F\u2032(\u03b3Qn + (1\u2212 \u03b3))Q\u2217n ]\u22121 F(Qn)\n(21)\nwhere, when \u03b3 = 1/2, it is the QMn-M algorithm. When \u03b3 = 0, it is the PC-M algorithm. When \u03b3 = 1, the two-step iterative Equations (20) and (21) change into the single-step iterative Equation (19), which is Newton\u2019s improvement on the standard. The recommended algorithm is the QMn-M algorithm at \u03b3 = 1/2, which performed better on the FKP of GSP, with better iterations and total running time than those of the others. A comparison of several algorithms is shown in Table 1.\n1 With the QMn-M or PC-M algorithm, only two function values need to be calculated in each iteration step because, in Equation (21), F\u2032 ( \u03b3Qn\u22121 + (1\u2212 \u03b3)Q\u2217n\u22121 ) in the last iteration formula is in Equation (21). The only need is to calculate two functions: F(Qn) and F\u2032(\u03b3Qn + (1\u2212 \u03b3)Q\u2217n)."
        },
        {
            "heading": "4.3. Simplified Newton Iteration to Optimize QMn-M Algorithm",
            "text": "The QMn-M algorithm solves singular Jacobian matrix J and reduces its problemsolving speed. To ensure the global performance, and its operation speed and accuracy, we used the simplified Newton iteration (SNR) method to optimize the QMn-M algorithm.\nSimplified Newton Iteration:\nQn+1 = Qn \u2212 CF(Qn), C = J\u22121(Q\u03b5) (22)\nwhere C is a constant Jacobian matrix. When it is not satisfied:\n||F(Qn+1)|| < ||F(Qn)|| (23)\nto renew the Jacobian matrix. The QMn-M and SNR algorithm can effectively improve the time efficiency of the algorithm and guarantee the accuracy of the value, as shown in Figure 5. Compared with the traditional hybrid algorithm, it can solve the global pose problem."
        },
        {
            "heading": "4.4. FKP of Real-Time Control Improvement",
            "text": "In the control of a 6-DOF parallel robot, a real-time solution of FKP is more practical. The control cycle and sampling interval are usually milliseconds. Therefore, the solution of FKP connected between control cycles is approximate. According to the deviation-driven algorithm on real-time FKP [12], and by Equation (24), Qpre (the value of the last solution) is reused, and ABC\u2013BPNN calls are reduced. If the formula is satisfied, Qpre is used to directly carry out a simplified Newton iteration. Otherwise, ABC\u2013BPNN is called to give an approximation.\n\u2206Lmax = max| fi(Qpre)\u2212 Lni| (24)\n\u2206Lmax < \u03b50 (25)\nwhere \u03b50 is the length error threshold that controls whether to call ANNs. The whole hybrid algorithm is shown in Figure 6 and Algorithm A2."
        },
        {
            "heading": "5. Experiment",
            "text": "The experimental process can be divided into three parts:\n\u2022 Part 1: Inverse kinematics solution. The corresponding data are obtained to form the dataset and normalized.\n\u2022 Part 2: Training for neural networks. Test samples are input into the trained model for pose prediction. \u2022 Part 3: Numerical iteration. Predicted results are input as the numerical algorithm\u2019s initial point to acquire the precise output.\nSeveral experiments were conducted on the GSP (6-UCU) as shown in Figure 1. The positions of hinge points are given in Table 2. The maximal iterations Nmax were set to 20, and the permissible error was 10\u22124 mm. The following experiments were carried out in the environment of MATLAB R2019b, and the operating system was Windows 10. When Q =[0, 0, 0, 0, 0, 0]T , the initial value of each links variable was: Li=[1306.7130, 1306.7130, 1306.7130, 1306.7130, 1306.7130, 1306.7130]T ; the unit is millimeters."
        },
        {
            "heading": "XA \u2212250.0 250.0 1350.0 1100.0 \u22121100.0 \u22121350.0",
            "text": "1 (XA, YA, ZA) is the value of base coordinate system {A}. (XB, YB, ZB) is the value of moving coordinate system {B}."
        },
        {
            "heading": "5.1. Data Acquisition",
            "text": "A specific number of poses inside the workspace should be chosen before the training process, and the associated actuator displacements should be acquired by solving IKP with the corresponding actuator displacement Equation (3). The sample sets for training ANNs are formed by combining the two groups of data and then reversing their mappings. Essentially, ANNs use calculated data in a joint space as inputs, and corresponding pose data in Cartesian space as predicted outputs."
        },
        {
            "heading": "5.2. Neural Network Experiment",
            "text": "To train the ANNs, the network/data management toolbox in MATLAB R2019b was used. In the neural network comparison experiment, 300 groups of continuous data were collected from the machine. We divided the dataset at a ratio of 7:3. The training set consisted of 210 groups, and the test set consisted of 90 groups. We introduced a genetic algorithm\u2013backpropagation neural network (GA-BPNN) to compare with our ABC\u2013 BPNN and the traditional BPNN. The BPNN, GA\u2013BPNN, and ABC\u2013BPNN parameter settings were the same, where the learning rate was 0.001, and set epochs were 200. In this experiment, the three neural network models were compared through metrics, as shown in Table 3. The average error of each variable predicted by the neural network model is given in Table 4. In this paper, we calculated the error through the numerical deviation of the corresponding data. The error calculation equation used is as follows:\nError = |Q\u0302i \u2212Qi|, (i = 1, 2, 3, . . . , 6) (26)\nAverageError = 1 n\nn\n\u2211 m=1 |Q\u0302mi \u2212Qmi|, (i = 1, 2, 3, . . . , 6) (27)\nwhere Q\u0302i represents the predicted value of a pose variable, Qi represents the real value of a pose variable, and m represents the individual number of the same variable in Q\u0302mi. Figure 7 shows the predicted values of the three models in a test set. A group of data were selected for comparison, and the pose was the predicted value of the neural network. The experimental results in the figure demonstrate that ABC\u2013BPNN had a better prediction\nability than that of the traditional BPNN or GA\u2013BPNN. Figure 8 compares the error of the surge(x) predicted value of the neural network models with 10 groups of sample data. the error calculation of the surge variable was performed with Equation (26). Through the optimized neural network, its error value obviously decreased, as shown in the figure. By using a heuristic algorithm, the network model\u2019s prediction performance was enhanced, and ABC\u2013BPNN was more able to adjust to changes in the process.\nAccording to the metrics given in Table 3, the ABC algorithm optimized the initialization weights well, which improved the prediction ability of the BPNN model. Compared with GA\u2013BPNN and BPNN, the RMSE index of ABC\u2013BPNN decreased by 42.1% and 31.4%, respectively, and the R2 performance of ABC\u2013BPNN improved by 11.0% and 5.6%, respectively. The average error of the three models is given in Table 4; the maximal improvement of ABC\u2013BPNN error optimization was 46.3%. By comparing the average error, the ABC algorithm could reduce the average error of various variables, and its effect was better than that of the genetic algorithm. Experimental results show that ABC\u2013BPNN could reduce the dependence on the dataset and the prediction error of the neural network."
        },
        {
            "heading": "5.3. Numerical Algorithm Experiment",
            "text": "We used the data obtained by the neural network to conduct experiments in MATLAB R2019b. On a PC with a 2.30 GHz processor and 8 GB RAM, the FKP that corresponded to the obtained data was solved. An error threshold \u03b52 was used to control the QMn-M algorithm in the experiment, and an error threshold \u03b51 was subsequently used to control the SNR algorithm. The number of iterations and overall operation time fluctuate depending on \u03b51. The design of the error threshold can be changed with specific data until the value that renders it the most efficient is found. Error threshold \u03b51 is used to govern the end of the SNR algorithm and the entire process. Its value is generally accurate to four decimal places (as shown in Table 5, The precise level was 10\u22124). After the neural network experiment, the predicted values were iterated numerically. In this section, the average numbers of iterations, required operation time, and different iterative methods are compared. Table 5 shows the comparison of seven iteration methods, giving the average number of iterations and the required time. As shown in Table 5, the required time and average number of iterations of the proposed QMn-M and SNR were reduced, and its performance was better than that of the same second-order NR algorithm after being optimized by SNR. In Table 6, the traditional NR, and NR-dh with QMn-M and PC-M are compared. QMn-M and PC-M could solve nonlinear singular equations, and the advantages of this algorithm in solving the forward kinematics problem are demonstrated. Experiments showed the feasibility of QMn-M and PC-M in solving singular matrix data. (\u00b5i(n), \u03bbi( n)) about Q\u2217n and Qn+1 in Equation (21) were set to be the same parameters. In the\nQMn-M experiment, different (\u00b5i(n), \u03bbi( n)) values caused different levels of performance, and unsuitable (\u00b5i(n), \u03bbi( n)) values may render it divergent and unsolvable. Figure 9 shows the comparative experiment of the operation time required by four algorithms in 10 groups of data. As described in the Figure 9, QMn-M and Newton\u2013Raphson had the best performance, followed by PC-M, and NR-dh had the worst performance. Figure 10 is a comparison of QMn-M, QMn-M and SNR, and the traditional NR method. It shows that SNR combined with a numerical algorithm could greatly improve the efficiency of the algorithm and better guarantee accuracy. Furthermore, we found the percentage improvement performance of other iterative algorithms by comparing with QMn-M and SNR, which is illustrated in Table 7. Compared to NR-hd, the maximal percentage improvement in performance for the average number of iterations and required time was 68.8% and 70.60%, respectively. Compared to NR, the minimal percentage improvement in performance for the average number of iterations and required time was 14.4% and 13.9%, respectively."
        },
        {
            "heading": "6. Conclusions",
            "text": "This paper mainly optimized the traditional hybrid algorithm for FKP. The ABC\u2013BPNN model was used to train the IKP\u2019s value to obtain a good initial value, and the QMn-M and SNR algorithm was used to iteratively calculate the excellent initial value. The comparison chart in the numerical algorithm experiment shows that the QMn-M and SNR algorithm was superior to other methods in terms of iterations and operation time. It also has the ability to calculate a singular matrix. For continuous samples, its solution does not need to continuously call ABC\u2013BPNN, which greatly reduces the overall operation time required,\nand makes it convenient to solve on the real-time platform. This new hybrid algorithm can not only ensure that the GSP can have solutions in feasible space, but also meet the speed and accuracy of real-time computation. This algorithm also has portability, which is beneficial to solve the FKP for different structural platforms.\nAuthor Contributions: Conceptualization, H.Z. and W.X.; methodology, H.Z. and W.X.; software, H.Z.; validation, B.Y., F.D., L.C. and J.H.; data curation, H.Z. and B.Y.; writing\u2014original draft preparation, H.Z.; writing\u2014review and editing, W.X., B.Y., F.D., L.C. and J.H.; visualization, B.Y. and F.D.; supervision, L.C. and J.H. All authors have read and agreed to the published version of the manuscript.\nFunding: This research was funded by National Natural Science Foundation Youth Fund of China, grant number 61803286.\nInstitutional Review Board Statement: Not applicable.\nInformed Consent Statement: Not applicable.\nData Availability Statement: The data presented in this study are available on request from the corresponding author. The data are not publicly available due to privacy.\nConflicts of Interest: The authors declare no conflict of interest."
        },
        {
            "heading": "Appendix A",
            "text": "The whole ABC\u2013BPNN algorithm for the pose estimation of Gough\u2013Stewart platforms is as follows.\nAlgorithm A1 ABC\u2013BP neural network for FKP.\nInput: The displacement of current GSP, LOi; Output: The pose of current end-effector Qprediction. 1: Establish BP neural network model. 2: Initialize the parameters of the ABC algorithm. 3: Employed bees generate candidate solution Vi(j), Vi(j) shown in Equation (9). 4: Fitness value comparison in Equations (10) and (12). If New > Old, then Old\u2190 New,\nelse f ailures + 1. 5: Compute the possible value Pi of the solution, shown in (13), search according to Pi to\ngenerate new solutions. 6: Fitness value comparison in Equations (10) and (12). If New > Old then Old\u2190 New,\nelse f ailures + 1; 7: If f ailures > limit, then scout bees initial solution, shown in Equation (14); else, move\nto Step 8. 8: If current cycles > G, then save the optimal fitness value; else, move to Step 3. 9: Get the optimal weights and thresholds and train the BP neural network.\nThe whole hybrid algorithm to solve forward kinematics problem for Gough\u2013Stewart platforms is as follows.\nAlgorithm A2 Hybrid algorithm for forward kinematics problem of 6-DOF.\nInput: Coordinate vectors of lower and uppers joints with respect to their own coordinate frames: b1, b2, . . . , b6; a1, a2, . . . , a6. The displacement of current GSP: LOi. Error thresholds: \u03b51, \u03b52. Length error threshold: \u03b50. Max iterations: Nmax. Output: The pose of current moving coordinate platform: {\u03b1, \u03b2, \u03b3, x, y, z}. 1: if Qi = NULL && \u2206Lmax > \u03b50 then 2: Qi \u21d0 ABC-BPNN(LOi); 3: while \u2206E2 > \u03b52 do 4: Qi \u21d0 Eq21(Qi); 5: C \u21d0 Renew(C); 6: while \u2206E1 > \u03b51 && N < Nmax do 7: if ||F(Qn+1)|| < ||F(Qn)|| then 8: Qi \u21d0 Eq22(Qi); 9: else 10: Qi \u21d0 Eq15(Qi); 11: end if 12: N = N + 1; 13: end while 14: return Q f inal ; 15: end while 16: else 17: step6\u21d2 step15; 18: end if\nReferences 1. Merlet, J.P. Parallel Robots, 2nd ed.; Springer: Dordrecht, The Netherlands, 2006; pp. 77\u201378. 2. Wang, Q.; Su, J.; Lv, Z.; Zhang, L.; Lin, H.; Xu, G. Efficient hybrid method for forward kinematics analysis of parallel robots based on signal decomposition and reconstruction. Adv. Mech. Eng. 2017, 9, 1687814017699094. [CrossRef] 3. Sadjadian, H.; Taghirad, H.D. Numerical methods for computing the forward kinematics of a redundant parallel manipulator. In Proceedings of the IEEE Conference on Mechatronics and Robotics, Germany, Aachen, 13\u201315 September 2004; pp. 557\u2013562. 4. Li, Y.; Xu, Q. Kinematic analysis of a 3-PRS parallel manipulator. Robot. Comput. Integr. Manuf. 2007, 23, 395\u2013408. [CrossRef] 5. Merlet, J.-P. Solving the forward kinematics of a Gough-type parallel manipulator with interval analysis. Int. J. Robot. Res. 2004, 23, 221\u2013235. [CrossRef] 6. Gan, D.; Liao, Q.; Dai, J.S.; Wei, S.; Seneviratne, L.D. Forward displacement analysis of the general 6\u20136 Stewart mechanism using Gr\u00f6bner bases. Mech. Mach. Theory 2009, 44, 1640\u20131647. [CrossRef] 7. Chen, S.-H.; Fu, L.-C. The forward kinematics of the 6-6 Stewart platform using extra sensors. In Proceedings of the 2006 IEEE International Conference on Systems, Man and Cybernetics, Taipei, China, 8\u201311 October 2006; Volume 6, pp. 4671\u20134676. 8. Morell, A.; Tarokh, M.; Acosta, L. Solving the forward kinematics problem in parallel robots using Support Vector Regression. Eng. Appl. Artif. Intell. 2013, 26, 1698\u20131706. [CrossRef] 9. Parikh, P.J.; Lam, S.S.Y. A hybrid strategy to solve the forward kinematics problem in parallel manipulators. IEEE Trans. Robot. 2005, 21, 18\u201325. [CrossRef] 10. Parikh, P.J.; Lam, S.S. Solving the forward kinematics problem in parallel manipulators using an iterative artificial neural network strategy. Int. J. Adv. Manuf. Technol. 2009, 40, 595\u2013606. [CrossRef] 11. Kardan, I.; Akbarzadeh, A. An improved hybrid method for forward kinematics analysis of parallel robots. Adv. Robot. 2015, 29, 401\u2013411. [CrossRef] 12. Zhu, Q.; Zhang, Z. An efficient numerical method for forward kinematics of parallel robots. IEEE Access 2019, 7, 128758\u2013128766. [CrossRef] 13. Zhu, Q.; Zhang, Z.; Ji, X. General approach for real-time forward kinematics solution of Stewart platform. J. Harbin Eng. Univ. 2021, 42, 394\u2013399. (In Chinese) 14. L\u00f3pez, E.G.; Yu, W.; Li, X. Optimum design of a parallel robot using neuro-genetic algorithm. J. Mech. Sci. Technol. 2021, 35, 293\u2013305. [CrossRef] 15. Lv, W.; Wei, L.T.; Feng, E.M. A modification of Newton\u2019s method solving non-linear equations with singular Jacobian. Kongzhi Juece Control Decis. 2017, 32, 2240\u20132246. 16. Karaboga, D.; Basturk, B. A powerful and efficient algorithm for numerical function optimization: Artificial bee colony (ABC) algorithm. J. Glob. Optim. 2007, 39, 459\u2013471. [CrossRef] 17. Yang, C.; He, J.; Han, J.; Liu, X. Real-time state estimation for spatial six-degree-of-freedom linearly actuated parallel robots.\nMechatronics 2009, 19, 1026\u20131033. [CrossRef]\n18. Xu, Q.; Chen, J.; Liu, X.; Li, J.; Yuan, C. An ABC-BP-ANN algorithm for semi-active control for Magnetorheological damper. KSCE J. Civ. Eng. 2017, 21, 2310\u20132321. [CrossRef] 19. Cui, L.; Zhang, K.; Li, G.; Wang, X.; Yang, S.; Ming, Z.; Huang, J.Z.; Lu, N. A smart artificial bee colony algorithm with distance-fitness-based neighbor search and its application. Future Gener. Comput. Syst. 2018, 89, 478\u2013493. [CrossRef] 20. Chen, S.; Fang, G.; Huang, X.; Zhang, Y. Water quality prediction model of a water diversion project based on the improved artificial bee colony\u2013backpropagation neural network. Water 2018, 10, 806. [CrossRef] 21. Li, H.; Lu, Y.; Zheng, C.; Yang, M.; Li, S. Groundwater level prediction for the arid oasis of Northwest China based on the artificial bee colony algorithm and a back-propagation neural network with double hidden layers. Water 2019, 11, 806. [CrossRef] 22. Karaboga, D.; Akay, B. A comparative study of artificial bee colony algorithm. Appl. Math. Comput. 2009, 214, 108\u2013132. [CrossRef] 23. Karaboga, D.; Ozturk, C. A novel clustering approach: Artificial Bee Colony (ABC) algorithm. Appl. Soft Comput. 2011, 11, 652\u2013657. [CrossRef] 24. Karaboga, D.; Basturk, B. On the performance of artificial bee colony (ABC) algorithm. Appl. Math. Comput. 2008, 8, 687\u2013697. [CrossRef] 25. Karaboga, D.; Gorkemli, B.; Ozturk, C.; Karaboga, N. A comprehensive survey: Artificial bee colony (ABC) algorithm and applications. Artif. Intell. Rev. 2014, 42, 21\u201357. [CrossRef] 26. Kou, J.; Li, Y.; Wang, X. Efficient continuation Newton-like method for solving systems of non-linear equations. Appl. Math. Comput. 2006, 174, 846\u2013853. [CrossRef] 27. Howk, C.L. A class of efficient quadrature-based predictor\u2013corrector methods for solving nonlinear systems. Appl. Math. Comput.\n2016, 276, 394\u2013406. [CrossRef]"
        }
    ],
    "title": "A Novel Hybrid Algorithm for the Forward Kinematics Problem of 6 DOF Based on Neural Networks",
    "year": 2022
}