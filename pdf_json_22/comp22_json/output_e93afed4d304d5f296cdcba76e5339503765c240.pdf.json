{
    "abstractText": "Modern highly automated and autonomous traffic systems and subsystems require new approaches to test their functional safety in the context of validation and verification. One approach that has taken a leading role in current research is scenario-based testing. For various reasons, simulation is considered to be the most practicable solution for a wide range of test scenarios. However, this is where many existing simulation systems in research reach their limits. In order to be able to integrate the widest possible range of systems to be tested into the simulation, the use of co-simulation has proven to be particularly useful. In this work, the High Level Architecture defined in the IEEE 1516-2010 standard is specifically addressed and a concept is developed that establishes the foundation for the feasible use of scenario-based distributed co-simulation on its basis. The main challenge identified and addressed is the resolution of the double-sided dependency between scenario and simulation models. The solution was to fully automate the generation and instantiation of the simulation environment on the basis of a scenario instance. Finally, the developed concept was implemented as a prototype and the resulting process for its use is presented here using an example scenario. Based on the experience gained during the creation of the concept and the prototype, the next steps for future work are outlined in conclusion. Keywords\u2014High Level Architecture, traffic simulation, traffic scenario, scenario-based testing, data modeling, V&V",
    "authors": [
        {
            "affiliations": [],
            "name": "David Reiher"
        }
    ],
    "id": "SP:3b3f16a1eb8d806fc8379307bc24207a82bdecb1",
    "references": [
        {
            "authors": [
                "P Mallozzi",
                "P Pelliccione",
                "A Knauss"
            ],
            "title": "Autonomous Vehicles: State of the Art, Future Trends, and Challenges",
            "venue": "Dajsuren Y and van den Brand M (eds) Automotive Systems and Software Engineering. Cham: Springer International Publishing,",
            "year": 2019
        },
        {
            "authors": [
                "F. Kr\u00f6ger"
            ],
            "title": "Automated Driving in Its Social, Historical and Cultural Contexts",
            "year": 2016
        },
        {
            "authors": [
                "Munim ZH"
            ],
            "title": "Autonomous ships: a review, innovative applications and future maritime business models",
            "venue": "Supply Chain Forum: An International Journal 2019;",
            "year": 2019
        },
        {
            "authors": [
                "W Wasilewski",
                "K Wolak",
                "M. Zara\u015b"
            ],
            "title": "Autonomous shipping. The future of the maritime industry",
            "venue": "The Malopolska School of Economics in Tarnow Research Papers Collection",
            "year": 2021
        },
        {
            "authors": [
                "T Liljamo",
                "H Liimatainen",
                "M. P\u00f6ll\u00e4nen"
            ],
            "title": "Attitudes and concerns on automated vehicles",
            "venue": "Transportation Research Part F: Traffic Psychology and Behaviour",
            "year": 2018
        },
        {
            "authors": [
                "T Dirsehan",
                "C. Can"
            ],
            "title": "Examination of trust and sustainability concerns in autonomous vehicle adoption",
            "venue": "Technology in Society 2020;",
            "year": 2020
        },
        {
            "authors": [
                "J Wu",
                "H Liao",
                "J-W. Wang"
            ],
            "title": "Analysis of consumer attitudes towards autonomous, connected, and electric vehicles: A survey in China",
            "venue": "Research in Transportation Economics",
            "year": 2020
        },
        {
            "authors": [
                "P Bansal",
                "KM Kockelman",
                "A. Singh"
            ],
            "title": "Assessing public opinions of and interest in new vehicle technologies: An Austin perspective",
            "venue": "Transportation Research Part C: Emerging Technologies",
            "year": 2016
        },
        {
            "authors": [
                "K. Othman"
            ],
            "title": "Public acceptance and perception of autonomous vehicles: a comprehensive review",
            "venue": "AI Ethics 2021;",
            "year": 2021
        },
        {
            "authors": [
                "E Fraedrich",
                "B. Lenz"
            ],
            "title": "Societal and Individual Acceptance of Autonomous Driving",
            "year": 2016
        },
        {
            "authors": [
                "P Koopman",
                "M. Wagner"
            ],
            "title": "Challenges in Autonomous Vehicle Testing and Validation",
            "venue": "SAE Int. J. Trans. Safety 2016;",
            "year": 2016
        },
        {
            "authors": [
                "H Tschurtz",
                "A. Gerstinger"
            ],
            "title": "The Safety Dilemmas of Autonomous Driving",
            "venue": "Novi Sad, Serbia,",
            "year": 2021
        },
        {
            "authors": [
                "W Wachenfeld",
                "H. Winner"
            ],
            "title": "The Release of Autonomous Vehicles",
            "year": 2016
        },
        {
            "authors": [
                "Tak\u00e1cs \u00c1rp\u00e1d",
                "Drexler D\u00e1niel Andr\u00e1s",
                "Galambos P\u00e9ter"
            ],
            "title": "Assessment and Standardization of Autonomous Vehicles. In: Szak\u00e1l A (ed.) INES 2018",
            "venue": "IEEE 22nd International Conference on Intelligent Engineering Systems proceedings June 21-23,",
            "year": 2018
        },
        {
            "authors": [
                "D Reiher",
                "A. Hahn"
            ],
            "title": "Towards a Model-Based Multi-Layered Approach to Describe Traffic Scenarios on a Technical Level",
            "venue": "JMSE 2021;",
            "year": 2021
        },
        {
            "authors": [
                "A Lamm",
                "A. Hahn"
            ],
            "title": "Towards Critical-Scenario Based Testing With Maritime Observation Data",
            "venue": "OCEANS - MTS/IEEE Kobe Techno-Oceans (OTO),",
            "year": 2018
        },
        {
            "authors": [
                "S Skjong",
                "M Rindar\u00f8y",
                "LT Kyllingstad"
            ],
            "title": "Virtual prototyping of maritime systems and operations: applications of distributed cosimulations",
            "venue": "Journal of Marine Science and Technology",
            "year": 2017
        },
        {
            "authors": [
                "\u00d8R Smogeli",
                "KB Ludvigsen",
                "L Jamt"
            ],
            "title": "Open Simulation Platform - An Open-Source Project for Maritime System Co-Simulation",
            "venue": "International Conference on Computer and IT Applications in the Maritime Industries: COMPIT\u201920. (ed Volker Bertram), Pontignano,",
            "year": 2020
        },
        {
            "authors": [
                "M Krammer",
                "J Fritz",
                "M. Karner"
            ],
            "title": "Model-Based Configuration of Automotive Co-Simulation Scenarios",
            "venue": "Proceedings of the 48th Annual Simulation Symposium, Alexandria, Virginia,",
            "year": 2015
        },
        {
            "authors": [
                "D Reiher",
                "A. Hahn"
            ],
            "title": "Review on the Current State of Scenario- and Simulation-Based V&V in Application for Maritime Traffic Systems",
            "venue": "OCEANS",
            "year": 2021
        },
        {
            "authors": [
                "W Gong",
                "Z Zhu",
                "K Wang"
            ],
            "title": "A real-time co-simulation solution for train\u2013track\u2013bridge interaction",
            "venue": "Journal of Vibration and Control",
            "year": 2021
        },
        {
            "authors": [
                "T Pieper",
                "R. Obermaisser"
            ],
            "title": "Distributed co-simulation for software-in-the-loop testing of networked railway systems",
            "venue": "7th Mediterranean Conference on Embedded Computing (MECO), Budva,",
            "year": 2018
        },
        {
            "authors": [
                "A Brito",
                "T. Oliveira"
            ],
            "title": "Simulation and Test of Communication in Multi-robot Systems Using Co-simulation",
            "venue": "New Advances in Information Systems and Technologies. Cham: Springer International Publishing,",
            "year": 2016
        },
        {
            "authors": [
                "RL B\u00fccs",
                "LG Murillo",
                "E Korotcenko"
            ],
            "title": "Virtual Hardware-In-The-Loop Co-Simulation for Multi-Domain Automotive Systems via the Functional Mock-Up Interface",
            "venue": "Forum on Specification and Design Languages (FDL), Barcelona,",
            "year": 2015
        },
        {
            "authors": [
                "T Blochwitz",
                "M Otter",
                "J Akesson"
            ],
            "title": "Functional Mockup Interface 2.0: The Standard for Tool independent Exchange of Simulation Models",
            "venue": "Proceedings of the 9th International MODELICA Conference,",
            "year": 2012
        },
        {
            "authors": [
                "B M\u00f6ller",
                "B L\u00f6fstrand",
                "M. Karlsson"
            ],
            "title": "An overview of the HLA evolved modular FOMs",
            "year": 2007
        },
        {
            "authors": [
                "F Perabo",
                "D Park",
                "MK Zadeh"
            ],
            "title": "Digital Twin Modelling of Ship Power and Propulsion Systems: Application of the Open Simulation Platform (OSP)",
            "venue": "IEEE 29th International Symposium on Industrial Electronics (ISIE), Delft, Netherlands,",
            "year": 2020
        },
        {
            "authors": [
                "A Falcone",
                "A Garro",
                "A Anagnostou"
            ],
            "title": "An introduction to developing federations with the High Level Architecture (HLA)",
            "venue": "Red Rock Casino Resort & Spa,",
            "year": 2017
        },
        {
            "authors": [
                "W Damm",
                "E M\u00f6hlmann",
                "T Peikenkamp"
            ],
            "title": "A Formal Semantics for Traffic Sequence Charts",
            "venue": "Lohstroh M, Derler P and Sirjani M (eds) Principles of Modeling. Cham: Springer International Publishing,",
            "year": 2018
        },
        {
            "authors": [
                "J Ma",
                "X Che",
                "Y Li"
            ],
            "title": "Traffic Scenarios for Automated Vehicle Testing: A Review of Description Languages and Systems",
            "venue": "Machines 2021;",
            "year": 2021
        },
        {
            "authors": [
                "PL Gustavson",
                "JP Hancock",
                "M. McAuliffe"
            ],
            "title": "Base object models (BOMs): reusable component objects for federation development",
            "venue": "Simulation Interoperability Workshop,",
            "year": 1998
        },
        {
            "authors": [
                "T Chase",
                "P Gustavson",
                "LM. Root"
            ],
            "title": "From FOMs to BOMs and Back Again: 06S-SIW-115",
            "year": 2006
        },
        {
            "authors": [
                "Q He",
                "M Zhang",
                "J. Gong"
            ],
            "title": "An Introduction of BOM Modeling Framework",
            "venue": "IJMLC",
            "year": 2011
        },
        {
            "authors": [
                "A Garro",
                "A Falcone",
                "NR Chaudhry"
            ],
            "title": "A Prototype HLA Development Kit: Results from the 2015 Simulation Exploration Experience",
            "venue": "Proceedings of the 3rd ACM SIGSIM Conference on Principles of Advanced Discrete Simulation. (ed Taylor SJ, Mustafee N and Son Y-J), London United Kingdom,",
            "year": 2015
        },
        {
            "authors": [
                "A Falcone",
                "A Garro",
                "A Anagnostou"
            ],
            "title": "Easing the Development of HLA Federates: The HLA Development Kit and Its Exploitation in the SEE Project",
            "venue": "IEEE/ACM 19th International Symposium on Distributed Simulation and Real Time Applications (DS-RT), Chengdu,",
            "year": 2015
        },
        {
            "authors": [
                "P Bocciarelli",
                "A Pieroni",
                "D Gianni"
            ],
            "title": "A model-driven method for building distributed simulation systems from business process models",
            "venue": "Proceedings of the 2012 Winter Simulation Conference (WSC), Berlin,",
            "year": 2012
        },
        {
            "authors": [
                "P Bocciarelli",
                "A D'Ambrogio",
                "G. Fabiani"
            ],
            "title": "A Model-driven Approach to Build HLA-based Distributed Simulations from SysML Models",
            "venue": "Proceedings of the 2nd International Conference on Simulation and Modeling Methodologies, Technologies and Applications, Rome, Italy,",
            "year": 2012
        },
        {
            "authors": [
                "P Bocciarelli",
                "A D'Ambrogio",
                "A Giglio"
            ],
            "title": "A SaaS-based automated framework to build and execute distributed simulations from SysML models",
            "venue": "Winter Simulations Conference (WSC),",
            "year": 2013
        },
        {
            "authors": [
                "P Bocciarelli",
                "A D\u2019Ambrogio",
                "A Falcone"
            ],
            "title": "A Model-Driven Approach to Enable the Distributed Simulation of Complex Systems",
            "venue": "Complex Systems Design & Management. Cham: Springer International Publishing,",
            "year": 2016
        },
        {
            "authors": [
                "P Bocciarelli",
                "A D'Ambrogio",
                "A Giglio"
            ],
            "title": "Automated Generation of FOM Modules for HLA-Based Distributed Simulations",
            "venue": "Spring Simulation Conference (SpringSim),",
            "year": 2019
        },
        {
            "authors": [
                "P Bocciarelli",
                "A D'Ambrogio",
                "A Giglio"
            ],
            "title": "Model-Driven Distributed Simulation Engineering",
            "venue": "Winter Simulation Conference (WSC). (ed Mustafee N),",
            "year": 2019
        },
        {
            "authors": [
                "A D'Ambrogio",
                "P Bocciarelli",
                "J Delfa"
            ],
            "title": "Application of a Model-driven Approach to the Development of Distributed Simulations: The Esa",
            "venue": "Hraf Case. In: Spring Simulation Conference (SpringSim 2020),",
            "year": 2020
        },
        {
            "authors": [
                "S Kay",
                "A Kisdi",
                "K Buckley"
            ],
            "title": "Development of a Distributed Simulation Environment and Model Driven Engineering Framework to Support the Verification & Validation of Complex Autonomy Components",
            "venue": "In: International Astronautical Congress \u2013 IAC",
            "year": 2021
        },
        {
            "authors": [
                "M G\u00fctlein",
                "W Baron",
                "C Renner"
            ],
            "title": "Performance Evaluation of HLA RTI Implementations",
            "venue": "IEEE/ACM 24th International Symposium on Distributed Simulation and Real Time Applications (DS-RT), Prague, Czech Republic,",
            "year": 2020
        },
        {
            "authors": [
                "P. Ross"
            ],
            "title": "Comparison of High Level Architecture Run-Time Infrastructure Wire Protocols \u2013 Part One",
            "venue": "SIMTECT",
            "year": 2012
        },
        {
            "authors": [
                "T. Pokorny"
            ],
            "title": "Using Portico over a WAN, http://timpokorny.github.io/public/documentation/user/wan.html (accessed 8 May 2022)",
            "year": 2022
        },
        {
            "authors": [
                "Hapag-Lloyd AG"
            ],
            "title": "Hamburg Express: Vessel Details, Hamburg, Germany, https://www.hapag-lloyd.com/en/services-information/cargofleet/vessels/vessel/hamburg-express.html (accessed 9 June 2022)",
            "year": 2022
        },
        {
            "authors": [
                "Hafen Hamburg Marketing e.V. Anne-Sofie"
            ],
            "title": "Vessel Details",
            "venue": "Port of Hamburg, Hamburg, Germany, https://www.hafenhamburg.de/en/vessels/anne-sofie-28079/",
            "year": 2022
        },
        {
            "authors": [
                "Docker Inc. Docker"
            ],
            "title": "Home",
            "venue": "Website, https://www.docker.com/",
            "year": 2022
        },
        {
            "authors": [
                "MU Awais",
                "P Palensky",
                "W Mueller"
            ],
            "title": "Distributed hybrid simulation using the HLA and the Functional Mock-up Interface",
            "venue": "IECON 2013 - 39th Annual Conference of the IEEE Industrial Electronics Society, Vienna,",
            "year": 2013
        },
        {
            "authors": [
                "A Garro",
                "A. Falcone"
            ],
            "title": "On the Integration of HLA and FMI for Supporting Interoperability and Reusability in Distributed Simulation",
            "venue": "DEVS",
            "year": 2015
        }
    ],
    "sections": [
        {
            "text": "SUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 1\ntest their functional safety in the context of validation and verification. One approach that has taken a leading role in current research is scenario-based testing. For various reasons, simulation is considered to be the most practicable solution for a wide range of test scenarios. However, this is where many existing simulation systems in research reach their limits. In order to be able to integrate the widest possible range of systems to be tested into the simulation, the use of co-simulation has proven to be particularly useful. In this work, the High Level Architecture defined in the IEEE 1516-2010 standard is specifically addressed and a concept is developed that establishes the foundation for the feasible use of scenario-based distributed co-simulation on its basis. The main challenge identified and addressed is the resolution of the double-sided dependency between scenario and simulation models. The solution was to fully automate the generation and instantiation of the simulation environment on the basis of a scenario instance. Finally, the developed concept was implemented as a prototype and the resulting process for its use is presented here using an example scenario. Based on the experience gained during the creation of the concept and the prototype, the next steps for future work are outlined in conclusion.\nKeywords\u2014High Level Architecture, traffic simulation, traffic scenario, scenario-based testing, data modeling, V&V\nI. INTRODUCTION\nThe development of automated and autonomous vehicles has made significant progress in recent years. Nevertheless, we are still a long way from the widespread introduction of autonomous vehicles 1. Some traffic domains are more in the focus of the general public and are therefore more technically advanced, but efforts to reach the goal of fully autonomous vehicles suitable for widespread everyday use unite all of them. A certain historical and cultural pioneering role can be attributed to road transport systems2, but water transport systems3,4 and other domains\u2019 transport systems are increasingly experiencing great interest in this regard, too.\nOne of the biggest challenges in developing such autonomous vehicles (AVs) is their validation and verification (V&V). Especially for the successful introduction of future vessels with a degree of autonomy of three or higher, as categorized by the International Maritime Organization (IMO)5, and future road vehicles with driving automation of level of 3 or higher as defined by SAE6, the proof of their functional safety is very important: Studies have shown that a large part of the population is concerned about AVs malfunctioning and therefore lacks the necessary level of trust to use them in the near future7\u201311. From this, it can be concluded, as a study of the German and U.S. print media12 also showed, that one of the most important aspects on the way to public acceptance of highly automated and autonomous vehicles is the clear proof of their functional safety.\nDue to the introduction of non-deterministic approaches, such as the use of self-learning artificial intelligence, classical deterministic functional safety verification methods such as model checking and theorem proving alone are often no longer sufficient to ensure the functional safety of the whole system or its parts.13,14 Instead, the behavior of these systems must be checked at least partially at runtime. Unfortunately, it is not possible to manually test all conceivable situations an automated or autonomous vehicle could be exposed to in the future with reasonable effort. Covering all permutations of environmental variables by real-world test drives requires an economically unfeasible amount of time and resources15. The last few years have brought along some approaches to tackle this issue. A very popular approach to replace real-world testing is the use of traffic simulations.16 Running tests in a simulated virtual environment brings several advantages, including the ability to be able to be used during development, to be executed faster than in real-time, and not to expose people and equipment to any risk17. Especially the use of simulation for validation of sub-systems as early as during the development stages can lead to early and cost-efficient detection of errors.17 In order to obtain meaningful results from simulative tests, an\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 2\nadditional systematic approach is required.18 For this purpose, the so-called scenario-based approach, as proposed within the Pegasus project19 and others, has become established. The approach consists of identifying, modeling, simulating, and evaluating exactly those traffic scenarios that are most relevant for obtaining meaningful information about the functional safety of a particular (sub-)system under test (SuT).\nThe need to be able to test subsystems of a vehicle in a simulative way results in the necessity of the possibility to combine simulations from different providers or even to replace components of a simulated vehicle with one or more real systems, external simulations, external pieces of software, or external models. For this purpose, cosimulations have proven to be particularly useful.20\u201327 This is mainly because their distributed nature allows for external systems to be connected by design. Distributed Co-simulations, however, bring their own challenges. For example, the data that is exchanged between the participating simulations must be additionally described and this description must be distributed among the participants so that they know what kind of data in what format is being sent by the others and how to deal with it. Some co-simulation standards also introduce a central communication interface that needs to know which participant wants to receive which data. At first glance, this approach is not necessarily compatible with the scenario-based approach since different scenarios with different requirements are to be simulated in short succession.\nII. CO-SIMULATION STANDARDS\nIn addition to many concrete use case, tool, or technology-specific co-simulation frameworks that can be found in the current scientific literature, two standards have emerged that are by now widely used. The Functional MockUp Interface (FMI) and the High Level Architecture (HLA) standards have a very similar goal, are both described as tool independent, but have some significant differences in approach on closer inspection.\nThe Functional Mock-Up Interface (FMI) is a standard for the exchange of dynamic models and co-simulation28. The first version of the standard was published in 2010. Since 2011, the maintenance and further development of the standard have been carried out by the Modelica Association, a second version of the standard was published in 2014 and the third version is currently under active development. FMI for co-simulation establishes a co-simulation environment where multiple simulation components are coupled. Those components implementing the FMI standard are called Functional Mock-up Units (FMU). On a basic level, an FMU can be described as a wrapper of an XML file, a solver, and the model to be executed deployed as C source code or a platform-dependent binary file. To run a co-simulation consisting of several FMUs, a master algorithm is needed. A corresponding ready-to-use implementation is not provided by the standard, but there are some free and commercial ones. These differ in the supported functions because the FMI standard does not prescribe a feature set, interfaces, or processes that have to be fulfilled by the master algorithms implementation. Thus, only some of the master algorithms support, for example, a physically distributed operation. The standard has been developed for efficient simulation of continuous systems, whereby the data exchange between the FMUs, however, only takes place at discrete points in time.\nThe High Level Architecture (HLA)29 standard was originally defined in the 1990s by the Defense Modeling and Simulation Office (DMSO) of the US Department of Defense (DoD) to facilitate the assembly of stand-alone simulations. Since 2000 it is a standardized, regulated, and published by IEEE. The original goal was the reuse and the interoperability of applications that were not necessarily interoperable by design. Therefore, HLA is meant to resolve interoperability and reusability issues between those software components. Another important aspect of the HLA specification is the synchronization capability. HLA can be used for implementing discrete-time simulations as well as for discrete-event simulations, or a mixture of both. Much emphasis is therefore placed on time management and synchronizing the participating simulations, called federates, to avoid inconsistent states of the overall simulation, called federation. To achieve this goal, there is a central component called Runtime Infrastructure (RTI). It handles tasks such as federation management, sharing of objects and their values between federates, time management, etc. In addition, federates do not communicate directly with each other, but only indirectly through the RTI, as can be seen in Figure 1. To do this, the RTI needs to know what kind of data each federate will provide and what it wants to consume. These data and relationships are described in the so-called Federation Object Model (FOM). This in turn can be extended by each federate in the sense of so-called modular FOMs since the introduction of HLA Evolved (IEEE 1516-2010) in 2010.30 HLA only describes interfaces, processes, and contracts to be complied with, but does not provide a ready to use implementation of the RTI. However, thanks to the active community, there are some free and commercial implementations available.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 3\nOne of the main differences is that one could arguably say that a single FMU in an FMI co-simulation can be considered as a replacement of a real sub-system ready to take inputs and compute resulting outputs. This is closely related to the definition of a digital twin of a single traffic participating vehicle.31 FMI is, therefore, more suitable for representing a vehicle in detail as a system of systems. HLA, on the other hand, places emphasis on a single federate representing larger entities or even groups of entities. This fits very well with the structure of an agentbased simulation, which is very close to real traffic if one considers individual vehicles or their drivers as agents. In addition, the HLA standard places more emphasis on supporting physically distributed simulation environments, which has great added value when the system under test is located elsewhere and can only be connected via communication infrastructures. These two mentioned advantages, together with the very detailed prescribed interfaces, workflows, and constraints, as well as the focus on time and data management, make HLA the more suitable choice for the further proceeding of this work.\nIII. HLA FOR FLEXIBLE SCENARIO-BASED TEST WORKFLOWS\nAs mentioned in the previous section, the federates of an HLA federation do not communicate directly with each other but indirectly using the central RTI. A federate informs the RTI when it instantiates new simulationrelevant objects and sends the corresponding values to the RTI each time the attributes of these objects are updated. Analogous to this publishing mechanism, a Federate informs the RTI which object instances and attributes of other Federates it is interested in and subsequently receives the new values from the RTI after each corresponding attribute update. For this to work generically - to ensure interoperability - the data is sent to and received by the RTI. For this to work, the structure of the objects and the data types of their attributes have to be defined manually in the Federate Object Model (FOM).\nThe development of HLA federates is typically very complex and resource-intensive because developers must invest a significant amount of time not only to create and maintain the just mentioned FOM but also to handle common HLA functions such as controlling simulation time, the synchronization process between federates, publishing, subscribing, and updating elements of the objects along with their associated coders and decoders. As a result, they cannot fully focus on the actual functionalities of the simulation content.32 While the functional aspects, such as time synchronization and communication with the RTI, can be fairly easily moved to a library since these processes are similar enough for most federates, the FOM must always be adapted to the respective communicational functionality of an entity to be simulated. The methods for processing the received object instance and attribute updates must also be adapted accordingly to the behaviors mapped by the federate implementation.\nThis approach is well suited for purposes where one has a lot of different stand-alone simulators that rarely if ever get customized and get combined in a plug-and-play manner depending on the planned simulation content. This is for example the case for vehicular and military training and education simulation environments, which are a common application for HLA. However, this poses a challenge for the efficient use of HLA for simulative scenario-based test workflows. In this case, the simulation contents, their level of abstraction and their behavior are often adjusted, since a wide variety of scenarios must be simulated, with sometimes more and sometimes less complex participants, behaviors, and environments. This is due to the fact that the simulation content and flow must be tailored to the system under test and its current development status.17 In addition, scenario-based test runs often consider extreme and rarely occurring situations, which may require unusual and arbitrary behaviors or parameter combinations. These can also vary from scenario to scenario.\nOn the other hand, predefined FOMs and communication implementations are advantageous for the reuse of implemented federates and for long-running simulations to which new sub-simulations are added during runtime. Reusability is also of utmost importance for the scenario-based approach, as it is essential for its efficient use that not every scenario has to be completely implemented from scratch. However, adding sub-simulations at runtime is not relevant in this case and can be discarded as a requirement, since the ideal scenario-based approach envisions that many different scenarios are simulated in sequence and that they are self-contained. Instead, distributed cosimulation is mainly used here, as already touched upon, because it allows an intuitive connection of the vehicle as\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 4\nthe system under test, in the sense of vehicle, hardware, software, or model-in-the-loop.17 In addition, this provides good load distribution capabilities for the simulation of more complex scenarios.\nIV. INTERDEPENDENCE BETWEEN SCENARIO AND SIMULATION MODELS\nSince scenarios and their representation are, as the name suggests, the core of scenario-based testing, they have a key role to fulfill. This is especially true when scenario-based testing is integrated into the development process to validate the results of each development step, as described in a previous work on a new approach to describing traffic scenarios with a model-based multilayered approach.17 This development integrated process is illustrated in Figure 2.\nThe classical approach to initiating simulation runs would be that a simulation system does contain a simulation model (the implementations of the simulated entities and their dependencies), which represent the simulation run\u2019s contents, and these are set into a certain starting state via direct parameterization, from where the simulation run is started. Scenario description languages (SDLs) in particular have established themselves for this task. There are many of them, some open, others closed, some text-based, others graphical. Two examples are OpenSCENARIO33, which is very well established in the automotive field and represents the contents of a simulation run in a text-based way, and Traffic Sequence Charts (TSCs)34, which allow the graphical representation of trajectory families based on formal semantics. Most of the established SDLs are strongly bound to a specific simulation model or have to be adapted to it if the scenario is to be executed by a simulation system. A good overview of established SDLs in the automotive sector can be found in the publication of Ma, Che et al.35\nDue to the need for reusability and persistent cataloging, when a simulation is used during scenario-based testing, this initial state - simply put - is now separated from the state of the simulation and is referred to as a scenario model. The separation leads to two independent models, which are interrelated. This in turn leads to some challenges in modeling and simulating such scenarios, which are largely similar to the difficulties described in the previous section. The resulting potentially problematic areas are shown in Figure 3. Since the set of possible scenario content has to represent the possible contents of a simulation run one-to-one in order to maintain compatibility and utilize the full potential of the simulation system,17 there is a certain interdependence between the simulation and scenario models. This interdependence means that when one model is modified, the other model must also be adapted. Looking more closely at the two models, it becomes apparent that, in the worst case, the simulation developer has to modify four artifacts in total for every simulation run that is to have new or altered simulating capabilities: The implementations of the simulation objects, the FOM, which describes which data is exchanged within the simulation, the objects for scenario description, and the scenario description in terms of configurations and parameterizations. As a result, this kind of scenario-based use of simulations is not practically feasible.\nA possible solution to this problem was presented in a previously published work.17 The core idea is that the simulation models are generated based on the scenario models without the need for manual adjustments. Thus, the interdependence would be resolved or, strictly speaking, obscured for the simulation developers and users. In short, a multi-level model-based approach has been proposed that makes it possible to create scenarios based on a library of scenario building blocks and to use these as direct input for an otherwise rudimentary simulation system. These modelling libraries themselves consist of a model based on a UML extension developed for this purpose and its implementation in the form of Java code. Since this work was more conceptual in character, the present paper will\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 5\ndeal with the fundamental technical setup necessary for its utilization in the context of an HLA-based distributed co-simulation. The result is a framework that allows the development of scenarios to be simulated for different traffic domains without the need for HLA-specific knowledge. In addition, the interdependence of the simulation and scenario models has been resolved, resulting in a more streamlined scenario development process. This in conjunction leads to the effect that not only simulation engineers can use simulation systems, but the developers of the systems to be tested can ideally directly create and simulate the necessary scenarios, which allows the process shown in Figure 2 to be implemented more efficiently during the development of (highly-) automated systems.\nV. RELATED WORK\nAfter the publication of the first HLA standard and the first projects using it, it was quickly realized that the development of an HLA-compliant federation is very complex. Therefore, as early as the late 90s,36 efforts were made to simplify the development and increase the reusability of simulation components. Initially, the main focus was on the reusability of FOMs to avoid having to rewrite them over and over again. Modular concepts were additionally developed in order to be able to reuse separate simulation components more easily. In the later years then some approaches were developed, with which the HLA specific functionality can be hidden partially or completely from the developer, to avoid the repeated creation of infrastructural boilerplate code. This should make it easier for developers to start using HLA and reduce the time required to implement a running federation.\nFor the objectives of this work as described in the previous section, the reusability of model components, the automatic generation of HLA-specific components, and other development easing techniques are also possible relevant concepts and assessed for their suitability."
        },
        {
            "heading": "A. Base Object Models",
            "text": "The idea behind Base Object Models (BOMs) is to provide a component framework for facilitating interoperability, reuse, and composability, to tackle the problems caused by the increased complexity of simulation environments. The concept is based on the assumption that piece parts of models, federates, and federations can be extracted and reused as modeling building blocks or components.37 The concept of BOMs was first introduced in 1998,36 and later in 2006 became a standard maintained and published by the Simulation Interoperability Standards Organization (SISO).38\nEssentially, a BOM serves to represent a component. The focus is placed on describing the interface for a component, not the implementation details. It is therefore the responsibility of the simulation system to provide the implementation of behaviors described by the interface.39 This description is persisted in the form of static data structures such as tables, UML, and XML and can thus be stored and indexed in a kind of library for reusable cosimulation participants. A developer then searches this library for a BOM that meets previously identified requirements for Model Capacities. If such a BOM exists, it can be used instead of developing a new one. This procedure is thus located in steps 2 to 4 of the Federation Development and Execution Process (FEDEP).40 The behavior described by the selected BOMs can then be implemented manually into the federate or an already available BOM Component Implementation (BCI) can be selected and integrated into the federate. The idea behind BCIs is to provide component model implementations matching the required behavior described by a component interface, to increase the reusability even further.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 6\nAlthough this approach originally brought some distinct advantages, such as significantly increasing the reusability of simulation components, increasing comprehensibility, and reducing complexity for developers, BOMs alone are not a suitable approach for implementing the short-lived scenario-based co-simulation runs envisioned here. Since BOMs represent structures and processes separately from the implementation and scenario description, the problem of interdependencies identified earlier, and the associated maintenance effort remain. A catalog like the use of BOMs and BCIs provide is very well suited for simulation applications where components are rarely tweaked and instead often recombined. For the use case envisioned here of using scenarios as a direct input for initializing the simulation environment, the use of BOMs would actually create yet another third dependency: structure and communication model, implementation of federates and/or BCIs, and the scenario."
        },
        {
            "heading": "B. BOM Modeling Framework (BMF)",
            "text": "In 2011 a BOM-based framework prototype that supports model editing, code auto-generating, testing, and component-based modeling, called BOM Modeling Framework (BMF), was presented. The goal of this framework is to further promote the reusability and interoperability of models, in addition, to further decrease the development complexity of HLA-based co-simulations.41 This is done by further partitioning the executable part of a federate (see Figure 4): Atomic Models are the central building blocks in this approach. They are executable small units that provide certain functionalities and can be combined with other Atomic Blocks to form a Coupled Block. Each Atomic Block has precisely defined inputs and outputs. The Atomic Block itself is also subdivided into the socalled Kernel Model and the Connected Model. The kernel model contains the models and implementations required for the intended domain-oriented functionality. The kernel model contains all the necessary models and infrastructural implementations that are required for communication and interaction with other blocks. This results in a clear separation between the business functionality and the structural models and implementations: \"Any model must provide an abstract interface in which various operations are defined. Concrete implement it. User-defined models never one must inherit directly invoke methods of other user-defined models. Models must never depend on specific implementations of other models.\u201d41 Another important part of the BMF is the Extensible Simulation Running Framework (XSRFrame), which ultimately ensures that the models are able to be executed and interact with each other. Actually, XSRFrame is an HLA-compatible general-purpose federate that can accommodate BOM models and provides the most important interfaces and services to communicate with the RTI.\nThe general procedure for development with the BMF is that a model description document is created first. Based on this, skeleton code is generated automatically, which must be implemented by the developer manually to the end. The code and the model are then exported as an atomic model in the form of a DLL. Tool support is required for these steps and the subsequent generation of the Connected Model functionalities. This creation of Coupled Models from multiple Atomic Models can then be done manually. Although the use of the BMF greatly increases the reusability of models and implementations and additionally reduces the complexity for the developer, the dependency between models is at most somewhat obscured. In the case of more heavyweight modifications, the model description must first be modified again in order to generate the corresponding code, which then in turn has to be modified too. In addition, the publications on the BMF do not deal with the question, in which extent the parameters of the models can be influenced from outside of the DLLs themselves. The latter, however, is of great importance for a scenario-based approach. On the other hand, the strict separation between interfaces and implementation as well as between model and engine is a step in the desired direction of scenario-based simulation environment instantiations and should therefore be given continued attention in the further course.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 7"
        },
        {
            "heading": "C. HLA Development Kit Software Framework",
            "text": "The HLA Development Kit software Framework (DKF) is a general-purpose, domain-independent, opensource framework, which facilitates the development of HLA Federates. The DKF allows developers to focus on the specific aspects of their own federates rather than dealing with the implementation of the common HLA-specific functionalities like managing the simulation time, connecting to the RTI, publishing and subscribing, and managing the HLA specific Object and Attribute elements.42 The DKF is built around three key principles: (1) Interoperability, which is achieved through full conformity to the IEEE 1516-2010 standard specifications; (2) Portability and Uniformity, DKF provides a homogeneous set of APIs that are independent of the underlying HLA RTI and Java version; (3) Usability, the complexity of the features provided by the DKF framework are hidden behind a set of APIs.43 The basic structure of a DKF-based federation can be seen in Figure 5. The DKF layer is also able to accept extensions and use them for application-specific processing tasks. Thus, the framework can also be extended to a certain extent for specific applications.\nThe DKF\u2019s approach successfully separates HLA functionalities and the function calls required for them from the implementation of the actual federation. As a result, the need for expert knowledge of HLA functionalities is reduced and the development of small test/dummy federations as well as large real federates is accelerated. Its clearly defined structures, interfaces, and processes also make it easy to understand the internals of the processes within an HLA federation and inside the DKF layer. Unfortunately, the main drawback of the two-way dependency between the models cannot be completely solved here either: FOMs still have to be written by hand and the corresponding Java classes subsequently have to be annotated with the DKF's built-in annotations. A scenariobased approach is also not possible in a straightforward way when utilizing the DKF, since a scenario - as understood here as a combination of simulation participants and their starting states - cannot be used as a direct input for the simulation environment\u2019s initialization. Nevertheless, the DKF approach comes close to reaching the goal set for this work and some concepts can be used as guidance, such as the unified API for implementing a federates internal behavior."
        },
        {
            "heading": "D. Model-Driven Approaches to the Development of Distributed Simulations",
            "text": "Another approach that has received increasing attention over the last decade is the model-based generation of distributed simulations. Since this paper focuses on the use of HLA (cf. Section 2), only the most prominent approach in this area that uses HLA will be highlighted in the following.\nIn 2012, Bocciarelli, Pieroni, et al. proposed a model-driven method for building distributed simulations.44 At this point, the work focused on the transformation of business process models into executable distributed simulations for the purpose of analysis and testing. Since transport systems differ from business processes in many ways, the work would not be relevant at this point. In the same year the basic idea was extended to simulate general system models by building upon the Systems Modeling Language (SysML).45,46 The basic idea is to create a SysML model of the planned federation, consisting of several individual model instances, which are then enriched with HLA-specific details using HLA-specific UML profiles, and later transferred into an implementation by a multistage model transformation process. The semi-automatically generated implementations are merely skeletons that have to be filled with logic subsequently to get an executable federation. This largely avoids manual implementation of HLA-specific processes, which makes the development process of distributed federations less complex.\nThis approach was further expanded and improved in the following years by cloud-based deployment capabilities47, tailoring the approach to the Object Management Group\u2019s Standard for Model Driven Engineering, the Model Driven Architecture,48,49 and adding automated FOM generation to further ease the process of creating\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 8\na full-fledged executable federation.50 The last point in particular solves a major weakness of the previously mentioned related works: The manual creation of the FOM. The above-mentioned DKF was in fact used in one publication as the basis for the creation of the implementation.49 It could therefore possibly be used for closing one of the biggest gaps of the DKF by placing the model-based process upstream.\nThe latest iteration is the tailoring to the standardized Distributed Simulation Engineering and Execution Process (DSEEP)51, which emerged from the HLA standardization activities and provides a standardized and rigorous process for developing and executing distributed simulations. The result goes under the name of ModelDriven Distributed Simulation Development Process (MoDSEEP).52 The applicability of this model-driven approach was later demonstrated on the basis of use cases from practice and concrete tool chains.53,54\nAlthough this approach has very similar overarching goals to the work presented here, is obviously very well elaborated and seems to be practically applicable, the concrete objectives are slightly different, which renders the results highlighted above not directly applicable for fulfilling the goals pursued here. The problems identified are the following: (1) To perform the proposed model-based process, HLA-specific knowledge is still needed for the manual enrichment of the SysML models using the two proposed HLA-specific UML profiles. The approach presented here completely hides all HLA mechanisms from the user. (2) The implementation of the actual logic of the federates is downstream of the multi-level model transformations, as is common in MDA. Thus, when using scenarios as understood in this work, the integration of the logic would have to be done again for each scenario. The approach proposed here moves the implementation further upstream in the process, so that the scenario-creating user of the simulation system only has to assemble and parameterize ready-made \"building blocks\". (3) The proposed tool chains contain a not insignificant number of different applications and tools to perform the individual steps of the process. Proprietary software like Pitch Developer Studio55 is also used in some cases. The goal of the present work is to have significantly fewer dependencies. (4) The resulting implementation does not seem to give the developer an easy way to use the data (objects and attributes) published by other federations. Or at least this question remains open, as the published papers do not address this in detail. The approach presented here offers the developer a uniform way to easily access objects and attributes from other federations and use them for own calculations within the federate logic as is demonstrated in the later course. Nevertheless, knowledge from the existing Model-Driven Approaches can and should be included, especially since the basic idea overlaps with the one building the foundation here.17,23\nVI. AD HOC SIMULATION MODEL\nAs already touched upon in section IV, this work aims to explore how to implement the technical foundation for a realization of a previously published conceptual work.17 The presented approach is that the simulation model are generated directly based on the scenario model. This would resolve or, strictly speaking, obscure the interdependency for the simulation system developers and users. In addition, parts of the approaches are adopted from the related works mentioned in section Error! Reference source not found.: The developer should only have to interact with uniform and relatively simple interfaces in order to completely hide HLA's own quite complex functionalities and the need to implement the handling of HLA-specific management tasks every time. Also, as mentioned in section V.B, a strict separation between model and engine is aimed for, to allow simple modeling of the scenarios independent of any infrastructural functionality and independent of the HLA implementation used. In the following, the model-based approach with the mentioned additions obtained from the related works will be looked at on quite a high level to prepare for the following section on the actual implementation.\nTo resolve the double dependency between the models from the developer's point of view, the simulation model should be generated entirely from the scenario model. This is shown in Figure 6. Here it can be seen how the scenario model on the left side defines the basic structures, rules, and possible simulation components in a hierarchical way. The initial simulation model is then generated from the scenario instance created in this way. This can be thought of as a description of object-oriented program classes which, together with a set of parameters, are transformed into concrete object instances. As the simulation time progresses, these objects are updated in each time step, resulting in a new simulation state. This allows fast execution of different scenarios one after the other since no time-consuming adjustments have to be made to the actual simulation system before simulating a new scenario.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 9\nTo enable this design, the HLA-specific object models must also be generated from the scenario model. In more specific terms, this means that a valid FOM or valid FOM modules must be generated during the transformation. Together with the instantiated simulation objects, these form the simulation model. In order for simulation objects to be able to react to each other, the information about publishing and subscribing must also be included in the scenario and be utilized in the transformation. In order to provide the simulation system user with possible elements that can be used to compile and parameterize a scenario as simple as possible, a modular building-blocks-like approach is adopted. This can be seen in Figure 6 on the left side.\nAn intuitive implementation of this is a multi-layer object-oriented inheritance structure. Here, the functions, interfaces, and structures that are essential for the federation\u2019s functionalities are first defined by abstract classes. These are then inherited by classes that add additional domain-specific functions - here the maritime domain is used as an example from now on. These building blocks can then be assembled in the form of a scenario. This can be done in the form of a simple data structure such as XML, in which the selected objects are defined and parameterized. The resulting scenario instance can then be used together with the referenced library of building blocks to derive the content of the FOM. The introduction of the layer with the abstract classes also has the advantage that consistent interfaces are made available for e.g. the implementation of the simulation objects' behavior over time. By hiding the simulation-specific implementations in those abstract classes a separation between model and engine is achieved - which is a posed requirement. To fulfill the third basic requirement of also hiding the HLA functionalities, so that the developer does not need to be proficient in the use of the HLA standard itself, an additional library is introduced. This library contains all needed implementations for object management, encoding and decoding HLA messages, time management, federation management, etc. in a way that is generic enough to be used for every federate in the context of a traffic simulating federation. For this purpose, the HLA Ambassador Library (HLAAL) is introduced, which combines the traditional Federate and RTI ambassadors, and enriches them with further generic (de)coding and communication-related functionalities.\nThe components described above can be seen on the left side of Figure 7. These must now be converted into a runnable simulation environment at the beginning of a simulation run by a kind of model transformation. To accomplish this, a central component is introduced that can read and use the components described above and generate the components needed for the simulation environment based on them. How this conversion is done in detail will be considered in more detail in the next section. This central component should additionally be the only point that provides possibilities for direct user interaction. Thus, the operation of the simulation system can be kept as simple as possible by providing a library and a scenario instance referencing this library as input and the central component handles all following tasks ranging from reading the inputs, transforming the scenario into a set of runnable federates, and starting the federation. Because of this central role this component is called Simulation Manager in the following.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 10\nVII. IMPLEMENTATION\nThis chapter deals with the implementation of the previously described concept in the form of a first prototype. Challenges to the implementation will be presented, decisions made will be disclosed and justified, and the core elements of the prototype will be examined in more detail. By far not all implementation details are presented and the illustrations are often additionally somewhat abstracted, but the level of detail is sufficient to give a good overview of the way the prototype works. The following chapter then uses a minimal example to show how a scenario can be created and simulated.\nSince there are a variety of HLA RTI implementations, recalling that HLA only describes the interfaces and processes but does not provide an implementation, a decision had to be made first on which to use. Since no commercial software was to be purchased for this research work, one selection criterion was that it should be a free open-source implementation. The implementation should also support the latest HLA standard IEEE 1516-2010, also known as HLA evolved, at least in most parts. Out of the four leading HLA RTI implementations according to a recent comparison by G\u00fctlein et al.,56 there are two non-commercial ones: Portico57 and CERTI58. Portico offers a little more freedom in that it can be used with C++ and Java. In addition, Portico is one of the few implementations that is completely decentralized.56,59 This decentralization was considered helpful for the fast implementation of a prototype since no central component would have to be set up and the communication among the federates takes place without much configuration effort via multicasts. The RTI component, which has always been illustrated as a central stand-alone component up to now, is merged into the federates, so to speak, by integrating the Portico RTI implementation into each federate, where it performs the tasks of an RTI, such as filtering incoming messages. If the prototype is later further extended, Portico also provides the possibility to use point-to-point connections via a central component called a \"WAN router\", which is usually the more realistic scenario for productive use.60 The choice, therefore, fell on Portico. As a result, Java was chosen as the programming language for the implementation of the prototype, since Portico was written in Java and C++ compatibility is only established via wrappers, which require a running JVM container. To avoid this overhead, Java is used directly.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 11\nThe main challenges for the development were: (1) The conceptualization and prototypical implementation of a data structure for a scenario model library as described in the previous sections; (2) The automated generation of executable sub-simulators from the combination of the scenario instance and the used library. The static content from the scenario instance (XML) and the dynamic content from the library (program code) were to be used; (3) The automated generation of FOM modules for the respective sub-simulators from the given information of the scenario and the library; (4) The automated integration of some kind of Ambassador Library to ensure the uniform interfacing with the local RTI component (LRC); (5) The automated initialization and launch of the Federation and all participating Federates; (6) In addition, it was decided to integrate a specialized observer federate, that subscribes automatically to values previously defined in the scenario instance and makes them available for further use. For the prototype described here, it was decided to send the values to a WebSocket server. However, the ObserverFederate is kept very generic so that the values could also be stored persistently in the future, e.g. in a log file or a database.\nA master federate will also be introduced, which will provide the FOM module for all basic simulation functionalities and can be extended in the future to fulfill central management tasks of the simulation system - e.g. stopping the simulation when predefined conditions regarding the simulated objects occur. The usage of Portico, the introduction of an observer federate, and a master federate thus results in the structure of a federation shown in Figure 8.\nIn order to adopt the overall conceptual structure shown in Figure 7 in the implementation of the prototype, the Java packages were structured accordingly. The resulting package structure can be seen in Figure 9. It can be seen on the left side that the inheritance depth of the library, which serves as a construction kit for the scenario instances, has been extended to three levels. The package simulation contains classes, which only represent the basic functionality of a simulation, like the abstract class SimulationSuperClass from which all other classes inherit or the abstract class SimulationObject which contains basic fields for e.g. the position in the virtual space. Also, the AbstractBehaviour is located here, which specifies the implementation of the method nextStep(double timePassed). This is called once per HLA invoked time step during the simulation execution and later contains the user-defined behavioral implementation. A very important class here is also SimulationAttribute<T>, which serves as a wrapper for attributes that can be shared with other federates (publish). In addition to a field for the actual attribute value, the class also contains information that is required to do this, such as the data type of the attribute (Boolean, String, Integer, etc.) and the information on whether this attribute should be shared in the current scenario or not. The package traffic imports the package simulation and extends the given, mainly abstract, classes by fields and methods, which are necessary for the implementation of traffic. However, this concept of traffic is still unspecific and domain-independent at this point. For example, based on the SimulationObject, the class TrafficParticipant is introduced, which contains, among other things, the additional fields SimulationAttribute<Double> speed and SimulationAttribute<Double> acceleration. Together with the services package, those two packages form the base_library package, which thus represents the concrete implementation of the Simulation Object Library from Figure 7. The services package offers some functionalities to be used uniformly later, such as converting a scenario instance from a Java object structure to an XML file and vice versa. This functionality is strongly bound to the class structure and is therefore delivered with the library and can be used by a separate application, as the actual simulation system will be.\nBuilding on this generic basis, a traffic domain-specific package can then be defined, as also already indicated in Figure 7. This is also done by inheritance. For example, the Vessel class extends the TrafficParticipant class with fields representing the Maritime Mobile Service Identity (MMSI) and the current course and draught. The purpose of this structure, as already described in the concept section, is that various domain or use case-specific libraries can be implemented, exported, and made available for use on a consistent and uniform model basis.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 12\nThe package simulation on the other hand contains three sub-packages: manager, interpreter, and simulation. The content of the manager package represents the central interface between scenario and simulation (see Figure 7). Located here are mainly functionalities for the import of a scenario instance in the form of an XML file and the control of the program flow during the simulation environment initialization. Functionalities from the interpreter package are used, which take care of initializing the scenario contents as an object structure from the combination of the XML file and the given library. In addition, the FOM modules are generated here from this object structure and the XML. The contents of a FOM are first initialized in the form of a Java object structure representing the FOM\u2019s content and afterwards this is then converted into XML files according to the standardized format given by HLA\u2019s Object Model Template (OMT) Specification and stored temporarily. The reference to this temporary file is then stored in the Java object structure, so that later access (while the Federates join the Federation) is easily possible. During all these transfer and generation processes, all associations between those different kinds of representations of the same objects and attributes, like a FOM path and the corresponding instance of an object, or an HLA compliant FOM and the Java FOM representation, are always stored for easy access in the later course. This is done in a data structuring object called ReferenceStore per top-level simulation object (each of those gets its own federate when initializing the simulation environment). The storage of these references has been implemented using the BiMap and Multimap data structures provided by Google's Guava library which extend the Map data structure offered by Java with additional functionality.61 A ReferenceStore uses the fields shown in Listing 1, that can be accessed through public methods for getting, adding, or searching the stored entries like getFomPathForSimulationObject and getSimulationAttributeByUUID.\nFinally, the sub-package simulation contains everything needed for the actual execution of an HLA conforming federation and thus is the implementation of the aforementioned HLAAL. Most of the classes and their interplay can be seen in Figure 10. The central unit is the so-called InterpretedFederate, which represents an executable single Federate. Each executable Federate will be assigned a top-level SimulationObject from the scenario including the corresponding, previously generated, FOM module and the ReferenceStore created during the generating process. Communication with the RTI is handled by an Ambassador object and a DataHandler object for both the incoming and outgoing directions. The Ambassadors communicate directly with the RTI via standardized interfaces and callbacks. If data is sent (publish) or received (subscribe) about objects or attributes, these again call corresponding methods of the DataHandlers. The DataHandlers are implemented in such a generic way that only the information from the ReferenceStore is needed to encode outgoing data accordingly HLA-compliant or decode\nprivate ActiveSimulationObject simulationObject; private String simulationObjectType; private FOM fom; private BiMap<String, FOMObjectClass> fomPathToFomObjectClassBiMap; private BiMap<String, FOMAttribute> fomPathToFomAttributeBiMap; private Multimap<String, SimulationObject> fomPathToSimulationObjectMap; private Multimap<String, SimulationAttribute<?>> fomPathToSimulationAttributeMap;\nprivate BiMap<String, SimulationObject> uuidToSimulationObjectBiMap; private BiMap<String, SimulationAttribute<?>> uuidToSimulationAttributeBiMap;\nListing 1: Field declaration of the ReferenceStore class\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 13\nreceived HLA-compliant data to corresponding Java instances of the classes from the library. The receiving process involves storing the object instances that represent the objects published by other Federates in an object instance cache. This set of object instances is then made available to all Behaviour implementing classes by injection where it can be accessed in the user implementation of the nextStep method. Here it becomes clear why the library was modeled with a multi-layer structure and uniform simple interfaces in mind. This makes it possible to implement behaviors that react to other simulation participants without the developer having to worry about where and how this data comes from.\nEvery concrete behaviour that extends the abstract Behaviour and thus implements the interface IBehaviour must implement the nextStep method as already mentioned. The interface specifies the return type Map<String, Object>. A key-value pair of this map contains the internal ID of a SimulationAttribute and the newly determined value for this attribute, e.g. a new position, a new heading, or a new speed. All attribute value updates returned in this way by all nextStep methods executed in the federate are thus first collected and then reflected to the actual attributes identified by the respective ID. The central ReferenceStore is again used to help with this. This two-part process for updating own attribute values is intended to prevent concurrency problems so that the scenario developer, again, faces less possible complexity.\nThe entire life cycle of an InterpretedFederate is depicted through an UML state machine in Figure 11. It contains all the processes just described above as well as additional simulation management activities and HLAspecific steps. The HLA Development Kit (DKF) framework (see previous section V.C) offers a well-defined behavioral model for managing the life cycle of an HLA Federate32, which at first glance appears similar. On closer inspection, however, it becomes apparent that the similarity is mainly due to the fact that the HLA standard already sets the basic life cycle phases, such as connecting to an RTI or mechanisms for progression in the simulation time by means of Time Advance Requests (TAR) and Grants (TAG). The concrete federate life cycle conceptualized here differs in that details are included on the management of HLA Handles and the processing of incoming attribute value updates for all kind of objects published by other federates. This is explicitly conceptualized and presented, as this is one of the core features of the approach presented in this paper (cf. Reference Store and Object Instance Cache in Figure 10).\nThe ObserverFederate relies on a very similar program structure and state flow, but of course, does not have its own SimulationObject and thus also works without the execution of behavior. Therefore no outgoing DataHandler is needed. Concerning the state flow, the upper sub-state of the running state is therefore also omitted in this case.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 14\nVIII. EXAMPLE OF APPLICATION\nIn order to verify the functionality and to demonstrate the process of using the implemented prototype, a minimal maritime scenario was realized. Using this example, the process for creating and simulating a scenario is illustrated below. It is assumed that a usage-ready library is given, in the sense of a domain-specific modular set of building blocks, as described in detail in the previous course of this work. The implementation work to create this is therefore not shown in its entirety. However, the procedure for this should have become clear from the description of the package structure earlier.\nTo demonstrate functionality with minimal scenario complexity, two vessels were placed in open water without any obstacles in the surrounding area. The exemplary made-up scenario is located in the area of the German Bight roughly between Bremerhaven and Wilhelmshaven. The two vessels are roughly based on the characteristics of the container ship Hamburg Express62 and the general cargo ship Anne-Sofie63. Both should follow a section of a route where Bremerhaven would be the start and the destination the port of Hamburg. In the area north of Wangeroge, however, the specific routes differ to some extent, as do the driven speeds.\nIn order to represent concrete traffic participating vehicles, the scenario model must be extended as described in the previous chapters. This means that classes have to be defined which inherit from TrafficParticipant and describe the specific characteristics of the road users to be simulated. For this concrete scenario this meant that the class Vessel defines among others the attribute vesselName and is based on the class TrafficParticipant of the base_library. Inheriting from Vessel, the classes ContainerShip and GeneralCargo provide further properties specific to these types of vessels. The inheritance structure can be seen in Figure 12. Important for the further course is the fact that the attributes highlighted in bold print are distributed over different levels of this inheritance hierarchy and will be important later.\nTo define a concrete scenario instance, the possible objects provided by the maritime library are referenced in an XML file and their attributes are provided with concrete values. The desired class, which is to be referenced and later instantiated, is specified via the type tag of the xsi namespace. The conversion into a Java object structure can then be done later automatically by the interpreter with the help of the Java Architecture for XML Binding (JAXB).\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 15\nAs part of the scenario, the desired observers are also declared and parameterized. In this case, the ObserverFederate should subscribe to the four attributes position, vesselName, speed, and rotation of all objects of the type Vessel. Similarly, it can be defined within a SimulationObject to which the corresponding InterpretedFederate should subscribe to make the corresponding values available for the contained Behaviour implementations. Part of the resulting XML file can be seen in Listing 2. These XML files have currently to be written manually, but some kind of GUI based editor, able to import domain specific libraries and provide the user with an easy way to put together a scenario using the libraries\u2019 elements, could be potentially a good tool to ease this heavily manual step in the future.\nThe schema referenced in Listing 2 specifies the possible elements of such a scenario XML instance and their structure. Due to the integration of JAXB, the schema can be generated automatically, which means that changes to the basic data model would not require a great amount of manual effort on this end. An excerpt from the schema used here can be seen in Listing 3. It should be noted that simulationObject, behaviour and simulationUnit are declared as abstract. This means that the specific type must still be specified in the scenario XML by using the type attribute of the xsi namespace. The concrete implementations of these abstract classes are part of the individually composed domain or use case related libraries. The respective developer is therefore responsible for providing the corresponding schema that builds on this basic schema and describes the concrete characteristics of the contained building block like implementations. An example of this can be seen in Figure 12 and Listing 2: An object of type vessel has a field of type simulationAttribute with the name vesselName. This fact should be represented in a schema belonging to the respective library. In the example from Listing 2, the simulationObject is of type containerShip and the behaviour of type simpleFollowRouteBehaviour. The first is indirectly inherited from activeSimulationObject (cf. Figure 12) and the second directly from behaviour.\n<?xml version=\"1.0\" encoding=\"UTF-8\u201d xmlns=\"http://uol.de/mdts/schema/base\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"?> <scenario>\n<library> <name>maritime_library</name> <version>1.0-SNAPSHOT</version> </library> <observers>\n<observer> <observedClasses> <observedClass> <type>vessel</type> <attributes> <attribute>position</attribute> <attribute>vesselName</attribute> <attribute>speed</attribute> <attribute>rotation</attribute> </attributes> </observedClass> </observedClasses> . . . </observer> </observers> <simulationObjects> <simulationObject xsi:type=\"containerShip\"> <behaviour xsi:type=\"simpleFollowRouteBehaviour\" /> <vesselName> <value>Hamburg Express</value> <name>vesselName</name> <dataType>java.lang.String</dataType> <publish>true</publish> </vesselName> . . . <observedClasses> <observedClass> <type>containerShip</type> <attributes> <attribute>vesselName</attribute> <attribute>position</attribute> </attributes> </observedClass> </observedClasses> </simulationObject> <simulationObject xsi:type=\"generalCargo\"> . . . </simulationObject> </simulationObjects> <simulationIterations>10000</simulationIterations>\n</scenario>\nListing 2: Excerpt from the XML scenario instance describing the example scenario\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 16\nAfter starting the implemented prototype simulation system, the scenario instance XML file created as described above can be chosen as direct input file. The appropriate library (currently has to be part of the local java classpath; ideally it will be loaded automatically using the information in the scenario file at some point in the future) is then used to convert the scenario into corresponding Java objects. FOM modules are then generated from the given information for each top-level simulation object. An excerpt from the XML file generated in this way for the simulationObject of type Vessel shown in Listing 2 can be seen in Listing 4. The inheritance structure from Figure 12 can be recognized here again, which has been converted into an HLA-compliant objectClass hierarchy. After all federates have been created and provided with the necessary data and references, they are initialized in an automated way. This means that the master federate gets started and in doing so also creates the federation automatically, afterwards all other generated federates connect to it. As soon as a synchronization point has been reached, the federation is started and time begins to progress, controlled by the RTI. At each time step, each Behaviour from the simulation object of an interpreted federate is executed, attributes get updated and the RTI gets informed about those updated values if and only if they were marked as publish in the scenario file.\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?> <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" version=\"1.0.0\"\ntargetNamespace=\"http://uol.de/mdts/schema/base\"> <xs:complexType name=\"scenario\"> <xs:sequence> <xs:element minOccurs=\"0\" name=\"library\" type=\"library\"/> <xs:element name=\"simulationIterations\" type=\"xs:int\"/> <xs:element maxOccurs=\"unbounded\" minOccurs=\"1\" name=\"simulationObjects\" nillable=\"true\" type=\"simulationObject\"/> <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"observers\" nillable=\"true\" type=\"observer\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"library\"> <xs:sequence> <xs:element name=\"name\" type=\"xs:string\"/> <xs:element name=\"version\" type=\"xs:string\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"observer\"> <xs:sequence> <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"observedClasses\" nillable=\"true\" type=\"observedClass\"/> <xs:element minOccurs=\"0\" name=\"observerWebSocketConfig\" type=\"observerWebSocketConfig\"/> <xs:element name=\"timeStepSize\" type=\"xs:double\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"observedClass\"> <xs:sequence> <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"attributes\" nillable=\"true\" type=\"xs:string\"/> <xs:element name=\"type\" type=\"xs:string\"/> </xs:sequence> </xs:complexType> <xs:complexType abstract=\"true\" name=\"simulationObject\"> <xs:sequence> <xs:element name=\"formString\" type=\"simulationAttribute\"/> <xs:element name=\"physical\" type=\"simulationAttribute\"/> <xs:element minOccurs=\"0\" name=\"position\" type=\"simulationAttribute\"/> <xs:element minOccurs=\"0\" name=\"rotation\" type=\"simulationAttribute\"/> <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"observedClasses\" nillable=\"true\" type=\"observedClass\"/> </xs:sequence> </xs:complexType> <xs:complexType abstract=\"true\" name=\"activeSimulationObject\"> <xs:complexContent> <xs:extension base=\"dynamicSimulationObject\"> <xs:sequence> <xs:element name=\"behaviour\" type=\"behaviour\"/> <xs:element name=\"timeStepSize\" type=\"xs:double\"/> </xs:sequence> </xs:extension> </xs:complexContent> </xs:complexType> <xs:complexType abstract=\"true\" name=\"behaviour\"> </xs:complexType> <xs:complexType name=\"simulationAttribute\"> <xs:sequence> <xs:element name=\"dataType\" type=\"xs:string\"/> <xs:element name=\"name\" type=\"xs:string\"/> <xs:element name=\"publish\" type=\"xs:boolean\"/> <xs:element name=\"value\" type=\"xs:anyType\"/> </xs:sequence> </xs:complexType> . . .\n</xs:complexType> </xs:schema>\nListing 3: Excerpt from the XML scenario schema referenced in Listing 2\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 17\nTo test the availability of published objects and their published attributes of foreign federates, a simple logging output was integrated into the behaviour implementation used. This can be seen in Listing 4. The name of the own simulated ship as well as the class and the current position of the foreign simulation object is written to the console. The console output generated by this code at time step 385 of the simulation is shown in Listing 5.\nList<SimulationObject> observedObjects = this.trafficParticipant .getObservedObjects() .values() .stream() .findFirst() .orElseGet(ArrayList::new);\nSimulationObject observedObject = observedObjects.stream().findFirst().orElse(null);\nif (observedObject != null) { System.out.println(\"////////////////\");\nSystem.out.println(\"// \" + vessel.getVesselName().getValue() + \": I CAN SEE!\"); System.out.println(\"// I HAVE KNOWLEDGE ABOUT THE PARTICIPANT '\" + observedObject.getClass() + \"'\"); System.out.println(\"// THE PARTICIPANT CURRENTLY IS AT: \" + observedObject.getPosition().getValue().toString());\nSystem.out.println(\"////////////////\"); }\n//////////////// // Hamburg Express : I CAN SEE! // I HAVE KNOWLEDGE ABOUT THE PARTICIPANT 'class library.model.maritime.GeneralCargo' // THE PARTICIPANT CURRENTLY IS AT: \"Position\":{ \"Lat\":\"53.84009631117777\",\"Lon\":\"8.115035313513989\",\"Alt\":\"0.0\"} ////////////////\nListing 5: Code for test output, which accesses the injected representations of published objects of other Federates.\nListing 6: Test output at simulation time step 1677\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <objectModel xmlns=\"https://www.sisostds.org/schemas/IEEE1516-2010\" xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://www.sisostds.org/schemas/IEEE1516-2010 https://www.sisostds.org/schemas/IEEE1516-DIF-2010.xsd\"> <modelIdentification> <name>Vessel--2016892160</name>\n<type>FOM</type> . . . </modelIdentification> <objects> <objectClass> <name>HLAobjectRoot</name> <objectClass> <name>SimulationObject</name> <sharing>Publish</sharing> <attribute> <name>position.latitude</name> <dataType>Double</dataType> <updateType>Unconditional</updateType> <ownership>NoTransfer</ownership> <sharing>Publish</sharing>\n</attribute> . . . <objectClass>\n<name>ActiveSimulationObject</name> <sharing>Neither</sharing> <objectClass> <name>TrafficParticipant</name> <sharing>Publish</sharing> <attribute> <name>speed</name> <dataType>Double</dataType> <updateType>Unconditional</updateType> <ownership>NoTransfer</ownership> <sharing>Publish</sharing>\n</attribute> . . . <objectClass>\n<name>Vessel</name> <sharing>Publish</sharing> <attribute> <name>vesselName</name> <dataType>String</dataType> <updateType>Unconditional</updateType> <ownership>NoTransfer</ownership> <sharing>Publish</sharing> </attribute> . . .\nListing 4: Excerpt from the automatically generated FOM module XML file describing the data to be shared by the\nsimulation object of type vessel shown in Listing 2.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 18\nTo test and visualize the ObserverFederate, a simple NodeJS application providing a WebSocket server, and a simple web application were also implemented. The web application connects to the WebSocket server and displays the available data on top of an OpenStreetMap64 layer. A screenshot of this can be seen in Figure 13, which was taken at time step 565 of the federation execution. As already mentioned in section 7, the prototypical implementation of the ObserverFederate implemented here also sends the received information about the observed objects and attributes to this WebSocket server. This is done in the form of JSON data, which is structured analogously to the Java classes of the used library.\nIX. DISCUSSION\nThe exemplary use case shown above is of course far from being a real productive one, but nevertheless, illustrates very well the potential of the approach implemented in this work and how it can be used. It has been shown that it is possible to automate most of the manual steps that were previously necessary for the implementation and execution of HLA-compliant federations. More precisely, using the shown and prototypically implemented approach, no knowledge about HLA itself is necessary anymore: neither by the developer who implements and maintains the domain-specific library nor by the simulation system user who assembles scenarios with the help of the resulting building blocks and then has them simulated. The automatic generation of the Object Model Template (OMT) compliant Federation Object Model (FOM) modules is a particularly important step here.\nIEEE Standard 1730-2022 \u2018Recommended Practice for Distributed Simulation Engineering and Execution Process (DSEEP)\u201951, that is the successor of the now inactive IEEE Standard \u2018Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP)\u201940, describes a seven-step process for developing and executing distributed simulation environments. This process reaches from defining the high-level objectives that the simulation environment should fulfill to analyzing the data generated during the simulation runs. The new approach shown and implemented here encompasses a larger number of the sub-steps of this process. Where most related approaches and frameworks only simplify or completely hide two to three steps between step 2 and 4 for the user, the use of the presented approach and prototype can be seen in steps 2 to 6. This makes the overall process more consistent and less complex. Error! Reference source not found. directly compares the original DSEEP process and the DSEEP process enriched by the use of the approach presented here. It can be seen immediately that the original steps 3 to 6 are replaced. From the user's point of view, step 5 is completely omitted and steps 3, 4, and 6 are greatly simplified. As mentioned above, the vision is that the developer of the domain-specific library is a different person or group of persons than the one responsible for creating scenarios. Splitting the knowledge and workload like that, also transfers the responsibility for testing to the former. This applies at least to the functionality of the possible simulation elements that are part of the library. Whether a particular scenario run unfolds as planned is still the concern of the scenario creator, but this cannot be equated with a test of whether the federation itself is technically error-free. The start process, originally step 6, is automated\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 19\nto such an extent that the simulation system can be started directly with a scenario instance as only input, which was one of the main requirements to properly support a scenario-based approach in the context of simulative testing. By completely hiding the HLA interface details from the developer and user, the benefits of HLA-based distributed co-simulation can be utilized without the need for familiarization with the complex HLA processes and structures.\nMany mechanics of the shown concept and implementation were designed specifically for traffic simulations, respectively for individual traffic participants in cooperation. Within the meta-domain 'traffic' the flexible multilayer model structure makes it applicable for different concrete traffic domains, but whether the basis of the shown approach can in principle also be used in completely different domains than traffic-related ones would have still to be verified. The connection to a concrete system under test was also considered conceptually in this work but not yet implemented. So, here, too, the chosen path must first prove to be really suitable.\nX. CONCLUSION & FUTURE WORK\nIn the present work, a first step was taken towards the efficient use of HLA based distributed co-simulation in the context of validation and verification (V&V) of (highly) automated and autonomous traffic systems and subsystems. The necessary smooth transition from a scenario to a running simulation environment, which has to be highly flexible and adaptable to the respective use case, is ensured by the present approach. In the form of a proof of concept, this novel approach was prototypically implemented, and the process was illustrated utilizing an example.\nIn order to actually productively support the development of corresponding systems and potentially be used in official V&V-based acceptance tests, however, some aspects are still missing due to the prototypical nature of the implementation. Probably the most important point, which was deliberately left out for the most part during the creation of the present concept and implementation, is the connection of the actual system under test (SuT). This can occur in different forms within the context of V&V integrated support for the development of a new system.17 Therefore, the integration of an SuT in the sense of Model- (MiL), Software- (SiL), Hardware- (HiL) and Vehiclein-the-Loop (ViL) tests is one of the highest prioritized topics for future work. On the modeling side, a rough concept has already been developed in previous work, but it still needs to be implemented and tested. For ViL tests, where the system under test replaces a complete simulation participant, the idea of some sort of proxy federate is to be further elaborated in the near future. In the implementation of the prototype presented, little value was initially placed on computational performance also. Therefore, there is also a need to catch up here. The current version of the high-level architecture already includes some features that could be beneficial performance-wise. For example, the so-called data distribution management, also known as filtering, can be used to spatially limit which other simulation objects data updates are received by a subscription, which would greatly reduce the amount of network communication. This and other possible techniques will also have to be considered in the future. In its current state, all federates are also run on a single host, which means that the overall simulation is not yet truly distributed, at\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 20\nleast not in the physical sense. As already briefly touched on in Section VII, the Runtime Infrastructure (RTI) implementation Portico used for the presented implementation offers the possibility of operating federates in a distributed manner even beyond network boundaries, despite its actual decentralized nature. Work has already begun on a way to automate a correspondingly distributed execution of the simulation environment. One of the biggest challenges here is to introduce as few manual steps as possible since one of the main goals of the presented concept is - and will be - to automate the simulative execution of a scenario as much as possible, so that a scenario itself can serve as the only input parameter. A possible platform-independent approach could be the use of the free software for container virtualization Docker65 and the possible generation and distribution of an image per federate. The possibility of physically distributed operation is especially important for the integration of systems as independent federates, as systems to be tested are not necessarily located in the local network. Due to the increasing importance of vehicle-to-vehicle and vehicle-to-anything communication for the functionalities of modern traffic systems, it is also essential to create the possibility that this kind of communication can be directly modeled for and used by the federates. At first glance, Interactions, which are defined by the HLA standard anyway, seem to be a good choice for this purpose. The suitability of these with regard to V2X in the present context of automated FOM generation must therefore be further investigated and a further sub-concept be developed.\nTo make the creation of the scenario instance XML files less error-prone, it would be useful to have a graphical editor, as already mentioned in section VII. In case this hypothetical editor is not used, however, an XML schema for each individual library should be provided so that users have the possibility to check the correctness of their XML files. The creation of such schema should be relatively easy to automate, since the XML file represents the model structure 1:1 and could therefore be used, for example, with JAXB as seen for the basic scenario scheme in Listing 3, which is already also used to convert the XML scenarios into Java structures.\nAnother interesting and potentially useful development of the presented assessment would be to establish some compatibility with FMI or individual FMUs to enable hybrid simulations. A lot of work has already been done on this topic, which could possibly be followed up. However, this topic will be put on hold until the approach presented here has been fully proven and exploits the potential of HLA, as this is not a direct requirement for the use case defined here.66,67\nDespite the multitude of functionalities left to implement and challenges to tackle, the newly created possibility to directly generate simulation models and structures from a model-based scenario instance closes a gap in the traditional use of co-simulations and thus lays the foundation for the efficient use of model- and scenario-based simulation runs in the context of development accompanying V&V processes.\nXI. REFERENCES\n1. Mallozzi P, Pelliccione P, Knauss A, et al. Autonomous Vehicles: State of the Art, Future Trends, and Challenges. In: Dajsuren Y and van den Brand M (eds) Automotive Systems and Software Engineering. Cham: Springer International Publishing, 2019, pp. 347\u2013367.\n2. Kr\u00f6ger F. Automated Driving in Its Social, Historical and Cultural Contexts. In: Maurer M, Gerdes JC, Lenz B, et al. (eds) Autonomous Driving. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 41\u201368.\n3. Munim ZH. Autonomous ships: a review, innovative applications and future maritime business models. Supply Chain Forum: An International Journal 2019; 20: 266\u2013279.\n4. Wasilewski W, Wolak K and Zara\u015b M. Autonomous shipping. The future of the maritime industry? The Malopolska School of Economics in Tarnow Research Papers Collection 2021; 51: 155\u2013163.\n5. International Maritime Organization. Outcome of the Regulatory Scoping Exercise for the Use of Maritime Autonomous Surface Ships (Mass): Maritime Safety Committee (MSC), 103rd session, 5-14 May 2021, London, United Kingdom, 2021.\n6. SAE International - 2018. Taxonomy and Definitions for Terms Related to On-Road Motor Vehicle Automated Driving Systems.\n7. Liljamo T, Liimatainen H and P\u00f6ll\u00e4nen M. Attitudes and concerns on automated vehicles. Transportation Research Part F: Traffic Psychology and Behaviour 2018; 59: 24\u201344.\n8. Dirsehan T and Can C. Examination of trust and sustainability concerns in autonomous vehicle adoption. Technology in Society 2020; 63: 101361.\n9. Wu J, Liao H and Wang J-W. Analysis of consumer attitudes towards autonomous, connected, and electric vehicles: A survey in China. Research in Transportation Economics 2020; 80: 100828.\n10. Bansal P, Kockelman KM and Singh A. Assessing public opinions of and interest in new vehicle technologies: An Austin perspective. Transportation Research Part C: Emerging Technologies 2016; 67: 1\u201314.\n11. Othman K. Public acceptance and perception of autonomous vehicles: a comprehensive review. AI Ethics 2021; 1: 355\u2013387.\n12. Fraedrich E and Lenz B. Societal and Individual Acceptance of Autonomous Driving. In: Maurer M, Gerdes JC, Lenz B, et al. (eds) Autonomous Driving. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 621\u2013640.\n13. Koopman P and Wagner M. Challenges in Autonomous Vehicle Testing and Validation. SAE Int. J. Trans. Safety 2016; 4: 15\u201324, https://www.sae.org/publications/technical-papers/content/2016-01-0128/ (2016, accessed 22 April 2021).\n14. Tschurtz H and Gerstinger A. The Safety Dilemmas of Autonomous Driving. In: 2021 Zooming Innovation in Consumer Technologies Conference (ZINC), Novi Sad, Serbia, 2021, pp. 54\u201358: IEEE.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 21\n15. Wachenfeld W and Winner H. The Release of Autonomous Vehicles. In: Maurer M, Gerdes JC, Lenz B, et al. (eds) Autonomous Driving. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 425\u2013449.\n16. Tak\u00e1cs \u00c1rp\u00e1d, Drexler D\u00e1niel Andr\u00e1s, Galambos P\u00e9ter, et al. Assessment and Standardization of Autonomous Vehicles. In: Szak\u00e1l A (ed.) INES 2018: IEEE 22nd International Conference on Intelligent Engineering Systems proceedings June 21-23, 2018, Las Palmas de Gran Canaria, Spain. Piscataway, NJ: IEEE, 2018, pp. 185\u2013192.\n17. Reiher D and Hahn A. Towards a Model-Based Multi-Layered Approach to Describe Traffic Scenarios on a Technical Level. JMSE 2021; 9: 673.\n18. Lamm A and Hahn A. Towards Critical-Scenario Based Testing With Maritime Observation Data. In: 2018 OCEANS - MTS/IEEE Kobe Techno-Oceans (OTO), Kobe, Japan, 2018: IEEE.\n19. Federal Ministry for Economic Affairs and Energy. Pegasus Method: An Overview, Germany, 2019.\n20. Skjong S, Rindar\u00f8y M, Kyllingstad LT, et al. Virtual prototyping of maritime systems and operations: applications of distributed cosimulations. Journal of Marine Science and Technology 2017; 23.\n21. Smogeli \u00d8R, Ludvigsen KB, Jamt L, et al. Open Simulation Platform - An Open-Source Project for Maritime System Co-Simulation. In: 19th International Conference on Computer and IT Applications in the Maritime Industries: COMPIT\u201920. (ed Volker Bertram), Pontignano, Italy, 2020, pp. 239\u2013253. Hamburg, Germany: Technische Universit\u00e4t Hamburg-Harburg.\n22. Krammer M, Fritz J and Karner M. Model-Based Configuration of Automotive Co-Simulation Scenarios. In: Proceedings of the 48th Annual Simulation Symposium, Alexandria, Virginia, USA, 2015, pp. 155\u2013162. San Diego, CA, USA: Society for Computer Simulation International.\n23. Reiher D and Hahn A. Review on the Current State of Scenario- and Simulation-Based V&V in Application for Maritime Traffic Systems. In: OCEANS 2021: San Diego \u2013 Porto, San Diego, CA, USA, 2021, pp. 1\u20139: IEEE.\n24. Gong W, Zhu Z, Wang K, et al. A real-time co-simulation solution for train\u2013track\u2013bridge interaction. Journal of Vibration and Control 2021; 27: 1606\u20131616.\n25. Pieper T and Obermaisser R. Distributed co-simulation for software-in-the-loop testing of networked railway systems. In: 2018 7th Mediterranean Conference on Embedded Computing (MECO), Budva, 2018, pp. 1\u20135: IEEE.\n26. Brito A and Oliveira T. Simulation and Test of Communication in Multi-robot Systems Using Co-simulation. In: Rocha \u00c1, Correia AM, Adeli H, et al. (eds) New Advances in Information Systems and Technologies. Cham: Springer International Publishing, 2016, pp. 911\u2013 917.\n27. B\u00fccs RL, Murillo LG, Korotcenko E, et al. Virtual Hardware-In-The-Loop Co-Simulation for Multi-Domain Automotive Systems via the Functional Mock-Up Interface. In: 2015 Forum on Specification and Design Languages (FDL), Barcelona, Spain, 2015, pp. 1\u20138: IEEE.\n28. Blochwitz T, Otter M, Akesson J, et al. Functional Mockup Interface 2.0: The Standard for Tool independent Exchange of Simulation Models. In: Proceedings of the 9th International MODELICA Conference, September 3-5, 2012, Munich, Germany, 2012, pp. 173\u2013184: Link\u00f6ping University Electronic Press.\n29. IEEE 1516 - 2010. Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) \u2010 Framework and Rules.\n30. M\u00f6ller B, L\u00f6fstrand B and Karlsson M. An overview of the HLA evolved modular FOMs. In: Spring Simulation Interoperability Workshop, Norfolk, VA, 2007.\n31. Perabo F, Park D, Zadeh MK, et al. Digital Twin Modelling of Ship Power and Propulsion Systems: Application of the Open Simulation Platform (OSP). In: 2020 IEEE 29th International Symposium on Industrial Electronics (ISIE), Delft, Netherlands, 2020, pp. 1265\u20131270: IEEE.\n32. Falcone A, Garro A, Anagnostou A, et al. An introduction to developing federations with the High Level Architecture (HLA). In: WSC'17: 2017 Winter Simulation Conference WSC turns 50: simulation everywhere! December 3-6, 2017, Red Rock Casino Resort & Spa, Las Vegas, NV. (ed Chan WK, D'Ambrogio A, Zacharewicz G, Mustafee N, Wainer G and Page EH), Piscataway, NJ, 2017, pp. 617\u2013631. Piscataway, NJ: IEEE.\n33. Association for Standardization of Automation and Measuring Systems. ASAM OpenSCENARIO V1.1.0 User Guide, ASAM e.V., Germany, https://www.asam.net/standards/detail/openscenario/ (2021, accessed 29 April 2021).\n34. Damm W, M\u00f6hlmann E, Peikenkamp T, et al. A Formal Semantics for Traffic Sequence Charts. In: Lohstroh M, Derler P and Sirjani M (eds) Principles of Modeling. Cham: Springer International Publishing, 2018, pp. 182\u2013205.\n35. Ma J, Che X, Li Y, et al. Traffic Scenarios for Automated Vehicle Testing: A Review of Description Languages and Systems. Machines 2021; 9: 342.\n36. Gustavson PL, Hancock JP and McAuliffe M. Base object models (BOMs): reusable component objects for federation development. In: Simulation Interoperability Workshop, 1998.\n37. Simulation Interoperability Standards Organization (SISO) SISO-STD-003.1-2006 - 2006. Guide for Base Object Model (BOM) Use and Implementation.\n38. Simulation Interoperability Standards Organization (SISO) SISO-STD-003-2006 - 2006. Base Object Model (BOM) Template Specification.\n39. Chase T, Gustavson P and Root LM. From FOMs to BOMs and Back Again: 06S-SIW-115. In: 2006 Spring Simulation Interoperability Workshop, Alabama, USA, 2006.\n40. Institute of Electrical and Electronics Engineers (IEEE) 1516.3-2003 - 2003. Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP).\n41. He Q, Zhang M and Gong J. An Introduction of BOM Modeling Framework. IJMLC 2011: 353\u2013358.\n42. Garro A, Falcone A, Chaudhry NR, et al. A Prototype HLA Development Kit: Results from the 2015 Simulation Exploration Experience. In: Proceedings of the 3rd ACM SIGSIM Conference on Principles of Advanced Discrete Simulation. (ed Taylor SJ, Mustafee N and Son Y-J), London United Kingdom, 2015, pp. 45\u201346. New York, NY, USA: ACM.\n43. Falcone A, Garro A, Anagnostou A, et al. Easing the Development of HLA Federates: The HLA Development Kit and Its Exploitation in the SEE Project. In: 2015 IEEE/ACM 19th International Symposium on Distributed Simulation and Real Time Applications (DS-RT), Chengdu, 2015, pp. 50\u201357: IEEE.\nSUBMITTED VERSION 2 \u2013 SAGE SIMULATION \u2013 DAVID REIHER \u2013 2022-11-22 22\n44. Bocciarelli P, Pieroni A, Gianni D, et al. A model-driven method for building distributed simulation systems from business process models. In: Proceedings of the 2012 Winter Simulation Conference (WSC), Berlin, Germany, 2012, pp. 1\u201312: IEEE.\n45. Bocciarelli P, D'Ambrogio A and Fabiani G. A Model-driven Approach to Build HLA-based Distributed Simulations from SysML Models. In: Proceedings of the 2nd International Conference on Simulation and Modeling Methodologies, Technologies and Applications, Rome, Italy, 2012, pp. 49\u201360: SciTePress - Science and and Technology Publications.\n46. Object Management Group 1.6 - 2019. OMG Systems Modeling Language (OMG SysML\u2122).\n47. Bocciarelli P, D'Ambrogio A, Giglio A, et al. A SaaS-based automated framework to build and execute distributed simulations from SysML models. In: 2013 Winter Simulations Conference (WSC), Washington, DC, USA, 2013, pp. 1371\u20131382: IEEE.\n48. Object Management Group ormsc/2014-06-01 - 2014. Model Driven Architecture (MDA).\n49. Bocciarelli P, D\u2019Ambrogio A, Falcone A, et al. A Model-Driven Approach to Enable the Distributed Simulation of Complex Systems. In: Auvray G, Bocquet J-C, Bonjour E, et al. (eds) Complex Systems Design & Management. Cham: Springer International Publishing, 2016, pp. 171\u2013183.\n50. Bocciarelli P, D'Ambrogio A, Giglio A, et al. Automated Generation of FOM Modules for HLA-Based Distributed Simulations. In: 2019 Spring Simulation Conference (SpringSim), Tucson, AZ, USA, 2019, pp. 1\u201312: IEEE.\n51. IEEE 1730 - 2022. Recommended Practice for Distributed Simulation Engineering and Execution Process (DSEEP).\n52. Bocciarelli P, D'Ambrogio A, Giglio A, et al. Model-Driven Distributed Simulation Engineering. In: 2019 Winter Simulation Conference (WSC). (ed Mustafee N), 2020, pp. 75\u201389. Piscataway, NJ: IEEE.\n53. D'Ambrogio A, Bocciarelli P, Delfa J, et al. Application of a Model-driven Approach to the Development of Distributed Simulations: The Esa Hraf Case. In: Spring Simulation Conference (SpringSim 2020), Fairfax, VA, USA, 2020: Society for Modeling and Simulation International (SCS).\n54. Kay S, Kisdi A, Buckley K, et al. Development of a Distributed Simulation Environment and Model Driven Engineering Framework to Support the Verification & Validation of Complex Autonomy Components. In: International Astronautical Congress \u2013 IAC 2021, Dubai, United Arab Emirates, 2021.\n55. Pitch Technologies. Pitch Developer Studio. Link\u00f6ping, Sweden: Pitch Technologies, 2022.\n56. G\u00fctlein M, Baron W, Renner C, et al. Performance Evaluation of HLA RTI Implementations. In: 2020 IEEE/ACM 24th International Symposium on Distributed Simulation and Real Time Applications (DS-RT), Prague, Czech Republic, 2020, pp. 1\u20138: IEEE.\n57. Pokorny T and Fraser M. the poRTIco project, http://www.porticoproject.org (accessed 8 May 2022).\n58. CERTI Open source project Homepage, https://savannah.nongnu.org/projects/certi/ (2018, accessed 8 May 2022).\n59. Ross P. Comparison of High Level Architecture Run-Time Infrastructure Wire Protocols \u2013 Part One. In: SIMTECT 2012 CONFERENCE PROCEEDINGS, 2012: Simulation Australia.\n60. Pokorny T. Using Portico over a WAN, http://timpokorny.github.io/public/documentation/user/wan.html (accessed 8 May 2022).\n61. Guava: Google Core Libraries for Java: User Guide, Google, github.com, https://github.com/google/guava/wiki (accessed 9 November 2022).\n62. Hapag-Lloyd AG. Hamburg Express: Vessel Details, Hamburg, Germany, https://www.hapag-lloyd.com/en/services-information/cargofleet/vessels/vessel/hamburg-express.html (accessed 9 June 2022).\n63. Hafen Hamburg Marketing e.V. Anne-Sofie: Vessel Details. Port of Hamburg, Hamburg, Germany, https://www.hafenhamburg.de/en/vessels/anne-sofie-28079/ (accessed 9 June 2022).\n64. OpenStreetMap contributors. OpenStreetMap: Website, OpenStreetMap Foundation, Cambridge, UK, https://www.openstreetmap.org/ (accessed 11 August 2022).\n65. Docker Inc. Docker: Home. Website, https://www.docker.com/ (accessed 19 May 2022).\n66. Awais MU, Palensky P, Mueller W, et al. Distributed hybrid simulation using the HLA and the Functional Mock-up Interface. In: IECON 2013 - 39th Annual Conference of the IEEE Industrial Electronics Society, Vienna, Austria, 2013, pp. 7564\u20137569: IEEE.\n67. Garro A and Falcone A. On the Integration of HLA and FMI for Supporting Interoperability and Reusability in Distributed Simulation. In: DEVS '15: Proceedings of the Symposium on Theory of Modeling & Simulation: DEVS Integrative M&S Symposium. (ed Barros F, Wang MH, Pr\u00e4hofer H and Hu X), Alexandria, Virginia, USA, 2015: Society for Computer Simulation International."
        }
    ],
    "title": "Ad Hoc HLA Simulation Model Derived From a Model-Based Traffic Scenario",
    "year": 2022
}