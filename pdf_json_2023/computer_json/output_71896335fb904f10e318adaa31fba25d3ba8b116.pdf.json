{
    "abstractText": "There has been significant work recently on integer programs (IPs) min{c>x : Ax \u2264 b, x \u2208 Z} with a constraint marix A with bounded subdeterminants. This is motivated by a well-known conjecture claiming that, for any constant \u2206 \u2208 Z>0, \u2206-modular IPs are efficiently solvable, which are IPs where the constraint matrix A \u2208 Zm\u00d7n has full column rank and all n \u00d7 n minors of A are within {\u2212\u2206, . . . ,\u2206}. Previous progress on this question, in particular for \u2206 = 2, relies on algorithms that solve an important special case, namely strictly \u2206-modular IPs, which further restrict the n \u00d7 n minors of A to be within {\u2212\u2206, 0,\u2206}. Even for \u2206 = 2, such problems include well-known combinatorial optimization problems like the minimum odd/even cut problem. The conjecture remains open even for strictly \u2206-modular IPs. Prior advances were restricted to prime \u2206, which allows for employing strong number-theoretic results. In this work, we make first progress beyond the prime case by presenting techniques not relying on such strong number-theoretic prime results. In particular, our approach implies that there is a randomized algorithm to check feasibility of strictly \u2206-modular IPs in strongly polynomial time if \u2206 \u2264 4. *Funded through the Swiss National Science Foundation grants 200021 184622 and P500PT 206742, the European Research Council (ERC) under the European Union\u2019s Horizon 2020 research and innovation programme (grant agreement No 817750), and the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany\u2019s Excellence Strategy \u2013 EXZ-2047/1 \u2013 390685813. Research Institute for Discrete Mathematics and Hausdorff Center for Mathematics, University of Bonn, Bonn, Germany. Email: mnaegele@uni-bonn.de. Department of Mathematics, ETH Zurich, Zurich, Switzerland. Email: {cnoebel, rtorres, ricoz}@ethz.ch. ar X iv :2 30 2. 07 02 9v 1 [ cs .D S] 1 4 Fe b 20 23",
    "authors": [
        {
            "affiliations": [],
            "name": "Martin N\u00e4gele"
        },
        {
            "affiliations": [],
            "name": "Christian N\u00f6bel"
        },
        {
            "affiliations": [],
            "name": "Richard Santiago"
        },
        {
            "affiliations": [],
            "name": "Rico Zenklusen"
        }
    ],
    "id": "SP:01b3c6c1fbfb501feb9271c3c4ad2614646d662f",
    "references": [
        {
            "authors": [
                "S. Artmann",
                "F. Eisenbrand",
                "C. Glanzer",
                "T. Oertel",
                "S. Vempala",
                "R. Weismantel"
            ],
            "title": "A note on non-degenerate integer programs with small sub-determinants",
            "venue": "In: Operations Research Letters",
            "year": 2016
        },
        {
            "authors": [
                "M. Aprile",
                "S. Fiorini"
            ],
            "title": "Regular Matroids Have Polynomial Extension Complexity",
            "venue": "Mathematics of Operations Research",
            "year": 2021
        },
        {
            "authors": [
                "G. Averkov",
                "M. Schymura"
            ],
            "title": "On the Maximal Number of Columns of a \u2206-modular Matrix",
            "venue": "Proceedings of the 23rd International Conference on Integer Programming and Combinatorial Optimization (IPCO \u201922). Eidhoven,",
            "year": 2022
        },
        {
            "authors": [
                "S. Artmann",
                "R. Weismantel",
                "R. Zenklusen"
            ],
            "title": "A Strongly Polynomial Algorithm for Bimodular Integer Linear Programming",
            "venue": "Proceedings of the 49th Annual ACM Symposium on Theory of Computing (STOC \u201917). Montreal,",
            "year": 2017
        },
        {
            "authors": [
                "F. Barahona",
                "M. Conforti"
            ],
            "title": "A construction for binary matroids",
            "venue": "(cit. on p",
            "year": 1987
        },
        {
            "authors": [
                "N. Bonifas",
                "M. Di Summa",
                "F. Eisenbrand",
                "N. Haehnle",
                "M. Niemeier"
            ],
            "title": "On Sub-determinants and the Diameter of Polyhedra",
            "venue": "Discrete Computational Geometry",
            "year": 2014
        },
        {
            "authors": [
                "P.M. Camerini",
                "G. Galbiati",
                "F. Maffioli"
            ],
            "title": "Random Pseudo-Polynomial Algorithms for Exact Matroid Problems",
            "venue": "Journal of Algorithms",
            "year": 1992
        },
        {
            "authors": [
                "M. Di Summa",
                "F. Eisenbrand",
                "Y. Faenza",
                "C. Moldenhauer"
            ],
            "title": "On Largest Volume Simplices and Sub-determinants",
            "venue": "Proceedings of the 26th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA \u201915). San Diego,",
            "year": 2015
        },
        {
            "authors": [
                "M. Dinitz",
                "G. Kortsarz"
            ],
            "title": "Matroid Secretary for Regular and Decomposable Matroids",
            "venue": "SIAM Journal on Computing",
            "year": 2014
        },
        {
            "authors": [
                "F. Eisenbrand",
                "S. Vempala"
            ],
            "title": "Geometric random edge",
            "venue": "Mathematical Programming",
            "year": 2017
        },
        {
            "authors": [
                "S. Fiorini",
                "G. Joret",
                "S. Weltge",
                "Y. Yuditsky"
            ],
            "title": "Integer programs with bounded subdeterminants and two nonzeros per row",
            "venue": "Proceedings of the 62nd Annual Symposium on Foundations of Computer Science (FOCS",
            "year": 2022
        },
        {
            "authors": [
                "M. Gr\u00f6tschel",
                "L. Lov\u00e1sz",
                "A. Schrijver"
            ],
            "title": "Corrigendum to our paper \u2018The ellipsoid method and its consequences in combinatorial optimization\u2019",
            "venue": "(cit. on p",
            "year": 1984
        },
        {
            "authors": [
                "M. Gr\u00f6tschel",
                "L. Lov\u00e1sz",
                "A. Schrijver"
            ],
            "title": "Geometric algorithms and combinatorial optimization",
            "venue": "Vol. 2. Algorithms and combinatorics. Springer,",
            "year": 1993
        },
        {
            "authors": [
                "M.X. Goemans",
                "V.S. Ramakrishnan"
            ],
            "title": "Minimizing Submodular Functions over Families of Sets",
            "venue": "BF01192523 (cit. on p",
            "year": 1995
        },
        {
            "authors": [
                "D.V. Gribanov"
            ],
            "title": "An FPTAS for the \u2206-Modular Multidimensional Knapsack Problem",
            "venue": "Proceedings of the International Conference on Mathematical Optimization Theory and Operations Research (MOTOR)",
            "year": 2021
        },
        {
            "authors": [
                "D. Gribanov",
                "I. Shumilov",
                "D. Malyshev",
                "P. Pardalos"
            ],
            "title": "On \u2206-modular integer linear problems in the canonical form and equivalent problems",
            "venue": "Journal on Global Optimization",
            "year": 2022
        },
        {
            "authors": [
                "C. Glanzer",
                "I. Stallknecht",
                "R. Weismantel"
            ],
            "title": "On the Recognition of {a, b, c}Modular Matrices",
            "venue": "Proceedings of the 22nd International Conference on Integer Programming and Combinatorial Optimization (IPCO \u201921). Atlanta,",
            "year": 2021
        },
        {
            "authors": [
                "D.V. Gribanov",
                "S.I. Veselov"
            ],
            "title": "On integer programming with bounded determinants",
            "venue": "Optimization Letters",
            "year": 2016
        },
        {
            "authors": [
                "D.V. Gribanov",
                "N.Y. Zolotykh"
            ],
            "title": "On lattice point counting in \u2206-modular polyhedra",
            "venue": "Optimization Letters",
            "year": 2021
        },
        {
            "authors": [
                "I. Heller"
            ],
            "title": "On linear systems with integral valued solutions",
            "venue": "Pacific Journal of Mathematics",
            "year": 1957
        },
        {
            "authors": [
                "R. Kannan",
                "A. Bachem"
            ],
            "title": "Polynomial Algorithms for Computing the Smith and Hermite Normal Forms of an Integer Matrix",
            "venue": "SIAM J. Comput",
            "year": 1979
        },
        {
            "authors": [
                "J. Lee",
                "J. Paat",
                "I. Stallknecht",
                "L. Xu"
            ],
            "title": "Improving Proximity Bounds Using Sparsity",
            "venue": "Proceedings of the 6th International Symposium on Combinatorial Optimization (ISCO \u201920). Montreal,",
            "year": 2020
        },
        {
            "authors": [
                "J. Lee",
                "J. Paat",
                "I. Stallknecht",
                "L. Xu"
            ],
            "title": "Polynomial Upper Bounds on the Number of Differing Columns of \u2206-Modular Integer Programs",
            "venue": "In: Mathematics of Operations Research (2022). DOI: 10.1287/moor.2022.1339 (cit. on p",
            "year": 2022
        },
        {
            "authors": [
                "A. Nikolov"
            ],
            "title": "Randomized Rounding for the Largest Simplex Problem",
            "venue": "Proceedings of the 47th Annual ACM Symposium on Theory of Computing (STOC \u201915). Portland,",
            "year": 2015
        },
        {
            "authors": [
                "M. N\u00e4gele",
                "B. Sudakov",
                "R. Zenklusen"
            ],
            "title": "Submodular Minimization Under Congruency Constraints",
            "venue": "(cit. on pp",
            "year": 2019
        },
        {
            "authors": [
                "M. N\u00e4gele",
                "R. Santiago",
                "R. Zenklusen"
            ],
            "title": "Congruency-Constrained TU Problems Beyond the Bimodular Case",
            "venue": "Proceedings of the 33rd Annual ACM-SIAM Symposium on Discrete Algorithms (SODA \u201922)",
            "year": 2022
        },
        {
            "authors": [
                "M. N\u00e4gele",
                "R. Zenklusen"
            ],
            "title": "A new contraction technique with applications to congruency-constrained cuts",
            "venue": "Mathematical Programming",
            "year": 2020
        },
        {
            "authors": [
                "M.W. Padberg",
                "M.R. Rao"
            ],
            "title": "Odd Minimum Cut-Sets and b-Matchings",
            "venue": "Mathematics of Operations Research",
            "year": 1982
        },
        {
            "authors": [
                "J. Paat",
                "M. Schl\u00f6ter",
                "R. Weismantel"
            ],
            "title": "The integrality number of an integer program",
            "venue": "Mathematical Programming",
            "year": 2022
        },
        {
            "authors": [
                "P.D. Seymour"
            ],
            "title": "Decomposition of regular matroids",
            "venue": "Journal of Combinatorial Theory, Series B",
            "year": 1980
        },
        {
            "authors": [
                "\u00c9. Tardos"
            ],
            "title": "A Strongly Polynomial Algorithm to Solve Combinatorial Linear Programs",
            "venue": "In: Operations Research",
            "year": 1986
        },
        {
            "authors": [
                "S.I. Veselov",
                "A.J. Chirkov"
            ],
            "title": "Integer program with bimodular matrix",
            "venue": "Discrete Optimization",
            "year": 2009
        }
    ],
    "sections": [
        {
            "text": "In this work, we make first progress beyond the prime case by presenting techniques not relying on such strong number-theoretic prime results. In particular, our approach implies that there is a randomized algorithm to check feasibility of strictly \u2206-modular IPs in strongly polynomial time if \u2206 \u2264 4.\n*Funded through the Swiss National Science Foundation grants 200021 184622 and P500PT 206742, the European Research Council (ERC) under the European Union\u2019s Horizon 2020 research and innovation programme (grant agreement No 817750), and the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany\u2019s Excellence Strategy \u2013 EXZ-2047/1 \u2013 390685813.\n\u2020Research Institute for Discrete Mathematics and Hausdorff Center for Mathematics, University of Bonn, Bonn, Germany. Email: mnaegele@uni-bonn.de.\n\u2021Department of Mathematics, ETH Zurich, Zurich, Switzerland. Email: {cnoebel, rtorres, ricoz}@ethz.ch.\nar X\niv :2\n30 2.\n07 02\n9v 1\n[ cs\n.D S]\n1 4\nFe b\n20 23"
        },
        {
            "heading": "1 Introduction",
            "text": "Integer Programs (IPs) min{c>x : Ax \u2264 b, x \u2208 Zn} are a central NP-hard problem class in Combinatorial Optimization. There is substantial prior work and interest in identifying special classes of polynomial-time solvable IPs while remaining as general as possible. One of the best-known such classes are IPs with a constraint matrix that is totally unimodular (TU), i.e., the determinant of any of its square submatrices is within {\u22121, 0, 1}. A long-standing open conjecture in the field is whether this result can be generalized to \u2206-modular constraint matrices for constant \u2206. Here, we say that a matrix A \u2208 Zk\u00d7n is \u2206-modular if it has full column rank and all n \u00d7 n submatrices have determinants in {\u2212\u2206, . . . ,\u2206}.1 For brevity, we call an IP with \u2206-modular constraint matrix a \u2206-modular IP. We recap the above-mentioned conjecture below. Unfortunately, we do not know its precise origin; it may be considered folklore in the field.\nConjecture 1. For constant \u2206 \u2208 Z\u22650, \u2206-modular IPs can be solved in polynomial time.\nFirst progress on Conjecture 1 was made by Artmann, Weismantel, and Zenklusen [AWZ17], who showed that it holds for \u2206 = 2 (the bimodular case). Fiorini, Joret, Weltge, and Yuditsky [FJWY22] show that the conjecture is true for an arbitrary constant \u2206 under the extra condition that the constraint matrix has at most two non-zero entries per row or column. Through a non-trivial extension of the techniques in [AWZ17], it was shown by Na\u0308gele, Santiago, and Zenklusen [NSZ22] that there is a randomized algorithm to check feasibility of an IP with a strictly 3-modular constraint matrix in polynomial time. Here, a matrix A \u2208 Zk\u00d7n is called strictly \u2206-modular if it has full column rank and all its n \u00d7 n submatrices have determinants in {\u2212\u2206, 0,\u2206}.\nAs a key ingredient, all these prior approaches solve certain combinatorial optimization problems with congruency constraints. This is not surprising, as even strictly \u2206-modular IPs include the following class of MCCTU problems:2\nMulti-Congruency-Constrained TU Problem (MCCTU): Let T \u2208 Zk\u00d7n be TU, b \u2208 Zk, c \u2208 Rk, m \u2208 Zq>0, \u03b3i \u2208 Zn for i \u2208 [q], r \u2208 Zq. Solve\nmin{c>x : Tx \u2264 b, \u03b3>i x \u2261 ri (mod mi) \u2200i \u2208 [q], x \u2208 Zn} .\nUnless mentioned otherwise, we assume that in the context of MCCTU problems, q andmi are constant. Even MCCTU with just a single congruency constraint, i.e., q = 1, already contains the classical and well-studied odd and even cut problems, and, more generally, the problem of finding a minimum cut whose number of vertices is r (mod m). (See [PR82; BC87; GLS84; GR95; NSZ19; NZ20] for related work.) It can also capture the minimum T -join problem, congruency-constrained flow problems, and many other problems linked to TU matrices.\nCombinatorial optimization problems with congruency constraints are highly non-trivial and many open questions remain. As they are already captured by strictly \u2206-modular IPs, this motivates the following weakening of Conjecture 1.\nConjecture 2. Strictly \u2206-modular IPs can be solved in polynomial time for constant \u2206 \u2208 Z\u22650.\nEven resolving this weaker conjecture would settle several open problems, including congruencyconstrained min cuts (in both directed and undirected graphs), or the problem of efficiently and deterministically finding a perfect matching in a red/blue edge-colored bipartite graph such that the number\n1A weaker variant of the conjecture claims efficient solvability of IPs with totally \u2206-modular constraint matrices, where all subdeterminants are bounded by \u2206 in absolute value. The conjecture involving \u2206-modular matrices implies the weaker variant. Indeed, an IP min{c>x : Ax \u2264 b, x \u2208 Zn} with a totally \u2206-modular constraint matrix can be reformulated as min{c>(x+ \u2212 x\u2212) : A(x+ \u2212 x\u2212) \u2264 b, x+, x\u2212 \u2208 Zn\u22650}. It is not hard to see that the constraint matrix of the new LP remains totally \u2206-modular; moreover, it has full column rank because of the non-negativity constraints.\n2To capture an MCCTU problem as a strictly \u2206-modular IP, replace each congruency constraint \u03b3>i x \u2261 ri (mod mi) by an equality constraint \u03b3>i x + miyi = r with yi \u2208 Z. The corresponding constraint matrix is strictly \u2206-modular for \u2206 = \u220fq i=1mi.\nof red matching edges is r (mod m). (This is a simplified version of the famous red-blue matching problem, where the task is to find a perfect matching with a specified number of red edges; for both versions, randomized algorithms are known.) Interestingly, for the bimodular case (\u2206 = 2), a result by Veselov and Chirkov [VC09] implies that Conjecture 1 and Conjecture 2 are equivalent (see [AWZ17]).\nOur goal is to shed further light on Conjecture 2 and overcome some important hurdles of prior approaches. In a first step, we note that a positive resolution of Conjecture 2 does not only imply efficient solvability of MCCTU problems, but also vice versa, and this reduction works in strongly polynomial time.\nLemma 3. Let \u2206 > 0. Every strictly \u2206-modular IP can, in strongly polynomial time, be reduced to an MCCTU problem with moduli mi such that \u2206 = \u220fq i=1mi.\nWithout the strongly polynomial time condition, this also follows from very recent work of Gribanov, Shumilov, Malyshev, and Pardalos [GSMP22, Lemma 4].\nFurther, we are interested in making progress regarding the feasibility version of Conjecture 2, i.e., efficiently deciding whether a strictly \u2206-modular IP is feasible. Prior approaches settle this question for \u2206 = 2 [AWZ17] and\u2014using a randomized algorithm\u2014for \u2206 = 3 [NSZ22]. A main hurdle to extend these is that they crucially rely on \u2206 being prime, for example through the use of the Cauchy-Davenport Theorem. Our main contribution here is to address this. In particular, we can check feasibility for \u2206 = 4 with a randomized algorithm, which is the first result in this context for non-prime \u2206. More importantly, our techniques will hopefully prove useful for future advances on this challenging question.\nTheorem 4. There exists a strongly polynomial-time randomized algorithm to find a feasible solution of a strictly 4-modular IP, or detect that it is infeasible.\nWe remark that the randomization appearing in the above theorem comes from the fact that one building block of our result is a reduction to a problem class that includes the aforementioned congruencyconstrained red/blue-perfect matching problem, for which only randomized approaches are known."
        },
        {
            "heading": "1.1 Group-constrained problems and proof strategy for Theorem 4",
            "text": "To show Theorem 4, we exploit its close connection to MCCTU. Capturing the congruency constraints of an MCCTU problem through an abelian group constraint, we attain the following group-constrained TU feasibility problem.\nGroup-Constrained TU Feasibility (GCTUF): Let T \u2208 Rk\u00d7n be a TU matrix, let b \u2208 Zk, let (G,+) be a finite abelian group, and let \u03b3 \u2208 Gn and r \u2208 G. The task is to show infeasibility or find a solution of the system\nTx \u2264 b, \u03b3>x = r, x \u2208 Zn .\nHere, the scalar product \u03b3>x denotes the linear combination of the group elements \u03b31, . . . , \u03b3n with multiplicities x1, . . . , xn in G. Group constraints generalize congruency constraints, which are obtained in the special case where G is cyclic. More generally, by the fundamental theorem of finite abelian groups, a finite abelian group G is, up to isomorphism, a direct product of cyclic groups. Hence, a group constraint can be interpreted as a set of congruency constraints and vice versa. Thus, GCTUF and MCCTU feasibility are two views on the same problem. We stick to GCTUF mostly for convenience of notation. Moreover, the GCTUF setting also allows for an elegant use of group-related results later on. One may assume that the group is given through its multiplication table (the Cayley table). In fact, the precise group representation is not of great importance to us. Concretely, for constant \u2206, strictly \u2206-modular IP feasibility problems reduce to GCTUF problems with a constant size group. Many of our polynomial-time algorithmic results can even be extended to settings where the group size is not part of the input, and access to group operations is provided through an oracle.\nBy a slight extension of Lemma 3 (see Section 2) and the aforementioned equivalent viewpoint of multiple congruency constraints and a group constraint, in order to prove Theorem 4, it is enough for us to show the equivalent statement below.\nTheorem 5. There exists a strongly polynomial time randomized algorithm for GCTUF problems with a group of cardinality at most 4.\nOn a high level, we follow a well-known strategy for TU-related problems by employing Seymour\u2019s decomposition [Sey80] to decompose the problem into problems on simpler, more structured TU matrices. (See, e.g., [DK14; AWZ17; AF21; NSZ22].) Roughly speaking, Seymour\u2019s decomposition states that a TU matrix is either very structured\u2014in which case we call it a base block\u2014or can be decomposed into smaller TU matrices through a small set of well-defined operations. (See the discussion following Theorem 15 for more details.) The use of Seymour\u2019s decomposition typically comes with two main challenges, namely (i) solving the base block cases, and (ii) propagating solutions of the base block cases back through the decomposition efficiently to solve the original problem. First, we show that this propagation can be done efficiently for our problem.\nTheorem 6. LetG be an abelian group of size at most 4. Given an oracle for solving base block GCTUF problems with group G, we can solve GCTUF problems with group G in strongly polynomial time with strongly polynomially many calls to the oracle.\nIn fact, our approach underlying Theorems 5 and 6 operates in a hierarchy of GCTUF problems with increasingly relaxed group constraints of the form \u03b3>x \u2208 R for subsets R \u2286 G of increasing size, and allows for proving the above results for such relaxed GCTUF problems for arbitrary constant-size groupsG as long as |G|\u2212|R| \u2264 3. (See Section 4 for more details.) In principle, this is along the lines of the approach to congruency-constrained TU problems in [NSZ22], but incorporates the new viewpoint of group constraints, and additionally improves over earlier results in two ways: First, our approach applies to arbitrary finite abelian groups, while previous setups heavily relied on the group cardinality being a prime. Secondly, in the setting with relaxed group constraints, we extend the admissible range of |G| \u2212 |R| by one, thus proceeding further in the hierarchy of GCTUF problems, and newly covering GCTUF problems with groups of cardinality 4.\nBesides being a key part of our approach, Theorem 6 underlines that base block GCTUF problems are not merely special cases, but play a key role in progress on general GCTUF problems. There are only two non-trivial types of such base block GCTUF problems, namely when the constraint matrix is a so-called network matrix or a transpose thereof. Both cases cover combinatorial problems that are interesting on their own, and their complexity status remains open to date. If the constraint matrix is a network matrix, GCTUF can be cast as a circulation problem with a group constraint. By reducing to and exploiting results of Camerini, Galbiati, and Maffioli [CGM92] on exact perfect matching problems, a randomized algorithm for the congruency-constrained case has been presented in [NSZ22]. We observe that these results extend to the group-constrained setting. The other base block case, where the constraint matrix is the transpose of a network matrix, can be cast as a group-constrained directed minimum cut problem by leveraging a result in [NSZ22]. Prior work combined this reduction with results on congruency-constrained submodular minimization [NSZ19] to solve the optimization version of the problem for congruency-constraints of prime power modulus. We show that the feasibility question on this base block can be solved efficiently on any finite abelian group of constant order, thus circumventing the prime power restriction that is intrinsic in prior approaches.\nTheorem 7. Let G be a finite abelian group. There is a strongly polynomial time algorithm for solving GCTUF problems with group G where the constraint matrix is the transpose of a network matrix."
        },
        {
            "heading": "1.2 Further related work",
            "text": "The parameter \u2206 has been studied from various viewpoints. While efficient recognition of (totally) \u2206-modular matrices is open for any \u2206 \u2265 2, approaches to approximate the largest subdeterminant in\nabsolute value were studied [DEFM15; Nik15]. Also, focusing on more restricted subdeterminant patterns proved useful [VC09; AEGOVW16; GSW21]. Aiming at generalizing a bound of Heller [Hel57] for \u2206 = 1, bounds on the maximum number of rows of a \u2206-modular matrix were obtained [GWZ18; LPSX22; AS22]. Also, the influence of the parameter \u2206 on structure and properties of IPs and polyhedra is multi-faceted (see, e.g., [BDEHN14; EV17; GV16; GZ21; Gri21; LPSX20; PSW22; Tar86] and references therein)."
        },
        {
            "heading": "1.3 Structure of the paper",
            "text": "We prove the strongly polynomial time reduction from Lemma 3 in Section 2. In Section 3, we prove Theorem 7. Section 4 illustrates our approach and new contributions towards Theorem 6 on a more technical level, and explains the main new ingredients of our proof. Throughout Section 4, we build on several results from [NSZ22] that are proved there for congruency-constrained TU problems, i.e., the case of a cyclic group constraint. In Appendix B, we show how these proofs can be adapted to the group setting."
        },
        {
            "heading": "2 Reducing to group-constrained problems",
            "text": "We prove the following slightly strengthened version of Lemma 3.\nLemma 8. Let \u2206 > 0. Given a strictly \u2206-modular IP of the form min{c>x : Ax \u2264 b, x \u2208 Zn}, one can, in strongly polynomial time, determine an MCCTU problem\nmin{c\u0304>y : Ty \u2264 b, \u03b3>i y \u2261 ri (mod mi) \u2200i \u2208 [q], y \u2208 Zn}\ntogether with a non-singular n\u00d7 n submatrix H of A such that the following holds: (i) \u2206 = \u220f i\u2208[q]mi.\n(ii) c\u0304> = c>H\u22121. (iii) The map x 7\u2192 Hx is a bijection between feasible solutions of the strictly \u2206-modular IP and the\nMCCTU problem.\nWe remark that the one-to-one correspondence of feasible solutions given in Item (iii) of Lemma 8 is (besides Item (i)) precisely what we need to deduce our main result, Theorem 4, from Theorem 5. Moreover, Items (ii) and (iii) of Lemma 8 together imply that x 7\u2192 Hx is not only a bijection between feasible solutions, but also a bijection between optimal solutions of the two involved problems, so Lemma 3 is indeed also implied by Lemma 8.\nProof of Lemma 8. We show how to transform the given strictly \u2206-modular problem into an MCCTU problem. Let H be an n \u00d7 n submatrix of A with |det(H)| = \u2206. After a variable transformation to y = Hx, we can equivalently rewrite the original integer program in the form\nmin{c\u0304>y : Ty \u2264 b, H\u22121y \u2208 Zn} ,\nwhere c\u0304> = c>H\u22121, and T = AH\u22121. By definition, the map x 7\u2192 Hx is a bijection between feasible solutions of the original IP and the above problem. Note that T is unimodular and contains an identity submatrix; hence T is totally unimodular. To complete the proof, it thus suffices to show that the constraint H\u22121y \u2208 Zn can be transformed to multiple congruency constraints with moduli whose product equals \u2206.\nTo this end, we first write H\u22121 = HI + HF with an integer matrix HI \u2208 Zn\u00d7n and a fractional matrix HF \u2208 [0, 1)n\u00d7n, i.e., matrices whose entries are given by\n(HI)i,j := \u230a( H\u22121 ) i,j \u230b and (HF )i,j := ( H\u22121 ) i,j \u2212 (HI)i,j ,\nwhere, for x \u2208 R, bxc is the integer part of x, i.e., the unique number n \u2208 Z with n \u2264 x < n+ 1. Using this decomposition, we obtain\nH\u22121y \u2208 Zn \u21d0\u21d2 HIy +HF y \u2208 Zn \u21d0\u21d2 HF y \u2208 Zn .\nBecause det(H) = \u2206, we have \u2206H\u22121 \u2208 Zn\u00d7n by Cramer\u2019s rule, and thus also H\u0303F := \u2206HF \u2208 Zn\u00d7n. Furthermore, the entries of H\u0303F are bounded by the constant \u2206 in absolute value. Consequently, using a weakly polynomial time algorithm for computing the Smith normal form of an integer matrix [KB79], we can in strongly polynomial time determine the Smith normal form of H\u0303F , i.e., we can in strongly polynomial time find unimodular matrices S,U \u2208 Zn\u00d7n and integers m\u0303i \u2208 Z such that D = diag(m\u03031, . . . , m\u0303n) = S \u22121H\u0303FU \u22121. Using this decomposition, we get"
        },
        {
            "heading": "HF y \u2208 Zn \u21d0\u21d2 SDUy \u2208 \u2206Zn \u21d0\u21d2 DUy \u2208 \u2206Zn .",
            "text": "Here, the last equivalence exploits unimodularity of S. Letting \u03b3>i denote the i th row of U , we can further rewrite\nDUy \u2208 \u2206Zn \u21d0\u21d2 \u2200i \u2208 [n] : m\u0303i\u03b3>i y \u2208 \u2206Zn \u21d0\u21d2 \u2200i \u2208 [n] : \u03b3>i y \u2261 0 (mod mi) , where we use mi := \u2206/gcd(\u2206, m\u0303i).3 It is thus left to show \u2206 = \u220fn i=1mi. To this end, consider the composed map\n\u03a6: Zn U\u2212\u2192 Zn \u03c0\u2212\u2192 n\u220f i=1 Z / miZ ,\nwhere, for z \u2208 Zn, the first map is defined by z 7\u2192 Uz, and the second is the component-wise projection given by \u03c0(z) := (\u03c01(z1), . . . , \u03c0n(zn)), where \u03c0i denotes the natural projection from Z to Z/miZ. As U is unimodular, the first map is an isomorphism of groups. Furthermore, \u03c0 is a surjective group homomorphism. By the isomorphism theorem, we thus get an isomorphism\nn\u220f i=1 Z / miZ = im \u03a6 \u223c= Z n/ ker \u03a6 .\nNote that the cardinality of the left-hand side group is \u220fn i=1mi. Therefore, we may finish the proof by showing that |Zn/ker \u03a6| = \u2206. To this end, observe that ker \u03a6 is the set of y \u2208 Zn fulfilling the congruency constraints, i.e., \u03b3>i y \u2261 0 (mod mi) for all i \u2208 [n]. By the above discussion, this is precisely the set {y \u2208 Zn : H\u22121y \u2208 Zn} = HZn. Consequently, |Zn/ker \u03a6| = |Zn/HZn| = |det(H)| = \u2206, as desired."
        },
        {
            "heading": "3 GCTUF with transposed network constraint matrices",
            "text": "In the setting with a congruency constraint instead of a group constraint, [NSZ22] shows that every base block problem with a constraint matrix that is a transposed network matrix can be reduced to a node-weighted minimization problem over a lattice with a congruency constraint,4 i.e., a problem of the form min{w(S) : S \u2208 L, \u03b3(S) \u2261 r (mod m)} , (1) where L \u2286 2N is a lattice on some finite ground set N , \u03b3 : N \u2192 Z, r \u2208 Z, m \u2208 Z>0, w : N \u2192 R, and we use \u03b3(S) := \u2211 v\u2208S \u03b3(v) as well as w(S) := \u2211 v\u2208S w(v).\n5 Being a special case of congruencyconstrained submodular minimization, it is known that such problems, and thus the corresponding\n3Note we might have m\u0303i = 0 for some i \u2208 [n]. In this case, gcd(\u2206, m\u0303i) = \u2206 and hence mi = 1, so the corresponding congruency constraint is always satisfied.\n4In fact, the proof in [NSZ22] claims a reduction to a submodular minimization problem, but shows the stronger one presented here.\n5We recall that a lattice L \u2286 2N is a set family such that for any A,B \u2208 L, we have A \u2229B,A \u222aB \u2208 L. We assume such a lattice to be given by a compact encoding in a directed acyclic graph H on the vertex set N such that X \u2286 N is an element of the lattice if and only if \u03b4\u2212H(X) = \u2205 (cf. [GLS93, Section 10.3]). Here, as usual, in a digraph G = (V,A) and for X \u2286 V , we denote by \u03b4+(X) and \u03b4\u2212(X) the arcs in A leaving and entering X , respectively. Moreover, we write \u03b4\u00b1(v) := \u03b4\u00b1({v}) for v \u2208 V .\ncongruency-constrained TU problems with a transposed network constraint matrix, can be solved in strongly polynomial time for constant prime power moduli m, while the case of general constant composite moduli remains open [NSZ19]. The progress on GCTUF, particularly the reduction to base block feasibility problems through Theorem 6 and its generalization (Theorem 16 in Section 4), motivates studying these reductions and results in the feasibility setting and with a group constraint instead of a congruency constraint, giving rise to the following problem.\nGroup-Constrained Lattice Feasibility (GCLF): Let N be a finite set, L \u2286 2N a lattice, (G,+) a finite abelian group, \u03b3 : N \u2192 G, r \u2208 G. The task is to find X \u2208 L with \u03b3(X) = r, or decide infeasibility.\nWe observe that the reduction in [NSZ22] from congruency-constrained TU problems with transposed network constraint matrices to problems of the form given in (1) extends to the group-constrained case. In particular, we obtain the following result in the feasibility setting. (See Appendix B.2 for some details.)\nProposition 9. Let G be a finite abelian group. Any GCTUF problem with group G and a constraint matrix that is a transposed network matrix can in strongly polynomial time be reduced to a GCLF problem with group G.\nThus, it remains to study GCLF problems. Interestingly, for the pure feasibility question, we can circumvent the barriers present in the optimization setting, and obtain the following result through a concise argument.\nTheorem 10. Let G be a finite abelian group. GCLF problems with group G can be solved in strongly polynomial time.\nClearly, Proposition 9 and Theorem 10 together imply Theorem 7. The main observation towards a proof of Theorem 10 is the following elementary lemma.\nLemma 11. LetG be a finite abelian group, and let \u03b31, . . . , \u03b3` \u2208 G. If ` \u2265 |G|, then there is a non-empty subset I \u2286 [`] such that \u2211 i\u2208I \u03b3i = 0.\nProof. Either si := \u2211\nj\u2264i \u03b3j = 0 for some i \u2208 [`], or there exist i < j with si = sj ; hence I = [i] or I = {i+ 1, . . . , j}, respectively, has the desired properties.\nTo prove Theorem 10, we work with a representation of the lattice L through an acyclic digraph H (see Footnote 5). We exploit that every X \u2208 L is uniquely defined by the subset CX := {x \u2208 X : \u03b4+(x) \u2286 \u03b4+(X)}.\nProof of Theorem 10. We claim that if the given GCLF problem is feasible, there is a feasible X with |CX | < |G|. If so, we obtain an efficient procedure for GCLF with group G through enumerating all such CX and checking if \u03b3(X) = r. To prove the claim, assume for contradiction that it is wrong, and let X \u2208 L be minimal with \u03b3(X) = r. Then |CX | \u2265 |G|, and applying Lemma 11 to CX gives a non-empty subset Y \u2286 CX with \u03b3(Y ) = 0. Thus, X \\ Y is a strictly smaller lattice element with \u03b3(X \\ Y ) = \u03b3(X)\u2212 \u03b3(Y ) = \u03b3(X) = r, a contradiction."
        },
        {
            "heading": "4 Approaching GCTUF problems and a proof of Theorem 6",
            "text": "In order to tackle GCTUF problems, following ideas from [NSZ22], we introduce a hierarchy of slightly relaxed GCTUF problems by weakening the group constraint.\nR-Group-Constrained TU Feasibility (R-GCTUF): Let T \u2208 {\u22121, 0, 1}k\u00d7n be TU, b \u2208 Zk, let (G,+) be a finite abelian group, \u03b3 \u2208 Gn and R \u2286 G. The task is to show infeasibility or find a solution of\nTx \u2264 b, \u03b3>x \u2208 R, x \u2208 Zn .\nHere, we typically call R the set of target elements. The above setup allows us to measure progress between GCTUF (the case of |R| = 1) and an unconstrained IP with TU constraint matrix (captured by setting R = G). In particular, the difficulty of an R-GCTUF problem increases as the size of R, i.e., the number of target elements, decreases. The main parameter capturing this hardness is the depth d := |G| \u2212 |R| of the problem. We show the following generalization of Theorem 5.\nTheorem 12. Let G be a finite abelian group. There is a strongly polynomial randomized algorithm solving R-GCTUF problems with group G and |G| \u2212 |R| \u2264 3.\nOur approach exploits uses Seymour\u2019s decomposition theorem for TU matrices. To state this result, we first introduce the additional notions of a 3-sum of matrices, and pivoting operations.\nDefinition 13 (3-sum). Let A \u2208 ZkA\u00d7nA , B \u2208 ZkB\u00d7nB , e \u2208 ZkA , f \u2208 ZnB , g \u2208 ZkB , h \u2208 ZnA . The 3-sum of ( A e e h> 0 1 ) and ( 0 1 f> g g B ) is ( A e e h> 0 1 ) \u22953 ( 0 1 f> g g B ) := ( A ef> gh> B ) .\nDefinition 14 (Pivoting). Let C \u2208 Zk\u00d7n, p \u2208 Zn, q \u2208 Zk, and \u03b5 \u2208 {\u22121, 1}. The matrix obtained from pivoting on \u03b5 in T := ( \u03b5 p>\nq C\n) , i.e., pivoting on the element T11 of T , is pivot11(T ) := ( \u2212\u03b5 \u03b5p> \u03b5q C\u2212\u03b5qp> ) .\nMore generally, pivotij(T ) for indices i and j such that Tij \u2208 {\u22121, 1} is obtained from T by first permuting rows and columns such that the element Tij is permuted to the first row and first column, then performing the above pivoting operation on the permuted matrix, and finally reversing the row and column permutations.\nWith this notation at hand, we can state Seymour\u2019s TU decomposition theorem as follows.\nTheorem 15 (Seymour\u2019s TU decomposition). Let T \u2208 Zk\u00d7n be a totally unimodular matrix. Then, one of the following cases holds.\n(i) T or T> is a network matrix. (ii) T is, possibly after iteratively applying the operations of\n\u2013 deleting a row or column with at most one non-zero entry, \u2013 deleting a row or column that appears twice or whose negation also appears in the matrix,\nand \u2013 changing the sign of a row or column,\nequal to one of ( 1 \u22121 0 0 \u22121 \u22121 1 \u22121 0 0\n0 \u22121 1 \u22121 0 0 0 \u22121 1 \u22121 \u22121 0 0 \u22121 1\n) and ( 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1 0 0 1 ) .\n(iii) T can, possibly after row and column permutations and pivoting once, be decomposed into a 3-sum of totally unimodular matrices with nA, nB \u2265 2.\nAdditionally, we can in time poly(n) decide which of the cases holds and determine the involved matrices.\nWe remark that typically, a 3-sum of the form ( A ef>\ngh> B\n) would be called a 1- or 2-sum if both\nor one of the off-diagonal blocks ef> and gh> were zero, respectively. However, as we treat those special cases in the same way as 3-sums, there is no need for us to further distinguish between them. Generally, we refer to matrices covered by Items (i) and (ii) of Theorem 15 as base block matrices. By porting results on congruency-constrained base block problems of [NSZ22] to the group-constrained setting and combining them with our new Theorem 7, it follows that GCTUF problems can be solved in strongly polynomial time if the constraint matrix is a base block matrix. The potential pivoting step in\nItem (iii) of Theorem 15 can also be handled by extending a result from [NSZ22] to the group setting. For the sake of completeness, we comment on how to extend the arguments from [NSZ22] for base block constraint matrices or pivot steps in Appendices B and C, respectively. Showing how to deal with R-GCTUF problems with constraint matrices that are 3-sums will lead to the following generalization of Theorem 6 which, in combination with the aforementioned results on base block problems, immediately implies Theorem 12. We devote the rest of this section to a discussion of its proof.\nTheorem 16. LetG be a finite abelian group and ` \u2208 Z\u22651 with ` \u2265 |G|\u22123. Given an oracle for solving base block R-GCTUF problems with group G and any R \u2286 G with |R| \u2265 `, we can solve R-GCTUF problems with group G and R \u2286 G with |R| \u2265 ` in strongly polynomial time with strongly polynomially many calls to the oracle."
        },
        {
            "heading": "4.1 Reducing to a simpler problem when the target elements form a union of cosets",
            "text": "If R, the set of target elements, is a union of cosets of the same non-trivial proper subgroup H of G (i.e., it is of the form R = \u22c3k i=1(gi + H) for some g1, . . . , gk \u2208 G, or equivalently, R = R + H), we can directly reduce to a simpler problem. We formalize this in the following lemma.\nLemma 17. Assume we are given an R-GCTUF problem\nTx \u2264 b, \u03b3>x \u2208 R, x \u2208 Zn\nsuch that R = R + H for a non-trivial proper subgroup H of G. Then, the set of feasible solutions of the given R-GCTUF problem is invariant under replacing G by the quotient group G\u0302 = G/H, R by R\u0302 = R/H, and \u03b3 by its image \u03b3\u0302 \u2208 G\u0302n under the quotient map.\nProof. Let P denote the originalR-GCTUF problem, and let P\u0302 denote the modified one. The inequality system Tx \u2264 b is the same in P and P\u0302 , hence it is enough to show that \u03b3>x \u2208 R if and only if \u03b3\u0302>x \u2208 R\u0302.\nTo this end, first note that for x \u2208 Zn, \u03b3>x \u2208 R immediately implies \u03b3\u0302>x \u2208 R\u0302 by definition. For the other direction, assume x \u2208 Zn satisfies \u03b3\u0302>x \u2208 R. Then, by definition of \u03b3\u0302 and R\u0302, we know that there is an element h \u2208 H such that \u03b3>x+ h \u2208 R. Then \u03b3>x \u2208 R\u2212 h = R, as desired.\nThe depth of the new problem given by Lemma 17 in the corresponding hierarchy is d\u0302 = |G/H| \u2212 |R/H| = |G|\u2212|R||H| < |G| \u2212 |R|, so we indeed end up with a simpler problem in that respect. Since the existence of such a subgroup H can be checked efficiently (given that G has constant size), we can always and in constant time determine upfront whether the R-GCTUF problem at hand is reducible using Lemma 17, and if so, reduce it to a simpler R-GCTUF problem. Thus, for the rest of this section, we assume R is not a union of cosets. This assumption allows us to apply a special case of the CauchyDavenport theorem that holds despite the fact that the group order may not be prime. We refer to Lemma 19 for details."
        },
        {
            "heading": "4.2 Decomposing the problem",
            "text": "We now focus on an R-GCTUF problem with a constraint matrix T that can be decomposed into a 3-sum of the form T =\n( A ef>\ngh> B\n) . The decomposition allows for splitting x, b, and \u03b3 into two parts\naccordingly, giving the equivalent formulation( A ef>\ngh> B ) \u00b7 ( xA xB ) \u2264 ( bA bB ) , \u03b3>AxA + \u03b3 > BxB \u2208 R , xA \u2208 ZnA xB \u2208 ZnB . (2)\nIn the inequality system, the variables xA and xB interact only through the rank-one blocks ef> and gh>. Fixing values of \u03b1 := f>xB and \u03b2 := h>xA allows for rephrasing (2) through the following two\nalmost independent problems\nAxA \u2264 bA \u2212 \u03b1e h>xA = \u03b2\nxA \u2208 ZnA and\nBxB \u2264 bB \u2212 \u03b2g f>xB = \u03b1\nxB \u2208 ZnB , (3)\nwhere we seek to find solutions xA and xB such that their corresponding group elements rA := \u03b3>AxA and rB := \u03b3>BxB , respectively, satisfy rA + rB \u2208 R. Hence, this desired relation between the target elements rA and rB is the only dependence between the two problems once \u03b1 and \u03b2 are fixed. We assume without loss of generality that A has no fewer columns than B, and refer to the problem on the left as the A-problem, and the problem on the right as the B-problem. We denote by \u03a0 the set of all (\u03b1, \u03b2) \u2208 Z2 such that both the A- and B-problem are feasible. (Note that both problems are described through a TU constraint matrix; hence, feasibility can be checked efficiently.) Also, for (\u03b1, \u03b2) \u2208 \u03a0, let \u03c0A(\u03b1, \u03b2) \u2286 G be all group elements rA \u2208 G for which there is a solution xA to the A-problem with \u03b3>xA = rA, and define \u03c0B analogously. We refer to \u03c0A and \u03c0B as patterns. Hence, (2) is feasible if and only if there is a pair (\u03b1, \u03b2) \u2208 \u03a0 such that, for some rA \u2208 \u03c0A(\u03b1, \u03b2) and rB \u2208 \u03c0B(\u03b1, \u03b2), we have rA + rB \u2208 R. Thus, patterns contain all information needed to decide feasibility.\nUsing techniques from [NSZ22], we can restrict our search for feasible solutions to a constant-size subset \u03a0\u0302 \u2286 \u03a0. More precisely, one can show the following (we give more details in Appendix A.1).\nLemma 18. One can in strongly polynomial time find `i, ui \u2208 Z for i \u2208 {0, 1, 2}, with ui\u2212 `i \u2264 d such that\n\u03a0\u0302 := { (\u03b1, \u03b2) \u2208 Z2 : `0 \u2264 \u03b1+ \u03b2 \u2264 u0, `1 \u2264 \u03b1 \u2264 u1, `2 \u2264 \u03b2 \u2264 u2 }\n(4)\nsatisfies \u03a0\u0302 \u2286 \u03a0, and if (2) is feasible, then there is a pair (\u03b1, \u03b2) in \u03a0\u0302 for which there is a solution xA to the A-problem and a solution xB to the B-problem with \u03b3>xA + \u03b3>xB \u2208 R.\nTherefore, the challenges lie less in the size of \u03a0, but rather in how to obtain information on the sets \u03c0A(\u03b1, \u03b2) and \u03c0B(\u03b1, \u03b2) for pairs (\u03b1, \u03b2) \u2208 \u03a0. Opposed to previous techniques, which almost solely focused on \u03c0B , we investigate both \u03c0A and \u03c0B and their interplay\u2014see Section 4.3.\nAs B has at most half the columns of the constraint matrix T of the original R-GCTUF problem (2), we can afford (runtime-wise) to recursively call our algorithm multiple times on the B-problem for different targets RB of the same depth d = |G| \u2212 |R| as the original problem, i.e., with |RB| = |R|. (We refrain from using larger depths, as GCTUF become harder with increasing depth.) This allows us to compute a set \u03c0\u0304B(\u03b1, \u03b2) \u2286 \u03c0B(\u03b1, \u03b2) of size |\u03c0\u0304B(\u03b1, \u03b2))| = min{d + 1, \u03c0B(\u03b1, \u03b2)}. Indeed, we can start with \u03c0\u0304B(\u03b1, \u03b2) = \u2205 and, as long as |\u03c0\u0304B(\u03b1, \u03b2)| < min{d + 1, \u03c0B(\u03b1, \u03b2)}, we solve an RB-GCTUF B-problem (i.e., we look for a B-problem solution xB with \u03b3>xB \u2208 RB) with RB = G \\ \u03c0\u0304B(\u03b1, \u03b2) being a set of size at least |G|\u2212d. IfRB \u2229\u03c0B(\u03b1, \u03b2) 6= \u2205, then we find an element inRB \u2229\u03c0B(\u03b1, \u03b2) that can be added to \u03c0\u0304B(\u03b1, \u03b2) and we repeat; otherwise, RB \u2229\u03c0B(\u03b1, \u03b2) = \u2205 and we know that we computed \u03c0\u0304B(\u03b1, \u03b2) = \u03c0B(\u03b1, \u03b2).\nTo the contrary, note that the A-problem may be almost as big as the original GCTUF problem (possibly with just two fewer columns). Hence, here we cannot afford (runtime-wise) a similar computation as for the B-problem. However, we can afford to solve multiple RA-GCTUF A-problems of smaller depth, i.e., |RA| > |R|, because the runtime decreases significantly with decreasing depth. By using the same approach as in the B-problem, but with sets RA of size |RA| \u2265 |R| + 1, we obtain a set \u03c0\u0304A(\u03b1, \u03b2) \u2286 \u03c0A(\u03b1, \u03b2) of size |\u03c0\u0304A(\u03b1, \u03b2)| = min{d, \u03c0A(\u03b1, \u03b2)}.\nLet us next take a closer look at patterns. Fix some (\u03b1, \u03b2) \u2208 \u03a0 and let \u03c0A(\u03b1, \u03b2) = {r1A, . . . , r `A A } for some `A \u2265 1 and pairwise different riA \u2208 G, and let x1A, . . . , x `A A be corresponding solutions of the A-problem with \u03b3>Ax i A = r i A. Define `B , r i B , and x i B analogously. Observe that if `A \u2264 d and `B \u2264 d+ 1, we have \u03c0\u0304X(\u03b1, \u03b2) = \u03c0X(\u03b1, \u03b2) for both X \u2208 {A,B}. Hence, we can compute all feasible group elements and check explicitly whether riA + r j B \u2208 R for some i \u2208 [`A] and j \u2208 [`B], i.e., whether a solution exists. If `B \u2265 d + 1, we can (independently of `A) even show that there always exists a\nfeasible solution, and we can also find one: Indeed, we can compute d + 1 solutions xi := (x1A, x i B) with pairwise different sums r1A + r i B \u2208 G, at least one of which must satisfy r1A + riB \u2208 R. If `A \u2265 d and `B \u2265 2, we can argue similarly: We show that among any d elements of \u03c0\u0304A(\u03b1, \u03b2), and any two elements of \u03c0\u0304B(\u03b1, \u03b2) (which we can compute), there is a pair riA, r j B with r i A + r j B \u2208 R. Note that while for groups of prime order this can be shown via the Cauchy-Davenport theorem, the above result does not hold in general. We show, however, that as long as R is not a union of cosets in G, we can recover the implication (cf. Section 4.1 for why this assumption is legit).\nLemma 19. Let G be a finite abelian group, and let R \u2286 G be such that R 6= R+H for any non-trivial subgroup H of G. Then, for any subsets X,Y \u2286 G with |X| = |G| \u2212 |R| and |Y | \u2265 2, we have (X + Y ) \u2229R 6= \u2205.\nProof. Let b1, b2 \u2208 Y with b1 6= b2, and set h = b1 \u2212 b2. Assume (X + Y ) \u2229 R = \u2205. Then |X| = |G| \u2212 |R| implies |X + Y | = |X|. Thus, X + b1 = X + b2 and hence X = X + h. Iterating gives X = X + \u3008h\u3009, where \u3008h\u3009 denotes the subgroup generated by h. As R = G \\ (X + b1), we get R = R+ \u3008h\u3009, a contradiction.\nThe following observation summarizes the above discussion.\nObservation 20. Let (\u03b1, \u03b2) \u2208 \u03a0\u0302. If |\u03c0\u0304A(\u03b1, \u03b2)| \u2264 d \u2212 1 or |\u03c0\u0304B(\u03b1, \u03b2)| \u2265 2, we can immediately determine whether a feasible solution to the original R-GCTUF problem exists for such (\u03b1, \u03b2), and if so, obtain one by combining solutions computed for the A- and B-subproblem when determining \u03c0\u0304A and \u03c0\u0304B .\nThus, the only case in which we cannot immediately check whether a feasible solution exists for some (\u03b1, \u03b2), is when `B = 1 and `A \u2265 d+ 1 (which imply |\u03c0\u0304A(\u03b1, \u03b2)| = d and |\u03c0\u0304B(\u03b1, \u03b2)| = 1). This is the only case where we may have (\u03c0A(\u03b1, \u03b2) + \u03c0B(\u03b1, \u03b2))\u2229R 6= \u2205 but (\u03c0\u0304A(\u03b1, \u03b2) + \u03c0\u0304B(\u03b1, \u03b2))\u2229R = \u2205, in which case we say that (\u03b1, \u03b2) contains a hidden solution."
        },
        {
            "heading": "4.3 New insights towards overcoming previous barriers for d = 3",
            "text": "We now describe how our new techniques allow for overcoming barriers restricting previous approaches to depth d = 2. Recall that we focus on a constant size subset \u03a0\u0302 as defined in (4). We call sets of this form, for any choice of `i and ui, pattern shapes, and denote by\nD := { \u00b1( 10 ),\u00b1( 01 ),\u00b1 ( 1 \u22121 )}\n(5)\nthe possible edge directions of conv(\u03a0\u0302). Focusing on \u03a0\u0302 allows for efficiently computing \u03c0\u0304X(\u03b1, \u03b2) for X \u2208 {A,B} and all (\u03b1, \u03b2) \u2208 \u03a0\u0302 to the extent discussed earlier. In order to proceed, we use a structural result from [NSZ22], called averaging, that allows us to relate solutions\u2014and thus elements of \u03c0X\u2014 across different (\u03b1, \u03b2). Despite being true in more generality, the exposition here requires the following special case only.\nProposition 21 ([NSZ22, special case of Lemma 5.3]). Consider an R-GCTUF problem as described in (2). Let X \u2208 {A,B}, v \u2208 D, and (\u03b1, \u03b2) \u2208 \u03a0\u0302 with (\u03b1, \u03b2) + 2v \u2208 \u03a0\u0302. Given a solution x1 of the X-problem for (\u03b1, \u03b2) and, similarly, x2 for (\u03b1, \u03b2) + 2v, there are solutions x3, x4 for the X-problem for (\u03b1, \u03b2) + v such that x1 + x2 = x3 + x4.\nWe remark that the proof of the above result for congruency-constrained problems given in [NSZ22] only exploits that congruency-constraints are linear constraints; therefore, the result carries over to group-constraints seamlessly.\nIn previous approaches for depth d = 2, it was enough to only compute a single element from \u03c0A (e.g., by solving the A-problem after dropping the group constraint). Concretely, consider patterns of the shape as given in Figure 1. For d = 2, Proposition 21 can be used to show that, if there is a hidden feasible solution for (\u03b1, \u03b2) = (0, 0) or (\u03b1, \u03b2) = (2, 0), then there must also be a feasible solution for\n(\u03b1, \u03b2) = (1, 0). The example in Figure 1 shows that this is no longer true if the depth d exceeds 2, as only (\u03b1, \u03b2) = (0, 0) admits a feasible solution.\nThis problem can be circumvented by analyzing theA-pattern \u03c0\u0304A. As argued in Section 4.2, if a pair (\u03b1, \u03b2) has a hidden solution, then |\u03c0A(\u03b1, \u03b2)| \u2265 d + 1 (and hence |\u03c0\u0304A(\u03b1, \u03b2)| = d), hence we assume that there exists at least one such pair. The following result uses averaging (i.e., Proposition 21) to show that pairs (\u03b1\u2032, \u03b2\u2032) adjacent to such a pair (\u03b1, \u03b2) containing a hidden solution also have large \u03c0\u0304A(\u03b1\u2032, \u03b2\u2032).\nLemma 22. Let d \u2208 {1, 2, 3}, v \u2208 D, and (\u03b1, \u03b2) \u2208 \u03a0\u0302 such that |\u03c0A(\u03b1, \u03b2)| \u2265 d+1 and (\u03b1, \u03b2)+2v \u2208 \u03a0\u0302. Then |\u03c0\u0304A((\u03b1, \u03b2) + v)| = d.\nProof. It is enough to show that |\u03c0A((\u03b1, \u03b2)+v)| \u2265 d. To this end, for each of the at least d+1 elements r \u2208 \u03c0A(\u03b1, \u03b2), let xr1 be a corresponding solution of the A-problem, and let x2 denote any fixed solution for the A-problem on the pair (\u03b1, \u03b2) + 2v. Proposition 21 applied to xr1 and x2 gives solutions x r 3 and xr4 corresponding to elements \u03b3 > Ax r 3, \u03b3 > Ax r 4 \u2208 \u03c0A((\u03b1, \u03b2) + v) with \u03b3>Axr3 + \u03b3>Axr4 taking at least d + 1 different values. Assume for the sake of deriving a contradiction that |\u03c0A((\u03b1, \u03b2) + v)| \u2264 d \u2212 1. Then, since the number of different sums of pairs of elements in \u03c0A((\u03b1, \u03b2)+v) is bounded by ( d\u22121\n2\n) +d\u22121 =\n(d\u2212 1)d/2 < d+ 1 for d \u2208 {1, 2, 3}, this contradicts the above construction.\nRemark 23. For depth d = 4, one can find GCTUF problems with G = Z/5Z and patterns that fail to satisfy Lemma 22; we present one such example in Figure 2. Moreover, we remark that Lemma 22 is the only place in our proofs where we use the assumption that d = |G| \u2212 |R| \u2264 3.\nTo proceed, we observe that if, on top of the assumption in Lemma 22, |\u03c0B((\u03b1, \u03b2) + v)| \u2265 2 holds, then Lemma 19 guarantees (\u03c0\u0304A((\u03b1, \u03b2) + v) + \u03c0\u0304B((\u03b1, \u03b2) + v)) \u2229 R 6= \u2205, i.e., existence of a feasible solution. Thus, from now on, we analyze both the A- and B-patterns in detail, in particular through averaging, to find a pattern constellation as mentioned above, or identify additional properties that allow for direct progress."
        },
        {
            "heading": "4.4 Analyzing pattern structure",
            "text": "Before getting to an exhaustive analysis of patterns based on the insights laid out earlier, we introduce notions that will allow us to distinguish patterns from a structural point of view (also see Figure 3).\nDefinition 24. Let D be the possible edge directions of a pattern shape as defined in (5). We call (\u03b1, \u03b2) \u2208 \u03a0\u0302 an interior pair if (\u03b1, \u03b2) + v \u2208 \u03a0\u0302 for all v \u2208 D, a border pair if (\u03b1, \u03b2)\u00b1 v \u2208 \u03a0\u0302 for exactly two v \u2208 D, and a vertex pair if it is not an interior or border pair.\nNote that for a border pair (\u03b1, \u03b2), due to symmetry, the two directions v \u2208 D satisfying (\u03b1, \u03b2)\u00b1v \u2208 \u03a0\u0302 will always be antiparallel, i.e., v and \u2212v for some v \u2208 D. Next, we summarize results of [NSZ22] that we reuse here. We remark that these results were proved in a congruency-constrained setting, but translate to problems with group constraints straightforwardly. For the sake of completeness, we comment on how to adapt the proofs in Appendix A.2.\nTheorem 25 ([NSZ22]). Consider an R-GCTUF problem as described in (2). (i) If there is some (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0\u0304B(\u03b1, \u03b2)| \u2265 2, then for each (\u03b1\u2032, \u03b2\u2032) \u2208 \u03a0\u0302, there exists v \u2208 D \u222a {0} such that |\u03c0\u0304B((\u03b1\u2032, \u03b2\u2032) + v)| \u2265 2. If in addition, \u03a0\u0302 contains an interior pair, then for each (\u03b1\u2032, \u03b2\u2032) \u2208 \u03a0\u0302, v can be chosen such that we additionally have (\u03b1\u2032, \u03b2\u2032) + 2v \u2208 \u03a0\u0302.\n(ii) If |\u03c0B(\u03b1, \u03b2)| = 1 for all (\u03b1, \u03b2) \u2208 \u03a0\u0302, or \u03a0\u0302 only contains vertex pairs and there are no solutions for (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0\u0304B(\u03b1, \u03b2)| \u2265 2, then the problem can be reduced to a single R-GCTUF problem with the same group G and at the same depth d, and strictly fewer variables.\nThe two statements in the above theorem serve a complimentary purpose: While Item (ii) allows for direct progress (by reducing the number of variables), particularly in the case where no (\u03b1, \u03b2) \u2208 \u03a0\u0302 satisfies |\u03c0B(\u03b1, \u03b2)| \u2265 2, Item (i) shows that whenever such (\u03b1, \u03b2) are present, then they are, in a certain sense, well spread over the pattern. We will exploit the latter in combination with Lemma 22.\nTo formally analyze patterns, based on Observation 20, we may assume that we face an R-GCTUF problem for which \u03a0\u0302 contains at least one (\u03b1, \u03b2) such that |\u03c0A(\u03b1, \u03b2)| \u2265 d + 1 and |\u03c0B(\u03b1, \u03b2)| = 1. Starting from there, we distinguish four different types of pattern structure as follows: (I) |\u03c0B(\u03b1, \u03b2)| = 1 for all (\u03b1, \u03b2) \u2208 \u03a0\u0302, or this is not the case and (II) \u03a0\u0302 has an interior pair, or (III) \u03a0\u0302 has no interior but border pairs, or (IV) \u03a0\u0302 has only vertex pairs. The remainder of this section is devoted to presenting how to achieve progress in each of these four cases."
        },
        {
            "heading": "Pattern structure of type I",
            "text": "Pattern structure of type I is covered by Theorem 25 (ii), which allows to reduce the problem to a new GCTUF problem with same group G and same depth d, and at least one variable less, thus allowing to make progress in that respect."
        },
        {
            "heading": "Pattern structure of type II",
            "text": "For pattern structure of type II, we argue that if theR-GCTUF problem is feasible, then (\u03c0\u0304A + \u03c0\u0304B)\u2229R 6= \u2205. More precisely, we show that there must exist (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0\u0304A(\u03b1, \u03b2)| = d and |\u03c0\u0304B(\u03b1, \u03b2)| \u2265 2. This then implies the desired result by Lemma 19. Concretely, assume that there exist (\u03b1\u2032, \u03b2\u2032) \u2208 \u03a0\u0302 containing a hidden solution. Then, since \u03a0\u0302 contains an interior pair, and there exists (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0B(\u03b1, \u03b2)| \u2265 2, by Theorem 25 (i) there exists v \u2208 D such that (\u03b1\u2032, \u03b2\u2032) + 2v \u2208 \u03a0\u0302 and |\u03c0B((\u03b1\u2032, \u03b2\u2032) + v)| \u2265 2. As Lemma 22 implies that |\u03c0\u0304A((\u03b1\u2032, \u03b2\u2032) + v)| = d, it follows by Lemma 19 that (\u03c0\u0304A((\u03b1 \u2032, \u03b2\u2032) + v) + \u03c0\u0304B((\u03b1 \u2032, \u03b2\u2032) + v)) \u2229R 6= \u2205; thus we can find a solution at (\u03b1\u2032, \u03b2\u2032) + v."
        },
        {
            "heading": "Pattern structure of type III",
            "text": "In this case, we show that if \u03c0\u0304A + \u03c0\u0304B does not hit the target set R, i.e., we fail to find a solution by combining solutions of the A- and B-problem that we computed recursively, then we can reduce to a smaller pattern shape \u03a0\u2032, and recurse. Through such a reduction, we will after constantly many steps reach pattern structures of type I or type IV, and therefore achieve progress through the techniques presented for the corresponding type.\nTo start with, we show the following structural auxiliary result. We remark that this result can be seen as an implication of [NSZ22, Lemma 5.12], but we provide a more direct proof here.\nLemma 26. Assume that \u03a0\u0302 does not contain interior pairs. Then \u03a0\u0302 contains at most four vertex pairs.\nProof. Through shifting, we may assume that `1 = `2 = 0, and thus also `3 \u2265 0 (if `3 < 0, we may set it to zero without changing \u03a0\u0302). Similarly, we may assume u3 \u2264 u1 + u2. Note that if u1 \u2212 `1 \u2264 1 there are at most four vertex pairs: At most two pairs (\u03b1, \u03b2) may satisfy \u03b1 = `1, and at most two further pairs may have \u03b1 = u1. Similarly, we are done if u2 \u2212 `2 \u2264 1, or u3 \u2212 `3 \u2264 1. Thus, we assume ui \u2212 `i \u2265 2 for i \u2208 {1, 2, 3}. Consider the pair\n(\u03b1, \u03b2) = { (1, `3) if `3 < u2 (`3 \u2212 u2 + 2, u2 \u2212 1) if `3 \u2265 u2 .\nBy definition, 0 < \u03b1, \u03b2 < u2, and `3 < `3 + 1 = \u03b1 + \u03b2 < u3. Because (\u03b1, \u03b2) can not be an interior pair, we must either have \u03b1 \u2265 u1, or \u03b2 \u2264 0. Because u1 \u2265 2 + `1 = 2, we can only have \u03b1 \u2265 u1 in the case `3 \u2265 u2, which implies `3 + 2 \u2265 u1 + u2. As also, `3 + 2 \u2264 u3 \u2264 u1 + u2, these inequalities must be tight, implying that there are precisely the three vertex pairs (u1, u2), (u1 \u2212 2, u2), and (u1, u2 \u2212 2). Similarly, because u2 \u2212 1 \u2265 1 + `2 \u2265 1, we can only have \u03b2 \u2264 0 in the case `3 < u2, which implies `3 = 0. Consequently, we must also have u2 = 2; otherwise (1, 1) is an interior pair. This implies that there are precisely the three vertex pairs (0, 0), (2, 0), (0, 2), and completes the proof.\nWith the above at hand, we can achieve the desired progress for pattern structure of type III.\nLemma 27. Consider an R-GCTUF instance of the form given in (2), and let the corresponding pattern shape \u03a0\u0302 be of type III. Then either (\u03c0\u0304A(\u03b1, \u03b2) + \u03c0\u0304B(\u03b1, \u03b2)) \u2229 R 6= \u2205 for some (\u03b1, \u03b2) \u2208 \u03a0\u0302, or we can in strongly polynomial time find a pattern shape \u03a0\u2032 ( \u03a0\u0302 such that the R-GCTUF instance is feasible on \u03a0\u0302 if and only if it is feasible on \u03a0\u2032.\nProof. First assume there is a border pair (\u03b1, \u03b2) with |\u03c0B(\u03b1, \u03b2)| \u2265 2. Consider the unique constraint in the inequality description of \u03a0\u0302 that is tight at (\u03b1, \u03b2), and assume (\u03b1\u2032, \u03b2\u2032) \u2208 \u03a0\u0302 \\ {(\u03b1, \u03b2)} is another pair satisfying the same constraint with equality, and such that there is a hidden solution at (\u03b1\u2032, \u03b2\u2032). Let v \u2208 D be the direction pointing from (\u03b1\u2032, \u03b2\u2032) to (\u03b1, \u03b2). By applying Proposition 21 repeatedly, we get |\u03c0\u0304B((\u03b1\u2032, \u03b2\u2032) + v)| \u2265 2. Moreover, as (\u03b1, \u03b2) is a border pair, we have that (\u03b1, \u03b2) + v lies in \u03a0\u0302, and hence so does (\u03b1\u2032, \u03b2\u2032) + 2v. It then follows from Lemma 22 that |\u03c0\u0304A((\u03b1\u2032, \u03b2\u2032) + v)| = d, and hence (\u03c0\u0304A((\u03b1\u2032, \u03b2\u2032) + v) + \u03c0\u0304B((\u03b1\u2032, \u03b2\u2032) + v)) \u2229R 6= \u2205 by Lemma 19. Thus, if we do not find a solution right away by combining elements from \u03c0\u0304A(\u03b1, \u03b2) and \u03c0\u0304B(\u03b1, \u03b2), then there cannot be a hidden solution anywhere on the tight constraint. Thus, strengthening the tight constraint by one unit leads to the desired pattern shape \u03a0\u2032 ( \u03a0\u0302.\nIt is left to study the case where no border pair (\u03b1, \u03b2) \u2208 \u03a0\u0302 satisfies |\u03c0B(\u03b1, \u03b2)| \u2265 2. Since \u03a0\u0302 has no interior pairs, there must exist a vertex pair (\u03b1\u2032, \u03b2\u2032) \u2208 \u03a0\u0302 with |\u03c0\u0304B(\u03b1\u2032, \u03b2\u2032)| \u2265 2 (otherwise \u03a0\u0302 would be of type I). We now distinguish two cases:\nCase 1: There are at least three vertex pairs with |\u03c0\u0304B(\u03b1, \u03b2)| = 1. Combining the above discussion with Lemma 26, it follows that there is exactly one (\u03b1\u2032, \u03b2\u2032) \u2208 \u03a0\u0302 with |\u03c0B(\u03b1\u2032, \u03b2\u2032)| \u2265 2. Then by Theorem 25 (i), for each of the other at least four pairs (\u03b1, \u03b2) \u2208 \u03a0\u0302 there exists v \u2208 D such that (\u03b1, \u03b2) + v = (\u03b1\u2032, \u03b2\u2032), since (\u03b1, \u03b2) + v must satisfy |\u03c0B((\u03b1, \u03b2) + v)| \u2265 2 and (\u03b1\u2032, \u03b2\u2032) is the only such\npair. But (\u03b1\u2032, \u03b2\u2032) is a vertex pair, and hence it can have at most three such adjacent pairs, a contradiction (also see Figure 4a).\nCase 2: There are at most two vertex pairs with |\u03c0\u0304B(\u03b1, \u03b2)| = 1. Consider a border pair (\u03b1\u2032, \u03b2\u2032) and v \u2208 D such that (\u03b1\u2032, \u03b2\u2032)\u00b1v \u2208 \u03a0\u0302. The tight constraint of (\u03b1\u2032, \u03b2\u2032) contains two vertex pairs. Both of them must satisfy |\u03c0\u0304B(\u03b1, \u03b2)| = 1, for otherwise, Proposition 21 would imply |\u03c0\u0304B(\u03b1\u2032, \u03b2\u2032)| \u2265 2, contradicting our assumption. Additionally, since we assumed to have at most two vertex pairs with |\u03c0\u0304B(\u03b1, \u03b2)| = 1, it follows that any vertex pair (\u03b1, \u03b2) outside this tight constraint must satisfy |\u03c0\u0304B(\u03b1, \u03b2)| \u2265 2. But then, from an argument analogous to the one in the first case above, it follows that there can not be a border pair (\u03b1, \u03b2) \u2208 \u03a0\u0302 that does not satisfy the tight constraint with equality, as otherwise we would get |\u03c0\u0304B(\u03b1, \u03b2)| \u2265 2. Consequently, all pairs (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0\u0304B(\u03b1, \u03b2)| = 1 (those are the only ones where there might be a hidden solution) satisfy the constraint that is tight at (\u03b1\u2032, \u03b2\u2032) with equality. Thus, we can let \u03a0\u2032 be the pattern shape defined by all (\u03b1, \u03b2) that satisfy the tight constraint with equality (see Figure 4b for an example)."
        },
        {
            "heading": "Pattern structure of type IV",
            "text": "For type IV pattern structure, we first observe that, by Observation 20, if there are any solutions for pairs (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0B(\u03b1, \u03b2)| \u2265 2, we can also find one efficiently by combining solutions computed for the A- and B-subproblem when determining \u03c0\u0304A and \u03c0\u0304B . The other case, i.e., when no solutions exist for such (\u03b1, \u03b2), is covered by Theorem 25 (ii). Again, that statement allows to reduce the problem to a new GCTUF problem with the same group G and at the same depth d, but at least one variable less. Therefore, it allows us to make progress with respect to the number of variables."
        },
        {
            "heading": "Summary",
            "text": "The above discussion can be summarized in the following theorem. Recall that the depth of an RGCTUF problem is defined as d := |G| \u2212 |R|.\nTheorem 28. Let G be a finite abelian group. Consider an R-GCTUF problem P with n variables, group G, set of target residues R, depth d \u2264 3, and a constraint matrix T that is a 3-sum of two matrices with nA and nB many columns, respectively, such that n = nA + nB and nA, nB \u2265 2. Let p := min{nA, nB}. Assume furthermore that there is no non-trivial subgroup H of G with R = R+H . Then, after solving at most (d+ 1)3 many R-GCTUF problems with p variables, group G and depth at most d, as well as at most d(d + 1)2 R-GCTUF problems with n \u2212 p variables, group G and depth at most d\u2212 1, one can either\n\u2013 find a solution of P in strongly polynomial time, or\n\u2013 determine a single R-GCTUF problem P \u2032 with at most n \u2212 p + 1 variables, group G and depth d, such that P is feasible if and only if P \u2032 is feasible. Additionally, a solution of P \u2032 can be transformed into a solution of P in strongly polynomial time.\nFurthermore, all involved R-GCTUF problems can be constructed in strongly polynomial time."
        },
        {
            "heading": "4.5 Proof of Theorem 16",
            "text": "Consider an R-GCTUF problem with group G, n variables, and depth d = |G| \u2212 |R| \u2264 3. If d = 0, then the problem is an unconstrained TU problem, and thus it is enough to find a vertex solution of the linear relaxation. This can be done in strongly polynomial time using the algorithm of Tardos [Tar86]. If d > 0, we apply Theorem 15 to the constraint matrix T . If T is covered by one of Items (i) and (ii), then it is a base block matrix itself, so a single call to the oracle suffices. Else, T is covered by Item (iii) of Theorem 15, and we may assume that T decomposes into a 3-sum of two matrices with at least two columns each (see Appendix C for the case where a pivot step is necessary). In particular, note that in this case, we have n \u2265 4. Using Lemma 17 or Theorem 28, we now reduce the problem to one or more smaller problems, until we eventually obtain base block problems, which we solve by an oracle call.\nWe bound the number of oracle calls triggered by our procedure. Let f(n, d) be the smallest upper bound on the number of oracle calls when starting from an instance with n variables and depth d. We claim that\nf(n, d) \u2264 (d+ 1)3d nd+3 log2(d+1)+2 .\nTo prove this bound, we use induction on n+d. First observe that, by the above discussion, f(n, 0) = 0 for any n \u2265 1, and f(n, d) = 1 for n \u2264 3 and d > 0 (in the latter case, we cannot attain Item (iii) of Theorem 15). Now consider an R-GCTUF problem with n variables and depth d. If R = R + H for a non-trivial subgroup H of G, Lemma 17 allows for a reduction to a single R-GCTUF problem at smaller depth. Thus, we end up with at most f(n, d\u2032) many base block problems for some d\u2032 < d. In this case, the induction hypothesis implies the claimed bound on f(n, d) because it is monotone in d. In the other case, we apply Theorem 28. Thus, there is a p \u2208 {2, . . . , bn/2c} such that the number of base block problems we have to solve is bounded by\n(d+ 1)3f(p, d) + d(d+ 1)2f(n\u2212 p, d\u2212 1) + f(n\u2212 p+ 1, d) \u2264 (d+ 1)3d nd+3 log2(d+1)+2 (( p\nn )2 + n\u2212 p n2 + ( n\u2212 p+ 1 n )2) \ufe38 \ufe37\ufe37 \ufe38\n\u22641\n\u2264 (d+ 1)3d nd+3 log2(d+1)+2 ,\nproving the claimed bound on f(n, d). Here, we use that\n(d+ 1)3f(p, d) \u2264 (d+ 1)3d+3 pd+3 log2(d+1)+2 = (d+ 1)3 ( p n )d+3 log2(d+1)\ufe38 \ufe37\ufe37 \ufe38 \u22641 (d+ 1)3d nd+3 log2(d+1)+2 ( p n )2\n\u2264 (d+ 1)3d nd+3 log2(d+1)+2 ( p n )2 ,\nas p/n \u2264 1/2 and hence (p/n)d+3 log2(d+1) \u2264 (d+ 1)\u22123, together with\nd(d+ 1)2f(n\u2212 p, d\u2212 1) \u2264 d(d+ 1)2d3d\u22123(n\u2212 p)d\u22121+3 log2 d+2\n\u2264 d(d+ 1) 2\n(d+ 1)3 ( n\u2212 p n )d+3 log2(d+1) \ufe38 \ufe37\ufe37 \ufe38\n\u22641\n(d+ 1)3d nd+3 log2(d+1)+2 ( n\u2212 p n2 )\n\u2264 (d+ 1)3d nd+3 log2(d+1)+2 ( n\u2212 p n2 ) ."
        },
        {
            "heading": "A Adapted proofs of structural results",
            "text": "This section is devoted to the proofs of Lemma 18 and Theorem 25. More precisely, given that these statements were proved in a congruency-constrained setting in [NSZ22], we mainly recall proof ideas and comment on how to adapt them to the group constraint setting that we work with."
        },
        {
            "heading": "A.1 Proof of Lemma 18",
            "text": "Lemma 18 is the group-constrained analogue of [NSZ22, Lemmas 2.5 and 5.1]. To obtain the result, [NSZ22] exploits a decomposition theorem for solutions of totally unimodular systems [NSZ22, Lemma 2.1] combined with the following fact for the special case of G = Z/mZ [NSZ22, Lemma 2.2], which is indeed the only property of Z/mZ used throughout the proof.\nLemma 29. Let G be a finite abelian group, R \u2286 G, and r1, . . . , r` \u2208 G with \u2211\ni\u2208[`] ri \u2208 R. If there is no interval I = {i1, . . . , i2} with i1, i2 \u2208 [`] and i1 < i2 such that \u2211 i\u2208[`]\\I ri \u2208 R, then ` \u2264 |G| \u2212 |R|.\nConsequently, through Lemma 29, the proofs of [NSZ22, Lemmas 2.5 and 5.1] immediately extend to the group constraint setting, and thereby imply Lemma 18. We also remark that Lemma 29 is in fact just a slightly generalized and more constructive version of Lemma 11. Moreover, the original proof for G = Z/mZ directly generalizes. We repeat it here for completeness.\nProof of Lemma 29. Assume for the sake of deriving a contradiction that there is no interval I \u2286 [`] with \u2211 i\u2208[`]\\I ri \u2208 R, but ` \u2265 |G| \u2212 |R| + 1. Consider the ` group elements s0 = 0, s1 = r1, . . . , s`\u22121 = r1 + . . . + r`\u22121. Observe that sj /\u2208 R for all j \u2208 [` \u2212 1]; for otherwise, there is an interval I = {j + 1, . . . , `} for some j \u2208 [` \u2212 1] such that \u2211 i\u2208[`]\\I = sj \u2208 R, contradicting the assumption. Thus, sj \u2208 G \\ R for all j \u2208 [` \u2212 1]. Hence, because ` \u2265 |G| \u2212 |R| + 1, we have by the pigeonhole principle that there exist j1, j2 \u2208 [`\u22121] with j1 < j2 such that sj1 = sj2 . Thus, I = {j1+1, . . . , j2} is an interval with \u2211 i\u2208[`]\\I = \u2211 i\u2208[`]I ri \u2212 (sj2 \u2212 sj1) = \u2211 i\u2208[`]\\I ri \u2208 R, again contradicting the assumption and hence completing the proof."
        },
        {
            "heading": "A.2 Proof of Theorem 25",
            "text": "The statements in Theorem 25 are closely linked to a GCTUF problem in the form presented in (2). In the following, we say that a solution x = (xA, xB) of a problem in that form is a solution for (\u03b1, \u03b2) if \u03b1 = f>xB and \u03b2 = h>xA."
        },
        {
            "heading": "Item (i) of Theorem 25",
            "text": "In the congruency-constrained setting, the first part of Theorem 25 (i) was proved in [NSZ22, Lemma 5.9], while the second part is implicit in [NSZ22, Proof of Lemma 5.8]. The argument uses a generalized version of Proposition 21, which states that given distinct pairs (\u03b11, \u03b21), (\u03b12, \u03b22) \u2208 \u03a0\u0302, there are (\u03b13, \u03b23), (\u03b14, \u03b24) \u2208 \u03a0\u0302 such that for any solutions x1 for (\u03b11, \u03b21) and x2 for (\u03b12, \u03b22), there exist solutions x3 for (\u03b13, \u03b23) and x4 for (\u03b14, \u03b24) such that x1 + x2 = x3 + x4 (in fact, (\u03b13, \u03b23) and (\u03b14, \u03b24) are equal to 12((\u03b11, \u03b21) + (\u03b12, \u03b22)) up to rounding, see [NSZ22, Lemma 5.3]).\nTowards a proof of Theorem 25 (i), we may assume that (\u03b1\u2032, \u03b2\u2032) 6= (\u03b1, \u03b2)+v for all v \u2208 D\u222a{0}, and apply the above with (\u03b11, \u03b21) = (\u03b1\u2032, \u03b2\u2032) and (\u03b12, \u03b22) = (\u03b1, \u03b2). This gives that (\u03b13, \u03b23) and (\u03b14, \u03b24) are both different from (\u03b11, \u03b21) and (\u03b12, \u03b22), but \u201ccloser\u201d to (\u03b1\u2032, \u03b2\u2032) than (\u03b1, \u03b2) was. The result will follow by iteratively applying this argument after showing that |\u03c0B(\u03b13, \u03b23)| \u2265 2 or |\u03c0B(\u03b14, \u03b24)| \u2265 2. In the congruency-constrained case, the latter is concluded from the assumption that |\u03c0B(\u03b1, \u03b2)| \u2265 2, i.e., that there are two feasible residues at (\u03b1, \u03b2). Indeed, if we had |\u03c0B(\u03b13, \u03b23)| = |\u03c0B(\u03b14, \u03b24)| = 1, then \u03b3>(x3 +x4)\u2014and hence also \u03b3>(x1 +x2)\u2014would have to yield the same residue for all solutions x1 for (\u03b11, \u03b21) and x2 for (\u03b12, \u03b22). This reasoning holds analogously for any finite abelian group other than the cyclic groups Z/mZ, by well-definedness of addition to be precise. Because no other properties of congruency-constraints are exploited, the proofs of [NSZ22] directly translate to a proof of Theorem 25 (i)."
        },
        {
            "heading": "Item (ii) of Theorem 25",
            "text": "Theorem 25 (ii) gives two sufficient conditions that allow for reduction to a problem with fewer variables. The conditions are precisely that the pattern structure is of type I, or that it is of type IV and that there are no solutions for pairs (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0(\u03b1, \u03b2)| \u2265 2.\nFor pattern structure of type I, [NSZ22, Corollary 5.1] shows that\u2014in the congruency-constrained setting\u2014there exist r0, r1, r2 \u2208 Z/mZ such that \u03c0B(\u03b1, \u03b2) = {r0 + r1\u03b1+ r2\u03b2} for all (\u03b1, \u03b2) \u2208 \u03a0\u0302, and \u03c0B is called linear in this case. Again, the proof is based on an averaging argument (i.e., Proposition 21) that seamlessly carries over to the more general group-constrained setting with a finite abelian group G by simply replacing calculations in Z/mZ by calculations in G. The same applies to showing that in case of a linear pattern, a GCTUF problem can be reduced to an equivalent problem with the same group G, at the same depth d, and strictly fewer variables [NSZ22, Theorems 2.4 and 2.5].\nFor pattern structure of type IV, Lemma 26 gives that \u03a0\u0302 consists of at most four pairs, and all of them are vertex pairs. This pattern family is very restricted, and is in fact a subset of the patterns covered by an analysis of certain small patterns in [NSZ22, Proof of Lemma 5.11]. Concretely, for the type IV pattern structure that we consider here, it was concluded (using another averaging argument, i.e., Proposition 21) that one can choose for every (\u03b1, \u03b2) \u2208 \u03a0\u0302 a singleton-subset \u03c0\u0303B(\u03b1, \u03b2) \u2286 \u03c0B(\u03b1, \u03b2) such that \u03c0\u0303B is linear in the sense introduced above. Now recall that we also assume here that there are no solutions for pairs (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0(\u03b1, \u03b2)| \u2265 2, i.e., solutions can only occur for (\u03b1, \u03b2) \u2208 \u03a0\u0302 with |\u03c0B(\u03b1, \u03b2)| = 1. For those (\u03b1, \u03b2), we have \u03c0B(\u03b1, \u03b2) = \u03c0\u0303B(\u03b1, \u03b2), so it is enough to look for solutions compatible with \u03c0\u0303B . But then, linearity of \u03c0\u0303B allows for the same reduction to an equivalent problem with fewer variables as discussed above (the congruency-constrained version is given in [NSZ22, Theorems 5.2 and 2.5]). Again, in all involved proofs of [NSZ22], all calculations in Z/mZ can directly be replaced by calculations in any fixed finite abelian group G without affecting correctness of the proofs, hence the results carry over as desired."
        },
        {
            "heading": "B Adapted proofs of base block results",
            "text": "In this section, we discuss how to extend the proofs of [NSZ22, Section 4] for congruency-constrained TU problems with a base block constraint matrix, i.e., matrices covered by Items (i) and (ii) of Theorem 15. The congruency constraints that were used previously may equivalently be formulated as constraints in a cyclic group Z/mZ, and it turns out that all arguments extend to general finite abelian\ngroups, i.e., the setting that we need for our purposes. In this appendix, we recall the proofs of [NSZ22] and comment on the mostly straightforward modifications for the sake of completeness.\nTo this end, let us first define group-constrained TU problems (GCTU problems) to be the optimization variant of GCTUF problems, i.e., where additionally to the GCTUF setup, we are given an objective c \u2208 Rn that we want to minimize over all feasible solutions of the GCTUF problem. Note that we can always assume to start with a GCTU problem whose relaxation (i.e., the problem obtained after dropping the group constraint) is feasible, which we can check in strongly polynomial time; for otherwise, the GCTU problem is clearly infeasible. Hence, we assume feasibility of the relaxation throughout this section. To start with, let us recall the definition of a network matrix.\nDefinition 30. A matrix T is a network matrix if the rows of T can be indexed by the edges of a directed spanning tree (V,U), and the columns can be indexed by the edges of a directed graph (V,A) on the same vertex set, such that for every arc a = (v, w) \u2208 A and every arc u \u2208 U ,\nTu,a =  1 if the unique v-w path in U passes through u forwardly, 0 if the unique v-w path in U does not pass through u, \u22121 if the unique v-w path in U passes through u backwardly.\nIn the subsequent three sections, we distinguish the three different cases of base block matrices, namely whether the constraint matrix T of the GCTU problem that we consider is a network matrix, the transpose of a network matrix, or a matrix stemming from the constant-size matrices given in Item (ii) of Theorem 15.\nB.1 Network matrix base block GCTU problems\nIn this section, we discuss the extension from congruency constraints to group constraints in the case where the constraint matrix is a network matrix. Concretely, this will provide the following result.\nTheorem 31. LetG be a finite abelian group. There is a strongly polynomial time randomized algorithm for GCTU problems with group G, unary encoded objectives, and constraint matrices that are network matrices.\nIn this case, one can exploit the graph structure that comes with network matrices to interpret GCTU problems with network constraint matrices as minimum-cost group-constrained circulation problems in certain directed graphs. To get started, let us recall that a circulation f in a directed graph H = (V,A) with capacities u : A\u2192 Z\u22650 is a mapping f : A\u2192 Z\u22650 such that f(a) \u2264 u(a) for every arc a \u2208 A, and f(\u03b4+(v)) = f(\u03b4\u2212(v)) for every vertex v \u2208 V . Given arc lengths ` : A\u2192 Z, the length of a circulation f is `(f) := \u2211 a\u2208A `(a)f(a). Note that here, arc lengths are allowed to be negative. A group-constrained circulation problem is formally defined as follows.\nGroup-Constrained Circulation (GCC): Let H = (V,A) be a directed graph with capacities u : A \u2192 Z\u22650, arc lengths ` : A \u2192 Z, and let G be a finite abelian group, \u03b7 : A \u2192 G and r \u2208 G. Find a minimum-length circulation f : A \u2192 Z\u22650 in the given network such that\u2211\na\u2208A \u03b7(a)f(a) = r.\nIn [NSZ22, Lemma 4.2], a reduction from GCTU problems with a network matrix as constraint matrix to GCC is presented for the case of a cyclic group G = Z/mZ. In this reduction, the only property of Z/mZ that is exploited is [NSZ22, Lemma 2.2]. Thus, replacing this statement by its group-constrained analogue Lemma 29 proved earlier immediately gives the following.\nLemma 32. GCTU problems with groupG, objective vector c, and constraint matrices that are network matrices can be reduced in strongly polynomial time to GCC problems with groupG, capacities u within {0, . . . , |G| \u2212 1}, and arc lengths ` with \u2016`\u2016\u221e \u2264 \u2016c\u2016\u221e.\nNow, one can finish the proof of Theorem 31 by exploiting a connection to the so-called exact length circulation problem, where the goal is to find a circulation whose length is equal to a given value. The reduction follows the one given in [NSZ22, Lemma 4.3], but needs to be slightly adapted in order to capture group constraints.\nExact Length Circulation (XLC): Let H = (V,A) be a digraph with capacities u : A \u2192 Z>0 and arc lengths ` : A \u2192 Z. Given L \u2208 Z, find a circulation f in the given network such that `(f) = L.\nExact length circulation problems can be solved using a randomized pseudopolynomial algorithm, as shown by Camerini, Galbiati, and Maffioli [CGM92]. They reduce the problem to an exact cost perfect matching problem, which can then be reduced to computing the coefficients of a well-defined polynomial. The following theorem summarizes the result of Camerini, Galbiati, and Maffioli [CGM92] for XLC.\nTheorem 33 ([CGM92]). There is a randomized algorithm for XLC problems in a directed graph H = (V,A) with capacities u : A\u2192 Z\u22650 in time poly(|V |,maxa\u2208A u(a),maxa\u2208A |`(a)|).\nThus, it remains to extend the connection between GCC and XLC problems from the congruencyconstrained to the group-constrained setting. To this end, we recall the reduction for a single congruency constraint modulom: Taking an integer representative in {0, . . . ,m\u22121} for each residue modulom, we may construct new arc lengths that capture the residue representative r(a) and original arc lengths `(a) independently (e.g., by using \u02dc\u0300(a) = c \u00b7 `(a) + r(a) for a large enough constant c). Guessing both the length and the residue class of an optimal solution of the GCC problem is then equivalent to guessing a target L with respect to the new lengths, hence the reduction can be achieved by binary search.\nFor group constraints, we recall that we may equivalently interpret a group constraint as multiple congruency constraints, which can then be integrated into new arc lengths \u02dc\u0300at different orders of magnitude. Formally, this leads to the following lemma, which is an analogue of [NSZ22, Lemma 4.3].\nLemma 34. A GCC problem in a graph H = (V,A) with group G, arc lengths ` : A \u2192 Z, and capacities u : A\u2192 {0, 1, . . . , |H|\u22121} can be polynomially reduced to poly(|G|, |V |, |A|,maxa\u2208A |`(a)|) many XLC problems in G with the same capacities.\nProof. First, we may decompose G \u223c= Z/m1Z \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 Z/mkZ for some k \u2208 Z\u22651. For every i \u2208 [k], let \u03d5i : G \u2192 Z/miZ \u2192 Z denote the corresponding natural projection maps composed with the natural mapping of a residue in Z/miZ to a representative in {0, . . . ,mi \u2212 1}. Set m := |G|.\nDefine \u02dc\u0300: A\u2192 Z for every arc a \u2208 A as\n\u02dc\u0300(a) = `(a) \u00b7m2k|A|k + k\u2211 i=1 m2i\u22122|A|i\u22121\u03d5i(\u03b7(a)) .\nWe thus have \u02dc\u0300(f) = `(f)\u00b7m2k|A|k+ \u2211k\ni=1m 2i\u22122|A|i\u22121\u03d5i(\u03b7(f)). Observe that \u2211 a\u2208A \u03d5i(\u03b7(a))f(a) <\nm2|A| for every 1 \u2264 i \u2264 k, hence from \u02dc\u0300(f), one can retrieve `(f) as well as \u2211\na\u2208A \u03d5i(\u03b7(a))f(a) for every i \u2208 [k]. Consequently, finding a circulation of length L with \u2211 a\u2208A \u03b7(a)f(a) = r is equivalent to solving XLC problems in H with respect to lengths \u02dc\u0300 and with target length L\u0303 = L \u00b7 m2k|A|k +\u2211k i=1m\n2i\u22122|A|i\u22121(dimi + \u03d5i(r)) for all tuples (d1, . . . , dk) \u2208 {0, . . . ,m|A| \u2212 1}k. We can find the smallest L for which there is a GCC solution of length L by binary search in O(k log(m|A| \u00b7 maxa\u2208A |`(a)|)) iterations, because |`(f)| = \u2223\u2223\u2211 a\u2208A `(a)f(a) \u2223\u2223 \u2264 m|A| \u00b7 maxa\u2208A |`(a)|. Altogether, this gives the desired result.\nCombining Lemmas 32 and 34 and Theorem 33 readily implies Theorem 31.\nB.2 Transposed network matrix base block GCTU problems\nFor GCTU problems with a constraint matrix that is the transpose of a network matrix, we recall from Section 3 that we aim for a reduction to a lattice problem of the form given in (1). For the sake of completeness, let us restate that problem in the optimization setting here.\nGroup-Constrained Lattice Optimization (GCLO): Let N be a finite set, L \u2286 2N a lattice, (G,+) a finite abelian group, \u03b3 : N \u2192 G, r \u2208 G, and w : N \u2192 Z. The task is to find X \u2208 L with \u03b3(X) := \u2211 x\u2208X \u03b3(x) = r minimizing \u2211 x\u2208X w(x), or decide infeasibility.\nIn [NSZ22, Section 4.2], the following result was shown implicitly for the case of a cyclic group G. It turns out, though, that no properties of cyclic groups beyond them being finite abelian groups are used in the proofs, hence by substituting all occurrences of congruency constraints, i.e., constraints in a cyclic group Z/mZ, with group constraints, the original proofs also imply the theorem for a general finite abelian group.\nTheorem 35. Given a finite abelian groupG, consider a GCTU problem on n variables and a constraint matrix that is the transpose of a network matrix. One can in strongly polynomial time determine a GCLO problem over a ground setN with |N | = n|G| such that from an optimal solution of the GCLO problem, we can in strongly polynomial time compute an optimal solution of the GCTU problem.\nIn particular, Theorem 35 implies the reduction claimed in Proposition 9 by observing that we can in strongly polynomial time determine w : N \u2192 R such that f(A) = \u2211 x\u2208Aw(x).\nB.3 Matrices stemming from particular constant-size matrices\nTo complete the discussion of base block GCTU problems, we now cover GCTU problems with constraint matrices covered by Item (ii) of Theorem 15. In other words, these are matrices T that can be obtained from the two matrices 1 \u22121 0 0 \u22121 \u22121 1 \u22121 0 0\n0 \u22121 1 \u22121 0 0 0 \u22121 1 \u22121 \u22121 0 0 \u22121 1\n and \n1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1 0 0 1  (6) by repeatedly appending unit vector rows or columns, appending a copy of a row or column, and inverting the sign of a row or column.\nTo tackle problems with such constraint matrices, [NSZ22, Section 4.3] more generally considers constraint matrices T that are obtained from a core matrix C through the above operations. (Concretely, in the case relevant here, C will be one of the two matrices in (6).) It is shown that if C has ` columns, then there are integral vectors s1, . . . , s` such that once the values s>i x are known for all i \u2208 [`], the inequality system Tx \u2264 b can be reduced to an equivalent system T \u2032x \u2264 b\u2032 on the same variables x, where T \u2032 is a network matrix and the transpose of a network matrix at the same time, and b\u2032 is integral. By exploiting a proximity statement for congruency-constrained TU problems, [NSZ22] observe that it suffices to consider values s>i x \u2208 {\u2212m + 1, . . . ,m \u2212 1}, where m is the modulus of the congruencyconstraint, and they conclude that there are only (2m \u2212 1)` possible combinations of values for s>i x to be enumerated, which can be done in polynomial time for constant `. To extend this reasoning from congruency constraints (i.e., constraints in a cyclic group G = Z/mZ) to constraints in general finite abelian groups, we observe that the aforementioned proximity statement relies on a decomposition theorem for solutions of totally unimodular systems [NSZ22, Lemma 2.1] and the property of cyclic groups that we generalized in Lemma 29. Thereby, it is again a matter of replacing modular arithmetic by calculations in a general finite abelian group G to obtain the following result.\nLemma 36. Let G be a finite abelian group and consider a GCTU problem with group G and a constraint matrix T that can be obtained from a matrix C with ` columns by repeatedly appending unit vector rows or columns, appending a copy of a row or column, and inverting the sign of a row or column. Then, the GCTU problem can be reduced to (2|G| \u2212 1)` many GCTU problems with group G and constraint matrices of size linear in the size of T that are network matrices and transposes of network matrices at the same time.\nFor feasibility problems, we may thus exploit Theorem 7 to obtain the following direct corollary.\nCorollary 37. LetG be a finite abelian group. There is a strongly polynomial time algorithm for solving GCTUF problems with group G and a constraint matrix covered by Item (ii) of Theorem 15."
        },
        {
            "heading": "C Pivoting steps",
            "text": "By Theorem 15 (concretely, Item (iii)), we may face pivoting operations when applying Seymour\u2019s decomposition. For congruency-constrained TU problems, [NSZ22, Theorem 2.7] shows that such operations can be dealt with in the following sense: After the addition of a single variable upper bound to a given congruency-constrained TU problem, there is a unimodular variable transformation that transforms the problem into an equivalent congruency-constrained TU problem such that (up to one extra constraint that is an upper bound on a variable), the new constraint matrix is the desired pivoted form of the original constraint matrix.\nThe transformation argument sketched above only exploits that congruency constraints are constraints on a linear combination of the variables, and thus immediately extends to group constraints. Adding an upper bound constraint on a variable can be done without changing the problem due to a proximity result for congruency-constrained TU problems [NSZ22, Lemma 3.2]. The latter is again based on a decomposition theorem for solutions of TU systems [NSZ22, Lemma 2.1] and the property of cyclic groups that we generalized in Lemma 29, and thus translates to group constraints."
        }
    ],
    "title": "Advances on Strictly \u2206-Modular IPs*",
    "year": 2023
}