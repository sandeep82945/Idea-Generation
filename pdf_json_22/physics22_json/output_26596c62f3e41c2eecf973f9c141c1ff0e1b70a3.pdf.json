{
    "abstractText": "We construct Pauli topological subsystem codes characterized by arbitrary twodimensional Abelian anyon theories \u2013 this includes anyon theories with degenerate braiding relations and those without a gapped boundary to the vacuum. Our work both extends the classification of two-dimensional Pauli topological subsystem codes to systems of compositedimensional qudits and establishes that the classification is at least as rich as that of Abelian anyon theories. We exemplify the construction with topological subsystem codes defined on four-dimensional qudits based on the Z 4 anyon theory with degenerate braiding relations and the chiral semion theory \u2013 both of which cannot be captured by topological stabilizer codes. The construction proceeds by \u201cgauging out\u201d certain anyon types of a topological stabilizer code. This amounts to defining a gauge group generated by the stabilizer group of the topological stabilizer code and a set of anyonic string operators for the anyon types that are gauged out. The resulting topological subsystem code is characterized by an anyon theory containing a proper subset of the anyons of the topological stabilizer code. We thereby show that every Abelian anyon theory is a subtheory of a stack of toric codes and a certain family of twisted quantum doubles that generalize the double semion anyon theory. We further prove a number of general statements about the logical operators of translation invariant topological subsystem codes and define their associated anyon theories in terms of higher-form symmetries. Tyler D. Ellison: tyler.ellison@yale.edu Accepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 1 ar X iv :2 21 1. 03 79 8v 2 [ qu an tph ] 1 0 O ct 2 02 3",
    "authors": [
        {
            "affiliations": [],
            "name": "Tyler D. Ellison"
        },
        {
            "affiliations": [],
            "name": "Yu-An Chen"
        },
        {
            "affiliations": [],
            "name": "Arpit Dua"
        },
        {
            "affiliations": [],
            "name": "Wilbur Shirley"
        },
        {
            "affiliations": [],
            "name": "Nathanan Tantivasadakarn"
        },
        {
            "affiliations": [],
            "name": "Dominic J. Williamson"
        }
    ],
    "id": "SP:59e58d3f96f545fd84418965859fb7674525b168",
    "references": [
        {
            "authors": [
                "S.B. Bravyi",
                "A. Yu. Kitaev"
            ],
            "title": "Quantum codes on a lattice with boundary",
            "year": 1998
        },
        {
            "authors": [
                "Eric Dennis",
                "Alexei Kitaev",
                "Andrew Landahl",
                "John Preskill"
            ],
            "title": "Topological quantum memory",
            "venue": "Journal of Mathematical Physics 43,",
            "year": 2002
        },
        {
            "authors": [
                "A. Yu Kitaev"
            ],
            "title": "Fault-tolerant quantum computation by anyons",
            "venue": "Annals of Physics 303,",
            "year": 2003
        },
        {
            "authors": [
                "R. Raussendorf",
                "J. Harrington",
                "K. Goyal"
            ],
            "title": "A fault-tolerant one-way quantum computer",
            "venue": "Annals of Physics 321,",
            "year": 2006
        },
        {
            "authors": [
                "Austin G. Fowler",
                "Matteo Mariantoni",
                "John M. Martinis",
                "Andrew N. Cleland"
            ],
            "title": "Surface codes: Towards practical large-scale quantum computation",
            "venue": "Phys. Rev. A",
            "year": 2012
        },
        {
            "authors": [
                "David K. Tuckett",
                "Stephen D. Bartlett",
                "Steven T. Flammia"
            ],
            "title": "Ultrahigh error threshold for surface codes with biased noise",
            "venue": "Phys. Rev. Lett. 120,",
            "year": 2018
        },
        {
            "authors": [
                "H. Bombin"
            ],
            "title": "Topological order with a twist: Ising anyons from an abelian model",
            "venue": "Phys. Rev. Lett. 105,",
            "year": 2010
        },
        {
            "authors": [
                "Benjamin J. Brown",
                "Katharina Laubscher",
                "Markus S. Kesselring",
                "James R. Wootton"
            ],
            "title": "Poking holes and cutting corners to achieve clifford gates with the surface code",
            "venue": "Phys. Rev. X",
            "year": 2017
        },
        {
            "authors": [
                "Paul Webster",
                "Stephen D. Bartlett"
            ],
            "title": "Fault-tolerant quantum gates with defects in topological stabilizer codes",
            "venue": "Phys. Rev. A 102,",
            "year": 2020
        },
        {
            "authors": [
                "Michael A. Levin",
                "Xiao Gang Wen"
            ],
            "title": "String-net condensation: A physical mechanism for topological phases",
            "venue": "Physical Review B",
            "year": 2005
        },
        {
            "authors": [
                "Daniel Gottesman"
            ],
            "title": "The heisenberg representation of quantum computers",
            "venue": "Proceedings of the XXII International Colloquium on Group Theoretical Methods in Physics,",
            "year": 1999
        },
        {
            "authors": [
                "Christopher T. Chubb",
                "Steven T. Flammia"
            ],
            "title": "Statistical mechanical models for Accepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 98 quantum codes with correlated noise",
            "venue": "Annales de L\u2019Institut Henri Poincare\u0301 D",
            "year": 2021
        },
        {
            "authors": [
                "David Poulin"
            ],
            "title": "Stabilizer formalism for operator quantum error correction",
            "venue": "Phys. Rev. Lett. 95,",
            "year": 2005
        },
        {
            "authors": [
                "Michael A. Nielsen",
                "David Poulin"
            ],
            "title": "Algebraic and information-theoretic conditions for operator quantum error correction",
            "venue": "Phys. Rev. A 75,",
            "year": 2007
        },
        {
            "authors": [
                "H. Bombin",
                "M. Kargarian",
                "M.A. Martin-Delgado"
            ],
            "title": "Interacting anyonic fermions in a two-body color code model",
            "venue": "Phys. Rev. B",
            "year": 2009
        },
        {
            "authors": [
                "H. Bombin"
            ],
            "title": "Topological subsystem codes",
            "venue": "Phys. Rev. A 81,",
            "year": 2010
        },
        {
            "authors": [
                "H Bombin",
                "Guillaume Duclos-Cianci",
                "David Poulin"
            ],
            "title": "Universal topological phase of two-dimensional stabilizer codes",
            "venue": "New Journal of Physics 14,",
            "year": 2012
        },
        {
            "authors": [
                "Hector Bombin"
            ],
            "title": "Structure of 2D Topological Stabilizer Codes",
            "venue": "Communications in Mathematical Physics 327,",
            "year": 2014
        },
        {
            "authors": [
                "Jeongwan Haah"
            ],
            "title": "Classification of translation invariant topological pauli stabilizer codes for prime dimensional qudits on two-dimensional lattices",
            "venue": "Journal of Mathematical Physics",
            "year": 2021
        },
        {
            "authors": [
                "Tyler D. Ellison",
                "Yu-An Chen",
                "Arpit Dua",
                "Wilbur Shirley",
                "Nathanan Tantivasadakarn",
                "Dominic J. Williamson"
            ],
            "title": "Pauli stabilizer models of twisted quantum doubles",
            "venue": "PRX Quantum 3,",
            "year": 2022
        },
        {
            "authors": [
                "Sergey Bravyi"
            ],
            "title": "Subsystem codes with spatially local generators",
            "venue": "Phys. Rev. A 83,",
            "year": 2011
        },
        {
            "authors": [
                "Martin Suchara",
                "Sergey Bravyi",
                "Barbara Terhal"
            ],
            "title": "Constructions and noise threshold of topological subsystem codes",
            "venue": "Journal of Physics A: Mathematical and Theoretical",
            "year": 2011
        },
        {
            "authors": [
                "Adam Paetznick",
                "Ben W. Reichardt"
            ],
            "title": "Universal fault-tolerant quantum computation with only transversal gates and error correction",
            "venue": "Phys. Rev. Lett. 111,",
            "year": 2013
        },
        {
            "authors": [
                "Jonas T. Anderson",
                "Guillaume Duclos-Cianci",
                "David Poulin"
            ],
            "title": "Fault-tolerant conversion between the steane and reed-muller quantum codes",
            "venue": "Phys. Rev. Lett. 113,",
            "year": 2014
        },
        {
            "authors": [
                "H\u00e9ctor Bomb\u0301\u0131n"
            ],
            "title": "Gauge color codes: optimal transversal gates and gauge fixing in topological stabilizer codes",
            "venue": "New Journal of Physics 17,",
            "year": 2015
        },
        {
            "authors": [
                "Sergey Bravyi",
                "Guillaume Duclos-Cianci",
                "David Poulin",
                "Martin Suchara"
            ],
            "title": "Subsystem surface codes with three-qubit check operators",
            "venue": "Quant. Inf. Comp",
            "year": 2013
        },
        {
            "authors": [
                "Christophe Vuillot",
                "Lingling Lao",
                "Ben Criger",
                "Carmen Gar\u0107\u0131a Almud\u00e9ver",
                "Koen Bertels",
                "Barbara M Terhal"
            ],
            "title": "Code deformation and lattice surgery are gauge fixing",
            "venue": "New Journal of Physics",
            "year": 2019
        },
        {
            "authors": [
                "H. Bombin",
                "M.A. Martin-Delgado"
            ],
            "title": "Exact topological quantum order in d = 3 and beyond: Branyons and brane-net condensates",
            "venue": "Phys. Rev. B 75,",
            "year": 2007
        },
        {
            "authors": [
                "Benjamin J. Brown",
                "Naomi H. Nickerson",
                "Dan E. Browne"
            ],
            "title": "Fault-tolerant error correction with the gauge color code",
            "venue": "Nature Communications",
            "year": 2016
        },
        {
            "authors": [
                "Benjamin J. Brown"
            ],
            "title": "A fault-tolerant non-clifford gate for the surface code in two dimensions",
            "venue": "Science Advances 6,",
            "year": 2020
        },
        {
            "authors": [
                "Paolo Zanardi",
                "Daniel A. Lidar",
                "Seth Lloyd"
            ],
            "title": "Quantum tensor product structures are observable induced",
            "venue": "Phys. Rev. Lett. 92,",
            "year": 2004
        },
        {
            "authors": [
                "Alexei Kitaev"
            ],
            "title": "Anyons in an exactly solved model and beyond",
            "venue": "Annals of Physics 321,",
            "year": 2006
        },
        {
            "authors": [
                "Oscar Higgott",
                "Nikolas P. Breuckmann"
            ],
            "title": "Subsystem codes with high thresholds by gauge fixing and reduced qubit overhead",
            "venue": "Phys. Rev. X 11,",
            "year": 2021
        },
        {
            "authors": [
                "Matthew B. Hastings",
                "Jeongwan Haah"
            ],
            "title": "Dynamically Generated Logical Qubits",
            "venue": "Quantum 5,",
            "year": 2021
        },
        {
            "authors": [
                "Craig Gidney",
                "Michael Newman",
                "Austin Fowler",
                "Michael Broughton"
            ],
            "title": "A Fault- Tolerant Honeycomb Memory",
            "venue": "Quantum 5,",
            "year": 2021
        },
        {
            "authors": [
                "Jeongwan Haah",
                "Matthew B. Hastings"
            ],
            "title": "Boundaries for the Honeycomb Code",
            "venue": "Quantum 6,",
            "year": 2022
        },
        {
            "authors": [
                "Adam Paetznick",
                "Christina Knapp",
                "Nicolas Delfosse",
                "Bela Bauer",
                "Jeongwan Haah",
                "Matthew B. Hastings",
                "Marcus P. da Silva"
            ],
            "title": "Performance of planar floquet codes with majorana-based qubits",
            "venue": "PRX Quantum 4,",
            "year": 2023
        },
        {
            "authors": [
                "Craig Gidney",
                "Michael Newman",
                "Matt McEwen"
            ],
            "title": "Benchmarking the Planar Honeycomb Code",
            "venue": "Quantum 6,",
            "year": 2022
        },
        {
            "authors": [
                "Sergio Doplicher",
                "Rudolf Haag",
                "John E Roberts"
            ],
            "title": "Local observables and particle statistics I",
            "venue": "Communications in Mathematical Physics 23,",
            "year": 1971
        },
        {
            "authors": [
                "Sergio Doplicher",
                "Rudolf Haag",
                "John E Roberts"
            ],
            "title": "Local observables and particle statistics II",
            "venue": "Communications in Mathematical Physics 35,",
            "year": 1974
        },
        {
            "authors": [
                "Matthew Cha",
                "Pieter Naaijkens",
                "Bruno Nachtergaele"
            ],
            "title": "On the stability of charges in infinite quantum spin systems",
            "venue": "Communications in Mathematical",
            "year": 2020
        },
        {
            "authors": [
                "Kyle Kawagoe",
                "Michael Levin"
            ],
            "title": "Microscopic definitions of anyon data",
            "venue": "Phys. Rev. B 101,",
            "year": 2020
        },
        {
            "authors": [
                "Liang Wang",
                "Zhenghan Wang"
            ],
            "title": "In and around abelian anyon models",
            "venue": "Journal of Physics A: Mathematical and Theoretical",
            "year": 2020
        },
        {
            "authors": [
                "Pieter Naaijkens"
            ],
            "title": "Quantum spin systems on infinite lattices",
            "year": 2017
        },
        {
            "authors": [
                "Edward Witten"
            ],
            "title": "Why does quantum field theory in curved spacetime make sense? and what happens to the algebra of observables in the thermodynamic limit?",
            "year": 2021
        },
        {
            "authors": [
                "Michael Levin",
                "Xiao-Gang Wen"
            ],
            "title": "Fermions, strings, and gauge fields in lattice spin models",
            "venue": "Phys. Rev. B 67,",
            "year": 2003
        },
        {
            "authors": [
                "Anton Kapustin",
                "Lev Spodyneiko"
            ],
            "title": "Thermal hall conductance and a relative topological invariant of gapped two-dimensional systems",
            "venue": "Phys. Rev. B 101,",
            "year": 2020
        },
        {
            "authors": [
                "Parsa H. Bonderson"
            ],
            "title": "Non-abelian anyons and interferometry",
            "venue": "PhD thesis. Caltech",
            "year": 2012
        },
        {
            "authors": [
                "Maissam Barkeshli",
                "Hong-Chen Jiang",
                "Ronny Thomale",
                "Xiao-Liang Qi"
            ],
            "title": "Generalized kitaev models and extrinsic non-abelian twist defects",
            "venue": "Phys. Rev. Lett. 114,",
            "year": 2015
        },
        {
            "authors": [
                "Vlad Gheorghiu"
            ],
            "title": "Standard form of qudit stabilizer groups",
            "venue": "Physics Letters A 378,",
            "year": 2014
        },
        {
            "authors": [
                "Po-Shen Hsin",
                "Ho Tat Lam",
                "Nathan Seiberg"
            ],
            "title": "Comments on one-form global symmetries and their gauging in 3d and 4d",
            "venue": "SciPost Phys. 6,",
            "year": 2019
        },
        {
            "authors": [
                "Yuting Hu",
                "Yidun Wan",
                "Yong-Shi Wu"
            ],
            "title": "Twisted quantum double model of topological phases in two dimensions",
            "venue": "Phys. Rev. B",
            "year": 2013
        },
        {
            "authors": [
                "Anton Kapustin",
                "Natalia Saulina"
            ],
            "title": "Topological boundary conditions in abelian chern\u2013simons theory",
            "venue": "Nuclear Physics B 845,",
            "year": 2011
        },
        {
            "authors": [
                "Justin Kaidi",
                "Zohar Komargodski",
                "Kantaro Ohmori",
                "Sahand Seifnashri",
                "Shu- Heng Shao"
            ],
            "title": "Higher central charges and topological boundaries in 2+1-dimensional TQFTs",
            "venue": "SciPost Phys. 13,",
            "year": 2022
        },
        {
            "authors": [
                "Sam Roberts",
                "Dominic J. Williamson"
            ],
            "title": "3-fermion topological quantum computation",
            "year": 2020
        },
        {
            "authors": [
                "Clay Cordova",
                "Po-Shen Hsin",
                "Nathan Seiberg"
            ],
            "title": "Global Symmetries, Counterterms, and Duality in Chern-Simons Matter Theories with Orthogonal Gauge Groups",
            "venue": "SciPost Phys. 4,",
            "year": 2018
        },
        {
            "authors": [
                "Xie Chen",
                "Zheng-Cheng Gu",
                "Xiao-Gang Wen"
            ],
            "title": "Local unitary transformation, long-range quantum entanglement, wave function renormalization, and topological order",
            "venue": "Phys. Rev. B",
            "year": 2010
        },
        {
            "authors": [
                "Alexei Davydov",
                "Michael M\u00fcger",
                "Dmitri Nikshych",
                "Victor Ostrik"
            ],
            "title": "The Witt group of non-degenerate braided fusion categories",
            "venue": "Journal fur die Reine und Angewandte Mathematik",
            "year": 2013
        },
        {
            "authors": [
                "Alexei Davydov",
                "Dmitri Nikshych",
                "Victor Ostrik"
            ],
            "title": "On the structure of the Witt group of braided fusion categories",
            "venue": "Selecta Mathematica, New Series",
            "year": 2013
        },
        {
            "authors": [
                "Wilbur Shirley",
                "Yu-An Chen",
                "Arpit Dua",
                "Tyler D. Ellison",
                "Nathanan Tantivasadakarn",
                "Dominic J. Williamson"
            ],
            "title": "Three-dimensional quantum cellular automata from chiral semion surface topological order and beyond",
            "venue": "PRX Quantum 3,",
            "year": 2022
        },
        {
            "authors": [
                "Andreas Bauer"
            ],
            "title": "Disentangling modular walker-wang models via fermionic invertible boundaries",
            "venue": "Phys. Rev. B 107,",
            "year": 2023
        },
        {
            "authors": [
                "Jeongwan Haah",
                "Lukasz Fidkowski",
                "Matthew B. Hastings"
            ],
            "title": "Nontrivial quantum cellular automata in higher dimensions",
            "venue": "Communications in Mathematical Physics 398,",
            "year": 2023
        },
        {
            "authors": [
                "Jeongwan Haah"
            ],
            "title": "Clifford quantum cellular automata: Trivial group in 2d and witt group in 3d",
            "venue": "Journal of Mathematical Physics",
            "year": 2021
        },
        {
            "authors": [
                "Jeongwan Haah"
            ],
            "title": "Topological phases of unitary dynamics: Classification in clifford category",
            "year": 2022
        },
        {
            "authors": [
                "Theo Johnson-Freyd",
                "David Reutter"
            ],
            "title": "Minimal nondegenerate extensions",
            "venue": "J. Amer. Math. Soc",
            "year": 2023
        },
        {
            "authors": [
                "Alexei Kitaev",
                "Liang Kong"
            ],
            "title": "Models for Gapped Boundaries and Domain Walls",
            "venue": "Communications in Mathematical Physics 313,",
            "year": 2012
        },
        {
            "authors": [
                "Daniel Gottesman",
                "Isaac L. Chuang"
            ],
            "title": "Demonstrating the viability of universal quantum computation using teleportation and single-qubit operations",
            "venue": "Nature 402,",
            "year": 1999
        },
        {
            "authors": [
                "Fernando Pastawski",
                "Beni Yoshida"
            ],
            "title": "Fault-tolerant logical gates in quantum error-correcting codes",
            "venue": "Phys. Rev. A 91,",
            "year": 2015
        },
        {
            "authors": [
                "Konstantinos Roumpedakis",
                "Sahand Seifnashri",
                "Shu-Heng Shao"
            ],
            "title": "Higher gauging and non-invertible condensation defects",
            "venue": "Communications in Mathematical Physics 401,",
            "year": 2023
        },
        {
            "authors": [
                "M. Rahul"
            ],
            "title": "Nandkishore and Michael Hermele. \u201cFractons",
            "venue": "Annual Review of Condensed Matter Physics 10,",
            "year": 2019
        },
        {
            "authors": [
                "Aleksander Kubica",
                "Michael Vasmer"
            ],
            "title": "Single-shot quantum error correction with the three-dimensional subsystem toric code",
            "venue": "Nature Communications",
            "year": 2022
        },
        {
            "authors": [
                "Theo Johnson-Freyd"
            ],
            "title": "3+1)d topological orders with only a Z2-charged particle",
            "year": 2011
        },
        {
            "authors": [
                "Lukasz Fidkowski",
                "Jeongwan Haah",
                "Matthew B. Hastings"
            ],
            "title": "Gravitational anomaly of (3 + 1)-dimensional \ud875\udfcb2 toric code with fermionic charges and fermionic loop self-statistics",
            "venue": "Phys. Rev. B 106,",
            "year": 2022
        },
        {
            "authors": [
                "Yu-An Chen",
                "Po-Shen Hsin"
            ],
            "title": "Exactly solvable lattice Hamiltonians and gravitational anomalies",
            "venue": "SciPost Phys. 14,",
            "year": 2023
        },
        {
            "authors": [
                "David Aasen",
                "Zhenghan Wang",
                "Matthew B. Hastings"
            ],
            "title": "Adiabatic paths of hamiltonians, symmetries of topological order, and automorphism codes",
            "venue": "Phys. Rev. B 106,",
            "year": 2022
        },
        {
            "authors": [
                "Margarita Davydova",
                "Nathanan Tantivasadakarn",
                "Shankar Balasubramanian"
            ],
            "title": "Floquet codes without parent subsystem codes",
            "venue": "PRX Quantum 4,",
            "year": 2023
        },
        {
            "authors": [
                "Markus S. Kesselring",
                "Julio C. Magdalena de la Fuente",
                "Felix Thomsen",
                "Jens Eisert",
                "Stephen D. Bartlett",
                "Benjamin J. Brown"
            ],
            "title": "Anyon condensation and the color code",
            "venue": "Accepted in Quantum 2023-10-10,",
            "year": 2023
        },
        {
            "authors": [
                "Adithya Sriram",
                "Tibor Rakovszky",
                "Vedika Khemani",
                "Matteo Ippoliti"
            ],
            "title": "Topology, criticality, and dynamically generated qubits in a stochastic measurement-only kitaev model",
            "venue": "Phys. Rev. B 108,",
            "year": 2023
        },
        {
            "authors": [
                "Ali Lavasani",
                "Zhu-Xi Luo",
                "Sagar Vijay"
            ],
            "title": "Monitored quantum dynamics and the kitaev spin liquid",
            "year": 2022
        },
        {
            "authors": [
                "Sanjay Moudgalya",
                "Olexei I. Motrunich"
            ],
            "title": "Hilbert space fragmentation and commutant algebras",
            "venue": "Phys. Rev. X 12,",
            "year": 2022
        },
        {
            "authors": [
                "Sanjay Moudgalya",
                "Olexei I. Motrunich"
            ],
            "title": "Exhaustive characterization of quantum many-body scars using commutant algebras",
            "year": 2022
        },
        {
            "authors": [
                "Sanjay Moudgalya",
                "Olexei I. Motrunich"
            ],
            "title": "From symmetries to commutant algebras in standard hamiltonians",
            "year": 2022
        },
        {
            "authors": [
                "Julia Wildeboer",
                "Thomas Iadecola",
                "Dominic J. Williamson"
            ],
            "title": "Symmetryprotected infinite-temperature quantum memory from subsystem codes",
            "venue": "PRX Quantum 3,",
            "year": 2022
        },
        {
            "authors": [
                "Sergey Bravyi",
                "Barbara Terhal"
            ],
            "title": "A no-go theorem for a two-dimensional selfcorrecting quantum memory based on stabilizer codes",
            "venue": "New Journal of Physics",
            "year": 2009
        },
        {
            "authors": [
                "Jeongwan Haah",
                "John Preskill"
            ],
            "title": "Logical-operator tradeoff for local quantum codes",
            "venue": "Phys. Rev. A 86,",
            "year": 2012
        },
        {
            "authors": [
                "Marvin Qi",
                "Leo Radzihovsky",
                "Michael Hermele"
            ],
            "title": "Fracton phases via exotic higher-form symmetry-breaking",
            "venue": "Annals of Physics 424,",
            "year": 2021
        },
        {
            "authors": [
                "Allen Hatcher"
            ],
            "title": "Algebraic topology",
            "year": 2002
        },
        {
            "authors": [
                "Chenjie Wang",
                "Michael Levin"
            ],
            "title": "Topological invariants for gauge theories and symmetry-protected topological phases",
            "venue": "Phys. Rev. B",
            "year": 2015
        },
        {
            "authors": [
                "Kevin Walker",
                "Zhenghan Wang"
            ],
            "title": "3+1)-TQFTs and topological insulators",
            "venue": "Frontiers of Physics 7,",
            "year": 2012
        },
        {
            "authors": [
                "Clement Delcamp",
                "Apoorv Tiwari"
            ],
            "title": "From gauge to higher gauge models of topological phases",
            "venue": "Journal of High Energy Physics2018",
            "year": 2018
        }
    ],
    "sections": [
        {
            "text": "relations and those without a gapped boundary to the vacuum. Our work both extends the classification of two-dimensional Pauli topological subsystem codes to systems of compositedimensional qudits and establishes that the classification is at least as rich as that of Abelian anyon theories. We exemplify the construction with topological subsystem codes defined on four-dimensional qudits based on the Z(1)4 anyon theory with degenerate braiding relations and the chiral semion theory \u2013 both of which cannot be captured by topological stabilizer codes. The construction proceeds by \u201cgauging out\u201d certain anyon types of a topological stabilizer code. This amounts to defining a gauge group generated by the stabilizer group of the topological stabilizer code and a set of anyonic string operators for the anyon types that are gauged out. The resulting topological subsystem code is characterized by an anyon theory containing a proper subset of the anyons of the topological stabilizer code. We thereby show that every Abelian anyon theory is a subtheory of a stack of toric codes and a certain family of twisted quantum doubles that generalize the double semion anyon theory. We further prove a number of general statements about the logical operators of translation invariant topological subsystem codes and define their associated anyon theories in terms of higher-form symmetries.\nTyler D. Ellison: tyler.ellison@yale.edu\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 1\nar X\niv :2\n21 1.\n03 79\n8v 2\nContents"
        },
        {
            "heading": "1 Introduction 3",
            "text": ""
        },
        {
            "heading": "2 Background 5",
            "text": "2.1 Primer on composite-dimensional qudits . . . . . . . . . . . . . . . . . . . 5 2.2 Review of subsystem codes . . . . . . . . . . . . . . . . . . . . . . . . . . . 6"
        },
        {
            "heading": "3 Topological subsystem codes 9",
            "text": "3.1 Definition of topological subsystem codes . . . . . . . . . . . . . . . . . . . 10 3.2 Anyon theories of topological subsystem codes . . . . . . . . . . . . . . . . 13\n4 Z(1)4 subsystem code 24 4.1 Definition of the subsystem code . . . . . . . . . . . . . . . . . . . . . . . . 25 4.2 Construction of the subsystem code . . . . . . . . . . . . . . . . . . . . . . 31"
        },
        {
            "heading": "5 Chiral semion subsystem code 36",
            "text": "5.1 Definition of the subsystem code . . . . . . . . . . . . . . . . . . . . . . . . 36 5.2 Construction of the subsystem code . . . . . . . . . . . . . . . . . . . . . . 38"
        },
        {
            "heading": "6 Subsystem codes from general Abelian anyon theories 41",
            "text": "6.1 General Abelian anyon theories . . . . . . . . . . . . . . . . . . . . . . . . 42 6.2 Construction of twisted quantum doubles . . . . . . . . . . . . . . . . . . . 43 6.3 Gauging out anyon types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48"
        },
        {
            "heading": "7 Further examples of topological subsystem codes 54",
            "text": "7.1 Z(0)2 subsystem code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 7.2 Z(1)2 subsystem code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 7.3 Z(1)N subsystem codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 7.4 Three-fermion subsystem code . . . . . . . . . . . . . . . . . . . . . . . . . 58 7.5 Zp \u00d7 Zp2 subsystem code . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61"
        },
        {
            "heading": "8 Discussion 62",
            "text": ""
        },
        {
            "heading": "A Correcting and cleaning topological subsystem codes 68",
            "text": "B Anyonic 1-form symmetries 74"
        },
        {
            "heading": "C Background on cellular homology 77",
            "text": ""
        },
        {
            "heading": "D Fluxes in topological subsystem codes 79",
            "text": ""
        },
        {
            "heading": "E Detectable anyon types are opaque 80",
            "text": "Accepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 2"
        },
        {
            "heading": "F Nontrivial bare logical operators and nonlocal stabilizers 83",
            "text": ""
        },
        {
            "heading": "G Background on twisted quantum doubles 92",
            "text": ""
        },
        {
            "heading": "H Abelian twisted quantum doubles from Walker-Wang models 94",
            "text": ""
        },
        {
            "heading": "1 Introduction",
            "text": "Topological quantum error-correcting codes are integral to many of the leading approaches to scalable, fault-tolerant quantum computation [1\u20135]. This is a consequence of their compatibility with spatially local architectures \u2013 requiring only local checks to protect against the local errors that arise from coupling to the environment. Moreover, topological quantum error-correcting codes exhibit a number of other desirable properties, including high error thresholds [2, 6] and natural sets of protected logical gates [5, 7\u20139].\nThe beneficial properties of topological quantum error-correcting codes are fundamentally tied to the physical properties of the underlying topological order. While the classification of topological phases of matter in two spatial dimensions is well developed [10], the vast majority of work on two-dimensional topological quantum error-correcting codes has focused on the simplest of topological orders \u2013 namely, those that are locally equivalent to decoupled copies of Kitaev\u2019s toric code (TC). This is, to a large extent, due to the effectiveness and simplicity of the Pauli stabilizer formalism, with which the error-correcting properties of the TC can be readily analyzed [2, 5, 11, 12].\nThis makes the classification of topological quantum error-correcting codes described within the Pauli stabilizer formalism a problem of both fundamental and practical interest. Such error-correcting codes encompass both stabilizer codes and subsystem codes \u2013 wherein the quantum information is stored in only a subsystem of the code space [13\u2013 18]. As for the classification of stabilizer codes, it was shown in Ref. [17] that, under a technical assumption, all translation invariant (TI) Pauli topological stabilizer codes on systems of qubits are locally equivalent to copies of the TC. The technical assumption was later removed in Ref. [19], and it was proven that, more generally, TI Pauli topological stabilizer codes on qudits of prime dimension p are equivalent to copies of the Zp TC. More recently, new families of TI Pauli topological stabilizer codes were introduced on composite-dimensional qudits, which go beyond copies of the TC, and, in fact, realize all (bosonic)1 Abelian anyon theories that admit a gapped boundary to the vacuum [20]. This demonstrates that the classification of Pauli topological stabilizer codes is significantly richer for the case of composite-dimensional qudits.\nThe classification of Pauli topological subsystem codes [18] has received less attention,\n1Throughout the text, we implicitly consider bosonic anyon theories, i.e., where the operator algebra of the underlying degrees of freedom exhibit bosonic commutation relations, such as the case for qudits.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 3\ndespite subsystem codes offering clear benefits over stabilizer codes, such as low-weight checks, which can improve the efficiency of error detection, and the measurement of gauge operators, which can provide additional information for decoding, resulting in, for example, single-shot error correction [21\u201325, 25\u201330]. In Refs. [15\u201318], it was found that Pauli topological subsystem codes built from qubits can be characterized by anyon theories that are distinct from those of Pauli topological stabilizer codes. In particular, Pauli topological subsystem codes can be characterized by non-modular anyon theories (i.e., those with degenerate braiding relations) as well as chiral anyon theories (i.e., those with no possible gapped boundary to the vacuum). Therefore, Pauli topological subsystem codes promise to capture an even wider class of Abelian anyon theories than stabilizer codes. This naturally leads us to the question: what new classes of Pauli topological subsystem codes are made possible by considering systems of composite-dimensional qudits \u2013 furthermore, do they capture all possible Abelian anyon theories?\nIn this work, we establish that the classification of Pauli topological subsystem codes is indeed at least as rich as the classification of Abelian anyon theories. We do so by constructing a Pauli topological subsystem code on composite-dimensional qudits for every Abelian anyon theory,2 including non-modular anyon theories and chiral anyon theories. To construct the codes, we leverage the Pauli topological stabilizer models of Ref. [20] and a process we refer to as gauging out anyon types (see also Ref. [17]). At the level of the anyon theory, gauging out a set of anyon types removes all of the anyon types that have nontrivial braiding relations with the gauged out anyon types. This yields Pauli topological subsystem codes, whose anyon theories are proper subtheories of the parent stabilizer codes\u2019 anyon theories. Therefore, our work lays the foundation for a complete classification of Pauli topological subsystem codes in two dimensions. Combined with Ref. [20], it initiates the investigation of topological quantum error correction with arbitrary Abelian anyon theories \u2013 all within the Pauli stabilizer formalism.\nThe paper is organized as follows. In Section 2, we establish basic definitions required to discuss Pauli operators on composite-dimensional qudits, and recount the definition of subsystem codes. In the following section, Section 3, we define Pauli topological subsystem codes for qudits of arbitrary finite dimension and argue that they can be characterized by Abelian anyon theories. In Section 4, we introduce an example of a Pauli topological subsystem code based on the Z(1)4 Abelian anyon theory, which has degenerate braiding relations. In Section 5, we introduce another example of a Pauli topological subsystem code, this one based on the chiral semion anyon theory, which does not admit a gapped boundary condition. In Section 6, we present our general construction of Pauli topological subsystem codes based on arbitrary Abelian anyon theories. Subsequently, in Section 7, we present further examples of Pauli topological subsystem codes, including one based\n2Here, and throughout the text, we use \u201canyon theory\u201d to broadly refer to braided fusion categories, as opposed to modular tensor categories in particular.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 4\non a Z3 \u00d7 Z9 Abelian anyon theory, which has not appeared in the literature before, to the best of our knowledge. Finally, in Section 8, we summarize our findings and discuss the connection between the classification of topological subsystem codes and topological phases of matter.\nThe results in the main text are supplemented by a number of appendices. We prove a correctability condition and a cleaning lemma for Pauli topological subsystem codes, in Appendix A. In Appendix B, we describe the concept of a 1-form symmetry with an associated anyon theory. In Appendix C, we review the concepts from cellular homology that are used in our description of 1-form symmetries. In Appendix D, we describe the concept of a flux in a topological subsystem code, following Ref. [18]. In Appendix E, we provide a proof of the technical statement that detectable anyon types are opaque. In Appendix F, we then show that nontrivial bare logical operators and nonlocal stabilizers in Pauli topological subsystem codes are given by string operators that move anyon types around non-contractible paths. The final two appendices, Appendix G and H, cover the background material used in our general construction of topological subsystem codes."
        },
        {
            "heading": "2 Background",
            "text": "In this section, we define the algebra of Pauli operators on composite-dimensional qudits and review the definition of subsystem codes. We encourage readers that are familiar with these concepts to proceed to Section 3 for a definition of topological subsystem codes and a discussion of the anyon theories that characterize them."
        },
        {
            "heading": "2.1 Primer on composite-dimensional qudits",
            "text": "Composite-dimensional qudits are essential to the construction of the topological subsystem codes introduced in this work. Therefore, it is important that we generalize the usual notion of Pauli operators to composite-dimensional qudits. For a qudit of dimension N , we label the computational basis states by \u03b1 \u2208 ZN . The Pauli X and Pauli Z operators on the N -dimensional qudit can then be represented in the computational basis as:\nX \u2261 \u2211\n\u03b1\u2208ZN |\u03b1 + 1\u27e9\u27e8\u03b1|, Z \u2261 \u2211 \u03b1\u2208ZN \u03c9\u03b1|\u03b1\u27e9\u27e8\u03b1|, (1)\nwhere the addition is computed modulo N , and \u03c9 = e2\u03c0i/N . We further define a Pauli Y operator as:\nY \u2261 X \u2020Z\u2020 if N is odd,\n\u221a \u03c9X\u2020Z\u2020 if N is even.\n(2)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 5\nFor N = 2, this reproduces the familiar Pauli Y operator, given by Y = iXZ. It can then be checked that the Pauli operators satisfy the relations:\nXN = Y N = ZN = 1. (3)\nNote that the phase \u221a \u03c9 in Eq. (2) ensures that Y N = 1 for even-dimensional qudits. The commutation relations amongst the Pauli operators are given by:\nXY = \u03c9Y X, Y Z = \u03c9ZY, ZX = \u03c9XZ. (4)\nFor an odd-dimensional qudit, the full operator algebra is generated by the Pauli X and Pauli Z operators, while for an even-dimensional qudit, we need to include the Pauli Y operator or the phase \u221a \u03c9 in the generating set.\nFor systems of more than one qudit, we index the single-site Pauli operators by their corresponding sites. The single-site Pauli operators at different sites are taken to commute with one another, i.e., for any sites j and k with j \u0338= k, we have:\nXjYk = YkXj, YjZk = ZkYj, ZjXk = XkZj. (5)\nWe use the term \u201cPauli operator\u201d to refer to any product of finitely-many single-site Pauli operators, and we define the Pauli group P to be the group of Pauli operators. We say the support of a Pauli operator is the set of sites on which the Pauli operator acts nonidentically, and we define the weight of a Pauli operator P to be the number of qudits in the support of P . Finally, we say that a Pauli operator is local (or geometrically local) if its support can be contained within a constant-sized region."
        },
        {
            "heading": "2.2 Review of subsystem codes",
            "text": "The first step in defining a subsystem code is to specify a stabilizer group S. Recall that a stabilizer group is a group of mutually commuting Pauli operators with the property that the only element of S proportional to the identity is the identity itself. The stabilizer group defines the code space HC , which is, by convention, the mutual +1 eigenspace of the stabilizers:\nHC \u2261 {|\u03c8\u27e9 : S|\u03c8\u27e9 = |\u03c8\u27e9, \u2200S \u2208 S}. (6)\nThe Hilbert space H then decomposes into the direct sum:\nH = HC \u2295 H\u22a5C , (7)\nwhere H\u22a5C is the orthogonal complement of HC . For a subsystem code, quantum information is only stored in a subsystem of the code space, known as the logical subsystem. This is to say that the code space further factorizes as a tensor product of HG and HL:\nH = (HG \u2297 HL) \u2295 H\u22a5C , (8)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 6\nwhere HG is the gauge subsystem, and HL is the logical subsystem. Therefore, the second step in defining a subsystem code is to specify the subsystems HG and HL, as in Eq. (8). This is accomplished by defining a group of Pauli operators G, referred to as the gauge group. The only requirement of the gauge group is that its center, denoted by Z(G), is equivalent to the stabilizer group up to roots of unity:\nZ(G) \u221d S. (9)\nThis guarantees that the gauge operators, i.e., the elements of G, preserve the code space. The action of the gauge operators within the code space defines an algebra of Pauli X and Pauli Z operators on the gauge subsystem, which induces the factorization in Eq. (8) [31]. In other words, the group G/S is isomorphic to the group of Pauli operators on the gauge subsystem. We note that it is common to define the gauge group by a choice of generators, referred to as the gauge generators.\nThere are a few additional comments that we would like to make about this structure:\n(i) According to the condition in Eq. (9), the gauge group is almost sufficient to determine the structure of the subsystem code, since it specifies the stabilizer group\nup to a choice of phases. Therefore, a subsystem code can alternatively be defined by first specifying the gauge group, then choosing a stabilizer group consistent with Eq. (9). This is the approach used for the examples in this work.\n(ii) If the gauge group G is proportional to the stabilizer group S, then the gauge subsystem HG is trivial. This means that the logical subsystem and the code space are equivalent, and the subsystem code is equivalent to a stabilizer code defined by\nS. On the other hand, if the gauge group generates the full operator algebra of the code space, then HL is trivial. This is exemplified by the subsystem code in Section 7.2, based on the honeycomb model of Ref. [32].\n(iii) For systems of composite-dimensional qudits, the dimension of the logical subsystem\nmay differ from the dimensions of the physical qudits. Depending on the choice of S and G, the dimension of the logical subsystem can be any factor of the dimension of the full Hilbert space. For example, the logical subsystem of the Z(1)4 subsystem code in Section 4 is two-dimensional, despite being defined on four-dimensional physical qudits.\n(iv) The gauge group needs to include all of the requisite roots of unity to generate a\nrepresentation of the Pauli group. Throughout the text, we implicitly assume that the gauge group includes all U(1)-valued phases.\nNext, we discuss the logical operators of subsystem codes. Similar to stabilizer codes, we refer to any Pauli operator that preserves the code space as a logical operator. These\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 7\noperators generate the group ZP(S), where ZP(S) denotes the centralizer of the stabilizer group S over the Pauli group P .3 We say a logical operator is nontrivial if it acts nonidentically on the logical subsystem. The nontrivial logical operators are given by the set ZP(S) \u2212 G, where the gauge operators have been subtracted, since by construction, they act as the identity on HL. Up to roots of unity, the group ZP(S)/G is isomorphic to the group of Pauli operators on the logical subsystem. Thus, we say that the elements of ZP(S) represent Pauli operators on the logical subsystem. It is convenient to further distinguish between logical operators that act nontrivially on the gauge subsystem and those that are fully supported on the logical subsystem. We define the bare logical operators to be the subgroup of logical operators that act as the identity on the gauge subsystem. The group of bare logical operators L is given explicitly by:\nL \u2261 ZP(G), (10)\ni.e., it is the group of Pauli operators that commute with the gauge group. Up to roots of unity, the group L/S is isomorphic to the group of Pauli operators on the logical subsystem. Thus, the Pauli operators on HL can be represented by bare logical operators. We note that the elements of ZP(S) are sometimes referred to as dressed logical operators, since they differ from bare logical operators by \u201cdressing\u201d them with products of gauge operators.\nAt this point, we have defined all of the essential structures of subsystem codes. This might motivate one to ask: what have we gained by sacrificing a portion of the code space to the gauge subsystem? In fact, the additional structure leads to two notable advantages over stabilizer codes. The first is that the stabilizer syndrome \u2013 i.e., the set of measurement outcomes of the stabilizers \u2013 can be inferred from measurements of the gauge generators.4 This can simplify the detection of errors, if, for example, the gauge generators have lower weights than the generators of the stabilizer group. This is exemplified by the subsystem toric code of Ref. [26], where the stabilizer syndrome can be deduced from measurements of three-body gauge operators \u2013 as opposed to the six-body measurements required to measure the stabilizers directly. We emphasize that the order in which gauge generators are measured requires special care, however, since they do not commute with one another in general.5\n3In other words, ZP(S) is the subgroup of the Pauli operators in P that commute with every stabilizer of S.\n4Note that, although the gauge operators may be non-Hermitian for systems of qudits, the eigenspaces of each gauge operator are mutually orthogonal. Therefore, we can effectively measure a gauge operator G by instead measuring the sum of projectors: \u2211 \u03b1 \u03b1\u03a0\u03bb\u03b1 , where \u03b1 \u2208 Z indexes the eigenvalues \u03bb\u03b1 of G, and \u03a0\u03bb\u03b1 is a projector onto the \u03bb\u03b1 eigenspace. 5See the appendix of Ref. [22] for sufficient condition for inferring the stabilizer syndrome from the measurements of the gauge generators.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 8\nThe second noteworthy advantage of subsystem codes is the ability to gauge fix [13]. Formally, we gauge fix an Abelian subgroup F of the gauge group G by defining a new subsystem code, whose gauge group is equal to ZG(F). We thus keep all of the elements in G that commute with F . Since F is Abelian, it belongs to the center of ZG(F). This means that, up to roots of unity, F is in the stabilizer group of the new subsystem code. Consequently, gauge fixing amounts to adding F to the stabilizer group and removing any of the gauge operators that fail to commute with F . This is a natural procedure to consider, since in the process of determining the stabilizer syndrome, we make consecutive measurements of a commuting set of gauge operators. The effect of measuring an Abelian subgroup of gauge operators F is the same as gauge fixing F , up to multiplying the gauge operators by roots of unity depending on the measurement outcomes.\nOne benefit of gauge fixing is that it provides a general framework for understanding code deformation and lattice surgery [27]. In particular, gauge fixing can be used to switch between codes with complementary fault-tolerant gate sets \u2013 thereby enabling universal fault-tolerant quantum computation by appropriately switching between the gauge fixed codes [23\u201325, 30]. Moreover, by scheduling the measurements of gauge operators carefully, the gauge fixed codes can lead to improved error thresholds [33] and dynamically generated logical qudits [34\u201338].\nAs described below, another feature of subsystem codes is that they are characterized by a wider range of anyon theories than stabilizer codes. In this work, we construct such subsystem codes using a general process we call \u201cgauging out\u201d. Abstractly, gauging out maps a subsystem code to another subsystem code using a group of Pauli operators F , which needs not be Abelian. More specifically, given a gauge group G and a group of Pauli operators F to be gauged out, we define a new gauge group G \u2032 generated by G and F , i.e., G \u2032 \u2261 \u27e8G,F\u27e9. In contrast to gauge fixing, F does not need to be a subgroup of G, nor does it need to be Abelian. Note that Z(G \u2032) \u2282 Z(G), so up to phases, the stabilizer group of the new subsystem code is contained in the stabilizer group of the original subsystem code. In all of the examples in this text, G is Abelian, so we use gauging out to construct a subsystem code from a stabilizer code."
        },
        {
            "heading": "3 Topological subsystem codes",
            "text": "The focus of this work is on a particular class of subsystem codes \u2013 the topological subsystem codes. These feature gauge groups that can be generated by (geometrically) local6 gauge operators and logical subsystems that are robust to local errors. Such properties are desirable for quantum error correcting codes, given that many of the leading quantum computing platforms are limited to local connectivity and suffer from local errors. In this\n6In this text, we use local to mean geometrically local, i.e., the support of the gauge generators can be contained within a constant-sized disk.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 9\nsection, we begin by defining topological subsystem codes, following Refs. [16\u201318]. Similar to Refs. [16\u201318], we consider topological subsystem codes that are translation invariant (TI) and defined on two-dimensional lattices. In the second part of this section, we argue that topological subsystem codes can be characterized by Abelian anyon theories. We note that the discussion on Abelian anyon theories agrees with that of Ref. [18] for system of qubits. In contrast to Refs. [16\u201318], throughout this section, we make no assumptions about the dimensions of the physical qudits, see Section 2.1."
        },
        {
            "heading": "3.1 Definition of topological subsystem codes",
            "text": "We now define TI topological subsystem codes in two-dimensions. We point out that the definition can be generalized straightforwardly to higher dimensions. However, we restrict to two-dimensional topological subsystem codes, since these are naturally characterized by Abelian anyon theories. It is also worth noting that the definition of TI topological subsystem codes below is a direct generalization of the definition of TI topological stabilizer codes, given in Ref. [19]. In particular, we recover the definition in Ref. [19] if the gauge group is proportional to the stabilizer group.\nDefinition 1 (Translation invariant topological subsystem code) A two-dimensional translation invariant topological subsystem code is a subsystem code defined on a two-dimensional lattice with the following three properties:\n(i) Translation invariant: For any gauge operator G, every translate of G belongs\nto the gauge group.\n(ii) Local: The gauge group G admits a set of generators whose supports have linear size less than some constant-sized length \u2113G.\n(iii) Topological: On an infinite plane, the stabilizer group S admits a set of generators whose supports have linear size less than a constant-sized length \u2113S, and ZP(S) \u221d G.7\nBefore discussing properties (ii) and (iii) of TI topological subsystem codes, we would like to emphasize that translation invariance is not as restrictive as it might seem. The quantum error correcting properties of topological subsystem codes and the discussion of anyon theories in the next section hold even after conjugating the gauge group by an arbitrary constant-depth Clifford circuit \u2013 which may explicitly break the translation symmetry. Therefore, many of our results also apply to subsystem codes that differ from TI topological subsystem codes by a constant-depth Clifford circuit. In Section 8, we describe how twist defects and boundaries can be further introduced to topological subsystem codes. These may break the translation invariance, but they preserve locality and, in\n7Here, ZP(S) is the centralizer of S over the Pauli group P, i.e. it is the group of Pauli operators that commute with S.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 10\nsome cases, the topological property. Intuitively, TI topological subsystem codes capture the universal bulk properties of topological subsystem codes, far from the defects and boundaries.\nWe now turn to properties (ii) and (iii) in the definition above. First, the local property ensures that the stabilizer syndrome can be inferred from local measurements of the gauge generators. It is important to note that, although the gauge group is required to have a set of local generators, the stabilizer group itself does not need to admit a set of local generators (except on an infinite plane). As illustrated by the example in Section 4, topological subsystem codes may indeed have stabilizers that cannot be generated by local stabilizers. We refer to such stabilizers as nonlocal stabilizers, and note that their existence is a key difference between topological subsystem codes and topological stabilizer codes. Second, the topological property of topological subsystem codes tells us that there are no logical operators or nonlocal stabilizers on an infinite plane. This agrees with our intuition that the logical operators of topological subsystem codes should be supported on topologically nontrivial regions \u2013 such as a path that wraps around a non-contractible loop of the torus.\nThe topological property also tells us about the errors that can be detected and corrected by topological subsystem codes. To unpack the topological property, we define the subgroup of locally generated stabilizers, denoted by S\u0303. In particular, every element of S\u0303 can be generated by geometrically local stabilizers. As noted above, the subgroup S\u0303 may differ from the full stabilizer group S, for topological subsystem codes. We define a code space HC\u0303 associated to S\u0303 as:\nHC\u0303 \u2261 {|\u03c8\u27e9 : S|\u03c8\u27e9 = |\u03c8\u27e9, \u2200S \u2208 S\u0303}. (11)\nNotably, the nonlocal stabilizers, i.e., the elements of S \u2212 S\u0303, are left unfixed in HC\u0303 . With this, we can specify the set of correctable errors for a TI topological subsystem code on an L\u00d7L torus. We let E be the set of Pauli operators supported on regions whose linear size is less than L/2 \u2212 \u2113S. We prove in Appendix A that, for any E1, E2 \u2208 E, the following condition is satisfied for some gauge operator G:\n\u03a0C\u0303E \u2020 1E2\u03a0C\u0303 \u221d G\u03a0C\u0303 , (12)\nwhere \u03a0C\u0303 is the projector onto the code space HC\u0303 . We point out that this property is stronger than the correctability condition of Refs. [13, 14], since here, we have replaced the projector onto the code space HC with a projector onto HC\u0303 . As such, the condition in Eq. (12) guarantees that Pauli operators supported entirely within a region of linear size L\u2212 \u2113S create errors that can be detected and corrected using the measurement outcomes of the local stabilizers (see Appendix A).\nThe correctability condition in Eq. (12) also implies that the nontrivial bare logical operators and nonlocal stabilizers cannot be fully supported in regions whose linear size\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 11\nis less than L\u2212 \u2113S. In Appendix A, we prove a cleaning lemma for topological subsystem codes, which shows that the nontrivial bare logical operators and nonlocal stabilizers on a torus can be redefined by elements of S\u0303 so as to be supported on the non-contractible region pictured in Fig. 1. Further, in Appendix F, we argue that the Pauli operators on the logical subsystem can be represented by string operators wrapped around non-contractible paths of the torus.\nMoving forward, we find it instructive to note that a topological subsystem code defines a family of quasi-local Hamiltonians, the terms of which are the gauge operators weighted by coefficients whose strengths are bounded by a function of the size of the support. More explicitly, the quasi-local Hamiltonians are of the form:\nH{JG} = \u2212 \u2211 G\u2208G JGG+ h.c., (13)\nfor some choice of coefficients {JG}, whose strengths are bounded as:\n|JG| \u2264 Je\u2212\u00b5l(G). (14)\nHere, J, \u00b5 > 0 are a choice of constants that are independent of the system size, and l(G) is the linear size of the support of G. This is to say that the strength of the interaction JG decays exponentially with the range of the interaction l(G). By varying the coefficients {JG} of the Hamiltonian in Eq. (13), we obtain the full parameter space of quasi-local Hamiltonians associated to the topological subsystem code. In general, the elements of G do not commute with one another, so the Hamiltonians might not be exactly-solvable. Therefore, unlike topological stabilizer codes, which correspond to a single exactly-solvable local Hamiltonian, topological subsystem codes generally correspond to a parameter space\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 12\nof frustrated Hamiltonians \u2013 with distinct phases of matter and phase transitions. Note that we consider quasi-local Hamiltonians here, since those give a physically meaningful set of Hamiltonians. More generally, one could consider nonlocal or k-local Hamiltonians associated to subsystem codes.\nThe elements of the bare logical group L can be interpreted as symmetries, or conserved quantities, common to every Hamiltonian in the parameter space. This is because, by definition [Eq. (10)], the elements of L commute with the elements of G and thus commute with the Hamiltonians. The nonlocal conserved quantities associated to nontrivial bare logical operators then guarantee that there are degenerate eigenspaces in which quantum information can be stored \u2013 since the nontrivial bare logical operators come in noncommuting pairs. In contrast to topological stabilizer codes, the quantum information is not necessarily encoded in the ground-state subspace. For the topological subsystem codes defined in this work, many of the conserved quantities of L are reminiscent of loops of anyon string operators in topological orders. This motivates characterizing topological subsystem codes by anyon theories, as elaborated on in the next section.\nWe also note that gauge fixing, as described at the end of Section 2.2, admits a natural interpretation in terms of the family of HamiltoniansH{JG}. To see this, we consider gauge fixing an Abelian subgroup F of the gauge group G. After gauge fixing, the system is left in a definite eigenstate of the operators in F . For example, we can consider the case in which the system is in a mutual +1 eigenstate of the gauge fixed operators. This amounts to taking the coefficient JG to infinity for any G \u2208 F .8 We can then study the resulting Hamiltonian using perturbation theory. Intuitively, the terms of the effective Hamiltonian commute with the elements of F and generate a group proportional to ZP(F), which is precisely the gauge group after gauge fixing. We caution that, in general, the subsystem code obtained from gauge fixing need not satisfy the properties of a topological subsystem code in Definition 1.9"
        },
        {
            "heading": "3.2 Anyon theories of topological subsystem codes",
            "text": "In what follows, we characterize two-dimensional topological subsystem codes by Abelian anyon theories. This is a subtle task, given that topological subsystem codes correspond to a parameter space of Hamiltonians H{JG}, which may exhibit different topological orders based on the parameters {JG}. The main goal of this section is to clarify the sense in which a topological subsystem code can be characterized by a single anyon theory. After reviewing the standard description of anyon theories in terms of the local excitations of a gapped Hamiltonian, we formulate the anyon theories of topological subsystem codes more\n8This can be generalized to other eigenspaces by adding appropriate roots of unity to the coefficients. 9For instance, the topological subsystem code may have a nonlocal stabilizer on a torus. If the nonlocal\nstabilizer does not belong to F , then it becomes a nonlocal gauge operator after gauge fixing.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 13\nabstractly \u2013 in terms of certain homomorphisms from the gauge group to U(1), which we refer to as gauge twists. We find that, heuristically, the anyon theory of a topological subsystem code is given by a subset of anyons common to all of the gapped Hamiltonians H{JG} in the parameter space. In Appendix B, we give an alternative description of the anyon theory by considering the 1-form symmetries generated by the conserved quantities of L.\nAt an informal level, anyons are local excitations of a fixed gapped Hamiltonian.10 The first step in defining an anyon theory is to then organize the anyons into superselection sectors, where two anyons belong to the same superselection sector, if one can be constructed from the other by a local operator [32]. It is often assumed that the superselection sectors can be labeled by a finite set of anyon types {1, a, b, c, . . .}, where 1 labels the superselection sector containing the trivial excitation (i.e., no excitation). After defining the anyon types, we can specify the fusion rules. Two or more anyons at the same location can be fused together by considering the superselection sector of the composite excitation. We denote the fusion product of the anyon types a and b as a\u00d7b or simply ab. For Abelian anyon theories, which are the focus of this work, the anyon types generate an Abelian group under fusion.\nThe remaining data needed to specify an anyon theory are the so-called F - and Rsymbols. The F -symbol is determined by the associativity of fusion, and the R-symbol encodes the braiding relations of the anyons and the exchange statistics \u2013 i.e., the phase obtained by swapping two anyon types of the same type [32, 42]. For Abelian anyon theories, the F - and R-symbols are fully determined by the exchange statistics [43]. Thus, Abelian anyon theories are characterized by just two pieces of data: (i) an Abelian group A, specifying the anyon types and their fusion rules, and (ii) a function \u03b8 from A to U(1), encoding the U(1)-valued exchange statistics of the anyons. An Abelian anyon theory A is hence defined by a pair (A, \u03b8). We give a general parameterization of this data in Section 6.\nGiven that topological subsystem codes correspond to a family of Hamiltonians H{JG}, the definition of anyon types in terms of local excitations is, in general, ambiguous. We instead define the anyon types of topological subsystem codes more abstractly, by defining the concept of a gauge twist.\nDefinition 2 (Gauge twist) Letting G be the gauge group of a TI Pauli topological subsystem code, a gauge twist is a group homomorphism \u0393 : G \u2192 U(1), such that \u0393(G) = 1 for all but finitely many G in some set of independent local generators of G.\nWe note that, given that every gauge twist \u0393 is a homomorphism, if a gauge operator G has order q, then \u0393(G) satisfies \u0393(G)q = 1. Consequently, \u0393(G) = \u03c9, for some qth root of unity \u03c9 \u2208 U(1). We also note that gauge twists are local on an infinite plane, in the\n10We refer to Refs. [39\u201341] for a more formal definition of anyons.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 14\nsense that, the set of local gauge generators for which \u0393(G) \u0338= 1 can be contained within a constant-sized region.\nA special class of gauge twists are those that can be reproduced from the commutation relations of a Pauli operator P . For any Pauli operator P , we define the gauge twist \u03a6P as the commutator with P , i.e., for any gauge operator G:\n\u03a6P (G) \u2261 PGP \u2020G\u2020. (15)\nThe function \u03a6P is a group homomorphism, since for any G,G\u2032 \u2208 G, it satisfies:\n\u03a6P (G)\u03a6P (G\u2032) = ( PGP \u2020G\u2020 ) ( PG\u2032P \u2020G\u2032\u2020 ) = PGG\u2032P \u2020G\u2032\u2020G\u2020 = \u03a6P (GG\u2032), (16)\nIn the second equality, we have used that G\u2020 commutes with the phase \u03a6P (G\u2032). Furthermore, since Pauli operators are, by definition,11 supported on finitely many sites, every Pauli operator P fails to commute with only finitely many gauge generators, for any set of local independent gauge generators. Therefore, \u03a6P is indeed a gauge twist. Importantly, there are topological subsystem codes featuring gauge twists that cannot be written in the form \u03a6P , for any Pauli operator P . We find it useful to think of these gauge twists as instead arising from the commutation relations of semi-infinite products of Pauli operators supported along a path that extends to spatial infinity, as shown in Fig. 2. That is, we think of \u0393 as being defined as \u0393(G) = WGW \u2020G\u2020, for any gauge operator G, where the semi-infinite string operator W only fails to commute with finitely many gauge generators localized at its endpoint. This captures the intuition that a single anyon can be created at the endpoint of a semi-infinite string operator. We caution that this interpretation of gauge twists should be taken loosely, since infinite products of Pauli operators are not generally well-defined (see Refs. [44] and [45], for example).\nNonetheless, this leads us to a definition of the anyon types of a topological subsystem code. We define the anyon types of a TI Pauli topological subsystem to be equivalence classes of gauge twists on an infinite plane.\n11See Section 2.1\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 15\nDefinition 3 (Anyon types) The anyon type of a TI Pauli topological subsystem code are the equivalence classes of gauge twists under the following equivalence relation: two gauge twists \u0393 and \u0393\u0302 are equivalent, or represent the same anyon type, if there exists a Pauli operator P , such that \u0393(G) = \u03a6P (G)\u0393\u0302(G), for all G in the gauge group.\nIn other words, two gauge twists belong to the same equivalence class if they differ only by the commutation relations of some Pauli operator. We write the equivalence class represented by a gauge twist \u0393 as [\u0393]. We define the trivial anyon type to be the equivalence class [\u03931], where \u03931 is the gauge twist satisfying \u03931(G) = 1, for every gauge operator G. The nontrivial anyon types are then represented by gauge twists that cannot be written as \u03a6P as in Eq. (15). Intuitively, we think of the nontrivial anyon types as corresponding to semi-infinite string operators W whose commutation relations with the gauge operators cannot be reproduced by a Pauli operator. In what follows, we assume that TI topological subsystem codes have finitely many nontrivial anyon types. We note that, in Ref. [18], it was proven that there are finitely many anyon types in TI topological subsystem codes built from qubits.12\nTo gain intuition for this definition of anyon types, it is helpful to consider the case in which the gauge group G is proportional to the stabilizer group S, since we recover the usual anyon theory of a topological stabilizer code. In the case that G is proportional to S, the Hamiltonians defined in Eq. (13) are Pauli stabilizer Hamiltonians of the form:\nH{JS} = \u2212 \u2211 S\u2208S JSS + h.c., (17)\nfor some set of coefficients {JS}, whose strength decays exponentially with the linear size of the support of S. Here, we assume that the coefficients JS are nonzero. To see that a gauge twist \u0393 corresponds to a local excitation, we define a twisted stabilizer Hamiltonian by multiplying each stabilizer term S by \u0393(S):\nH\u0393{JS} = \u2212 \u2211 S\u2208S JS\u0393(S)S + h.c.. (18)\nRelative to the unmodified Hamiltonian, the ground state eigenvalue of S is twisted by the phase \u0393(S). Therefore, the ground states of the Hamiltonians in Eq. (18) correspond to excitations of the unmodified Hamiltonians H{JS}. We say that the stabilizer term S is violated if \u0393(S) \u0338= 1. Furthermore, on an infinite plane, the excitations are local, because the subset of violated stabilizers in Sloc can be contained in a constant-sized region. We see that, in this case, two gauge twists \u0393 and \u0393\u0302 are equivalent if they correspond to the\n12The proof relies on the fact that one can always find a non-redundant TI set of local generators of the gauge group. For systems of composite-dimensional qudits, however, redundancy may be unavoidable. For example, the stabilizer group of the DS stabilizer code in Ref. [20] does not admit a set of local generators that are simultaneously TI and non-redundant.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 16\nsame local excitation of the stabilizer Hamiltonians up to the action of a Pauli operator P .\nFor more general topological subsystem codes, where the gauge group might not be proportional to the stabilizer group, the gauge twists need not correspond to local excitations. This is because the Hamiltonians in Eq. (13) are typically frustrated, and hence, the ground states are not necessarily eigenstates of the gauge operators. We find it convenient to, nonetheless, adopt the language from the case of topological stabilizer codes and say that \u0393 violates a gauge operator G if \u0393(G) \u0338= 1. To emphasize the distinction between the anyon types of topological subsystem codes and those of topological stabilizer codes, we find it instructive to divide the anyon types of topological subsystem codes into three disjoint sets \u2013 based on the collection of gauge operators violated by the representative gauge twists.\nTrivial: The first family consists of the sole anyon type that can be represented by a gauge twist that does not violate any gauge operators. By definition, the only anyon type in this set is the trivial anyon type.\nDetectable: The second family of anyon types are those for which every representative gauge twist violates at least one stabilizer. We call these anyon types detectable, since they can be detected by measuring stabilizers.\nUndetectable: The last family of anyon types can be represented by a gauge twist that only violates Pauli operators in G \u2212 S. We refer to these anyon types as undetectable anyon types. This is motivated by the fact that the stabilizers are unable to distinguish the undetectable anyon types from the trivial anyon type. This family of anyon types is unique to topological subsystem codes, since, for topological stabilizer codes, the gauge twists either do not violate any stabilizers or violate at least one stabilizer.\nHaving defined the anyon types of topological subsytem codes, we next discuss their fusion rules and exchange statistics in terms of gauge twists. The fusion of two anyon types a and b is given by multiplying representative gauge twists for the anyon types. To make this explicit, let a and b be the equivalence classes of gauge twists [\u0393a] and [\u0393b], respectively. We define the fusion of a and b to be the anyon type [\u0393a \u00b7 \u0393b], where the gauge twist \u0393a \u00b7 \u0393b is given by its action on an arbitrary gauge operator G:\n\u0393a \u00b7 \u0393b(G) \u2261 \u0393a(G)\u0393b(G). (19)\nExplicitly, the fusion of a and b is:\na\u00d7 b = [\u0393a] \u00d7 [\u0393b] = [\u0393a \u00b7 \u0393b]. (20)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 17\nIt can be checked,13 that this definition is well-defined. That is, if two other gauge twists \u0393\u0302a and \u0393\u0302b represent a and b, respectively, then the composition \u0393\u0302a \u00b7 \u0393\u0302b belongs to the same equivalence class as \u0393a \u00b7 \u0393b.\nThe equivalence classes of gauge twists, furthermore, form an Abelian group under the operation in Eq. (20). The identity is the trivial anyon type [\u03931], and the inverse of an anyon type [\u0393a] is [\u0393a\u22121 ], where the gauge twist \u0393a\u22121 acts on an arbitrary gauge operator G as:\n\u0393a\u22121(G) \u2261 \u0393a(G)\u2217. (21)\nSince the product of gauge twists in Eq. (19) is commutative, the anyon types of a topological subsystem code generate an Abelian group under fusion. We note that, while the detectable anyon types can fuse into undetectable anyon types, the undetectable anyon types cannot fuse into detectable anyon types. Thus, the undetectable anyon types and the trivial anyon type form a subgroup under fusion.\nThe remaining data needed to characterize the Abelian anyon theory are the exchange statistics. To clarify the sense in which the anyon types can be moved around the system and exchanged, we say a gauge twist \u0393R is localized to a region R if \u0393R violates only the gauge generators of Gloc supported on R, where Gloc denotes some independent set of local gauge generators. We further say that a gauge twist \u0393aR represents an anyon type a at R, if \u0393aR represents a and is localized to R.\nWe next define string operators that move the anyon types, by considering the action of the translation symmetry on the gauge twists. We let U represent a translation symmetry operator, which acts on an arbitrary gauge operator G as UGU \u2020. The induced action of\n13Explicitly, we let Pa and Pb be the Pauli operators such that, for any gauge operator G, we have \u0393a(G) = \u03a6Pa(G)\u0393\u0302a(G) and \u0393b(G) = \u03a6Pb(G)\u0393\u0302b(G). This implies that the composition \u0393a \u00b7 \u0393b(G) can be written as \u03a6Pa(G)\u03a6Pb(G)\u0393\u0302a(G)\u0393\u0302b(G). Using that Pb commutes with \u03a6Pa(G), we find that \u0393a \u00b7 \u0393b(G) is equal to (PbPaGP \u2020a P \u2020 b G)\u0393\u0302a(G)\u0393\u0302b(G) = \u03a6PbPa(G)\u0393\u0302a \u00b7 \u0393\u0302b(G). Hence, \u0393a \u00b7 \u0393b and \u0393\u0302a \u00b7 \u0393\u0302b represent the same anyon type.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 18\nR\u2032 violates gauge generators\n(orange) in the region R\u2032, which is a translate of R by a unit translation. The gauge twist \u0393aR \u00b7 \u0393a \u22121 R\u2032 represents the trivial anyon type, by construction, and defines a short string operator W aRR\u2032 that moves the anyon type a from R\u2032 to R.\nthe translation symmetry U on a gauge twist \u0393 is U : \u0393 7\u2192 U\u0393, where U\u0393 is defined as: U\u0393(G) \u2261 \u0393(UGU \u2020). (22)\nIn words, we translate the gauge operator G and then apply the gauge twist \u0393. Notice that, if \u0393 only violates gauge generators supported on R, then U\u0393 only violates gauge generators supported on the translated region R\u2032 (Fig. 3).\nImportantly, the gauge twist U\u0393 may represent a different anyon type than \u0393. In other words, the translation symmetry may act nontrivially on the anyon types. Since (by assumption) there are finitely many anyon types, after a sufficient amount of coarse graining, i.e., blocking together unit cells and redefining the unit translation, the anyon types transform trivially under the coarse grained translation symmetry. We assume that the system has been coarse grained so that, if \u0393aR represents an anyon type a at a region R, then U\u0393aR represents a at the translated region, for any translation symmetry operator U , i.e.:\n[\u0393aR] = [U\u0393aR]. (23)\nThe translation symmetry action on the gauge twists allows us to define string operators that move the anyon types between two regions. To see this, we let \u0393aR be a gauge twist representing a at R and \u0393a\u22121R\u2032 = U\n\u2020\u0393a\u22121R be a gauge twist representing a\u22121 at a region R\u2032 that is shifted by a unit translation, as in Fig. 4. By definition, the gauge twist \u0393aR \u00b7\u0393a \u22121 R\u2032 represents the trivial anyon type. This implies that there is a Pauli operator W aRR\u2032 such that for any gauge operator G, we have:\n\u0393aR \u00b7 \u0393a \u22121 R\u2032 (G) = W aRR\u2032G(W aRR\u2032)\u2020G\u2020. (24)\nThat is, the commutation relations ofW aRR\u2032 with the gauge operators reproduces the gauge twist \u0393aR on R and the gauge twist \u0393a \u22121 R\u2032 on R \u2032. We say thatW aRR\u2032 is a short string operator that moves the anyon type a from R\u2032 to R. Alternatively, we say that W aRR\u2032 creates an anyon type a\u22121 at R\u2032 and an anyon type a at R. By gluing together short string operators, we can then create longer string operators along arbitrary paths, as illustrated in Fig. 5.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 19\nWe would like to make a few comments about the string operators defined above: (i) If the gauge group is proportional to the stabilizer group, then the string operators create local excitations at their endpoints. More generally, the string operators commute with the local gauge generators along their length and fail to commute with local gauge generators at their endpoints. However, since the Hamiltonians H{JG} are generally frustrated, the string operators might not create local excitations at their endpoints. (ii) Up to Pauli operators localized at the endpoints, the string operators that move the trivial anyon type are products of stabilizers, as shown in Appendix F. Further, the string operators that move detectable anyon types correspond to detectable errors, since they fail to commute with stabilizers at their endpoints. Lastly, up to Pauli operators localized to the endpoints, the string operators that move undetectable anyon types are undetectable errors, in that they preserve the code space [13].\nWith this, we are prepared to define the exchange statistics of the anyon types. In fact, the exchange statistics can be computed using the well-established methods of Refs. [42, 46]. For completeness, we review the details here. For an anyon type a, we consider string operators W a\u03b31 , W a \u03b32 , and W a \u03b33 , defined along paths 14 \u03b31, \u03b32, and \u03b33, which move the anyon type a to a constant-sized region R. We assume the paths are ordered counter-clockwise around R, as shown in Fig. 6. Importantly, we require that all three string operators have the exact same commutation relations with the gauge operators in R. This is always possible by redefining the string operators by Pauli operators localized near R, since this does not affect the anyon type. The exchange statistics \u03b8(a) of the anyon type a is then\n14The paths are not completely arbitrary. We require that the endpoints at the tails of \u03b31, \u03b32, and \u03b33 are far from R and that they do not wrap around a tail of any other path.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 20\ngiven by:\nW a\u03b31 ( W a\u03b32 )\u2020 W a\u03b33 = \u03b8(a)W a \u03b33 ( W a\u03b32 )\u2020 W a\u03b31 . (25)\nHeuristically, the string operators ( W a\u03b32 )\u2020 W a\u03b33 on the left hand side of Eq. (25) move an a anyon type from the tail of \u03b33 to the tail of \u03b32, then W a \u03b31 moves another a anyon type from the tail of \u03b31 to the head of \u03b31. This is compared to the right hand side, in which, the a anyon type at the tail of \u03b31 is first moved to the tail of \u03b32, then the a anyon type at the tail of \u03b33 is moved to the head of \u03b33. These two processes differ by an exchange of a anyon types \u2013 thus, they differ by the phase \u03b8(a). The pattern of string operators in Eq. (25) is chosen so that the dynamical phases cancel (i.e., the phases obtained by moving anyons along a path). We refer to Fig. 5 of Ref. [17] for a proof that the formula for the exchange statistics is well defined.\nFor Abelian anyon theories, the U(1)-valued phase B\u03b8(a, b), obtained from a full braid of the anyon types a and b, is completely determined by the exchange statistics of a, b, and their fusion product ab, according to the formula [20, 32]:\nB\u03b8(a, b) \u2261 \u03b8(ab) \u03b8(a)\u03b8(b) . (26)\nHowever, we find it valuable to describe how the braiding relation B\u03b8(a, b) can be computed directly. We consider string operators supported along the paths \u03b3 and \u03b3\u2032, as shown in Fig. 7. In fact, any choice of sufficiently long paths with an odd number of intersections and the same orientations as \u03b3 and \u03b3\u2032 suffice. The phase B\u03b8(a, b) is then obtained from the commutation relations of W a\u03b3 and W b \u03b3\u2032 :\nW b\u03b3\u2032W a \u03b3 = B\u03b8(a, b)W a\u03b3W b\u03b3\u2032 . (27)\nImportantly, the dynamical phases cancel, since the anyon types are moved along the same paths on either side of Eq. (27). We also note that, by physical arguments, the braiding relations for any anyon types a, b, and c are required to satisfy:\nB\u03b8(a, b) = B\u03b8(b, a), and B\u03b8(a, bc) = B\u03b8(a, b)B\u03b8(a, c). (28)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 21\nWith this, we have defined the full set of data for the Abelian anyon theory of a topological subsystem code \u2013 namely, the anyon types, their fusion rules, and their exchange statistics. Before turning to a general construction of topological subsystem codes based on arbitrary Abelian anyon theories, we would like to emphasize two ways in which the anyon theories of topological subsystem codes go beyond those captured by topological stabilizer codes. First, there are convincing arguments to say that topological stabilizer codes capture only the Abelian anyon theories that admit gapped boundaries [32, 47]. Topological subsystem codes, in contrast, can be characterized by anyon theories that do not admit gapped boundaries, such as the chiral semion subsystem code in Section 5.\nSecond, in Appendix E, we argue that the anyon theories of topological stabilizer codes must be modular, meaning that, for every anyon type a, there exists some anyon type b that braids nontrivially with a. As described below, topological subsystem codes can in fact be characterized by anyon theories that are non-modular \u2013 wherein there exists an anyon type a with braiding relations B\u03b8(a, b) = 1, for every anyon type b. The anyon type a with trivial braiding relations is known as a transparent anyon type.15 For contrast, we refer to anyon types that have at least one nontrivial braiding relation as opaque anyon types. An example of a topological subsystem code characterized by a non-modular anyon theory is given in Section 4. We note that Ref. [18] further introduced the concept of a\n15We remark that every transparent anyon type must be either a boson or a fermion. This follows from the fact that a transparent anyon type a braids trivially with itself. Then, since a full braid is equivalent to two exchanges, we find: B\u03b8(a, a) = \u03b8(a)2 = 1. Thus, the transparent anyon type a has exchange statistics \u03b8(a) = \u00b11, meaning that it is either a boson or a fermion.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 22\nflux in topological subsystem codes, which includes objects that braid nontrivially with the transparent anyon types. For completeness, we discuss fluxes in Appendix D.\nTo clarify the differences between transparent anyon types and opaque anyon types in topological subsystem codes, we consider the string operators formed by moving anyon types along closed paths. That is, we imagine moving a nontrivial anyon type a along a closed path \u03b3 using a string operator W a\u03b3 , as depicted in Fig. 8. The string operator W a \u03b3 is supported along the loop formed by \u03b3 and commutes with all of the gauge operators. Therefore, if \u03b3 is contractible, the string operator W a\u03b3 defines an element of the stabilizer group \u2013 it cannot be a logical operator, because of property (iii) of Definition 1.\nFurthermore, if the topological subsystem code is defined on a torus, then we can also consider a path \u03b3 which wraps around a non-contractible loop. In this case, the string operatorW a\u03b3 may be a nontrivial bare logical operator or a nonlocal stabilizer \u2013 depending on whether the anyon type is opaque or transparent, respectively. We note that the loops of string operators described here generate an anyonic 1-form symmetry, defined more precisely in Appendix B.\nThe nature of the string operators formed by moving nontrivial anyon types around non-contractible paths, i.e., whether they are nontrivial bare logical operators or nonlocal stabilizers, can be determined by the formula for the braiding relations in Eq. (27). In particular, the string operators obtained by moving opaque anyon types around noncontractible paths must be nontrivial bare logical operators. This is because every opaque anyon type a braids nontrivially with some other anyon type b. The string operators for a and b supported along paths with an odd intersection number (such as in Fig. 7) generate non-commuting operators on the logical subsystem. Transparent anyon types, on the other hand, yield nonlocal stabilizers when moved around non-contractible loops. This is because the corresponding string operators commute with all other string operators created by moving anyon types around closed paths. Furthermore, in Appendix F, we argue that every nontrivial bare logical operator can be generated by moving nontrivial anyon types around non-contractible loops, up to stabilizers. Therefore, the string operators of transparent anyon types commute with all of the logical operators, so they cannot be logical operators themselves. We note that, as the terminology suggests, the detectable anyon types of a topological subsystem code are opaque, while the undetectable anyon types are transparent (see Appendix E).\nWe conclude this section by commenting on the anyon theory of a topological subsystem code in terms of the family of Hamiltonians H{JG}, defined in Eq. (13). To simplify the discussion, we assume that the Hamiltonians H{JG} have no local degeneracies, as is the case for a generic set of coefficients {JG}. Then, for any Hamiltonian in the parameter space, the string operators for opaque anyon types create gapped excitations at their endpoints. This is because the eigenstates of an arbitrary H{JG} are simultaneously eigenstates of the stabilizers. The endpoints of a string operator representing an opaque anyon type fail to commute with some subset of the generators of S\u0303 at their endpoints,\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 23\nthus creating local excitations.16 These can be interpreted as anyonic excitations when the Hamiltonian is gapped. The string operators of transparent anyon types, on the other hand, are guaranteed to create anyonic excitations for the gapped Hamiltonians only if the corresponding anyon types do not have bosonic exchange statistics. This follows from the fact that the algebra of open string operators for anyon types with nontrivial statistics requires a Hilbert space of dimension greater than one. Indeed, if a state |\u03c8\u27e9 is invariant under the open string operators W a\u03b31 , W a \u03b32 , and W a \u03b33 in Eq. (25), then we have:\n|\u03c8\u27e9 = W a\u03b31 ( W a\u03b32 )\u2020 W a\u03b33 |\u03c8\u27e9 = \u03b8(a)W a \u03b33 ( W a\u03b32 )\u2020 W a\u03b31|\u03c8\u27e9 = \u03b8(a)|\u03c8\u27e9. (29)\nTherefore, the phase \u03b8(a) must be 1, implying that a is a boson. If a has nontrivial exchange statistics, then |\u03c8\u27e9 cannot be invariant under the open string operators. Thus, the string operators create local excitations at their endpoints. We see that, modulo the transparent anyon types with bosonic exchange statistics, the anyon theory of a topological subsystem code captures a set of anyonic excitations common to the gapped Hamiltonians of the parameter space. We comment further on the gapped topological phases of matter exhibited by the family of Hamiltonians H{JG}, in Section 8.\n4 Z(1)4 subsystem code As a first example of a topological subsystem code, we introduce the Z(1)4 subsystem code. The Z(1)4 subsystem code is named after the Z (1) 4 anyon theory, where we have adopted the\n16We have used here that every opaque anyon type has B\u03b8(a, b) \u0338= 1 for some anyon type b. The open string operators for a fail to commute with the b string operators encircling the endpoint. Thus, the open string operators for a fail to commute with some stabilizers.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 24\nnomenclature of Ref. [48].17 The anyon types of this theory generate a Z4 group under fusion and are labeled as {1, s, s2, s3}. The exchange statistics of the Z(1)4 anyon types are:\n\u03b8(1) = 1, \u03b8(s) = i, \u03b8(s2) = 1, \u03b8(s3) = i. (30)\nNotably, the generator s is a semion, which is to say that interchanging two s anyon types yields a phase of \u03b8(s) = i. The braiding relations of the anyon types can then be computed from the exchange statistics using the identity in Eq. (26). We point out that the braiding relations of the s2 anyon type are:\nB\u03b8(s2, 1) = B\u03b8(s2, s) = B\u03b8(s2, s2) = B\u03b8(s2, s3) = 1. (31)\nThis tells us that s2 is a boson with trivial braiding relations. Therefore, it is a transparent anyon type, and the Z(1)4 anyon theory is non-modular. As a result, the subsystem code defined below is an example of a topological subsystem code characterized by a nonmodular anyon theory \u2013 this is distinct from topological stabilizer codes, which only capture modular anyon theories (Appendix F).\nWe note that the Z(1)4 subsystem code is based on a generalization of Kitaev\u2019s honeycomb model given in Ref. [49]. Here, we reformulate the model as a topological subsystem code and derive it by starting from a Z4 TC. We give the details of the subsystem code in Section 4.1 and describe its construction from a Z4 TC in Section 4.2."
        },
        {
            "heading": "4.1 Definition of the subsystem code",
            "text": "The Z(1)4 subsystem code is defined on a hexagonal lattice with a four-dimensional qudit at each vertex. We assume, for simplicity, that the system has periodic boundary conditions. As described in Section 2.1, the basis states for a single four-dimensional qudit can be labeled by elements of Z4 as |\u03b1\u27e9, for \u03b1 \u2208 Z4. The operator algebra at the vertex j is then generated by the (generalized) Pauli X and Pauli Z operators:\nXj = \u2211\n\u03b1\u2208Z4 |\u03b1 + 1\u27e9\u27e8\u03b1|, Zj = \u2211 \u03b1\u2208Z4 i\u03b1|\u03b1\u27e9\u27e8\u03b1|, (32)\nwhere the addition is computed modulo 4. We also find it convenient to introduce a Pauli Y operator at each site j, defined by:\nYj \u2261 \u221a iX\u2020jZ \u2020 j . (33)\nThe Pauli operators at site j satisfy the relations:\nX4j = Z4j = Y 4j = 1, XY = iY X, Y Z = iZY, ZX = iXZ, (34)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 25\nwhile the Pauli operators at sites j and k with j \u0338= k are mutually commuting:\nXjYk = YkXj, YjZk = ZkYj, ZjXk = XkZj. (35)\nTo define the Z(1)4 subsystem code, we first specify the gauge group G. To do so, we label each edge of the hexagonal lattice with an x, y, or z as shown in Fig. 9. We then define a gauge generator for each edge, depending on the label x, y, or z. The gauge generator for an x-edge is product of Pauli X operators on the neighboring vertices. Likewise, the gauge generator for a y-edge is a product of Pauli Y operators, and for a z-edge, it is a product of Pauli Z operators. More explicitly, the gauge group G is the group generated by the following gauge operators:\nG \u2261 \u2329\n, ,\n\u232a . (36)\nNote that, here, the generating set implicitly includes an operator for each edge.\nUp to a choice of phases, the stabilizer group S is given by the center of G. We choose the stabilizer group to be the group of Pauli operators generated by the plaquette\n17See also the beginning of Section 4.2 for an explanation of the notation.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 26\nstabilizers Sp:\nSp \u2261 , (37)\nand the nonlocal stabilizers:\nS\u03b3 \u2261 , S\u03b3\u2032 \u2261 . (38)\nThese string operators wrap around the non-contractible paths \u03b3 and \u03b3\u2032 shown in Fig. 7. We see that, although the gauge group is generated by local operators, the stabilizer group includes nonlocal stabilizer generators. This differs from topological stabilizer codes, which are required to have a stabilizer group that admits a set of local generators [19].\nLastly, the bare logical operators are fully determined by the gauge group and the choice of stabilizer group. The bare logical group L is generated by the stabilizer group and the two nontrivial bare logical operators:\nL\u03b3 \u2261 , L\u03b3\u2032 \u2261 . (39)\nIn fact, the bare logical group can be generated by the local stabilizers Sp in Eq. (37) and the nontrivial bare logical operators L\u03b3 and L\u03b3\u2032 in Eq. (39), since the nonlocal stabilizers S\u03b3 and S\u03b3\u2032 can be generated from L\u03b3 and L\u03b3\u2032 . The logical operators satisfy the commutation relations:\nL\u03b3\u2032L\u03b3 = \u2212L\u03b3L\u03b3\u2032 , (40)\nimplying that the logical subsystem consists of a single qubit. The operators L\u03b3 and L\u03b3\u2032 act as the logical Pauli X and Pauli Z operators on the logical qubit.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 27\nBefore discussing the anyon theory of the subsystem code, let us make sure that we have accounted for all of the gauge operators, stabilizers, and nontrivial bare logical operators. We do this by checking that the dimension of the code space satisfies a certain consistency condition. On the one hand, the definition of the code space in Eq (6) tells us that each stabilizer imposes a constraint on the full Hilbert space, implying that the dimension of HC is:18\ndim(HC) = dim(H)/|S|, (41)\nwhere |S| is the order of the stabilizer group. On the other hand, from the factorization of the code space in Eq. (8), we have:\ndim(HC) = dim(HG \u2297 HL) = dim(HG)dim(HL). (42)\nTogether, Eqs. (41) and (42) give us the consistency condition:\ndim(H)/|S| = dim(HG)dim(HL). (43)\nTo proceed, we find it convenient to take the logarithm (base 4) of both sides:\nlog4 [dim(H)] = log4 |S| + log4 [dim(HG)] + log4 [dim(HL)] . (44)\nThis allows us to count the dimensions in terms of the number of four-dimensional qudits. We further introduce the notation:\nNQ \u2261 log4 [dim(H)] , NS \u2261 log4 |S|, NG \u2261 log4 [dim(HG)] , NL \u2261 log4 [dim(HL)] . (45)\nHere, NQ is the total number of qudits, while NS, NG, and NL correspond to the number of stabilized qudits, gauge qudits, and logical qudits, respectively. With this notation, the consistency condition in Eq. (44) can be written succinctly as:\nNQ = NS + NG + NL. (46)\nLet us now count NQ, NS, NG, and NL to verify Eq. (46) for the Z(1)4 subsystem code. We assume that the subsystem code is on a torus. We let P be the total number of plaquettes in the system. Then, NQ is 2P, since there are two four-dimensional qudits for each plaquette. There is one order-four stabilizer generator Sp for every plaquette. However, their product over all plaquettes is the identity, meaning that there are only P\u22121 independent local stabilizer generators. Including the two order-two nonlocal stabilizers, we find that NS is P. Next, there are three order-four gauge generators for every plaquette. Since the product of all gauge generators is the identity, however, there are only 3P \u2212 1\n18We refer to Ref. [50] for a proof of Eq. (41) for composite-dimensional qudits.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 28\nindependent gauge generators. The gauge operators also generate the stabilizers, so we need to subtract P from 3P \u2212 1. The number of gauge qudits is then:\nNG = [(3P \u2212 1) \u2212 P]/2 = P \u2212 1 2 . (47)\nWe divide by 2 because the gauge generators form both the Pauli Z and Pauli X operators for the gauge qudit. Finally, the number of logical qudits is NL = 12 , i.e., there is a single logical qubit. All together, we have:\nNS + NG + NL = P + (P \u2212 1 2) + 1 2 = 2P = NQ. (48)\nTherefore, the counting of the stabilizers, gauge operators, and logical operators is selfconsistent.\nWe now show that the anyon theory of the subsystem code above is indeed the Z(1)4 anyon theory described at the beginning of this section. As shown in Appendix F, all of the nontrivial bare logical operators and nonlocal stabilizers of a topological subsystem code are generated by moving anyon types along non-contractible paths. Thus, truncations of the string operator L\u03b3 (or L\u03b3\u2032) can be used to reveal the anyon types of the subsystem code. To see this, let us imagine truncating L\u03b3 on an infinite-sized system, so that one endpoint is at spatial infinity. A possible truncation of L\u03b3 is:\n. (49)\nThis truncated string operator commutes with all of the gauge operators away from the endpoint, but fails to commute with the gauge generators associated with the y-edges at the endpoint (labeled by s). Heuristically, the commutation relations of the semi-infinite string operator with the gauge operators defines a gauge twist (see Section 3.2). We claim that the commutation relations cannot be reproduced by the commutation relations of Pauli operators (with constant-sized support). This follows from the fact that the string operators that move trivial anyon types around a closed path are necessarily products of local stabilizers along the path (see Proposition 3). Hence, the open string operator in Eq. (49) corresponds to a nontrivial anyon type. Moreover, it is a detectable anyon type, as argued below. With some foresight, we have called this anyon type s.\nWe are now able to compute the fusion rules and exchange statistics of the anyon type s following the discussion in Section 3.2. The fusion rules can be seen from the powers of L\u03b3. The fourth power of L\u03b3 is the identity, so the anyon type is at most order four. The string operators L\u03b3, L 2 \u03b3, and L 3 \u03b3 are either nontrivial bare logical operators or nonlocal stabilizers. Therefore, s, s2, and s3 are nontrivial anyon types. We see that s generates the group Z4 under fusion. Next, the exchange statistics of the anyon types {1, s, s2, s3}\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 29\ncan be computed using Eq. (25). The calculation of \u03b8(s) is shown in Fig. 10. We find the exchange statistics:\n\u03b8(1) = 1, \u03b8(s) = i, \u03b8(s2) = 1, \u03b8(s3) = \u2212i. (50)\nThese are precisely the exchange statistics of the anyon types in the Z(1)4 anyon theory, as claimed. Using either Eq. (26) or Eq. (27), the nontrivial braiding relations are given by:\nB\u03b8(s, s) = B\u03b8(s, s3) = B\u03b8(s3, s3) = \u22121. (51)\nThis tells us that s and s3 are opaque anyon types, while s2 is transparent. The anyon types s and s3 are detectable, since the corresponding open string operators fail to commute with a loops of s or s3 string operators wrapped around the endpoint.\nThe Z(1)4 subsystem code defines a family of Hamiltonians according to Eq. (13), which for a particular choice of coefficients takes the form:\nH{Je,Jp} = \u2212 \u2211\ne\u2208x-edges Je \u2212 \u2211 e\u2208y-edges Je \u2212 \u2211 e\u2208z-edges Je \u2212 \u2211 p Jp .\n(52)\nGiven that the anyon types s and s3 are detectable, i.e., the endpoints of the corresponding string operators fail to commute with stabilizers, they correspond to gapped anyonic excitations common to the Hamiltonians in Eq. (52) (assuming Jp \u0338= 0 for each plaquette p). The s2 anyon types, on the other hand, are transparent bosons, so they do not enforce\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 30\nany anyonic excitations, as discussed at the end of Section 3.2. Therefore, the gapped Hamiltonians in the parameter space must have a semion \u2013 which may have order two. Note that (besides the Jp term) this Hamiltonian is precisely the generalized honeycomb model introduced in Ref. [49].\nWe point out that, although the most natural string operator for s2 is the square of\nthe string operator in Eq. (49):\n, (53)\nthis choice of string operator fails to commute with stabilizers. To find a string operator for s2 that is manifestly undetectable, we can modify the string operator in Eq. (53) at its endpoint by:\n. (54)\nThis gives us the string operator:\n, (55)\nwhich commutes will all stabilizers and therefore the anyon type s2 is undetectable. Note that, although there are three s2 anyon types shown in Eq. 55, it is equivalent to a single s2 anyon type, since two s2 anyons are created by the local operator in Eq. (54)."
        },
        {
            "heading": "4.2 Construction of the subsystem code",
            "text": "In this section, we show that the Z(1)4 subsystem code can be constructed from a Z4 TC. This follows from the simple observation that the em excitations of the Z4 TC generate the Z(1)4 anyon theory as a subgroup. In particular, the em excitation generates the anyon types: {1, em, e2m2, e3m3}, which have the exchange statistics [3]:\n\u03b8(1) = 1, \u03b8(em) = i, \u03b8(e2m2) = 1, \u03b8(e3m3) = i. (56)\nThese match the exchange statistics of the Z(1)4 anyon types in Eq. (30). Moreover, the anyon type e2m2 is transparent in the subtheory, since it has trivial braiding relations with the anyon types in {1, em, e2m2, e3m3}. We note that, in general, the notation Z(p)N of Ref. [48] can be interpreted as the anyon theory generated by the epm anyon type of a ZN TC.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 31\nTherefore, our construction of the Z(1)4 subsystem code starts with a Z4 TC. The Z4 TC is defined on a square lattice with a four-dimensional qudit at each edge (Fig. 11). Explicitly, the Hamiltonian of the Z4 TC is:\nHTC \u2261 \u2212 \u2211\nv\nATCv \u2212 \u2211\np\nBTCp , (57)\nwhere the vertex term ATCv and plaquette term B TC p are graphically represented as:\nATCv \u2261 , BTCp \u2261 . (58)\nThis model has sixteen types of anyonic excitations, tabulated below:\n.\nThe string operators for the anyon types are generated by the short string operators for e and m anyon types:\nW ee \u2261 , , Wme \u2261 , , (59)\nwhere the single Pauli Z and X move e and m anyons according to the convention above. Note that the horizontal Z can be interpreted as either moving e from left to right or\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 32\nmoving e3 from right to left. That is to say, an anyon type traveling along a path is equivalent to its inverse anyon type traveling in the opposite direction. The Hermitian conjugate thus moves the anyon types in the opposite direction.\nTo build a topological subsystem code characterized by {1, em, e2m2, e3m3}, we leverage the braiding relations of the Z4 TC anyon types \u2013 in particular, the braiding relations of the anyon type e3m. We recall that the exchange statistics of a general Z4 TC anyon type epmq is given by:\n\u03b8(epmq) = ipq, (60)\nwhere p and q are valued in Z4. Note that the e3m anyon type is an antisemion, meaning that \u03b8(em3) = \u2212i. According to Eq. (26), the braiding relations between two general Z4 anyon types epmq and erms are then:\nB\u03b8(epmq, erms) = ips+qr, (61)\nfor p, q, r, s in Z4. Importantly, the antisemion e3m has trivial braiding relations with the anyon types in the subtheory {1, em, e2m2, e3m3} and nontrivial braiding relations with all of the other anyon types.\nThe braiding relations of the antisemion suggest a means of constructing the Z(1)4 subsystem code from the Z4 TC. As described in Section 3.2, the anyon types of a topological subsystem code generate bare logical operators when they are moved along closed paths. This means that the corresponding string operators commute with all of the gauge operators. Therefore, if we construct a gauge group that includes the open string operators for the e3m antisemion, we can exclude the anyon types outside of the set {1, em, e2m2, e3m3}. This is because any string operator for an anyon type outside of this set fails to commute with the e3m string operators, due to the formula for the braiding relations in Eq. (27). More specifically, we define a gauge group G \u2032, generated by the terms of the Z4 TC Hamiltonian as well as the short string operators for the e3m anyon types:\nG \u2032 \u2261 \u2329\n, , ,\n\u232a . (62)\nThe generators of G \u2032 can be simplified by noticing that the vertex term is generated by the short string operators and the plaquette term. Further, the weight of the generators can be reduced by multiplying the plaquette term by short string operators. This gives us:\nG \u2032 \u2261 \u2329\n, ,\n\u232a , (63)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 33\nwhose stabilizer group S \u2032 \u221d Z(G \u2032) is generated by string operators along closed paths of the form:\n, (64)\nHere, we have assumed that the system is defined on a torus, so the second string operator may wrap around a non-contractible path.\nThe gauge group G \u2032 implicitly defines the group of bare logical operators L. In particular, L is generated by loops of em string operators, such as:\n, , (65)\nwhere the small loop of em string operators is one of the generators of the stabilizer group in Eq. (64), and the em string operators along non-contractible loops give nontrivial bare logical operators. We thus see that the topological subsystem code is characterized by the Z(1)4 subtheory {1, em, e2m2, e3m3} of the Z4 TC. We refer to this procedure of introducing gauge operators to the Z4 TC as \u201cgauging out\u201d the e3m anyon types of the Z4 TC.19 This has two effects on the anyon theory. First, the anyon types generated by e3m become undetectable, because they are created by string operators built from gauge operators. The e2m2 anyon type, in particular, is undetectable \u2013 i.e, the string operator for an e2m2 anyon type can be chosen such that it commutes with all of the stabilizers of the topological subsystem code at its endpoints. Second, we remove the anyon types that have nontrivial braiding relations with e3m. For example, e and m have nontrivial braiding relations with e3m. Consequently, the e and m anyons are not anyon types of the topological subsystem code, since their string operators fail to commute with the gauge operators, namely the short e3m string operators.\n19This should be distinguished from the concept of \u201cgauging a 1-form symmetry\u201d, in which a system with a 1-form symmetry is mapped to a system with a 0-form symmetry (in two dimensions). Notably, the 1-form symmetry associated to e3m is anomalous, as captured by the exchange statistics. This implies that the 1-form symmetry corresponding to e3m cannot be gauged in this sense. Here, we instead use the word \u201cgauging\u201d in the phrase \u201cgauging out\u201d to refer to the gauge subsystem HG.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 34\nAlthough the effects are similar, we would like to pause the construction to emphasize the distinction between gauging out and condensation. To this end, we let F be the group of open string operators for some anyon type. In the case above, F is the group generated by the short string operators for e3m. The process of gauging out takes a stabilizer group S (e.g. the Z4 TC) to a gauge group G = \u27e8S,F\u27e9 (up to phases). Importantly, we do not require F to be Abelian. In fact, F is only Abelian if the corresponding anyons are bosons, which is not the case for the e3m anyon types. If F is Abelian, then we can further gauge fix F . This has the effect of condensing the anyon types. Therefore, gauging out can be interpreted as the first step of condensation, where the second step can only be carried out if the string operators are mutually commuting, i.e., the anyon types are bosons.\nFinally, to relate the topological subsystem code defined by G \u2032 in Eq. (63) to the Z(1)4 subsystem code defined by Eq. (36), we apply a Clifford transformation. We define the single site Clifford unitary F according to its action on the Pauli operators via conjugation:\nF : X 7\u2192 Z, Y 7\u2192 \u2212 \u221a iZ\u2020X, Z 7\u2192 X\u2020. (66)\nWe then apply the transformation in Eq. (66) to all of the horizontal edges. This maps the gauge group G \u2032 to:\nG = \u2329\n, ,\n\u232a . (67)\nBy redefining the system on a hexagonal lattice with four-dimensional qudits on the vertices, as in Fig. 12, we see that G is precisely the gauge group in Eq. (36). Thus, we have derived the Z(1)4 subsystem code from a Z4 TC by gauging out the e3m antisemions.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 35"
        },
        {
            "heading": "5 Chiral semion subsystem code",
            "text": "Our next example is a topological subsystem code characterized by the chiral semion anyon theory. We label the anyon types of the chiral semion anyon theory by {1, s}. These form a Z2 group under fusion and the nontrivial anyon type s has semionic exchange statistics (i.e., \u03b8(s) = i). As the name suggests, this anyon theory is chiral. Formally, this means that the chiral central charge c\u2212 is nonzero. We recall that the chiral central charge of a modular Abelian anyon theory can be computed modulo 8 using the formula:\ne2\u03c0ic\u2212/8 = 1\u221a |A| \u2211 a \u03b8(a), (68)\nwhere the sum is over all anyon types and |A| is the total number of anyon types. From this, we see that the chiral central charge of the chiral semion theory is c\u2212 = 1 mod 8. The widely held belief [32, 47] is that anyon theories with a nonzero chiral central charge cannot be modeled by commuting projector Hamiltonians. This suggests, in particular, that the chiral semion theory cannot be modeled by the Hamiltonian of a topological stabilizer code. Thus, the subsystem code described below is distinct from any topological stabilizer code in that it is characterized by a chiral anyon theory."
        },
        {
            "heading": "5.1 Definition of the subsystem code",
            "text": "The chiral semion subsystem code is defined on a square lattice with a four-dimensional qudit at each edge and each plaquette, as in Fig. 13. The gauge group G is given by:\nG \u2261 \u2329\n, , , Z2 \u232a . (69)\nThis defines the stabilizer group up to a factor of i. We take the stabilizer group to be:\nS \u2261 \u2329 i\u00d7 , , ,\n\u232a . (70)\nNotice that the vertex term (on the far left) has a factor of i. Given the relations between the stabilizers, this is necessary to ensure that the only element proportional to the identity is the identity itself. Unlike the Z(1)4 subsystem code in the previous section, the stabilizer group of the chiral semion subsystem code admits a set of local generators on a torus. We attribute this to the fact that the chiral semion anyon theory is modular, since nonlocal\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 36\nstabilizer generators necessarily correspond to string operators of transparent anyon types (see Appendix F for more details).\nLastly, assuming that the subsystem code is defined on a torus, the bare logical group is generated by the stabilizer group and the following two nontrivial bare logical operators, which are supported along the non-contractible paths \u03b3 and \u03b3\u2032 in Fig. 7:\nL\u03b3 \u2261 , L\u03b3\u2032 \u2261 . (71)\nThese string operators obey the commutation relations:\nL\u03b3\u2032L\u03b3 = \u2212L\u03b3L\u03b3\u2032 . (72)\nTherefore, the chiral semion subsystem code encodes a single qubit when defined on a torus. We defer the counting of the number of stabilized qudits, gauge qudits, and logical qubits to the general construction in Section 6.\nThe anyon theory of the subsystem code can be determined straightforwardly from the nontrivial bare logical operators in Eq. (71). A possible truncation of L\u03b3 is given by:\n. (73)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 37\nThis fails to commute with stabilizers at the endpoint. Moreover, the commutation relations with the stabilizers cannot be reproduced by a Pauli operator localized near the endpoint, since L\u03b3 is a nontrivial bare logical operator. This follows from Proposition 5 in Appendix F. Therefore, the endpoint of the truncation of L\u03b3 is a detectable anyon type. We suggestively call the anyon type s.\nWe next determine the fusion rules and exchange statistics for s. Although the logical operators are order four, the anyon type s has order two under fusion, i.e., s \u00d7 s = 1. This is because the truncated string operator squares to a product of stabilizers, shown explicitly in the next section. The braiding relations for s follow from Eq. (72), which tells us that B\u03b8(s, s) = \u22121. Further, the exchange statistics of s can be computed using the formula in Eq. (25). The calculation of the exchange statistics of s is shown in Fig. 14. We find that s is indeed a semion: \u03b8(s) = i."
        },
        {
            "heading": "5.2 Construction of the subsystem code",
            "text": "We now describe how the chiral semion subsystem code can be constructed from a double semion (DS) stabilizer code [20]. The construction is motivated by the fact that the anyon theory of the DS stabilizer code contains the chiral semion theory as a subtheory. To make this explicit, we recall that the anyon types of the DS stabilizer code form a Z2 \u00d7Z2 group under fusion, with elements labeled by {1, s, s\u0304, ss\u0304}. The anyon type s is a semion, s\u0304 is an antisemion, and ss\u0304 is a boson, i.e.:\n\u03b8(1) = 1, \u03b8(s) = i, \u03b8(s\u0304) = \u2212i, \u03b8(ss\u0304) = 1. (74)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 38\nThis implies, in particular, that the semions and antisemions have the following braiding relations:\nB\u03b8(s, s) = \u22121, B\u03b8(s\u0304, s\u0304) = \u22121, B\u03b8(s, s\u0304) = 1. (75)\nSince the semion s braids trivially with the antisemion, the subgroups {1, s} and {1, s\u0304} are independent. Hence, the anyon theory generated by s is precisely the chiral semion theory. Consequently, we build the chiral semion subsystem code by gauging out the antisemion s\u0304 in a DS stabilizer code. This mirrors the construction of the Z(1)4 subsystem code in Section 4.2, where we gauged out an antisemion in a Z4 TC. We note that an alternative method for constructing the chiral semion subsystem code is to in fact gauge the 1-form symmetry associated to the s2 boson in the Z(1)4 subsystem code (Fig. 15). We start by describing a DS stabilizer code, which is a slight modification of the DS stabilizer code introduced in Ref. [20].20 Here, the DS stabilizer code is built using fourdimensional qudits on the edges and plaquettes of a square lattice (Fig. 13). We denote the Pauli X and Pauli Z operators on a plaquette p by Xp and Zp. The Hamiltonian HDS of the DS stabilizer code is then a sum of four types of terms, corresponding to vertices v,\n20Specifically, the DS model in Ref. [20] is constructed by condensing the e2m2 anyon types of the Z4 TC. The DS stabilizer code used here, in contrast, is constructed from the Z4 TC by gauging the 1-form symmetry associated to e2m2. The key difference is that the latter has gauge field degrees of freedom on the plaquettes.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 39\nedges e, and plaquettes p:\nHDS = \u2212 \u2211\nv\nAv \u2212 \u2211\np\nBp \u2212 \u2211\ne\nCe \u2212 \u2211\np\nZ2p + h.c. (76)\nThe vertex terms Av, plaquette terms Bp, and edge terms Ce are graphically represented as:\nAv \u2261 i\u00d7 , Bp \u2261 , Ce \u2261 , . (77)\nThe stabilizer group SDS is generated by the Hamiltonian terms:\nSDS \u2261 \u27e8{Av}, {Bp}, {Ce}, Z2p\u27e9. (78)\nIt can be checked that the anyon theory of the DS stabilizer code is indeed given by the anyon types {1, s, s\u0304, ss\u0304}, described above. The anyons can be created by string operators along oriented paths, formed by gluing together the following operators from head-to-tail according to their orientation:\nW se \u2261 , , W s\u0304e \u2261 , , W ss\u0304e \u2261 , .\n(79)\nThe short string operators that move the anyon types in the opposite direction are given by (W se )\u2020, (W s\u0304e )\u2020, and (W ss\u0304e )\u2020. We note that, although the product of short string operators W seW s\u0304 e differs from W ss\u0304 e , the long string operators \u220f e\u2208\u03b3\u0304 W ss\u0304 e and \u220f e\u2208\u03b3\u0304(W seW s\u0304e ) along a path \u03b3\u0304 in the dual lattice are equivalent, up to stabilizers along \u03b3\u0304 and local operators at the endpoints. Thus, they correspond to the same anyon type. We choose the expression W ss\u0304e = X2e for simplicity. In this sense, the string operators reproduce the fusion rules of the DS anyon types. Furthermore, using Eq. (25), one can show that the exchange statistics of the anyon types match those in Eq. (74). The short string operators in Eq. (79), in fact, account for all of the anyon types of the DS stabilizer code.21 It is\n21This can be verified by computing the dimension of the logical subspace on a torus. Using the notation in Section 4.1, there are NQ = 3P qudits in total. As for the stabilized qudits, each stabilizer Z2p and Ce term gives an order 2 constraint, so there are 32 P stabilized qudits from these terms. Each Bp term gives an order 4 constraint, but the product of all B2p is equivalent to a product of Z2p . Therefore, P \u2212 12 stabilized qudits are from the Bp terms. Lastly, Av may seem to give an order 4 constraint, but A2v can be generated from Bp and Ce. Thus, each Av gives only one order 2 constraint. Moreover, the product of all Av is proportional to the identity, so there are 12 P \u2212 1 2 stabilized qudits from Av. This gives us\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 40\nimportant to observe that the logical operators in Eq. (71) are products of the semion string operators W se .\nWe gauge out the antisemion by defining a topological subsystem code whose gauge group is generated by the stabilizers of the DS stabilizer code and the short string operators of the s\u0304 anyon type in Eq. (79). The intuition is that, since the antisemions braid nontrivially with themselves, the short string operators fail to commute with antisemion string operators, in agreement with Eq. (27). As a consequence, the antisemion string operators cannot represent anyon types in the topological subsystem code, because they fail to commute with gauge operators along the length of the string. The gauge group resulting from gauging out the antisemions is:\nG = \u2329\n, , , , Z2 \u232a . (80)\nWe have not included the edge terms Ce as generators, since they are generated by the antisemion short string operators. Furthermore, the vertex term can be generated by the other gauge generator, and the plaquette term can be simplified by multiplying with the antisemion short string operators. This gives us the gauge group introduced the previous section:\nG \u2261 \u2329\n, , , Z2 \u232a . (81)\nNote that one could subsequently apply the transformation in Eq. (66) to the horizontal edges and rewrite the model on a hexagonal lattice. This makes it apparent that the chiral semion subsystem code can be constructed from the Z(1)4 subsystem code by gauging the 1-form symmetry associated to the closed string operators of the transparent boson."
        },
        {
            "heading": "6 Subsystem codes from general Abelian anyon theories",
            "text": "We now generalize the constructions of topological subsystem codes in Sections 4 and 5 to arbitrary Abelian anyon theories. In particular, we show that, given any Abelian anyon\nNS = 3P \u2212 1. According to Eq. (44), the number of logical qudits is then: NL = NQ \u2212 NS = 1. This means that the logical subspace is four dimensional. The string operators of the anyon types s and s\u0304 along non-contractible paths already account for a four-dimensional logical subspace, so there are no other anyon types in the stabilizer code.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 41\ntheory A, we can construct a topological subsystem code characterized by A.22 Similar to the constructions in Sections 4 and 5, the first step is to identify a topological stabilizer code whose anyon theory includes the anyon types of A. The second step is to then \u201cgauge out\u201d a subset of anyon types such that the remaining anyon types are exactly those of A. We discuss the procedure for gauging out anyon types in more detail in Section 6.3.\nIn Section 6.1, we give a complete parameterization of the data that characterizes Abelian anyon theories. In Section 6.2, we construct a topological stabilizer code based on the data of a chosen Abelian anyon theory A, such that the anyon theory of the topological stabilizer code includes A. Finally, in Sections 6.3, we gauge out particular anyons of the topological stabilizer code to obtain a topological subsystem code characterized by A. By comparing the total number of qudits to the number of stabilized qudits, gauge qudits, and logical qudits, we verify that the topological subsystem code is indeed described by the anyon theory A. In the subsequent section, Section 7, we give further examples of our construction for simple Abelian anyon theories."
        },
        {
            "heading": "6.1 General Abelian anyon theories",
            "text": "As described in Section 3.2, an Abelian anyon theory A is fully determined by two pieces of data: (i) a finite Abelian group A, which specifies the anyon types and their fusion rules, and (ii) a function \u03b8 : A \u2192 U(1), which encodes the exchange statistics. Equivalently, an Abelian anyon theory can be specified by a set of generators for the group A along with their exchange statistics and mutual braiding relations. The statistics of every other anyon type can then be recovered from the statistics and braiding relations of the generators using the identity in Eq. (26). This leads to the following parameterization of an arbitrary Abelian anyon theory, which we use throughout this section.\n\u2022 The finite Abelian group A takes the general form A = \u220fMi ZNi , and without loss of generality, we assume that each Ni is a power of a prime. We define a generating\nset of anyon types {ai}Mi=1 such that ai generates the factor ZNi .\n\u2022 The statistics of the generators take the form:23\n\u03b8(ai) = e 2\u03c0i Ni ti , (82)\n22Note that, in some cases, the anyon theory A is already equivalent to the anyon theory of a topological stabilizer code. This is the case if A is modular and can be realized in a system that admits a gapped boundary (to the vacuum), as shown in Ref. [20]. For such an anyon theory, we can define a topological subsystem code whose gauge group is simply the stabilizer group of the associated topological stabilizer code in Ref. [20]. This gives a topological subsystem code characterized by A, albeit with a trivial gauge subsystem HG.\n23See Appendix F of Ref. [51].\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 42\nwhere ti is half-integer valued if Ni is even, and integer valued if Ni is odd:\nti \u2208 {0,\u00b1 1 2 ,\u00b11, . . .} if Ni is even,\n{0,\u00b11,\u00b12, . . .} if Ni is odd. (83)\n\u2022 The braiding relations between the generators ai and aj with i \u0338= j take the form:\nB\u03b8(ai, aj) = e 2\u03c0i Nij pij , (84)\nwhere Nij is the greatest common divisor of Ni and Nj, and {pij}i \u0338=j is a set of integers satisfying pij = pji.\nThis means that a general Abelian anyon theory can instead be specified by the following three pieces of data (i) a finite Abelian group A = \u220fMi=1 ZNi , (ii) a set of half integers {ti}Mi=1, which specify the statistics of the generators, and (iii) a set of integers {pij}i \u0338=j satisfying pij = pji, which determine the braiding relations of the generators. We find it convenient to further define pii to be: 24\npii \u2261 \u230ati\u230b. (85)\nNote that we recover the Z(1)4 anyon theory with A = Z4 and t = 1, while the chiral semion anyon theory is obtained by A = Z2 and t = 1/2. For these examples, there is only a single generator, so we do not need to specify pij."
        },
        {
            "heading": "6.2 Construction of twisted quantum doubles",
            "text": "Given an Abelian anyon theory A specified by the dataA = \u220fMi=1 ZNi , {ti}Mi=1, and {pij}i \u0338=j, our first objective is to find a topological stabilizer code that includes A as a subtheory. In Ref. [20], it was shown that every modular Abelian anyon theory that admits a gapped boundary (to the vacuum) can be realized by a Pauli stabilizer Hamiltonian. This class of Abelian anyon theories coincides with those known as the Abelian twisted quantum doubles (TQDs) [52\u201354]. This implies that it is sufficient to look for an Abelian TQD that includes A as a subtheory, since then the corresponding topological stabilizer code, referred to as the TQD stabilizer code in Ref. [20], is characterized by an anyon theory containing A. To supplement the discussion below, we provide a review of Abelian TQDs in Appendix G.\nAn Abelian TQD that includes the anyon theory A as a subtheory can be motivated by constructing a quasi-two-dimensional Walker-Wang model based on A, as described in Appendix H. To streamline the presentation, however, we simply state the associated\n24Here, we have used the floor function \u230a\u00b7\u230b, which satisfies \u230ati\u230b = ti, if ti is an integer, and \u230ati\u230b = ti\u22121/2, if it is a half-integer.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 43\nAbelian TQD here. The particular TQD decomposes into a stack of M decoupled TQDs, where the TQD in the ith layer is characterized by the group ZNi and an integer:25\nni \u2261 0 if ti = 0 (mod 1),Ni 2 if ti = 1 2 (mod 1).\n(86)\nWe take the integers nij, defined in Appendix G, to be trivial (i.e., nij = 0, for all i, j). As described in Appendix G, the anyon types of this TQD are generated by the sets of anyon types {ci}Mi=1 and {\u03c6i}Mi=1, which can be interpreted as the gauge charges and choices of elementary fluxes, respectively. The generators satisfy the fusion rules:\ncNii = 1, \u03c6Nii = 1, (87)\nand their exchange statistics and braiding relations are given by (for i \u0338= j):\n\u03b8(ci) = 1, \u03b8(\u03c6i) = e 2\u03c0ini N2 i , B\u03b8(\u03c6i, ci) = e 2\u03c0i Ni , B\u03b8(\u03c6i, cj) = 1. (88)\nNote that the identity in Eq. (26) can be used in conjuction with the data above to recover the exchange statistics for an arbitrary composite of gauge charges and elementary fluxes.\nTo see that this anyon theory contains A as a subtheory, we consider the following anyon type ai, defined for each layer i:\nai = \u03c6i i\u220f\nj=1 c\npjiNj Nij j . (89)\nFirst of all, we notice that the anyon types {ai}Mi=1 generate the group A = \u220fM\ni=1 ZNi . This is because each anyon type ai has order Ni, which follows from the fact that NiNj/Nij is a multiple of both Ni and Nj. Second, using the data given in Eq. (88) and the identity in Eq. (26), we compute the exchange statistics and braiding relations of ai and aj with i \u0338= j to be:\n\u03b8(ai) = e 2\u03c0i Ni ti , B\u03b8(ai, aj) = e 2\u03c0i Nij pij . (90)\nTherefore, the anyon theory generated by {ai}Mi=1 is precisely the anyon theory A defined by A, {ti}Mi=1, and {pij}i \u0338=j!\nFor the construction below, we find it convenient to also introduce the anyon types {\u03c6i}Mi=1 of the Abelian TQD, which can be interpreted as an alternative choice of elementary flux for each layer i. The anyon type \u03c6i has the fusion rules:\n\u03c6Nii = 1, \u03c6i \u00d7 \u03c6i = c 2ni Ni i , (91)\n25We note that the anyon theory for ni = Ni/2 is that of a U(1)Ni \u00d7 U(1)\u2212Ni Chern-Simons theory.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 44\nand the exchange statistics and braiding relations of \u03c6i are:\n\u03b8(\u03c6i) = \u03b8(\u03c6i)\u2217, B(\u03c6i, \u03c6j) = 1, B\u03b8(\u03c6i, cj) = B\u03b8(\u03c6i, cj)\u2217. (92)\nFor example, if we take A to be the chiral semion anyon theory, then c is the boson ss\u0304, \u03c6 is the semion s, and \u03c6 is the antisemion s\u0304.\nAt this point, we could write down an explicit TQD stabilizer code following Ref. [20]. However, for the construction of topological subsystem codes, we find it convenient to use a TQD stabilizer code that differs from the TQD stabilizer code of Ref. [20]. The important difference is that (if there are layers with ni = Ni/2) the stabilizer codes in this work have ancillary qudits, relative to those of Ref. [20]. More technically, the difference is that the TQD stabilizer codes in Ref. [20] are constructed by condensing certain anyon types, whereas the TQD stabilizer codes here are obtained by gauging the corresponding 1-form symmetry. Specifically, to gauge a ZN 1-form symmetry represented by the string operators for an anyon type a, we first add ancillary degrees of freedom that transform under a ZN 0-form symmetry. We then condense the anyon type a bound to a 0-form symmetry charge. The difference between condensing a and gauging the associated 1-form symmetry is highlighted in Section V of Ref. [20]. In the present text, the ancillary qudits are valuable in the next step of the construction, where we define short string operators to gauge out certain anyon types.\nTo write the general form for the TQD stabilizer code with M layers, we first focus on the individual layers. If the ith layer is characterized by ni = 0, then the TQD stabilizer code for the ith layer is precisely a ZNi TC. We define the ZNi TC on a square lattice with an Ni-dimensional qudit on each edge, as shown in Fig. 16. Explicitly, the corresponding Hamiltonian for the ZNi TC is:\nH (i) 0 \u2261 \u2212 \u2211 v ATCv,i \u2212 \u2211 p BTCp,i + h.c., (93)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 45\nwith the vertex term ATCv,i and plaquette term B TC p,i pictured below:\nATCv,i \u2261 , BTCp,i \u2261 . (94)\nHere, we have labeled the Pauli operators by the layer i. These can be interpreted as string operators created by moving an m or e anyon type counterclockwise around a loop, respectively. The e and m anyon types play the role of the charge ci and elementary flux \u03c6i of the ith layer (with ni = 0). The anyon type m\u22121 then corresponds to the choice of elementary flux \u03c6i. The short string operators that move the ci and \u03c6i anyon types are:\nW cie \u2261 , , W\u03c6ie \u2261 , , (95)\nwhere the subscript e labels an edge.\nNext, if the ith layer is instead characterized by ni = Ni/2, then the TQD stabilizer code in the ith layer is a generalization of the DS stabilizer code in Eq. (76). In particular, we define the TQD stabilizer code on a square lattice with an N2i -dimensional qudit at each edge and plaquette, as illustrated in Fig. 17. The Hamiltonian is a sum of vertex terms Av, plaquette terms Bp, edge terms Ce, and Pauli operators Z Ni p,i defined on the plaquette qudits labeled by a plaquette p and layer i:\nH (i) Ni/2 \u2261 \u2212 \u2211 v Av,i \u2212 \u2211 p Bp,i \u2212 \u2211 e Ce,i \u2212 \u2211 p ZNip,i + h.c. (96)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 46\nHere, the terms Av,i, Bp,i, and Ce,i are pictorially represented as:\nAv,i \u2261 , Bp,i \u2261 ,\nCe,i \u2261 , .\n(97)\nThis model is constructed from a ZN2i TC, where the vertex term can be interpreted as a counterclockwise loop of string operator for an eNi/2m anyon type. In the ZN2i TC, the edge terms correspond to short string operators for eN 2 i /2mNi anyon types bound to ZNi charges on the plaquettes. Here, the ZNi charges are the Z\u00b1Nip operators on the plaquettes. These are a consequence of gauging the 1-form symmetry corresponding to the boson eN 2 i /2mNi and do not appear in the models of Ref. [20].\nThe short string operators for the anyon types \u03c6i = e Ni 2 m and \u03c6i = e Ni 2 m\u22121 can be\nwritten as:\nW\u03c6ie \u2261 , , W\u03c6ie \u2261 , . (98)\nNote that for later convenience, the short string operators for \u03c6i have been chosen so that they commute with Av,i, Bp,i, and Ce,i. Using Eq. (25), we can verify that the exchange statistics of \u03c6i and \u03c6i are \u03b8(\u03c6i) = \u03b8(\u03c6i)\u2217 = e\u03c0i/Ni . Furthermore, since W\u03c6ie and W\u03c6ie commute, \u03c6i and \u03c6i have trivial braiding relations, as expected from Eq. (92). The gauge charge ci is given by the product \u03c6i \u00d7\u03c6i, and its short string operators can be written as:\nW cie \u2261 , , (99)\nwhere Ie denotes the identity on the edge e. Note that long string operators formed from products of W cie and W \u03c6i e W \u03c6i e differ only by stabilizers along the string operator and local operators near the endpoints.\nPutting Eqs. (93) and (96) together, we obtain a TQD stabilizer code characterized by an anyon theory that contains A as a subtheory. We write the corresponding Hamiltonian\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 47\nof the TQD stabilizer code as:\nHTQD \u2261 M\u2211\ni=1 H(i)ni . (100)"
        },
        {
            "heading": "6.3 Gauging out anyon types",
            "text": "In the next step of the construction, we gauge out a set of anyon types, denoted by A\u0304. At the level of the anyon theory, gauging out A\u0304 amounts to removing all of the anyon types that braid nontrivially with some anyon type in A\u0304. As mentioned in Section 4.2, this should be distinguished from condensing an anyon type, since, in contrast to anyon condensation, (i) we are free to gauge out anyon types that do not have bosonic statistics, and (ii) we do not identify the gauged out anyon types with the trivial anyon type.\nAt an operational level, we gauge out the anyon types in A\u0304 by defining a new topological subsystem code, whose gauge group is generated by the stabilizers of the TQD stabilizer code and a certain set of short string operators for the anyon types in A\u0304. In other words, we append short string operators for the anyon types in A\u0304 to the (Abelian) gauge group of the TQD stabilizer code. We note that the short string operators need to be chosen so that they commute with the string operators for the anyon types in A along closed paths. This motivates the introduction of ancillary plaquette degrees of freedom and the peculiar choice of short string operator for \u03c6i in Eq. (98) \u2013 i.e., the extra structure ensures that the short string operators commute with the string operators for the ai anyon types.\nAdding the short string operators of the anyon types in A\u0304 to the gauge group of the TQD stabilizer code has two notable effects. The first is that the short string operators of the anyon types in A\u0304 fail to commute with the stabilizers that correspond to loops of string operators of anyon types that braid nontrivially with the anyon types of A\u0304. Consequently, any such stabilizer is not included in the stabilizer group of the topological subsystem code after gauging out the anyon types. We argue below that the anyon types in A\u0304 in fact braid nontrivially with all of the anyon types of the TQD other than those in A. In terms of the anyonic 1-form symmetries defined in Appendix B, the short string operators employed in this step break the anyonic 1-form symmetries associated to all of the anyon types outside of A. The second effect is that the logical operators of the TQD stabilizer code that correspond to moving the anyon types in A\u0304 along non-contractible paths become products of gauge operators in the resulting topological subsystem code. If the anyon type is transparent in A\u0304, then the logical operator is converted into a nonlocal stabilizer. Hence, the corresponding anyon type of the TQD becomes a transparent anyon type in the topological subsystem code.\nMore concretely, for the Z(1)4 subsystem code in Section 4, the anyon types of A\u0304 are generated by the e3m anyons of the Z4 TC. Thus, the gauge group of the subsystem code is generated by the stabilizer group of the Z4 TC and short string operators for the e3m\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 48\nanyon types. For the chiral semion subsystem code in Section 5, A\u0304 is taken to be the subtheory generated by the antisemion of the DS stabilizer code. Therefore, the gauge group obtained from gauging out A\u0304 is generated by the stabilizers of the DS stabilizer code and a set of short string operators for the antisemions.\nWe now specify the anyon theory A\u0304 that needs to be gauged out to build a topological subsystem code characterized by A. We take A\u0304 to be the anyon theory generated by the anyon types {ai}Mi=1, where ai in the ith layer is defined as:\nai = \u03c6i M\u220f j=i c pij Nj Nij j . (101)\nWe claim that the only anyon types that remain after gauging out the anyon types of A\u0304 are those of A, generated by the anyon types {ai}Mi=1 with ai given in Eq. (89):\nai = \u03c6i i\u220f\nj=1 c\npjiNj Nij j . (102)\nIt can be checked using Eqs. (88) and (92) that ai and aj indeed have trivial braiding relations, for any choice of i and j. Note that gauging out ai has the same effect as gauging out (ai)\u22121. In Sections 4.2 and 5.2, we gauged out (ai)\u22121 to simplify the notation. We argue that all of the anyon types outside of A have nontrivial braiding relations with the anyon types in A\u0304. This is because if an anyon type b is composed of gauge charges ci, it must braid non-trivially with some ai. If b instead contains a single elementary flux \u03c6i and braids trivially with all ai, then it must be the anyon type ai. This is because, if b is not equal to ai, then b \u22121ai is a product of gauge charges that braids trivially with all of the A\u0304 anyon types \u2013 a contradiction. Similarly, if b contains multiple elementary fluxes and braids trivially with ai it must be a product of anyon types in A. The uniqueness of the product of A anyon types holds for the same reason as above.\nWe next turn to the lattice construction of the topological subsystem code. We define the gauge group G after gauging out the anyon types A\u0304 to be the group generated by stabilizers of the TQD in Eq. (100) and certain short string operator for the anyon types {ai}Mi=1. In particular, we take the short string operators for ai to be:\nW aie = W\u03c6ie M\u220f j=i (W cje ) pij Nj Nij . (103)\nThese can be represented pictorially as:\nW aie = , , (104)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 49\nwhere the plaquette Pauli operators in the parentheses should be ignored if ni = 0, and the operator Z\u0302i is given by:\nZ\u0302i \u2261 Znii \u220f\nj: j\u2265i, nj=0 Z\npij Nj Nij\nj\n\u220f j: j\u2265i, nj=Nj/2 Z pij N 2 j Nij j . (105)\nTo make the gauge group G of the topological subsystem code explicit, we separate the generators of the gauge group by layers. We define Gi to be the group of gauge operators associated to the ith layer, and represent it graphically as:\nGi \u2261 \u2329\n, , , , (ZNii ) \u232a . (106)\nSimilar to the expression for the string operators in Eq. (104), the plaquette Pauli operators in parentheses are meant to be ignored if ni = 0. The generating set implicitly includes the terms for each vertex, plaquette, and edge. It also includes the requisite root of unity \u03c9 or \u221a \u03c9 for odd- or even-dimensional qudits, respectively (see Section 2.1). Note that we have not included the edge stabilizers Ce,i of the TQD stabilizer code, since these can generated by W aie and the plaquette Pauli operators Z Ni i . We can further simplify Gi, due to the fact that the vertex term is redundant. The group of gauge operators in the ith layer is more simply given by:\nGi = \u2329\n, , , (ZNii ) \u232a . (107)\nThe full gauge group G, obtained from gauging out the anyon types in A\u0304, is then:\nG = \u2329 {Gi}Mi=1 \u232a . (108)\nSimilar to the gauge group, we specify the stabilizer group S by separating the generators by layers. We denote the group of locally generated stabilizers associated to the ith layer by S\u0303i. For ni = 0, the subgroup S\u0303i is:\nS\u0303i \u2261 \u2329 \u232a , (109)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 50\nwhile for ni = Ni/2, it is:\nS\u0303i = \u2329\n, , ,\n\u232a . (110)\nHere, we have used the operator Z\u030ci, which is defined as:\nZ\u030ci \u2261 Znii \u220f\nj: j\u2264i, nj=0 Z\npjiNj Nij\nj\n\u220f j: j\u2264i, nj=Nj/2 Z pjiN 2 j Nij j . (111)\nThe full group of locally generated stabilizers S\u0303 is:\nS\u0303 = \u2329 {S\u0303i}Mi=1 \u232a . (112)\nIt is important to note that, for ni = Ni/2, our particular choice of short string operators for ai ensure that the stabilizer group contains the plaquette terms and edge terms of the TQD stabilizer code. This is necessary so that the vertex terms (on the far left of Eq. (110)) only generate an order Ni constraint, due to the relations with the other stabilizer generators.\nIf the topological subsystem code is defined on a torus, there are nonlocal stabilizers or nontrivial bare logical operators. These can be represented by powers of string operators of the form:\n, (113)\nwhere the string operator implicitly wraps around a non-contractible path of the torus. Importantly, the vertex terms of the stabilizer group and the nonlocal stabilizers or nontrivial bare logical operators are generated by loops of string operators for the anyon type ai. This is made explicit by defining the following short string operators:\nW aie \u2261 , . (114)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 51\nIt can be checked that these short string operators indeed produce string operators for the anyon type ai by using the methods in Section 3.2 for computing the fusion rules and exchange statistics.\nFinally, to verify that we have accounted for all of the stabilizers, gauge operators, and logical operators, we compare the total number of qudits NQ to the number of stabilized qudits NS, gauge qudits NG, and logical qudits NL. Similar to the derivation of Eq. (46) in Section 4.1, these satisfy the consistency condition:\nNS + NG + NL = NQ. (115)\nWe simplify the counting in what follows by considering the M layers independently. We denote the number of qudits, stabilized qudits, gauge qudits, and logical qudits associated to the ith layer by N(i)Q , N (i) S , N (i) G , and N (i) L , respectively. According to Eq. (115), these must obey the condition:\nM\u2211 i=1 ( N(i)S + N (i) G + N (i) L ) = M\u2211 i=1 N(i)Q . (116)\nFor the purpose of counting, we assume that the subsystem code is defined on a torus.\nWe start with the case in which the ith layer is characterized by ni = 0. Each plaquette has two qudits, so the number of Ni-dimensional qudits in the ith layer is:\nN(i)Q = 2P, (117)\nwhere P is the number of plaquettes. We next count the number of stabilized qudits N(i)S associated to the ith layer, starting with the nonlocal stabilizers. To this end, we let qi be the smallest integer such that the string operator for aqii along a non-contractible path represents a nonlocal stabilizer. The corresponding nonlocal stabilizer stabilizes a qudit of dimension Ni/qi. In terms of Nidimensional qudits, the number of qudits stabilized by the string operator is:\nW(i)S \u2261 logNi(Ni/qi) = 1 \u2212 logNi(qi). (118)\nOn a torus, the nonlocal stabilizers are generated by two string operators (see Fig. 7), so the number of qudits stabilized by nonlocal stabilizers is thus 2W(i)S . As for the local stabilizers, there is one order Ni local stabilizer generator for each plaquette. However, the product of all of these stabilizers is the identity. Therefore, there are Ni global relations amongst the local generators. This means that there are P \u2212 1 stabilized qudits from the local stabilizers, which gives us the total number of stabilized qudits:\nN(i)S = P \u2212 1 + 2W (i) S . (119)\nNow, we count the number of gauge qudits. There are three independent gauge generators for each plaquette, each of which has order Ni. Since the plaquette gauge generators\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 52\nall multiply to the identity, one of them is redundant. This tells us that the number of Ni-dimensional gauge qudits is:\nN(i)G = [ (3P \u2212 1) \u2212 (P \u2212 1 + 2W(i)S ) ] /2 = P \u2212 W(i)S . (120)\nIn the brackets, we have computed the number of independent gauge generators minus the number of independent generators of the stabilizer group. We then divide by two, since the gauge generators form the complete operator algebra, i.e., the Pauli X and Pauli Z operators for the gauge qudits.\nLastly, we count the number of logical qudits. The nontrivial bare logical operators associated to the ith layer are represented by string operators that move the anyon type ai around a non-contractible path. By assumption, the qith power of this string operator is a (nonlocal) stabilizer. Therefore, the logical operators, must have order qi. This tells us that the number of logical qudits, in terms of Ni-dimensional qudits, is:\nN(i)L = logNi(qi). (121)\nUsing that W(i)S + N (i) L = 1, we see that the counting in the ith layer satisfies:\nN(i)S + N (i) G + N (i) L = (P \u2212 1 + 2W (i) S ) + (P \u2212 W (i) S ) + N (i) L = 2P = N (i) Q . (122)\nWe next turn to the case in which the ith layer is characterized by ni = Ni/2. Although the qudits have dimension N2i , we find it convenient to count in terms of Ni-dimensional qudits. This means, for example, that a single N2i -dimensional qudit is counted as two Ni-dimensional qudits. With this, there are six Ni-dimensional qudits for each plaquette, giving us the total number of qudits:\nN(i)Q = 6P. (123)\nFor ni = Ni/2, there are no nonlocal stabilizers. This is because, for any qi that is not a multiple of Ni, the anyon type ai braids nontrivially with a qi i . This implies that string operators formed by moving aqii fail to commute with those formed by moving ai along paths with odd intersection number. To see that ai braids nontrivially with a qi i , we compute the braiding relations of ai and a qi i using the identity in Eq. (26). This tells us that the braiding relations are:\nB\u03b8(ai, aqii ) = e 2\u03c0i Ni qi(2\u230ati\u230b+1). (124)\nFor the braiding relations to be trivial, qi needs to satisfy:\nqi(2\u230ati\u230b + 1) = \u03b1Ni, (125)\nfor some nonnegative integer \u03b1. Dividing both sides by qi, we find:\n2\u230ati\u230b + 1 = \u03b1Ni/qi. (126)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 53\nTherefore, the integer \u03b1Ni/qi must be odd. By assumption, Ni is a power of 2, so qi must be a multiple of Ni. This implies that a qi i is the trivial anyon type.\nHence, the stabilizer group is generated by local stabilizers, and we only need to count the number of qudits stabilized by local stabilizers. We find that there are four stabilized qudits of dimension Ni for every plaquette, corresponding to the vertex stabilizer, plaquette stabilizer, and two edge stabilizers. Note that the vertex stabilizer has order N2i , but its Nith power is a product of plaquette stabilizers and edge stabilizers. There is one order Ni global relation, however, since the product of all of the vertex stabilizers is the identity. This means that the number of stabilized Ni-dimensional qudits is:\nN(i)S = 4P \u2212 1. (127)\nNext, there are eight order Ni gauge generators for each plaquette \u2013 with one global relation, given by multiplying the Nith power of the plaquette stabilizer on every plaquette. Thus, the number of gauge qudits is:\nN(i)G = [(8P \u2212 1) \u2212 (4P \u2212 1)] /2 = 2P. (128)\nLastly, there are two order Ni logical operators, meaning that there is only one Ni-\ndimensional logical qudit. Therefore, we have N(i)L = 1, which gives us:\nN(i)S + N (i) G + N (i) L = (4P \u2212 1) + 2P + 1 = 6P = N (i) Q . (129)\nWe have now shown that the following condition is satisfied for each layer:\nN(i)S + N (i) G + N (i) L = N (i) Q . (130)\nAfter summing over the M layers, as in Eq. (116), we see that the consistency condition in Eq. (115) is satisfied. This suggests that we have correctly counted the nontrivial bare logical operators and nonlocal stabilizers of the topological subsystem code. Consequently, the anyon types that remain after gauging out the anyon types {ai}Mi=1 are precisely the anyon types forming the subtheory A."
        },
        {
            "heading": "7 Further examples of topological subsystem codes",
            "text": "In this section, we describe examples of topological subsystem codes, derived by following the general construction in the previous section. The examples in Sections 7.1, 7.2, and 7.4 are defined on qubits and have been discussed in Refs. [15\u201318, 22, 32, 55]. The subsystem code in Section 7.3 is based on the generalized honeycomb models of Ref. [49]. To the best of our knowledge, the subsystem code in Section 7.5 is novel and has not yet been discussed in the literature.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 54\n7.1 Z(0)2 subsystem code The Z(0)2 subsystem code is characterized by an anyon theory with Z2 fusion rules and anyon types labeled by {1,m}. The anyon type m is a boson with trivial mutual braiding relations:\n\u03b8(m) = 1, B\u03b8(m,m) = 1. (131)\nTherefore, m is transparent, and the Z(0)2 anyon theory is non-modular. As the notation suggests, the Z(0)2 anyon theory is equivalent to the subtheory generated by the m anyon type of the Z2 TC. Indeed, according to Section 6, the construction proceeds by gauging out the m anyon type in a Z2 TC.\nThe Z(0)2 subsystem code is defined on a square lattice with a qubit at each edge. The gauge group is given by:\nG \u2261 \u2329 i, , ,\n\u232a . (132)\nThe stabilizer group is generated by the string operators for the m anyon types of the Z2 TC, for example:\n, . (133)\nSince the m anyon type is transparent, this topological subsystem code has nonlocal stabilizers created by moving m around non-contractible paths. There are, however, no opaque anyon types, so the topological subsystem code does not have any logical operators. Consequently, the logical subsystem is trivial, and the subsystem code does not encode any qubits. In Ref. [18], this subsystem code is referred to as the \u2018subsystem toric code\u2019. However, this should not be confused with the two-dimensional subsystem toric code of Ref. [26].\nThe parameter space of Hamiltonians defined by the subsystem code contains Hamil-\ntonians of the form:\nH{Je,Jp} \u2261 \u2211\ne\u2208Eh Je + \u2211 e\u2208Ev Je + \u2211 p\n, (134)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 55\nwhere Eh and Ev denote the sets of horizontal edges and vertical edges, respectively. Although the anyon theory has a nontrivial anyon type, it is a transparent boson. As such, it does not enforce any anyonic excitations for the Hamiltonians. Indeed, by taking the coefficients of the edge terms to be sufficiently large, we see that the resulting Hamiltonian has trivial topological order. Note that this is the Hamiltonian of a pure Z2 lattice gauge theory with Gauss\u2019s law manifesting as a 1-form symmetry of the Hamiltonians in the parameter space.\n7.2 Z(1)2 subsystem code Similar to the Z(0)2 subsystem code, the Z (1) 2 subsystem code is based on an anyon theory with Z2 fusion rules. However, in this case, the nontrivial anyon type, denoted by \u03c8, is a transparent fermion:\n\u03b8(\u03c8) = \u22121, B\u03b8(\u03c8, \u03c8) = 1. (135)\nThe Z(1)2 anyon theory can be viewed as the subtheory of the Z2 TC generated by the em anyon type. Accordingly, the general construction in Section 6 tells us that the subsystem code can be derived from a Z2 TC by gauging out the em anyon type. In more detail, the Z(1)2 subsystem code is defined on a square lattice with a qubit on each edge. The gauge group is generated by the plaquette term of the Z2 TC as well as short string operators for the em anyon types:\nG \u2032 \u2261 \u2329 i, , ,\n\u232a . (136)\nThe stabilizer group is then generated by the closed string operators for \u03c8, such as:\n, . (137)\nThere are no logical operators, because \u03c8 has trivial braiding relations with itself. This implies that the string operators cannot form the Pauli X and Pauli Z operators of a logical subsystem.\nThe gauge group G \u2032 can be put into a more familiar form by multiplying the plaquette term by the edge terms and conjugating the gauge generators by a Hadamard gate on all\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 56\nof the horizontal edges. This gives us the gauge group G:\nG \u2261 \u2329 i, , ,\n\u232a . (138)\nFurthermore, we map the square lattice to a hexagonal lattice by redefining the lattice according to Fig. 12. The gauge group can then be written as:\nG = \u2329 i, , ,\n\u232a . (139)\nWe now see that the gauge generators are nothing other than the Hamiltonian terms of the honeycomb model in Ref. [32]! Moreover, the stabilizers are precisely the conserved quantities that were identified in Ref. [32].\nTo make the connection to the honeycomb model explicit, we consider the family of Hamiltonians defined by the Z(1)2 subsystem code. For certain choices of parameters, the Hamiltonians belonging to the parameter space take the form:\nH{Je} = \u2212 \u2211\ne\u2208x-edges Je \u2212 \u2211 e\u2208y-edges Je \u2212 \u2211 e\u2208z-edges Je . (140)\nHere, we have labeled the edges as x-edges, y-edges, and z-edges according to Fig. 9. This family of Hamiltonians includes the honeycomb model of Ref. [32]. We note that all of the gapped Hamiltonians in the parameter space must admit an emergent fermion. This can be checked explicitly, given that the Hamiltonians are exactly solvable and can be mapped to a system of non-interacting fermions, as demonstrated in Ref. [32]. Remarkably, by tuning the coefficients Je and introducing perturbations that break the time-reversal symmetry, the Hamiltonians realize all of the anyon theories of the 16-fold way.\n7.3 Z(1)N subsystem codes This next example reproduces the generalized honeycomb models of Ref. [49]. The subsystem codes are characterized by the Z(1)N anyon theory, which has anyon types that form a group ZN under fusion. We label the anyon types as {1, a, a2, . . . , aN\u22121}. The exchange statistics and braiding relations are given by:\n\u03b8(ap) = e2\u03c0ip2/N , B\u03b8(ap, aq) = e4\u03c0ipq/N , (141)\nfor p, q in ZN . This matches the subtheory generated by em in a ZN TC. According to the prescription in Section 6, the corresponding subsystem code is built from a ZN TC by gauging out the e\u22121m anyon type.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 57\nExplicitly, the subsystem code is defined on a square lattice with an N -dimensional\nqudit on each edge. The gauge group produced by the construction in Section 6 is:\nG \u2032 \u2261 \u2329\n, ,\n\u232a . (142)\nUp to roots of unity, the bare logical group is generated by em string operators supported on closed paths, such as:\n, . (143)\nIf N is odd, then all of the anyon types are opaque. Consequently, the subsystem code encodes a single N -dimensional qudit on a torus. If N is even, on the other hand, then the aN/2 anyon type is transparent. This means that the subsystem code only encodes an N/2-dimensional qudit on a torus. In direct analogy to the construction of the Z(1)4 subsystem code, the gauge group can be simplified by multiplying the plaquette gauge generator by the edge gauge generators. We also apply the following Clifford transformation on the horizontal edges:\nF : X 7\u2192 Z, Y 7\u2192 Z\u2020X, Z 7\u2192 X\u2020. (144)\nFinally, by mapping the system to a hexagonal lattice (Fig. 12), we obtain the gauge group:\nG \u2261 \u2329\n, ,\n\u232a . (145)\nThis corresponds to Hamiltonians of the form:\nH{Je} = \u2212 \u2211\ne\u2208x-edges Je \u2212 \u2211 e\u2208y-edges Je \u2212 \u2211 e\u2208z-edges Je , (146)\nwhich, for certain coefficients, gives the model in Ref. [49]."
        },
        {
            "heading": "7.4 Three-fermion subsystem code",
            "text": "We now describe a topological subsystem code based on the three-fermion (3F) anyon theory. Using notation from Ref. [55], we label the 3F anyon types as {1, \u03c8r, \u03c8b, \u03c8g}.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 58\nThese generate a Z2 \u00d7Z2 group under fusion, where all three nontrivial anyon types have fermionic exchange statistics:\n\u03b8(1) = 1, \u03b8(\u03c8r) = \u22121, \u03b8(\u03c8b) = \u22121, \u03b8(\u03c8g) = \u22121. (147)\nThe nontrivial braiding relations are then captured by the following, for any i, j in {r, b, g}:\nB\u03b8(\u03c8i, \u03c8j) = \u22121. (148)\nThis anyon theory appears as a subtheory of two copies of Z2 TC [17]. To see this, let us label the anyon types of the two Z2 TCs by:\n{1, e1,m1, \u03c81} \u00d7 {1, e2,m2, \u03c82}, (149)\nwhere \u03c81 = e1m1 and \u03c82 = e2m2 are fermions. The anyon types can be relabeled as:\n{1, e1\u03c82, m1\u03c82, \u03c81} \u00d7 {1, \u03c81e2, \u03c81m2, \u03c82}, (150)\nwhich is equivalent to two copies of the 3F anyon theory. Thus, the construction of the 3F subsystem code proceeds by gauging out the \u03c81e2 and \u03c82 anyon types in two copies of Z2 TC.\nThe resulting 3F subsystem code is built on a square lattice with two qubits at each edge, as shown in Fig. 18. The gauge group is given by:\nG \u2261 \u2329 i, , , , , ,\n\u232a , (151)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 59\nwhere the blue operators and yellow operators act on the first and second qubit at the edge, respectively. We take the stabilizer group S to be generated by loops of e1\u03c82 and \u03c81 string operators supported along contractible paths:\nS \u2261 \u2329\n,\n\u232a . (152)\nThe nontrivial bare logical operators can be represented (up to products of stabilizers) by e1\u03c82 and \u03c81 string operators wrapped around non-contractible paths, such as:\n, .\n(153)\nOn a torus, the logical subsystem is composed of two qubits.\nWe note that the topological subsystem code of Refs. [15, 16] is also characterized by the 3F anyon theory. We expect that the two topological subsystem codes characterized by the 3F anyon theory can be mapped to one another using ancillary qubits and constantdepth Clifford unitaries. However, we do not work out the explicit mapping here. As observed in Ref. [16], subsystem codes characterized by the 3F anyon theory do not admit surface code implementations with rough and smooth boundaries. This is because the 3F anyon theory is chiral [see Eq. (68)] and as such, does not admit gapped boundaries (see also Ref. [16]). On a planar geometry, logical information can instead be stored and manipulated using twist defects, as described in Ref. [55].\nIt is interesting to note that, if the family of Hamiltonians H{JG} for the 3F subsystem code exhibits the 3F anyon theory for some choice of coefficients {JG}, then there is a potential route towards constructing a model in the E8 phase. In particular, we could first stack two copies of the system tuned to the 3F phase, which each have chiral central charge 4 modulo 8. We could then condense a Lagrangian subgroup (defined in Section G), leaving us with a system that has no anyonic excitations and a chiral central charge of 8. While there are existing models that belong to the 3F phase, the construction of a model in the E8 phase is complicated by string operators that do not have a simple form. In our case, the string operators for the fermions are Pauli operators that are well-localized along a path.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 60\n7.5 Zp \u00d7 Zp2 subsystem code The last family of examples that we would like to share is a topological subsystem code characterized by a non-modular anyon theory with Zp \u00d7 Zp2 fusion rules for prime p. We refer to this as the Zp \u00d7 Zp2 subsystem code. What makes this anyon theory interesting is that it cannot be decomposed into a stack of simpler anyon theories. This is distinct from modular Abelian anyon theories, which can always be decomposed into a stack of anyon theories whose fusion rules are either Zp or Z2n \u00d7 Z2n [43]. We label the generators of the Zp \u00d7Zp2 fusion group by a1 and a2, where a1 is order p, and a2 is order p 2. The exchange statistics and braiding relations of a1 and a2 are given by:\n\u03b8(a1) = \u03b8(a2) = 1, B\u03b8(a1, a2) = e2\u03c0i/p. (154)\nIntuitively, this anyon theory is the subtheory of the Zp2 TC generated by ep and m. Alternatively, it can be viewed as a Zp TC in which the diagonal Zp subgroup of the fusion group has been extended by a transparent boson. For the purpose of following the general construction in Section 6, however, we interpret the anyon theory as a subtheory belonging to a stack of a Zp TC and a Zp2 TC. The Zp \u00d7Zp2 subtheory is then generated by the anyon types m1 and e1m2, where m1 and e1 belong to the Zp TC, and m2 belongs to the Zp2 TC.\nBefore describing the construction of the subsystem code, we would like to argue that the anyon theory cannot be decomposed into simpler anyon theories. In particular, we show that there is no pair of Zp and Zp2 subgroups with the property that the generators braid trivially with one another and generate the full fusion group. All of the order p anyon types are of the form aj1a pk 2 for j, k \u2208 Zp, while all the remaining anyons (i.e., al1an2 for l \u2208 Zp and n \u2208 Z2p with n \u0338= 0 (mod p) are of order p2. The braiding between these two anyons is trivial only when B(aj1apk2 , al1an2 ) = e 2\u03c0i p\n(jn+pkl) = 1. Since n \u0338= 0 (mod p), this implies j = 0 (mod p). Thus, the only potential generators of the Zp subgroup is apk2 for k \u2208 Zp. However, these anyons are multiples of ak2 and therefore cannot form an independent Zp subgroup. To conclude, the anyon theory cannot be decomposed into an anyon theory with fusion group Zp times another with fusion group Zp2 .\nWe now turn to the construction of the Zp \u00d7 Zp2 subsystem code. The construction starts with a Zp TC and a decoupled Zp2 TC. These are defined on a square lattice with a p-dimensional qudit and a p2-dimensional qudit at each edge (Fig. 19). In terms of the parameters ti and pij in Section 6, the Zp \u00d7 Zp2 subtheory of interest is specified by t1 = t2 = 0, and p12 = p21 = 1. This tells us that we need to gauge out the anyon types m\u221211 e p 2 and m \u22121 2 . This gives us the following gauge group:\nG \u2261 \u2329\n, , , , ,\n\u232a , (155)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 61\nThe bare logical group is generated by small loops of string operators for m1 and e1m2:\n, , (156)\nas well as the corresponding string operators wrapped along non-contractible paths:\n, .\n(157)\nSince ap2 is transparent, the subsystem code encodes just two p-dimensional qudits on a torus."
        },
        {
            "heading": "8 Discussion",
            "text": "In this work, we constructed a Pauli topological subsystem code for every Abelian anyon theory, which includes non-modular anyon theories and those that do not admit a gapped boundary to a product state. Our construction started with a Pauli topological stabilizer code on composite-dimensional qudits, similar to those introduced in Ref. [20]. We then gauged out a set of anyon types, thereby converting the stabilizer code into a subsystem code characterized by a proper subtheory of the initial anyon theory. We demonstrated\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 62\nthat every Abelian anyon theory can be obtained from that of decoupled copies of TCs by condensing and gauging out anyon types (see also Ref. [56]). We provided several examples of our construction, including a Z(1)4 subsystem code characterized by a non-modular anyon theory, and a chiral semion subsystem code characterized by an anyon theory without gapped boundaries. To conclude, we comment on some additional structures of Pauli topological subsystem codes and describe a number of avenues for further investigation.\nClassification of TI Pauli topological subsystem codes\nFor Pauli topological stabilizer codes, there is a natural definition of two equivalent codes. We say two Pauli topological stabilizer codes are equivalent if they can be mapped to one another by a constant-depth Clifford circuit (CDCC) with ancillary qudits [17, 19]. This is motivated by the definition of topological order [57], in which two gapped Hamiltonians belong to the same topological phase of matter if their ground states can be related to one another by the finite-time evolution of a local Hamiltonian (using ancillary qudits). Since CDCCs capture the piece-wise time evolution of a local Hamiltonian, this means that if two Pauli topological stabilizer codes are equivalent, then their corresponding Hamiltonians belong to the same topological phase of matter.\nFor TI Pauli topological subsystem codes, however, the choice of equivalence relation is less straightforward. This is because Pauli topological subsystem codes do not necessarily correspond to a single gapped phase of matter, as they are generically associated to a parameter space of Hamiltonians. Therefore, we suggest two possible equivalence relations for classifying topological subsystem codes. The first is to adopt the equivalence relation of topological stabilizer codes and say that two TI Pauli topological subsystem codes are equivalent if they differ from one another by a CDCC with ancillary qudits. This is still natural to consider, given that CDCCs preserve the set of correctable errors of TI Pauli topological subsystem codes, up to a rescaling of the length \u2113S. Our work shows that, under this equivalence relation, TI Pauli topological subsystem codes are partially classified by Abelian anyon theories, since CDCCs are unable to change the associated anyon theory.\nThe second equivalence relation that we consider is designed to capture the properties of topological subsystem codes that are beyond those of topological stabilizer codes. In particular, we say two TI Pauli topological subsystem codes are equivalent if they can be mapped to one another by stacking with Pauli topological stabilizer codes and applying a CDCC. In this case, all Pauli topological stabilizer codes, including the TQD stabilizer codes of Ref. [20], belong to the trivial equivalence class. The subsystem TC in Ref. [26], for example, also belongs to the trivial class, since it can be mapped via a CDCC to a subsystem code consisting of single-site gauge generators stacked with a Z2 TC. The nontrivial equivalence classes are instead represented by topological subsystem codes that cannot be realized by topological stabilizer codes. This includes the topological subsystem\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 63\ncodes that are characterized by non-modular anyon theories or anyon theories that do not admit a gapped boundary to the vacuum.\nFor this second equivalence relation, we expect that the TI Pauli topological subsystem codes are partially classified by an object that we refer to as the classical Witt monoid. Here, the elements of the classical Witt monoid are equivalence classes of Abelian anyon theories, where two anyon theories are equivalent if they can be related by stacking modular Abelian anyon theories with gapped boundaries. The equivalence classes then form a monoid under the operation of stacking. In general, there are no inverses, since the non-modular anyon theories cannot be converted into modular anyon theories through stacking. For the subset of modular anyon theories, however, the equivalence classes indeed form a group, known as the classical Witt group [58\u201360].\nBased on Ref. [60], we further conjecture that the equivalence classes of TI Pauli topological subsystem codes are in one-to-one correspondence with the equivalence classes of WW models under constant-depth circuits. This agrees with the recent finding that WW models based on modular Abelian anyon theories with gapped boundaries can be disentangled (to a paramagnet Hamiltonian) by a constant-depth circuit [61], i.e., they belong to the trivial class of WW models. On the other hand, if the anyon theory is modular and does not admit a gapped boundary, then it is expected that the WW model cannot be disentangled by a constant-depth circuit [60, 62\u201364], so it belongs to a nontrivial equivalence class. Furthermore, if the anyon theory is non-modular, then the WW model describes a system with intrinsic topological order, so it cannot be disentangled by a constantdepth circuit. This aligns with the expectation that the nontrivial classes correspond to non-modular anyon theories and those without gapped boundaries.\nPhase diagrams of the subsystem codes\nAs described in Section 3.1, each topological subsystem code defines a family of Hamiltonians, which may realize a variety of phases and phase transitions by tuning the interaction strengths. An interesting direction for future work is thus to explore the phase diagrams of our topological subsystem codes. For example, the phase diagram of the Z(1)2 subsystem code in Section 7.2 has been thoroughly studied in Ref. [32]. In this case, the Hamiltonians are exactly solvable, given that they are dual to a system of non-interacting fermions. However, the families of Hamiltonians defined by the more general topological subsystem codes introduced in this work do not admit a mapping to non-interacting fermions. This suggests that more sophisticated methods are needed to probe the phase diagram.\nOne means of gaining insight into the phase diagram is to consider the anyonic 1-form symmetries of the topological subsystem code, as described in Appendix B. In Section 3.2, we argued that an anyonic 1-form symmetry associated to an Abelian anyon theory A forces the gapped Hamiltonians in the phase diagram to have anyonic excitations corresponding to the anyon types of A, up to condensing transparent bosons. Under the widely-\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 64\naccepted assumption that gapped Hamiltonians in two dimensions are characterized by modular anyon theories, we expect that the topological phases of matter realized by the family of Hamiltonians must be modular extensions of the anyon theory A or anyon theories obtained from condensing transparent bosons. Indeed, for the Z(1)2 subsystem code, the gapped phases in the phase diagram are characterized by modular extensions of the Z(1)2 anyon theory. In fact, the gapped phases of matter realize all of the so-called minimal modular extensions26 of the Z(1)2 anyon theory given by the 16-fold way (given a perturbation that breaks the time-reversal symmetry, see [32]). We pose the following question: do the gapped phases of matter in the phase diagram for a topological subsystem code based on the Abelian anyon theory A realize all modular extensions of A?\nTopological defects\nWe next discuss defects in Pauli topological subsystem codes, which are valuable for the implementation of fault-tolerant logical gates [1, 5, 7\u20139]. We refer to any redefinition of the gauge generators contained within a d-dimensional region as a d-dimensional defect. For example, a 0-dimensional defect might correspond to flipping the sign of a stabilizer, while a 1-dimensional defect might be defined by inserting a dislocation into the lattice \u2013 as in the e and m permuting defect of the Z2 TC [7, 66]. We further say the defect is a topological defect if, when defined on a region without boundary, it preserves locality and does not introduce any local logical qudits. We then impose an equivalence relation on d-dimensional topological defects, such that two topological defects are equivalent if one can be constructed from the other by inserting lower-dimensional topological defects and conjugating the gauge group by a constant-depth circuit whose support is contained in the neighborhood of the d-dimensional defect. We call a topological defect trivial if it belongs to the same equivalence class as the trivial defect, i.e., no modification to the gauge generators. We leave the full classification of topological defects as an open question and simply comment on some key examples below.\nIt is important to note that inserting defects generically breaks the translation invariance of the topological subsystem code. However, we emphasize that topological defects preserve the locality of the gauge group (property (ii) of Definition 1) and do not introduce any local logical qudits. Moreover, for any contractible region R that is sufficiently far from the defects, we expect that the subsystem code still satisfies a local topological property on R, similar to that of Eq. (159) in Lemma 1. The 0-dimensional topological defects are partially classified by the anyon types of the\n26Here, we say an extension C of an anyon theory A is a minimal modular extension if the only anyon types of C that braid trivially with all of the anyon types in A are precisely the transparent anyon types of A. In general, minimal modular extensions are known to exist only in certain cases where an obstruction vanishes. However, it was recently proven that a minimal modular extension does in fact exist for all non-modular anyon theories that contain a single transparent fermionic anyon type [65].\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 65\nPauli topological subsystem code. This is because we can redefine the gauge generators in a 0-dimensional region by multiplying by the U(1)-valued phases determined by a representative gauge twist. By construction, the U(1)-valued phases cannot be reproduced by conjugation with Pauli operators \u2013 or any unitary operators, for that matter.27 Thus, the nontrivial anyon types represent nontrivial 0-dimensional defects. We suggest that a general method for constructing nontrivial 1-dimensional topological defects is to employ the concept of higher gauging, introduced in Ref. [69]. In particular, in Ref. [69], it was shown that, at the level of continuum topological quantum field theories, 1-dimensional defects can be constructed in two-dimensional topological orders by condensing (or proliferating) anyonic excitations along a 1-dimensional path. They argued that an order N anyon type a can be consistently condensed along a path \u03b3 if only if \u03b8(a) is an Nth root of unity, i.e., it satisfies:\n\u03b8(a)N = 1. (158)\nFor example, this means that the order four semion in the Z(1)4 anyon theory can be condensed along a path \u03b3, while the order two semion in the chiral semion anyon theory cannot be consistently condensed along a path.\nIn Ref. [69], it was further noted that two 1-dimensional topological defects can be fused together by defining them along neighboring paths \u03b3 and \u03b3\u2032. A defect along \u03b3 is then called invertible if there exists a defect along a parallel neighboring path \u03b3\u2032 such that their fusion is a trivial defect. It was argued in Ref. [69] that, for modular Abelian anyon theories, a 1-dimensional defect created by condensation is invertible if and only if the condensed anyon type has nontrivial exchange statistics. For non-modular anyon theories, we expect that, regardless of the exchange statistics, the condensation of a transparent anyon type yields a trivial invertible topological defect.\nFor a topological subsystem code, the condensation of an anyon type a along a path \u03b3 is implemented by measuring (mutually commuting) short string operators for a along \u03b3. This adds the short string operators to the stabilizer group and thereby proliferates the anyon type a along \u03b3. For example, the defect that permutes the e and m anyon types in the Z2 TC [7, 66] can be constructed by measuring the em short string operators along a path. We expect that this approach to constructing defects yields topological defects, assuming that the condensed anyon type satisfies Eq. (158). Based on the arguments of Ref. [69], we further conjecture that, up to the addition of 0-dimensional defects and conjugation by a constant-depth circuit along the defect, every 1-dimensional topological defect in a Pauli topological subsystem code can be constructed by composing defects created by condensation.\n27Note that unitary operators that only fail to commute with Pauli operators by roots of unity are, by the definition of the Clifford hierarchy, Pauli operators [67, 68].\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 66\nLastly, we comment that a subclass of 2-dimensional topological defects correspond to holes, created by condensing a bosonic anyon type in a 2-dimensional patch. This is exemplified by the e-condensing and m-condensing holes of the Z2 TC [5, 8, 66]. We note that, furthermore, a boundary to a trivial topological subsystem code (i.e., with single-site gauge generators) can be constructed by condensing a set of bosonic anyon types that generate a Lagrangian subgroup (see Appendix G). The system with a boundary can be interpreted as a topological subsystem code with a 2-dimensional topological defect.\nUtility as quantum error-correcting codes\nAlthough we have introduced a large class of topological subsystem codes, we have not assessed their utility as quantum error-correcting codes. Moving forward, it is important to compare them with other topological quantum error-correcting codes by, for example, computing their error thresholds and identifying the set of fault-tolerant logical gates that are intrinsic to the code (possibly involving defects). In an upcoming work, we discuss the Z(1)3 subsystem code in more detail. This subsystem code exhibits a number of beneficial properties: it is defined on a low-degree graph, admits two-body checks, allows for a simple fault-tolerant implementation of the Clifford group using topological defects, and has high biased-noise error thresholds.\nThree-dimensional topological subsystem codes\nOur focus in this text has been on topological subsystem codes in two dimensions. This leaves the classification of topological subsystem codes in three dimensions as an exciting direction for future work. In analogy to non-modular anyon theories for two-dimensional systems, three-dimensional topological subsystem codes have the potential to host transparent point-like and loop-like excitations as well as point-like excitations with restricted mobility, i.e., fractonic order [70]. We expect that the three-dimensional subsystem toric code [71] and the gauge color code [25, 28, 29] are two such examples characterized by transparent loop-like excitations.\nIn three dimensions, there are also topological orders that are anomalous [72\u201374]. This is to say that they cannot be realized in three dimensions without a four-dimensional bulk. We expect that, nonetheless, three-dimensional topological subsystem codes can be characterized by anomalous topological orders. The simplest example is an anomalous Z2 gauge theory, which features a fermionic point-like excitation and a fermionic looplike excitation [72\u201374]. In Ref. [73], this topological order is labeled as FcFl, to denote the fact that it has a fermionic charge and a fermionic loop. Remarkably, two copies of the FcFl topological order is equivalent, by relabeling the excitations, to two copies of the FcBl topological order, where FcBl topological order is the non-anomalous Z2 gauge theory with a point-like fermion and a bosonic loop-like excitation. This suggests that we can construct a Pauli topological subsystem code characterized by the FcFl topological\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 67\norder by stacking two FcBl topological stabilizer codes and gauging out the excitations corresponding to one copy of FcFl topological order.\nDynamics of the subsystem codes\nRecently, subsystem codes have gained interest in the context of non-equilibrium quantum dynamics. In Ref. [34], it was found that, by appropriately scheduling the measurements of the gauge generators in the Z(1)2 subsystem code, it is possible to realize a dynamically generated logical qubit. Such codes and generalizations [75\u201377] have since been referred to as Floquet codes, due to the periodic schedule of measurements, and generalizations beyond subsystem codes have been proposed [75\u201377]. In future work, we consider Floquet codes built from the subsystem codes described in this work. We find that the dynamically generated logical subspace is that of the parent topological stabilizer code used to construct the topological subsystem code in Section 6. Along these lines, two recent works [78, 79] studied the measurement-only dynamics of a system evolving under random measurements of the gauge generators of the Z(1)2 subsystem code. It would be interesting to also consider the measurement-only dynamics based on the topological subsystem codes of this work, since they host a more rich set of anyonic 1-form symmetries. We also point out that it may be fruitful to study our topological subsystem codes in the context of quantum many-body scars [80\u201382] and infinite-temperature quantum memories [83], given that they have an extensive number of conserved quantities.\nAcknowledgements \u2013 T.D.E. thanks Meng Cheng for valuable discussions about the structure of non-modular anyon theories and the connection between WW models and Abelian TQDs in Appendix H. D.J.W. thanks David Long and Andrew Doherty for discussions about the potential of an E8 lattice Hamiltonian. Y.-A.C. is supported by the JQI fellowship and by the Laboratory for Physical Sciences through the Condensed Matter Theory Center. A.D. is supported by the Simons Foundation through the collaboration on UltraQuantum Matter (651438, AD) and by the Institute for Quantum Information and Matter, an NSF Physics Frontiers Center (PHY-1733907). W.S. is supported by the Simons Foundation through the collaboration on Ultra-Quantum Matter (651444, WS). N.T. is supported by the Walter Burke Institute for Theoretical Physics at Caltech."
        },
        {
            "heading": "A Correcting and cleaning topological subsystem codes",
            "text": "In this appendix, we prove the correctability condition in Eq. (12). We also prove a cleaning lemma for TI topological subsystem codes, similar to the cleaning lemma for stabilizer codes in Ref. [84] and for subsystem codes in Refs. [21] and [85]. Importantly, the cleaning lemma described here allows us to \u2018clean\u2019 nonlocal stabilizers as well as nontrivial bare logical operators. As a consequence of the cleaning lemma, we show that,\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 68\nup to products of local stabilizers, the nontrivial bare logical operators and nonlocal stabilizers of a topological subsystem code on a torus can be represented by operators supported on the region pictured in Fig. 20. Furthermore, in Appendix F, we use the cleaning lemma to argue that every nontrivial bare logical operator and nonlocal stabilizer can be represented by products of string operators formed by moving nontrivial anyon types along non-contractible paths.\nThe correctability condition and the cleaning lemma both follow from considering the implications of the topological property of Definition 1 on a torus. For convenience, we recall the topological property for a TI topological subsystem code with a gauge group G and stabilizer group S:\nOn an infinite plane, the stabilizer group S admits a set of generators whose supports have linear size less than a constant-sized length \u2113S, and ZP(S) \u221d G.\nThis implies that TI topological subsystem codes on a torus satisfy the following.\nLemma 1 (Topological property on a torus) Let G and S denote the gauge group and stabilizer group, respectively, of a TI topological subsystem code on an L \u00d7 L torus. For any region R whose linear size is less than L\u2212 \u2113S, the following condition holds:\nZP(S\u0303R) \u2229 P(R) \u221d G(R), (159)\nwhere S\u0303R is the subgroup of locally generated stabilizers truncated to R, P(R) is the group of Pauli operators supported entirely on R, and G(R) is defined by G(R) = G \u2229 P(R).\nProof of Lemma 1: To begin, we express the condition ZP(S) \u221d G of the topological property (Definition 1) in a more local form. We replace S with the subgroup of stabilizers S\u0303\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 69\ngenerated by local stabilizers. This gives us:\nZP(S\u0303) \u221d G. (160)\nNext, we let Rpl be an arbitrary connected subregion of the infinite plane, and define P(Rpl) to be the subgroup of Pauli operators whose support is contained within Rpl. We then take the intersection of P(Rpl) with both sides of the condition in Eq. (160) to find:\nZP(S\u0303) \u2229 P(Rpl) \u221d G \u2229 P(Rpl). (161)\nTo proceed, we notice that the stabilizer group S\u0303 on the left-hand side can be replaced by the subgroup S\u0303Rpl of Pauli operators obtained by truncating elements of S\u0303 to Rpl. Therefore, the expression in Eq. (161) can be rewritten as:\nZP(S\u0303Rpl) \u2229 P(Rpl) \u221d G(Rpl), (162)\nwhere G(Rpl) is shorthand for the subgroup of gauge operators whose support is fully contained within Rpl.\nThe condition in Eq. (162) holds for any connected region Rpl in the infinite plane. More importantly, it also holds for certain choices of regions R on an L \u00d7 L torus. In particular, it holds for any region R whose linear size is less than L\u2212 \u2113S. To see this, we map the region R on a torus to a region Rpl in the infinite plane. Explicitly, since the linear size of R is less than L\u2212 \u2113S, we can find paths around the meridian and equator of the torus that do not intersect R. We then imagine cutting the torus along these paths\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 70\nand embedding it in the infinite plane (see Fig. 21). This allows us to identify P(R) with P(Rpl). Given that the subsystem code is translation invariant, we can also identify G(R) with the group G(Rpl).\nWe next identify the subgroup S\u0303R with the subgroup S\u0303Rpl . First, we show that the elements of S\u0303R can be identified with a subgroup of the elements of S\u0303Rpl . In particular, suppose we truncate a locally generated stabilizer S on a torus to R. We can identify S with an element of P(Rpl). Translation invariance then allows us to find a locally generated stabilizer Spl on the infinite plane, such that the truncation of S to R is identified with the truncation of Spl to Rpl, as illustrated in Fig. 22. Second, we argue that S\u0303Rpl can be identified with a subgroup of S\u0303R. Let R\u2032pl be the region in the infinite plane such that the boundary of R\u2032pl is a distance \u2113S from the boundary of Rpl. Given any locally generated stabilizer Spl on the infinite plane, we can find a locally generated stabilizer S \u2032 pl contained within R\u2032pl with the property that the truncation of Spl to Rpl is the same as the truncation of S \u2032pl to Rpl. This is because we can truncate Spl to R \u2032 pl by throwing out the local stabilizer generators supported outside of R\u2032pl. Since the local stabilizer generators can be contained within regions of linear size \u2113S, this does not affect the truncation to Rpl. As shown in Fig. 23, the stabilizer S \u2032 pl on R \u2032 pl defines a locally generated stabilizer S \u2032 on the torus such that the truncation of S \u2032 to R is identified with the truncation of Spl to Rpl. Therefore, we have identified S\u0303R with S\u0303Rpl .\nGiven that we can identify P(R), G(R), and S\u0303R with P(Rpl), G(Rpl), and S\u0303Rpl , respectively, the condition in Eq. (162) tells us that, for any region R whose linear size is\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 71\nless than L\u2212 \u2113S, we have:\nZP(S\u0303R) \u2229 P(R) \u221d G(R), (163)\nwhich is the condition in Eq. (159). \u25a1\nProposition 1 (Correctable errors of topological subsystem codes) For any TI topological subsystem code on an L \u00d7 L torus, the set E of Pauli operators whose supports have linear size less than L/2 \u2212 \u2113S is correctable, where \u2113S is the constant-sized length defined in property (iii) of Definition 1. Moreover, for any errors E1, E2 \u2208 E, there is some gauge operator G such that:\n\u03a0C\u0303E1E \u2020 2\u03a0C\u0303 \u221d G\u03a0C\u0303 . (164)\nHere, \u03a0C\u0303 denotes the projector onto the subspace HC\u0303 in Eq. (11).\nProof of Proposition 1: We first argue that any Pauli operator PR supported entirely on a region R with linear size less than L \u2212 \u2113S is detectable. If PR fails to commute with an element of S\u0303R, then \u03a0C\u0303PR\u03a0C\u0303 = 0. Otherwise, if PR commutes with the elements of S\u0303R, then PR must belong to G(R) up to a phase, according to Lemma (1). Therefore, in either case, we find:\n\u03a0C\u0303PR\u03a0C\u0303 \u221d G\u03a0C\u0303 , (165)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 72\nfor some gauge operator G. After replacing \u03a0C\u0303 with a projector on to the code space, this is precisely the condition for PR to be detectable.\nWe now argue that the set E is correctable. This amounts to showing that any product E1E \u2020 2, with E1, E2 \u2208 E, is detectable. From the argument above, it suffices to show that the support of the operator E1E \u2020 2 can be contained within a region of linear size L \u2212 \u2113S. To make this explicit, we can project the supports of E1 and E2 onto the equator and the meridian of the torus, as shown in Fig. 24. The projected supports are contained in intervals Ix and Iy with length less than L \u2212 \u2113S. Therefore, the support of E1E\u20202 can be contained within an Ix \u00d7 Iy rectangle. From Eq. (165), we have:\n\u03a0C\u0303E1E \u2020 2\u03a0C\u0303 \u221d G\u03a0C\u0303 . (166)\nThus, the set of errors E is correctable. \u25a1\nWe now leverage Lemma 1 to prove a cleaning lemma for TI topological subsystem\ncodes.\nLemma 2 (Cleaning lemma for topological subsystem codes) Let G and S be the gauge group and stabilizer group, respectively, of a TI topological subsystem code on an L \u00d7 L torus. Also, let R be a connected region whose linear size is less than L \u2212 \u2113S, where \u2113S is the length defined in Definition 1. Then for any element T in the bare logical group L = ZP(G), there exists a product of local stabilizers S \u2208 S\u0303 such that the support of TS is contained within the complement of R.\nProof of Lemma 2: Taking the centralizer of both sides of Eq. (159) and the intersection\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 73\nwith P(R), we obtain:\nS\u0303R \u221d ZP(G(R)) \u2229 P(R). (167)\nHere, we have used that, for any subgroup T of the Pauli group, ZP(ZP(T )) = \u27e8{\u03c9}, T \u27e9, for some set of phases {\u03c9}. Given an arbitrary nontrivial bare logical operator or nonlocal stabilizer T , the truncation to R commutes with the gauge operators supported entirely within R. Therefore, the truncation belongs to ZP(G(R))\u2229P(R). According to Eq. (167), the truncation must be proportional to an element of S\u0303R. This means that we can clean T , so that it is supported on the complement of R by multiplying by some element of S\u0303R. That is, for some S \u2208 S\u0303, the Pauli operator TS is not supported on R. \u25a1\nA direct application of the cleaning lemma shows that, for any TI topological subsystem code defined on a torus, every nontrivial bare logical operator and nonlocal stabilizer can be represented by an operator supported on a pair of intersecting strips of width \u2113S as shown in Fig. 20.\nB Anyonic 1-form symmetries In Section 3.2, we described the anyon types of a TI topological subsystem code in terms of automorphisms of the gauge group, referred to as gauge twists. In this appendix, we argue that the anyon theories of TI topological subsystem codes can instead be defined according to the conserved quantities shared by the family of Hamiltonians H{JG}, i.e., the elements of the bare logical group L. In particular, we interpret loop-like symmetries of the Hamiltonians as string operators that correspond to moving anyon types along closed paths. These loop-like symmetries then define the anyon theory associated to the topological subsystem code.\nTo describe the loop-like symmetries of interest, we start by defining 1-form symmetries for two-dimensional systems, following Ref. [86]. Since the definition of 1-form symmetries in Ref. [86] makes use of concepts from cellular homology, we have reviewed the necessary terminology in Appendix C for convenience. We assume throughout this section that the system is defined on an orientable two-dimensional manifold M with a cellular decomposition defined by a lattice. That is, M admits a decomposition into 0-cells, 1-cells, and 2-cells, which correspond to the vertices, edges, and plaquettes, respectively, of a lattice embedded in M. We let A be an arbitrary finite Abelian group.\nA 1-form symmetry is then a unitary projective representation of the group Z1(M, A), which satisfies certain conditions specified below. Here, Z1(M, A) is the group of 1-cycles over M with coefficients in A (see Appendix C). More precisely, a 1-form symmetry is a map W from Z1(M, A) to the group of unitary operators such that:\n(i) For any c in Z1(M, A), the symmetry operator W (c) is a constant-depth quantum\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 74\ncircuit of geometrically local gates supported in the vicinity of c.28\n(ii) W is a projective representation of Z1(M, A), i.e., for any c, c\u2032 in Z1(M, A):\nW (c)W (c\u2032) = \u03d5 ([c], [c\u2032])W (c+ c\u2032), (168)\nfor some U(1)-valued phase \u03d5 ([c], [c\u2032]), which only depends on the homology classes [c] and [c\u2032] of c and c\u2032.\n(iii) If c and c\u2032 in Z1(M, A) have a trivial (oriented) intersection number, then:\n\u03d5 ([c], [c\u2032]) = 1. (169)\nThis is to say that W forms a linear representation on any subgroup of Z1(M, A) with 1-chains that have trivial mutual intersection numbers, such as the group of 1-boundaries B1(M, A).\nWe recall that Z1(M, A) can be generated by 1-cycles c\u03b3,a labeled by an oriented loop \u03b3 and an element a in A. We may suggestively write the image of a generator c\u03b3,a as W a \u03b3 , to make the analogy to anyon string operators more apparent. The condition (i) then implies that, for any generator c\u03b3,a, the operator W a \u03b3 is a string operator supported along \u03b3. Intuitively, W a\u03b3 is a string operator that moves an anyon labeled by a along \u03b3.\nFor our purposes, we only require that the 1-form symmetry forms a projective representation of Z1(M, A) up to products of local stabilizers supported along the 1-cycles. More specifically, we consider representations W of Z1(M, A) such that, for any c, c\u2032 in Z1(M, A), W (c) and W (c\u2032) obey the relation:\nW (c)W (c\u2032) \u223c \u03d5 ([c], [c\u2032])W (c+ c\u2032). (170)\nHere, \u223c denotes that the operators are equal up to products of local stabilizers near the edges of c+ c\u2032. If W satisfies Eq. (170), we say that W is a 1-form symmetry up to local stabilizers. This is motivated by the fact that anyon string operators do not necessarily generate the same group as the group formed by the anyon types under fusion. For example, in the DS stabilizer model of Ref. [20], the string operators of the semions square to products of local stabilizers, despite the semions having order two under fusion.\nWe further say a representation W of Z1(M, A) is topologically faithful up to local stabilizers if it satisfies the property:\nW (c) \u223c W (c\u2032) implies [c] = [c\u2032], (171)\n28In particular, c corresponds to a formal sum of edges e weighted by elements ae \u2208 A. The support of W (c) is localized near the edges e for which ae \u0338= 0.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 75\nfor arbitrary 1-cycles c and c\u2032.29 This means that, if c belongs to a nontrivial homology class, then W (c) cannot be a product of local stabilizers. This is important for ensuring that the 1-form symmetry operators along non-contractible 1-cycles can be interpreted as string operators for nontrivial anyon types.\nWith this, we define an anyonic 1-form symmetry:\nDefinition 4 (Anyonic 1-form symmetry) An anyonic 1-form symmetry is a 1-form symmetry up to local stabilizers that is topologically faithful up to local stabilizers.\nThe anyonic 1-form symmetries generated by L define the anyon theory of a topological subsystem code. To unambiguously define the anyon theory, however, we first impose an equivalence relation on the set of anyonic 1-form symmetries. We say W and W \u2032 are equivalent, denoted W \u223c W \u2032, if, for every c in Z1(M, A), we have W (c) \u223c W \u2032(c). This is to say, two anyonic 1-form symmetries W and W \u2032 are equivalent if, for any c in Z1(M, A), the operators W (c) and W \u2032(c) differ by products of local stabilizers supported nearby c. For TI topological subsystem codes, we assume that, on a torus,30 there exists an anyonic 1-form symmetry W generated by L such that every other anyonic 1-form symmetry generated by L is a subgroup. We refer to this as a maximal anyonic 1-form symmetry. Such a maximal anyonic 1-form symmetry defines the anyon theory of the TI topological subsystem code. The fusion rules are determined by the group structure of A and the exchange statistics can be computed by truncating the symmetry operators and using the formula in Eq. (25). The definition of an anyon theory in terms of a maximal anyonic 1-form symmetry is closely related to the definition in Section 3.2. As shown in Appendix F, the nontrivial bare logical operators and nonlocal stabilizers can be represented by products of string operators formed by moving nontrivial anyon types along non-contractible cycles. This means that anyonic 1-form symmetry operators can be truncated to yield open string operators that represent anyon types as described in Section 3.2. Conversely, for every anyon type defined in Section 3.2, the string operators generate an anyonic 1-form symmetry. By assumption, these generate a subgroup of a maximal anyonic 1-form symmetry. Therefore, the anyon types defined by a maximal anyonic 1-form symmetry are the same as those determined by the commutation relations of operators with gauge operators as in Section 3.2.\n29This is inspired by the definition of a faithful 1-form symmetry in Ref. [86], in which a 1-form symmetry W is called faithful if W (c) = W (c\u2032) implies c = c\u2032.\n30If H1(M, A) is trivial, then Eq. (171) does not impose any constraints on the 1-form symmetries. As such, the anyonic 1-form symmetries are highly under-constrained.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 76"
        },
        {
            "heading": "C Background on cellular homology",
            "text": "To define 1-form symmetries, as in Ref. [86], it convenient to use the language of cellular homology. In this appendix, we review the terminology from cellular homology necessary to follow the discussion in Appendix B. Further details and more precise statements about cellular homology can be found in Ref. [87].\nIn the discussion below, we use M to denote an orientable, two-dimensional manifold equipped with a cellular decomposition into 0-cells, 1-cells, and 2-cells, as pictured in Fig. 25. For our purposes, the 0-cells, 1-cells, and 2-cells, respectively, correspond to the vertices, edges, and plaquettes of a two-dimensional lattice embedded in M. We use the notation \u27e8v\u27e9 to represent a 0-cell and write a 1-cell oriented from \u27e8v\u27e9 to \u27e8w\u27e9 as \u27e8v, w\u27e9. Cellular homology applies to a wider class of cellular decompositions, but for simplicity, we restrict to the case where the cellulation is given by a lattice.\nWe first define n-chains over M with coefficients in an Abelian group A. An n-chain is a formal sum of n-cells weighted by elements of A. For example, a 1-chain c1 takes the general form:\nc1 = \u2211\n\u27e8v,w\u27e9 a\u27e8v,w\u27e9\u27e8v, w\u27e9, (172)\nwhere the sum is over (oriented) edges, and a\u27e8v,w\u27e9 belongs to A. Reversing the orientation of an n-cell is equivalent to inverting the coefficient. Using the example in Eq. (172), we find that reversing the orientation of each edge gives:\nc1 = \u2212 \u2211\n\u27e8v,w\u27e9 a\u27e8v,w\u27e9\u27e8w, v\u27e9. (173)\nTwo n-chains can be added together using the group laws of A. For example, the sum of the 1-chains c1 and c\u20321 = \u2211 \u27e8v,w\u27e9 a \u2032 \u27e8v,w\u27e9\u27e8v, w\u27e9 is given by the 1-chain c1 + c\u20321:\nc1 + c\u20321 = \u2211\n\u27e8v,w\u27e9\n( a\u27e8v,w\u27e9 + a\u2032\u27e8v,w\u27e9 ) \u27e8v, w\u27e9. (174)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 77\nHence, the set of n-chains forms a group under addition, denoted as Cn(M, A). Next, we introduce the boundary operator \u2202, which is a linear map from the group of n-chains Cn(M, A) to the group of (n\u2212 1)-chains Cn\u22121(M, A). We take \u2202c0 = 0, for any 0-chain c0, and we define the boundary operator on 1-chains by its action on the general 1-chain c1 in Eq. (172):\n\u2202c1 = \u2211\n\u27e8v,w\u27e9 a\u27e8v,w\u27e9\n[ \u27e8v\u27e9 \u2212 \u27e8w\u27e9 ] . (175)\nTo define the boundary operator on 2-chains, we define the action of the boundary operator on a relatively simple 2-chain app, where ap is in A, and p is a 2-cell. The action of \u2202 extends to more general 2-chains by linearity. \u2202(app) is given by a particular sum of oriented edges in the boundary of the plaquette p weighted by ap. In particular, \u2202(app) is the 1-chain:\n\u2202(app) = \u2211\n\u27e8v,w\u27e9\u2208\u2202p ap\u27e8v, w\u27e9, (176)\nwhere the sum is over edges \u27e8v, w\u27e9 in the boundary of p, oriented according to the orientation induced on the boundary by the orientation of p (see Fig. 26). We note that \u2202\u2202 = 0. An n-chain cn is called an n-cycle if \u2202cn = 0. Given that the boundary operator is linear, the n-cycles form a group under addition. We use Zn(M, A) to denote the group of n-cycles over M with coefficients in A. We note that, as mentioned in Appendix B, Z1(M, A) can be generated by 1-cycles labeled by an oriented loop and an element of A. More explicitly, the group of 1-cycles is generated by 1-cycles of the form:\nc\u03b3,a = \u2211\n\u27e8v,w\u27e9\u2208\u03b3 a\u27e8v, w\u27e9, (177)\nwhere a is an element of A, \u03b3 is an oriented loop of edges, and the sum is over edges in \u03b3, oriented according to the orientation of \u03b3.\nFinally, we define the cellular homology group H1(M, A). H1(M, A) is defined in terms of Z1(M, A) and the group of 1-boundaries, denoted as B1(M, A). The group B1(M, A) is the group of 1-chains c1 for which \u2202c2 = c1, for some 2-chain c2. Note that,\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 78\nsince \u2202\u2202 = 0, B1(M, A) is a subgroup of Z1(M, A). With this, H1(M, A) is the quotient group:\nH1(M, A) = Z1(M, A)/B1(M, A). (178)\nIn words, the elements of H1(M, A) are equivalence classes of 1-cycles with the property that two 1-cycles belong to the same class if they differ by a 1-boundary. We write the equivalence class of a 1-cycle c1 as [c1]. We say two 1-cycles c1, c2 are homologous if [c1] = [c2]."
        },
        {
            "heading": "D Fluxes in topological subsystem codes",
            "text": "In this appendix, we extend the concept of a flux, introduced in Ref. [18], to systems of composite-dimensional qudits. Similar to the role of gauge twists in the definition of anyon types, to define fluxes, we begin by introducing the notion of a stabilizer twist.\nDefinition 5 (Stabilizer twist) Letting S be the stabilizer group of a TI Pauli topological subsystem code and S\u0303 be the subgroup of locally generated stabilizers, a stabilizer twist is a group homomorphism \u03a3 : S \u2192 U(1), such that \u03a3(S) = 1 for all but finitely many S in some set of independent local generators of S\u0303.\nNote that a stabilizer twist encodes the same information as the stabilizer syndrome for the group S\u0303. It is also important to note that, while some stabilizer twists are simply restrictions of gauge twists to the stabilizer group, there are stabilizer twists that are not of this form. For example, a stabilizer twist \u03a3 that violates the vertex stabilizer S of the Z(0)2 subsystem code in Section 7.1, i.e. \u03a3(S) \u0338= 1, does not correspond to the restriction of a gauge twist. The important difference is that stabilizer twists can violate arbitrarily many gauge generators, so long as it violates only finitely many stabilizers.\nWith this, for a TI Pauli topological subsystem code defined on an infinite plane, we\ndefine the fluxes as equivalence classes of stabilizer twists.\nDefinition 6 (Flux) A flux of a TI Pauli topological subsystem code is an equivalence class of stabilizer twists under the following equivalence relation: two stabilizer twists \u03a3 and \u03a3\u0302 are equivalent, or represent the same flux, if there exists a Pauli operator P , such that \u03a3(S) = \u03a6P (S)\u03a3\u0302(S), for all S in the stabilizer group.\nHere, \u03a6P (S) is the commutator of P and S defined in Eq. (15). We say a flux is trivial if it belongs to the same equivalence class as the trivial homomorphism. Intuitively, we think of a nontrivial flux as being represented by a stabilizer twist \u03a3 given by a semiinfinite product of Pauli operators W as \u03a3(S) = WSW \u2020S\u2020, for any stabilizer S. The string operator W may fail to commute with extensively many gauge generators along its length. We point out that a subset of the fluxes correspond to the anyon types of\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 79\nthe topological subsystem code, since the gauge twists that represent anyon types define stabilizer twists when restricted to the stabilizer group. The undetectable anyon types yield trivial fluxes, while the detectable anyon types correspond to nontrivial fluxes.\nIn general, we expect that the fluxes of a Pauli topological subsystem code are given by the detectable anyon types as well as the so-called tube-like anyon types of the parent topological stabilizer code used to construct the subsystem code (see Appendix H). Indeed, the tube-like anyon types of the parent topological stabilizer code violate the stabilizers formed by loops of string operators for the transparent anyon types. The tube-like anyon types do not correspond to anyon types of the subsystem code, though, because the string operators fail to commute with the short string operators of the transparent anyon types along their length. We note that, since the short string operators of the transparent anyon types are local gauge operators, and thus terms in the Hamiltonians H{JG} in Eq. (13), the fluxes given by tube-like anyon types may be confined or deconfined excitations depending on the coefficients {JG}. Following the discussion in Section 3.2, we can define the fusion of fluxes and create string operators to move fluxes. The exchange statistics and braiding relations of fluxes are not well defined, however. This is because the string operators are only defined up to gauge operators. Indeed, gauge operators do not affect the flux, since they commute with all of the stabilizers. This means that the string operators can be redefined by products of gauge operators along their length. Since gauge operators generically have nontrivial commutation relations with one another, the braiding relations of fluxes can be changed by redefining the string operators. Nonetheless, the braiding relations between the anyon types and the fluxes are well defined. This is because the string operators of the anyon types commute with all of the gauge operators along their length. Therefore, redefining the string operator of the flux by gauge operators does not affect the braiding relations, in this case."
        },
        {
            "heading": "E Detectable anyon types are opaque",
            "text": "Here, we prove that detectable anyon types are opaque, i.e., if an anyon type is represented by operators that necessarily fail to commute with stabilizers, then there must be some anyon type with which it braids nontrivially. Since every anyon type of a topological stabilizer code is either trivial or detectable, this implies that the anyon theories of topological stabilizer codes must be modular. We also note that undetectable anyon types are transparent. This is because, for some choice of Pauli operators at the endpoints, the corresponding open string operators commute with all of the stabilizers, including, in particular, the stabilizers formed from contractible loops of anyon string operators. Therefore, they must braid trivially with every anyon type.\nIn the proof that detectable anyon types are opaque below, we let G be the gauge\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 80\ngroup of a topological subsystem code and take S to be the associated stabilizer group. For simplicity, we assume that the system is defined on an infinite plane, although the argument can be generalized to the torus straightforwardly.\nProposition 2 For any two-dimensional TI topological subsystem code, the detectable anyon types are opaque.\nProof of Proposition 2: Consider a string operator W a\u03b3 for a detectable anyon type a, supported along an open path \u03b3 with one endpoint. Since a is detectable, W a\u03b3 must fail to commute with a generator of S at its endpoint. The string operator W a\u03b3 may also fail to commute with gauge operators that do not belong to S. By redefining the generators of S, we can ensure that W a\u03b3 fails to commute with only one of the generators of S. Let us call this stabilizer S. Furthermore, since the stabilizer group of a topological subsystem code is locally generated when defined on an infinite plane, we can assume that S is local. The string operator W a\u03b3 and the violated stabilizer S are pictured in Fig. 27. Note that there are no local Pauli operators that violate only the stabilizer S. If there existed such a local Pauli operator, then W a\u03b3 could be redefined so that it only fails to commute with elements of G \u2212 S. By assumption, the anyon type a is detectable, so this is not possible. In what follows, we argue that the violated stabilizer S can be chosen so that it is fully supported on an annular region R around the endpoint of \u03b3, as shown in Fig. 27. This shows us that W a\u03b3 fails to commute with a loop-like stabilizer wrapped around its endpoint. Hence, the anyon type a braids nontrivially with the anyon type associated to the loop-like stabilizer.\nWe start by defining a new subsystem code in which S no longer belongs to the gauge group. For systems of prime-dimensional qudits, we can always redefine the gauge generators so that S is itself a gauge generator. Subsequently, we can remove S from the set of gauge generators. For systems of composite-dimensional qudits, it might not be possible to choose S as a gauge generator, without introducing redundancy. In general, we can choose the gauge generators so that S is a power of some gauge generator G. For example, the gauge group might be generated by Z and X2 for a single four-dimensional\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 81\nqudit. In this case, the stabilizer is Z2. We cannot choose Z2 as an independent gauge generator, since it does not generate Z. Therefore, to ensure that S is not part of the gauge group, we remove the generator G. We let G \u2032 be the gauge group after removing G as a generator.\nRelative to the topological subsystem code defined by G, the subsystem code defined by G \u2032 has an additional logical qudit. Indeed, one of the nontrivial bare logical operators is the Pauli operator S. The conjugate logical Pauli operator cannot be local. Otherwise, we would be able to redefine W a\u03b3 so that it commutes with all of stabilizers of the original topological subsystem code.\nTo proceed, we use the cleaning lemma for subsystem codes derived in Ref. [21]. The\ncleaning lemma states that, for any region R, we have the following equality:\nlbare(R) + l(Rc) = 2k. (179)\nHere, lbare(R) is the number of independent nontrivial bare logical operators supported entirely within R, l(Rc) is the number of independent nontrivial dressed logical operators contained within the complement Rc, and k is the total number of logical qudits. For example, if there are no nontrivial bare logical operators supported entirely within R, then each nontrivial logical operator can be \u2018cleaned\u2019 by multiplying by gauge operators so that its support is contained in Rc.\nWe now apply the cleaning lemma to the modified subsystem code with gauge group G \u2032. We take R to be an annulus around the endpoint of \u03b3, with a width that is large compared to the supports of the local gauge generators. In particular, we require that R is wide enough such that none of the gauge generators have support in both components of Rc. We also choose R so that S is not supported in R. Assuming that the subsystem code is defined on an infinite plane, removing the generator S of S introduces one logical qudit. Therefore, we have k = 1 in Eq. (179). The dimension of the qudit is equal to the order of the operator S.\nWe claim that S is the only independent nontrivial dressed logical operator supported entirely on Rc, i.e., we claim that l(Rc) = 1. As previously mentioned, the conjugate logical operator cannot be supported entirely on the inner disk of Rc. Furthermore, Pauli operators on the outer region of Rc do not affect the commutation relations with gauge\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 82\ngenerators supported on the inner disk of Rc. This implies that the conjugate logical operator cannot be fully supported on the two components of Rc. Otherwise, we could truncate the operator to the inner disk and derive a contradiction with the fact that the anyon type is detectable.\nPlugging k = 1 and l(Rc) = 1 into Eq. (179), we find that the number of independent nontrivial bare logical operators supported on R is lbare(R) = 1. The nontrivial bare logical operator supported on R commutes with S. Therefore, it must be equivalent to the logical operator S up to stabilizers. With some foresight, we denote the nontrivial bare logical operator on R byW b\u03b3\u2032 , as depicted in Fig. 28. The string operatorW a \u03b3 has the same commutation relations with W b\u03b3\u2032 as with S, because W a \u03b3 is a dressed logical operator conjugate to S.\nThe string operator W b\u03b3\u2032 is local and commutes with all of the gauge operators in G. Therefore, it must be a stabilizer in the topological subsystem code. This justifies the notation, as we can associate an anyon type b to the loop-like string operator (see Lemma 3). We have now found a loop-like string operator W b\u03b3\u2032 with nontrivial commutation relations with W a\u03b3 . Thus, a braids nontrivially with b, and the detectable anyon type a must be opaque. \u25a1"
        },
        {
            "heading": "F Nontrivial bare logical operators and nonlocal stabilizers",
            "text": "The goal of this appendix is to show that the nontrivial bare logical operators and nonlocal stabilizers of TI topological subsystem codes, i.e., the nonlocal elements of the bare logical group L, can be understood in terms of (Pauli) string operators created by moving anyon types along non-contractible paths. We prove that, for TI topological subsystem codes, moving an anyon type a along a non-contractible path produces a nonlocal element of L if and only if a is a nontrivial anyon type. We then argue that in fact every nontrivial bare logical operator and nonlocal stabilizer can be represented (up to stabilizers or products of local stabilizers, respectively) by a product of string operators created by moving anyon types around non-contractible paths of the torus. This agrees with the examples presented in this text, in which all of the nontrivial bare logical operators and nonlocal stabilizers are indeed represented by string operators wrapped around non-contractible paths.\nTo get started, we prove a lemma. In particular, we prove that there is a well-defined anyon type associated to any string operator that is supported on an oriented loop and commutes with all of the gauge operators. The associated anyon type is determined by truncating the string operator and analyzing the commutation relations with the gauge operators at the endpoints. We label the string operator by the anyon type a, such that the orientation of the truncated string operator points towards a. Thus, we can interpret the string operator as moving the anyon type a around the loop according to its orientation.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 83\nLemma 3 Any string operator that is supported along an oriented closed path and commutes with all of the gauge operators has a well-defined associated anyon type.\nProof of Lemma 3: Let W\u03b3 be a string operator supported along an arbitrary oriented closed path \u03b3. We assume that there exists a constant length \u2113W such that the support of the string operator can be contained within a length \u2113W/2 of the path \u03b3 (see Fig. 29). This implies that truncations of W\u03b3 are ambiguous only up to Pauli operators supported on disks of diameter \u2113W centered on the endpoints of the truncated path \u03b3 \u2032. Our goal is to show that the anyon type associated to W\u03b3 is independent of the choice of truncation, assuming that the two endpoints of the truncated string operator are sufficiently far from one another (specified more precisely below). We start by proving that, for any truncation W\u03b3\u2032 of W\u03b3, the anyon types associated to the endpoints must be inverses of one another. More concretely, let us label the anyon types at the endpoints of W\u03b3\u2032 by a and b such that the orientation of \u03b3\u2032 (induced by the orientation of \u03b3) points from b to a. We say that b is at the tail of \u03b3\u2032 and a is at the head of \u03b3\u2032. We would like to show that b = a\u22121. To relate the anyon types b and a at the endpoints ofW\u03b3\u2032 , we move b to a by truncating W\u03b3\u2032 in constant-sized increments, as illustrated in Fig. 30. Each successive truncation is equivalent to applying a product of Pauli operators at the endpoints, so the anyon type b is unchanged by the truncations (by the definition of the anyon type b). Once b has been moved to a along \u03b3\u2032, the pair can be annihilated by using a local Pauli operator. This shows that b is the inverse anyon type of a, i.e., b = a\u22121. Note that, in general, topological subsystem codes may have nontrivial defects along closed paths, which permute the anyon types or allow certain anyon types to be condensed. However, assuming that the system is translation invariant, we can block unit cells together, sometimes referred to as \u201ccoarse graining\u201d. After a sufficient amount of coarse graining, we can assume that there are no nontrivial defects.\nWith this, we are able to argue that the anyon type associated to W\u03b3 is well defined. Let W\u03b31 and W\u03b32 be two truncations of W\u03b3, as shown in Figs. 32b and 32c. The truncations are arbitrary, except for the requirement that the endpoints of the truncated string operators are well separated. Specifically, we require that the endpoints of the paths are greater than a distance \u2113W +\u2113G from one another. Here, \u2113G is a constant-sized length such that, for some choice of local gauge generators, the support of each gauge generator can be\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 84\ncontained within a region of linear size \u2113G. This separation of the endpoints ensures that the product of Pauli operators supported on the disks of diameter \u2113W at the endpoints of the paths \u03b31 and \u03b32 are only able to create trivial anyon types at the respective endpoints. For example, if the endpoints are closer than a distance \u2113W + \u2113G from one another, then the truncation could be ambiguous up to a short string operator that changes the anyon types at the endpoints (see Fig. 31).\nWe label the anyon types at the endpoints ofW\u03b31 by a \u22121 1 and a1, so that the orientation of \u03b31 points from a \u22121 1 to a1. Likewise, we label the anyon types at the endpoints of W\u03b32 by a\u221212 and a2. We then consider a third truncation of W\u03b3 to a path \u03b33, stretching from the tail of \u03b32 to the head of \u03b31 (see Fig. 32d). We define the truncation W\u03b33 to \u03b33 such that the anyon types at the endpoints are a\u221212 and a1, where the orientation of \u03b33 pointing from a\u221212 to a1. Since,W\u03b33 is a truncation ofW\u03b3, the anyon types at its endpoints must be inverses of one another. Therefore, we have that a1 is equal to a2. This shows us that the arbitrary truncationsW\u03b31 andW\u03b32 give the same anyon type for the string operatorW\u03b3. \u25a1\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 85\nThe next two propositions show that the string operator obtained by moving an anyon type a around a non-contractible path is a nonlocal element of L if and only if a is a nontrivial anyon type. For clarity, we have divided the proof into Propositions 3 and 4. As a corollary of Proposition 3, we show that a string operator W a\u03b3 for an anyon type a can be moved by a product of local stabilizers to any other string operator W a\u03b3\u2032 for any path \u03b3\u2032 that is homologous to \u03b3 (see Appendix C for a definition of homologous). Intuitively, this means that the string operators can be wiggled around by products of local stabilizers.\nProposition 3 Every string operator created by moving a trivial anyon type along a closed path is a product of local stabilizers along that path.\nProof of Proposition 3: Let W\u03b3 be a string operator formed by moving a trivial anyon type along a closed path \u03b3. Similar to the proof of Lemma 3, we assume that there is a constant-sized length \u2113W such that the string operator W\u03b3 is entirely supported within a distance \u2113W/2 of \u03b3 (Fig. 29). We also use the constant-sized length \u2113G defined by the property that every gauge generator can be contained within a region of linear size \u2113G\u00d7\u2113G, for some fixed set of local gauge generators.\nAs shown in Fig. 33a, we break the support of W\u03b3 into constant-sized regions, whose linear size is at least \u2113W + \u2113G. We further require that each region Ri contains a point vi along \u03b3, such that vi is at least a distance \u2113W + \u2113G from the boundary of Ri. We then decompose W\u03b3 into a product of short string operators Wi,i+2:\nW\u03b3 = \u220f\ni\nWi,i+2, (180)\nsuch that Wi,i+2 is a truncation from vi to vi+2. Since the endpoints vi and vi+2 of the short string operator are greater than a distance \u2113W + \u2113G from one another, we can apply\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 86\nLemma 3. According to Lemma 3, each short string operator Wi,i+2 creates trivial anyon types localized to Ri and Ri+2. Therefore, there exists a Pauli operator Pi supported in the vicinity of vi such that PiWi,i+2 commutes with the gauge operators in Ri (Fig. 33b). Since W\u03b3 commutes with the gauge operators in Ri, the product Wi\u22122,iP \u2020 i must also commute with all of the gauge operators in Ri.\nWe now define the operator Si for each i as:\nSi \u2261 PiWi,i+2P \u2020i+2. (181)\nBy construction, Si is contained in a constant-sized region and commutes with all of the gauge operators. The topological property of Definition 1 implies that Si is a locally generated stabilizer. The product of Si reproduces the expression for W\u03b3 in Eq. (180):\nW\u03b3 = \u220f\ni\nSi = \u220f\ni\n( PiWi,i+2P \u2020 i+2 ) = \u220f i Wi,i+2. (182)\nThus, the string operator W\u03b3 is a product of local stabilizers supported along \u03b3. \u25a1\nCorollary 1 Any two string operators that correspond to the same anyon type and are supported along homologous paths differ by a product of local stabilizers.\nProof of Corollary 1: Consider any two string operatorsW a\u03b30 andW a \u03b3n for an anyon type a, where the closed paths \u03b30 and \u03b3n are homologous. Given that \u03b30 and \u03b3n are homologous,\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 87\nwe can find a sequence of paths, indexed by i, that interpolates between the two (see Fig. 34). According to Proposition 3, the string operator (W a\u03b3i\u22121) \u22121W a\u03b3i is a product of local stabilizers, since it is a string operator for a trivial anyon type. Therefore, W a\u03b3n can be written as:\nW a\u03b3n = W a \u03b30 n\u220f i=0 [ (W a\u03b3i\u22121) \u22121W a\u03b3i ] , (183)\nwhich shows that W a\u03b30 and W a \u03b3n differ by a product of local stabilizers. \u25a1\nProposition 4 Every closed string operator created by moving a nontrivial anyon type along a non-contractible path is either a nontrivial bare logical operator or a nonlocal stabilizer.\nProof of Proposition 4: LetW a\u03b3\u2032 be a string operator formed by moving a nontrivial anyon type a around the non-contractible path \u03b3\u2032 shown in Fig. 35a. The string operator W a\u03b3\u2032 commutes with all of the gauge operators, so it must be either a nontrivial bare logical operator or a stabilizer. Our task is to show that it cannot be generated by products of local stabilizers, implying that it is a nonlocal element of L. To derive a contradiction, suppose that W a\u03b3\u2032 is generated by local stabilizers, which in general, may be supported anywhere on the torus \u2013 not necessarily in the vicinity of W a\u03b3\u2032 . We can then write W a \u03b3\u2032 as the following product of local stabilizers (Fig. 35a):\nW a\u03b3\u2032 = \u220f\nS\u2208S\u0303loc\n\u03be(S)S. (184)\nHere, S\u0303loc is a set of local generators for the subgroup of locally generated stabilizers S\u0303, and \u03be(S) is a {0, 1}-valued function defined by Eq. (184).\nWe now consider removing local stabilizers from the decomposition ofW a\u03b3\u2032 in Eq. (184). Specifically, we remove local stabilizers from the strip R(1) of constant width shown in\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 88\nFig. 35b. The width of R(1) is taken to be much larger than the linear size of the support of the local gauge generators. We also assume that the boundaries of R(1) are a constant distance from the support ofW a\u03b3\u2032 . By removing the local stabilizers within R (1), the string operator W a\u03b3\u2032 becomes the operator:\nW (1) \u03b3\u2032 \u2261 \u220f S\u2208S\u0303loc \u03be(1)(S)S, (185)\nwhere \u03be(1)(S) is equal to \u03be(S) if the support of S is outside of R(1) and 0 otherwise. The operator W\n(1) \u03b3\u2032 acts as W a \u03b3\u2032 along \u03b3 \u2032, and may act non-identically along the boundary of\nR(1). We define W0 and W1 to be the string operators supported near the boundary of R(1) such that:\nW (1) \u03b3\u2032 = W a\u03b3\u2032W0W1. (186)\nThe string operators W0 and W1 commute with all of the gauge operators. This is because the operator W0W1 is a product of local stabilizers and the supports of W0 and W1 are well-separated relative to the linear size of the gauge generators. Consequently, W0 and W1 can be interpreted as string operators formed by moving anyon types around a non-contractible path (Lemma 3). We assume that W0 corresponds to an anyon type b, in which case W1 must correspond to the anyon type b \u22121. This is due to the fact\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 89\nthat W0W1 is a product of local stabilizers within R (1). For any truncation, there exists Pauli operators localized near the endpoints of the truncation such that the product of the Pauli operators and the truncated string operator commute with all of the gauge operators. This implies that the string operator W0W1 corresponds to the trivial anyon type.\nWe next consider removing a second constant-sized strip of stabilizers from the decomposition of W a\u03b3\u2032 in Eq. (184). This time, we remove stabilizers whose supports are contained within the region R(2) shown in Fig. 35c. Note that we take the overlap of R(1) and R(2) to be such that every local stabilizer generator in S\u0303loc supported in R(1) \u222aR(2) is supported entirely in R(1) or R(2). The operator W\n(1) \u03b3\u2032 is mapped to:\nW (2) \u03b3\u2032 \u2261 \u220f S\u2208S\u0303loc \u03be(2)(S)S, (187)\nwhere \u03be(2)(S) is equal to \u03be(S) if the support of S is outside of R(1) \u222aR(2) and 0 otherwise. The operator W\n(2) \u03b3\u2032 acts as W a \u03b3\u2032 along \u03b3 \u2032 and may act non-identically along the boundary\nof R(1) \u222aR(2). Therefore, it can be written as:\nW (2) \u03b3\u2032 = W a\u03b3\u2032W0W2. (188)\nHere, W0 is the string operator in Eq. (186), andW2 is a string operator supported on the boundary of R(2), as depicted in Fig. 35c. The string operator W2 commutes with all of the gauge operators and thus can be interpreted as a string operator obtained by moving an anyon type along a non-contractible path. Furthermore, the string operator W2 must correspond the anyon type b\u22121. This follows from translation invariance and the fact that W\u221211 W2 is a product of stabilizers supported on R (2). Since W1 corresponds to a string operator for b\u22121, W2 must be a string operator for b \u22121.\nWe can continue removing constant-width strips of stabilizers from the decomposition of W a\u03b3\u2032 in Eq. (184). In the ith step, we remove the stabilizers in the strip R(i) (Fig. 35d), which maps the operator W\n(i\u22121) \u03b3\u2032 to an operatorW (i) \u03b3\u2032 . The operator W (i) \u03b3\u2032 can be expressed\nas:\nW (i) \u03b3\u2032 = W a\u03b3\u2032W0Wi, (189)\nwhere Wi is a string operator supported along the boundary shared by R (i) and \u22c3i j=1 R (j). The operator Wi is a string operator corresponding to the anyon type b \u22121.\nFor a sufficiently large n, the operator W (n) \u03b3\u2032 is a product of local stabilizers supported on a constant-width strip localized near \u03b3\u2032 (Fig. 35e). Moreover, W (n) \u03b3\u2032 is a string operator that can be written as:\nW (n) \u03b3\u2032 = W a\u03b3\u2032W0Wn, (190)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 90\nfor some string operator Wn supported near \u03b3 \u2032, as shown in Fig. 35e. The operator Wn corresponds to a string operator that moves b\u22121 along a non-contractible path, while W0 moves b along the same loop. This means that all together, W\n(n) \u03b3\u2032 is a string operator for\nthe anyon type a.\nThis is a contradiction, however, because W (n) \u03b3\u2032 is a product of local stabilizers supported near \u03b3\u2032 even though a is a nontrivial anyon type. Therefore, W a\u03b3\u2032 cannot be written as a product of local stabilizers, as in Eq. (184). The string operator W a\u03b3\u2032 formed by moving a along \u03b3\u2032 must be either a nontrivial bare logical operator or a nonlocal stabilizer. \u25a1\nThus far, we have shown that nontrivial bare logical operators and nonlocal stabilizers can be created by moving nontrivial anyon types around non-contractible loops. According to Appendix E, the string operator is a nontrivial bare logical operator if the anyon type is opaque. Otherwise, it is a nonlocal stabilizer and the anyon type is transparent. We now argue that this construction exhausts all of the nontrivial bare logical operators and nonlocal stabilizers, in the sense that, up to stabilizers, or products of local stabilizers, respectively, all nontrivial bare logical operators and nonlocal stabilizers can be obtained from products of string operators created by moving nontrivial anyon types along non-contractible paths.\nProposition 5 Every nontrivial bare logical operator and nonlocal stabilizer can be represented by products of string operators that correspond to moving nontrivial anyon types along non-contractible paths.\nProof of Proposition 5: According to the cleaning lemma in Appendix A, every nontrivial bare logical operator and nonlocal stabilizer can be represented by an operator\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 91\nwhose support is contained within the region shown in Fig. 36a. We show further that the nontrivial bare logical operators and nonlocal stabilizers can be generated by string operators wrapped around the non-contractible paths \u03b3 and \u03b3\u2032 in Fig. 7. To see this, we consider truncating an arbitrary nontrivial bare logical operator or nonlocal stabilizer W supported on the intersecting strips in Fig. 36a. We let W denote the truncation of W depicted in Fig. 36b. The truncated operator W commutes with the gauge operators away from the endpoints. However, it may fail to commute with the gauge operators near the endpoints. Therefore, the endpoints may correspond to nontrivial anyon types. Regardless of whether they are nontrivial, we label the anyon types at the endpoints by a and a\u22121. The fact that they are inverses of one another follows from the same logic used in the proof of Lemma 3.\nWith this, we can argue that W decomposes into string operators formed by moving nontrivial anyon types along the paths \u03b3 and \u03b3\u2032. Since the anyon types at the endpoints of W are inverses of each other, they are annihilated by a Pauli operator supported near the endpoints of W . This gives us a string operator wrapped along the non-contractible path \u03b3, as shown in Fig. 36c. We denote the string operator by W a\u03b3 . We then define a string operator W c\u03b3\u2032 supported along the path \u03b3 \u2032 as W c\u03b3\u2032 \u2261 ( W a\u03b3 )\u2020 W . Given that W c\u03b3\u2032 commutes with all of the gauge operators, it corresponds to moving some anyon type c around the loop \u03b3\u2032. Therefore, the operator W = W a\u03b3W c\u03b3\u2032 is generated by the non-contractible loops of string operatorsW a\u03b3 andW c \u03b3\u2032 . The nontrivial bare logical operator or nonlocal stabilizer W was arbitrary, so we see that every nontrivial bare logical operator or nonlocal stabilizer can be represented by a product of string operators such as W a\u03b3 and W c \u03b3\u2032 .\nFurthermore, Proposition 3 tells us that the closed string operators for trivial anyon types are equivalent to products of local stabilizers. This means that either a or c must be nontrivial, sinceW is a nontrivial bare logical operator or a nonlocal stabilizer. If a or c is trivial, then the string operator W a\u03b3 or W c \u03b3\u2032 , respectively, can be removed by multiplying by products of local stabilizers. We find that the resulting nontrivial bare logical operator or nonlocal stabilizer is represented by products of string operators for nontrivial anyon types, as claimed. \u25a1"
        },
        {
            "heading": "G Background on twisted quantum doubles",
            "text": "A TQD with Abelian anyons is (non-uniquely) specified by three pieces of data [88]:\n1. A finite Abelian group A, which takes the general form A = \u220fMi ZNi . 2. A set of integers {ni}Mi=1, where ni belongs to ZNi .\n3. A set of integers {nij}Mi,j=1 for i \u0338= j, where nij belongs to ZNij and Nij is the greatest common divisor of Ni and Nj.\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 92\nThe anyons of the TQD can be generated by a set of M gauge charges {ci}Mi=1 and a choice of M corresponding elementary fluxes {\u03c6i}Mi=1. The gauge charges are unique up to automorphisms of the anyon types \u2013 for example, the gauge charge of a Z2 TC can be chosen as either the e anyon type or the m anyon type. The gauge charges generate the group A under fusion and are bosons with trivial mutual braiding relations:\n\u03b8(ci) = 1, B\u03b8(ci, cj) = 1, \u2200i, j. (191)\nThe elementary fluxes are defined by their braiding relations with the generators of the gauge charges:\nB\u03b8(\u03c6i, cj) = e 2\u03c0i/Ni if i = j,\n1 if i \u0338= j. (192)\nThis captures the Aharonov-Bohm phase from moving a charge around a flux. A choice of elementary fluxes is only defined up to fusing with gauge charges, since fusing \u03c6i with gauge charges does not affect the relations in Eq. (192). Accordingly, the exchange statistics and braiding relations of the elementary fluxes are only determined up to redefinitions by gauge charges. Irrespective of the redefinitions, every choice of elementary fluxes {\u03c6i}Mi=1 satisfies:\n\u03b8(\u03c6i)Ni = e2\u03c0ini/Ni , B\u03b8(\u03c6i, \u03c6j)N ij = e2\u03c0inij/Nij , (193)\nwhere N ij is the least common multiple of Ni and Nj. Lastly, for each i and some set of integers mij (associated to redefining the elementary fluxes by gauge charges), the gauge charges and elementary gauge fluxes obey the following two relations under fusion:31\ncNii = 1, and \u03c6Nii = c2nii \u220f j \u0338=i c nij+mijNij j . (194)\nWe point out that the gauge charges and elementary fluxes generate disjoint groups if and only if ni \u2208 {0, Ni/2}, for all i, and nij = mij = 0, for all i, j. Otherwise, the elementary fluxes fuse into gauge charges.\nAnother important concept is that of a Lagrangian subgroup, as it uniquely determines the gauge charges of a TQD (up to automorphisms of the anyon types). We recall that a Lagrangian subgroup L is a subset of anyon types of an Abelian anyon theory satisfying the following three properties:\n31Note that without loss of generality, we may assume that each Ni is a power of a prime. This implies that Nij must be either Ni or Nj . If it is equal to Nj , then the relation in Eq. (194) is independent of mij , since the fusion of Nj copies of cj is trivial. On the other hand, if Nij is equal to Ni, then the right-hand side has an additional factor of cmijNijj . This is equivalent to redefining \u03c6i by mij copies of cj . Therefore, it is always possible to find a choice of elementary fluxes that satisfies the relation with mij = 0, for all i, j, as in Ref. [20].\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 93\n(i) The anyon types of L form a subgroup under fusion.\n(ii) The anyon types of L are bosons with trivial mutual braiding relations, i.e., for\nany elements ci and cj of L , we have \u03b8(ci) = \u03b8(cj) = 1 and B\u03b8(ci, cj) = 1.\n(iii) For every anyon type a outside of the Lagrangian subgroup, there exists a ci in L\nsuch that B\u03b8(a, ci) \u0338= 1.\nBy Eqs. (191), (192), and (194), the gauge charges of a TQD generate a Lagrangian subgroup. In fact, as argued in Refs. [53, 54], if an Abelian anyon theory has Lagrangian subgroup, then it must be a TQD and the Lagrangian subgroup defines the set of gauge charges up to an automorphism. The high-level explanation is that gauging the 1-form symmetry associated to the anyon types of L produces a system characterized by the trivial anyon theory. Subsequently, un-gauging the symmetry recovers a TQD corresponding to the initial anyon theory, and by construction, the gauge charges are precisely the elements of L ."
        },
        {
            "heading": "H Abelian twisted quantum doubles from Walker-Wang models",
            "text": "In Section 6, we identified an Abelian TQD for every Abelian anyon theory A, such that the TQD contains A as a subtheory. Here, we provide intuition for that particular Abelian TQD by considering the Walker-Wang (WW) model based on A.\nWe recall that a WW model is a three-dimensional exactly-solvable model defined by a two-dimensional anyon theory [89]. The precise details of the lattice models in Ref. [89] are not necessary for the following discussion, but what is important is that the WW model hosts the anyon theory A on its top surface (see Fig. 37). If the WW model is built on a thin two-dimensional slab, then it gives us a quasi-2D model whose anyon theory includes A. As described below, the anyon theory of the thin WW model is, in fact, equivalent to a TQD with Abelian anyons. Thus, from the anyon theory of the thin WW model based on A, we identify an Abelian TQD whose anyon theory contains A as a subtheory.\nTo make the discussion concrete, we imagine a slab of WW model centered on the z = 0 plane, so the top surface is at z = z0 and the bottom surface is at z = \u2212z0, as shown in Fig. 37. Although we do not describe the lattice model explicitly, it is important to note that it is symmetric under the transformation z \u2192 \u2212z, which inverts the WW model across the z = 0 plane.\nThe key feature of the WW model on the slab is that the top surface (at z = z0) hosts the Abelian anyon theory A. This is to say that the anyonic excitations that can be localized to the top surface correspond to the anyon types of A. Likewise, the bottom surface hosts the conjugate anyon theory A\u0304. This is the anyon theory whose anyon types generate the same group as the anyon types of A, but for which the exchange statistics\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 94\nare complex conjugated relative to those of A. That is, for every anyon type a in A, there is a corresponding anyon type a in A\u0304 with the property \u03b8(a) = \u03b8(a)\u2217.\nThe topological excitations in the bulk of the WWmodel depend on whether the anyon theory A is modular or non-modular. If A is a modular anyon theory, then the WWmodel has trivial bulk topological order. In this case, the anyon theory takes the form A \u22a0 A\u0304, where the operation \u22a0 is physically interpreted as stacking decoupled copies of the anyon theories A and A\u0304. If the anyon theory is non-modular, on the other hand, the bulk has deconfined anyons corresponding to the transparent anyon types of A. This means that the transparent anyon types of A and A\u0304 are shared by the two surfaces \u2013 they are free to move from the top surface to the bottom surface through the three-dimensional bulk. Consequently, the transparent anyon types of A and A\u0304 do not correspond to independent anyon types of the WW model. Letting A be the group formed by the anyon types of A (including the transparent anyon types), there are |A| anyon types associated to the top surface. There are then |A|/|T | independent anyon types from the bottom surface, where T is the group generated by the transparent anyon types.\nFurthermore, if the anyon theory A is non-modular, then the thin WW model has an additional set of anyon types, which we refer to as tube-like anyon types. In the threedimensional WW model, these correspond to loop-like excitations created by membrane operators. The loop-like excitations are able to condense on the surfaces of the WW model, so the tube-like excitations can be created with a membrane operator stretching from the top surface to the bottom surface, as shown in Fig. 37. In the two-dimensional (i.e., compactified) system, the tube-like excitations become point-like excitations created\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 95\nby string operators. Intuitively, the WW models based on non-modular Abelian anyon theories can be obtained from models of 1-form symmetry-protected topological orders by gauging the 1-form symmetry [90]. The tube-like excitations can then be interpreted as the line-like gauge charges, while the transparent anyon types are the point-like gauge fluxes. The tube-like anyon types and the transparent anyon types of A are in one-to-one correspondence.\nWhile the tube-like anyon types have bosonic exchange statistics and trivial braiding relations with one another, they have nontrivial braiding relations with the transparent anyon types of A. More specifically, for every generator of the transparent anyon types of A, there is a tube-like anyon type with which it braids nontrivially. This implies that the anyon theory of the thin WW model is modular. All together, there are |A| anyon types from the top surface, |A|/|T | independent anyon types from the bottom surface, and |T | tube-like anyon types. Therefore, the slab of WW model has |A| \u00d7 |A|/|T | \u00d7 |T | = |A|2 anyon types.\nTo argue that the anyon theory of the thin WW model is given by a TQD, we identify a Lagrangian subgroup of the anyon theory (see Section G). We claim that a Lagrangian subgroup LW W is generated by the set of tube-like anyon types and anyon types of the form aa\u0304, where a is in A and a\u0304 is the corresponding anyon type in A\u0304 with \u03b8(a\u0304) = \u03b8(a)\u2217. The first thing to show is that these anyon types form a group under fusion. The tube-like anyon types fuse into anyon types of the form aa\u0304 because of the z \u2192 \u2212z symmetry of the WW model. More specifically, the tube-like anyon types can be created by membrane operators that are invariant under the symmetry, so they must fuse into anyon types that are also invariant. The only possibilities are that the tube-like anyon types fuse into anyon types of the form aa\u0304 or transparent anyon types of A. The anyon types aa\u0304 are invariant under the symmetry, since exchange statistics and braiding relations are complex conjugated upon flipping the orientation of the system. The tube-like anyon types cannot fuse into the transparent anyon types, because the tube-like anyon types have trivial braiding relations with each other, which conflicts with the fact that each tube-like anyon type must braid nontrivially with some transparent anyon type. Therefore, the tube-like anyon types fuse into anyon types of the form aa\u0304.\nSecond, the anyon types of LW W are all bosons with trivial mutual braiding relations. The tube-like anyon types braid trivially with the aa\u0304 anyon types due to the z \u2192 \u2212z symmetry of the WW model. Explicitly, the braiding relation of a tube-like anyon type ci with a and a\u0304 satisfies:\nB\u03b8(ci, a)\u2217 = B\u03b8(ci, a\u0304). (195)\nSince a and a\u0304 can be localized to the top and bottom surface, respectively, we then have:\nB\u03b8(ci, aa\u0304) = B\u03b8(ci, a)B\u03b8(ci, a\u0304) = |B\u03b8(ci, a)|2 = 1. (196)\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 96\nNext, to see that the aa\u0304 anyon types are bosons with trivial mutual braiding relations, we employ the identity in Eq. (26). With this, the exchange statistics \u03b8(aa\u0304) can be computed as:\n\u03b8(aa\u0304) = B\u03b8(a, a\u0304)\u03b8(a)\u03b8(a\u0304) = |\u03b8(a)|2 = 1. (197)\nHere, we used that B\u03b8(a, a\u0304) = 1, since a and a\u0304 can be localized to the top and bottom surface, respectively. Similarly, it can be checked that the anyon types of the form aa\u0304 have trivial mutual braiding relations. For example, the braiding relation of a1a\u03041 and a2a\u03042 is [using Eq. (197)]:\nB\u03b8(a1a\u03041, a2a\u03042) = \u03b8(a1a2a\u03041a\u03042) \u03b8(a1a\u03041)\u03b8(a2a\u03042) = 1. (198)\nFinally, for any anyon type that does not belong to LW W , there is an anyon type in LW W with which it braids nontrivially. To see this, we note that all of the anyon types of the thin WW model are generated by the anyon types of A and the anyon types of LW W . Therefore, it suffices to check that each anyon type in A braids nontrivially with some anyon type in LW W . The transparent anyon types in A braid nontrivially with the tube-like anyon types of LW W . All of the other anyon types of A braid nontrivially with some anyon type of the form aa\u0304. This is because, besides the transparent anyon types, every anyon type a in A braids nontrivially with some anyon type b in A. Thus, a braids nontrivially with bb\u0304, which is in LW W . This confirms that LW W is a Lagrangian subgroup for the anyon theory of the thin WW model based on A. According to Section G, the anyon theory of the thin WW model must be a TQD, and LW W defines a choice of the gauge charges.\nTo specify the class of Abelian TQDs described by thin WW models, we first notice that the anyon types of A correspond to a choice of elementary fluxes of the TQD. This is because the anyon types of A along with the gauge charges, defined by LW W , generate all of the anyon types. Likewise, the anyon types of A\u0304 correspond to a choice of elementary fluxes. Since the anyon types of A or A\u0304, respectively, do not fuse into elements of LW W , we see that the gauge charges and the elementary fluxes must form disjoint groups. According to the group relations in Eq. (194), this means that the TQD associated to the thin WW model is defined by a group A of the general form:\nA = M\u220f\ni=1 ZNi , (199)\nand a set of integers ni \u2208 {0, Ni/2}, for all i, and nij = mij = 0, for all i, j. Here, we take ni to be 0, if Ni is odd. Such a TQD decomposes into a stack of M decoupled TQDs, where the TQD in the ith layer is characterized by the group ZNi and an integer ni \u2208 {0, Ni/2}. This is precisely the TQD described in Section 6.2!\nAccepted in Quantum 2023-10-10, click title to verify. Published under CC-BY 4.0. 97\nThe final step in constructing topological subsystem codes is to gauge out the anyon types belonging to A\u0304. The anyon types in A\u0304 braid nontrivially with the tube-like anyon types and the opaque anyon types of A\u0304. This leaves only the anyon types in A, as desired. We note that to find the particular form for the generators of the anyon types of A\u0304 in Eq. (101), we considered gauging out an arbitrary set of elementary fluxes of the Abelian TQD. We then identified the anyon types of the topological subsystem code and worked backwards to specify the anyon types that need to be gauged out in order to produce the anyon theory A."
        }
    ],
    "title": "Pauli topological subsystem codes from Abelian anyon theories",
    "year": 2023
}