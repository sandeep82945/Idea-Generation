{
    "abstractText": "Integrated sensing, computation, and communication (ISCC) has been recently considered as a promising technique for beyond 5G systems. In ISCC systems, the competition for communication and computation resources between sensing tasks for ambient intelligence and computation tasks from mobile devices becomes an increasingly challenging issue. To address it, we first propose an efficient sensing framework with a novel action detection module. In this module, a threshold is used for detecting whether the sensing target is static and thus the overhead can be reduced. Subsequently, we mathematically analyze the sensing performance of the proposed framework and theoretically prove its effectiveness with the help of the sampling theorem. Based on sensing performance models, we formulate a sensing performance maximization problem while guaranteeing the quality-of-service (QoS) requirements of tasks. To solve it, we propose an optimal resource allocation strategy, in which the minimum resource is allocated to computation tasks, and the rest is devoted to the sensing task. Besides, a threshold selection policy is derived and the results further demonstrate the necessity of the proposed sensing framework. Finally, a real-world test of action recognition tasks based on USRP B210 is conducted to verify the sensing performance analysis. Extensive experiments demonstrate the performance improvement of our proposal by comparing it with some benchmark schemes.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yinghui He"
        },
        {
            "affiliations": [],
            "name": "Guanding Yu"
        },
        {
            "affiliations": [],
            "name": "Yunlong Cai"
        },
        {
            "affiliations": [],
            "name": "Haiyan Luo"
        }
    ],
    "id": "SP:1d20ecd3c44bf1350ad87e418e247aa3fbb1f8c3",
    "references": [
        {
            "authors": [
                "Y. Sun",
                "M. Peng",
                "Y. Zhou",
                "Y. Huang",
                "S. Mao"
            ],
            "title": "Application of machine learning in wireless networks: Key techniques and open issues",
            "venue": "IEEE Commun. Surveys Tuts., vol. 21, no. 4, pp. 3072\u20133108, 4th Quart., 2019.",
            "year": 2019
        },
        {
            "authors": [
                "G. Zhu",
                "D. Liu",
                "Y. Du",
                "C. You",
                "J. Zhang",
                "K. Huang"
            ],
            "title": "Towards an intelligent edge: Wireless communication meets machine learning",
            "venue": "IEEE Commun. Mag., vol. 58, no. 1, pp. 19\u201325, Jan. 2020.",
            "year": 2020
        },
        {
            "authors": [
                "D. Korzun",
                "E. Balandina",
                "A. Kashevnik",
                "S. Balandin",
                "F. Viola"
            ],
            "title": "Ambient Intelligence Services in IoT Environments: Emerging Research and Opportunities",
            "year": 2019
        },
        {
            "authors": [
                "Y. Ma",
                "G. Zhou",
                "S. Wang"
            ],
            "title": "WiFi sensing with channel state information: A survey",
            "venue": "ACM Comput. Surv., vol. 52, no. 3, pp. 1\u201336, May 2020.",
            "year": 2020
        },
        {
            "authors": [
                "J. Liu",
                "C. Xiao",
                "K. Cui",
                "J. Han",
                "X. Xu",
                "K. Ren"
            ],
            "title": "Behavior privacy preserving in RF sensing",
            "venue": "IEEE Trans. Depend. Sec. Comput., vol. 20, no. 1, pp. 784\u2013796, Jan.\u2013Feb. 2023.",
            "year": 2023
        },
        {
            "authors": [
                "Y. Cui",
                "F. Liu",
                "X. Jing",
                "J. Mu"
            ],
            "title": "Integrating sensing and communications for ubiquitous IoT: Applications, trends, and challenges",
            "venue": "IEEE Netw., vol. 35, no. 5, pp. 158\u2013167, Sep. 2021.",
            "year": 2021
        },
        {
            "authors": [
                "F. Liu"
            ],
            "title": "Integrated sensing and communications: Towards dualfunctional wireless networks for 6G and beyond",
            "venue": "IEEE J. Sel. Areas Commun, vol. 40, no. 6, pp. 1728\u20131767, Jun. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "Y. Mao",
                "C. You",
                "J. Zhang",
                "K. Huang",
                "K.B. Letaief"
            ],
            "title": "A survey on mobile edge computing: The communication perspective",
            "venue": "IEEE Commun. Surveys Tutor., vol. 19, no. 4, pp. 2322\u20132358, Aug. 2017.",
            "year": 2017
        },
        {
            "authors": [
                "N. Abbas",
                "Y. Zhang",
                "A. Taherkordi",
                "T. Skeie"
            ],
            "title": "Mobile edge computing: A survey",
            "venue": "IEEE Internet Things J., vol. 5, no. 1, pp. 450\u2013465, Feb. 2018.",
            "year": 2018
        },
        {
            "authors": [
                "P. Liu",
                "G. Zhu",
                "S. Wang",
                "W. Jiang",
                "W. Luo",
                "H.V. Poor",
                "S. Cui"
            ],
            "title": "Toward ambient intelligence: Federated edge learning with taskoriented sensing, computation, and communication integration",
            "venue": "IEEE J. Sel. Topics Signal Process., vol. 17, no. 1, pp. 158\u2013172, Jan. 2023.",
            "year": 2023
        },
        {
            "authors": [
                "D. Wen",
                "P. Liu",
                "G. Zhu",
                "Y. Shi",
                "J. Xu",
                "Y.C. Eldar",
                "S. Cui"
            ],
            "title": "Taskoriented sensing, computation, and communication integration for multidevice edge AI",
            "venue": "2022, arXiv:2207.00969.",
            "year": 2022
        },
        {
            "authors": [
                "W. Xu",
                "Z. Yang",
                "D.W.K. Ng",
                "M. Levorato",
                "Y.C. Eldar",
                "M. Debbah"
            ],
            "title": "Edge learning for B5G networks with distributed signal processing: Semantic communication, edge computing, and wireless sensing",
            "venue": "IEEE J. Sel. Top. Signal Process., vol. 17, no. 1, pp. 9\u201339, Jan. 2023.",
            "year": 2023
        },
        {
            "authors": [
                "Q. Luo",
                "C. Li",
                "T.H. Luan",
                "W. Shi"
            ],
            "title": "Minimizing the delay and cost of computation offloading for vehicular edge computing",
            "venue": "IEEE Trans. Serv. Comput., vol. 15, no. 5, pp. 2897\u20132909, Sep. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "Y. Fu",
                "C. Li",
                "F.R. Yu",
                "T.H. Luan",
                "Y. Zhang"
            ],
            "title": "A survey of driving safety with sensing, vehicular communications, and artificial intelligencebased collision avoidance",
            "venue": "IEEE Trans. Intell. Transp. Syst., vol. 23, no. 7, pp. 6142\u20136163, Jul. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "B. Li",
                "A.P. Petropulu",
                "W. Trappe"
            ],
            "title": "Optimum co-design for spectrum sharing between matrix completion based MIMO radars and a MIMO communication system",
            "venue": "IEEE Trans. Signal Process., vol. 64, no. 17, pp. 4562\u20134575, Sep. 2016.",
            "year": 2016
        },
        {
            "authors": [
                "Y. He",
                "Y. Cai",
                "H. Mao",
                "G. Yu"
            ],
            "title": "RIS-assisted communication radar coexistence: Joint beamforming design and analysis",
            "venue": "IEEE J. Sel. Areas Commun., vol. 40, no. 7, pp. 2131\u20132145, Jul. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "M. Kotaru",
                "K. Joshi",
                "D. Bharadia",
                "S. Katti"
            ],
            "title": "SpotFi: Decimeter level localization using WiFi",
            "venue": "ACM SIGCOMM Comput. Commun. Rev., vol. 45,",
            "year": 2015
        },
        {
            "authors": [
                "Y. Wang",
                "K. Wu",
                "L.M. Ni"
            ],
            "title": "WiFall: Device-free fall detection by wireless networks",
            "venue": "IEEE Trans. Mob. Comput., vol. 16, no. 2, pp. 581\u2013 594, Feb. 2017.",
            "year": 2017
        },
        {
            "authors": [
                "Y. Xie",
                "M. Li",
                "J. Xiong",
                "K. Jamieson"
            ],
            "title": "MD-Track: Leveraging multidimensionality in passive indoor Wi-Fi tracking",
            "venue": "Proc. Annu. Int. Conf. Mob. Comput. Netw. (MobiCom), Aug. 2019, pp. 1\u201316.",
            "year": 2019
        },
        {
            "authors": [
                "F. Liu",
                "L. Zhou",
                "C. Masouros",
                "A. Li",
                "W. Luo",
                "A. Petropulu"
            ],
            "title": "Toward dual-functional radar-communication systems: Optimal waveform design",
            "venue": "IEEE Trans. Signal Process., vol. 66, no. 16, pp. 4264\u20134279, Aug. 2018.",
            "year": 2018
        },
        {
            "authors": [
                "F. Liu",
                "C. Masouros",
                "A.P. Petropulu",
                "H. Griffiths",
                "L. Hanzo"
            ],
            "title": "Joint radar and communication design: Applications, state-of-the-art, and the road ahead",
            "venue": "IEEE Trans. Commun., vol. 68, no. 6, pp. 3834\u20133862, Jun. 2020.",
            "year": 2020
        },
        {
            "authors": [
                "F. Liu",
                "C. Masouros",
                "A. Li",
                "H. Sun",
                "L. Hanzo"
            ],
            "title": "MU-MIMO communications with MIMO radar: From co-existence to joint transmission",
            "venue": "IEEE Trans. Wireless Commun., vol. 17, no. 4, pp. 2755\u20132770, Apr. 2018.",
            "year": 2018
        },
        {
            "authors": [
                "Y. He",
                "Y. Cai",
                "G. Yu",
                "K. -K. Wong"
            ],
            "title": "Joint transceiver design for dualfunctional full-duplex relay aided radar-communication systems",
            "venue": "IEEE Trans. Commun., vol. 70, no. 12, pp. 8355\u20138369, Dec. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "C. You",
                "K. Huang",
                "H. Chae",
                "B.-H. Kim"
            ],
            "title": "Energy-efficient resource allocation for mobile-edge computation offloading",
            "venue": "IEEE Trans. Wireless Commun., vol. 16, no. 3, pp. 1397\u20131411, Mar. 2017.",
            "year": 2017
        },
        {
            "authors": [
                "Y. Mao",
                "J. Zhang",
                "K.B. Letaief"
            ],
            "title": "Dynamic computation offloading for mobile-edge computing with energy harvesting devices",
            "venue": "IEEE J. Sel. Areas Commun., vol. 34, no. 12, pp. 3590\u20133605, Dec. 2016.",
            "year": 2016
        },
        {
            "authors": [
                "J. Liu",
                "Y. Mao",
                "J. Zhang",
                "K.B. Letaief"
            ],
            "title": "Delay-optimal computation task scheduling for mobile-edge computing systems",
            "venue": "Proc. IEEE Int. Symp. Inf. Theory, Jul. 2016, pp. 1451\u20131455.",
            "year": 2016
        },
        {
            "authors": [
                "J. Zhang"
            ],
            "title": "Joint resource allocation for latency-sensitive services over mobile edge computing networks with caching",
            "venue": "IEEE Internet Things J., vol. 6, no. 3, pp. 4283\u20134294, Oct. 2018.",
            "year": 2018
        },
        {
            "authors": [
                "C. Ding",
                "J. Wang",
                "H. Zhang",
                "M. Lin",
                "G. Li"
            ],
            "title": "Joint MIMO precoding and computation resource allocation for dual-function radar and communication systems with mobile edge computing",
            "venue": "IEEE J. Select. Areas Commun., vol. 40, no. 7, pp. 2085\u20132102, Jul. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "N. Huang",
                "T. Wang",
                "Y. Wu",
                "Q. Wu",
                "T.Q.S. Quek"
            ],
            "title": "Integrated sensing and communication assisted mobile edge computing: An energy efficient design via intelligent reflecting surface",
            "venue": "IEEE Wireless Commun. Lett., vol. 11, no. 10, pp. 2085\u20132089, Oct. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "R. Xiao",
                "J. Liu",
                "J. Han",
                "K. Ren"
            ],
            "title": "OneFi: One-shot recognition for unseen gesture via COTS Wi-Fi",
            "venue": "Proc. Conf. Embed. Networked Sens. (SenSys), Coimbra, Portugal, Nov. 2021, pp. 206\u2013219.",
            "year": 2021
        },
        {
            "authors": [
                "X. Wang",
                "K. Sun",
                "T. Zhao",
                "W. Wang",
                "Q. Gu"
            ],
            "title": "Dynamic speed warping: Similarity-sased one-shot learning for device-free gesture signals",
            "venue": "Proc. IEEE Int. Conf. Comput. Commun. (INFOCOM), Toronto, Canada, 2020, pp. 556\u2013565.",
            "year": 2020
        },
        {
            "authors": [
                "C. Feng",
                "N. Wang",
                "Y. Jiang",
                "X. Zheng",
                "K. Li",
                "Z. Wang",
                "X. Chen"
            ],
            "title": "Wi-Learner: Towards one-shot learning for cross-domain Wi-Fi based gesture recognition",
            "venue": "Proc. ACM Interact., Mobile, Wearable Ubiquitous Technol. (IMWUT), vol. 6, no. 3, pp. 1\u201327, Sep. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "M. Li",
                "Y. Meng",
                "J. Liu",
                "H. Zhu",
                "X. Liang",
                "Y. Liu",
                "N. Ruan"
            ],
            "title": "When CSI meets public WiFi: Inferring your mobile phone password via WiFi Signals",
            "venue": "Proc. ACM SIGSAC Conf. Comput. Commun. Secur. (CCS), Oct. 2016, pp. 1068\u20131079.",
            "year": 2016
        },
        {
            "authors": [
                "J. Liu",
                "Y. He",
                "C. Xiao",
                "J. Han",
                "L. Cheng",
                "K. Ren"
            ],
            "title": "Physical-world attack towards WiFi-based behavior recognition",
            "venue": "Proc. IEEE Conf. Comput. Commun. (INFOCOM), Honolulu, London, United Kingdom, Jun. 2022, pp. 400\u2013409.",
            "year": 2022
        },
        {
            "authors": [
                "Y. He",
                "J. Ren",
                "G. Yu",
                "Y. Cai"
            ],
            "title": "D2D communications meet mobile edge computing for enhanced computation capacity in cellular networks",
            "venue": "IEEE Trans. Wireless Commun., vol. 18, no. 3, pp. 1750\u20131763, Mar. 2019.",
            "year": 2019
        },
        {
            "authors": [
                "C.B. Barneto",
                "L. Anttila",
                "M. Fleischer",
                "M. Valkama"
            ],
            "title": "OFDM radar with LTE waveform: Processing and performance",
            "venue": "Proc. IEEE Radio Wireless Symp. (RWS), Jan. 2019, pp. 1\u20134.",
            "year": 2019
        },
        {
            "authors": [
                "S. Tan",
                "Y. Ren",
                "J. Yang",
                "Y. Chen"
            ],
            "title": "Commodity WiFi sensing in 10 years: Status, challenges, and opportunities",
            "venue": "IEEE Internet Things J., vol. 9, no. 18, pp. 17832\u201317843, Sep. 2022.",
            "year": 2022
        },
        {
            "authors": [
                "Y. Zheng",
                "Y. Zhang",
                "K. Qian",
                "G. Zhang",
                "Y. Liu",
                "C. Wu",
                "Z. Yang"
            ],
            "title": "Zero-effort cross-domain gesture recognition with Wi-Fi",
            "venue": "Proc. Annu. Int. Conf. Mobile Syst. Appl. Services (MobiSys), New York, NY, USA, 2019, pp. 313\u2013325.",
            "year": 2019
        },
        {
            "authors": [
                "R. Seri"
            ],
            "title": "A tight bound on the distance between a noncentral chi square and a normal distribution",
            "venue": "IEEE Commun. Lett., vol. 19, no. 11, pp. 1877\u20131880, Nov. 2015.",
            "year": 1877
        },
        {
            "authors": [
                "G. Li",
                "S. Wang",
                "J. Li",
                "R. Wang",
                "F. Liu",
                "M. Zhang",
                "X. Peng",
                "T.X. Han"
            ],
            "title": "Rethinking the tradeoff in integrated sensing and communication: Recognition accuracy versus communication rate",
            "venue": "2021, arXiv:2107.09621. 15",
            "year": 2021
        },
        {
            "authors": [
                "K. He",
                "X. Zhang",
                "S. Ren",
                "J. Sun"
            ],
            "title": "Deep residual learning for image recognition",
            "venue": "Proc. IEEE Conf. Comput. Vis. Pattern Recognit. (CVPR), Las Vegas, NV, USA, Jun. 2016, pp. 770\u2013778.",
            "year": 2016
        },
        {
            "authors": [
                "Y. He",
                "J. Ren",
                "G. Yu",
                "Y. Cai"
            ],
            "title": "Optimizing the learning performance in mobile augmented reality systems with CNN",
            "venue": "IEEE Trans. Wireless Commun., vol. 19, no. 8, pp. 5333\u20135344, Aug. 2020.",
            "year": 2020
        },
        {
            "authors": [
                "J. Kiefer"
            ],
            "title": "Sequential minimax search for a maximum",
            "venue": "Proc. Amer. Math. Soc. (AMS), 1953, pp. 502\u2013506.",
            "year": 1953
        }
    ],
    "sections": [
        {
            "text": "Index Terms\u2014Integrated sensing and communication, mobile edge computing, resource allocation, action recognition.\nI. INTRODUCTION\nThe past decades have witnessed innovations in network architecture and wireless technology for better communication services, such as high data rate, massive device access, and low latency. On the other hand, with artificial intelligence (AI) showing its power in almost every field, the intelligent revolution has finally come to wireless networks [1]. Implementing AI in wireless networks can provide diversified intelligent services in cellular networks [2]. One representation among them is to achieve ambient intelligence and smart environments [3] based on a large amount of real-time sensing data. Compared with vision-based sensing, radio-frequency (RF)-based sensing is a more appealing approach for data collection since it can work in non-line-of-sight scenarios, as well as it is lightneedless [4] and privacy-preserving [5]. Three key aspects are\nY. He, G. Yu, and Y. Cai are with the College of Information Science and Electronic Engineering, Zhejiang University, Hangzhou 310027, China, and also with Zhejiang Provincial Key Laboratory of Information Processing, Communication and Networking (IPCAN), Hangzhou 310027, China (e-mail: 2014hyh@zju.edu.cn; yuguanding@zju.edu.cn; ylcai@zju.edu.cn).\nH. Luo is with Lenovo Research, Shanghai 201210, China (e-mail: luohy7@lenovo.com).\nnecessary for enabling RF-based sensing in cellular networks, i.e., spectrum resource, hardware, and computation resource. The former two are used for transmitting and receiving sensing signals, and the last one is used for running sensing algorithms.\nRegarding the first and second aspects, directly allocating extra spectrum and equipping individual hardware would incur high overhead. To address this issue, integrated sensing and communication (ISAC) has been recently proposed since sensing and communication systems have a similar hardware architecture and can work on the same spectrum [6]. ISAC is expected to improve the spectral and energy efficiencies with a low hardware cost by jointly designing the sensing and communication functions [7]. To provide computation resource, a novel architecture, referred to mobile edge computing (MEC), has been recently recognized as a core technology by deploying edge servers with sufficient computation capacity at cellular base stations (BSs) [8]. By offloading the computation task to nearby edge servers, end-to-end latency can be significantly reduced as compared to cloud computing [9]. Motivated by this, integrated sensing, computation, and communication (ISCC) has been recently proposed by combining ISAC with MEC to achieve the goal of supporting ambient intelligence and smart environments [10], [11]."
        },
        {
            "heading": "A. Related Work",
            "text": "ISCC is one of the key technologies for the next generation wireless networks and it will play a vital role in a wide range of application scenarios, such as smart home scenarios [10], internet of vehicle scenarios [12]\u2013[14], and so on. ISAC and MEC are fundamental technologies for ISCC. The studies of ISAC have two stages, i.e., spectrum sharing and hardware sharing. For spectrum sharing, radar devices and communication devices share the same spectrum, and the main goal is to improve spectrum efficiency by jointly designing beamforming matrices [15], [16]. For instance, a joint design of transmit covariance matrix and radar sampling scheme has been proposed in [15] to reduce the effective interference power at the radar receiver. Moreover, since the sensing and communication systems have a similar hardware design, hardware sharing becomes possible to reduce the overhead. One way to realize hardware sharing is to enable the sensing function within a communication system [17]\u2013[19]. For example, the work in [17] utilized a commercial WiFi card with a modified driver to realize the localization function. In addition, the other method ar X\niv :2\n21 1.\n04 02\n2v 3\n[ cs\n.I T\n] 6\nJ un\n2 02\n3\n2 is to design a dual-functional waveform that further exploits the potential of ISAC [20]\u2013[23]. For instance, the authors of [20] proposed an optimal waveform toward a trade-off between radar and communication performance.\nHowever, the above works only focused on the processes of transmitting and receiving sensing signals and have not thoroughly studied the computation process of sensing data. Note that for delay-sensitive sensing tasks, the computational delay is non-negligible. Meanwhile, offloading sensing data to cloud servers certainly incurs high communication latency. MEC can be adopted to address this issue since it provides computation ability to the edge network by equipping BSs with edge servers. The studies of MEC mainly concentrate on joint communication and computation resource allocation for minimizing the total energy consumption [24], [25] or end-toend delay [26], [27].\nNevertheless, the design of resource allocation in MEC has not considered sensing tasks and their features. As a result, a major issue for ISCC is how to allocate the limited available resources, taking into account both communication and computation. Existing works [10], [11], [28], [29] have proposed their solutions for different scenarios to address this problem. The authors in [28] considered a general sensing task and jointly optimized computation resource allocation and MIMO precoding for radar waveforms and communication symbols with the delay constraint and resource limitation in ISCC systems. To reduce the interference between sensing and communication, intelligent reflecting surface (IRS) is adopted in [29] to suppress the interference between sensing and communication. A joint resource allocation and beamforming algorithm is proposed to minimize energy consumption. Differently, literatures [10], [11] investigated AI-based sensing tasks. Specifically, the training process of human motion recognition tasks in a federated edge learning (FEEL) system has been investigated in [10], and the resource allocation problem of ISCC was addressed to accelerate the convergence of FEEL. On the other hand, the authors of [11] studied the inference process of AI-based sensing tasks where the sensing accuracy is measured by an approximate but tractable metric, i.e., discriminant gain. An optimal joint transmit power and communication resource allocation strategy has been proposed for maximizing the discriminant gain. However, directly implementing AI-based sensing algorithms will bring a high computational expense in ISCC systems since they are computation-intensive. Meanwhile, in most scenarios, such as smart home scenarios, the sensing target might be static for an extended period1, or there may even be no sensing target. Besides, existing works about RF-based sensing mainly focus on generalization issue [30]\u2013[32] and privacy issue [5], [33], [34]. The former tries to improve the generalization ability of the sensing algorithm for automatically adapting to new and previously unseen sensing targets and environments, since RF signals are sensitive to the environments and sensing targets. The latter one aims to avoid the information leakage, since RF signals are non-intrusive and can be transmitted through\n1The static state means that the sensing scenario remains unchanged. For example, a human (i.e., the sensing target) keeps the same posture, which would not cause the variations of sensing signals over time.\nthe wall. Nevertheless, the computation overhead issue of sensing tasks has not been studied before. Inspired by this, we aim to propose a novel sensing framework to further improve computational and communication efficiencies while guaranteeing sensing performance."
        },
        {
            "heading": "B. Main Contributions",
            "text": "In this paper, we consider an ISCC system where a triplefunctional BS equipped with an edge server needs to perform a sensing task, i.e., action recognition, for the ambient intelligence and also provide communication and computing services in the cellular network. Specifically, the sensing task serves the smart home scenarios where variations of wireless signals could be employed to detect or recognize human daily activities and thereby the BS can support diversified intelligent services, such as fall detection and intelligent home control [6]. Since the sensing and computation tasks compete for the limited computation and communication resources, it is crucial to design an effective framework and resource allocation strategy. This work is mostly related to the prominent ISAC work [42]. It only focuses on the tradeoff between recognition accuracy and communication rate. Moreover, a convolutional neural network (CNN)-based sensing algorithm was directly used in [42] for sensing tasks without considering the computation resource waste for the static state. Motivated by this, we aim to design an effective sensing framework and the corresponding resource allocation strategy to further improve the sensing, computation, and communication performance simultaneously. In particular, we address three main challenges: 1) how to design this sensing framework; 2) how to analyze the sensing performance based on the proposed sensing framework; 3) how to jointly allocate resources for maximizing the sensing performance under the quality-of-service (QoS) requirements of devices. The main contributions of this work are summarized as follows.\n\u2022 We propose a novel and effective sensing framework where a key action detection module is placed before the CNN module. In the action detection module, the power of high-frequency components of sensing signals is compared with a threshold for determining whether the sensing target is static due to the fact that the action of the target will cause the variations of sensing signals. \u2022 We quantitatively analyze the overall sensing performance of the proposed sensing framework, i.e., the sensing accuracy and delay. Specifically, the sampling theorem is applied to calculate the miss rate and false positive rate for the action detection module. The accuracy is modeled as a monotonically increasing function, and the delay of the CNN module is proportional to the sampling rate. Furthermore, we prove that our proposed sensing framework can save unnecessary computation resource, and the gain is positively related to the probability of the occurrence of the static state. \u2022 A sensing accuracy maximization problem is formulated with the delay requirement of computation tasks. By addressing this problem, we propose an optimal resource allocation strategy in which the resource allocated to\n3\ncomputation tasks is minimized and the remaining resource is allocated to the sensing task to maximize the accuracy. Besides, an optimal threshold selection policy is also derived. \u2022 We conduct a real-world test of the action recognition task using the USRP B210. The proposed mathematical models are validated with the collected dataset. Furthermore, numerical results demonstrate that the proposed sensing framework and algorithm outperform several other benchmark schemes.\nThe rest of the paper is organized as follows. Section II introduces the ISCC system model, the computation task model, and the sensing framework. Section III analyzes the sensing performance of the proposed framework and proves its superiority. Section IV formulates a sensing performance maximization problem and decomposes it into two subproblems for developing an overall algorithm. Section V presents the test results, and the whole paper is concluded in Section VI."
        },
        {
            "heading": "II. SYSTEM MODEL AND SENSING FRAMEWORK",
            "text": "In this section, we introduce the ISCC system, the computation task model, and the proposed effective sensing framework.\nA. ISCC System\nAs depicted in Fig. 1, we consider an ISCC system containing one triple-functional BS equipped with an edge server and N mobile devices. The BS aims to conduct a sensing task and provide communication and computing services. Each device has its own computation task. Due to the limited computation resource at the mobile device, all computation tasks need to be offloaded to the edge server located at the BS via the wireless links. Meanwhile, the BS needs to perform a sensing task, i.e., an action recognition task. For this purpose, the wireless sensing signal is transmitted towards the sensing area at the sampling rate F s. The echo is collected at the triple-functional BS and then fed back to the edge server for action recognition. To sum up, the BS has three functions: 1) communication function: mobile devices can offload their tasks to the BS via wireless links; 2) sensing function: the BS can transmit sensing signals; 3) computation function: the computation and sensing tasks can be completed with the help of the edge server.\nIn this work, since the interference between sensing and communication would seriously affect the sensing performance, the BS adopts the time division multiple access\n(TDMA) method to perform sensing and communication functions, as shown in Fig. 2.2 Specifically, there are three types of time slots: 1) sensing signal transmission slot for transmitting the sensing signal; 2) guard slot for collecting sensing echoes; 3) communication slot for data offloading. Let \u03c4 s denote the total proportion of one sensing signal transmission slot and one guard slot, i.e., total duration per unit time. Moreover, the BS transmits sensing signals at a sampling rate of F s, which means there are F s sensing signal transmission slots and F s guard slots per unit time. Thus, the total proportion of communication resource occupied by the sensing task is \u03c4 sF s. The proportion of communication resource allocated to device n for offloading per unit time is denoted by \u03c4 cn.\n3 Therefore, we have \u03c4 sF s + \u2211N n=1 \u03c4 c n \u2264 1.4"
        },
        {
            "heading": "B. Computation Task Model",
            "text": "The computation task of device n can be represented by a tuple (Vn, Cn, Tmaxn ), where Vn (in bit) denotes the data size of the task, Cn (in CPU cycle/bit) denotes the computation intensity, i.e., the required number of CPU cycles for computing one bit, and Tmaxn (in s) denotes the delay limitation. The computation task offloading of each device can be divided into two main phases: 1) transmission phase, where each device transmits its task to the BS with the allocated time slots; 2) computation phase, where the edge server computes the task. Note that the phase of returning the computation result can be neglected because of the small data size [24].\nIn the transmission phase, let B denote the system bandwidth and let \u03c32c denote the channel noise power. Then, the instantaneous data rate of device n is given by\nRn = B log2\n( 1 +\n|hn|2pn \u03c32c\n) , (1)\nwhere hn is the channel gain between device n and the BS, and pn is the transmit power of device n. Meanwhile, the proportion of communication resource occupied by device n is \u03c4 cn, that is, the time slot available for transmission of device n is \u03c4n per unit time. Thus, for device n, the transmitted data size per unit time is \u03c4 cnRn, which means that the average data rate of device n is \u03c4 cnRn. Thus, for device n, the delay of transmission phase can be expressed as\nT trann = Vn\n\u03c4 cnRn . (2)\n2We should note that the whole system is under the control of the BS and each device only can transmit data within the allocated time slots.\n3The delay of computation tasks is not related to the sampling rate, and thus we directly describe the proportion of communication resource allocated to device n as \u03c4 cn.\n4Compared with the duration of the time slot for sensing and communication tasks, the duration of the controlling signal is much shorter and thus can be ignored. This assumption has been widely adopted in similar works [10], [11].\n4 In the computation phase, let fn (in CPU cycle/s, i.e., Hz) denote the computation resource of the edge server allocated to device n. Then, according to [35], the delay of computation phase for device n can be expressed as\nT compn = VnCn fn . (3)\nBased on the above, the overall delay for device n to complete its task is given by\nTn = T tran n + T comp n = Vn \u03c4 cnRn + VnCn fn . (4)"
        },
        {
            "heading": "C. Sensing Framework",
            "text": "For the sensing task of action recognition, the overall sensing framework contains two phases, i.e., signal collection phase at the BS and action recognition phase at the edge server, as shown in Fig. 3. The former one is utilized for collecting the radar echo signal, and the latter one is utilized for processing the signal to obtain the action type.5\nFor the signal collection phase at the BS, we consider an orthogonal frequency division multiplexing (OFDM) radar [36] because it can be easily implemented in existing BSs.6 With the OFDM radar, the total system bandwidth B is divided into K subcarriers. The baseband radar signal, denoted by xk for subcarrier k, is transmitted via an RF chain after OFDM modulation. After reflection and OFDM demodulation, the baseband echo, denoted by yk for subcarrier k, is obtained. Finally, the processed OFDM radar signal for subcarrier k can be calculated by gk =\nyk xk , which can be regarded as the channel\nstate information (CSI) between the transmitting and receiving antennas of the BS. To detect the action type of sensing target, we need to collect the CSI samples over a period of time, whose length is denoted by T s. With the sampling rate being\n5In this paper, we adopt the CNN-based sensing algorithm since it is one of the most popular solutions for the RF-based action recognition task [37]. Moreover, our proposed method can also be extended to other sensing algorithms.\n6Our design can be extended to other radar types, such as frequencymodulated continuous wave (FMCW) radar [38].\nF s, the total collected CSI samples can construct a CSI matrix, denoted by G = [gH1 g H 2 \u00b7 \u00b7 \u00b7 gHK ]H \u2208 CK\u00d7(T\nsF s), where gk = [gk[1] gk[2] \u00b7 \u00b7 \u00b7 gk[T sF s]] \u2208 C1\u00d7(T\nsF s) is the collected CSI vector for subcarrier k over the period of T s, gk[m] is the m-th CSI sample for subcarrier k, and (\u00b7)H denotes the operation of conjugate transpose.\nFor the action recognition phase at the edge server, in the conventional scheme, the collected CSI matrix is directly input into the CNN module [39]. However, in some scenarios (especially smart home scenarios), the target may not exist in the sensing area, or the sensing target may be in a static state. Thus, continuously employing CNN would result in high cost of computation resource. Meanwhile, we should note the fact that an action of a sensing target causes the CSI to vary over time, which leads to an increase in the power of highfrequency components. Motivated by this, we design an action detection module placed before the CNN module, as shown in Fig. 3. It is used for detecting whether the sensing target is in a static state or an action state. To achieve it, we first pick the CSI vector of the first subcarrier among the K subcarriers.7 Then, to obtain the power of high-frequency components, we need to convert the CSI vector from the time domain to the frequency domain. Thus, we adopt the fast Fourier transform (FFT) to obtain the discrete Fourier transform (DFT) of the CSI vector, as\nD[l] = 1\u221a T sF s T sF s\u2211 m=1 g1[m] exp ( \u2212j2\u03c0lm T sF s ) . (5)\nNext, we need to calculate the power of high-frequency components. Let [F\u2113, Fu] denote the range of high frequency and then the corresponding range for DFT D[l] is [\u230aF\u2113T s\u230b, \u2308FuT s\u2309] according to [40]. The power of highfrequency components can be calculated as the ratio of the total energy in the range [F\u2113T s, FuT s] to the number of samples, as\nP = 1\nT sF s \u2308FuT s\u2309\u2211 l=\u230aF\u2113T s\u230b |D[l]|2 . (6)\nFinally, by comparing the power P with a pre-set threshold, denote by \u03b7, we can determine whether the sensing target is in the static state or the action state. If it is in the action state, the CSI matrix G is further input into the CNN module for action recognition; otherwise, the result of the static state is output.\nThe key to the proposed action detection module is the threshold. If the threshold is set too high, it may cause a large number of action state instances to be recognized as the static state, which pulls down the average recognition accuracy. If the threshold is set too low, a number of static state instances may be detected as the action state, increasing both the cost of computation resource and delay. Therefore, it is important to select an appropriate threshold to reduce both computation consumption and delay without sacrificing\n7Here, we take the first subcarrier as an example. In fact, any of the K subcarriers can be used for the action detection module. Moreover, all K subcarriers can be used in the proposed action detection module with the help of a voting classifier, which deserves future work.\n5 accuracy. Moreover, the sampling rate also influences the accuracy. With a higher sampling rate, it can intuitively be seen that the accuracy becomes higher since more information about the sensing target is collected. In the next section, we will analyze the effect of threshold and sampling rate on the average accuracy and delay of the proposed sensing framework."
        },
        {
            "heading": "III. SENSING PERFORMANCE ANALYSIS",
            "text": "In this section, we first analyze the sensing accuracy and delay of our proposed sensing framework and then prove its effectiveness."
        },
        {
            "heading": "A. Sensing Accuracy",
            "text": "In our proposed sensing framework, the sensing accuracy is jointly determined by two modules, i.e., the action detection module and the CNN module. We assume that the action recognition task has I recognition types and their set is denoted by {1, 2, \u00b7 \u00b7 \u00b7 , I}, where the first type is the static state and {2, 3, \u00b7 \u00b7 \u00b7 , I} is the set of action state types.8 For the action detection module, we can describe its performance in terms of miss rate and false positive rate. To be specific, the miss rate for the i-th action type is defined as the proportion of the i-th action instances that are detected as the static state, i.e.,\npoi = M0i Mi , i = 2, 3, \u00b7 \u00b7 \u00b7 , I, (7)\nwhere Mi is the total number of the i-th action type instances and M0i is the number of the i-th action type instances that are recognized as the static state. The false positive rate is defined as the proportion of the static state instances that are recognized as the action state, i.e.,\npl = M a0 M0 , (8)\nwhere M0 is the total number of static state instances and M a0 is the number of static state instances that are recognized as the action state. For the CNN module, recognition accuracy is utilized to describe the performance, which is defined as the ratio of the correctly recognized instances to the total number of recognition instances. Although we have defined performance metrics, they cannot be used for theoretical analysis since they are based on statistical results. Thus, in the following, we will theoretically model them with the help of the sampling theorem.\nFirst of all, we focus on the action detection module. As we mentioned before, the key is the threshold. Moreover, the sampling rate also affects poi and p\nl. To illustrate the effects of the threshold and sampling rate, we collect some instances and plot the power of high-frequency components in Fig. 4. From the figure, we can observe that the power of the action state is obviously higher than that of the static state, which demonstrates the effectiveness of the proposed action detection\n8The number of types, i.e., I , should be given in the prior design and training processes for AI-based sensing tasks. The value of I is generally determined according to specific scenarios and tasks. In the test part, we consider 8 typical action types.\n0 20 40 60 80 100\nInstance\n0\n5\n10\n15\n20\n25\n30\n35\n40\nP o\nw e\nr o\nf h\nig h\n-f re\nq u\ne n\nc y\nc o\nm p\no n\ne n\nts (\nF s =\n5 0\n)\nAction stateStatic state\n(a) The sampling rate is 50 Hz.\nmodule. Besides, as the sampling rate increases, the power gap between the two states becomes higher, which further reduces both the miss rate and the false positive rate. It is intuitively reasonable since the sensing target becomes more informative, and it is easier to distinguish between the static state and the action state with a higher sampling rate. Recall that we aim to optimize the sensing performance in this paper. The challenge, however, is that the mathematical relationships among the sampling rate, threshold, miss rate, and false positive rate are unclear.\nTo model the effect of sampling rate, we need to consider the continuous-time CSI of the first subcarrier in the time domain, denoted by gc1(t). Then, the collected CSI can be rewritten as the sample of the continuous-time CSI at sampling rate F s, as\ng1[m] = g c 1(t)|t=m/F s + w0[m] (9)\n= gc1 (m F s ) + w0[m], m = 1, 2, \u00b7 \u00b7 \u00b7 , T sF s, (10)\nwhere w0[m] is the estimation error that can be modeled as the Gaussian noise with mean being zero and variance being \u03c32. Then, according to the sampling theorem [40], the relationship between the DFT D[l] of g1[m] and the Fourier transform of gc1(t), denoted by D c(F ), can be expressed as\nD[l] = 1\u221a T sF s ( T sF s\u22121\u2211 m=0 gc1 (m F s ) exp ( \u2212j2\u03c0lm T sF s ) (11)\n6 +\nT sF s\u22121\u2211 m=0 w0[m] exp ( \u2212j2\u03c0lm T sF s ))\n=\n\u221a F s\nT s +\u221e\u2211 m=\u2212\u221e Dc (( l T sF s \u2212m ) F s ) +W0[l], (12)\nwhere W0[l] is the equivalent Gaussian noise in the frequency domain with zero mean and variance \u03c32. Supposing Dc(F ) = 0 when |F | > F s/2, we can further simplify (12) as\nD[l] =\n\u221a F s T s Dc ( l T s ) +W0[l]. (13)\nThen, the power calculated in the proposed action detection module can be rewritten as\nP = 1\nT sF s \u2308FuT s\u2309\u2211 l=\u230aF\u2113T s\u230b \u2223\u2223\u2223\u2223\u2223 \u221a F s T s Dc ( l T s ) +W0[l] \u2223\u2223\u2223\u2223\u2223 2\n(14)\n= 1\n(T s) 2 \u2308FuT s\u2309\u2211 l=\u230aF\u2113T s\u230b \u2223\u2223\u2223\u2223\u2223Dc ( l T s ) + \u221a T s F s W0[l] \u2223\u2223\u2223\u2223\u2223 2 . (15)\nThus, P follows the noncentral chi-squared distribution with the degree of freedom (DoF) of \u2308FuT s\u2309\u2212\u230aF\u2113T s\u230b+1. Since the high frequency range is wide enough and T s is long enough, e.g., F\u2113 = 10 Hz and T s = 3 s, P approximately follows the normal distribution according to [41] and its mean and variance are given by\n\u00b5P = \u03bb+ r\nT sF s , \u03c32P = 4\n\u03c32\nT sF s \u03bb+ 2\n\u03c32\n(T sF s) 2 r, (16)\nrespectively, where\n\u03bb = 1\n(T s) 2 \u2308FuT s\u2309\u2211 l=\u230aF\u2113T s\u230b \u2223\u2223\u2223\u2223Dc( lT s )\u2223\u2223\u2223\u22232 ,\nr = \u03c32 (\u2308FuT s\u2309 \u2212 \u230aF\u2113T s\u230b+ 1) .\n(17)\nMoreover, instances of the same action cannot be exactly the same. For example, the target may not stand at the same location when the target performs the same action. Therefore, we add a constant, denoted by \u03c32d, into the variance and it describes the distinction of action instances. Therefore, the revised variance is given by\n\u03c32P = 4 \u03c32\nT sF s \u03bb+ 2\n\u03c32\n(T sF s) 2 r + \u03c3\n2 d. (18)\nBased on the above analysis, we can mathematically model the relationship among the sampling rate, threshold, miss rate, and false positive rate, as shown in the following proposition.\nProposition 1: The miss rate for the i-th action is given by\npoi = Q ( \u00b5P,i \u2212 \u03b7 \u03c3P,i ) , i = 2, 3, \u00b7 \u00b7 \u00b7 , I, (19)\nand the false positive rate for the static state is given by\npl = Q ( \u03b7 \u2212 \u00b5P,1 \u03c3P,1 ) , (20)\n0 50 100 150 200 250 300 350 400\nFs\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\nA c c u\nra c y (\n% )\nFig. 5. The relationship between the recognition accuracy and sampling rate. where Q(\u00b7) is the Q-function9, \u00b5P,i = \u03bbi+ ri\nT sF s , and \u03c32P,i =\n4 \u03c32\nT sF s \u03bbi+2\n\u03c32\n(T sF s) 2 ri+\u03c3\n2 d,i. \u03bbi, ri, and \u03c3 2 d,i are parameters\nthat can be obtained via fitting on the collected sensing dataset. From Proposition 1, we can find that poi increases but p l decreases with the threshold, which confirms the statement we mentioned in Section II-C. Moreover, both the mean and variance decrease with sampling rate, which is consistent with Fig. 4.\nNext, we need to model the accuracy of the CNN module. According to [42], the accuracy is positively correlated with the sampling rate. A higher sampling rate means more information about the sensing target, and it is reasonable that the CNN module can achieve higher accuracy. Thus, it can be represented by a monotonically increasing function, denoted by \u03b1(F s). To verify this, we collect a sensing dataset and adopt one of the most well-known CNNs, ResNet50 [43]. After fully training until convergence, the relationship between the accuracy and sampling rate is shown in Fig. 5. We can observe that the accuracy is monotonically increasing with F s.\nBased on the above analysis of two modules, we can express the recognition accuracy of each type and show the average recognition accuracy with the probability distribution of recognition types. Specifically, the accuracy for the i-th action type is (1\u2212 poi )\u03b1(F s) with i \u2265 2 since instances of the i-th type can be recognized correctly only after they are not detected as the static state by the action detection module. The accuracy for the static state is (1\u2212pl)+pl\u03b1(F s) where (1 \u2212 pl) and pl\u03b1(F s) represent the probabilities that instances of the static state are correctly detected by the action detection module, and incorrectly detected by the action detection module but correctly detected by the CNN module, respectively. Therefore, the average recognition accuracy of the action recognition task is given by\nA = I\u2211 i=2 pmi (1\u2212 poi )\u03b1(F s)+pm1 ( (1\u2212 pl) + pl\u03b1(F s) ) , (21)\nwhere pmi = Mi\u2211I i=1 Mi denotes the probability of the i-th type\nwith \u2211I\ni=1 p m i = 1."
        },
        {
            "heading": "B. Sensing Delay",
            "text": "The delay of the signal collection phase is constant, and the cost of the action detection module is small enough to\n9https://cnx.org/contents/hDU5uzaA@2/The-Q-function\n7 be neglected since the main computation cost in the action detection module is the FFT operation. Therefore, we focus on the CNN module.10 Recall that the input of the CNN module is matrix G and its size is K \u00d7 (T sF s). Meanwhile, the main part of the CNN is the convolutional layer, which causes the major computation delay of the CNN. According to [44], the computational complexity of convolutional layers is proportional to the input matrix size, i.e., K\u00d7(T sF s). Thus, the overall computational complexity of the CNN module is O (KT sF s). Let f s denote the computation resource at the edge sever allocated to the CNN module. The corresponding delay can be modeled as\nTCNN = CsKT sF s\nf s , (22)\nwhere Cs is the computation cost of the CNN module per element.\nSince we have added the action detection module, not every instance would pass through the CNN module. Thus, we utilize the average delay to represent the performance of sensing tasks. Based on the analysis in Section III-A, the probability of an instance passing through the CNN module is\npCNN = I\u2211 i=2 pmi (1\u2212 poi ) + pm1 pl, (23)\nwhere the first part is for action types and the second part is for the static state. Combining the probability in (23) with the delay in (22), the average delay of the sensing task is\nT s =\n( I\u2211\ni=2\npmi (1\u2212 poi ) + pm1 pl ) CsKT sF s\nf s . (24)"
        },
        {
            "heading": "C. Performance Comparison",
            "text": "With the above analysis, we can identify the performance improvement of the proposed sensing framework by comparing it with the conventional one where there is no action detection module. The performance gain can be derived as shown in the following theorem.\nTheorem 1: Under the same recognition accuracy target and delay requirement, the proposed sensing framework needs less computation resource than the conventional scheme when the following condition is satisfied 1\u2212 I\u2211\ni=2\npmi \u03b1(F s)\u03c3P,1\npm1 (1\u2212 \u03b1(F s))\u03c3P,i exp\n( (\u00b5P,1) 2\n2\u03c32P,1 \u2212 (\u00b5P,i)\n2\n2\u03c32P,i\n) > 0.\n(25) The performance gain, defined as the ratio of the saved computation resource to the required computation resource in the conventional framework, is\n\u03c1 = min\n{ pm1 (1\u2212 pl)\nA |A=\u03b1(F s), 1\u2212 pCNN|\u03b7=\u03b7u\n} , (26)\nwhere \u03b7u = min i\u2208{2,\u00b7\u00b7\u00b7 ,I} \u00b5P,i.\n10For example, according to test results, when F s is 200 Hz and the computation resource of the edge server is 2.64 GHz, the computation delay of the action detection is around 2\u00d7 10\u22125 s while that of the CNN module is around 0.75 s.\nProof: Please refer to Appendix A. Remark 1: According to Theorem 1, we can verify the performance gain, that is, the proposed sensing framework can reduce the cost of computation resource without lowering the recognition accuracy. In other words, compared with the conventional framework, it can improve the accuracy with the same computation resource. To understand (25), we can focus on the probability distribution of action, i.e., {pmi }, and the accuracy of the CNN module, i.e., \u03b1(F s). As the probability of the static state pm1 becomes higher, the condition is easier to be satisfied since the action detection module can avoid more unnecessary computation cost. Meanwhile, as the accuracy of the CNN module increases, the condition is more difficult to satisfy, because more instances would be input into the CNN module to achieve higher average recognition accuracy. Based on the above analysis, the proposed sensing framework is suitable for smart home scenarios, since the sensing target (e.g., human) keeps in the static state most of the time. When the condition is met, there are two cases. The performance gain is 1 \u2212 pCNN|\u03b7=\u03b7u when the action detection module can almost perfectly distinguish between action instances and static instances, otherwise, it is pm1 (1\u2212 pl)\nA . In the first case,\nthe performance gain is only determined by the probability of passing through the CNN module, i.e., pCNN. Furthermore, the relationship between them is negatively correlated since the computation cost increases with the probability of passing through the CNN module. In the second case, the performance gain is influenced by both the accuracy of the CNN module and the probability of the static state. The performance gain decreases because more instances are fed into the CNN module to achieve higher overall accuracy as the CNN accuracy increases. The performance gain increases with the probability of the static state. It is because, as the probability of the static state increases, the threshold in the action detection module can be set higher without pulling down the accuracy according to (21), and fewer instances are input into the CNN module. This eventually reduces the probability of computation. Besides, even in the worst case, the proposed sensing framework maintains the same performance as the conventional framework."
        },
        {
            "heading": "IV. SENSING ACCURACY MAXIMIZATION",
            "text": "In this section, we formulate a mathematical problem to maximize the sensing accuracy and then decompose it into two subproblems for achieving its solution."
        },
        {
            "heading": "A. Problem Formulation",
            "text": "Thus far, we have mathematically modeled the sensing performance including the average recognition accuracy in (21) and the average sensing delay in (24). In the following, we aim to solve the third challenge mentioned before, i.e., maximizing the sensing performance. To be specific, we aim to maximize the sensing accuracy under the delay requirement, denoted by T s,max, by optimizing the threshold and sampling rate. Meanwhile, we need to consider the delay requirement of each computation task since the computation and communication resource is limited. Let f e denote the total computation\n8 resource at the edge server. Then, we formulate the sensing accuracy maximization problem, as\nmax {F s,\u03b7,f s,\u03c4 cn,fn} A = I\u2211 i=2 pmi (1\u2212 poi )\u03b1(F s)\n+ pm1 ( (1\u2212 pl) + pl\u03b1(F s) ) , (27a)\ns.t. T s \u2264 T s,max, (27b) Tn \u2264 Tmaxn , \u2200n, (27c)\n\u03c4 sF s + N\u2211 n=1 \u03c4 cn \u2264 1, (27d)\nf s + N\u2211 n=1 fn \u2264 f e, (27e) 0 \u2264 \u03b7 \u2264 \u03b7u, (27f) F s \u2208 Z+, f s, \u03c4 cn, fn \u2265 0, (27g)\nwhere Z+ denotes the set of positive integers. In the above, (27b) and (27c) are the delay constraints for the sensing task and computation tasks, respectively, (27d) and (27e) are the communication and computation resource limitation constraints, respectively, and (27f) gives the range of the threshold where the upper bound is \u03b7u that is the minimum power mean among all action types. The reason for setting an upper bound is that the accuracy would drop rapidly if the threshold is higher than \u03b7u."
        },
        {
            "heading": "B. Problem Decomposition",
            "text": "By jointly considering (27a), (27b), and (27f), we can find that the effect of sampling rate on the sensing accuracy is quite complicated. Thus, we first give F s and then solve the accuracy maximization problem (27) with a given F s. After that, by performing an exhaustive search on F s, we can find the optimal solution to problem (27). To solve the accuracy maximization problem (27) with given F s, we can find that the sensing and computation tasks compete for the computation resource. Meanwhile, we aim to maximize the sensing accuracy. Therefore, we can minimize the computation resource required for the computation tasks while satisfying their delay requirement, and allocate all remaining resource to the sensing task. In this way, the accuracy maximization problem (27) for a given F s can be intuitively decoupled into two subproblems. The first one is a resource allocation problem that minimizes the required computation resource by optimizing \u03c4 cn and fn, as\nmin {fn,\u03c4 cn} N\u2211 n=1 fn, (28)\ns.t. (27c), (27d), and (27g).\nThe second one is a threshold selection problem that maximizes the sensing accuracy by optimizing the threshold with f s = f e \u2212 \u2211N n=1 fn, as\nmin \u03b7 A, (29)\ns.t. (27b) and (27f).\nIn the following, we will solve the two subproblems in turn."
        },
        {
            "heading": "C. Resource Allocation Strategy",
            "text": "First of all, we can prove that problem (28) is convex, as shown in Lemma 1.\nLemma 1: Problem (28) is a convex optimization problem. Proof: The objective function and constraints (27d) and (27g) are linear, and constraint (27c) is a linear combination of two convex functions, i.e., 1/\u03c4 cn and 1/fn. As a result, problem (28) is convex, which ends the proof.\nBased on Lemma 1, we utilize the Lagrangian method to solve problem (28) and the corresponding partial Lagrangian function can be expressed as\nL = N\u2211\nn=1\nfn + N\u2211 n=1 \u03bbn (Tn \u2212 Tmaxn )\n+ \u00b5 ( \u03c4 sF s +\nN\u2211 n=1 \u03c4 cn \u2212 1\n) , (30)\nwhere \u03bbn and \u00b5 are the Lagrange multipliers associated with the constraints (27c) and (27d). Let {f\u22c6n, \u03c4 c,\u22c6n } denote the optimal solution to problem (28). Then, by applying the Karush-Kuhn-Tucker (KKT) conditions, we can derive the following theorem.\nTheorem 2: The optimal solution to problem (28) can be given by \u03c4 c,\u22c6n = Vn Tmaxn ( 1 Rn + \u221a Cn \u00b5\u22c6Rn ) , f\u22c6n = Vn\nTmaxn\n( Cn + \u221a \u00b5\u22c6Cn Rn ) , n = 1, 2, \u00b7 \u00b7 \u00b7 , N, (31)\nwhere \u00b5\u22c6 is the optimal Lagrange multiplier, as\n\u00b5\u22c6 =\n\u2211N n=1 Vn Tmaxn \u221a Cn Rn(\n1\u2212 \u03c4 sF s \u2212 \u2211N\nn=1 Vn\nTmaxn Rn ) . (32) Proof: Please refer to Appendix B. Remark 2: Theorem 2 gives the optimal resource allocation strategy. The allocated amount of resource to each computation task is negatively related to the data rate and is positively related to the computation intensity and task size. The computation resource decreases sublinearly with the data rate exponentially by 1/2. Moreover, we should note that the remaining computation resource is all allocated to the sensing task. Thus, the computation resource for the sensing task increases sublinearly with exponential 1/2 of the data rate."
        },
        {
            "heading": "D. Threshold Selection Policy",
            "text": "Now, we focus on problem (29). To solve it, we need to explore the properties of the objective function and constraint (27b), i.e., A and T s. T s decreases with \u03b7 \u2208 [0, \u03b7u] since poi monotonically increases with \u03b7 and p\nl monotonically decreases with \u03b7. Thus, delay constraint (27b) is equivalent to \u03b7 \u2264 \u03b7T , where \u03b7T satisfies that T s = T s,max and can be obtained via the exhaustive search algorithm. The computational complexity is O (log(\u03b7u/\u03f5)), where \u03f5 is the tolerance of accuracy.\nAs for A, it is a concave function with \u03b7 \u2208 [\u00b5P,1, \u03b7u] since both pl and poi are convex with \u03b7 \u2208 [\u00b5P,1, \u03b7u]. However,\n9 when \u03b7 \u2208 [0, \u00b5P,1], A is not concave since pl is not convex, and thus we cannot obtain the optimal solution directly. To address it, we adopt piecewise linear approximation (PLA) for pl. First of all, the set [0, \u00b5P,1] is divided into M subsets and\nthe m-th subset is [ (m\u2212 1)\u00b5P,1\nM , m\u00b5P,1 M\n] . In each subset, pl\nis approximated as a linear function. Then, A is a concave function with \u03b7 belonging to each subset since pl is linear and poi is convex. Let \u03b7\nA,m denote the threshold that maximizes A within the m-th subset and it can be obtained via the Golden-section search algorithm [46] with the computational complexity of O (log(\u00b5P,1/M/\u03f5)). Besides, the threshold that maximizes A within [\u00b5P,1, \u03b7u] is denoted by \u03b7A,M+1. Then, the threshold that maximizes A within [0, \u03b7u], denoted by \u03b7A, is given by\n\u03b7A = max m\u2208{1,\u00b7\u00b7\u00b7 ,M+1} \u03b7A,m. (33)\nThe computational complexity for calculating \u03b7A is O (M log(\u00b5P,1/M/\u03f5) + log((\u03b7u \u2212 \u00b5P,1)/\u03f5) +M).\nBy jointly considering the objective function and delay constraint, there are two cases.\n\u2022 When \u03b7A \u2265 \u03b7T , \u03b7A is a feasible solution to problem (29) and the maximum accuracy is achieved when \u03b7 = \u03b7A. \u2022 When \u03b7A < \u03b7T , the delay requirement cannot be satisfied when \u03b7 = \u03b7A and the accuracy decreases with \u03b7 > \u03b7A. Thus, the maximum accuracy is achieved when \u03b7 = \u03b7T .\nCombining the above two cases, the optimal solution to problem (29) is shown in the following theorem.\nTheorem 3: The optimal threshold selection policy is given by \u03b7\u22c6 = max ( \u03b7T , \u03b7A ) . (34)\nRemark 3: From Theorem 3, the delay requirement may limit the sensing accuracy. We should note that when the accuracy is limited by the delay constraint in the proposed sensing framework, there is no feasible solution in the conventional framework. This is because the proposed sensing framework is equivalent to the conventional one when \u03b7 = 0, and \u03b7T should be set higher than 0 to meet the delay constraint as T s decreases with \u03b7 \u2208 [0, \u03b7u]. Furthermore, the accuracy of the proposed framework is higher than that of the conventional one when the accuracy is not limited by the delay constraint. As a result, the proposed framework performs better than the conventional one."
        },
        {
            "heading": "E. Overall Algorithm",
            "text": "Before presenting the overall algorithm, we give an upper bound of F s in the following.\nLemma 2: An upper bound of F s is given by\nF su =\n\u230a 1\n\u03c4s\n( 1\u2212\nN min n\nVnf e/min\nn Rn\nmax n\nTmaxn f e \u2212N min\nn Vn min n Cn\n)\u230b . (35)\nProof: Please refer to Appendix C. Based on the above analysis, we can obtain the overall algorithm to problem (27), as shown in Algorithm 1. Specifically, we perform exhaustive searching on F s. In each loop iteration, we solve problems (28) and (29)\nAlgorithm 1: Overall Algorithm for Solving Problem (27).\n1 Initialize the maximal error tolerance \u03f5 > 0 and the maximal accuracy A\u22c6 = 0; 2 for F s \u2208 {1, \u00b7 \u00b7 \u00b7 , F su} do 3 % Resource allocation strategy; 4 Obtain the optimal resource allocation strategy {\u03c4 c,\u22c6n , f\u22c6n} with Theorem 2; 5 % Threshold Selection Policy; 6 Obtain \u03b7\u22c6 with Theorem 3; 7 Calculate the overall accuracy A; 8 if A\u22c6 < A then 9 A\u22c6 = A;\n10 end 11 end\nwith Theorems 2 and 3, respectively. By comparing the accuracy under different F s, we can find the maximal accuracy of problem (27), denoted by A\u22c6. The computational complexity of each loop iteration is O (N +M log(\u00b5P,1/M/\u03f5) + log((\u03b7u \u2212 \u00b5P,1)/\u03f5) +M), where the computational complexity for obtaining the optimal resource allocation strategy is O (N). Since the number of loop iterations is F su, the total computational complexity of Algorithm 1 is\nO (F su (N +M log(\u00b5P,1/M/\u03f5) + log(\u03b7u/\u03f5) +M)) . (36)\nFurthermore, Algorithm 1 is based on the exhaustive search method. Meanwhile, each loop solves the resource allocation problem (28) with Theorem 2 and the threshold selection problem (29) with Theorem 3. Thus, the convergence of Algorithm 1 can be guaranteed.\nTo tackle extreme scenarios where the computation ability of the BS is limited, we also introduce a lowcomplexity algorithm. Specifically, in each loop, we can set M = 1 for reducing the computational complexity of solving the threshold selection policy optimization problem to O (log(\u00b5P,1/\u03f5) + log(\u03b7u/\u03f5)). Regarding the number of loops, we observe the sensing accuracy generally increases with the sampling rate according to Fig. 12 in Section V-C. Thus, we heuristically seek to find the maximum sampling rate that ensures there is a feasible solution to problem (27) with binary search algorithm. As a result, the computational complexity of the low-complexity algorithm is O (log(F su) (N + log(\u00b5P,1/\u03f5) + log(\u03b7u/\u03f5)))."
        },
        {
            "heading": "V. TEST RESULTS",
            "text": "In this section, we conduct experiments to validate the effectiveness of the proposed algorithm."
        },
        {
            "heading": "A. Test Parameters",
            "text": "The test settings are provided as follows unless otherwise specified. We consider a triple-functional BS with a radius of 300 m, and 15 devices are randomly located in the coverage. According to the long term evolution (LTE)\n10\nstandards [45], the system bandwidth is 4 MHz and the noise spectral density is -174 dBm/Hz. The channel gain between each device and the BS is generated by following the path loss model: 128.1 + 37.6 log10 (d[km]), where d denotes the distance between each device and the BS in kilometer and the small-scale fading is set to Rayleigh distributed with uniform variance. The transmit power of each device is set as 24 dBm. The total computation resource at the edge server is set as 40 GHz. For the computation task at the device, the data size and computation intensity follow the uniform distribution with Vn \u2208 [0.3, 1] Mbits and Cn \u2208 [400, 1000] CPU cycles/s, respectively, and the delay tolerance of all computation tasks is 0.4 s [35].\nFor the sensing task, we consider an OFDM radar signal, where the FFT number is 64 and the cyclic prefix length is 16. The time of one sensing signal transmission slot is 128 us. The experiment setup is shown in Fig. 6. Specifically, we use one USRP B210 to generate OFDM radar signals and one USRP B210 to collect radar echoes. Eight volunteers are invited to perform eight different behaviors, i.e., standing still, kicking, raising a hand, waving, bending down, walking, sitting down, and standing up, where standing still refers to the static state. We totally collect 3,200 CSI matrices as a dataset, where 2,560 CSI matrices are used for training and 640 CSI matrices are used for testing. We adopt ResNet50 for the CNN module. It is trained on a Linux server equipped with four NVIDIA GeForce GTX 3080 GPUs and tested on a Linux personal computer (PC) equipped with an Intel i7-8700K CPU, which is regarded as the edge server.\nThe detailed procedures of the simulation and experiment are presented in Fig. 7. Based on the sensing setting, we first collect the sensing dataset with USRP B210. The dataset is used for fitting \u03bbi, ri, and \u03c32d,i mentioned in Proposition 1 and training the CNN module to obtain the accuracy function \u03b1(F s). The results can verify the proposed sensing models.\nNext, under the communication setting, the performance of the proposed Algorithm 1 can be confirmed with \u03bbi, ri, \u03c32d,i, and \u03b1(F s). Note that when there is no feasible solution, the accuracy is set as 12.5% which is a lower bound of the action recognition task and is achieved with the random guess."
        },
        {
            "heading": "B. Model Verification",
            "text": "In Section III, we have proposed two mathematical models: one is a power model of high-frequency components, i.e., P , for describing the miss rate and false positive rate in the action detection module, and the other is a delay model for the CNN module. Here, we use the collected real-world sensing dataset to verify both models. First of all, Fig. 8 shows the mean and variance of P for eight types and the corresponding fitted curves, respectively. The real mean and variance of each type are calculated based on the collected CSI matrices, and the corresponding fitted curves are obtained by following (16) and (18), respectively. It can be observed that both the mean and variance decrease with the sampling rate and the fitted curves well match the real results under different sampling rates. Furthermore, we also plot Fig. 9 to verify Proposition 1 and describe the relationship among miss rate, false positive rate, sampling rate, and threshold. We only plot the miss rate of one action type due to the page limit. The remaining action types show similar results. It can be observed that the realworld results match the theoretical results well, which further proves the effectiveness of our proposed model for the action detection module.\nIn Fig. 10, we show the real-world computation delay of the CNN module with the Linux PC and the corresponding fitted curves based on (22). It can be seen that the computation delay increases with the sampling rate but decreases with the allocated computation resource. Moreover, the fitted curves match the real delay well. This verifies the effectiveness of the proposed delay model for the CNN module."
        },
        {
            "heading": "C. Algorithm Investigation and Performance Comparison",
            "text": "First of all, we show the convergence behavior of Algorithm 1 and the low-complexity algorithm in Fig. 11. Since Algorithm 1 is based on the exhaustive search algorithm, it requires more than 1,000 iteration loops when the error tolerance (i.e., the step between two adjacent sampling rates) is set as 1. To accelerate convergence, the tolerance can be set to 10, and the number of loops is about 100. The final accuracy with the error tolerance being 10 is almost the same as that with the error tolerance being 1. Moreover, Algorithm 1 can be performed in parallel. Specifically, in each loop of Algorithm 1, the overall accuracy of different sampling rates can be calculated in parallel. The edge server used in our test contains 6 CPU cores and the number of loops can be reduced to about 30. As for the low-complexity algorithm, it is based on the binary\n11\n0 500 1000 1500 2000\nF s\n0\n20\n40\n60\n80 100 P ,i Real results, #1 Fitted curve, #1 Real results, #2 Fitted curve, #2 Real results, #3 Fitted curve, #3 Real results, #4 Fitted curve, #4\nReal results, #5 Fitted curve, #5 Real results, #6 Fitted curve, #6 Real results, #7 Fitted curve, #7 Real results, #8 Fitted curve, #8\n(a) The fitted curves of the power mean for eight types.\n0 500 1000 1500 2000\nF s\n0\n50\n100\n150\n200\n250\n300\n350\n2 P ,i\nReal results, #1 Fitted curve, #1 Real results, #2 Fitted curve, #2 Real results, #3 Fitted curve, #3 Real results, #4 Fitted curve, #4\nReal results, #5 Fitted curve, #5 Real results, #6 Fitted curve, #6 Real results, #7 Fitted curve, #7 Real results, #8 Fitted curve, #8\n(b) The fitted curves of the power variance for eight types.\nFig. 8. The verification of the mathematical model for the power of high-frequency components.\n2 4 6 8 10 12 14 16 18\nComputation resource (GHz)\n0\n0.2\n0.4\n0.6\n0.8\n1\n1.2\nC o\nm p\nu ta\nti o\nn d\ne la\ny (\ns )\nReal results (F s =200Hz) Fitted curve (F s =200Hz) Real results (F s =100Hz) Fitted curve (F s =100Hz) Real results (F s =50Hz) Fitted curve (F s =50Hz) Real results (F s =25Hz) Fitted curve (F s =25Hz)\nFig. 10. The real-world computation delay of the CNN module with different sampling rates. 10 0 10 1 10 2 10 3 Number of iterations/loops\n0\n0.2\n0.4\n0.6\n0.8\n1\nA c c u\nra c y (\n% )\nAlgorithm 1 (tolerance=1) Algorithm 1 (tolerance=10) Algorithm 1 (tolerance=10, parallel) Low-complexity (tolerance=1)\n(a) Accuracy vs. number of iterations/loops.\n10 0\n10 1\n10 2\n10 3\nNumber of iterations/loops\n0\n10 0\n10 1\n10 2\n10 3\nR e\ns id\nu a\nl\nAlgorithm 1 (tolerance=1) Algorithm 1 (tolerance=10) Algorithm 1 (tolerance=10, parallel) Low-complexity (tolerance=1)\n(b) Residual vs. number of iterations/loops\nFig. 11. Convergence behavior of the proposed algorithms.\nsearch algorithm and the number of iterations is about 10, which verifies its high efficiency. Besides, the final accuracy of the low-complexity algorithm is almost the same as that of Algorithm 1, which verifies the high performance of the low-complexity algorithm.\nNext, we also plot the optimized sensing accuracy under the given sampling rate, as shown in Fig. 12. From the figure, the optimized sensing accuracy substantially increases with the sampling rate. However, when the sampling rate is too high, there is no feasible solution and the sensing accuracy is set as 12.5% as we have mentioned before. This is because that the delay requirement of the sensing task cannot be satisfied when the sampling rate is too high.\nTo show the performance advantage of the sensing framework and the proposed algorithm, we select the following benchmark algorithms.\n\u2022 Conventional scheme. The action detection module is not adopted in this scheme and the CSI matrix is directly input into the CNN module [42]. The resource allocation strategy is similar to the proposed algorithm. To be specific, it can be obtained by setting the threshold as 0 in Algorithm 1. \u2022 Average computation resource scheme. The computation resource is equally allocated to each device and sensing\ntask, i.e., fn = f e N + 1 ,\u2200n and f s = f e N + 1 . The communication resource allocation strategy and the threshold selection policy are the same as those in the proposed algorithm. \u2022 Average communication resource scheme. The commu-\nnication resource is equally allocated to each device and sensing task, i.e., \u03c4 cn = 1\nN + 1 ,\u2200n and F s =\u230a\n1\n(N + 1)\u03c4 s\n\u230b . The computation resource allocation strat-\negy and the threshold selection policy are the same as those in the proposed algorithm.\nFig. 13 shows the effect of the average computation resource at the edge server on the accuracy. From the figure, we can observe that our proposed scheme provides the best performance among four schemes. Specifically, when the overall accuracy is 90%, our proposed scheme requires 2.58 GHz average computation resource at the edge server, while the conventional scheme requires 3.19 GHz average computation resource. The proposed sensing framework saves about 19.1% computation resource, and this gap becomes more remarkable when accuracy is 95%. This verifies the effectiveness of the proposed sensing framework. When the computation resource is sufficient, the accuracy gap between the proposed scheme and the conventional scheme becomes very small. In this case, the accuracy of the CNN module is almost 100% and all instances are input into the CNN module. Moreover, compared with the average computation resource scheme, our proposed scheme achieves higher performance when the computation resource is insufficient and shows the similar performance when the computation resource is sufficient. It demonstrates the effectiveness of the proposed resource allocation strategy. Besides, the average communication resource scheme achieves much lower accuracy than the proposed scheme even if the computation resource is sufficient since its sampling rate\n12\nFig. 13. Average computation resource vs. accuracy. 0 20 40 60 80 100 Probability of the static state (%)\n0 0.2 0.4 0.6 0.8 1\n76\n78\n80\n82\n84\n86\n88\nA c c u\nra c y (\n% )\nFig. 16. The influence of the threshold.\n0 0.1 0.2 0.3 0.4\nLatency limitation of the sensing task (s)\n20\n30\n40\n50\n60\n70\n80\n90\nA c c u\nra c y (\n% )\nFig. 17. Delay requirement of sensing task vs. accuracy.\nis given and thus the accuracy is limited. Furthermore, the performance of the proposed low-complexity algorithm is close to that of Algorithm 1, which confirms that the lowcomplexity algorithm can be used in the extreme scenario.\nFig. 14 shows the effect of the probability of the static state on the accuracy. It can be seen that the proposed scheme offers the same accuracy as the conventional scheme when the probability is low. As we can imagine, the threshold should be set close to 0 when the probability of the static state is low; otherwise, a large number of action instances would be detected as the static state, which reduces the recognition accuracy. In this case, the impact of the action detection module on the ISCC system is small. As the probability of the static state increases, the threshold increases, and the action detection module shows its impact, i.e., reducing the required computation resource. Thus, more computation resource can be allocated to computation tasks, and then more communication resource can be saved for sensing. It eventually gives rise to an increase in sampling rate and accuracy improvement. In the same way, the accuracy of the average communication resource scheme and average computation resource scheme also increases with the probability of the static state. The above results demonstrate that the proposed sensing framework is applicable for the scenario with a high probability of the static state. This conclusion is consistent with Theorem 1, which proves that the performance gain brought by the proposed sensing framework is positively related to the probability of the static state. Moreover, the performance of the proposed lowcomplexity algorithm is worse than that of the conventional scheme when the probability of the static state is low. It is because the low-complexity is suboptimal and cannot be applied in this case.\nFig. 15 shows the effect of the number of devices on the ac-\ncuracy. We can observe that the accuracy of the four analyzed schemes all decreases with the number of devices. It is because we need to meet the delay requirements of computation tasks, and thus the communication and computation resources are preferentially allocated to the devices. The remaining amount of resource decreases with the number of devices, which decreases the accuracy. When the number of devices is 10, the computation resource at the edge server is abundant, and thus the sampling rates of the four schemes are high enough, and the sensing accuracy approaches the upper limit, i.e., 100%. When the number of devices is 20, the computation resource at the edge server is limited and thus the sampling rates of the four schemes are low enough, and the sensing accuracy approaches the lower limit, i.e., 12.5%. Besides, the accuracy of the four schemes is almost the same when the number of devices is 10 and 20. In contrast, the accuracy of the proposed and conventional schemes drops more slowly than that of the average communication/computation resource scheme. It demonstrates that the proposed resource allocation strategy can suppress the effect of the number of devices.\nTo show the effectiveness of the threshold selection policy, we also compare the proposed scheme with the fixed threshold scheme under different probabilities, as shown in Fig. 16. To be specific, we consider that the ratio of threshold to its upper limit \u03b7u is constant in the fixed threshold scheme. From the figure, our proposed scheme shows better performance since the proposed threshold selection policy is optimal, in which the threshold is adaptively selected based on the allocated resource and the probability. Moreover, the threshold that achieves the peak of the fixed threshold scheme increases with the probability of the static state. This is consistent with the explanation for Fig. 14, where the threshold increases with the probability of the static state for reducing the unnecessary\n13\ncomputation resource cost. Fig. 17 shows the effect of the delay requirement of the sensing task on the accuracy of the four analyzed schemes. From the figure, the impact of the delay requirement is tiny when the delay requirement becomes loose. This result is reasonable since the accuracy grows slowly when the sampling rate is higher than 50 Hz, as shown in Fig. 5. In this case, the decrease of the delay requirement may lead to a drop in the sampling rate but would not lead to a decline in the accuracy. As the delay requirement becomes strict, the sampling rate becomes lower than 50 Hz. In this case, the accuracy drops rapidly as the delay requirement decreases according to Fig. 5. Moreover, the performance of the proposed scheme drops more slowly than the conventional scheme, further demonstrating the proposed scheme\u2019s superiority."
        },
        {
            "heading": "VI. CONCLUSION",
            "text": "In this paper, we studied an ISCC system and developed an effective sensing framework with an action detection module to avoid unnecessary computation cost for the static state. The sampling theorem was adopted for analyzing the performance of the proposed sensing framework. Through analysis, we identified that the performance gain brought by our proposal is positively related to the probability of the static state. Furthermore, a sensing accuracy maximization problem was formulated with the delay constraints of the sensing task and communication tasks. After analyzing the structure, the original problem was decomposed into two subproblems. By solving them, we proposed an optimal resource allocation strategy and an optimal threshold selection policy and then developed an overall algorithm to maximize the accuracy. Finally, the analyses for the proposed sensing framework and the proposed algorithm were validated by a real-world test, which demonstrated the superiority of our proposals."
        },
        {
            "heading": "APPENDIX A PROOF OF THEOREM 1",
            "text": "First of all, we should note that the proposed sensing framework is the same as the conventional one when \u03b7 = 0, i.e., A = \u03b1(F s). To obtain the performance gain, we need to find that pCNN should be less 1 with A \u2265 \u03b1(F s). Since pCNN decreases with \u03b7, it is equivalent to find an \u03b7 > 0 that satisfies A \u2265 \u03b1(F s). A sufficient condition is that A increases with \u03b7 when \u03b7 approaches 0, which means \u2202A\n\u2202\u03b7 |\u03b7=0 > 0. Thus,\nwe can obtain the condition in (25) with simple mathematical calculations.\nNext, we can calculate the performance gain in two different cases.\n1) Case 1: If A is always higher than \u03b1(F s) when \u03b7 \u2208 (0, \u03b7u], \u03b7 should be \u03b7u for obtaining the highest performance gain. Therefore, \u03c1 is given by\n\u03c1 = 1\u2212 pCNN|\u03b7=\u03b7u . (37)\n2) Case 2: If there is an \u03b7 that satisfies A = \u03b1(F s) when \u03b7 \u2208 (0, \u03b7u], we have the following equation:\n\u03b1(F s) = A = I\u2211 i=2 pmi (1\u2212 poi )\u03b1(F s)\n+ pm1 ( (1\u2212 pl) + pl\u03b1(F s) ) . (38)\nThen, \u03c1 is given by\n\u03c1 = 1\u2212 pCNN = 1\u2212\n( I\u2211\ni=2\npmi (1\u2212 poi ) + pm1 pl )\n= 1\u2212 A\u2212 p m 1 (1\u2212 pl) \u03b1(F s) = pm1 (1\u2212 pl) A . (39)\nCombining both cases, the performance gain is given as shown in (26), which ends the proof."
        },
        {
            "heading": "APPENDIX B PROOF OF THEOREM 2",
            "text": "According to the KKT conditions, the necessary and sufficient conditions of the optimal solution can be expressed as\n\u2202L \u2202\u03c4 c,\u22c6n = \u2212\u03bb\u22c6n Vn( \u03c4 c,\u22c6n )2 Rn + \u00b5\u22c6 = { = 0, \u03c4 c,\u22c6n > 0, \u2265 0, \u03c4 c,\u22c6n = 0, (40)\n\u2202L \u2202f\u22c6n = 1\u2212 \u03bb\u22c6n VnCn (f\u22c6n) 2 = { = 0, f\u22c6n > 0, \u2265 0, f\u22c6n = 0,\n(41)\n\u03bb\u22c6n (Tn \u2212 Tmaxn ) = 0, \u03bb\u22c6 \u2265 0, n = 1, 2, \u00b7 \u00b7 \u00b7 , N, (42)\n\u00b5\u22c6 ( \u03c4 sF s +\nN\u2211 n=1 \u03c4 c,\u22c6n \u2212 1\n) = 0, \u00b5\u22c6 \u2265 0. (43)\nFrom constraint (27c), we can find that \u03c4 c,\u22c6n > 0 and f \u22c6 n > 0. Combining (40) and (41), we can derive the relationship between f\u22c6n and \u03c4 c,\u22c6 n , as\nf\u22c6n = \u03c4 c,\u22c6 n \u221a \u00b5\u22c6RnCn, n = 1, 2, \u00b7 \u00b7 \u00b7 , N, (44)\nand we can find that \u00b5\u22c6 > 0 and \u03bb\u22c6n > 0. Next, according to (42), we have\n\u03c4 c,\u22c6n = Vn\nTmaxn\n( 1\nRn +\n\u221a Cn\n\u00b5\u22c6Rn\n) , n = 1, 2, \u00b7 \u00b7 \u00b7 , N, (45)\nwhere \u00b5\u22c6 satisfies \u03c4 sF s+ \u2211N\nn=1 \u03c4 c,\u22c6 n = 1. Thus, we can derive\nthat\n\u00b5\u22c6 =\n\u2211N n=1 Vn Tmaxn \u221a Cn Rn(\n1\u2212 \u03c4 sF s \u2212 \u2211N\nn=1 Vn\nTmaxn Rn ) , (46) which ends the proof."
        },
        {
            "heading": "APPENDIX C PROOF OF LEMMA 2",
            "text": "We aim to find an upper bound of F s, which is equivalent to find the lower bound of the required communication resource for computation tasks. Therefore, we consider a special case where all devices have the highest data rate, i.e., min\nn Rn, and the lowest computation load, i.e.,(\nmin n Vn,min n Cn,max n\nTmaxn\n) , and all computation resource\nis allocated to the devices. Then, according to (4), the devices need less communication resource in this case compared with\n14\nthe optimal solution. The corresponding required communication resource of computation tasks can be given by\nN min n\nVnf e\nmin n Rn ( max n Tmaxn f e \u2212N min n Vn min n Cn ) . (47) Thus, we can express an upper bound of F s as (35), which ends the proof."
        }
    ],
    "title": "Integrated Sensing, Computation, and Communication: System Framework and Performance Optimization",
    "year": 2023
}