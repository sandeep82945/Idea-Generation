{
    "abstractText": "Due to intelligent, adaptive nature towards various operations and their ability to provide maximum comfort to the occupants residing in them, smart buildings are becoming a pioneering area of research. Since these architectures leverage the Internet of Things (IoT), there is a need for monitoring different operations (Occupancy, Humidity, Temperature, CO2, etc.) to provide sustainable comfort to the occupants. This paper proposes a novel approach for intelligent building operations monitoring using rule-based complex event processing and query-based approaches for dynamically monitoring the different operations. Siddhi is a complex event processing engine designed for handling multiple sources of event data in real time and processing it according to predefined rules using a decision tree. Since streaming data is dynamic in nature, to keep track of different operations, we have converted the IoT data into an RDF dataset. The RDF dataset is ingested to Apache Kafka for streaming purposes and for stored data we have used the GraphDB tool that extracts information with the help of SPARQL query. Consequently, the proposed approach is also evaluated by deploying the large number of events through the Siddhi CEP engine and how efficiently they are processed in terms of time. Apart from that, a risk estimation scenario is also designed to generate alerts for end users in case any of the smart building operations need immediate attention. The output is visualized and monitored for the end user through a tableau dashboard. KeywordsComplex Event Processing, Rule based parameters, SPARQL, Event driven decision, GraphDB,Decision tree.",
    "authors": [
        {
            "affiliations": [],
            "name": "Shashi Shekhar Kumara"
        },
        {
            "affiliations": [],
            "name": "Ritesh Chandrab"
        },
        {
            "affiliations": [],
            "name": "Sonali Agarwalc"
        }
    ],
    "id": "SP:7e2895abda8afaccb83bcaafa238ee7a06d8c253",
    "references": [
        {
            "authors": [
                "Y. Sun",
                "T.Y. Wu",
                "G. Zhao",
                "M. Guizani"
            ],
            "title": "Efficient rule engine for smart building systems",
            "venue": "IEEE Transactions on Computers,",
            "year": 2014
        },
        {
            "authors": [
                "B. Dong",
                "Andrews",
                "July"
            ],
            "title": "Sensor-based occupancy behavioral pattern recognition for energy and comfort management in intelligent buildings",
            "venue": "In Proceedings of building simulation (pp. 1444-1451). Vancouver: International Building Performance Simulation Association",
            "year": 2009
        },
        {
            "authors": [
                "F. Mofidi",
                "H. Akbari"
            ],
            "title": "Intelligent buildings: An overview",
            "venue": "Energy and Buildings,",
            "year": 2020
        },
        {
            "authors": [
                "S.U. Khan",
                "N. Khan",
                "F.U.M. Ullah",
                "M.J. Kim",
                "M.Y. Lee",
                "S.W. Baik"
            ],
            "title": "Towards intelligent building energy management: AI-based framework for power consumption and generation forecasting",
            "venue": "Energy and Buildings,",
            "year": 2023
        },
        {
            "authors": [
                "J. Kim",
                "J. Bang",
                "A. Choi",
                "H.J. Moon",
                "M. Sung"
            ],
            "title": "Estimation of Occupancy Using IoT Sensors and a Carbon Dioxide-Based Machine Learning Model with Ventilation System and Differential Pressure",
            "venue": "Data. Sensors,",
            "year": 2023
        },
        {
            "authors": [
                "Y. Chen",
                "X. Wang",
                "Z. Liu",
                "J. Cui",
                "M. Osmani",
                "P. Demian"
            ],
            "title": "Exploring Building Information Modeling (BIM) and Internet of Things (IoT) Integration for Sustainable Building",
            "year": 2023
        },
        {
            "authors": [
                "T. Peng",
                "W. Ke"
            ],
            "title": "Urban fire emergency management based on big data intelligent processing systems and Internet of Things",
            "venue": "Optik,",
            "year": 2023
        },
        {
            "authors": [
                "M. Zand",
                "M.A. Nasab",
                "S. Padmanaban",
                "M. Khoobani"
            ],
            "title": "Big data for SMART Sensor and intelligent Electronic devices\u2013Building applications. In Smart buildings digitalization (pp. 11-28)",
            "year": 2022
        },
        {
            "authors": [
                "G. Pinto",
                "Z. Wang",
                "A. Roy",
                "T. Hong",
                "A. Capozzoli"
            ],
            "title": "Transfer learning for smart buildings: A critical review of algorithms, applications, and future perspectives",
            "venue": "Advances in Applied Energy,",
            "year": 2022
        },
        {
            "authors": [
                "A. Kumar",
                "S.A. Alghamdi",
                "A. Mehbodniya",
                "J.L. Webber",
                "S.N. Shostakovich"
            ],
            "title": "Smart power consumption management and alert system using IoT on big data",
            "venue": "Sustainable Energy Technologies and Assessments,",
            "year": 2022
        },
        {
            "authors": [
                "P. Khanpara",
                "K. Lavingia",
                "R. Trivedi",
                "S. Tanwar",
                "A. Verma",
                "R. Sharma"
            ],
            "title": "A context\u2010aware internet of things\u2010driven security scheme for smart homes",
            "venue": "Security and Privacy,",
            "year": 2023
        },
        {
            "authors": [
                "T.G. Alexandru",
                "A. Alexandru",
                "F.D. Popescu",
                "A. Andra\u0219"
            ],
            "title": "The Development of an Energy Efficient Temperature Controller for Residential Use and Its Generalization",
            "venue": "Based on LSTM. Sensors,",
            "year": 2023
        },
        {
            "authors": [
                "E. Braz\u00e1lez",
                "H. Maci\u00e0",
                "G. D\u00edaz",
                "M. Baeza_Romero",
                "E. Valero",
                "V. Valero"
            ],
            "title": "FUME: An air quality decision support system for cities based on CEP technology and fuzzy logic",
            "venue": "Applied Soft Computing,",
            "year": 2022
        },
        {
            "authors": [
                "J. Rold\u00e1n-G\u00f3mez",
                "J.M. del Rincon",
                "J. Boubeta-Puig",
                "J.L. Mart\u00ednez"
            ],
            "title": "An automatic unsupervised complex event processing rules generation architecture for real-time IoT attacks detection",
            "venue": "Wireless Networks,",
            "year": 2023
        },
        {
            "authors": [
                "R. Verma",
                "J. Brazauskas",
                "V. Safronov",
                "M. Danish",
                "I. Lewis",
                "Mortier",
                "November"
            ],
            "title": "RACER: Real-Time Automated Complex Event Recognition in Smart Environments",
            "venue": "In Proceedings of the 29th International Conference on Advances in Geographic Information Systems (pp. 634-637)",
            "year": 2021
        },
        {
            "authors": [
                "X. Ren",
                "O. Cur\u00e9",
                "H. Khrouf",
                "Z. Kazi-Aoul",
                "Chabchoub",
                "October"
            ],
            "title": "Apache Spark and Apache Kafka at the Rescue of Distributed RDF Stream Processing Engines",
            "venue": "In ISWC (Posters & Demos)",
            "year": 2016
        },
        {
            "authors": [
                "X. Ren",
                "O. Cur\u00e9"
            ],
            "title": "Strider: A hybrid adaptive distributed RDF stream processing engine",
            "venue": "In The Semantic Web\u2013ISWC 2017: 16th International Semantic Web Conference,",
            "year": 2017
        },
        {
            "authors": [
                "A. Ed-daoudy",
                "K. Maalmi",
                "A. El Ouaazizi"
            ],
            "title": "A scalable and real-time system for disease prediction using big data processing.Multimedia",
            "venue": "Tools and Applications,",
            "year": 2023
        },
        {
            "authors": [
                "J. Pereira",
                "T. Batista",
                "E. Cavalcante",
                "A. Souza",
                "F. Lopes",
                "N. Cacho"
            ],
            "title": "A platform for integrating heterogeneous data and developing smart city applications",
            "venue": "Future Generation Computer Systems,",
            "year": 2022
        },
        {
            "authors": [
                "Y. Cardinale",
                "G. Freites",
                "E. Valderrama",
                "A. Aguilera",
                "C. Angsuchotmetee"
            ],
            "title": "Semantic framework of event detection in emergency situations for smart buildings",
            "venue": "Digital Communications and Networks,",
            "year": 2022
        },
        {
            "authors": [
                "W. Mebrek",
                "Bouzeghoub",
                "March"
            ],
            "title": "A Multi-agent Based Framework for RDF Stream Processing",
            "venue": "In Advanced Information Networking and Applications: Proceedings of the 36th International Conference on Advanced Information Networking and Applications (AINA-2022),",
            "year": 2022
        },
        {
            "authors": [
                "D. Karagiannis",
                "R.A. Buchmann"
            ],
            "title": "A proposal for deploying hybrid knowledge bases: the ADOxx-to-GraphDB interoperability case",
            "year": 2018
        },
        {
            "authors": [
                "S. Mishra",
                "M. Jain",
                "B. Siva Naga Sasank",
                "C. Hota"
            ],
            "title": "An ingestion based analytics framework for complex event processing engines in the internet of things",
            "venue": "In Big Data Analytics: 6th International Conference,",
            "year": 2018
        },
        {
            "authors": [
                "E. Kalogeros",
                "M. Gergatsoulis",
                "M. Damigos",
                "C. Nomikos"
            ],
            "title": "Efficient query evaluation techniques over large amounts of distributed linked data",
            "venue": "Information Systems,",
            "year": 2023
        },
        {
            "authors": [
                "O Ceballos",
                "CA Ram\u00edrez Restrepo",
                "MC Pab\u00f3n",
                "AM Castillo",
                "O. Corcho"
            ],
            "title": "SPARQL2 Flink: Evaluation of SPARQL Queries on Apache Flink",
            "venue": "Applied Sciences",
            "year": 2021
        },
        {
            "authors": [
                "Ritesh Chandra",
                "Sonali Agarwal",
                "Navjot Singh"
            ],
            "title": "Semantic sensor network ontology-based decision support system for forest fire management, Ecol",
            "year": 2022
        },
        {
            "authors": [
                "R. Chandra",
                "S. Tiwari",
                "S. Agarwal",
                "N. Singh"
            ],
            "title": "Semantic web-based diagnosis and treatment of vector-borne diseases using SWRL rules",
            "venue": "Knowledge-Based Systems,",
            "year": 2023
        }
    ],
    "sections": [
        {
            "text": "Due to intelligent, adaptive nature towards various operations and their ability to provide maximum comfort to the occupants residing in them, smart buildings are becoming a pioneering area of research. Since these architectures leverage the Internet of Things (IoT), there is a need for monitoring different operations (Occupancy, Humidity, Temperature, CO2, etc.) to provide sustainable comfort to the occupants. This paper proposes a novel approach for intelligent building operations monitoring using rule-based complex event processing and query-based approaches for dynamically monitoring the different operations. Siddhi is a complex event processing engine designed for handling multiple sources of event data in real time and processing it according to predefined rules using a decision tree. Since streaming data is dynamic in nature, to keep track of different operations, we have converted the IoT data into an RDF dataset. The RDF dataset is ingested to Apache Kafka for streaming purposes and for stored data we have used the GraphDB tool that extracts information with the help of SPARQL query. Consequently, the proposed approach is also evaluated by deploying the large number of events through the Siddhi CEP engine and how efficiently they are processed in terms of time. Apart from that, a risk estimation scenario is also designed to generate alerts for end users in case any of the smart building operations need immediate attention. The output is visualized and monitored for the end user through a tableau dashboard. Keywords- Complex Event Processing, Rule based parameters, SPARQL, Event driven decision, GraphDB,Decision tree.\n2"
        },
        {
            "heading": "1 Introduction",
            "text": "By the year 2050, almost all common devices will be online, according to a recent survey conducted by Ericsson [1]. These IoT-enabled devices collect data from physically deployed sensors and constantly collect and react to that data, and these vast levels of data can be unlocked for further unlocking useful information. Occupant comfort is an important prospect in the scenarios of smart buildings, and it needs to be monitored constantly so that if any parameter goes up or down or exceeds the predefined values, an alert may be generated at the appropriate time and the decision may be taken in a dynamic environment. The rules for different parameters (CO2, temperature, occupancy, heating, ventilation, etc.) are defined using a decision tree, which classifies the data based on labeled values.\nA smart building system that uses rules to determine behavior and automation is known as a\nrule-based smart building system. These regulations specify the circumstances and events under which the building's systems and equipment must operate. Apart from that, a powerful open-source platform for real-time data processing and event-driven applications is Siddhi CEP (Complex Event Processing). Siddhi CEP may be used alongside other technologies to develop smart building functions and even if it can process real time events also.\nRule-based Complex Event Processing (CEP) is a method for detecting and responding to\ncomplex events in real-time by fusing rule-based systems with event processing tools. When using rule-based CEP, events are processed and assessed in accordance with a set of standards to identify relevant patterns and initiate the necessary actions.\nConsequently, the objective of our work is divided into two phases. In the first phase of the work,\nwe demonstrate real-time streaming processing through the apache kafka tool and Apache Flink event stream processing. In the second phase, we process the event streams using the query processing through SPARQL, which can query the RDF dataset to find what is going through the stream data. The rules are formed using a decision tree. Existing smart building operations [2] are based on manual implementation of rules, which are not as efficient for monitoring smart building operations in real-time contexts.\nIn this paper, we present a novel approach for smart building operations monitoring using a\ncomplex event processing engine. It is based on methods of complex event processing combined with rule-based terminology for fetching the real-time results using query-based languages. The current approach collects (1) various smart building operation parameters (2) processed through Kafka event streaming (3) uses Flink for CEP implementation; (4) Use of siddhi for events deployment and (5) queries performed on the data streams with GraphDB tool. The novel part of this work is that a rule-based approach to performing a query will help smart building occupants make effective decisions in terms of smart building operations. We evaluate the proposed model using various accuracy measures and query processing times to consolidate this work.\n3 The rest of this paper is organised as follows: Section II presents the existing approaches for intelligent building operations proposed in recent times. Section III discusses the proposed architecture, including its components and workings. Section IV elaborates the experiment details and results. Section V concludes the work and outlines the future directions."
        },
        {
            "heading": "2 Related Work",
            "text": "In this section, we discuss the related work on smart building operations and existing approaches\nwith respect to rule-based implementation. Later we discussed various works related to complex event processing for intelligent building operations. Additionally we relate the approaches that work with real-time data and query based processing for SPARQL.CEP with RDF dataset is also reviewed in the later section. 2.1 Building Operations prediction system\nDong et al. [3] proposed a pattern-based algorithm approach for maintaining the occupants\ncomforts and behaviors while reducing their energy consumption by 30%. The results of the proposed approach were evaluated using training and testing using energy simulation tools, which predicted better results as compared to other HVAC control strategies.\nMofidi et al. [4] proposed a well-structured architecture for computational intelligence and\noptimal decision-making for indoor occupants inside the buildings.Their work was inclined towards various parameters,including occupancy modeling behavior,building control, and optimizations.\nKhan et al. [5] introduced a novel approach using a hybrid AI framework for accurate forecasting\nusing power consumption and generation. The entire work was carried out using three steps, which include (i) data refinement procedures and (ii) in the next phase, the refined data is used for convolutional long short term memory (ConvLSTM) for discriminative pattern learning using previous historical data and a bidirectional gated recurrent unit for extracting the temporal aspects. After forecasting the model is evaluated using statistical error mechanism for effectiveness of the predictions.\nKim et al. [6] proposed a machine-learning-based model for estimating the space occupied using\nCO2 concentration and ventilation system operation status. The model was trained using ANN (Artificial Neural Network) and RFC (random forest classifier) that measured an accuracy of 0.9102 and 0.9180 %. Apart when CO2 concentration and differential pressure data were used the accuracy was reduced significantly to 0.8916% and 0.8936%. 2.2 Intelligent Building in Context of Big data\nChen et al. [7] explored an area of further research for BIM (Building Information Modelling)\nand IoT integration of smart building transformation processes. The integration highlights sustainable\n4 building development, which needs to be assessed with respect to human and social dimensions. BIM provides a platform for connecting the stakeholders involved for a lifetime, which allows occupants residing inside to make effective decisions. Further, they added big data and cloud computing for leveraging operations.\nPeng et al. [8] emphasized the importance of IoT and its integration with big data for developing\nsustainable smart building systems. The integration can track and monitor in real time, which can enhance the IoT system's adaptability. They also highlighted the complex risks associated with various crowd gatherings and fire incidents, which occur frequently.\nZand et al. [9] divided the smart building work into two folds: artificial intelligence methods and\nclassification mathematical models. The essential part of their work covers rules based on intelligent smart homes and challenges related to deployment to form a prototype using sensors and actuators. They also highlighted the protocols and standards needed to design smart buildings.\nPinto et al. [10] proposed a comprehensive review from the perspective of big data and transfer\nlearning for smart building operations. Their approach shows a depth of analysis of recent work with algorithms, metrics, and applications. Their review was inclined to focus on four areas of applications, which include: (1) load prediction inside smart buildings (2) Occupancy detection activities (3) smart building dynamics; (4) smart energy monitoring.\nKumar et al. [11] proposed a novel approach for smart energy consumption tracking and alerting\nusing big data and IoT systems.The model can track the energy usage and remaining available units in real-time. From the big data perspective, the model can efficiently track usage and help in making effective decisions using predictive machine learning approaches.\nKhanpara et al. [12] proposed a security-based context-aware scheme for IoT-driven smart homes\nto protect against security-based threats. Their work explores in detail the various threats that can pose challenges to the indoor occupants inside the smart building premises. The result shows that the approach is effective in terms of cost, performance, and maintenance parameters.\nAlexandru et al. [13] proposed a thermal analysis model to control heat transfer for residential\npurposes using lumped parameters. The parameters are generalized further using long short-term memory (LSTM) neural networks. The result shown using the model is quite promising in terms of the efficiency of the temperature controller for overshoot and energy consumption. 2.3 IoT driven complex event processing\nBraz\u00e1lez et al. [14] proposed a FUME-based decision support system monitoring using AQ\nstandards for reducing the air pollutants. The model uses fuzzy logic-based complex event processing for maintaining the parameters and improving decision-making. The model was used for a particular case study, and the result shows that it violates the world health parameters.\n5 Rold\u00e1n-G\u00f3mez et al. [15] introduced an approach to generate complex event processing-based rules for real-time attack detection in an unsupervised manner. They integrated the CEP model using various algorithms such as gaussian mixture models (GMM), principal component analysis (PCA), and Mahalanobis distance.The architecture was tested using various experiments using rule generation and achieved an F1 score of 0.9890% accuracy.\nVerma et al. [16] proposed a system called RACER for end-to-end complex event processing of\nvarying changes and observations in sensor-generated data. The result shows that using the proposed approach is much better as compared to other state-of-the-art methodologies. 2.4 RDF with Kafka and Flink.\nRen et al. proposed a design for RDF stream processing [17] through big data frameworks\nApache Kafka and Apache Spark that is scalable,fault-tolerant, and high-performing for stream events. Their emphasis on implementation was to ease the complicated architecture by leveraging various libraries of frameworks.\nRen et al. [18] introduced a novel approach of a stride-based hybrid RDF stream processing\nengine for optimizing the logical query performances by the state of the streaming data. Strider is a framework often used for implementing adaptive properties such as high throughput,acceptable latency, and scalability. These frameworks are designed on state-of-the-art engine architectures using Apache Kafka and Apache Spark.\nEd-daoudy et al.[19] proposed a novel approach for detecting real-time health disease prediction\nusing medical data streams with the help of Twitter data,Apache Kafka, and Apache Cassandra. They ingested the collected Twitter data using Spark streaming, and further machine learning algorithms were used for selected features. The experimental result shows an accuracy of 92.05% when using the Random Forest (RF) algorithm, which is quite high when compared to others.\nPereira et al. [20] presented a smart geo layer (SGeoL), an application for designing smart city\napplications. They integrated the geospatial data with urban data using an underlying middleware infrastructure for heterogeneous data processing and data context management. The experiment gives an empirical and scalable result for its performance. 2.5 SPARQL for Complex event processing\nCardinale et al. [21] highlighted the various flaws of an existing system for reducing the error\nrelated to the velocity and variety of data. The flaws include performance evaluation for RDF stream processing (RSP), working prototypes, and dependencies that increase the complexities, as well as benchmarking.\nMebrek et al. [22] introduced a novel framework for distributed computing using RDF stream\nprocessing (RSP) to accommodate heterogeneous and continuous data streams for instant processing. Due\n6 to the complexity of the queries, they found the need for multiple engines that can efficiently process queries. The primary experimental evaluation shows good results using multiple engines rather than existing ones.\n3. Complex Event Processing for Intelligent Building Operations Monitoring and Prediction\nComplex Event Processing (CEP) is a technique that is used to monitor and forecast intelligent\nbuilding processes. It entails the real-time analysis and processing of massive amounts of data from numerous sources in order to spot patterns, detect complex events, and initiate relevant responses. CEP may be used to improve monitoring, prediction, and decision-making processes in the context of intelligent building operations. The fig 1 shows the proposed architecture for this research work.\nFig:- 1 Proposed Architecture for CEPIBOP (Complex Event Processing for Intelligent Buildings Operations)"
        },
        {
            "heading": "3.1 Dataset Description",
            "text": "In this section, we will elaborate on various features of the datasets. The datasets consist mainly\nof smart building operation features such as temperature, humidity, CO2, energy, light status, etc. The format of the datasets is CSV. The dataset is further used for conversion into RDF datasets that allow for more effective decision-making using complex queries, which leads to more accurate discoveries and\n7 helps in more data-driven decision-making. The dataset is preprocessed before conversion into RDF data. The IoT dataset is collected from a repository that contains various features, including 8192 samples1."
        },
        {
            "heading": "3.2 Resource Description Framework",
            "text": "The Resource Description Framework (RDF) is a generic framework for expressing web-connected data. RDF statements are used to describe and communicate metadata, allowing for the standardization of data sharing based on relationships. RDF is used to combine data from several sources. A website that offers online catalog listings from a manufacturer and links items to reviews on other websites and merchants selling the products is an example of this method. The semantic web is built on the RDF framework, which is used to organize information based on meanings. In the proposed architecture shown in Fig. 2, data is collected from various repositories. We use the GraphDB tool for the conversion of data into RDF data, which is in the triple format (subject-predicate-object). Onto Refine2 is the plugin in GraphDB which helps in conversion of different types of format data into RDF3 [23].\nFig:- 2 Datasets to RDF conversion\n3 https://www.w3.org/RDF/ 2 https://www.ontotext.com/blog/tabular-data-rdf-graphdb/ 1 https://www.kaggle.com/datasets/robmarkcole/occupancy-detection-data-set-uci\n8"
        },
        {
            "heading": "3.3 RDF to Kafka processing",
            "text": "This subsection elaborates on event flow from the RDF to stream event processing through Kafka producer and consumer methodologies. An RDF event producer first ingests the data through the publish and subscribe module, where the producer gathers and transmits the information to the internal processing through various brokers named A, B, and C, which subsequently carry out the scheduling and replication of events.\nFig:- 3 RDF Stream processing through kafka\nSince streaming data is dynamic in nature and a predicted failure of the broker may lead to data loss, it is kept at multiple brokers. The RDF event consumer divides the incoming RDF stream into various events for later processing. Fig 3 depicts the producer and consumer for stream event processing through the Kafka framework. The fig 4 depicts the dataset ingestion into kafka for stream processing.\n9 Fig:- 4 Stream processing with Kafka Producer Consumer 3.4 CEP engine operation with Siddhi\nWSO2 Siddhi4 is a complex event processing engine that listens to events from different data\nstream sources and determines the complex events based on a set of predefined rules. It is an open source analytics tool that allows deployment and builds applications that capture data from streams and detect patterns in real time [24]. It works with the SPARQL query language, in which users can set the predefined rules, and based on queries, action is taken. The siddhi CEP takes input in the form of streaming data, as shown in fig. 5. In this work, the streaming data in the form of RDF, which contains triples of data in the form of humidity, CO2, temperature, occupancy, and light intensity, is passed to the rules of the CEP engine. The elementary rules are created using standard parameters and decision tree rules. The rules are analyzed using the Siddhi Core, and after analysis, the complex events are formed. Here, after analyzing the rules, the complex events are: humidity is high, temperature is moderate, air quality is poor, etc.\n4 https://siddhi.io/en/v5.1/docs/\n10"
        },
        {
            "heading": "3.5 Flink to Sparql Connectivity",
            "text": "Flink is a true streaming framework for efficiently managing various data sources within memory\ncomputation capabilities. The kernel of the framework is able to process the events consistently with marginal latency at very high velocity. This framework is an open-source distributed batch processing system.Regular programmes written in Java, Scala, or Python are essentially what Flink programmes are at their highest level. Flink programmes are translated to dataflow programmes, which perform a variety of transformations (such as filtering, mapping, joining, and grouping) on distributed collections that are first formed from other sources (e.g., by reading from files). In this work, the data flows through Kafka processing components and is passed through the Flink ecosystem, which is connected through rules that are generated through DT rules, and based on that, the query can be processed. The SPARQL query enables the Flink to SPARQL component to efficiently run the query and fetch the result in real time [26].\n11"
        },
        {
            "heading": "3.6 Rules development",
            "text": "generation is important for real-time event detection as well as based on event risk estimation or other operations that may be performed. The decision tree methodology is a commonly used data mining method for classification. It classifies the data in the form of an hierarchical tree, where (i) the root node defines the population of the various features. (ii) Decision nodes are formed by the splitting of root nodes. (iii) Branches represent the chances of outcome that emanate from the root and internal nodes. (iv) The node at which further splitting is not possible is called the leaf node of the decision tree. In fig. 1 rules are connected through the datasets used for this work, since one of the datasets contains occupancy\n12\nas labeled data. For rule generation we have used a decision tree as it classifies the data based on labels as shown in the fig. 6. Based on the decision tree the rule is formed as shown in Table 2.\nS.NO Rules\nRule 1 If light <= 365.125. then occupancy becomes false\nRule2 If humidity <= 37.593 then occupancy becomes false\nRule3 If light >= 365.128 then occupancy becomes true\nRule4 If humidity>37.593 then occupancy becomes true\nRule5 If CO2 <= 456.333 then occupancy becomes true\nRule6 If light <= 365.125 and light CO2 <= 456.333 Then occupancy becomes true\nRule7 If CO2 <= 456.333 and light <= 365.125\n13\nThen occupancy becomes true\nRule 8 If humidity <37.593 and CO2 <= 456.333 and light >= 365.125 Then occupancy becomes false.\nWe have also developed various other rules related to closed premises temperature rise and gas\nrise detection that can be implemented inside smart buildings for any kind of risk situation, and appropriately, the decision can be made at the earliest possible time for evacuating the occupied premises. In this work, we have developed 37 rules for smart building premises that are helpful for developing early warning systems and keeping occupants informed during any emergency situation with real-time potential risks. 3.7 SPARQL query working The SPARQL Query Language is a standardized language for querying RDF data and a protocol that enables the execution of SPARQL queries and the delivery of their answers via the Web. The RDF data model serves as the foundation for SPARQL [27], which is independent of RDF schema languages which is shown in fig. 7. In other words, it merely offers support for graph pattern matching for RDF graphs rather than any kind of reasoning skills. In terms of how relational databases are queried, it is comparable to the Structured Query Language (SQL). A SPARQL query typically consists of the five components listed below.\n1. IRI prefixes can be defined in Prefix declarations, so they can be utilized as shortcuts later in the\nquery.\n2. The dataset Clause feature enables the specification of a closed dataset partition over which the\nquery should be conducted.\n3. The result clause feature enables you to describe the kind of SPARQL query that is being used\nand, if applicable, the results that should be provided.\n4. The query clause enables the specification of the query patterns that are used to construct the\nvariable bindings for the defined variables in the query and to compare against the data.\n5. Results can be ordered, divided, and paginated using solution modifiers.\n14\n3.7.1 SPARQL query results of different conditions using GraphDB In fig. 8, it is shown that the framework view of the GraphDB tool for the query result, for which the date has a humidity greater than 30. Table 3 shows the same SPARQL query.\nFig:8 Query result for humidity\n15\nIn fig. 9, it is shown in the framework view of the GraphDB tool for the query result for which the date has a temperature greater than 30. Table 4 shows the same SPARQL query.\nFig:9 Query result for temperature\n16\nIn fig. 10, it is shown in the framework view of the GraphDB tool for the query results of all temperature details of premises between 1:30 and 2:00 PM. Table 5 shows the same SPARQL query.\nFig:10 Query result of temperature between 1:30 to 2:30 PM\n17\nAccording to the query in Table 6, we get whether the room is occupied or not,the CO2 label of the room, and the humidity of the room, which is greater than 12. The result of the same query shown in fig. 11.\nPREFIX ns1: <http://schema.org/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> SELECT ?date ?CO2 ?occupancy ?humidity\n18\nWHERE { ?description ns1:date ?date . ?description ns1:CO2 ?CO2 . ?description ns1:Occupancy ?occupancy . ?description ns1:Humidity ?humidity . FILTER (xsd:float(?CO2) > 1100 && xsd:integer(?occupancy) = 1 && xsd:float(?humidity) > 12)}"
        },
        {
            "heading": "3.7.2 Risk estimation through SPARQL",
            "text": "Risk estimation is based on two parts: the flink query result and the RDF query result. If an event is detected, determine whether it is normal, moderate, or risky. If the event is normal, there is no need to investigate further; if it is moderate, we go for the RDF query result and estimate what action to take, but the riskiest situation is handled easily. If the event is detected and its risk assessed, then query the RDF data and accordingly take instant action. We query on RDF data because we save all of our data in RDF format, so we need to query on an RDF dataset to get previous data.The fig. 12 shows about the risk estimation flowchart and how it is working. The risk estimation pseudo code is shown in table 7.\nFig:12 Risk estimation flow chart\n19\n20"
        },
        {
            "heading": "3.7.3 Dashboard making",
            "text": "Fig:13 A demonstration of tableau dashboard for occupancy monitoring\nAccording to the SPARQL query, we get the result, which has no need to be processed, and directly use this data in Tableau for making different worksheets that are combined into one main page, which is called the Dashboard page. On the main dashboard page, we have used a filter for better visualization."
        },
        {
            "heading": "4 Results and discussion",
            "text": "This section emphasizes the findings of this research work and its impact on the community\nworking in this domain. The work has been proposed in the context of smart buildings, their operations, and how efficiently events are processed and important information is extracted through query processing.\nTo evaluate the performance of our CEP approach, we use a computer that has 16.0 GB of\nRAM, a 64-bit operating system, an x64-based processor, Windows 10 Pro Edition, and version 21H2 were employed as the hardware.\n4.1 Performance of Event Processing Systems\n21\nWe compare the performance with four different types of queries that were used in the process of detecting occupancy based on temperature, humidity, CO2, and humidity ratio. For each case, 10,000 to 50,000 events were sent through the system, and the throughput of processing those events was measured. Table 8 shows how the query performs on different events in seconds. Query 1 is complex enough to require high performance in all four queries. Fig. 14 shows the number of events processed through simple and complex queries.\n4.2 Rule Deployment Time\n22\nIn this experiment, we evaluated the amount of time taken in the deployment of the rule in the\nCEP engine after making updates (e.g., inject, update, delete) on rules at runtime. The evaluation was conducted for two different cases: Without processing, in this case, the CEP engine is idle or No events. With processing: in this case, the CEP engine is processing different events (from 10,000 to 50,000 events per second). Each case was tested 20 times (i.e., updating rules by increasing their number each time) in order to calculate the average amount of time needed to deploy rules. Table 9 depicts the results of the experiments conducted for a single rule of different events. We conclude that the time(in seconds) of deployment increases when the number of events increases.\nTable 9: The average time of rule deployment in different events.\nRules /Events\n0 (Idle) 10000 20000 30000 40000 50000\nR1 3.64 4.72 5.66 6.54 7.71 8.46\nFig 15: The average time of rule deployment\n4.3 Calculation of Precision, Recall and F1 Score\nIn the context of smart building for evaluation of the proposed model it is important to detect the\nnumber of events out of all the events that occurred. We can evaluate the effectiveness of an event detection system in a smart building setting by measuring precision and recall and acquire insights into its\n23\naccuracy and completeness in identifying events. For evaluating our proposed system we evaluate our model based on testing of 1000 events to calculate precision, recall ,F1 score and accuracy as shown in table 10."
        },
        {
            "heading": "4.4 SPARQL query performance time based on RDF dataset",
            "text": "We have applied many queries to the RDF dataset [28], which makes the query performance time different on different datasets. The description of the different RDF datasets is shown in Table 11.\nWe have applied a total of six different queries to this dataset, and query execution time is affected by the size of the data and query complexity. All six queries have different complexity, which means that the query is different according to the event. The query performance based on time is shown in Table 12. The graph of the query performance time in seconds on different RDF datasets based on a single query is shown in Fig. 16.\n24\n25\nFig 17 : Consolidated performance of queries on different datasets\nWhen a query is executed, the CPU load on the system is high. Since the entire experiment was carried out on a good standalone system, the performance of the system while executing the simple and complex queries in terms of CPU load is shown in the fig. 18. The CPU load shown may increase as per the deployment based on events."
        },
        {
            "heading": "5. Conclusion and future scope",
            "text": "Smart buildings have emerged as a pioneering area of research for the IoT and are evolving\ncontinuously to fulfill the comfort needs of occupants to a great extent. In this context, we have proposed a complex event processing-based occupancy detection system to detect smart building operations in real time. In this context, we have converted IoT data into RDF with the help of the GraphDB tool. For streaming purposes, we have used Apache Kafka. Then we used Siddhi as a CEP engine to test the event streams in real time using a predefined set of rules extracted from Decision tree machine learning algorithms. Using these rules for event detection on stream data For risk estimation based on events, we used SPARQL queries for retrieving the information in real time and storing the data. The CEP engine is tested by deploying various rules on different events and testing query performance on different RDF datasets as well as different events. The events are tested with respect to evaluation metrics using precision, recall, and the F1 score. A number of complex queries are tested through SPARQL to check the\n26\nperformance of the proposed system that extracts useful information based on users' queries. Consequently, a risk estimation scenario is designed to alert the occupants inside smart buildings if any of the operations exceed the actual parameters so that an early warning system can be generated to evacuate the premises.\nThe future work may include finding robust models for rule generation as well as using a certified\nset of rules for designing smart building operations parameters, which will be more helpful for maintaining the occupants comfort inside a smart building. Acknowledgement\nThis work is supported by the Department of Science and Technology, Government of India with\nFile No. DST/ICPS/Individual-CPS/2018/T-244. References [1]Internet of Things, https://www.ericsson.com/en/internet-of-things accessed online [ March 2023] [2]Sun, Y., Wu, T. Y., Zhao, G., & Guizani, M. (2014). Efficient rule engine for smart building systems. IEEE Transactions on Computers, 64(6), 1658-1669. [3] Dong, B., & Andrews, B. (2009, July). Sensor-based occupancy behavioral pattern recognition for energy and comfort management in intelligent buildings. In Proceedings of building simulation (pp. 1444-1451). Vancouver: International Building Performance Simulation Association. [4] Mofidi, F., & Akbari, H. (2020). Intelligent buildings: An overview. Energy and Buildings, 223, 110192. [5] Khan, S. U., Khan, N., Ullah, F. U. M., Kim, M. J., Lee, M. Y., & Baik, S. W. (2023). Towards intelligent building energy management: AI-based framework for power consumption and generation forecasting. Energy and Buildings, 279, 112705. [6] Kim, J., Bang, J., Choi, A., Moon, H. J., & Sung, M. (2023). Estimation of Occupancy Using IoT Sensors and a Carbon Dioxide-Based Machine Learning Model with Ventilation System and Differential Pressure Data. Sensors, 23(2), 585. [7] Chen, Y., Wang, X., Liu, Z., Cui, J., Osmani, M., & Demian, P. (2023). Exploring Building Information Modeling (BIM) and Internet of Things (IoT) Integration for Sustainable Building. Buildings, 13(2), 288. [8] Peng, T., & Ke, W. (2023). Urban fire emergency management based on big data intelligent processing systems and Internet of Things. Optik, 273, 170433. [9] Zand, M., Nasab, M. A., Padmanaban, S., & Khoobani, M. (2022). Big data for SMART Sensor and intelligent Electronic devices\u2013Building applications. In Smart buildings digitalization (pp. 11-28). CRC Press.\n27\n[10] Pinto, G., Wang, Z., Roy, A., Hong, T., & Capozzoli, A. (2022). Transfer learning for smart buildings: A critical review of algorithms, applications, and future perspectives. Advances in Applied Energy, 100084. [11] Kumar, A., Alghamdi, S. A., Mehbodniya, A., Webber, J. L., & Shostakovich, S. N. (2022). Smart power consumption management and alert system using IoT on big data. Sustainable Energy Technologies and Assessments, 53, 102555. [12] Khanpara, P., Lavingia, K., Trivedi, R., Tanwar, S., Verma, A., & Sharma, R. (2023). A context\u2010aware internet of things\u2010driven security scheme for smart homes. Security and Privacy, 6(1), e269. [13] Alexandru, T. G., Alexandru, A., Popescu, F. D., & Andra\u0219, A. (2023). The Development of an Energy Efficient Temperature Controller for Residential Use and Its Generalization Based on LSTM. Sensors, 23(1), 453. [14] Braz\u00e1lez, E., Maci\u00e0, H., D\u00edaz, G., Baeza_Romero, M., Valero, E., & Valero, V. (2022). FUME: An air quality decision support system for cities based on CEP technology and fuzzy logic. Applied Soft Computing, 129, 109536. [15] Rold\u00e1n-G\u00f3mez, J., del Rincon, J. M., Boubeta-Puig, J., & Mart\u00ednez, J. L. (2023). An automatic unsupervised complex event processing rules generation architecture for real-time IoT attacks detection. Wireless Networks, 1-18. [16] Verma, R., Brazauskas, J., Safronov, V., Danish, M., Lewis, I., & Mortier, R. (2021, November). RACER: Real-Time Automated Complex Event Recognition in Smart Environments. In Proceedings of the 29th International Conference on Advances in Geographic Information Systems (pp. 634-637). [17] Ren, X., Cur\u00e9, O., Khrouf, H., Kazi-Aoul, Z., & Chabchoub, Y. (2016, October). Apache Spark and Apache Kafka at the Rescue of Distributed RDF Stream Processing Engines. In ISWC (Posters & Demos). [18] Ren, X., & Cur\u00e9, O. (2017). Strider: A hybrid adaptive distributed RDF stream processing engine. In The Semantic Web\u2013ISWC 2017: 16th International Semantic Web Conference, Vienna, Austria, October 21\u201325, 2017, Proceedings, Part I 16 (pp. 559-576). Springer International Publishing [19]Ed-daoudy, A., Maalmi, K., & El Ouaazizi, A. (2023). A scalable and real-time system for disease prediction using big data processing.Multimedia Tools and Applications, 1-30. [20]Pereira, J., Batista, T., Cavalcante, E., Souza, A., Lopes, F., & Cacho, N. (2022). A platform for integrating heterogeneous data and developing smart city applications. Future Generation Computer Systems, 128, 552-566.\n28\n[21]Cardinale, Y., Freites, G., Valderrama, E., Aguilera, A., & Angsuchotmetee, C. (2022). Semantic framework of event detection in emergency situations for smart buildings. Digital Communications and Networks, 8(1), 64-79. [22] Mebrek, W., & Bouzeghoub, A. (2022, March). A Multi-agent Based Framework for RDF Stream Processing. In Advanced Information Networking and Applications: Proceedings of the 36th International Conference on Advanced Information Networking and Applications (AINA-2022), Volume 1 (pp. 516-528). Cham: Springer International Publishing. [23] Karagiannis, D., & Buchmann, R. A. (2018). A proposal for deploying hybrid knowledge bases: the ADOxx-to-GraphDB interoperability case. [24] Mishra, S., Jain, M., Siva Naga Sasank, B., & Hota, C. (2018). An ingestion based analytics framework for complex event processing engines in the internet of things. In Big Data Analytics: 6th International Conference, BDA 2018, Warangal, India, December 18\u201321, 2018, Proceedings 6 (pp. 266-281). Springer International Publishing. [25] Kalogeros, E., Gergatsoulis, M., Damigos, M., & Nomikos, C. (2023). Efficient query evaluation techniques over large amounts of distributed linked data. Information Systems, 115, 102194. [26]Ceballos O, Ram\u00edrez Restrepo CA, Pab\u00f3n MC, Castillo AM, Corcho O. SPARQL2 Flink: Evaluation of SPARQL Queries on Apache Flink. Applied Sciences. 2021; 11(15):7033. https://doi.org/10.3390/app11157033 [27] Ritesh Chandra, Sonali Agarwal, Navjot Singh, Semantic sensor network ontology-based decision support system for forest fire management, Ecol. Inform. (2022) http://dx.doi.org/10.1016/j.ecoinf.2022.101821. [28] Chandra, R., Tiwari, S., Agarwal, S., & Singh, N. (2023). Semantic web-based diagnosis and treatment of vector-borne diseases using SWRL rules. Knowledge-Based Systems, 274, 110645."
        }
    ],
    "title": "A Real-Time Approach for Smart Building Operations Prediction Using Rule-Based Complex Event Processing and SPARQL Query "
}