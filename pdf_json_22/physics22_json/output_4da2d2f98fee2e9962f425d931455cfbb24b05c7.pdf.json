{
    "abstractText": "A climate network represents the global climate system by the interactions of a set of anomaly time-series. Network science has been applied on climate data to study the dynamics of a climate network. The core task and first step to enable interactive network science on climate data is the efficient construction and update of a climate network on user-defined time-windows. We present TSUBASA, an algorithm for the efficient construction of climate networks based on the exact calculation of Pearson\u2019s correlation of large time-series. By pre-computing simple and low-overhead statistics, TSUBASA can efficiently compute the exact pairwise correlation of time-series on arbitrary time windows at query time. For real-time data, TSUBASA proposes a fast and incremental way of updating a network at interactive speed. Our experiments show that TSUBASA is faster than approximate solutions at least one order of magnitude for both historical and real-time data and outperforms a baseline for time-series correlation calculation up to two orders of magnitude.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yunlong Xu"
        },
        {
            "affiliations": [],
            "name": "Jinshu Liu"
        },
        {
            "affiliations": [],
            "name": "Fatemeh Nargesian"
        }
    ],
    "id": "SP:6eda3c4f640c8f7125ffd7ecbdcdbf331db886aa",
    "references": [
        {
            "authors": [
                "Sumiyoshi Abe",
                "Norikazu Suzuki"
            ],
            "title": "Scale-free network of earthquakes",
            "venue": "EPL (Europhysics Letters) 65,",
            "year": 2004
        },
        {
            "authors": [
                "Mohamed H. Ali",
                "Badrish Chandramouli",
                "Balan Sethu Raman",
                "Ed Katibah"
            ],
            "title": "Spatio-Temporal Stream Processing in Microsoft StreamInsight",
            "venue": "IEEE Data Eng. Bull. 33,",
            "year": 2010
        },
        {
            "authors": [
                "Albert Batushansky",
                "David Toubiana",
                "Aaron Fait"
            ],
            "title": "Correlation-based network generation, visualization, and analysis as a powerful tool in biological studies: a case study in cancer cell metabolism",
            "year": 2016
        },
        {
            "authors": [
                "Y. Berezin",
                "A. Gozolchiani",
                "O. Guez",
                "S. Havlin"
            ],
            "title": "Stability of Climate Networks with Time",
            "venue": "Scientific Reports",
            "year": 2012
        },
        {
            "authors": [
                "Walter Cai",
                "Philip A. Bernstein",
                "Wentao Wu",
                "Badrish Chandramouli"
            ],
            "title": "Optimization of Threshold Functions over Streams",
            "venue": "PVLDB 14,",
            "year": 2021
        },
        {
            "authors": [
                "Paris Carbone",
                "Asterios Katsifodimos",
                "Stephan Ewen",
                "Volker Markl",
                "Seif Haridi",
                "Kostas Tzoumas"
            ],
            "title": "Apache FlinkTM: Stream and Batch Processing in a Single Engine",
            "venue": "IEEE Data Eng. Bull. 38,",
            "year": 2015
        },
        {
            "authors": [
                "Badrish Chandramouli",
                "Raul Castro Fernandez",
                "Jonathan Goldstein",
                "Ahmed Eldawy",
                "Abdul Quamar"
            ],
            "title": "Quill: Efficient, Transferable, and Rich Analytics at Scale",
            "venue": "PVLDB 9,",
            "year": 2016
        },
        {
            "authors": [
                "B. Chandramouli",
                "J. Goldstein",
                "M. Barnett",
                "J.F. Terwilliger"
            ],
            "title": "Trill: Engineering a Library for Diverse Analytics",
            "venue": "IEEE Data Eng. Bull. 38,",
            "year": 2015
        },
        {
            "authors": [
                "Pimwadee Chaovalit",
                "Aryya Gangopadhyay",
                "George Karabatis",
                "Zhiyuan Chen"
            ],
            "title": "Discrete wavelet transform-based time series analysis and mining",
            "venue": "ACM Comput. Surv. 43,",
            "year": 2011
        },
        {
            "authors": [
                "Richard Cole",
                "Dennis E. Shasha",
                "Xiaojian Zhao"
            ],
            "title": "Fast Window Correlations over Uncooperative Time Series",
            "venue": "In SIGKDD",
            "year": 2005
        },
        {
            "authors": [
                "Jonathan F Donges",
                "Yong Zou",
                "Norbert Marwan",
                "J\u00fcrgen Kurths"
            ],
            "title": "Complex networks in climate dynamics",
            "venue": "The European Physical Journal Special Topics 174,",
            "year": 2009
        },
        {
            "authors": [
                "Jack W Dunlap"
            ],
            "title": "Combinative properties of correlation coefficients",
            "venue": "The Journal of Experimental Education 5,",
            "year": 1937
        },
        {
            "authors": [
                "James H. Faghmous",
                "Vipin Kumar"
            ],
            "title": "A Big Data Guide to Understanding Climate Change: The Case for Theory-Guided Data Science",
            "venue": "Big Data 2,",
            "year": 2014
        },
        {
            "authors": [
                "Anna Gogolou",
                "Theophanis Tsandilas",
                "Karima Echihabi",
                "Anastasia Bezerianos",
                "Themis Palpanas"
            ],
            "title": "Data Series Progressive Similarity Search with Probabilistic Quality Guarantees",
            "venue": "In SIGMOD",
            "year": 2020
        },
        {
            "authors": [
                "Avi Gozolchiani",
                "Kazuko Yamasaki",
                "Oz Gazit",
                "Shlomo Havlin"
            ],
            "title": "Pattern of climate network blinking links follows El Ni\u00f1o events",
            "venue": "EPL (Europhysics Letters) 83,",
            "year": 2008
        },
        {
            "authors": [
                "Jun-Gi Jang",
                "Dongjin Choi",
                "Jinhong Jung",
                "U Kang"
            ],
            "title": "Zoom-SVD: Fast and Memory Efficient Method for Extracting Key Patterns in an Arbitrary Time Range",
            "venue": "In CIKM",
            "year": 2018
        },
        {
            "authors": [
                "Ravindra Khattree",
                "Dayanand N Naik"
            ],
            "title": "Multivariate data reduction and discrimination",
            "venue": "SAS Institute,",
            "year": 2000
        },
        {
            "authors": [
                "Kyunghun Kim",
                "Hongjun Joo",
                "Daegun Han",
                "Soojun Kim",
                "Taewoo Lee",
                "Hung Soo Kim"
            ],
            "title": "On complex network construction of rain gauge stations considering nonlinearity of observed daily rainfall data",
            "venue": "Water 11,",
            "year": 2019
        },
        {
            "authors": [
                "Levente J Klein",
                "Fernando J Marianno",
                "ConradMAlbrecht",
                "Marcus Freitag",
                "Siyuan Lu",
                "Nigel Hinds",
                "Xiaoyan Shao",
                "Sergio Bermudez Rodriguez",
                "Hendrik F Hamann"
            ],
            "title": "PAIRS: A scalable geo-spatial data analytics platform",
            "venue": "Big Data",
            "year": 2015
        },
        {
            "authors": [
                "Ge Luo",
                "Ke Yi",
                "Siu-Wing Cheng",
                "Zhenguo Li",
                "Wei Fan",
                "Cheng He",
                "Yadong Mu"
            ],
            "title": "Piecewise linear approximation of streaming time series data with max-error guarantees",
            "venue": "In ICDE",
            "year": 2015
        },
        {
            "authors": [
                "Bilal Ahmed Memon",
                "Hongxing Yao"
            ],
            "title": "Structural change and dynamics of Pakistan stock market during crisis: A complex network perspective",
            "venue": "Entropy 21,",
            "year": 2019
        },
        {
            "authors": [
                "Katsiaryna Mirylenka",
                "Michele Dallachiesa",
                "Themis Palpanas"
            ],
            "title": "Data Series Similarity Using Correlation-Aware Measures",
            "venue": "In SSDBM",
            "year": 2017
        },
        {
            "authors": [
                "Abdullah Mueen",
                "Suman Nath",
                "Jie Liu"
            ],
            "title": "Fast approximate correlation for massive time-series data",
            "venue": "In SIGMOD",
            "year": 2010
        },
        {
            "authors": [
                "Domenico Napoletani",
                "Timothy D Sauer"
            ],
            "title": "Reconstructing the topology of sparsely connected dynamical networks",
            "venue": "Physical Review E 77,",
            "year": 2008
        },
        {
            "authors": [
                "Leonardo Neumeyer",
                "Bruce Robbins",
                "Anish Nair",
                "Anand Kesari"
            ],
            "title": "S4: Distributed Stream Computing Platform",
            "venue": "ICDMW",
            "year": 2010
        },
        {
            "authors": [
                "Apostolos Papageorgiou",
                "Bin Cheng",
                "Ern\u00f6 Kovacs"
            ],
            "title": "Real-time data reduction at the network edge of Internet-of-Things systems",
            "venue": "In 2015 11th international conference on network and service management (CNSM)",
            "year": 2015
        },
        {
            "authors": [
                "John Paparrizos",
                "Chunwei Liu",
                "Aaron J. Elmore",
                "Michael J. Franklin"
            ],
            "title": "Debunking Four Long-Standing Misconceptions of Time-Series Distance Measures",
            "venue": "In SIGMOD",
            "year": 2020
        },
        {
            "authors": [
                "Han Qiu",
                "Hoang Thanh Lam",
                "Francesco Fusco",
                "Mathieu Sinn"
            ],
            "title": "Learning Correlation Space for Time Series",
            "year": 2018
        },
        {
            "authors": [
                "Davood Rafiei"
            ],
            "title": "On Similarity-Based Queries for Time Series Data",
            "venue": "In ICDE",
            "year": 1999
        },
        {
            "authors": [
                "Alexis Tantet",
                "Henk A Dijkstra"
            ],
            "title": "An interaction network perspective on the relation between patterns of sea surface temperature variability and global mean surface temperature",
            "venue": "Earth System Dynamics",
            "year": 2014
        },
        {
            "authors": [
                "A.A. Tsonis",
                "P.J. Roebber"
            ],
            "title": "The architecture of the climate network",
            "venue": "Physica A",
            "year": 2004
        },
        {
            "authors": [
                "Matei Zaharia",
                "Reynold S. Xin",
                "PatrickWendell",
                "Tathagata Das",
                "Michael Armbrust",
                "Ankur Dave",
                "Xiangrui Meng",
                "Josh Rosen",
                "Shivaram Venkataraman",
                "Michael J. Franklin",
                "Ali Ghodsi",
                "JosephGonzalez",
                "Scott Shenker",
                "Ion Stoica"
            ],
            "title": "Apache Spark: a unified engine for big data processing",
            "venue": "Commun. ACM 59,",
            "year": 2016
        },
        {
            "authors": [
                "Xiaojian Zhao"
            ],
            "title": "High performance algorithms for multiple streaming time series",
            "year": 2006
        },
        {
            "authors": [
                "Yunyue Zhu",
                "Dennis E. Shasha"
            ],
            "title": "StatStream: Statistical Monitoring of Thousands of Data Streams in Real Time",
            "venue": "In VLDB",
            "year": 2002
        }
    ],
    "sections": [
        {
            "text": "KEYWORDS time-series, climate data, climate networks, correlation matrix ACM Reference Format: Yunlong Xu, Jinshu Liu, and Fatemeh Nargesian. 2022. TSUBASA: Climate Network Construction on Historical and Real-Time Data. In Proceedings of the 2022 International Conference on Management of Data (SIGMOD \u201922), June 12\u201317, 2022, Philadelphia, PA, USA. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3514221.3526177"
        },
        {
            "heading": "1 INTRODUCTION",
            "text": "To identify and analyze patterns in global climate, scientists and climate risk analysts model climate data as complex networks \u2013 networks with non-trivial topological properties [2, 16, 19]. The climate network architecture represents the global climate system by a set of anomaly time-series (departure from the usual behavior) of gridded climate data and their interactions [34]. A climate data set includes remote and in-situ sensor measurements (e.g. sea surface temperature and sea level pressure) covering a grid (e.g. \u2217Both authors contributed equally to this research.\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. SIGMOD \u201922, June 12\u201317, 2022, Philadelphia, PA, USA \u00a9 2022 Association for Computing Machinery. ACM ISBN 978-1-4503-9249-5/22/06. . . $15.00 https://doi.org/10.1145/3514221.3526177\nwith a resolution of 2.5\u25e6 \u00d7 2.5\u25e6). Nodes in a climate network are geographical locations, characterized by time-series and edges represent information flow between nodes. The edge weights indicate a degree of correlation between the behaviors of time-series (e.g. Pearson\u2019s correlation). Note the geographical locality of nodes does not directly imply the topology of a network.\nSeveral studies have applied network science on climate data assuming dynamic networks that are changing with real-time data [5]. Climate networks have been shown to be powerful tools for gaining insights on earthquakes [2], rainfalls [19], and global climate events such as El Ni\u00f1o [16].\nThe common way for network dynamics analysis is to construct networks for each hypothesized time-window and analyze them separately [14]. Figure 1 shows the steps of constructing a climate network. Given a query window provided by a user, a correlation matrix is constructed by computing the pairwise correlation of all time-series on the query window. Pearson\u2019s correlation is one of the most dominant measures for studying the pairwise climatical correlation [12]. The correlation matrix enables visualization [28], network dynamics analysis [5], as well as tasks such as community detection [33]. To analyze the topology of the network, a userprovided correlation threshold can be applied on the matrix to find the significant edges between nodes and obtain a boolean network matrix. From the mathematical perspective, the analytical computation of the evolution of a complex system (or even not so complex such as Ordinary Differential Equation systems), depends on the robustness and correctness of the initial weights in the complex network [16].\nThe core task in network construction is the problem of largescale all-pair time-series correlation calculation. The key challenges of interactive network analysis include: 1) exact calculation of the complete correlation matrix, 2) correlation calculation on timewindows of arbitrary size, and 3) efficiency of network construction and update for historic and real-time data to achieve interactivity.\nThe line of data management research that computes networks on time-series (for example, for stock market data or climate data) apply pruning techniques on the approximation of correlation measures. In particular, StatStream [37] and MASS [25] reduce the correlation of time-series to the distance of their Discrete Fourier Transform (DFT) coefficients and propose grid-based indexing [37] and I/O-aware techniques [25] for performing threshold-based correlated time-series search. The accuracy of the network can be increased by considering a very large number of DFT coefficients that are expensive to compute. a query window size is restricted to be an integral multiple of the basic window size, which limits the usability of these algorithms. In this paper, we present TSUBASA a ar X\niv :2\n20 3.\n16 45\n7v 1\n[ ph\nys ic\ns. da\nta -a\nn] 2\n3 M\nar 2\n02 2\nframework for efficient construction and update of the correlation matrix for arbitrary query windows on historical and real-time data. The differences of TSUBASA and existing work are three-fold. First, unlike these algorithms that only identify edges with a correlation higher than a threshold, TSUBASA computes and updates the complete correlation matrix. This enables network dynamics analysis as well as choosing arbitrary thresholds at query time. Second, TSUBASA computes the exact correlation between time-series. Finally, unlike the existing work, TSUBASA allows arbitrary query window sizes. In this paper, we make the following contributions. \u2022 We present the mathematical tools for the exact calculation of pairwise Pearson\u2019s correlation of time-series using the basic window model. \u2022 TSUBASA relies on simple statistics of basic windows pre-computed by doing one pass over the whole data. This provides a flexible and highly responsive correlation calculation mechanism. Users can obtain a correlation matrix given any query window without computing the correlation statistics repeatedly. \u2022 We propose an incremental solution for real-time update of the\ncorrelation matrix and climate network. Relying on the easy-tocompute statistics of basic windows means the correlations can be updated quickly for frequently-updated time-series. \u2022 We enable queries with arbitrary time-window size and start and end point on both historic and real-time by relaxing the restriction of the existing basic windowmodel on a querywindow size being an integral multiple of basic window size."
        },
        {
            "heading": "2 PRELIMINARIES",
            "text": "We start by introducing the climate network construction problem, then, give an overview of existing approximate techniques for calculating time-series correlation."
        },
        {
            "heading": "2.1 Climate Network",
            "text": "We are given a collection L = {\ud835\udc651, . . . , \ud835\udc65\ud835\udc5b} of geo-labeled timeseries, where \ud835\udc65\ud835\udc56 denotes the time-stamped values of a climatic variable collected at location \ud835\udc56 . A time-series\ud835\udc65\ud835\udc56 is defined as [x\ud835\udc561, . . . , x \ud835\udc56 \ud835\udc5a], where x\ud835\udc56 \ud835\udc57 is the observed value at time \ud835\udc57 . We assume all time-series in L are synchronized, i.e. each time-series has a value available at every periodic time interval, namely time resolution. Particularly, if the time resolution is \ud835\udefe and the current timestamp is \ud835\udc57 , every \ud835\udc65\ud835\udc56 is\nL will have a value observed at time \ud835\udc57 +\ud835\udefe . If an \ud835\udc65\ud835\udc56 has missing value at \ud835\udc57 , a value is interpolated or if multiple values appear between \ud835\udc57 and \ud835\udc57 + \ud835\udefe , an aggregate value is assigned. Table 1 shows a list of notations used throughout this paper.\nNow, we turn our attention to user\u2019s query. At query time, a user defines a query time-window\ud835\udc64 = (\ud835\udc52, \ud835\udc59) and a correlation threshold \ud835\udf03 . The query window is defined with an end timestamp \ud835\udc52 and a length \ud835\udc59 that indicates a sub-sequence of size \ud835\udc59 in a time-series with a start timestamp \ud835\udc52 \u2212 \ud835\udc59 + 1 and an end timestamp \ud835\udc52 . For real-time data, the end timestamp can be the last observed time, i.e. a user query on real-time data is\ud835\udc64 = (\u201c\ud835\udc5b\ud835\udc5c\ud835\udc64\u201d, \ud835\udc59), that means the network is constructed on the last \ud835\udc59 observed data points. We consider the data points within \ud835\udc64 for each time-series \ud835\udc65 = [x1, . . . , x\ud835\udc58 ]. For example, [x\ud835\udc58\u2212\ud835\udc5a+1, . . . , x\ud835\udc5a] is the sequence we consider for \ud835\udc65 on the query window \ud835\udc64 = (\ud835\udc58,\ud835\udc5a). When clear from the context, we call the sequence of a time-series \ud835\udc65 , for a given query window simply query window or time-series \ud835\udc65 . The climate network of L for a given query time-window\ud835\udc64 is a graph N = (\ud835\udc3a,\ud835\udc49 ), where a node in \ud835\udc3a corresponds to a location \ud835\udc56 and is represented by timeseries \ud835\udc65\ud835\udc56 . An edge in \ud835\udc49 between nodes \ud835\udc56 and \ud835\udc59 indicates that the correlation between time-series \ud835\udc65\ud835\udc56 and \ud835\udc65\ud835\udc59 is above a user-defined threshold \ud835\udf03 . In this paper, we focus on the most commonly used correlation measure i.e. Pearson\u2019s correlation coefficients. Given query windows \ud835\udc65 = [x1, . . . , x\ud835\udc5a] and\ud835\udc66 = [y1, . . . , y\ud835\udc5a], with means \ud835\udc65 and \ud835\udc66, the Pearson\u2019s correlation of \ud835\udc65 and \ud835\udc66 is calculated as follows.\n\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) = \u2211\ud835\udc5a \ud835\udc56=1 (x\ud835\udc56 \u2212 \ud835\udc65) (y\ud835\udc56 \u2212 \ud835\udc66)\u221a\ufe03\u2211\ud835\udc5a \ud835\udc56=1 (x\ud835\udc56 \u2212 \ud835\udc65)2 \u221a\ufe03\u2211\ud835\udc5a \ud835\udc56=1 (y\ud835\udc56 \u2212 \ud835\udc66)2 (1)\nConstructing a network for a query window (e.g. the first six months of 2021) requires computing the correlation for all pairs of time-series and pruning links using threshold \ud835\udf03 . Existing techniques for fast all-pair correlation calculation on large time series approximate pairwise correlation by relying on the Fourier transform [11, 25, 37]. In this paper, we present an efficient way of calculating the exact correlation of time-series and constructing a network for historical data and updating the network for realtime data. The existing work divide time-series into cooperative and uncooperative to perform correlation approximation. Although our core contribution is the exact calculation and the update of correlations, we also present an approximate way of calculating correlation for generic time-series (\u00a7 3.2). We start by giving an overview of correlation approximation."
        },
        {
            "heading": "2.2 Correlation Approximation Solutions",
            "text": "Computing the correlation of large-scale time-series is pervasively done using the notion of basic windows [25, 37]. Time-series are processed in batches of size \ud835\udc35, i.e. the stream [x1, . . . , x\ud835\udc5b] is equally divided into \ud835\udc5b/\ud835\udc35 basic windows, where the \ud835\udc57-th basic window contains data [x( \ud835\udc57\u22121)\u2217\ud835\udc35, . . . , x\ud835\udc57\u2217\ud835\udc35]. Similarly, a query window is a sequence of basic windows. A querywindow is assumed to be divisible by the size of basic window. Figure 2 presents a visualization of query and basic windows. The existing techniques approximate correlation using the Discrete Fourier Transform (DFT) of basic windows. The DFT of a time-series \ud835\udc65 = [x1, . . . , x\ud835\udc58 ] is a sequence\n\ud835\udc4b = [X1, . . . ,X\ud835\udc58 ] of complex numbers:\nX\ud835\udc53 = 1 \u221a \ud835\udc58 \ud835\udc58\u2211\ufe01 \ud835\udc56=1 x\ud835\udc56\ud835\udc52 \u2212\ud835\udc572\ud835\udf0b \ud835\udc53 \ud835\udc56 \ud835\udc58 , \ud835\udc53 = 1, . . . , \ud835\udc58 (2)\nwhere \ud835\udc57 = \u221a \u22121. Computing DFT coefficients has time complexity \ud835\udc42 (\ud835\udc5b2) in the size of basic window. For normalized time series, DFT preserves the Euclidean distance between two sequences, that is, \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61 (\ud835\udc65,\ud835\udc66) = \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61 (\ud835\udc4b,\ud835\udc4c ). The approximation techniques consider the first few DFT coefficients to capture the shape and properties of time-series. It has been shown that the correlation of two time-series can be reduced to the Euclidean distance of the the DFT coefficients of their normalized time-series [32, 37]. The normalization of a basic window \ud835\udc65\ud835\udc56 = [x1, . . . , x\ud835\udc35] is \ud835\udc65\ud835\udc56 = [ x1\u2212\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc56 , . . . , x\ud835\udc35\u2212\ud835\udc65\ud835\udc56 \ud835\udf0e\ud835\udc56 ], where \ud835\udc65\ud835\udc56 and \ud835\udf0e\ud835\udc56 are the mean and standard deviation of \ud835\udc65\ud835\udc56 . The correlation of two time-series can be obtained from the Euclidean distance \ud835\udc51 (., .) of their normalized series.\n\ud835\udc50\ud835\udc56 = 1 \u2212 1 2 \ud835\udc512 (\ud835\udc65\ud835\udc56 , \ud835\udc66\ud835\udc56 ) (3)\nFor more concise notation, we denote \ud835\udc51\ud835\udc56 to be \ud835\udc51 (\ud835\udc65\ud835\udc56 , \ud835\udc66\ud835\udc56 ). Suppose \ud835\udc4b\ud835\udc56 and \ud835\udc4c\ud835\udc56 are the DFT of normalized basic windows \ud835\udc65\ud835\udc56 and \ud835\udc66\ud835\udc56 , and \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b\ud835\udc56 , \ud835\udc4c\ud835\udc56 ) is the Euclidean distance of the first \ud835\udc5b DFT coefficients in\ud835\udc4b\ud835\udc56 and \ud835\udc4c\ud835\udc56 . Recall DFT preserves the distance between coefficients and the original time-series. Therefore, \ud835\udc51\ud835\udc56 \u2243 \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b\ud835\udc56 , \ud835\udc4c\ud835\udc56 ). The more coefficients are used (the higher \ud835\udc5b), the more accurate the distance and correlation becomes. So far, we have a way of computing the distance of basic windows. To compute the distance of query windows, \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc65,\ud835\udc66), the existing techniques assume that the form and properties of time-series do not drastically change over a query window, i.e. basic windows have similar statistics (mean and standard deviation) to the query window [25, 37]. When the statistics do not change,\ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc65,\ud835\udc66) is the average of the \ud835\udc51\ud835\udc56 on all basic windows of \ud835\udc65 and \ud835\udc66. In \u00a7 3.2, we relax this assumption and consider time series that change in form and properties over a query window, i.e. the statistics of basic windows are not necessarily similar to each other and the query window. Now, we apply Equation 3 on time windows, to get \ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) \u2243 1 \u2212 12\ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc65,\ud835\udc66). Again the higher \ud835\udc5b we use, the better approximation of correlation we obtain.\nNow, we describe how \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c ) is used to decide whether \ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) \u2265 \ud835\udf03 . Zhu and Shasha show the following relationship\nbetween correlation and the distance based on \ud835\udc5b DFT coefficients of \ud835\udc4b and \ud835\udc4c .\n\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) \u2265 1 \u2212 \ud835\udf162 \u21d2 \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c ) \u2264 \ud835\udf16 (4)\nWhen using approximate techniques for climate network construction, to get the pairs of time-series with \ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) \u2265 \ud835\udf03 , we can compute \ud835\udf16 = \u221a 1 \u2212 \ud835\udf03 . This allows us to prune pairs with condition \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c ) \u2264 \u221a\n1 \u2212 \ud835\udf03 . Using Equation 4, we get a superset of highly correlated timeseries with no false negatives. As we show in Figure 5a, the false positives incur spurious edges in the network and result in an inaccurate network. These false positive edges can only be filtered at the cost of exact correlation calculation from the raw data. To avoid false positives, TSUBASA calculates exact correlations of timeseries, even faster than approximation.\nApplying Equation 4 requires normalizing time-series and calculating DFT coefficients. When using DFT-based approximation, the accuracy of network increases as more DFT coefficients are considered. Indeed, approximate techniques consider very few coefficients (two in the case of StatStream [37] for any basic window size). However, when dealing with climate data sets, which are uncooperative time-series, the majority of coefficients are needed to get near accurate results (Figure 5a). Statstream proposes random projection for uncooperative time-series that similar to DFT coefficient calculation approximates correlation and has high overhead. To overcome modeling uncooperative time-series, Qiu et al. use Fourier transform and neural network to embed time series into a low-dimensional Euclidean space [31]. The search is done using a nearest neighbor search index in the embedding space. In this paper, we choose a different approach and compute exact correlation and network. Our solution, TSUBASA, relies on simple statistics of basic windows, and as we show empirically is much faster than approximation techniques. In particular, TSUBASA can update a network constructed on real-time data more efficiently than approximation techniques. This enables interactive network analysis on accurate networks for historical and real-time climate data."
        },
        {
            "heading": "3 NETWORK CONSTRUCTION",
            "text": "Before a deep dive into exact correlation calculation, we present a high-level overview of TSUBASA\u2019s end-to-end framework. Figure 3 illustrates the components of TSUBASA for constructing and updating a climate network on historical and real-time data. The data storage contains a collection of frequently updated time-series accessible through locations. During the pre-processing, every timeseries is divided into basic windows. We sketch basic windows of time-series, in one pass, and store the collected statistics. This can be done at data ingestion time. At query time, the statistics of the basic windows corresponding to a given query window of all timeseries are retrieved and all-pair correlation is calculated without the need to access the raw data. For real-time data, the system constructs the initial network and ingests the real-time raw data in chunks of size \ud835\udc35. The sketching of the newly ingested basic window is done on the fly and the correlations of time-series are updated incrementally without computing the correlation from scratch. In the following sections, we describe the details of data sketching as well as the mathematical model for the exact and approximate calculation of correlation."
        },
        {
            "heading": "3.1 Exact Pairwise Correlation",
            "text": "3.1.1 Historical Data. Our solution uses the basic window model to calculate the exact correlation of times-series. Subdividing a series into basic windows allows us to process data in smaller batches. Existing works for approximate correlation calculation assume equal length across all basic windows [25, 37]. Assuming an equal\nAlgorithm 1 Preprocessing\nInput: streams L = {x1, . . . , x\ud835\udc5b}; basic window size \ud835\udc35 Output: statistics \ud835\udc46 1: \ud835\udc5b\ud835\udc60 \u2190 Len(x1)/\ud835\udc35 2: \ud835\udc46 \u2190 {} 3: for \ud835\udc65,\ud835\udc66 \u2208 L do 4: \ud835\udc65 \u2190 BasicWin(x, \ud835\udc35); \ud835\udc66 \u2190 BasicWin(y, \ud835\udc35) 5: for \ud835\udc57 \u2208 [1..\ud835\udc5b\ud835\udc60 ] do 6: \ud835\udc46\ud835\udc65 \ud835\udc57 \u2190 Stats(\ud835\udc65 \ud835\udc57 ); \ud835\udc46\ud835\udc66 \ud835\udc57 \u2190 Stats(\ud835\udc66 \ud835\udc57 ) 7: \ud835\udc50 \ud835\udc57 \u2190 Corr(\ud835\udc65 \ud835\udc57 , \ud835\udc66 \ud835\udc57 ) 8: \ud835\udc65 \ud835\udc57 \u2190 Normalize(\ud835\udc65 \ud835\udc57 , \ud835\udc46\ud835\udc65 \ud835\udc57 ); \ud835\udc66 \ud835\udc57 \u2190 Normalize(\ud835\udc66 \ud835\udc57 , \ud835\udc46\ud835\udc66 \ud835\udc57 ) 9: \ud835\udc4b \ud835\udc57 \u2190 DFT(\ud835\udc65 \ud835\udc57 ); \ud835\udc4c\ud835\udc57 \u2190 DFT(\ud835\udc66 \ud835\udc57 ) 10: \ud835\udc51 \ud835\udc57 \u2190 Distn (\ud835\udc4b \ud835\udc57 , \ud835\udc4c\ud835\udc57 ) 11: // 8-10 are performed for approximation method 12: \ud835\udc46 \u2190WriteStats(\ud835\udc46\ud835\udc65 \ud835\udc57 , \ud835\udc46\ud835\udc66 \ud835\udc57 , \ud835\udc50 \ud835\udc57 , \ud835\udc51 \ud835\udc57 ) 13: return \ud835\udc46\nAlgorithm 2 Network-Construct-Histo\nInput: streams L = {x1, . . . , x\ud835\udc5b}; statistics \ud835\udc46 ; query\ud835\udc64 ; basic window size \ud835\udc35; threshold \ud835\udf03 Output: graph (\ud835\udc3a,\ud835\udc49 ) 1: \ud835\udc3a \u2190 {1, . . . , \ud835\udc5b}; \ud835\udc49 \u2190 {} 2: \ud835\udc4f \u2190 GetBasicWins(\ud835\udc64) // basic window ids in \ud835\udc64 3: for x \u2208 L and y \u2208 L do 4: \ud835\udc46\ud835\udc65 \u2190 ReadStats(\ud835\udc46, \ud835\udc4f, \ud835\udc65); \ud835\udc46\ud835\udc66 \u2190 ReadStats(\ud835\udc46, \ud835\udc4f,\ud835\udc66) 5: \ud835\udc50 \u2190 Corr(\ud835\udc46\ud835\udc65 , \ud835\udc46\ud835\udc66) // use Lemma 1 6: if \ud835\udc50 > \ud835\udf03 then 7: \ud835\udc49 .Add(\ud835\udc65,\ud835\udc66, \ud835\udc50) 8: return (\ud835\udc3a,\ud835\udc49 )\nbasic window length poses a limitation on the length of the query window, that is the length of the query window could only be an integral multiple of the length of the basic window. Formally, we have | \ud835\udc65 |= \ud835\udc35 \u00b7 \ud835\udc5b\ud835\udc60 , where | \ud835\udc65 | is the length of the basic window. TSUBASA relaxes this assumption and provides a way of calculating the exact pairwise correlation of time-series for arbitrary query window lengths.\nLemma 1. Given query windows \ud835\udc65 = [x1, . . . , x\ud835\udc5a] and \ud835\udc66 = [y1, . . . , y\ud835\udc5a] and the sizes of basic windows: B = [\ud835\udc351, \ud835\udc352, . . . , \ud835\udc35\ud835\udc5a], where \ud835\udc35\ud835\udc56 is the size of the \ud835\udc56th basic window size. The exact Pearson\u2019s correlation of \ud835\udc65 and \ud835\udc66 is:\n\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) = \u2211\ud835\udc5b\ud835\udc60\n\ud835\udc57=1 \ud835\udc35 \ud835\udc57 (\ud835\udf0e\ud835\udc65 \ud835\udc57\ud835\udf0e\ud835\udc66 \ud835\udc57 \ud835\udc50 \ud835\udc57 + \ud835\udeff\ud835\udc65 \ud835\udc57 \ud835\udeff\ud835\udc66 \ud835\udc57 )\u221a\ufe03\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ) \u221a\ufe03\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc66\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc66\ud835\udc56 )\n\ud835\udeff\ud835\udc65\ud835\udc56 = \ud835\udc65\ud835\udc56 \u2212 \u2211\ud835\udc5b\ud835\udc60 \ud835\udc58=1 \ud835\udc65\ud835\udc58\n\ud835\udc5b\ud835\udc60 , \ud835\udeff\ud835\udc66\ud835\udc56 = \ud835\udc66\ud835\udc56 \u2212\n\u2211\ud835\udc5b\ud835\udc60 \ud835\udc58=1 \ud835\udc66\ud835\udc58\n\ud835\udc5b\ud835\udc60\nwhere, \ud835\udf0e\ud835\udc65\ud835\udc56 (\ud835\udf0e\ud835\udc66\ud835\udc56 ) is the standard deviation of basic window of \ud835\udc65\ud835\udc56 (\ud835\udc66\ud835\udc56 ), \ud835\udc50\ud835\udc56 is the correlation of basic windows \ud835\udc65\ud835\udc56 and \ud835\udc66\ud835\udc56 , \ud835\udc65\ud835\udc56 (\ud835\udc66\ud835\udc56 ) is the mean of basic window \ud835\udc65\ud835\udc56 (\ud835\udc66\ud835\udc56 ).\nProof. This lemma has been provided as a possible general extension provided by Dunlap [13], without proof. We provide a\nproof here. Let \u03a9 \ud835\udc57 be the size of the tail of a time-series with \ud835\udc351 to \ud835\udc35 \ud835\udc57 basic windows of arbitrary size.\n\u03a9 \ud835\udc57 = \ud835\udc57\u2211\ufe01\n\ud835\udc58=1 \ud835\udc35\ud835\udc58 ; \u03a90 = 0\n\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f (\ud835\udc65,\ud835\udc66) = 1 \ud835\udc47 \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc57=1 \u03a9 \ud835\udc57\u2211\ufe01 \ud835\udc56=\u03a9 \ud835\udc57\u22121+1 ( x\ud835\udc56 \u2212 \ud835\udc65 \ud835\udf0e\ud835\udc65 ).( y\ud835\udc56 \u2212 \ud835\udc66 \ud835\udf0e\ud835\udc66 )\n= 1 \ud835\udc47 \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc57=1 \u03a9 \ud835\udc57\u2211\ufe01 \ud835\udc56=\u03a9 \ud835\udc57\u22121+1 \ud835\udf0e\ud835\udc65 \ud835\udc57 x \ud835\udc57,\ud835\udc56 + \ud835\udeff\ud835\udc65 \ud835\udc57 \ud835\udf0e\ud835\udc65 . \ud835\udf0e\ud835\udc66 \ud835\udc57 y \ud835\udc57,\ud835\udc56 + \ud835\udeff\ud835\udc66 \ud835\udc57 \ud835\udf0e\ud835\udc66\n= 1 \ud835\udc47\n\u2211\ud835\udc5b\ud835\udc60 \ud835\udc57=1 \ud835\udc35 \ud835\udc57 (\ud835\udf0e\ud835\udc65 \ud835\udc57\ud835\udf0e\ud835\udc66 \ud835\udc57 \ud835\udc50 \ud835\udc57 + \ud835\udeff\ud835\udc65 \ud835\udc57 \ud835\udeff\ud835\udc66 \ud835\udc57 )\n\ud835\udf0e\ud835\udc65\ud835\udf0e\ud835\udc66\n= \u2211\ud835\udc5b\ud835\udc60 \ud835\udc57=1 \ud835\udc35 \ud835\udc57 (\ud835\udf0e\ud835\udc65 \ud835\udc57\ud835\udf0e\ud835\udc66 \ud835\udc57 \ud835\udc50 \ud835\udc57 + \ud835\udeff\ud835\udc65 \ud835\udc57 \ud835\udeff\ud835\udc66 \ud835\udc57 )\u221a\ufe03\u2211\ud835\udc5b\ud835\udc60\n\ud835\udc56=1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ) \u221a\ufe03\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc66\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc66\ud835\udc56 )\nwhere x\ud835\udc57,\ud835\udc56 (y\ud835\udc57,\ud835\udc56 ) is the x\ud835\udc56 (y\ud835\udc56 ) normalized in the \ud835\udc57-th basic window. Now, to show that \ud835\udf0e\ud835\udc65 = \u221a\ufe03 1 \ud835\udc47 \u2211\ud835\udc5b\ud835\udc60 1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ), we evaluate:\n\ud835\udc47\ud835\udf0e\ud835\udc65 2 \u2212 \ud835\udc5b\ud835\udc60\u2211\ufe01 1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff2\ud835\udc65\ud835\udc56 ) = \ud835\udc5b\ud835\udc60\u2211\ufe01 1 (\ud835\udf0e\ud835\udc65 2 \u2212 \ud835\udf0e\ud835\udc65\ud835\udc56 2 \u2212 \ud835\udeff2\ud835\udc65\ud835\udc56 )\n= \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc58=1 \u03a9\ud835\udc58\u2211\ufe01 \ud835\udc57=\u03a9\ud835\udc58\u22121+1 1 \ud835\udc35\ud835\udc58 (x\ud835\udc57 \u2212 \ud835\udc65)2 \u2212 1 \ud835\udc35\ud835\udc58 (x\ud835\udc57 \u2212 \ud835\udc65\ud835\udc58 )2 \u2212 1 \ud835\udc35\ud835\udc58 (\ud835\udc651 \u2212 \ud835\udc65\ud835\udc58 )2\n= \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc58=1 ( \u03a9\ud835\udc58\u2211\ufe01 \ud835\udc57=\u03a9\ud835\udc58\u22121+1 (\u22122\ud835\udc65x\ud835\udc57 + 2\ud835\udc65\ud835\udc58 \ud835\udc65) + (2x\ud835\udc57\ud835\udc65\ud835\udc58 \u2212 2\ud835\udc65\ud835\udc58 2) \ud835\udc35\ud835\udc58 )\n= \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc58=1 1 \ud835\udc35\ud835\udc58 ((\u22122\ud835\udc35\ud835\udc58\ud835\udc65\ud835\udc65\ud835\udc58 + 2\ud835\udc35\ud835\udc58\ud835\udc65\ud835\udc58 \ud835\udc65) + (2\ud835\udc35\ud835\udc58\ud835\udc65\ud835\udc58 2 \u2212 2\ud835\udc35\ud835\udc58\ud835\udc65\ud835\udc58 2)) = 0\n\u25a1\nUsing Lemma 1, we can pre-compute and store the statistics of basic windows of once and compute the correlation of time-series for user-given time windows at query time without performing a pass over time-series. Moreover, Lemma 1 allows us to support the arbitrary query window lengths. For instance, a user-provided query window \ud835\udc65 = [\ud835\udc65\ud835\udc56 , . . . , \ud835\udc65 \ud835\udc57 ] and \ud835\udc66 = [\ud835\udc66\ud835\udc56 , . . . , \ud835\udc66 \ud835\udc57 ], there exists a unique \ud835\udf05 \u2208 N such that \ud835\udf05 \u00b7 \ud835\udc35 \u2264 \ud835\udc56 < (\ud835\udf05 + 1) \u00b7 \ud835\udc35, and there exists a unique \ud835\udf12 \u2208 N such that \ud835\udf12 \u00b7\ud835\udc35 < \ud835\udc57 \u2264 (\ud835\udf12 +1) \u00b7\ud835\udc35. Let \ud835\udc351 = (\ud835\udf05+1) \u00b7\ud835\udc35\u2212\ud835\udc56 , \ud835\udc35\ud835\udc5b\ud835\udc60 = \ud835\udf12 \u00b7\ud835\udc35\u2212 \ud835\udc57 , and\ud835\udc35\ud835\udc58 , for\ud835\udc58 \u2208 {2, \u00b7 \u00b7 \u00b7 , \ud835\udc5b\ud835\udc60\u22121}. At query time, we need to compute \ud835\udf0e\ud835\udc651 (\ud835\udf0e\ud835\udc661 ), \ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60 (\ud835\udf0e\ud835\udc66\ud835\udc5b\ud835\udc60 ), \ud835\udeff\ud835\udc651 (\ud835\udeff\ud835\udc661 ) and \ud835\udeff\ud835\udc65\ud835\udc5b\ud835\udc60 (\ud835\udeff\ud835\udc66\ud835\udc5b\ud835\udc60 ) from the raw data, and all the others for the \ud835\udc352, \u00b7 \u00b7 \u00b7 , \ud835\udc35\ud835\udc5b\ud835\udc60\u22121 are pre-computed in the pre-processing. Note that the case of equally subdividing time-series into basic windows of size \ud835\udc35 and a query window size being the integral multiple of the basic window size is a special case of Lemma 1. For this special case, Algorithm 1 shows the steps of sketching basic windows and Algorithm 2 describes the steps of constructing a network based on the exact correlation of time-series calculated from the pre-computed statistics of basic windows.\n3.1.2 Real-time Data. The correlation equation of Lemma 1 can be extended to deal with real-time data. A user-defined query window on real-time data,\ud835\udc64 = (\u201c\ud835\udc5b\ud835\udc5c\ud835\udc64\u201d,\ud835\udc5a), indicates the sequence of the\ud835\udc5a most recently observed data points of time-series. That is, the size of the query window is fixed while the end timestamp is changing as new data arrive. In our problem setting, since the data is processed on the basis of basic windows, the algorithm waits until all new \ud835\udc35 data points arrive. For time-series \ud835\udc65 = [x1, . . . , x\ud835\udc5a] and \ud835\udc66 = [y1, . . . , y\ud835\udc5a], and a query\ud835\udc64 = (\u201c\ud835\udc5b\ud835\udc5c\ud835\udc64\u201d,\ud835\udc5a), we can compute correlation at time \ud835\udc61 , namely\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61 (\ud835\udc65,\ud835\udc66), using Lemma 1. This involves considering basic windows [\ud835\udc651, . . . , \ud835\udc65\ud835\udc5b\ud835\udc60 ] and [\ud835\udc661, . . . , \ud835\udc66\ud835\udc5b\ud835\udc60 ], where \ud835\udc5b\ud835\udc60 =\ud835\udc5a/\ud835\udc35. At time \ud835\udc61+\ud835\udc35, the observed time-series are [x1, . . . , x\ud835\udc5a+\ud835\udc35] and [y1, . . . , y\ud835\udc5a+\ud835\udc35] and the basic windows are [\ud835\udc651, . . . , \ud835\udc65\ud835\udc5b\ud835\udc60+1] and [\ud835\udc661, . . . , \ud835\udc66\ud835\udc5b\ud835\udc60+1]. Based on query \ud835\udc64 = (\u201c\ud835\udc5b\ud835\udc5c\ud835\udc64\u201d,\ud835\udc5a), we need to consider [\ud835\udc652, . . . , \ud835\udc65\ud835\udc5b\ud835\udc60+1] and [\ud835\udc662, . . . , \ud835\udc66\ud835\udc5b\ud835\udc60+1]. According to Lemma 1, we can recalculate the correlation at time \ud835\udc61 + \ud835\udc35 from scratch. That is,\n\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61+\ud835\udc35 (\ud835\udc65,\ud835\udc66) = \u2211\ud835\udc5b\ud835\udc60+1 \ud835\udc56=2 (\ud835\udf0e\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc66\ud835\udc56\ud835\udc50\ud835\udc56 + \ud835\udeff\ud835\udc65\ud835\udc56\ud835\udeff\ud835\udc66\ud835\udc56 )\u221a\ufe03\u2211\ud835\udc5b\ud835\udc60+1\n\ud835\udc56=2 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ) \u221a\ufe03\u2211\ud835\udc5b\ud835\udc60+1 \ud835\udc56=2 (\ud835\udf0e\ud835\udc66\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc66\ud835\udc56 )\nNote that \ud835\udeff\ud835\udc65 \ud835\udc57 \u2019s and \ud835\udeff\ud835\udc66 \ud835\udc57 \u2019s have changed and needs to be recalculated, since the means of the new query windows have probably changed upon the arrival of new data. The following lemma allows us to compute \ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61+\ud835\udc35 (\ud835\udc65,\ud835\udc66) by only using the statistics of the first and last basic windows, without the need to calculate the statistics of the query window.\nLemma 2. Given query windows \ud835\udc65 = [x1, . . . , x\ud835\udc5a] and \ud835\udc66 = [y1, . . . , y\ud835\udc5a], basic windows [\ud835\udc651, . . . , \ud835\udc65\ud835\udc5b\ud835\udc60 ] and [\ud835\udc661, . . . , \ud835\udc66\ud835\udc5b\ud835\udc60 ], and basic window size \ud835\udc35 = [\ud835\udc351, . . . , \ud835\udc35\ud835\udc5b\ud835\udc60 ], where \ud835\udc47 = \u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 \ud835\udc35\ud835\udc56 . Upon the arrival of \ud835\udc35\ud835\udc5b\ud835\udc60+1 new data points, we have \ud835\udc65 = [x1, . . . , x\ud835\udc5a+\ud835\udc35\ud835\udc5b\ud835\udc60+1 ] and \ud835\udc66 = [y1, . . . , y\ud835\udc5a+\ud835\udc35\ud835\udc5b\ud835\udc60+1 ] and basic windows [\ud835\udc651, . . . , \ud835\udc65\ud835\udc5b\ud835\udc60+1] and [\ud835\udc661, . . . , \ud835\udc66\ud835\udc5b\ud835\udc60+1]. Let \ud835\udc47 \u2032 = \u2211\ud835\udc5b\ud835\udc60+1 \ud835\udc56=2 \ud835\udc35\ud835\udc56 . Considering a query window \ud835\udc64 = (\u201c\ud835\udc5b\ud835\udc5c\ud835\udc64\u201d,\ud835\udc5a), we can incrementally compute the Pearson\u2019s correlation of \ud835\udc65 and \ud835\udc66 at time \ud835\udc61 + \ud835\udc35\ud835\udc5b\ud835\udc60+1 from their correlation at time \ud835\udc61 :\n\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61+\ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udc65,\ud835\udc66) = 1\n\ud835\udc36 . \ud835\udc37\n( \ud835\udc47\ud835\udf0e\ud835\udc65\ud835\udf0e\ud835\udc66\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61 (\ud835\udc65,\ud835\udc66)\n+ \ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc66\ud835\udc5b\ud835\udc60+1\ud835\udc50\ud835\udc5b\ud835\udc60+1 + \ud835\udeff\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udeff\ud835\udc66\ud835\udc5b\ud835\udc60+1 ) \u2212 \ud835\udc351 (\ud835\udf0e\ud835\udc651\ud835\udf0e\ud835\udc661\ud835\udc501 + \ud835\udeff\ud835\udc651\ud835\udeff\ud835\udc661 )\u2212\ud835\udc47 \u2032\ud835\udefc\ud835\udc65\ud835\udefc\ud835\udc66 )\n\ud835\udc36 = \u221a\ufe03 \ud835\udc47\ud835\udf0e2\ud835\udc65 + \ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc5b\ud835\udc60+1 ) \u2212 \ud835\udc351 (\ud835\udf0e2\ud835\udc651 + \ud835\udeff2\ud835\udc651 ) \u2212\ud835\udc47 \u2032\ud835\udefc2\ud835\udc65\n\ud835\udc37 = \u221a\ufe03 \ud835\udc47\ud835\udf0e2\ud835\udc66 + \ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udf0e\ud835\udc66\ud835\udc5b\ud835\udc60+1 2 + \ud835\udeff 2 \ud835\udc66\ud835\udc5b\ud835\udc60+1 ) \u2212 \ud835\udc351 (\ud835\udf0e2\ud835\udc661 + \ud835\udeff2\ud835\udc661 ) \u2212\ud835\udc47 \u2032\ud835\udefc2\ud835\udc66 \ud835\udefc\ud835\udc65 = \ud835\udc35\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udeff\ud835\udc5b\ud835\udc60+1 \u2212 \ud835\udc351\ud835\udeff\ud835\udc651\n\ud835\udc47 \ud835\udc4e\ud835\udc5b\ud835\udc51 \ud835\udefc\ud835\udc66 = \ud835\udc35\ud835\udc5b\ud835\udc60+1\ud835\udeff\ud835\udc66\ud835\udc5b\ud835\udc60+1 \u2212 \ud835\udc351\ud835\udeff\ud835\udc661 \ud835\udc47\n\ud835\udeff\ud835\udc65\ud835\udc5b\ud835\udc60+1 = \ud835\udc65\ud835\udc5b\ud835\udc60+1 \u2212 \ud835\udc651:\ud835\udc5b\ud835\udc60 \ud835\udc4e\ud835\udc5b\ud835\udc51 \ud835\udeff\ud835\udc66\ud835\udc5b\ud835\udc60+1 = \ud835\udc66\ud835\udc5b\ud835\udc60+1 \u2212 \ud835\udc661:\ud835\udc5b\ud835\udc60 where, \ud835\udf0e\ud835\udc65 (\ud835\udf0e\ud835\udc66) is the standard deviation of query window \ud835\udc65 (\ud835\udc66) at time \ud835\udc61 , \ud835\udf0e\ud835\udc65 \ud835\udc57 (\ud835\udf0e\ud835\udc66 \ud835\udc57 ) is the standard deviation of the basic window of \ud835\udc65 \ud835\udc57 (\ud835\udc66 \ud835\udc57 ), \ud835\udc50 \ud835\udc57 is the correlation of the \ud835\udc57-th basic windows of \ud835\udc65 and \ud835\udc66, \ud835\udc65 \ud835\udc57 (\ud835\udc66 \ud835\udc57 ) is the mean of basic window \ud835\udc65 \ud835\udc57 (\ud835\udc66 \ud835\udc57 ), and \ud835\udc65\ud835\udc56:\ud835\udc57 (\ud835\udc66\ud835\udc56:\ud835\udc57 ) is the mean of basic windows \ud835\udc65\ud835\udc56 , . . . , \ud835\udc65 \ud835\udc57 (\ud835\udc66\ud835\udc56 , . . . , \ud835\udc66 \ud835\udc57 ).\nProof. We denote \ud835\udf0e \u2032\ud835\udc65 (\ud835\udf0e \u2032\ud835\udc66) to be the standard deviation of the new query window\ud835\udc64 after the arrival of the new basic window, and \ud835\udeff\ud835\udc65 \u2032\n\ud835\udc56 (\ud835\udeff\ud835\udc66\u2032 \ud835\udc56 ) to be parameters of the new query window. We assume\nthere is a linear transform \ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61+\ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udc65,\ud835\udc66) = \ud835\udc58\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61 (\ud835\udc65,\ud835\udc66) + \ud835\udc60 , where \ud835\udc58 = \ud835\udc47\ud835\udf0e\ud835\udc65\ud835\udf0e\ud835\udc66\n\ud835\udc47 \u2032\ud835\udf0e\u2032\ud835\udc65\ud835\udf0e \u2032 \ud835\udc66 and \ud835\udc60 = 1 \ud835\udc47 \u2032\ud835\udf0e\u2032\ud835\udc65\ud835\udf0e \u2032 \ud835\udc66 \ud835\udc60 \u2032. Looking at the change of the\nnumerator, we have derived the following for \ud835\udc60 \u2032:\n\ud835\udc60 \u2032 = \ud835\udc47 \u2032\ud835\udf0e \u2032\ud835\udc65\ud835\udf0e \u2032 \ud835\udc66\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61+\ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udc65,\ud835\udc66) \u2212\ud835\udc47\ud835\udf0e\ud835\udc65\ud835\udf0e\ud835\udc66\ud835\udc36\ud835\udc5c\ud835\udc5f\ud835\udc5f\ud835\udc61 (\ud835\udc65,\ud835\udc66)\n= \ud835\udc5b\ud835\udc60+1\u2211\ufe01 \ud835\udc56=2 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc66\ud835\udc56\ud835\udc50\ud835\udc56 + \ud835\udeff\ud835\udc65 \u2032\ud835\udc56\ud835\udeff\ud835\udc66\u2032\ud835\udc56 ) \u2212 \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc56=1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc66\ud835\udc56\ud835\udc50\ud835\udc56 + \ud835\udeff\ud835\udc65\ud835\udc56\ud835\udeff\ud835\udc66\ud835\udc56 )\n= \ud835\udc35\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc66\ud835\udc5b\ud835\udc60+1\ud835\udc50\ud835\udc5b\ud835\udc60+1 \u2212 \ud835\udc351\ud835\udf0e\ud835\udc651\ud835\udf0e\ud835\udc661\ud835\udc501 + \ud835\udc5b\ud835\udc60+1\u2211\ufe01 \ud835\udc56=2 \ud835\udc35\ud835\udc56\ud835\udeff\ud835\udc65 \u2032 \ud835\udc56 \ud835\udeff\ud835\udc66\u2032 \ud835\udc56\n\u2212 \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc56=1 \ud835\udc35\ud835\udc56\ud835\udeff\ud835\udc65\ud835\udc56\ud835\udeff\ud835\udc66\ud835\udc56\nSince \ud835\udeff \u2032\ud835\udc65\ud835\udc56 = \ud835\udc65\ud835\udc56 \u2212 (\ud835\udc651:\ud835\udc5b\ud835\udc60 + \ud835\udefc\ud835\udc65 ) and \ud835\udeff \u2032 \ud835\udc66\ud835\udc56 = \ud835\udc66\ud835\udc56 \u2212 (\ud835\udc661:\ud835\udc5b\ud835\udc60 + \ud835\udefc\ud835\udc66), we have \ud835\udeff \u2032\ud835\udc65\ud835\udc56\ud835\udeff \u2032 \ud835\udc66\ud835\udc56\n= (\ud835\udc65\ud835\udc56 \u2212 (\ud835\udc651:\ud835\udc5b\ud835\udc60 + \ud835\udefc\ud835\udc65 )) (\ud835\udc66\ud835\udc56 \u2212 (\ud835\udc661:\ud835\udc5b\ud835\udc60 + \ud835\udefc\ud835\udc66)) = (\ud835\udeff\ud835\udc65\ud835\udc56 \u2212 \ud835\udefc\ud835\udc65 ) (\ud835\udeff\ud835\udc66\ud835\udc56 \u2212 \ud835\udefc\ud835\udc66)\nThen, plugging it into the equation for \ud835\udc60 \u2032, we get\n\ud835\udc60 \u2032 = \ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc66\ud835\udc5b\ud835\udc60+1\ud835\udc50\ud835\udc5b\ud835\udc60+1 + \ud835\udeff\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udeff\ud835\udc66\ud835\udc5b\ud835\udc60+1 ) \u2212 \ud835\udc351 (\ud835\udf0e\ud835\udc651\ud835\udf0e\ud835\udc661\ud835\udc501 + \ud835\udeff\ud835\udc651\ud835\udeff\ud835\udc661 ) \u2212\ud835\udc47 \u2032\ud835\udefc\ud835\udc65\ud835\udefc\ud835\udc66\nTo get \ud835\udc60 and \ud835\udc58 , we also need the incremental equation for \ud835\udf0e \u2032\ud835\udc65 (\ud835\udf0e \u2032\ud835\udc66) if we look at the denominator. In the proof of Lemma 1, we showed that \ud835\udf0e\ud835\udc65 = \u221a\ufe03 1 \ud835\udc47 \u2211\ud835\udc5b\ud835\udc60 1 \ud835\udc35\ud835\udc56 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ). We have:\n\ud835\udc47 \u2032\ud835\udf0e \u20322\ud835\udc65 = \ud835\udc352\ud835\udf0e\ud835\udc652 2 + \ud835\udc352\ud835\udeff \u20322\ud835\udc652 + . . . + \ud835\udc35\ud835\udc5b\ud835\udc60+1\ud835\udf0e 2 \ud835\udc5b\ud835\udc60+1 + \ud835\udc35\ud835\udc5b\ud835\udc60+1\ud835\udeff \u20322\ud835\udc65\ud835\udc5b\ud835\udc60+1\n= \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc57=1 \ud835\udc35 \ud835\udc57\ud835\udf0e\ud835\udc65 \ud835\udc57 2 + \ud835\udc35\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1 2 \u2212 \ud835\udc351\ud835\udf0e\ud835\udc651 2 + \ud835\udc5b\ud835\udc60+1\u2211\ufe01 \ud835\udc57=2 \ud835\udc35 \ud835\udc57 (\ud835\udeff\ud835\udc65 \ud835\udc57 \u2212 \ud835\udefc\ud835\udc65 )2\n= \ud835\udc5b\ud835\udc60\u2211\ufe01 \ud835\udc57=1 \ud835\udc35 \ud835\udc57\ud835\udf0e\ud835\udc65 \ud835\udc57 2 + \ud835\udc35\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1 2 \u2212 \ud835\udc351\ud835\udf0e\ud835\udc651 2\n+ \ud835\udc5b\ud835\udc60+1\u2211\ufe01 \ud835\udc57=2 \ud835\udc35 \ud835\udc57 (\ud835\udeff\ud835\udc65 \ud835\udc57 2 \u2212 2\ud835\udeff\ud835\udc65 \ud835\udc57\ud835\udefc\ud835\udc65 + \ud835\udefc\ud835\udc65 2)\n= \ud835\udc47\ud835\udf0e2\ud835\udc65 + \ud835\udc35\ud835\udc5b\ud835\udc60+1 (\ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1 2 + \ud835\udeff2\ud835\udc65\ud835\udc5b\ud835\udc60+1 ) \u2212 \ud835\udc351 (\ud835\udf0e 2 \ud835\udc651 + \ud835\udeff 2 \ud835\udc651 ) \u2212\ud835\udc47 \u2032\ud835\udefc2\ud835\udc65\nBy replacing \ud835\udc58 and \ud835\udc60 in the above transform, the proof of the lemma becomes complete. For real-time data, the mean of the query window changes as new data arrives. For efficiency purposes, we do not want to compute that mean for the calculation of parameters \ud835\udeff . Lemma 1 allows us to compute the standard deviation of a query window and correlation without computing the mean. \u25a1\nAlgorithm 3 describes the steps of constructing a network for real-time data."
        },
        {
            "heading": "3.2 Approximate Pairwise Correlation",
            "text": "This considers non-aribtrary query window size. So far, we presented ways of computing and updating the exact correlation of time-series. Now, we describe how our model can be extended to approximate the correlation of time-series over a query window for all time-series regardless of being cooperativeness or uncooperative. Equation 3 shows how the DFT coefficients of two time series can be reduced to the Euclidean distance of their normalized series, as\nAlgorithm 3 Network-Construct-RealTime\nInput: streams L = {x1, . . . , x\ud835\udc5b}; statistics \ud835\udc46 ; query\ud835\udc64 ; basic window size \ud835\udc35; threshold \ud835\udf03 Output: graph (\ud835\udc3a,\ud835\udc49 ) 1: \ud835\udc46 \u2190 \ud835\udc43\ud835\udc5f\ud835\udc52\ud835\udc5d\ud835\udc5f\ud835\udc5c\ud835\udc50\ud835\udc52\ud835\udc60\ud835\udc60\ud835\udc56\ud835\udc5b\ud835\udc54(L, \ud835\udc35) 2: \ud835\udc3a,\ud835\udc49 \u2190 \ud835\udc41\ud835\udc52\ud835\udc61\ud835\udc64\ud835\udc5c\ud835\udc5f\ud835\udc58 \u2212\ud835\udc36\ud835\udc5c\ud835\udc5b\ud835\udc60\ud835\udc61\ud835\udc5f\ud835\udc62\ud835\udc50\ud835\udc61 \u2212 \ud835\udc3b\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5c (L, \ud835\udc46,\ud835\udc64, \ud835\udc35, \ud835\udf03 ) //\ncreate initial network 3: \ud835\udc4f \u2190 [] // most recent basic window 4: while do 5: \ud835\udc4f \u2190 IngestData() 6: if Len(b) == B then 7: \ud835\udc60 \u2190 Stats(\ud835\udc4f) 8: UpdateNetwork(G, V, s) // use Lemma 2 9: \ud835\udc4f \u2190 [] 10: return\ndescribed in \u00a7 2.2 Note that, in our model, the necessary statistics for normalization are collected during the sketch time.\n3.2.1 Historical Data. Recall \ud835\udc51\ud835\udc56 is the distance of the normalized \ud835\udc56-th basic windows, namely \ud835\udc65\ud835\udc56 and \ud835\udc66\ud835\udc56 , \ud835\udc4b\ud835\udc56 and \ud835\udc4c\ud835\udc56 are the DFT of normalized basic windows \ud835\udc65\ud835\udc56 and \ud835\udc66\ud835\udc56 , and \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b\ud835\udc56 , \ud835\udc4c\ud835\udc56 ) is the Euclidean distance of the first \ud835\udc5b DFT coefficients in \ud835\udc4b\ud835\udc56 and \ud835\udc4c\ud835\udc56 . Since DFT preserves the distance between coefficients and the original time-series, we have \ud835\udc51\ud835\udc56 \u2243 \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b\ud835\udc56 , \ud835\udc4c\ud835\udc56 ). To compute the distance of query windows, \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc65,\ud835\udc66), from the distances of basic windows, without any assumption about the form and properties of basic windows in a query window, we can combine the equation of Lemma 1 and Equation 3 as follows.\n1 \u2212 1 2 \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c )2 \u2248\n\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 (\ud835\udf0e\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc66\ud835\udc56 (1 \u2212\n\ud835\udc512\ud835\udc56 2 ) + \ud835\udeff\ud835\udc65\ud835\udc56\ud835\udeff\ud835\udc66\ud835\udc56 )\u221a\ufe03\u2211\ud835\udc5b\ud835\udc60\n\ud835\udc56=1 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ) \u221a\ufe03\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 (\ud835\udf0e\ud835\udc66\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc66\ud835\udc56 )\nWe simplify the equation and obtain an approximation of the distance of two query windows based on the distances of their basic windows.\n\ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c )2 \u2248 2+ \u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 \ud835\udf0e\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc66\ud835\udc56\ud835\udc51\ud835\udc5b (\ud835\udc4b\ud835\udc56 , \ud835\udc4c\ud835\udc56 ) 2 \u2212 2\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 (\ud835\udf0e\ud835\udc65\ud835\udc56\ud835\udf0e\ud835\udc66\ud835\udc56 + \ud835\udeff\ud835\udc65\ud835\udc56\ud835\udeff\ud835\udc66\ud835\udc56 )\u221a\ufe03\u2211\ud835\udc5b\ud835\udc60\n\ud835\udc56=1 (\ud835\udf0e\ud835\udc65\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc65\ud835\udc56 ) \u221a\ufe03\u2211\ud835\udc5b\ud835\udc60 \ud835\udc56=1 (\ud835\udf0e\ud835\udc66\ud835\udc56 2 + \ud835\udeff 2 \ud835\udc66\ud835\udc56 )\n(5) When all DFT coefficients are used, i.e. \ud835\udc5b = \ud835\udc35, the \u2248 becomes =, turning into an exact calculation.\nTo perform all-pair correlation approximation in our framework, we can normalize basic windows and compute their DFT coefficients, and pairwise distances, during the sketch time (lines 8-10 of Algorithm 1). At query time, we use Equation 5 to get \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c ) and apply Equation 3 to obtain the correlation. Algorithm 4 describes the steps of building a network based on the approximation of correlation.\n3.2.2 Real-time Data. Combining Equation 5 and Lemma 2, we can get the incremental update equation for approximating pairwise correlation:\nAlgorithm 4 Network-Approximate\nInput: streams L = {x1, . . . , x\ud835\udc5b}; statistics \ud835\udc46 ; query\ud835\udc64 ; basic window size \ud835\udc35; threshold \ud835\udf03 Output: graph (\ud835\udc3a,\ud835\udc49 ) 1: \ud835\udc3a \u2190 {1, . . . , \ud835\udc5b}; \ud835\udc49 \u2190 {} 2: \ud835\udc4f \u2190 GetBasicWins(\ud835\udc64) // basic window ids in \ud835\udc64 3: for \ud835\udc65,\ud835\udc66 \u2208 L do 4: \ud835\udc46\ud835\udc65 \u2190 ReadStats(\ud835\udc46, \ud835\udc4f, \ud835\udc65); \ud835\udc46\ud835\udc66 \u2190 ReadStats(\ud835\udc46, \ud835\udc4f,\ud835\udc66) 5: \ud835\udc511 . . . \ud835\udc51\ud835\udc5b\ud835\udc60 \u2190 ReadStats(\ud835\udc46, \ud835\udc65,\ud835\udc66) // distance of basic\nwindows 6: if stats of basic windows \u2243 \ud835\udc64 then 7: \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61 \u2190 Average( [\ud835\udc511, . . . , \ud835\udc51\ud835\udc5b\ud835\udc60 ]) 8: else 9: \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61 \u2190 Distance(\ud835\udc46\ud835\udc65 , \ud835\udc46\ud835\udc66, \ud835\udc511 ..\ud835\udc51\ud835\udc5b\ud835\udc60 ) // use Equation 5 10: if \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61 \u2264 \u221a 1 \u2212 \ud835\udf03 then 11: \ud835\udc49 .Add(\ud835\udc65,\ud835\udc66, \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61) 12: return (\ud835\udc3a,\ud835\udc49 )\n2 \u2212 \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc61+\ud835\udc35\ud835\udc5b (\ud835\udc4b,\ud835\udc4c ) \u2248= (when n =b) 1\n\ud835\udc34 . \ud835\udc35\n( \ud835\udc5b\ud835\udc60\ud835\udf0e\ud835\udc65\ud835\udf0e\ud835\udc66\ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61 \ud835\udc61 \ud835\udc5b (\ud835\udc4b,\ud835\udc4c ) + \ud835\udf0e\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udf0e\ud835\udc66\ud835\udc5b\ud835\udc60+1 (1 \u2212 \ud835\udc51\ud835\udc5b\ud835\udc60+1)2\n2 )\n\u2212 \ud835\udf0e\ud835\udc651\ud835\udf0e\ud835\udc661 (1 \u2212 \ud835\udc5121 2 ) \u2212 \ud835\udeff\ud835\udc651\ud835\udeff\ud835\udc661\u2212\ud835\udc5b\ud835\udc60\ud835\udefc\ud835\udc65\ud835\udefc\ud835\udc66+\ud835\udeff\ud835\udc65\ud835\udc5b\ud835\udc60+1\ud835\udeff\ud835\udc66\ud835\udc5b\ud835\udc60+1 ) (6) Here, \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc61+\ud835\udc35\ud835\udc5b (\ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc61\ud835\udc5b (\ud835\udc4b,\ud835\udc4c )) is the DFT Distance of the query window at time \ud835\udc61 + \ud835\udc35 (\ud835\udc61 ) using first \ud835\udc5b coefficients in each basic window. The new distance can be obtained by calculating the pairwise distances for the last basic window \ud835\udc51\ud835\udc5b\ud835\udc60+1."
        },
        {
            "heading": "3.3 Complexity Analysis",
            "text": "In this section, we discuss the complexity analysis of query/sketch time and space overhead of TSUBASA, the DFT-based algorithm, and the baseline algorithm for non-arbitrary query windows. Next, we describe the synergies of time and space with usability. Suppose \ud835\udc41 is the number of time-series and each time-series is in length \ud835\udc3f.\nSpaceComplexityThe space overhead of TSUBASA is\ud835\udf13 = \ud835\udc3f \ud835\udc35 (2+\n\ud835\udc41 (\ud835\udc41\u22121) 2 ), where \ud835\udc35 is the basic window size and \ud835\udc3f \ud835\udc35 is the number of basic windows since we divide a time-series evenly by default. For each basic window of a time-series, TSUBASA stores two values for the mean and the standard deviation. In addition, for aligned basic windows of all pairs of time-series, TSUBASA stores the correlation of each pair of time-series. As a result, the space complexity of TSUBASA is \ud835\udc42 ( \ud835\udc3f\ud835\udc41 2\n\ud835\udc35 ). The DFT-based approximate algorithm stores\nthe mean and the standard deviation for basic windows of each time-series and the distance between the first few DFT coefficients of aligned basic windows of pairs of time-series, thus, has the space complexity of \ud835\udc42 ( \ud835\udc3f\ud835\udc41 2\n\ud835\udc35 ). We remark that this space overhead is in\naddition to the storage of raw time-series for both algorithms if the raw time-series are not discarded after sketching.\nTime complexity The sketch time complexity of TSUBASA is independent of query window size and is\ud835\udc42 (\ud835\udc3f \u00b7 \ud835\udc41 2), since TSUBASA requires calculating statistics over the aligned basic windows of all\npairs of time-series. The sketch time complexity of the approximate algorithm is worse than TSUBASA and is \ud835\udc42 (\ud835\udc3f2 \u00b7 \ud835\udc41 2), since the calculation of DFT coefficients for a time-series of length \ud835\udc3f is \ud835\udc42 (\ud835\udc3f2) and coefficients are required for calculating the distance of aligned basic windows in all pairs of time-series. For a query window size \ud835\udc59\u2217 = \ud835\udc5b\ud835\udc60 \u00b7 \ud835\udc35, both TSUBASA and the approximate algorithm scan all basic windows, therefore, the query time complexity of TSUBASA and the approximate method are both \ud835\udc42 ( \ud835\udc59\u2217\n\ud835\udc35 \u00b7 \ud835\udc41 2). However, the\nbaseline algorithm scans the raw time-series and has the query time complexity of \ud835\udc42 (\ud835\udc59\u2217 \u00b7 \ud835\udc41 2).\nThe query time complexity of real-time TSUBASA is \ud835\udc42 (\ud835\udc35\u2217\ud835\udc41 2), where \ud835\udc35\u2217 is the size of the new coming basic window since TSUBASA needs to compute statistics for the new window. The query time complexity of the real-time approximate algorithm is \ud835\udc42 (\ud835\udc35\u22172\ud835\udc41 2). The query time complexity of real-time baseline algorithm is\ud835\udc42 (\ud835\udc3f\u2217 \u00b7 \ud835\udc41 2), where \ud835\udc3f\u2217 is the size of the query window size.\nUsability Discussion Let \ud835\udc40 be the maximum space capacity available for the storage of time-series sketches. Considering the above space analysis and assuming equal-size basic windows, the minimum basic window size of TSUBASA can be calculated by solving \ud835\udc3f\n\ud835\udc35 (2+ \ud835\udc41 (\ud835\udc41\u22121)2 ) \u2264 \ud835\udc40 . That is, with\ud835\udc40 available storage the maximum basic window size handled by TSUBASA is \ud835\udc3f \ud835\udc40 (2 + \ud835\udc41 (\ud835\udc41\u22121)2 ). Note that both time and space complexity reduce as \ud835\udc35 increases. Moreover, choosing a large \ud835\udc35 means less space capacity requirement. Therefore, should we just choose an extremely large \ud835\udc35? The answer is no. When an arbitrary query window is not supported, a large \ud835\udc35 will reduce the flexibility of query windows, thus, usability. For the case of the query window size being the integral multiple of the basic window size, the chosen query window size by users becomes extremely limited. If we consider the generic case of Lemma 1, we will observe a significant rise in query time, since the start/end of a query window can fall anywhere in a basic window, thus, when basic windows are large, the first and last basic windows can be potentially large. Suppose the query window is in length \ud835\udc59\u2217, where \u2203\ud835\udc5b\ud835\udc60 \u2208 \ud835\udc45, such that \ud835\udc5b\ud835\udc60 \u00b7 \ud835\udc35 \u2264 \ud835\udc59\u2217 < (\ud835\udc5b\ud835\udc60 + 1) \u00b7 \ud835\udc35. The time complexity is\ud835\udc42 (( \ud835\udc59\u2217\n\ud835\udc35 +\ud835\udc35) \u00b7\ud835\udc41 2). When \ud835\udc35 > \u221a \ud835\udc59 , \ud835\udc59 \u2217 \ud835\udc35 +\ud835\udc35 is monotonically\nincreasing. Since \ud835\udc35 > \u221a \ud835\udc59 at the most meaningful queries, the query time increases when the \ud835\udc35 increases for the generic method.\n3.4 Parallel and Disk-based TSUBASA The disk-based TSUBASA stores sketches on the disk to be retrieved at query time for correlation calculation. Moreover, despite the quadratic complexity of the sketch time and query time, TSUBASA is embarrassingly parallelizable. The set of all pairs of time-series can be partitioned into groups that are processed in parallel. During sketching, workers are divided into a database worker, that writes statistics to the database, and computation workers, that perform sketch computation. Each worker sketches time-series pairs of a partition and sends the sketches in batches to the database worker to write to a disk-based database. During the query time, each worker is assigned a partition, reads the sketches of time-series in batches directly from the database and computes the pairwise correlations, and outputs a sub-matrix of the correlation matrix.\nTo leverage data locality and minimize the number I/Os, for partitioning time-series pairs, TSUBASA adopts an approach similar to the parallel block nested loop join. Each partition contains a\nAlgorithm 5 Pruning\nInput: streams L = {x1, . . . , x\ud835\udc41 };threshold \ud835\udf03 Output: Matrix\ud835\udc40 (\ud835\udc5a\ud835\udc56 \ud835\udc57 ) 1: \ud835\udc5a\ud835\udc56 \ud835\udc57 = \u2212\u221e 2: for \ud835\udc56 = 1, 2, \u00b7 \u00b7 \u00b7 , \ud835\udc41 do 3: if \u2203\ud835\udc5d, \ud835\udc5es.t.\ud835\udc5a\ud835\udc5d\ud835\udc5e < 0 then 4: \ud835\udc50\ud835\udc561, \u00b7 \u00b7 \u00b7 , \ud835\udc50\ud835\udc56\ud835\udc41 \u2190 Computecorr(L, \ud835\udc56) 5: for \ud835\udc57 = 1, 2, \u00b7 \u00b7 \u00b7 , \ud835\udc41 do 6: for \ud835\udc58 = 1, 2, \u00b7 \u00b7 \u00b7 , \ud835\udc41 do 7: \ud835\udc3f\ud835\udc57\ud835\udc58 :\ud835\udc56 ,\ud835\udc48 \ud835\udc57\ud835\udc58 :\ud835\udc56 \u2190 Correct-Inference(\ud835\udc50\ud835\udc56 \ud835\udc57 , \ud835\udc50\ud835\udc56\ud835\udc58 ) 8: if \ud835\udc3f\ud835\udc57\ud835\udc58 :\ud835\udc56 \u2265 \ud835\udf03 or\ud835\udc48 \ud835\udc57\ud835\udc58 :\ud835\udc56 \u2264 \u2212\ud835\udf03 then 9: \ud835\udc5a \ud835\udc57\ud835\udc58 \u2190 1 10: if \ud835\udc3f\ud835\udc57\ud835\udc58 :\ud835\udc56 \u2265 \u2212\ud835\udf03 and\ud835\udc48 \ud835\udc57\ud835\udc58 :\ud835\udc56 \u2264 \ud835\udf03 then 11: \ud835\udc5a \ud835\udc57\ud835\udc58 \u2190 0 12: \ud835\udc40 \u2190 Compute-Rest(\ud835\udc40) 13: return\ud835\udc40\nsubset of time-series paired with all time-series. i.e. each partition is a group of rows in a correlation matrix and the processing is done row by row in batches. Batches of pairs are assigned to a worker and once a worker is finished, it reads the statistics of the next batch of pairs from the database. Since Pearson\u2019s correlation is a symmetric measure, TSUBASA needs to process \ud835\udc5b(\ud835\udc5b \u2212 1)/2 pairs to construct the correlation matrix. For load balancing, TSUBASA assigns the same number of pairs to each worker. Note that the same architecture can be used to make the machinery described, in \u00a7 3.2, for correlation approximation."
        },
        {
            "heading": "3.5 Solutions to threshold correlation matrix",
            "text": "Suppose that we know \ud835\udc50\ud835\udc65\ud835\udc67 and \ud835\udc50\ud835\udc66\ud835\udc67 , and we want to infer the range of \ud835\udc50\ud835\udc65\ud835\udc67 . Referring to [? ], we have the upper bound and the lower bound of \ud835\udc50\ud835\udc65\ud835\udc67 :\n\ud835\udc50\ud835\udc65\ud835\udc67\ud835\udc50\ud835\udc66\ud835\udc67 \u2212 \u221a\ufe03 (1 \u2212 \ud835\udc502\ud835\udc65\ud835\udc67) (1 \u2212 \ud835\udc502\ud835\udc66\ud835\udc67) \u2264 \ud835\udc50\ud835\udc65\ud835\udc66 \u2264 \ud835\udc50\ud835\udc65\ud835\udc67\ud835\udc50\ud835\udc66\ud835\udc67 + \u221a\ufe03 (1 \u2212 \ud835\udc502\ud835\udc65\ud835\udc67) (1 \u2212 \ud835\udc502\ud835\udc66\ud835\udc67)\n(7)\nThe equation above provides us a way in predicting the whole correlation matrix based on a small amount of correlations. For example, we are given \ud835\udc41 time series and \ud835\udc5012, \u00b7 \u00b7 \u00b7 , \ud835\udc501\ud835\udc41 . We could make prediction on \ud835\udc50\ud835\udc56 \ud835\udc57 for any 1 \u2264 \ud835\udc56, \ud835\udc57 \u2264 \ud835\udc41 from \ud835\udc501\ud835\udc56 and \ud835\udc501\ud835\udc57 based on Equation 7. For example, given a positive threshold \ud835\udf03 , let\ud835\udc48\ud835\udc65\ud835\udc66:\ud835\udc67 be the upper bound of \ud835\udc50\ud835\udc65\ud835\udc66 estimated from \ud835\udc50\ud835\udc65\ud835\udc67 and \ud835\udc50\ud835\udc66\ud835\udc67 , and \ud835\udc3f\ud835\udc65\ud835\udc66:\ud835\udc67 be the lower bound of \ud835\udc50\ud835\udc65\ud835\udc66 estimated from \ud835\udc50\ud835\udc65\ud835\udc67 and \ud835\udc50\ud835\udc66\ud835\udc67 . If \ud835\udc3f\ud835\udc65\ud835\udc66:\ud835\udc67 \u2265 \ud835\udf03 or \ud835\udc48\ud835\udc65\ud835\udc66:\ud835\udc67 \u2264 \u2212\ud835\udf03 , then we know that\ud835\udc5a\ud835\udc65\ud835\udc66 = 1, where\ud835\udc5a\ud835\udc56 \ud835\udc57 is the \ud835\udc56 th row and \ud835\udc57 th column of the output matrix. If \ud835\udc3f\ud835\udc65\ud835\udc66:\ud835\udc67 \u2265 \u2212\ud835\udf03 and\ud835\udc48\ud835\udc65\ud835\udc66:\ud835\udc67 \u2264 \ud835\udf03 , then we know that\ud835\udc5a\ud835\udc65\ud835\udc66 = 0.\nIn the Figure 4, let the horizontal axis be the \ud835\udc50\ud835\udc65\ud835\udc67 , and the vertical axis be the \ud835\udc50\ud835\udc66\ud835\udc67 . If \ud835\udf03 is given to be 0.8, then the colored regions are the cases that we could know the\ud835\udc5a\ud835\udc65\ud835\udc66 without computing \ud835\udc50\ud835\udc65\ud835\udc66 . In the blue regions, \ud835\udc5a\ud835\udc65\ud835\udc66 = 1, and \ud835\udc5a\ud835\udc65\ud835\udc66 = 0 in the red regions. The white region is the uncertainty part, we would need to change a \ud835\udc67 (anchor) to see whether we could infer/compute further. The algorithm 5 presents how we can use it to prune. We select the anchor randomly (or let every time-series to be the anchor), then if we use the selected anchor to scan the \ud835\udc40 and see which\ud835\udc5a \ud835\udc57\ud835\udc58 we could know by the bounds instead of computing \ud835\udc50 \ud835\udc57\ud835\udc58 ."
        },
        {
            "heading": "4 EXPERIMENTS",
            "text": "We have developed, in this paper, mathematical models and algorithms: Network-Construct-Histo and Network-ConstructRealTime, for constructing and updating correlation matrices to build exact networks on historical and real-time data. Our empirical evaluation has two parts. First, we study these algorithms and compare their query time and sketch time against a baseline, on historical and real-time version of a climate data set. For these experiments, we use the in-memory version of the algorithms, i.e. inmemory data structures are used for storing raw data and sketches. Second, we evaluate the scalability and efficiency of the disk-based and parallel TSUBASA and the approximate algorithm as described in \u00a7 3.4. For all experiments, we assume equal basic window sizes in time-series. All algorithms are implemented using Go language. We use PostgreSQL for storing data sketches. All experiments are conducted on a machine with 2 Intel\u00ae Xeon Gold 5218 @ 2.30GHz (64 cores), 512 GB DDR4 memory, a Samsung\u00ae SSD 983 DCT M.2 (2 TB).\nNCEA Data Set1 is a public data from the National Oceanic and Atmospheric Administration (NOAA). The data is collected every hour, and uploaded publicly in 24-hour increments. NOAA utilizes radiometric satellite collection, buoys, weather stations, citizen scientists, and other methods for perpetual data gathering. The data is collected from 157 nodes (time-series) across the US. Each node produces approximately 8,760 points of data in a year. This data set is used for in-memory experiments.\nBerkeley EarthData Set2 is a collection of open-source data sets provided by an independent U.S. non-profit organization (Berkeley Earth). We use NetCDF-format gridded data from this data set. The climate data includes average temperature data on both lands\n1https://www.ncei.noaa.gov/pub/data/uscrn/products/hourly02/2020/ 2http://berkeleyearth.org/data/\nand oceans. It divides the earth by 1\u25e6 \u00d7 1\u25e6 latitude-longitude grid. We consider the land time-series in this data set. The data set includes 18,638 nodes and each nodes contains 3,652 data points. The time resolution is 24 hours. This data set is used for scalability experiments."
        },
        {
            "heading": "4.1 Accuracy",
            "text": "We compared the accuracy of the climate network of NCEA data set, constructed based on the correlation matrix computed by the DFT-based techniques [25, 37] (as described in \u00a7 ??) and exact calculation, followed by the application of a threshold. The approximate technique [11, 37] uses the first few DFT coefficients for estimating the distance of aligned basic windows, then, basic window distances are aggregated to obtain an approximation of the distance and correlation of time-series on a query window [37]. In our experiments, we use the way, we believe, StatStream [37] computes the distance (correlation) of query windows i.e. by averaging the distance (correlation) of DFT coefficients over all basic windows.\nWe evaluate the impact of approximation on the accuracy of constructed networks, using twomeasures: number of edges and the correlation similarity ratio, inspired by [26]. A correlation matrix is an \ud835\udc5b \u00d7 \ud835\udc5b matrix, where \ud835\udc5b is the number of time-series and a cell \ud835\udc50\ud835\udc56 \ud835\udc57 is a binary value that indicates the correlation score of time-series \ud835\udc65\ud835\udc56 and \ud835\udc65 \ud835\udc57 is higher than threshold \ud835\udf03 . The correlation similarity ratio evaluates the percentage of identical edges in two networks. Formally, given two complex networks represented by adjacency matrices \ud835\udc34 : {\ud835\udc4e\ud835\udc56 \ud835\udc57 | 0 \u2a7d \ud835\udc56, \ud835\udc57 \u2a7d \ud835\udc5b} and \ud835\udc35 : {\ud835\udc4f\ud835\udc56 \ud835\udc57 | 0 \u2a7d \ud835\udc56, \ud835\udc57 \u2a7d \ud835\udc5b}, the similarity ratio is defined as follows.\n\ud835\udc37\ud835\udc5d (\ud835\udc34, \ud835\udc35) = 2 \u2211\ud835\udc5b\u22121 \ud835\udc56=1 \u2211\ud835\udc5b \ud835\udc57=\ud835\udc56+1 1 \u2212 |\ud835\udc4e\ud835\udc56 \ud835\udc57 \u2212 \ud835\udc4f\ud835\udc56 \ud835\udc57 | \ud835\udc5b(\ud835\udc5b \u2212 1)\nFor instance, the correlation similarity ratio of networks with the adjacency matrices \ud835\udc34 and \ud835\udc35 is 2/3.\n\ud835\udc34 = \u00a9\u00ab 1 1 0 1 1 1 0 1 1 \u00aa\u00ae\u00ac \ud835\udc35 = \u00a9\u00ab 1 0 0 0 1 1 0 1 1 \u00aa\u00ae\u00ac \ud835\udc37\ud835\udc5d (\ud835\udc34, \ud835\udc35) = 23 For both techniques we consider the basic window size 200 and threshold 0.75, while varying the number of DFT coefficients from 50 to 200 for the approximate technique. Note that in the exact technique (basic window correlation), the correlation of time-series are computed by aggregating the correlation of basic windows as suggested by [37]. Therefore, the structure of this network (the solid red plot) is independent of the number of DFT coefficients.\nAs shown in Figure 5a, the number of edges in the network constructed by DFT correlation calculation becomes equal to the number of edges in the network constructed by exact calculation, only when all 200 coefficients are used. This matches the theory, i.e. the approximation becomes identical to the exact calculation, when all DFT coefficients are used. Note that the approximate technique uses Equation 4 to find correlated time-series based on their DFT-based distance. Following this rule, the DFT correlation calculation never yields false negatives, but, creates false positive edges. This explains why the number of edges in networks decrease as more coefficients are used. Moreover, the similarity ratio of correlation matrices increases as the number of considered coefficients\nincreases and is at its highest value when all coefficients are used to represent a basic window.\nThe main take-away is that constructing a network based on the approximation of DFT-based distance can lead to inaccurate networks. For climate data sets, near exact result is obtained only when a very large number of coefficients are used for approximation. This means smaller basic windows are preferred for approximation purposes which leads to higher number of basic windows, therefore, higher correlation calculation time in addition to the high DFT coefficient calculation time. These results highlight the necessity of efficient algorithms for constructing and updating exact networks on large collections of time-series."
        },
        {
            "heading": "4.2 Efficiency",
            "text": "We evaluate the efficiency of the in-memory version of correlation matrix calculation algorithms with respect to query window size and basic window size parameters.\nNetworkConstructionWe compare the sketch time plus query time when using the DFT-based approximation of StatStream with TSUBASA\u2019s exact correlations. For the approximation technique, we report on two scenarios: using all DFT coefficients and using 75% of coefficients of a basic window. As shown in \u00a7 4.1, the former empirically yields a network similar to the network of exact correlation calculation. During the sketch time, TSUBASA calculates the statistics from Lemma 1 and the approximation algorithm calculates the statistics necessary for Equation 5 for all basic windows of all time-series. At query time, Lemma 1 and Equation 5 are used to combine sketched statistics to get approximate and exact networks, respectively.\nFigure 5b reports the run time when varying the size of basic window for a query window of size 3,000. The sketch time of TSUBASA grows very gradually with the basic window size, while the sketch time of the approximate algorithm increases with the size of basic window. This is because of the \ud835\udc42 (\ud835\udc5b2) complexity of DFT calculation. Our results show that TSUBASA outperforms the approximation technique at sketch time and its query time is on par with the approximate network construction technique.\nFigure 5c shows the query time of TSUBASA, approximate calculation, and a baseline, when varying the query window size, considering the constant basic window size of 50. The baseline algorithm computes the Pearson\u2019s correlation of Equation 1 for all pairs of time-series directly from raw data at query time without any sketching. In this experiment the approximate algorithm uses 75% of DFT coefficients of a basic window. Note that the distances of basic windows (\ud835\udc51 \ud835\udc57 \u2019s in Equation 5) are calculated during the sketch time, therefore, the query time of the approximate algorithm does not depend on the number of considered DFT coefficients. TSUBASA is almost as fast as the approximate algorithm for all query window sizes and outperforms the baseline by two orders of magnitude. We remark that all algorithms have quadratic complexity in the number of time-series. However, the exact and DFT-based approximation are extremely efficient at computing correlation of each pair at query time due to relying on statistics that are pre-calculated during the sketch time.\nNetwork Update We compare the network update time of TSUBASA with the DFT-based approximation of \u00a7 3.2.2 for real-time\nNCEA data set. The initial networks are constructed on the data set for a given query window. Then, after the arrival of \ud835\udc35 data points, both algorithms update the correlation and network using the special case of Lemma 2 and Equation 6, respectively. Figure 5d shows the time taken by TSUBASA and approximate algorithm upon the arrival of \ud835\udc35 new data points for various basic window sizes for a query window size of 3,000. The approximate algorithm uses 75% of DFT coefficients in a basic window. For both algorithms, updates to the network depend on the statistics of the first basic window of the current query window, which is already calculated, and the most recently observed basic window, which needs to be calculated on the fly. Indeed, the efficiency of update only depends on the processing of the most recently observed basic window. Since the approximation algorithm needs to calculate DFT coefficients we observe that it is slower than TSUBASA at least one order of magnitude. The gap between the two algorithms becomes more obvious for larger basic window sizes because of the \ud835\udc42 (\ud835\udc5b2) complexity of DFT calculation. In conclusion, TSUBASA can compute exact correlation and networks for real-time much faster than the approximation competitor."
        },
        {
            "heading": "4.3 Scalability",
            "text": "We compare TSUBASA and the approximation algorithm in similar parallel and disk-based configurations. To separate the impact of fine-tuning the database on performance, in all experiments, we choose to use one database worker and allocate the rest of workers for sketching and querying. For the scalability experiments, we use subsets of time-series from the Berkeley Earth data set. All experiments consider a basic window length of 120, a query window length of 960, and 75% of DFT coefficients for correlation approximation.\nSketch Time Figure 6a shows the sketch time of TSUBASA and the approximate algorithm for correlation matrix calculation for various number of time-series on 63 partitions and 64 cores. The plot separates the write time from the sketch calculation time. We observe that TSUBASA outperforms the approximate algorithm in sketch time. This is due to quadratic complexity of DFT calculation as opposed the linear complexity of computing TSUBASA sketches. We observe that the majority of work by TSUBASA during sketching is spent on writing sketches to a database, unlike matrix approximation which is on par with the write time. Note that in this configuration the total sketch time of TSUBASA and the approximate algorithm is bounded by database write time. The total sketch time,\nsketch calculation, and write time of TSUBASA and the approximate algorithm increase quadratically with the number of time-series. However, due to parallelization, the growth is slower than what is expected for a single-core configuration.\nQuery Time Figure 6b shows the query time of TSUBASA and the approximate algorithm for correlation matrix calculation for various number of time-series on 63 partitions and 64 cores. The plot separates the database read time from the correlation matrix calculation time. Both TSUBASA and the approximate algorithm have on par query time and take less than a minute for computing the correlation matrix even for the largest number of time-series. We observe that the read time during querying is negligible compared to matrix calculation. The read time percentage is slightly higher for smaller networks due to the database overhead compared to matrix calculation cost on small number of time-series. The total query time, matrix calculation, and read time of TSUBASA and the approximate algorithm increase quadratically with the number of time-series. However, due to parallelization, the growth is slower than what is expected for a single-core configuration.\nImpact of Number of Partitions Figure 6c shows how TSUBASA scales with the number of partitions. For these experiments, we use 2,000 time-series. Note than we have 63 partitions/cores for sketch/matrix computation and we reserve one core for database writes. Both sketch and matrix calculation times decrease with the increase in the number of cores. We expect further optimization of query and sketch time can be done by fine-tuning the database and allocating further resources.\nSpace Overhead Figure 6d shows the size of databases used for storing sketches of 2,000 time-series by TSUBASA and the approximate algorithm with respect to basic window size. Both algorithms store sketches of the the same size for each basic window and have the same space overhead. As the size of basic window increase the number of basic windows decreases and total size of sketches stored by both algorithms decrease."
        },
        {
            "heading": "5 RELATEDWORK",
            "text": "Spatio-Temporal Databases represent the value of a climate variable with three dimensions of geometry and time (i.e. latitude, longitude, and timestamp). Systems such as Microsoft StreamInsight [3], GeoMesa [1], and IBM PAIRS Geoscope [20] are designed for processing streams of geospatial data, from sources such as satellites and IoT sensors, benefiting from relational DBMSs, distributed column-oriented databases, and scalable key-value data\nstores. The algorithms and mathematical models we designed in this paper can be incorporated into geo-spatial systems. We use the progressive and declarative processing of Trill [9] for storage and analysis. TSUBASA can be a stand-alone system with other network analysis extensions for clustering and community detection. Similarity Search on Time-Series To compute the similarity between time-series, several measures have been proposed [24, 30]. In TSUBASA, we consider the Pearson\u2019s correlation coefficient as it is the most commonly used measure for building climate networks [14, 34]. There has been extensive work from database community on similarity search of time-series [6, 15, 24, 31, 37]. This line of work considers threshold queries for similarity search in time-series databases and often involve calculating a function over two or more streams and reporting when the threshold is crossed. Time-series similarity search problems in the community have mostly focused on identifying similar time-series to a query time-series. TSUBASA, however, focuses on the construction of the complete and exact correlation matrix, a task that requires all-pair correlation calculation.\nSketching andData ReductionAlternative techniques to DFT for time-series similarity approximation are DiscreteWavelet Transform (DWT) [10], Singular Value Decomposition [17], and Piecewise Constant Approximation [22]. Data reduction is based on the idea of summarizing the population or sample data through smallersized matrices or simple numbers [18]. As for time-series, it has been a topic of interest that reduces data into low-dimensional data while preserving its characteristics to a large extent [36], which has IoT applications [29]. TSUBASA sketches data into statistics that are required for the efficient and exact calculation of correlation scores and networks.\nData Streaming SystemsMost data streaming systems, including S4 [27], Muppet [21], Spark [35], and Flink [7] are large-scale data processing systems driven by th Reduce programming model. They can work on different kinds of data coming from real-world sensors or IoT devices. The system we used in the experiments, Trill, also has a distributed version called Quill [8]. The distributed design will definitely reduce the latency of data processing, and also increase the throughput in a given time."
        },
        {
            "heading": "6 DISCUSSION AND CONCLUSION",
            "text": "We presented TSUBASA, an efficient and exact correlation matrix calculation algorithm for climate network construction on historical and real-time data. TSUBASA uses the basic-window model to\nsubdivide a query time-window into smaller windows. TSUBASA computes a cheap and simple sketch of basic windows and reuses them at query time for building networks on arbitrary query windows. We describe a way of approximating time-series correlation and compared it with TSUBASA. Experiments show that TSUBASA can compute exact correlation and network faster than DFT-based approximation techniques. The techniques proposed in TSUBASA can be potentially applied to analyzing stock market data [23] as well as biological data [4]. However, our preliminary investigation shows that approximate and partial calculation of pairwise correlations suffices in scenarios such as stock market data [23]. For future work, we plan to extend our problem definition to unaligned time-series, develop a pairwise correlation pruning algorithm based on a threshold, and consider further optimization of the parallel TSUBASA by fine-tuning."
        }
    ],
    "title": "TSUBASA: Climate Network Construction on Historical and Real-Time Data",
    "year": 2022
}