{
    "abstractText": "Interpreting time series models is uniquely challenging because it requires identifying both the location of time series signals that drive model predictions and their matching to an interpretable temporal pattern. While explainers from other modalities can be applied to time series, their inductive biases do not transfer well to the inherently challenging interpretation of time series. We present TIMEX, a time series consistency model for training explainers. TIMEX trains an interpretable surrogate to mimic the behavior of a pretrained time series model. It addresses the issue of model faithfulness by introducing model behavior consistency, a novel formulation that preserves relations in the latent space induced by the pretrained model with relations in the latent space induced by TIMEX. TIMEX provides discrete attribution maps and, unlike existing interpretability methods, it learns a latent space of explanations that can be used in various ways, such as to provide landmarks to visually aggregate similar explanations and easily recognize temporal patterns. We evaluate TIMEX on eight synthetic and real-world datasets and compare its performance against state-of-the-art interpretability methods. We also conduct case studies using physiological time series. Quantitative evaluations demonstrate that TIMEX achieves the highest or second-highest performance in every metric compared to baselines across all datasets. Through case studies, we show that the novel components of TIMEX show potential for training faithful, interpretable models that capture the behavior of pretrained time series models.",
    "authors": [
        {
            "affiliations": [],
            "name": "Owen Queen"
        },
        {
            "affiliations": [],
            "name": "Thomas Hartvigsen"
        }
    ],
    "id": "SP:b9c10426d01ba2b5c3ba0f42511f7373f4675855",
    "references": [
        {
            "authors": [
                "Penghang Yin",
                "Jiancheng Lyu",
                "Shuai Zhang",
                "Stanley Osher",
                "Yingyong Qi",
                "Jack Xin"
            ],
            "title": "Understanding straight-through estimator in training activation quantized neural nets",
            "year": 1903
        },
        {
            "authors": [
                "Pengyu Cheng",
                "Chang Liu",
                "Chunyuan Li",
                "Dinghan Shen",
                "Ricardo Henao",
                "Lawrence Carin"
            ],
            "title": "Straight-through estimator as projected wasserstein gradient flow",
            "year": 1910
        },
        {
            "authors": [
                "Veenu Rani",
                "Syed Tufael Nabi",
                "Munish Kumar",
                "Ajay Mittal",
                "Krishan Kumar"
            ],
            "title": "Selfsupervised learning: A succinct review",
            "venue": "Archives of Computational Methods in Engineering,",
            "year": 2023
        },
        {
            "authors": [
                "Alec Radford",
                "Jong Wook Kim",
                "Chris Hallacy",
                "Aditya Ramesh",
                "Gabriel Goh",
                "Sandhini Agarwal",
                "Girish Sastry",
                "Amanda Askell",
                "Pamela Mishkin",
                "Jack Clark"
            ],
            "title": "Learning transferable visual models from natural language supervision",
            "venue": "In International conference on machine learning,",
            "year": 2021
        },
        {
            "authors": [
                "Ting Chen",
                "Simon Kornblith",
                "Mohammad Norouzi",
                "Geoffrey Hinton"
            ],
            "title": "A simple framework for contrastive learning of visual representations",
            "venue": "In International conference on machine learning,",
            "year": 2020
        },
        {
            "authors": [
                "Kaiming He",
                "Haoqi Fan",
                "Yuxin Wu",
                "Saining Xie",
                "Ross Girshick"
            ],
            "title": "Momentum contrast for unsupervised visual representation learning",
            "venue": "In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition,",
            "year": 2020
        },
        {
            "authors": [
                "Xun Wang",
                "Xintong Han",
                "Weilin Huang",
                "Dengke Dong",
                "Matthew R Scott"
            ],
            "title": "Multi-similarity loss with general pair weighting for deep metric learning",
            "venue": "In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition,",
            "year": 2019
        },
        {
            "authors": [
                "Debidatta Dwibedi",
                "Yusuf Aytar",
                "Jonathan Tompson",
                "Pierre Sermanet",
                "Andrew Zisserman"
            ],
            "title": "Temporal cycle-consistency learning",
            "venue": "In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition,",
            "year": 2019
        },
        {
            "authors": [
                "Vipin Pillai",
                "Soroush Abbasi Koohpayegani",
                "Ashley Ouligian",
                "Dennis Fong",
                "Hamed Pirsiavash"
            ],
            "title": "Consistent explanations by contrastive learning",
            "venue": "In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition,",
            "year": 2022
        },
        {
            "authors": [
                "Tao Han",
                "Wei-Wei Tu",
                "Yu-Feng Li"
            ],
            "title": "Explanation consistency training: Facilitating consistency-based semi-supervised learning with interpretability",
            "venue": "In Proceedings of the AAAI conference on artificial intelligence,",
            "year": 2021
        },
        {
            "authors": [
                "Hao Guo",
                "Kang Zheng",
                "Xiaochuan Fan",
                "Hongkai Yu",
                "Song Wang"
            ],
            "title": "Visual attention consistency under image transforms for multi-label image classification",
            "venue": "In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition,",
            "year": 2019
        },
        {
            "authors": [
                "Matthew Watson",
                "Bashar Awwad Shiekh Hasan",
                "Noura Al Moubayed"
            ],
            "title": "Using model explanations to guide deep learning models towards consistent explanations for ehr data",
            "venue": "Scientific Reports,",
            "year": 2022
        },
        {
            "authors": [
                "Sanjoy Dasgupta",
                "Nave Frost",
                "Michal Moshkovitz"
            ],
            "title": "Framework for evaluating faithfulness of local explanations",
            "venue": "In International Conference on Machine Learning,",
            "year": 2022
        },
        {
            "authors": [
                "Huanlai Xing",
                "Zhiwen Xiao",
                "Dawei Zhan",
                "Shouxi Luo",
                "Penglin Dai",
                "Ke Li"
            ],
            "title": "Selfmatch: Robust semisupervised time-series classification with self-distillation",
            "venue": "International Journal of Intelligent Systems,",
            "year": 2022
        },
        {
            "authors": [
                "Lujun Li",
                "Zhe Jin"
            ],
            "title": "Shadow knowledge distillation: Bridging offline and online knowledge transfer",
            "venue": "Advances in Neural Information Processing Systems,",
            "year": 2022
        },
        {
            "authors": [
                "Defang Chen",
                "Jian-Ping Mei",
                "Hailin Zhang",
                "Can Wang",
                "Yan Feng",
                "Chun Chen"
            ],
            "title": "Knowledge distillation with the reused teacher classifier",
            "venue": "In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition,",
            "year": 2022
        },
        {
            "authors": [
                "Robert Geirhos",
                "J\u00f6rn-Henrik Jacobsen",
                "Claudio Michaelis",
                "Richard Zemel",
                "Wieland Brendel",
                "Matthias Bethge",
                "Felix A. Wichmann"
            ],
            "title": "Shortcut learning in deep neural networks",
            "venue": "Nature Machine Intelligence,",
            "year": 2020
        },
        {
            "authors": [
                "Lukas Faber",
                "Amin K. Moghaddam",
                "Roger Wattenhofer"
            ],
            "title": "When comparing to ground truth is wrong: On evaluating gnn explanation methods",
            "venue": "In Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining,",
            "year": 2021
        },
        {
            "authors": [
                "Mariana Floria",
                "Alexandra Noela Parteni",
                "Ioana Alexandra Neagu",
                "Radu Andy Sascau",
                "Cristian Statescu",
                "Daniela Maria Tanase"
            ],
            "title": "Incomplete right bundle branch block: Challenges in electrocardiogram diagnosis",
            "venue": "Anatolian Journal of Cardiology,",
            "year": 2021
        },
        {
            "authors": [
                "Chirag Agarwal",
                "Eshika Saxena",
                "Satyapriya Krishna",
                "Martin Pawelczyk",
                "Nari Johnson",
                "Isha Puri",
                "Marinka Zitnik",
                "Himabindu Lakkaraju"
            ],
            "title": "Openxai: Towards a transparent evaluation of model explanations",
            "venue": "arXiv preprint arXiv:2206.11104,",
            "year": 2022
        },
        {
            "authors": [
                "Narine Kokhlikyan",
                "Vivek Miglani",
                "Miguel Martin",
                "Edward Wang",
                "Bilal Alsallakh",
                "Jonathan Reynolds",
                "Alexander Melnikov",
                "Natalia Kliushkina",
                "Carlos Araya",
                "Siqi Yan",
                "Orion ReblitzRichardson"
            ],
            "title": "Captum: A unified and generic model interpretability library for pytorch, 2020",
            "year": 2020
        },
        {
            "authors": [
                "Xiang Zhang",
                "Marko Zeman",
                "Theodoros Tsiligkaridis",
                "Marinka Zitnik"
            ],
            "title": "Graph-guided network for irregularly sampled multivariate time series",
            "venue": "In International Conference on Learning Representations,",
            "year": 2022
        },
        {
            "authors": [
                "Haoyi Zhou",
                "Shanghang Zhang",
                "Jieqi Peng",
                "Shuai Zhang",
                "Jianxin Li",
                "Hui Xiong",
                "Wancai Zhang"
            ],
            "title": "Informer: Beyond efficient transformer for long sequence time-series forecasting",
            "venue": "In Proceedings of the AAAI conference on artificial intelligence,",
            "year": 2021
        },
        {
            "authors": [
                "Meinard M\u00fcller"
            ],
            "title": "Dynamic time warping. Information retrieval for music and motion, pages",
            "year": 2007
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "Prevailing time series models are high-capacity pre-trained neural networks [1, 2], which are often seen as black boxes due to their internal complexity and lack of interpretability [3]. However, practical use requires techniques for auditing and interrogating these models to rationalize their predictions. Interpreting time series models poses a distinct set of challenges due to the need to achieve two goals: pinpointing the specific location of time series signals that influence the model\u2019s predictions and aligning those signals with interpretable temporal patterns [4]. While explainers designed for other modalities can be adapted to time series, their inherent biases can miss important structures in time series, and their reliance on isolated visual interpretability does not translate effectively to\n37th Conference on Neural Information Processing Systems (NeurIPS 2023).\nar X\niv :2\n30 6.\n02 10\n9v 2\n[ cs\n.L G\nthe time series where data are less immediately interpretable. The dynamic nature and multi-scale dependencies within time series data require temporal interpretability techniques.\nResearch in model understanding and interpretability developed post-hoc explainers that treat pretrained models as black boxes and do not need access to internal model parameters, activations, and gradients. Recent research, however, shows that such post-hoc methods suffer from a lack of faithfulness and stability, among other issues [5, 6, 7]. A model can also be understood by investigating what parts of the input it attends to through attention mapping [8, 9, 10] and measuring the impact of modifying individual computational steps within a model [11, 12]. Another major line of inquiry investigates internal mechanisms by asking what information the model contains [13, 14, 15]. For example, it has been found that even when a language model is conditioned to output falsehoods, it may include a hidden state that represents the true answer internally [16]. The gap between external failure modes and internal states can only be identified by probing model internals. Such representation\nprobing has been used to characterize the behaviors of language models, but leveraging these strategies to understand time series models has yet to be attempted. These lines of inquiry drive the development of in-hoc explainers [17, 18, 19, 20, 21, 22] that build inherent interpretability into the model through architectural modifications [18, 19, 23, 20, 21] or regularization [17, 22]. However, no in-hoc explainers have been developed for time series data. While explainers designed for other modalities can be adapted to time series, their inherent biases do not translate effectively to the uninterpretable nature of time series data. They can miss important structures in time series.\nExplaining time series models is challenging for many reasons. First, unlike imaging or text datasets, large time series data are not visually interpretable. Next, time series often exhibit dense informative features, unlike more explored modalities such as imaging, where informative features are often sparse. In time series datasets, timestep-to-timestep transitions can be negligible, and temporal patterns only show up when looking at time segments and long-term trends. In contrast, in language datasets, word-to-word transitions are informative for language modeling and understanding. Further, time series interpretability involves understanding the dynamics of the model and identifying trends or patterns. Another critical issue with applying prior methods is that they treat all time steps as separate features, ignoring potential time dependencies and contextual information; we need explanations that are temporally connected and visually digestible. While understanding predictions of individual samples is valuable, the ability to establish connections between explanations of various samples (for example, in an appropriate latent space) could help alleviate these challenges. Present work. We present TIMEX, a novel time series surrogate explainer that produces interpretable attribution masks as explanations over time series inputs (Figure 1). 1\u20dd A key contribution of TIMEX is the introduction of model behavior consistency, a novel formulation that ensures the preservation of relationships in the latent space induced by the pretrained model, as well as the latent space induced by TIMEX. 2\u20dd In addition to achieving model behavior consistency, TIMEX offers interpretable attribution maps, which are valuable tools for interpreting the model\u2019s predictions, generated using discrete straight-through estimators (STEs), a type of gradient estimator that enables end-to-end training of TIMEX models. 3\u20dd Unlike existing interpretability methods, TIMEX goes further by learning a latent space of explanations. By incorporating model behavior consistency and leveraging a latent space of explanations, TIMEX provides discrete attribution maps and enables visual aggregation of similar explanations and the recognition of temporal patterns. 4\u20ddWe test our approach on eight synthetic and real-world time series datasets, including datasets with carefully processed ground-truth explanations to quantitatively benchmark it and compare it to general explainers, state-of-the-art time series explainers, and in-hoc explainers. TIMEX is at https://github.com/mims-harvard/ TimeX"
        },
        {
            "heading": "2 Related work",
            "text": "Model understanding and interpretability. As deep learning models grow in size and complexity, so does the need to help users understand the model\u2019s behavior. The vast majority of explainable AI research (XAI) [24] has focused on natural language processing (NLP) [25, 26, 27] and computer vision (CV) [28, 29, 30]. Commonly used techniques, such as Integrated Gradients [31] and Shapley Additive Explanations (SHAP) [3], and their variants have originated from these domains and gained popularity. XAI has gained significant interest in NLP and CV due to the inherent interpretability of the data. However, this familiarity can introduce confirmation bias [32]. Recent research has expanded to other data modalities, including graphs [33, 6] and time series [34, 35], as outlined below. The literature primarily focuses on post-hoc explainability, where explanations are provided for a trained and frozen model\u2019s behavior [36, 37]. However, saliency maps, a popular approach [38, 31, 39], have pitfalls when generated post-hoc: they are surprisingly fragile [5], and lack sensitivity to their explained models [40]. Surrogate-based approaches have also been proposed [41, 42, 43], but these simplified surrogate models fall short compared to the original predictor they aim to explain. Unlike post-hoc explainability, in-hoc methods aim for inherently interpretable models. This can be accomplished by modifying the model\u2019s architecture [20], training procedure using jointly-trained explainers [44], adversarial training [45, 46, 47, 48], regularization techniques [17, 22], or refactorization of the latent space [49, 50]. However, such models often struggle to achieve state-of-the-art predictive performance, and to date, these methods have seen limited use for time series. Beyond instance-based explanations. Several methods have been proposed to provide users with information on model behavior beyond generating instance-based saliency maps explaining individual predictions. Prototype models strive to offer a representative sample or region in the latent space [51, 52]. Such methods are inherently interpretable, as predictions are directly tied to patterns in the feature space. Further, explainability through human-interpretable exemplars has been gaining popularity. Concept-based methods decompose model predictions into human-interpretable concepts. Many works rely on annotated datasets with hand-picked concepts (e.g., \u201cstripes\u201d in an image of a zebra). Relying on access to a priori defined concepts, concept bottleneck models learn a layer that attributes each neuron to one concept [23]. This limitation has spurred research in concept discovery by composing existing concepts [53, 54] or grounding detected objects to natural language [55]. However, the CV focus of these approaches limits their applicability to other domains like time series. Time series explainability. In contrast to other modalities, time series often have multiple variables, and their discriminative information is spread over many timesteps. Building on these challenges, recent works have begun exploring XAI for time series [56, 57, 58, 59, 60, 61, 34, 62]. Many methods modify saliency maps [35, 63, 58] or surrogate methods [59, 64] to work with time series data. Two representative methods are WinIT [65] and Dynamask [58]. WinIT learns saliency maps with temporal feature importances, while Dynamask regularizes saliency maps to include temporal smoothing. However, these methods rely on perturbing timesteps [63], causing them to lack faithfulness. Common perturbation choices in CV, like masking with zeros, make less sense for time series [56]. Perturbed time series may be out-of-distribution for the model due to shifts in shape [66], resulting in unfaithful explanations akin to adversarial perturbation [67]."
        },
        {
            "heading": "3 Problem formulation",
            "text": "Notation. Given is a time series dataset D = (X ,Y) = {(xi, yi)|i = 1, ..., N} where xi are input samples and yi are labels associated to each sample. Each sample xi \u2208 RT\u00d7d is said to have T time steps and d sensors. A feature is defined as a time-sensor pair, where the time t and sensor k for input xi is xi[t, k]. Without loss of generality, we consider univariate (d = 1) and multivariate (d > 1) settings. Each yi \u2208 {1, 2, ..., C} belongs to one of C classes. A classifier model consists of an encoder G and predictor F . The encoder G produces an embedding of input xi, i.e., G(xi) = zi \u2208 Rdz , while the predictor produces some prediction from the embedding in the form of a logit, i.e., F (G(xi)) = y\u0302i \u2208 [0, 1]C where argmaxj y\u0302i[j] \u2208 {1, ..., C} is the predicted label.\nThe latent space induced by G is defined as Z, e.g., G : X \u2192 Z. We will refer to F (G(\u00b7)) as the reference model while G is the reference encoder and F is the reference predictor. An explanation is defined as a continuous map of the features that conveys the relative importance of each feature for the prediction. The explanation for sample xi is given as an attribution map E(xi) \u2208 RT\u00d7d where for any times t1, t2 and sensors k1, k2, E(xi[t1, k1]) > E(xi[t2, k2]) implies that xi[t1, k1] is a more\nimportant feature for the task than xi[t2, k2]. Finally, we define an occlusion procedure whereby a function \u2126 generates an mask Mx for a sample x from the explanation E(x), e.g., \u2126(E(x)) = Mx. This mask is applied to x to derive a masked version of the input xm through an operation \u2299, e.g., Mx \u2299 x = xm. When describing TIMEX, we generally refer to \u2299 as an element-wise multiplication."
        },
        {
            "heading": "3.1 Self-supervised model behavior consistency",
            "text": "TIMEX creates an inherently-interpretable surrogate model for pretrained time series models. The surrogate model produces explanations by optimizing two main objectives: interpretability and faithfulness to model behavior. First, TIMEX generates interpretable explanations via an attribution map E(xi) that identifies succinct, connected regions of input important for the prediction. To ensure faithfulness to the reference model, we introduce a novel objective for training TIMEX: model behavior consistency (MBC). With MBC, a TIMEX model learns to mimic internal layers and predictions of the reference model, yielding a high-fidelity time series explainer. MBC is defined as:\nDefinition 3.1 (Model Behavior Consistency (MBC)). Explanation E and explanation encoder GE are consistent with pretrained model G and predictor F on dataset D if the following is satisfied: \u2022 Consistent reference encoder: Relationship between zi = G(xi) and zj = G(xj) in the space of\nreference encoder is preserved by the explainer, zEi = G E(xmi ) and z E j = G E(xmj ), where x m i = \u2126(E(xi))\u2299 xi and xmj = \u2126(E(xj))\u2299 xj , through distance functions on the reference encoder\u2019s and explainer\u2019s latent spaces DZ and DZE , respectively, such that: DZ(zi, zj) \u2243 DZE (zEi , zEj ) for samples xi,xj \u2208 D. \u2022 Consistent reference predictor: Relationship between reference predictor y\u0302i = F (zi) and latent explanation predictor y\u0302Ei = F E(zEi ) is preserved, y\u0302i \u2243 y\u0302Ei for every sample xi \u2208 D.\nOur central formulation is defined as realizing the MBC between a reference model and an interpretable TIMEX model:\nProblem statement 3.1 (TIMEX). Given pretrained time series encoder G and predictor F that are trained on a time series dataset D, TIMEX provides explanations E(xi) for every sample xi \u2208 D in the form of interpretable attribution maps. These explanations satisfy model behavior consistency through the latent space of explanations ZE generated by the explanation encoder GE .\nTIMEX is designed to counter several challenges in interpreting time series models. First, TIMEX avoids the pitfall known as the occlusion problem [68]. Occlusion occurs when some features in an input xi are perturbed in an effort that the predictor forgets those features. Since it is well-known that occlusion can produce out-of-distribution samples [69], this can cause unpredictable shifts in the behavior of a fixed, pretrained model [70, 71, 72]. In contrast, TIMEX avoids directly masking input samples to G. TIMEX trains an interpretable surrogate GE to match the behavior of G. Second, MBC is designed to improve the faithfulness of TIMEX to G. By learning to mimic multiple states of F (G(\u00b7)) using the MBC objective, TIMEX learns highly-faithful explanations, unlike many post hoc explainers that provide no explicit optimization of faithfulness. Finally, TIMEX\u2019s explanations are driven by learning a latent explanation space, offering richer interpretability data."
        },
        {
            "heading": "4 TIMEX method",
            "text": "We now present TIMEX, an approach to train an interpretable surrogate model to provide explanations for a pretrained time series model. TIMEX learns explanations through a consistency learning objective where an explanation generator HE and explanation encoder GE are trained to match intermediate feature spaces and the predicted label space. We will break down TIMEX in the following sections by components: HE , the explanation generator, GE , the explanation encoder, and the training objective of GE(HE(\u00b7)), followed by a discussion of practical considerations of TIMEX. An overview of TIMEX is depicted in Figure 2."
        },
        {
            "heading": "4.1 Explanation generation",
            "text": "Generating an explanation involves producing an explanation map E(x) where if E(x[t1, k1]) > E(x[t2, k2]), then feature x[t1, k1] is considered as more important for the prediction than x[t2, k2]. Explanation generation is performed through an explanation generator HE : X \u2192 [0, 1]T\u00d7d, where HE(x) = p. We learn p based on a procedure proposed by [50], but we adapt their procedure for time series. Intuitively, p parameterizes a Bernoulli at each time-sensor pair, and the mask MX is sampled from this Bernoulli distribution during training, i.e., MX \u223c Pp(MX |X ) = \u220f t,k Bern(pt,k). This parameterization is directly interpretable as attribution scores: a low pt,k means that time-sensor pair (t, k) has a low probability of being masked-in. Thus, p is also the explanation for xi, i.e., E(x) = p.\nThe generation of p is regularized through a divergence with Bernoulli distributions Bern(r), where r is a user-chosen hyperparameter. As in [50], denote the desired distribution of p as Q(MX ) =\u220f\n(t,k) Bern(r). Then the objective becomes:\nLm(p) = E[DKL(Pp(MX |X )||Q(MX ))] = \u2211 t,k pt,k log pt,k r + (1\u2212 pt,k) log 1\u2212 pt,k 1\u2212 r (1)\nThe sampling of MX \u223c Pp(MX |X ) is performed via the Gumbel-Softmax trick [73, 74], which is a differentiable approximation of categorical sampling. Importantly, MX is stochastically generated, which, as discussed in [50, 75], regularizes the model to learn robust explanations.\nTo generate interpretable attribution masks, TIMEX optimizes for the connectedness of predicted distributions:\nLcon(p) = 1\nT \u00d7 d d\u2211 k=1 T\u22121\u2211 t=1 \u221a (pt,k \u2212 pt+1,k)2. (2)\nThe generator of explanations HE learns directly on input time series samples X to return p. We build a transformer encoder-decoder structure for HE , using an autoregressive transformer decoder and a sigmoid activation to output probabilities for each time-sensor pair."
        },
        {
            "heading": "4.2 Explanation encoding",
            "text": "We now describe how to embed explanations with the explanation encoder GE . Intuitively, GE learns on the masked distribution of X , which can be denoted as Xm. Motivated by the occlusion problem, we avoid directly applying the masks onto the pretrained, frozen G, as Xm and X are fundamentally different distributions. Therefore, we copy the weights of G into GE and fine-tune GE on Xm. Discretizing attribution masks. When passing inputs to GE , it is important for the end-to-end optimization to completely ignore regions identified as unimportant by HE . Therefore, we use a straight-through estimator (STE) [73] to obtain a discrete mask MX \u2208 {0, 1}T\u00d7d. Introduced by [76], STEs utilize a surrogate function to approximate the gradient of a non-differentiable operation used in the forward pass, such as binary thresholding. Applying masks to time series samples. We use two types of masking procedures: attention masking and direct-value masking. First, we employ differentiable attention masking through a multiplicative operation proposed by Nguyen et al. [77]. When attention masking does not apply, we use a direct-value masking procedure based on architecture choice or multivariate inputs. We approximate a baseline distribution: BX = \u220f t,kN (\u00b5tk, \u03c32tk), where \u00b5tk and \u03c32tk are the mean and\nvariance over time-sensor pairs. Masking is then performed through a multiplicative replacement as: xmi = (MX \u2299 xi) + (1\u2212MX )\u2299 b, where b \u223c BX . Justification for discrete masking. It is essential that masks MX are discrete instead of continuous. Previous works have considered masking techniques [78, 49, 50] with continuous masks since applying such masks is differentiable with element-wise multiplication. However, continuous masking has a distinctly different interpretation: it uses a continuous deformation of the input towards a baseline value. While such an approach is reasonable for data modalities with discrete structures, such as sequences of tokens (as in [78, 49]) or nodes in graphs [50], such deformation may result in a change of the shape of time series data, which is known to be important for prediction [66]. As a toy example, consider an input time series xi where the predictive pattern is driven by feature xi[t1, k1] is larger than all other features. Suppose MX is continuous. In that case, it is possible that for a less important feature xi[t2, k2], MX [t1, k1] < MX [t2, k2] while (MX [t1, k1]\u2299 xi[t1, k1]) > (MX [t2, k2] \u2299 xi[t2, k2]), thereby preserving the predictive pattern. At the same time, the mask indicates that xi[t2, k2] is more important than xi[t1, k1]. If a surrogate model is trained on MX \u2299xi, MX may violate the ordinality expected by an attribution map as defined in Section 3. Discrete masking alleviates this issue by forcing MX to be binary, removing the possibility of confounds created by continuous masking. Therefore, discrete masking is necessary when learning interpretable masks on continuous time series."
        },
        {
            "heading": "4.3 Model behavior consistency",
            "text": "The challenge lies in training GE(HE(\u00b7)) to faithfully represent F (G(\u00b7)). We approach this by considering the latent spaces of G and GE . If G considers xi and xj to be similar in Z, we expect that a faithful GE would encode xmi and x m j similarly. However, directly aligning G and G\nE is not optimal due to potential differences in the geometry of the explanation embedding space compared to the full input latent space. To address this, we introduce model behavior consistency (MBC). This novel self-supervised objective trains the explainer model to mimic the behavior of the original model without strict alignment between the spaces. Denote the latent space induced by G and GE as Z and ZE , respectively. The MBC objective is thus defined as:\nLMBC(Z,ZE) = 1\nN2 \u2211 zi,zj\u2208Z \u2211 zEi ,z E j \u2208ZE (DZ(zi, zj)\u2212DZE (zEi , zEj ))2, (3)\nwhere DZ and DZE are distance functions on the reference model\u2019s latent space and the explanation encoder\u2019s latent space, respectively, and N is the size of the minibatch, thereby making N2 equal to the number of pairs on which LMBC is optimized. This objective encourages distances to be similar across both spaces, encouraging ZE to retain a similar local topology to Z without performing a direct alignment. This is closely related to cycle-consistency loss, specifically cross-modal cycleconsistency loss as [79]. We use cosine similarity for DZ and DZE throughout experiments in this study, but any distance can be defined on each respective space.\nIn addition to MBC, we use a label consistency (LC) objective to optimize TIMEX. We train a predictor FE on ZE to output logits consistent with those output by F . We use a Jensen-Shannon Divergence (DJS) between the logits of both predictors:\nLLC(Z,ZE) = \u2211\nzi,zj\u2208Z \u2211 zEi ,z E j \u2208ZE ( DJS(F (zi)||F (zj))\u2212DJS(FE(zEi )||FE(zEj )) )2 (4)\nOur total loss function on ZE can then be defined as a combination of losses: LZE = LMBC+\u03bbLCLLC. Consistency learning justification. MBC offers three critical benefits for explainability. 1\u20ddMBC enables consistency optimization across two latent spaces Z and ZE without requiring that both xi and xmi be encoded by the same model, allowing the learning of E on a separate model F\nE(GE(\u00b7)) \u0338= F (G(\u00b7)). This avoids the out-of-distribution problems induced by directly masking inputs to G. 2\u20dd MBC comprehensively represents model behavior for explainer optimization. This is in contrast to perturbation explanations [38, 80, 58] which seek a label-preserving perturbation P on F (G(\u00b7)) where F (G(P (xi))) \u2248 F (G(xi)). By using G(xi) and F (G(xi)) to capture the behavior of the reference model, MBC\u2019s objective is richer than a simple label-preserving objective. 3\u20dd While MBC is stronger than label matching alone, it is more flexible than direct alignment. An alignment objective, which enforces zi \u2248 zEi , inhibits GE from learning important features of explanations not\nrepresented in Z. The nuance and novelty of MBC are in learning a latent space that is faithful to model behavior while being flexible enough to encode rich relational structure about explanations that can be exploited to learn additional features such as landmark explanations. Further discussion of the utility of MBC is in Appendix B."
        },
        {
            "heading": "4.4 Learning explanation landmarks and training TIMEX models",
            "text": "Leveraging the latent space, TIMEX generates landmark explanations zL \u2208 Rdz . Such landmarks are desirable as they allow users to compare similar explanation patterns across samples used by the predictor. Landmarks are learned by a landmark consistency loss, and their optimization is detached from the gradients of the explanations so as not to harm explanation quality. Denote the landmark matrix as L \u2208 RnL\u00d7dz where nL corresponds to the number of landmarks (a user-chosen value) and dz is the dimensionality of ZE . For each sample explanation embedding zEi , we use Gumbel-Softmax STE (GS) to stochastically match zEi to the nearest landmark in the embedding space. Denote the vector of similarities to each zEi as s(z E i ,L). Then the assimilation A is described as:\nA(zEi ;L) = GS(softmax(s(sg(z E i ),L)))L, (5)\nwhere sg denotes the stop-grad function. The objective for learning landmarks is then LMBC(Z,A(ZE ;L)), optimizing the consistency between the assimilated prototypes and the reference model\u2019s latent space. Landmarks are initialized as a random sample of explanation embeddings from ZE and are updated via gradient descent. After learning landmarks, we can measure the quality of each landmark by the number of zEi embeddings closest to it in latent space. We filter out any landmarks not sufficiently close to any samples (described in Appendix B). TIMEX training. The overall loss function for TIMEX has four components: L = LMBC +\u03bbLCLLC + \u03bbE(Lm + \u03bbconLcon), where \u03bbLC, \u03bbE , \u03bbcon \u2208 R are weights for the label consistency loss, total explanation loss, and connective explanation loss, respectively. TIMEX can be optimized end-to-end, requiring little hyperparameter choices from the user. The user must also choose the r parameter for the explanation regularization. Explanation performance is stable across choices of r (as found in [50]), so we set r = 0.5 to remain consistent throughout experiments. A lower r value may be provided if the underlying predictive signal is sparse; this hyperparameter is analyzed in Appendix C.3. In total, TIMEX optimizes HE , GE , and FE ."
        },
        {
            "heading": "5 Experimental setup",
            "text": "Datasets. We design four synthetic datasets with known ground-truth explanations: FreqShapes, SeqComb-UV, SeqComb-MV, and LowVar. Datasets are designed to capture diverse temporal dynamics in both univariate and multivariate settings. We employ four datasets from real-world time series classification tasks: ECG [81] - ECG arrhythmia detection; PAM [82] - human activity recognition; Epilepsy [83] - EEG seizure detection; and Boiler [84] - mechanical fault detection. We define ground-truth explanations for ECG as QRS intervals based on known regions of ECG signals where arrhythmias can be detected. The R, P, and T wave intervals are extracted following [85]. Dataset details are given in Appendix C.1 and C.4. Baselines. We evaluate the method against five explainability baselines. As a general explainer, we use integrated gradients (IG) [31]; for recent time series-specific explainers, we use Dynamask [58], and WinIT [86]; for an explainer that uses contrastive learning, we use CoRTX [87]; and for an in-hoc explainer which has been demonstrated for time series, we use SGT + Grad [17]. Evaluation. We consider two approaches. Ground-truth explanations: Generated explanations are compared to ground-truth explanations, i.e., known predictive signals in each input time series sample when interpreting a strong predictor, following established setups [6]. We use the area under precision (AUP) and area under recall (AUR) curves to evaluate the quality of explanations [58]. We also use the explanation AUPRC, which combines the results of AUP and AUR. For all metrics, higher values are better. Definitions of metrics are in Appendix C.4. Feature importance under occlusion: We occlude the bottom p-percentile of features as identified by the explainer and measure the change in prediction AUROC (Sec. 4.2). The most essential features a strong explainer identifies should retain prediction performance under occlusion when p is high. To control for potential misinterpretations, we include a random explainer reference. Our experiments use transformers [88] with time-based positional encoding. Hyperparameters and compute details are given in Appendix C."
        },
        {
            "heading": "6 Results",
            "text": ""
        },
        {
            "heading": "R1: Comparison to existing methods on synthetic and real-world datasets.",
            "text": "Synthetic datasets. We compare TIMEX to existing explainers based on how well they can identify essential signals in time series datasets. Tables 1-2 show results for univariate and multivariate datasets, respectively. Across univariate and multivariate settings, TIMEX is the best explainer on 10/12 (3 metrics in 4 datasets) with an average improvement in the explanation AUPRC (10.01%), AUP (6.01%), and AUR (3.35%) over the strongest baselines. Specifically, TIMEX improves groundtruth explanation in terms of AUP by 3.07% on FreqShapes, 6.3% on SeqComb-UV, 8.43% on SeqComb-MV, and 6.24% on LowVar over the strongest baseline on each dataset. In all of these settings, AUR is less critical than AUP since the predictive signals have redundant information. TIMEX achieves high AUR because it is optimized to output smooth masks over time, tending to include larger portions of entire subsequence patterns than sparse portions, which is relevant for human interpretation. To visualize this property, we show TIMEX\u2019s explanations in Appendix C.5. Real-world datasets: arrhythmia detection. We demonstrate TIMEX on ECG arrhythmia detection. TIMEX\u2019s attribution maps show a state-of-the-art performance for finding relevant QRS intervals driving the arrhythmia diagnosis and outperform the strongest baseline by 5.39% (AUPRC) and 9.83% (AUR) (Table 3). Integrated gradients achieve a slightly higher AUP, whereas state-of-the-art time series explainers perform poorly. Notably, TIMEX\u2019s explanations are significantly better in AUR, identifying larger segments of the QRS interval rather than individual timesteps. Ablation study on ECG data. We conduct ablations on the ECG data using TIMEX (Table 3). First, we show that the STE improves performance as opposed to soft attention masking, resulting in an AUPRC performance gain of 9.44%; this validates our claims about the pitfalls of soft masking for time series. Note that this drop in performance becomes more significant when including direct-value masking, as shown in Appendix C.6. Second, we use SimCLR loss to align ZE to Z as opposed to MBC; SimCLR loss can achieve comparable results in AUPRC and AUR, but the AUP is 13.6% lower than the base TIMEX. Third, we experiment with the usefulness of MBC and LC objectives. MBC alone produces poor explanations with AUPRC at 65.8% lower score than the base model. LC alone does better than MBC alone, but its AUPRC is still 21.5% lower than the base model. MBC and LC, in conjunction, produce high-quality explanations, showing the value in including more intermediate states for optimizing GE(HE(\u00b7)). Extensive ablations are provided in Appendix C.6."
        },
        {
            "heading": "R2: Occlusion experiments on real-world datasets.",
            "text": "We evaluate TIMEX explanations by occluding important features from the reference model and observing changes in classification [63, 58, 87]. Given a generated explanation E(xi), the bottom p-percentile of features are occluded; we expect that if the explainer identifies important features for the model\u2019s prediction, then the classification performance to drop significantly when replacing these important features (determined by the explainer) with baseline values. We compare the performance under occlusion to random explanations to counter misinterpretation (Sec. 3.1). We adopt the masking\nprocedure described in Sec. 4.2, performing attention masking where applicable and direct-value masking otherwise.\nFigure 3 compares TIMEX to Dynamask, a strong time-series explainer. On all datasets, TIMEX\u2019s explanations are either at or above the performance of Dynamask, and both methods perform above the random baseline. On the Boiler dataset, we demonstrate an average of 27.8% better classification AUROC across each threshold than Dynamask, with up to 37.4% better AUROC at the 0.75 threshold. This gap in performance between TIMEX and Dynamask is likely because the underlying predictor for Boiler is weaker than that of Epilepsy or PAM, achieving 0.834 AUROC compared to 0.979 for PAM and 0.939 for Epilepsy. We hypothesize that TIMEX outperforms Dynamask because it only considers changes in predicted labels under perturbation while TIMEX optimizes for consistency across both labels and embedding spaces in the surrogate and reference models. TIMEX performs well across both univariate (Epilepsy) and multivariate (PAM and Boiler) datasets."
        },
        {
            "heading": "R3: Landmark explanation analysis on ECG.",
            "text": "To demonstrate TIMEX\u2019s landmarks, we show how landmarks serve as summaries of diverse patterns in an ECG dataset. Figure 4 visualizes the learned landmarks in the latent space of explanations. We choose four representative landmarks based on the previously described landmark ranking strategy (Sec. 4.4). Every landmark occupies different regions of the latent space, capturing diverse types of explanations generated by the model. We show the three nearest explanations for the top two landmarks regarding the nearest neighbor in the latent space. Explanations 1\u20dd, 2\u20dd, and 3\u20dd are all similar to each other while distinctly different from 4\u20dd, 5\u20dd, and 6\u20dd, both in terms of attribution and temporal structure. This visualization shows how landmarks can partition the latent space of explanations into interpretable temporal patterns. We demonstrate the high quality of learned landmark explanations through a quantitative experiment in Appendix C.10. Additional experiments demonstrating flexibility of TIMEX.\nIn the Appendix, we present several additional experiments to demonstrate the flexibility and superiority of TIMEX. In Appendix C.8, we replicate experiments on two other time series architectures, LSTM and CNN, and show that TIMEX retains state-of-the-art performance. In Appendix C.9, we demonstrate the performance of TIMEX in multiple task settings, including forecasting and irregularly-sampled time series classification. TIMEX can be adapted to these settings with minimal effort and retains excellent explanation performance."
        },
        {
            "heading": "7 Conclusion",
            "text": "We develop TIMEX, an interpretable surrogate model for interpreting time series models. By introducing the novel concept of model behavior consistency (i.e., preserving relations in the latent space induced by the pretrained model when compared to relations in the latent space induced by the explainer), we ensure that TIMEX mimics the behavior of a pretrained time series model, aligning\ninfluential time series signals with interpretable temporal patterns. The generation of attribution maps and utilizing a latent space of explanations distinguish TIMEX from existing methods. Results on synthetic and real-world datasets and case studies involving physiological time series demonstrate the superior performance of TIMEX compared to state-of-the-art interpretability methods. TIMEX\u2019s innovative components offer promising potential for training interpretable models that capture the behavior of pretrained time series models. Limitations. While TIMEX is not limited to a specific task as an explainer, our experiments focus on time series classification. TIMEX can explain other downstream tasks, assuming we can access the latent pretrained space, meaning it could be used to examine general pretrained models for time series. Appendix C.9 gives experiments on various setups. However, the lack of such pretrained time series models and datasets with reliable ground-truth explanations restricted our testing in this area. One limitation of our approach is its parameter efficiency due to the separate optimization of the explanation-tuned model. However, we conduct a runtime efficiency test in Appendix C.7 that shows TIMEX has comparable runtimes to baseline explainers. Larger models may require adopting parameter-efficient tuning strategies. Societal impacts. Time series data pervades critical domains including finance, healthcare, energy, and transportation. Enhancing the interpretability of neural networks within these areas has the potential to significantly strengthen decision-making processes and foster greater trust. While explainability plays a crucial role in uncovering systemic biases, thus paving the way for fairer and more inclusive systems, it is vital to approach these systems with caution. The risks of misinterpretations or an over-reliance on automated insights are real and substantial. This underscores the need for a robust framework that prioritizes human-centered evaluations and fosters collaboration between humans and algorithms, complete with feedback loops to continually refine and improve the system. This approach will ensure that the technology serves to augment human capabilities, ultimately leading to more informed and equitable decisions across various sectors of society."
        },
        {
            "heading": "Acknowledgements",
            "text": "We gratefully acknowledge the support of the Under Secretary of Defense for Research and Engineering under Air Force Contract No. FA8702-15-D-0001 and awards from NIH under No. R01HD108794, Harvard Data Science Initiative, Amazon Faculty Research, Google Research Scholar Program, Bayer Early Excellence in Science, AstraZeneca Research, Roche Alliance with Distinguished Scientists, Pfizer Research, Chan Zuckerberg Initiative, and the Kempner Institute for the Study of Natural and Artificial Intelligence at Harvard University. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funders. The authors declare that there are no conflicts of interest."
        },
        {
            "heading": "Appendix A Further discussion of background",
            "text": "Straight-through estimators. Discrete operations, such as thresholding, are often avoided in neural network architectures due to difficulties differentiating discrete functions. To circumvent these issues, [76] introduces the straight-through estimator (STE), which uses a surrogate function during backpropagation to approximate the gradient for a non-differentiable operation. STEs have seen usage in quantized neural networks [S1]. This method shows empirical performance even though there is little theoretical justification behind it [S2]. Self-supervised learning. Methods in self-supervised learning (SSL) have become a common pretraining technique for settings in which large, unlabeled datasets are available [S3, S4, S5, S6]. Common approaches for self-supervised learning are contrastive learning, which seeks to learn representations for samples under invariant data augmentations, and metric learning, which aims to generate a latent space in which a distance function captures some pre-defined relations on data [S7]. Consistency learning has emerged as another promising SSL approach; intuitively, this family of methods seeks to learn latent spaces in which similar pairs are expected to be embedded similarly, i.e., preserving some consistent properties. Consistency learning has seen use in aligning videos [S8], enhancing latent geometry for multimodal contrastive learning [79], and pretraining time series models across time and frequency domains [1]. The use of consistency for explaining machine learning models. Consistency has been considered in previous XAI literature in two ways: 1) consistency between explanations and 2) consistency as an explainability metric, as explained below.\n\u2022 Consistency between explanations: This notion has been introduced in previous works in explainability literature. Pillai et al. [S9] train a saliency explainer via contrastive learning that preserves consistency across the saliency maps for augmented versions of images. A few other works have explored maintaining consistency of explanations across various perturbations and augmentations, specifically in computer vision [S10, S11]. In one of the only previous works to consider explanation consistency in time series, Watson et al. [S12] train an explainer on an ensemble of classifiers to optimize the consistency of explanations generated by an explainer applied to each classifier. TIMEX does not seek to optimize consistency between explanations but rather a consistency to the predictor model on which it is explaining.\n\u2022 Consistency as an explainability metric: Dasgupta et al. [S13] defines explanation consistency as similar explanations corresponding to similar predictions; this metric is then used as a proxy to faithfulness to evaluate the quality of explainers. However, Dasgupta et al. use consistency to evaluate explainers, not to train and design a new explainer method. TIMEX uses consistency as a learning objective rather than simply a metric.\nOur work differs from these previous formulations of explanation consistency. We seek to optimize the consistency not between explanations directly, as mentioned in previous works, but rather between the explainer and the model it is tasked with explaining. MBC attempts to ensure that the behavior of the explainable surrogate matches that of the original model. The definition of consistency in Dasgupta et al. is the closest to our definition of MBC; however, Dasgupta et al. seek not to optimize the consistency of explainers but rrather to evaluate the output of post-hoc explainers. TIMEX directly optimizes the consistency between the surrogate model and the original predictor through the MBC loss, a novel formulation that seeks to increase the faithfulness of explanations generated by TIMEX."
        },
        {
            "heading": "Appendix B Further theoretical discussions",
            "text": "B.1 Differentiable attention masking\nAs is described in Section 4.1, we use differentiable attention masking [77], which is defined as such:\n\u03b1m = (softmax( QKT\u221a\ndk )\u2299MX )V, (6)\nwhere Q,K,V represent query, key and values operators, dk is used as a normalization factor, and MX is a mask with self-attention values. This procedure is fully differentiable, and given that MX is binarized via the STE, it sets all attention values to zero that are to be ignored based on output from HE .\nB.2 Further discussion on the utility of model behavior consistency\nThe model behavior consistency (MBC) framework in TIMEX is a method to train an interpretable surrogate model GE . In Section 4.3, we discuss the conceptual advances of this approach. Here, we will outline another advantage of the approach\u2014preserving classification performance\u2014and a brief discussion on the broader uses of MBC in other domains and applications.\nTraining a model with an interpretability bottleneck such as TIMEX is often challenging, as the inherent interpretability mechanism can hinder the performance and expressiveness of the method; this is an advantage of post-hoc methods. MBC allows one to preserve the performance of the underlying predictor. TIMEX, a surrogate method, allows one to keep the predictions from a pretrained time series encoder and develop explanations on top of it, which is practical for real-world use when a drop in classification performance is highly undesirable.\nMBC is not limited to time series classification tasks. We demonstrate the utility of MBC for time series due to the particularly challenging nature of the data modality and the lack of available time series explainers. However, MBC gives a general framework for learning interpretable surrogate models through learning the HE and GE modules. MBC also has the potential to be applied to tasks outside of classification; since MBC is defined on the embedding space, any model with such an embedding space could be matched through a surrogate model as in TIMEX. This opens the possibility of learning on general pretrained models or even more complex tasks such as forecasting (as shown in Appendix C.9). Finally, we see MBC as having potential beyond explainability as well; one could imagine MBC being a way to distill knowledge into smaller models [S14, S15, S16]. We leave these discussions and experiments for future work.\nB.3 Explanation landmark selection strategy\nWe proceed to describe how landmarks are selected for final interpretation. As described in Section 4.4, landmarks are initialized with the embeddings given by G for a random number of training samples. Practically, we stratify this selection across classes in the training set. Landmarks are then updated during the learning procedure. After learning landmarks, not every landmark will be helpful as an explanation; thus, we perform a filtration procedure. Intuitively, this filtration consists of detecting landmarks for which the landmark is the nearest landmark neighbor for many samples. This procedure is described in Algorithm 1.\nAlgorithm 1: Landmark filtration Input: Landmark matrix L \u2208 RnL\u00d7dz ; training explanation embeddings {zE1 , ..., zEN} for zEi \u2208 Rdz ; threshold number of neighbors n\u03f5 \u2208 N Nl \u2190 {} for i\u2190 1 to N do\nCompute similarity to all landmarks Sli = sim(z E i ,L) jmax \u2190 argmaxj Sli[j] (Gets nearest landmark for sample explanation i) Append jmax to Nl\nend Fl \u2190 Frequency of occurrence of each unique element in Nl Lfilter \u2190 every landmark in L s.t. Fl \u2265 n\u03f5 Return Lfilter"
        },
        {
            "heading": "Appendix C Additional experiments and experimental details",
            "text": "C.1 Description of datasets\nWe conduct experiments using both synthetic and real-world datasets. This section describes each synthetic and real-world dataset, including how ground-truth explanations are generated when applicable.\nC.1.1 Synthetic datasets\nWe employ synthetic datasets with known ground-truth explanations to study the capability to identify the underlying predictive signal. We follow standard practices for designing synthetic datasets, including tasks that are predictive and not susceptible to shortcut learning [S17] induced by logical shortcuts. These principles are defined in [S18] concerning graphs, but we extend these to synthetic datasets for time series. Each time series is initialized with a non-autoregressive moving average (NARMA) noise base, and then the described patterns are inserted. We will briefly describe the construction of each time series dataset in this section, and the codebase contains full details at https://github.com/mims-harvard/TimeX. We designed four synthetic datasets to test different time series dynamics: FreqShapes. Predictive signal is determined by the frequency of occurrence of an anomaly signal. To construct the dataset, take two upward and downward spike shapes and two frequencies, 10 and 17 time steps. There are four classes, each with a different combination of the attributes: class 0 has a downward spike occurring every 10-time steps, class 1 has an upward spike occurring every 10-time steps, class 2 has a downward spike occurring every 17-time steps, and class 3 has an upward spike occurring every 17-time steps. Ground-truth explanations are the locations of the upward and downward spikes. SeqComb-UV. Predictive signal is defined by the presence of two shapes of subsequences: increasing (I) and decreasing (D) trends. First, two subsequence regions are chosen within the time series so neither subsequence overlaps; each subsequence is 10-20 time steps long. Then, a pattern is inserted based on the class identity; the increasing or decreasing trend is created with a sinusoidal noise with a randomly-chosen wavelength. Class 0 is null, following a strategy in [S18] that recommends using null classes for simple logical identification tasks in synthetic datasets. Class 1 is I, I; class 2 is D, D; and class 3 is I, D. Thus, the model is tasked with identifying both subsequences to classify each sample. Ground-truth explanations are the I and D sequences determining class labels. SeqComb-MV. This dataset is a multivariate version of SeqComb-UV. The construction and class structure are equivalent, but the I and D subsequences are distributed across different sensors in the input. Upon constructing the samples, the subsequences are chosen to be on random sensors throughout the input. Ground-truth explanations are given as the predictive subsequences on their respective sensors, i.e., the explainer is required to identify the time points at which the causal signal occurs and the sensors upon which they occur. LowVar. Predictive signal is defined by regions of low variance over time that occur in a multivariate time series sample. Similar to SeqComb datasets, we choose a random subsequence in the input and, in that subsequence, replace the NARMA background sequence with Gaussian noise at a low variance. The subsequence is further discriminated by the mean of the Gaussian noise and the sensor on which the low variance sequence occurs. For class 0, the subsequence is at mean -1.5 on sensor 0; for class 1, the subsequence is at mean 1.5 on sensor 0; for class 2, the subsequence is at mean -1.5 on sensor 1; for class 3, the subsequence is at mean 1.5 on sensor 1. This task is distinctly different from other synthetic datasets, requiring recognition of a subsequence that is not anomalous from the rest of the sequence. This presents a more challenging explanation task; a simple change-point detection algorithm could not determine the explanation for this dataset.\nWe create 5,000 training samples, 1,000 testing samples, and 100 validation samples for each dataset. A summary of the dimensions of each dataset can be found in Table 4.\nC.1.2 Real-world datasets\nWe employ four datasets from real-world time series classification tasks: PAM [82] - human activity recognition; ECG [81] - ECG arrhythmia detection; Epilepsy [83] - EEG seizure detection; and Boiler [84] - automatic fault detection. PAM [82]. It measures the daily living activities of 9 subjects with three inertial measurement units. We excluded the ninth subject due to the short length of sensor readouts. We segment the continuous signals into samples with a time window of 600 and the overlapping rate of 50%. PAM initially has 18 activities of daily life. We exclude the ones associated with fewer than 500 samples, leaving us with eight activities. After modification, the PAM dataset contains 5,333 segments (samples) of sensory signals. Each sample is measured by 17 sensors and contains 600 continuous observations with a sampling frequency of 100 Hz. PAM is labeled into eight classes, where each class represents an activity of daily living. PAM does not include static attributes, and the samples are approximately balanced across all eight classes. MIT-BIH (ECG) [81]. The MIT-BIH dataset has ECG recordings from 47 subjects recorded at the sampling rate of 360Hz. The raw dataset was then window-sliced into 92511 samples of 360 timestamps each. Two cardiologists have labeled each beat independently. Of the available annotations, we choose to use three for classification: normal reading (N), left bundle branch block beat (L), and right bundle branch block beat (R). We choose these because L and R diagnoses are known to rely on the QRS interval [S19, S20], which will then become our ground-truth explanation (see Section C.4). The Arrhythmia classification problem involves classifying each fragment of ECG recordings into different beat categories. Epilepsy [83]. The dataset contains single-channel EEG measurements from 500 subjects. For every subject, the brain activity was recorded for 23.6 seconds. The dataset was then divided and shuffled (to mitigate sample-subject association) into 11,500 samples of 1 second each, sampled at 178 Hz. The raw dataset features five classification labels corresponding to different states of subjects or measurement locations \u2014 eyes open, eyes closed, EEG measured in the healthy brain region, EEG measured in the tumor region, and whether the subject has a seizure episode. To emphasize the distinction between positive and negative samples, we merge the first four classes into one, and each time series sample has a binary label indicating whether an individual is experiencing a seizure. There are 11,500 EEG samples in total. Boiler [84]. This dataset consists of simulations of hot water heating boilers undergoing different mechanical faults. Various mechanical sensors are recorded over time to derive a time series dataset. The learning task is to detect the mechanical fault of the blowdown valve of each boiler. The dataset is particularly challenging because it includes a large dimension-to-length ratio, unlike the other datasets, which contain many more time steps than sensors (Table 5).\nC.2 Descriptions of baseline methods\nWe now describe each baseline method in further detail. IG [31]. Integrated gradients is a classical attribution method that utilizes the gradients of the model to form an explanation. The method compares the gradients to a baseline value and performs Riemannian integration to derive the explanation. Integrated gradients is a popular data-type agnostic interpretability method [S21], but it has no inductive biases specific for time series. We use the Captum [S22] implementation of this method, including default hyperparameters such as the baseline value. Dynamask [58]. This explainer is built specifically for time series and uses a perturbation-based procedure to generate explanations. The method performs iterative occlusion of various input portions, learning a mask that deforms the input time series towards a carefully-determined baseline value.\nThis method is different from TIMEX in a few key ways. First, it performs continuous masking; TIMEX performs discrete masking through STEs. Second, it measures perturbation impact on the original model F (G(\u00b7)); TIMEX trains a surrogate model GE to learn the explanations and measure the impact of masking the input. Third, Dynamask learns the explanations iteratively for each sample; TIMEX trains the surrogate, which can then output explanations in one forward pass of HE . WinIT [86]. This explainer is a feature removal explainer, similar to Dynamask. WinIT measures the impact of removing features from a time series on the final prediction value. It eliminates the impact of specific time intervals and learns feature dependencies across time steps. WinIT uses a generative model to perform in-distribution replacement of masked-out features. WinIT improves on a previous time series explainer, FIT [63], which is a popular baseline in time series explainability literature but is excluded in our work because WinIT is more recent and improves on FIT both conceptually and empirically. CoRTX [87]. Contrastive real-time explainer (CoRTX) is an explainer method that utilizes contrastive learning to approximate SHAP [3] values. This method is developed for computer vision, but we implement a custom version that works with time series encoders and explanation generators. We include this method because it uses self-supervised learning to learn explanations. TIMEX also uses a self-supervised objective to learn explanations, but our method differs from CoRTX in several ways. First, CoRTX performs augmentation-based contrastive learning while we use MBC, which avoids the definition of negatives or the careful choice of augmentations specific to the data modality. Second, CoRTX fundamentally attempts to approximate SHAP values via a small number of SHAP explanations. In contrast, TIMEX includes a masking system that can produce masks without finetuning a model on a set of explanations derived from an external method. CorRTX parallels ours in using self-supervised learning but is fundamentally different from TIMEX. SGT + Grad [17]. Saliency-guided training (SGT), an in-hoc explainer, is based on a modification to the training procedure. During training, features with low gradients are masked to steer the model to focus on more important regions for the prediction. The method is not an explainer alone but requires another post-hoc explainer to derive explanations. In our experiments, we consider saliency explanations, which the SGT authors recommend. The authors found that this method can improve performance on time series data. For this reason, we include it as one of our baselines to demonstrate the effectiveness of TIMEX against modern in-hoc explainers.\nC.3 Hyperparameter selection\nWe list hyperparameters for each experiment performed in this work. For the ground-truth attribution experiments (Section 6, results R1), the hyperparameters are listed in Table 6. The hyperparameters used for the occlusion experiment (Section 6, results R2) with real-world datasets are in Table 7. We also list the architecture hyperparameters for the predictors trained on each dataset in Tables 8-9.\nA few abbreviations are used for hyperparameters that are not mentioned in the main text. \"Weight decay\" refers to an L1 regularization on the model weights; the value for weight decay is equivalent to the weight on that term in the loss function compared to the rest of the loss terms (Section 4.4). \"Scheduler?\" refers to using a learning rate scheduler that decreases the learning rate by a factor of 10 if a plateau occurs. We use a scheduler that delays decreasing learning rates until after 20 epochs; not every experiment utilizes the scheduler as it is based on which choice yields lower validation loss upon convergence. \"Distance norm.\" refers to a normalization of the distances in LMBC; the loss is divided by the variance of the distances on the Z embedding space. \u03c4 is the temperature parameter used for the Gumbel-Softmax reparameterization [73], Section 4.1. dh refers to the dimensionality of hidden layers in the transformer predictor. Finally, \"Norm. embedding\" refers to an architecture choice that normalizes Z when training the predictor; this is used to prevent a poor latent space when a collapse is observed via poor latent space geometry.\nA few other notes on implementation and design of TIMEX: The architecture of HE uses the same size of GE and encoder for HE as for the predictor on each task. The number of transformer decoder layers is fixed at 2. Please reference the codebase for more details on these hyperparameters and implementations https://github.com/mims-harvard/TimeX. Choosing the r parameter. One of the most significant parameters in training TIMEX is r, the parameter which controls sparsity of the learned masks. We conduct an experiment where we vary the parameters and measure explanation quality. We use the SeqComb-UV dataset and hold all hyperparameters constant while varying the parameter. The result is visualized in Figure 5. Low\nvalues lead to a drop in explainer performance with respect to AUPRC and AUP. Importantly, for values above 0.4, the explainer performance is stable, suggesting that is robust to choice of value. Thus, we recommend choosing a value near 0.5 for experiments, as we did throughout our experiments. If the pattern is hypothesized to be sparse, one can set the value lower, and vice versa if the pattern is hypothesized to be dense.\nC.4 Evaluation details\nFollowing [58], we use AUP and AUR to evaluate the goodness of identification of salient attributes as a binary classification task, which is defined in C.1:\nDefinition C.1 (AUP,AUR [58]). Let Q be a matrix in {0, 1}T\u00d7dX whose elements indicate the true saliency of the inputs contained in x \u2208 RT\u00d7dX . By definition, Qt,i = 1 if the feature xt,i is salient\nand 0 otherwise. Let M be a mask in {0, 1}T\u00d7dX obtained with a saliency method. Let \u03c4 \u2208 (0, 1) be the detection threshold for Mt,i to indicate that the feature xt,i is salient. This allows to convert the mask into an estimator Q\u0302t,i(\u03c4) via:\nQ\u0302t,i(\u03c4) = { 1 if Mt,i \u2265 \u03c4 0 else.\nBy considering the sets of truly salient indexes and the set of indexes selected by the saliency method:\nA = {(t, i) \u2208 [1 : T ]\u00d7 [1 : dX ] | qt,i = 1} A\u0302(\u03c4) = {(t, i) \u2208 [1 : T ]\u00d7 [1 : dX ] | q\u0302t,i(\u03c4) = 1} .\nthe precision and recall curves that map each threshold to a precision and recall score:\nP : (0, 1) \u2212\u2192 [0, 1] :\u03c4 7\u2212\u2192 |A \u2229 A\u0302(\u03c4)| |A\u0302(\u03c4)|\nR : (0, 1) \u2212\u2192 [0, 1] :\u03c4 7\u2212\u2192 |A \u2229 A\u0302(\u03c4)| |A| .\nThe AUP and AUR scores are the area under these curves: AUP = \u222b 1 0 P(\u03c4)d\u03c4\nAUR = \u222b 1 0 R(\u03c4)d\u03c4.\nGroud-truth explanations for ECG datasets. We extract ground-truth explanations via a QRS detection strategy following [85] because an initial set of beat labels was produced by a simple slopesensitive QRS detector and were then given to two cardiologists, who worked on them independently. The cardiologists added additional beat labels where the detector missed beats, deleted false detections as necessary, and changed the labels for all abnormal beats. We employ Neurokit 1 to extract QRS complexes and also take care to ensure that the QRS is the proper explanation for each class. We consider two types of arrhythmias: left bundle branch block beat and right bundle branch block beat, to categorize our \"abnormal\" class. We perform the ground-truth evaluation on only the abnormal\n1https://github.com/neuropsychology/NeuroKit\nclass, as the normal class signifies negative information, which may be harder to pinpoint based on model logic. Statistical analysis. We evaluate each experiment on a 5-fold cross-validation of each dataset. We then report average performance and standard error across all folds of evaluation for each experiment, which results in the error bars seen in all tables throughout this work. Evaluation with IoU metric. To further demonstrate the superior performance of TIMEX and the soundness of our evaluation setup, we additionally use an Intersection over Union (IoU) metric to measure the quality of explanations produced by baseline explainers compared to that of TIMEX when compared to ground-truth explanations. We calculate the IoU score on the SeqComb-UV dataset, as shown in Table 10. For comparison to our metrics, we include the AUPRC results for the same methods. The IoU metric is highly correlated with the AUPRC metric, with each metric resulting in the same ranking of methods and TIMEX achieving the highest metric.\nC.5 Visualization of explanations\nFigure 6 shows an example of TIMEX explainer versus IG and Dynamask. Shown is the SeqCombUV dataset, which has increasing and decreasing subsequences that determine the class label. Each explainer identifies the regions driving the prediction. IG identifies very sparse portions of the predictive region, choosing only one point out of the sequences for the explanation; this is not reasonable when scaling to large and noisier datasets where the signal might not be as clear. Dynamask seems to miss some important subsequences, identifying one or two subsequences. In contrast, TIMEX identifies a larger portion of the important subsequences due to the connection loss in Equation 2. This property becomes crucial when scaling to time series datasets with more noise as it becomes more difficult to intuitively deduce the causal signal through visual inspection.\nC.6 Further ablation experiments\nWe present a more in-depth study of ablations on TIMEX on three datasets: FreqShapes (univariate), SeqComb-MV (multivariate), and ECG (real-world). This is an extension to the ablations on the ECG dataset in Section 6, R1 in Table 3. Ablation 1: No STE. We now conduct an experiment examining the effectiveness of using the STE for training TIMEX. Table 11 shows the results of this ablation experiment. Using the STE provides over a 17% increase in AUPRC for attribution identification for every dataset. Furthermore, AUR is better when using an STE for every dataset, but the AUP is better for SeqComb-MV without the STE than with the STE. Using the STE also shows benefits in both the univariate (FreqShapes, ECG) and multivariate (SeqComb-MV) settings. In conclusion, the STE provides a noticeable benefit over a continuous masking approach, giving empirical evidence for the claims made in Section 4.2. Ablation 2: SimCLR vs. MBC. We now test a classical SimCLR [S5] contrastive learning loss against our proposed model behavior consistency (MBC). The SimCLR objective is designed to decrease the distance between explanation embeddings and embeddings in the reference model\u2019s latent space. We do not perform data augmentations as in the original SimCLR work. The SimCLR loss that we use is given as:\nLSimCLR(Z,ZE) = 1\nN \u2211 zi\u2208Z,zEi \u2208ZE \u2212 log exp(D(zi, z E i ))\u2211 j \u0338=i exp(D(zj , z E i ))\n(7)\nFor each SimCLR trial, we fixed the number of sampled negatives at 32 and kept all other parameters equal. In addition, an early stopping strategy was performed where the stopping value was based on cosine similarity between explanation embeddings and reference sample embeddings (higher similarity is better).\nSimCLR loss provides a valuable objective for training TIMEX relative to baseline explainers, but MBC optimization produces more robust explanations. SimCLR delivers a slightly better AUPRC for ECG, but its AUPRC values are below that of MBC for FreqShapes and SeqComb-MV. SimCLR loss yields explanations with consistently lower AUP; AUP is closest for SeqComb-MV with only\na 3.4% drop from MBC, but it is at a 17.0% decline for FreqShapes and a 13.6% drop for ECG. It is important to note that in addition to increased performance, MBC loss is more computationally efficient than SimCLR loss, avoiding inference on negative samples. Ablation 3: Effect of MBC and LC losses. We now examine the effectiveness of using both model behavior consistency (Eq. 3) (MBC) and label consistency (Eq. 4) (LC) losses. Table 13 shows that using LC and MBC in combination is always better than using either alone. In isolation, LC performs better than MBC, which is expected given its (obviously) higher correlation with the classification predictions than MBC, which relies on an earlier layer\u2019s embedding space. Using both losses results in a powerful explainer that achieves over 27.5% higher AUPRC than MBC or LC alone. MBC and LC work together to capture rich information about the model\u2019s behavior, allowing TIMEX to be a state-of-the-art explainer.\nTo justify these results, we recall an argument presented in Section 4.3, where we justify MBC. We remark that perturbation-based methods have a similar idea to TIMEX: find some sparse perturbation to the input that can preserve the output state of the model. This is often done by observing the predicted label from the model under an applied mask or perturbation, e.g., in one of our baselines, Dynamask. A perturbation that preserves the output state is said to be \u201cfaithful\u201d to the model because it is assumed that the model is invariant to the perturbation. In a sense, MBC generalizes this idea to latent spaces, ensuring that invariances are preserved in the latent space of the model as well as the prediction space.\nBeyond the introduction of MBC alone, another core contribution of our work focuses on optimizing faithfulness to predictor models on multiple levels. We use multiple hidden or output states of the model, e.g., a latent and logit space, on which the explainable surrogate should match the reference predictor. The hypothesis behind this innovation is that model behavior (the exact objective we are trying to explain) cannot be fully captured by one state, e.g., a predicted label, but rather by multiple states throughout the model. A similar assumption is made in knowledge distillation, where methods often optimize student models to match the teacher in various network layers. Therefore, MBC and LA together enforce adherence to model behavior on two fronts: the latent space and prediction space, respectively. This explains the observed behavior: MBC and LA perform poorly alone, but together, these two losses provide a powerful objective to train the model.\nC.7 Implementation and computing resources\nImplementation. We implemented all methods in this study using Python 3.8+ and PyTorch 2.0. In our experiments, we employed the Vanilla Transformer [88] as the classification model for all methods. We verified that the classification models achieved satisfactory performance on the testing set to ensure that the models are strong predictors, which was previously pointed out by Faber et al.\n[S18] as necessary for explainability evaluation. Complete classification results are in Table 15. We followed the hyperparameters recommended by the respective authors for all baseline methods. Computational resources. For computational resources, we use a GPU cluster with various GPUs, ranging from 32GB Tesla V100s GPU to 48GB RTX8000 GPU. TIMEX and all models were only trained on a single GPU at any given time. The average experiment runtime in this work was around 5 minutes per fold, with ECG taking the longest at approximately 13 minutes per fold when training TIMEX to convergence.\nRuntime experiment. We conducted a runtime experiment to understand how TIMEX compares to baseline explainers. Table X shows the training and inference time in seconds of TIMEX versus two state-of-the-art time series-specific baselines, Dynamask and WinIT. We chose two real-world time series datasets, PAM and Epilepsy, which are of varying sizes. PAM contains 4266 training samples and 534 testing samples, each of 600 time steps in length. Epilepsy contains 8280 training samples and 2300 testing samples, each of 178 time steps in length. Table 14 shows the time in seconds needed to train each explainer and to perform inference on the testing set.\nTIMEX is the most efficient model at inference time for both datasets. This result is expected, as Dynamask and WinIT both require iterative procedures for each sample at inference time, while TIMEX requires only a forward pass at inference. Combining training and inference time, TIMEX is the second-fastest on both datasets. However, WinIT and Dynamask times vary greatly between each dataset, with Dynamask being the fastest on PAM and WinIT being the fastest on Epilepsy. WinIT scales poorly to samples with many time steps, while Dynamask scales poorly to large testing sets. TIMEX strikes a compromise between these extremes, scaling better than Dynamask to larger testing sets while scaling better than WinIT to longer time series.\nC.8 Flexible use of TIMEX with different time series architectures\nWe now study the ability of TIMEX to work with different underlying time series architectures. This means that of the original architecture, G and GE are now an alternative architecture, while HE remains as described in Section 4.1. Since experiments in the main text are based on transformer architectures, we now use a convolutional neural network (CNN) and long-short term memory (LSTM) network as the underlying predictors with the following hyperparameters:\n\u2022 LSTM: 3 layer bidirectional LSTM + MLP on mean of last hidden states \u2022 CNN: 3 layer CNN + MLP on meanpool\nTables 18 19 show the results of TIMEX against strong baselines with a CNN predictor. TIMEX retains the state-of-the-art prediction observed for the transformer-based architecture, achieving\nthe best AUPRC on SeqComb-MV and ECG datasets. However, the performance for FreqShapes saturates at very high values for both TIMEX and IG, making the comparison more difficult for AUPRC. Tables 16,17 show the results of TIMEX against strong baselines with an LSTM predictor. TIMEX performs very well for both FreqShapes and ECG datasets, achieving the highest AUPRC, AUP, and AUR for both datasets. For SeqComb-MV, TIMEX did not converge. However, no explainer performed well for this task, achieving lower results than for the transformer and CNN predictors. Visualization under different architectures. We add a visualization on the FreqShapes dataset with various explainers on different underlying architectures. Figure 7 shows this visualization. Explanations are similar across models. IG outputs appear similar, but TIMEX has a higher recall for essential patterns, which is reflected in quantitative results.\nC.9 TIMEX on diverse tasks and datasets\nWe experiment with TIMEX on various tasks and types of datasets to demonstrate the generality of the method. Irregular time series. We experiment with TIMEX on irregular time series classification. We introduce an irregularly sampled version of SeqComb-MV, randomly dropping an average of 15% of time steps. This results in variable-length time series, addressing both W1 and W2. We then follow Zhang et al. [S23], using a time series transformer with an irregular attention mask. We train only with direct-value masking to avoid direct interference with this mechanism.\nTable 20 shows the results of this experiment. We compare TIMEX to Integrated Gradients (IG) performance because, given the nuance of learning from irregularly-sampled datasets [S23], most\nTransformer CNN LSTM\nDynamask\nIG Ours\nIG\nDynamask\nFigure 7: Visualization of FreqShapes dataset of TIMEX explainer (top row), integrated gradients (IG), and Dynamask explainers on the FreqShapes dataset with transformer, CNN, and LSTM architectures.\nAUPRC AUP AUR\nIG 0.286\u00b10.004 0.617\u00b10.009 0.372\u00b10.009 TIMEX 0.434\u00b10.007 0.666\u00b10.010 0.196\u00b10.003\nTable 20: Performance of TIMEX and IG on a modified version of the SeqComb-MV dataset such that the samples are irregularly sampled.\nbaselines do not apply to irregularly-sampled time series datasets without significant changes that are out-of-scope for our work. TIMEX demonstrates superior performance in this setting, outperforming IG by an over 1.5x improvement in AUPRC.\nForecasting. We demonstrate TIMEX \u2019s generalizability to diverse tasks by explaining a forecasting model. We use the ETTh1 dataset [S24] and a vanilla forecasting transformer. To modify TIMEX for forecasting, we first extract embeddings used for MBC by max pooling over hidden states of the decoder. Next, we used a revised LC loss that used MSE as the distance function between predictions rather than JS divergence. We show visualizations of two samples in Figure 8. Explanations are in the left column, while forecasted time steps are in the right column. A few patterns emerge:\n1. TIMEX identifies late time steps as crucial for the forecast, an expected result for a dataset with small temporal variance.\n2. (a): the forecast is an increasing sequence, and TIMEX identifies a region of an expanding sequence (time 450-485). This suggests the model uses this increasing sequence as a reference for forecasting.\n3. (b): a sharp upward spike is forecasted at the beginning of the predicted window. Correspondingly, TIMEX identifies a local minimum around time 260 and a sharp upward spike around time 475-490.\nThis preliminary experiment demonstrates that TIMEX shows the potential to extract meaningful explanations from forecasting datasets.\nC.10 Quantitative analysis of landmark explanations\nTo examine landmark quality on the ECG dataset, we compare two groups: 1) the landmark group, with the five nearest-neighbors around the top 10 filtered landmarks, and 2) the random group, with five random explanations. We then compare the structure of the most salient values in the samples. We mask in the top-10 time steps as identified by TIMEX, then compute DTW [S25] distance between samples in each group. We then plot the distribution of average within-group DTW distances in Figure 9. A lower average DTW within their groups demonstrates the high quality of learned landmarks.\nWe have run an additional experiment comparing the clustering performance of our landmarks to those learned by k-means on the final latent space. On the ECG dataset, we match embeddings to their nearest landmarks, to their nearest k-means cluster centroids, and to randomly-selected points as a baseline. For each method, we use 50 clusters. We then evaluate each clustering method\u2019s Normalized Mutual Information (NMI) and Adjusted Rand Index (ARI), which are standard clustering metrics, against the ground-truth labels and report the standard error (+/-) computed over 5-fold cross-validation. Higher metrics for one set of centroids would indicate that proximity is more meaningful for prediction. The results are shown in Table 21. Here, we see higher NMI and ARI for landmarks, which means the landmarks are a better heuristic for forming clusters than the K-means centroids for this task."
        },
        {
            "heading": "Appendix References",
            "text": "[S1] Penghang Yin, Jiancheng Lyu, Shuai Zhang, Stanley Osher, Yingyong Qi, and Jack Xin. Understanding straight-through estimator in training activation quantized neural nets. arXiv preprint arXiv:1903.05662, 2019.\n[S2] Pengyu Cheng, Chang Liu, Chunyuan Li, Dinghan Shen, Ricardo Henao, and Lawrence Carin. Straight-through estimator as projected wasserstein gradient flow. arXiv preprint arXiv:1910.02176, 2019.\n[S3] Veenu Rani, Syed Tufael Nabi, Munish Kumar, Ajay Mittal, and Krishan Kumar. Selfsupervised learning: A succinct review. Archives of Computational Methods in Engineering, pages 1\u201315, 2023.\n[S4] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, et al. Learning transferable visual models from natural language supervision. In International conference on machine learning, pages 8748\u20138763. PMLR, 2021.\n[S5] Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey Hinton. A simple framework for contrastive learning of visual representations. In International conference on machine learning, pages 1597\u20131607. PMLR, 2020.\n[S6] Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick. Momentum contrast for unsupervised visual representation learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 9729\u20139738, 2020.\n[S7] Xun Wang, Xintong Han, Weilin Huang, Dengke Dong, and Matthew R Scott. Multi-similarity loss with general pair weighting for deep metric learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 5022\u20135030, 2019.\n[S8] Debidatta Dwibedi, Yusuf Aytar, Jonathan Tompson, Pierre Sermanet, and Andrew Zisserman. Temporal cycle-consistency learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 1801\u20131810, 2019.\n[S9] Vipin Pillai, Soroush Abbasi Koohpayegani, Ashley Ouligian, Dennis Fong, and Hamed Pirsiavash. Consistent explanations by contrastive learning. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 10213\u201310222, 2022.\n[S10] Tao Han, Wei-Wei Tu, and Yu-Feng Li. Explanation consistency training: Facilitating consistency-based semi-supervised learning with interpretability. In Proceedings of the AAAI conference on artificial intelligence, volume 35, pages 7639\u20137646, 2021.\n[S11] Hao Guo, Kang Zheng, Xiaochuan Fan, Hongkai Yu, and Song Wang. Visual attention consistency under image transforms for multi-label image classification. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 729\u2013739, 2019.\n[S12] Matthew Watson, Bashar Awwad Shiekh Hasan, and Noura Al Moubayed. Using model explanations to guide deep learning models towards consistent explanations for ehr data. Scientific Reports, 12(1):19899, 2022.\n[S13] Sanjoy Dasgupta, Nave Frost, and Michal Moshkovitz. Framework for evaluating faithfulness of local explanations. In International Conference on Machine Learning, pages 4794\u20134815. PMLR, 2022.\n[S14] Huanlai Xing, Zhiwen Xiao, Dawei Zhan, Shouxi Luo, Penglin Dai, and Ke Li. Selfmatch: Robust semisupervised time-series classification with self-distillation. International Journal of Intelligent Systems, 37(11):8583\u20138610, 2022.\n[S15] Lujun Li and Zhe Jin. Shadow knowledge distillation: Bridging offline and online knowledge transfer. Advances in Neural Information Processing Systems, 35:635\u2013649, 2022.\n[S16] Defang Chen, Jian-Ping Mei, Hailin Zhang, Can Wang, Yan Feng, and Chun Chen. Knowledge distillation with the reused teacher classifier. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 11933\u201311942, 2022.\n[S17] Robert Geirhos, J\u00f6rn-Henrik Jacobsen, Claudio Michaelis, Richard Zemel, Wieland Brendel, Matthias Bethge, and Felix A. Wichmann. Shortcut learning in deep neural networks. Nature Machine Intelligence, 2(11):665\u2013673, Nov 2020.\n[S18] Lukas Faber, Amin K. Moghaddam, and Roger Wattenhofer. When comparing to ground truth is wrong: On evaluating gnn explanation methods. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining, pages 332\u2013341, 2021.\n[S19] Borys Surawicz, Rory Childers, Barbara J Deal, and Leonard S Gettes. Aha/accf/hrs recommendations for the standardization and interpretation of the electrocardiogram: part iii: intraventricular conduction disturbances: a scientific statement from the american heart association electrocardiography and arrhythmias committee, council on clinical cardiology; the american college of cardiology foundation; and the heart rhythm society: endorsed by the international society for computerized electrocardiology. Circulation, 119(10):e235\u2013e240, 2009.\n[S20] Mariana Floria, Alexandra Noela Parteni, Ioana Alexandra Neagu, Radu Andy Sascau, Cristian Statescu, and Daniela Maria Tanase. Incomplete right bundle branch block: Challenges in electrocardiogram diagnosis. Anatolian Journal of Cardiology, 25(6):380, 2021.\n[S21] Chirag Agarwal, Eshika Saxena, Satyapriya Krishna, Martin Pawelczyk, Nari Johnson, Isha Puri, Marinka Zitnik, and Himabindu Lakkaraju. Openxai: Towards a transparent evaluation of model explanations. arXiv preprint arXiv:2206.11104, 2022.\n[S22] Narine Kokhlikyan, Vivek Miglani, Miguel Martin, Edward Wang, Bilal Alsallakh, Jonathan Reynolds, Alexander Melnikov, Natalia Kliushkina, Carlos Araya, Siqi Yan, and Orion ReblitzRichardson. Captum: A unified and generic model interpretability library for pytorch, 2020.\n[S23] Xiang Zhang, Marko Zeman, Theodoros Tsiligkaridis, and Marinka Zitnik. Graph-guided network for irregularly sampled multivariate time series. In International Conference on Learning Representations, ICLR, 2022.\n[S24] Haoyi Zhou, Shanghang Zhang, Jieqi Peng, Shuai Zhang, Jianxin Li, Hui Xiong, and Wancai Zhang. Informer: Beyond efficient transformer for long sequence time-series forecasting. In Proceedings of the AAAI conference on artificial intelligence, volume 35, pages 11106\u201311115, 2021.\n[S25] Meinard M\u00fcller. Dynamic time warping. Information retrieval for music and motion, pages 69\u201384, 2007."
        }
    ],
    "title": "Encoding Time-Series Explanations through Self-Supervised Model Behavior Consistency",
    "year": 2023
}