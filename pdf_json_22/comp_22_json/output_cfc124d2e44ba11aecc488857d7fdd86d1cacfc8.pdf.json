{
    "abstractText": "Datalog\u2203 is the extension of Datalog with existential quantification. While its high expressive power, underpinned by a simple syntax and the support for full recursion, renders it particularly suitable for modern applications on knowledge graphs, query answering (QA) over such language is known to be undecidable in general. For this reason, different fragments have emerged, introducing syntactic limitations to Datalog\u2203 that strike a balance between its expressive power and the computational complexity of QA, to achieve decidability. In this short paper, we focus on two promising tractable candidates, namely Shy and Warded Datalog\u00b1. Reacting to an explicit interest from the community, we shed light on the relationship between these fragments. Moreover, we carry out an experimental analysis of the systems implementing Shy and Warded, respectively DLV\u2203 and Vadalog.",
    "authors": [
        {
            "affiliations": [],
            "name": "Teodoro Baldazzi"
        },
        {
            "affiliations": [],
            "name": "Luigi Bellomarini"
        },
        {
            "affiliations": [],
            "name": "Emanuel Sallinger"
        }
    ],
    "id": "SP:984eda635561d7285bcd6f1b479ba8827a901468",
    "references": [
        {
            "authors": [
                "S. Abiteboul",
                "R. Hull",
                "V. Vianu"
            ],
            "title": "Foundations of databases, volume 8",
            "venue": "Addison-Wesley Reading.",
            "year": 1995
        },
        {
            "authors": [
                "W.T. Adrian",
                "M. Alviano",
                "F. Calimeri",
                "B. Cuteri",
                "C. Dodaro",
                "W. Faber",
                "D. Fusc\u00e0",
                "N. Leone",
                "M. Manna",
                "S. Perri",
                "F. Ricca",
                "P. Veltri",
                "J. Zangari"
            ],
            "title": "The ASP system DLV: advancements and applications",
            "venue": "K\u00fcnstliche Intell. 32(2-3):177\u2013179.",
            "year": 2018
        },
        {
            "authors": [
                "J.-F. Baget",
                "M.-L. Mugnier",
                "S. Rudolph",
                "M. Thomazo"
            ],
            "title": "Walking the complexity lines for generalized guarded existential rules",
            "venue": "Twenty-Second International Joint Conference on Artificial Intelligence.",
            "year": 2011
        },
        {
            "authors": [
                "J.-F. Baget",
                "M. Lecl\u00e8re",
                "M.-L. Mugnier"
            ],
            "title": "Walking the decidability line for rules with existential variables",
            "venue": "KR 10:466\u2013476.",
            "year": 2010
        },
        {
            "authors": [
                "T. Baldazzi",
                "L. Bellomarini",
                "M. Favorito",
                "E. Sallinger"
            ],
            "title": "Experimental evaluation",
            "venue": "https://github. com/TeodoroBaldazzi/Shy-Warded-Datalog-KR2022. Accessed: 2022-02-01.",
            "year": 2022
        },
        {
            "authors": [
                "L. Bellomarini",
                "G. Gottlob",
                "A. Pieris",
                "E. Sallinger"
            ],
            "title": "Swift logic for big data and knowledge graphs",
            "venue": "IJCAI, 2\u201310. Springer.",
            "year": 2017
        },
        {
            "authors": [
                "L. Bellomarini",
                "D. Benedetto",
                "G. Gottlob",
                "E. Sallinger"
            ],
            "title": "Vadalog: A modern architecture for automated reasoning with large knowledge graphs",
            "venue": "IS.",
            "year": 2020
        },
        {
            "authors": [
                "L. Bellomarini",
                "E. Sallinger",
                "G. Gottlob"
            ],
            "title": "The Vadalog System: Datalog-based reasoning for knowledge graphs",
            "venue": "VLDB 11(9).",
            "year": 2018
        },
        {
            "authors": [
                "M. Benedikt",
                "G. Konstantinidis",
                "G. Mecca",
                "B. Motik",
                "P. Papotti",
                "D. Santoro",
                "E. Tsamoura"
            ],
            "title": "Benchmarking the chase",
            "venue": "Proceedings of the 36th ACM SIGMODSIGACT-SIGAI Symposium on Principles of Database Systems, 37\u201352.",
            "year": 2017
        },
        {
            "authors": [
                "G. Berger",
                "G. Gottlob",
                "A. Pieris",
                "E. Sallinger"
            ],
            "title": "The space-efficient core of vadalog",
            "venue": "PODS, 270\u2013284. ACM.",
            "year": 2019
        },
        {
            "authors": [
                "A. Cal\u0131",
                "G. Gottlob",
                "T. Lukasiewicz",
                "B. Marnette",
                "A. Pieris"
            ],
            "title": "Datalog+/-: A family of logical knowledge representation and query languages for new applications",
            "year": 2010
        },
        {
            "authors": [
                "A. Cal\u0131",
                "G. Gottlob",
                "M. Kifer"
            ],
            "title": "Taming the infinite chase: Query answering under expressive relational constraints",
            "venue": "Journal of Artificial Intelligence Research",
            "year": 2013
        },
        {
            "authors": [
                "A. Cal\u0131",
                "G. Gottlob",
                "T. Lukasiewicz"
            ],
            "title": "A general datalog-based framework for tractable query answering over ontologies",
            "venue": "In PODS,",
            "year": 2009
        },
        {
            "authors": [
                "A. Cal\u0131",
                "G. Gottlob",
                "T. Lukasiewicz"
            ],
            "title": "A general datalog-based framework for tractable query answering over ontologies",
            "venue": "Journal of Web Semantics",
            "year": 2012
        },
        {
            "authors": [
                "A. Cal\u0131",
                "G. Gottlob",
                "A. Pieris"
            ],
            "title": "Towards more expressive ontology languages: The query answering problem",
            "venue": "Artificial Intelligence",
            "year": 2012
        },
        {
            "authors": [
                "DBpedia."
            ],
            "title": "Global and unified access to knowledge graphs",
            "venue": "http://wiki.dbpedia.org/services-resources/ downloads/dbpedia-tables. Accessed: 2022-02-01.",
            "year": 2018
        },
        {
            "authors": [
                "G. Gottlob",
                "A. Pieris"
            ],
            "title": "Beyond sparql under owl 2 ql entailment regime: Rules to the rescue",
            "venue": "Twenty-Fourth International Joint Conference on Artificial Intelligence.",
            "year": 2015
        },
        {
            "authors": [
                "G. Gottlob",
                "T. Lukasiewicz",
                "A. Pieris"
            ],
            "title": "Datalog+/-: Questions and answers",
            "venue": "Fourteenth International Conference on the Principles of Knowledge Representation and Reasoning.",
            "year": 2014
        },
        {
            "authors": [
                "M. Kr\u00f6tzsch",
                "V. Thost"
            ],
            "title": "Ontologies for knowledge graphs: Breaking the rules",
            "venue": "International Semantic Web Conference (1), volume 9981 of LNCS, 376\u2013392.",
            "year": 2016
        },
        {
            "authors": [
                "N. Leone",
                "G. Pfeifer",
                "W. Faber",
                "T. Eiter",
                "G. Gottlob",
                "S. Perri",
                "F. Scarcello"
            ],
            "title": "The dlv system for knowledge representation and reasoning",
            "venue": "ACM Transactions on Computational Logic (TOCL) 7(3):499\u2013562.",
            "year": 2006
        },
        {
            "authors": [
                "N. Leone",
                "M. Manna",
                "G. Terracina",
                "P. Veltri"
            ],
            "title": "Efficiently computable datalog\u02c6E programs",
            "venue": "Thirteenth international conference on the principles of knowledge representation and reasoning.",
            "year": 2012
        },
        {
            "authors": [
                "N. Leone",
                "M. Manna",
                "G. Terracina",
                "P. Veltri"
            ],
            "title": "Dlv\u02c6E system",
            "venue": "https://www.mat.unical.it/dlve/. Accessed: 2022-02-01.",
            "year": 2017
        },
        {
            "authors": [
                "N. Leone",
                "M. Manna",
                "G. Terracina",
                "P. Veltri"
            ],
            "title": "Fast query answering over existential rules",
            "venue": "ACM Transactions on Computational Logic (ToCL) 20(2):1\u201348.",
            "year": 2019
        },
        {
            "authors": [
                "D. Maier",
                "A.O. Mendelzon",
                "Y. Sagiv"
            ],
            "title": "Testing implications of data dependencies",
            "venue": "ACM Transactions on Database Systems 4(4):455\u2013468.",
            "year": 1979
        },
        {
            "authors": [
                "G. Mecca",
                "P. Papotti",
                "D. Santoro"
            ],
            "title": "Iq-meteran evaluation tool for data-transformation systems",
            "venue": "2014 IEEE 30th International Conference on Data Engineering, 1218\u20131221. IEEE.",
            "year": 2014
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "The last decade has witnessed a rising interest, both in academia and industry, towards querying and exploiting data in the form of knowledge graphs (KGs), modeled by combining extensional knowledge with ontological theories to infer intensional information. This led to the adoption of novel intelligent systems that perform ontological reasoning and ontology-based query answering (QA) tasks over KGs, employing powerful logic languages for knowledge representation (Kro\u0308tzsch and Thost 2016).\nAmong the main requirements such languages must exhibit, a high expressive power is essential in modern applications on KGs, so as to model and reason on complex domains with full recursion and existential quantification (Bellomarini et al. 2017). At the same time, decidability and tractability of QA must be sustained, limiting the data complexity to a polynomial degree (Gottlob and Pieris 2015).\nIn this context, Datalog\u2203, the natural extension of Datalog with existential quantification in rule heads, became particularly relevant. Its semantics is specified in an operational way via the CHASE (Maier, Mendelzon, and Sagiv 1979), an algorithmic tool that takes as input a database D and a set \u03a3 of rules, and modifies D by adding new tuples until \u03a3 is satisfied. While this language encompasses both a high expressiveness and a simple syntax that enable powerful knowledge-modeling, QA over it is known to be undecidable in general (Cal\u0131\u0300, Gottlob, and Kifer 2013). For this\nreason, recent years have witnessed a rise of proposals for decidable classes of Datalog\u2203 in the literature (Cal\u0131\u0300, Gottlob, and Lukasiewicz 2012; Cal\u0131\u0300, Gottlob, and Pieris 2012; Baget, Lecle\u0300re, and Mugnier 2010; Baget et al. 2011), defined by imposing proper syntactic limitations to strike a good balance between the expressive power of the language and the computational complexity of QA.\nIn this paper, we focus on two particularly promising languages, namely, Shy Datalog\u2203 (Leone et al. 2019) and Warded Datalog\u00b1 (Gottlob and Pieris 2015), which have been independently introduced. Indeed, they both cover the requirements for knowledge representation, restricting Datalog\u2203, though with notably different constraints, and featuring PTIME data complexity for Boolean conjunctive QA (BCQA). Shy and Warded are employed in state-of-the-art reasoning systems. Specifically, Shy was introduced as part of the parsimonious class (Leone et al. 2012) and is adopted in the system DLV\u2203 (Leone et al. 2017). Likewise, Warded was recently introduced as fragment of the Datalog\u00b1 family (Cal\u0131\u0300 et al. 2010) and is implemented as logic core of the reasoner Vadalog system (Bellomarini et al. 2020). Both find many industrial applications in the financial, media intelligence, security, logistics, pricing domains, and more (Berger et al. 2019; Adrian et al. 2018).\nPrevious works have thoroughly discussed how these two languages individually compare to the other main decidable classes (Leone et al. 2019; Gottlob, Lukasiewicz, and Pieris 2014). However, to our surprise, determining the relationship between Shy and Warded is still an unexplored research topic, despite known to be recurring in the Datalog\u2203 academic and practitioner communities.\nThis paper aims at providing an answer to such question, by contributing the results summarized below. After a brief overview of Shy and Warded, we present a novel theoretical analysis of the relationship between the languages. From a syntactical point of view, we conclude that they intersect in a newly defined fragment, named Protected Datalog\u00b1. Regarding semantics, we show that the CHASE procedures adopted by Shy and Warded are equivalent over Protected settings with respect to BCQA. To enrich the analysis with a more empirical perspective, we then illustrate an experimental comparison between DLV\u2203 and the Vadalog system on QA tasks over Protected settings.\nOverview. This paper is organized as follows. In Section 2, we provide an overview of Shy and Warded. In Section 3, we discuss the relationship between them. In Section 4, we provide the experimental evaluation of DLV\u2203 and the Vadalog system. We draw our conclusions in Section 5."
        },
        {
            "heading": "2 Shy Datalog\u2203 and Warded Datalog\u00b1",
            "text": "To guide our discussion, we briefly recall some relevant notions and provide an overview of the two fragments at issue. Let C, N , and V be disjoint countably infinite sets of constants, (labelled) nulls and (regular) variables, respectively. A (relational) schema S is a finite set of relation symbols (or predicates) with associated arity. A term is either a constant or variable. An atom over S is an expression of the form R(v\u0304), where R \u2208 S is of arity n > 0 and v\u0304 is an n-tuple of terms. A database (instance) over S associates to each relation symbol in S a relation of the respective arity over the domain of constants and nulls. The members of the relations are called tuples or facts. Given two conjunctions of atoms \u03c21 and \u03c22, we define a homomorphism from \u03c21 to \u03c22 as a mapping h : C \u222aN \u222a V \u2192 C \u222aN \u222a V such that h(t) = t if t \u2208 C, h(t) \u2208 C \u222a N if t \u2208 N and if a(t1, . . . , tn) is an atom \u2208 \u03c21, then a(h(t1), . . . , h(tn)) \u2208 \u03c22: \u03c21 and \u03c22 are isomorphic if h\u22121 is a homomorphism from \u03c22 to \u03c21.\nA Datalog\u2203 program consists of a set of facts and existential rules \u2200x\u0304\u2200y\u0304(\u03c6(x\u0304, y\u0304)\u2192\u2203z\u0304 \u03c8(x\u0304, z\u0304)), where \u03c6 (the body) and \u03c8 (the head) are conjunctions of atoms. We omit \u2200 and denote conjunction by comma. Let \u03a3 be a set of Datalog\u2203 rules and p[i] a position (i.e., the i-th term of a predicate p with arity k, where i = 1, . . . , k). We define p[i] as affected if (i) p appears in a rule in \u03a3 with an existentially quantified variable (\u2203-variable) in i-th term or, (ii) there is a rule in \u03a3 such that a universally quantified variable (\u2200-variable) is only in affected body positions and in p[i] in the head. Shy Datalog\u2203. Let y be an \u2203-variable in \u03a3. We define the position p[i] as invaded by y if there is a rule \u03c1 \u2208 \u03a3 such that head(\u03c1) = p(t1, . . . , tk) and either (i) ti = y or, (ii) ti is a \u2200-variable that occurs in body(\u03c1) only in positions that are invaded by y. By such definition, if p[i] is invaded, then it is affected, but not vice versa. Let x \u2208 X be a variable in a conjunction of atoms \u03c2[X]. We say that x is attacked in \u03c2[X] by y if x occurs in \u03c2[X] only in positions invaded by y. If x is not attacked by any variable, x is protected in \u03c2[X].\nWe define a set \u03a3 as Shy Datalog\u2203 (or shy) if, for each rule \u03c3 \u2208 \u03a3: (S1) if a variable x occurs in more than one body atom, then x is protected in body(\u03c3); and, (S2) if two distinct \u2200-variables are not protected in body(\u03c3) but occur both in head(\u03c3) and in two different body atoms, then they are not attacked by the same variable (Leone et al. 2019). Warded Datalog\u00b1. A \u2200-variable x is harmful, wrt a rule \u03c1 in \u03a3, if x appears only in affected positions in \u03c1, otherwise it is harmless. A (join) rule that contains a harmful (join) variable is a harmful (join) rule. If the harmful variable is in head(\u03c1), it is dangerous (Gottlob and Pieris 2015).\nWe define a set \u03a3 as Warded Datalog\u00b1 (or warded) if, for each rule \u03c3 \u2208 \u03a3: (W1) all the dangerous variables appear in a single body atom, called ward; and, (W2) the ward only shares harmless variables with other atoms in the body.\nChase and Semantics. Chase-based procedures enforce the satisfaction of \u03a3 over a database D ( \u2329 D,\u03a3 \u232a ), incrementally expanding D into new instances I with facts derived from the application of the rules in \u2329 D,\u03a3 \u232a , until \u03a3 is satisfied\n(chase(D,\u03a3)). Such facts may contain labelled nulls as placeholders for the \u2203-variables (Cal\u0131\u0300 et al. 2010). We refer to its oblivious variant with ochase. Consider an instance I \u2032 \u2287 I . Given a rule \u03c3 : \u03c6(x\u0304, y\u0304)\u2192\u2203z\u0304 \u03c8(x\u0304, z\u0304)) \u2208 \u03a3, a chase step \u2329 \u03c3,h \u232a is applicable to I \u2032 if there exists a homo-\nmorphism h that maps the atoms of \u03c6(x\u0304, y\u0304) to facts of I (i.e., h(\u03c6(x\u0304, y\u0304)) \u2286 I). When the chase step is applicable, the atom h\u2032(\u03c8(x\u0304, z\u0304)) is added to I \u2032, where h\u2032 is obtained by extending h so that h\u2032(zi) \u2208 N is a fresh labelled null, \u2200 zi \u2208 z\u0304.\nHowever, in the presence of recursion, especially jointly with existential quantification, infinite labelled nulls could be generated in ochase, causing the procedure not to terminate and inhibiting the decidability of the QA task (Cal\u0131\u0300, Gottlob, and Lukasiewicz 2009). To practically achieve termination and decidability, shy and warded both employ variants of the ochase, based on firing conditions that limit the applicability of the chase steps. Specifically, shy adopts the so-called parsimonious chase (pchase): the chase step\u2329 \u03c3,h \u232a is applicable wrt I \u2032 \u2287 I if, additionally, there is no homomorphism from h(head(\u03c3)) to I \u2032. To cover decidability of CQ cases and preserve correctness of the evaluation, pchase is extended into its variant with resumption (pchaser) (Leone et al. 2019), which iteratively \u201cresumes\u201d the chase in the same state it was after termination but considering previous nulls as constants. Similarly, warded employs an isomorphism-based chase (ichase): the chase step\u2329 \u03c3,h \u232a is applicable wrt I \u2032 \u2287 I if, additionally, there is no isomorphic embedding of h(head(\u03c3)) to I \u2032. Here, decidability of CQA derives from (Bellomarini, Sallinger, and Gottlob 2018, Theorem 1, Theorem 2), as we shall see.\nA Boolean Conjunctive Query (BCQ) is a first-order expression q : \u2203Y \u03c2[X\u222aY], where X \u2208 C. The answer of q over an instance I (namely, BCQA) is true, denoted by I |= q, if and only if there is a homomorphism h: Y \u2192 C \u222a N s.t. h(\u03c2[X\u222aY]) \u2286 I . It holds that q is true over chase(D,\u03a3), denoted by chase(D,\u03a3) |= q, if and only if \u2329 D,\u03a3 \u232a |= q. We recall that the query output tuple problem (decision version of CQ evaluation) and BCQ evaluation are AC0-reducible to each other (Cal\u0131\u0300, Gottlob, and Lukasiewicz 2012). Therefore, we only consider BCQ evaluation."
        },
        {
            "heading": "3 Relationship between Shy and Warded",
            "text": "We now have the means to discuss the relationship between shy and warded. Let us start by showing that the two fragments are not characterized by any form of syntactical containment (represented with the symbol \u0338\u2286). Proposition 1. shy \u0338\u2286 warded\nProof. We prove the claim by showing that there exists a program that is shy but not warded. Let \u03a3 be the following:\nE1(x) \u2192 \u2203y I1(x, y) (\u03b1) E2(x) \u2192 \u2203z I2(z, x) (\u03b2)\nI1(x, y), I2(z, x) \u2192 I3(x, y, z) (\u03c1)\nHere, rules \u03b1 and \u03b2 are existential rules, both shy and warded, and introduce affectedness in positions I1[2] and I2[1], respectively. Rule \u03c1 has a harmless join on x and propagates the harmful variables y and z to the head. Indeed, \u03c1 is not warded, as y and z are dangerous and there is no ward (condition (W1) is not satisfied). However, it is shy, as the join variable x is protected (condition (S1)), whereas y and z are attacked by distinct variables, respectively y\u03b1 and z\u03b2 (condition (S2)). Therefore \u03a3 is shy but it is not warded.\nProposition 2. warded \u0338\u2286 shy\nProof. We prove the claim by showing that there exists a program that is warded but not shy. Let \u03a3 be the following:\nE1(x) \u2192 \u2203y I1(x, y) (\u03b1) I1(x, y), I1(z, y) \u2192 I2(x, z) (\u03c1)\nHere, rule \u03b1 is an existential rule, both warded and shy, and introduces affectedness in position I1[2]. Rule \u03c1 contains a harmful join on y and propagates the harmless variables x and z to the head. Indeed, \u03c1 is warded, as no dangerous variables occur in the rule. However, it is not shy, as the join variable y is attacked by y\u03b1 (condition (S1) is not satisfied). Therefore \u03a3 is warded but it is not shy.\nProtected Datalog\u00b1. To further explore the relationship between shy and warded, we first introduce the notion of protected harmful variable. Given a Datalog\u2203 set \u03a3, a \u2200- variable x is protected harmful, with respect to a rule \u03c1 \u2208 \u03a3, if it appears in affected positions in \u03c1 that are not invaded by the same \u2203-variable: if the invading variable is the same, x is an attacked harmful variable. Without loss of generality (as more complex joins can be broken into steps (Bellomarini et al. 2020)), we define protected harmful join rule as a rule:\nA(x1, y1, h), B(x2, y2, h) \u2192 \u2203z C(x, z) (\u03c4 )\nwhere A, B and C are atoms, A[3] and B[3] are positions invaded (and thus affected) by distinct \u2203-variables, x1, x2 \u2286 x, y1, y2 \u2286 y are disjoint tuples of harmless variables or constants and h is a protected harmful variable. By definition of protected variables and labelled nulls, the join on h only activates on constant values in the CHASE. If h is attacked, \u03c4 is an attacked harmful join rule.\nWe define a set \u03a3 as Protected Datalog\u00b1 (or protected) if, for each rule \u03c3 \u2208 \u03a3: (P1) \u03c3 does not contain attacked harmful joins; and, (P2) \u03c3 is warded (it satisfies (W1) and (W2)). With reference to the relationship between shy and warded, we first show that protected corresponds to the syntactical intersection of the two fragments (represented with \u2229). Theorem 1. warded \u2229 shy = protected.\nProof. We prove the equivalence by showing the containment in both directions of implication.\nwarded \u2229 shy \u2286 protected. Let \u03a3 be a generic set of rules \u2208 warded \u2229 shy. Then, \u03a3 satisfies condition (P2) by definition. Regarding condition (P1), we proceed by contrapositive and show that \u00ac(P1) =\u21d2 \u00ac(S1). Indeed, if \u03a3 does not satisfy condition (P1), then there exists a rule \u03c3 \u2208 \u03a3 with an attacked harmful join. However, this means that \u03c3\ncontains a variable that occurs in more than one body atom and it is not protected in body(\u03c3) (condition (S1) is not satisfied). Therefore, by contrapositive, \u03a3 \u2208 protected. protected \u2286 warded \u2229 shy. Let \u03a3 be a generic set of rules \u2208 protected. By condition (P2), \u03a3 \u2208 warded. Also, by condition (P1), \u03a3 may only contain harmless joins and protected harmful joins, thus an attacked variable cannot occur in both body atoms by definition. Therefore, condition (S1) is satisfied. Finally, we proceed by contrapositive and show that \u00ac(S2) =\u21d2 \u00ac(P2). Indeed, if \u03a3 does not satisfy condition (S2), then there exists a rule \u03c3 \u2208 \u03a3 with two dangerous attacked variables in distinct body atoms. However, this means that \u03c3 does not contain a ward, thus it is not warded (condition (P2) is not satisfied). Therefore, by contrapositive, \u03a3 \u2208 warded \u2229 shy. This concludes the proof.\nFigure 1 illustrates the syntactic containment of these fragments, as well as their data complexity.\nWith reference to the semantic perspective of this analysis, let us first develop the following consideration. Observation 1. pchase(D,\u03a3) \u2286 ichase(D,\u03a3), \u2200\u03a3 \u2208 Datalog\u2203, \u2200D. This derives from the definition of pchase and ichase, as the applicability of their chase steps depends on fact homomorphism and fact isomorphism, respectively. In particular, whenever a pchase step \u27e8\u03c3, h\u27e9 is applicable with respect to I \u2032 \u2287 I , the absence of homomorphisms from h(head(\u03c3)) to I \u2032 implies the absence of isomorphic embeddings of h(head(\u03c3)) to I \u2032 (and not vice versa). The ichase step is therefore applicable as well. Since, by Theorem 1, protected is a syntactical subset of warded, its data complexity is also PTIME, as shown in Figure 1. Moreover, we observe that reasoning with protected can adopt both pchaser and ichase. Based on these notions, we make an additional step in the comparative analysis of the fragments, stating that pchaser and ichase are equivalent over protected settings, with respect to BCQA (i.e., a generic BCQ has the same answer). Lemma 1. Let \u03a3 \u2208 shy, D a database and q a BCQ. Then, ochase(D,\u03a3) |= q if and only if pchaser(D,\u03a3) |= q.\nProof. The result directly follows from (Leone et al. 2019, Theorem 4.9) for BCQA decidability over shy.\nLemma 2. Let \u03a3 \u2208 warded, D a database and q a BCQ. Then, ochase(D,\u03a3) |= q if and only if ichase(D,\u03a3) |= q.\nProof. Completeness, namely ochase(D,\u03a3) |= q implies ichase(D,\u03a3) |= q, directly follows from (Bellomarini, Sallinger, and Gottlob 2018, Theorem 1, Theorem 2), as chase subgraphs derived from isomorphic facts are isomorphic, thus irrelevant for BCQA. Soundness, namely ichase(D,\u03a3) |= q implies ochase(D,\u03a3) |= q, holds because ichase(\u03a3) \u2286 ochase(\u03a3) by definition.\nTheorem 2. Let \u03a3 \u2208 protected,D a database and q a BCQ. Then, pchaser(D,\u03a3) |= q if and only if ichase(D,\u03a3) |= q.\nProof. By Theorem 1 and by definition of protected fragment, we know that \u03a3 \u2208 shy and \u03a3 \u2208 warded. Therefore, the result directly follows from Lemma 1 and Lemma 2."
        },
        {
            "heading": "4 DLV\u2203 and Vadalog System",
            "text": "We integrate the analysis of shy and warded with an experimental comparison between their main state-of-the-art implementations, namely DLV\u2203 and the Vadalog system (VADALOG). Indeed, it follows from Section 3 that the two systems are comparable over protected settings. Systems Overview. DLV\u2203 is an extension of the answer set programming system DLV (Leone et al. 2006), enriched with pchaser for CQA over shy programs. To answer CQs, it employs a materialization approach, producing and storing all the facts for each predicate via the so-called seminaive evaluation (Abiteboul, Hull, and Vianu 1995), where rules are evaluated according to a bottom-up strategy from the initial database. It is available online (Leone et al. 2017). VADALOG is a well-known system for KG management, implementing warded and ichase for reasoning and CQA (Bellomarini, Sallinger, and Gottlob 2018). To answer CQs, it employs a streaming approach, building a reasoning query graph as a processing pipeline, where nodes correspond to algebra operators that perform transformations over the data pulled from their predecessors, and edges are dependency connections between the rules. It is available upon request. While DLV\u2203 integrates powerful optimization techniques that VADALOG has yet to incorporate, the latter is also extended with multiple features of practical utility, such as aggregations and equality-generating dependencies. Experiments and Results. We compared DLV\u2203 and VADALOG over distinct reasoning scenarios and QA tasks. The experiments were run on a local installation of the two systems, using a machine equipped with an Intel Core i78665U CPU running at 1.90 GHz and 16 GB of RAM. The results of the experiments, as well as the steps to reproduce them on DLV\u2203, were made public (Baldazzi et al. 2022).\nThe first set of experiments is based on a financial recursive scenario about persons and companies (Bellomarini, Sallinger, and Gottlob 2018) and real datasets extracted from DBPedia (DBpedia 2018). A person of significant control (PSC) for a company is a person that directly or indirectly has some control over the company. The goal of this task is finding all the PSCs for the companies in DBPedia. We ran it for all the 67K available companies and for 1K, 10K, 100K, 500K and 1M of the available persons. Figure 2 illustrates similar execution times for the two systems, all under 5 seconds. Specifically, DLV\u2203 has better times in the first cases, partially due to VADALOG\u2019s longer pre-processing phase for the creation of the query graph. With larger datasets,\nVADALOG\u2019s performance progressively improves, thanks to its efficient recursion control to avoid the exploration of redundant areas of the reasoning space, and its routing strategies to traverse the query graph (Bellomarini et al. 2020).\nThe second set of experiments is based on Doctors, a data integration task from the schema mapping literature (Mecca, Papotti, and Santoro 2014), included in the CHASEBENCH benchmark (Benedikt et al. 2017). It represents a plausible real-world case related to the healthcare domain and it features existential quantification. We ran it for 10K, 100K, 500K and 1M of all the datasets and over 7 distinct queries, of which we report the average times. Figure 3 illustrates that, while both systems show very good behaviour even in the most demanding cases, DLV\u2203 outperforms VADALOG. This is motivated by the powerful optimization techniques integrated in DLV\u2203 that limit the loading of redundant data for the query and reduce the space needed for materializing the output of pchaser (Leone et al. 2019)."
        },
        {
            "heading": "5 Conclusion",
            "text": "Shy Datalog\u2203 and Warded Datalog\u00b1 are two relevant languages that extend Datalog with existential quantification while sustaining decidability of BCQA. Reacting to an explicit interest of the community, we provided an analysis of the fragments in terms of syntactical relationship and query evaluation, as well as an experimental comparison of their main implementations. Future work includes investigating their mutual reduction into the intersection fragment we defined and its impact in terms of their semantic relationship."
        },
        {
            "heading": "Acknowledgements",
            "text": "The work on this paper was supported by the Vienna Science and Technology Fund (WWTF) grant VRG18-013"
        }
    ],
    "title": "On the Relationship between Shy and Warded Datalog+/-",
    "year": 2022
}