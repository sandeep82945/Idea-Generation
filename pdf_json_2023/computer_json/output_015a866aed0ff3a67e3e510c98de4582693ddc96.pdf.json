{
    "abstractText": "We present an approach to task scheduling in heterogeneous multi-robot systems. In our setting, the tasks to complete require diverse skills. We assume that each robot is multi-skilled, i.e., each robot offers a subset of the possible skills. This makes the formation of heterogeneous teams (coalitions) a requirement for task completion. We present two centralized algorithms to schedule robots across tasks and to form suitable coalitions, assuming stochastic travel times across tasks. The coalitions are dynamic, in that the robots form and disband coalitions as the schedule is executed. The first algorithm we propose guarantees optimality, but its run-time is acceptable only for small problem instances. The second algorithm we propose can tackle large problems with short run-times, and is based on a heuristic approach that typically reaches 1x-2x of the optimal solution cost.",
    "authors": [
        {
            "affiliations": [],
            "name": "Ashay Aswale"
        },
        {
            "affiliations": [],
            "name": "Carlo Pinciroli"
        }
    ],
    "id": "SP:e3f9a813917ea7d01f02f7fb5cc0be0798d4c476",
    "references": [
        {
            "authors": [
                "M. Brambilla",
                "E. Ferrante",
                "M. Birattari",
                "M. Dorigo"
            ],
            "title": "Swarm robotics: a review from the swarm engineering perspective",
            "venue": "Swarm Intelligence, vol. 7, pp. 1\u201341, 2013.",
            "year": 2013
        },
        {
            "authors": [
                "R.K. Ramachandran",
                "J.A. Preiss",
                "G.S. Sukhatme"
            ],
            "title": "Resilience by reconfiguration: Exploiting heterogeneity in robot teams",
            "venue": "2019 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2019, pp. 6518\u20136525.",
            "year": 2019
        },
        {
            "authors": [
                "A. Prorok",
                "M. Malencia",
                "L. Carlone",
                "G.S. Sukhatme",
                "B.M. Sadler",
                "V. Kumar"
            ],
            "title": "Beyond robustness: A taxonomy of approaches towards resilient multi-robot systems",
            "venue": "arXiv preprint arXiv:2109.12343, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "L. Barton",
                "V.H. Allan"
            ],
            "title": "Adapting to changing resource requirements for coalition formation in self-organized social networks",
            "venue": "2008 IEEE/WIC/ACM International Conference on Web Intelligence and Intelligent Agent Technology, vol. 2, 2008, pp. 282\u2013285.",
            "year": 2008
        },
        {
            "authors": [
                "L. Capezzuto",
                "D. Tarapore",
                "S. Ramchurn"
            ],
            "title": "Anytime and efficient coalition formation with spatial and temporal constraints",
            "venue": "Multi-Agent Systems and Agreement Technologies, N. Bassiliades, G. Chalkiadakis, and D. de Jonge, Eds. Cham: Springer International Publishing, 2020, pp. 589\u2013606.",
            "year": 2020
        },
        {
            "authors": [
                "L. Capezzuto",
                "D. Tarapore",
                "S.D. Ramchurn"
            ],
            "title": "Multi-agent routing and scheduling through coalition formation",
            "venue": "arXiv preprint arXiv:2105.00451, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "G.A. Korsah",
                "A. Stentz",
                "M.B. Dias"
            ],
            "title": "A comprehensive taxonomy for multi-robot task allocation",
            "venue": "The International Journal of Robotics Research, vol. 32, no. 12, pp. 1495\u20131512, 2013.",
            "year": 2013
        },
        {
            "authors": [
                "C. Nam",
                "D.A. Shell"
            ],
            "title": "Analyzing the sensitivity of the optimal assignment in probabilistic multi-robot task allocation",
            "venue": "IEEE Robotics and Automation Letters, vol. 2, no. 1, pp. 193\u2013200, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "T. Rahwan"
            ],
            "title": "Algorithms for coalition formation in multi-agent systems",
            "venue": "Ph.D. dissertation, University of Southampton, 2007.",
            "year": 2007
        },
        {
            "authors": [
                "M. Guo",
                "B. Xin",
                "J. Chen",
                "Y. Wang"
            ],
            "title": "Multi-agent coalition formation by an efficient genetic algorithm with heuristic initialization and repair strategy",
            "venue": "Swarm and Evolutionary Computation, vol. 55, p. 100686, 2020. [Online]. Available: https://www.sciencedirect.com/ science/article/pii/S221065021831054X",
            "year": 2020
        },
        {
            "authors": [
                "J. Hu",
                "H. Coffin",
                "J. Whitman",
                "M. Travers",
                "H. Choset"
            ],
            "title": "Large-scale heterogeneous multi-robot coverage via domain decomposition and generative allocation",
            "venue": "International Workshop on the Algorithmic Foundations of Robotics, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "C. Huang",
                "R. Liu"
            ],
            "title": "Inner attention supported adaptive cooperation for heterogeneous multi robots teaming based on multi-agent reinforcement learning",
            "venue": "arXiv preprint arXiv:2002.06024, 2020.",
            "year": 2002
        },
        {
            "authors": [
                "C. Lin",
                "W. Luo",
                "K. Sycara"
            ],
            "title": "Online connectivity-aware dynamic deployment for heterogeneous multi-robot systems",
            "venue": "2021 IEEE International Conference on Robotics and Automation (ICRA), 2021, pp. 8941\u20138947.",
            "year": 2021
        },
        {
            "authors": [
                "J. Parker",
                "E. Nunes",
                "J. Godoy",
                "M. Gini"
            ],
            "title": "Exploiting spatial locality and heterogeneity of agents for search and rescue teamwork",
            "venue": "Journal of Field Robotics, vol. 33, no. 7, pp. 877\u2013900, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "A. Visser",
                "L.G. Nardin",
                "S. Castro"
            ],
            "title": "Integrating the latest artificial intelligence algorithms into the robocup rescue simulation framework",
            "venue": "Robot World Cup. Springer, 2018, pp. 476\u2013487.",
            "year": 2018
        },
        {
            "authors": [
                "J. Guerrero",
                "G. Oliver",
                "O. Valero"
            ],
            "title": "Multi-robot coalitions formation with deadlines: Complexity analysis and solutions",
            "venue": "PLOS ONE, vol. 12, no. 1, pp. 1\u201326, 01 2017. [Online]. Available: https://doi.org/10.1371/journal.pone.0170659",
            "year": 2017
        },
        {
            "authors": [
                "S.D. Ramchurn",
                "M. Polukarov",
                "A. Farinelli",
                "N. Jennings",
                "C. Trong"
            ],
            "title": "Coalition formation with spatial and temporal constraints",
            "venue": "International Joint Conference on Autonomous Agents and Multi-Agent Systems (AAMAS 2010) (30/04/10), 2010, pp. 1181\u20131188, event Dates: May 2010. [Online]. Available: https://eprints.soton.ac.uk/268497/",
            "year": 2010
        },
        {
            "authors": [
                "M. Koes",
                "I. Nourbakhsh",
                "K. Sycara"
            ],
            "title": "Constraint optimization coordination architecture for search and rescue robotics",
            "venue": "Proceedings 2006 IEEE International Conference on Robotics and Automation, 2006. ICRA 2006. IEEE, 2006, pp. 3977\u20133982.",
            "year": 2006
        },
        {
            "authors": [
                "K. Leahy",
                "Z. Serlin",
                "C.-I. Vasile",
                "A. Schoer",
                "A.M. Jones",
                "R. Tron",
                "C. Belta"
            ],
            "title": "Scalable and robust algorithms for task-based coordination from high-level specifications (scratches)",
            "venue": "IEEE Transactions on Robotics, vol. 38, no. 4, pp. 2516\u20132535, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "M. Lippi",
                "A. Marino"
            ],
            "title": "A mixed-integer linear programming formulation for human multi-robot task allocation",
            "venue": "2021 30th IEEE International Conference on Robot & Human Interactive Communication (RO-MAN), 2021, pp. 1017\u20131023.",
            "year": 2021
        },
        {
            "authors": [
                "G.A. Korsah",
                "B. Kannan",
                "B. Browning",
                "A. Stentz",
                "M.B. Dias"
            ],
            "title": "xbots: An approach to generating and executing optimal multi-robot plans with cross-schedule dependencies",
            "venue": "2012 IEEE International Conference on Robotics and Automation. IEEE, 2012, pp. 115\u2013122.",
            "year": 2012
        },
        {
            "authors": [
                "A. Mansfield",
                "S. Manjanna",
                "D.G. Macharet",
                "M. Ani Hsieh"
            ],
            "title": "Multi-robot scheduling for environmental monitoring as a team orienteering problem",
            "venue": "2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2021, pp. 6398\u20136404.",
            "year": 2021
        },
        {
            "authors": [
                "A. Prorok",
                "M.A. Hsieh",
                "V. Kumar"
            ],
            "title": "The impact of diversity on optimal control policies for heterogeneous robot swarms",
            "venue": "IEEE Transactions on Robotics, vol. 33, no. 2, pp. 346\u2013358, 2017.",
            "year": 2017
        },
        {
            "authors": [
                "\u2014\u2014"
            ],
            "title": "Fast redistribution of a swarm of heterogeneous robots",
            "venue": "Proceedings of the 9th EAI International Conference on Bio-inspired Information and Communications Technologies (formerly BIONET- ICS), 2016, pp. 249\u2013255.",
            "year": 2016
        },
        {
            "authors": [
                "O. Kosak",
                "C. Wanninger",
                "A. Hoffmann",
                "H. Ponsar",
                "W. Reif"
            ],
            "title": "Multipotent systems: Combining planning, self-organization, and reconfiguration in modular robot ensembles",
            "venue": "Sensors, vol. 19, no. 1, p. 17, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "S. Amador",
                "S. Okamoto",
                "R. Zivan"
            ],
            "title": "Dynamic multi-agent task allocation with spatial and temporal constraints",
            "venue": "Proceedings of the AAAI Conference on Artificial Intelligence, vol. 28, no. 1, 2014.",
            "year": 2014
        },
        {
            "authors": [
                "I. Tkach",
                "S. Amador"
            ],
            "title": "Towards addressing dynamic multi-agent task allocation in law enforcement",
            "venue": "Autonomous Agents and Multi- Agent Systems, vol. 35, pp. 1\u201318, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "S. Mayya",
                "D.S. D\u2019antonio",
                "D. Salda\u00f1a",
                "V. Kumar"
            ],
            "title": "Resilient task allocation in heterogeneous multi-robot systems",
            "venue": "IEEE Robotics and Automation Letters, vol. 6, no. 2, pp. 1327\u20131334, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "R.K. Ramachandran",
                "P. Pierpaoli",
                "M. Egerstedt",
                "G.S. Sukhatme"
            ],
            "title": "Resilient monitoring in heterogeneous multi-robot systems through network reconfiguration",
            "venue": "IEEE Transactions on Robotics, vol. 38, no. 1, pp. 126\u2013138, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "LLC Gurobi Optimization"
            ],
            "title": "Gurobi Optimizer Reference Manual",
            "venue": "2023. [Online]. Available: https://www.gurobi.com",
            "year": 2023
        }
    ],
    "sections": [
        {
            "text": "I. INTRODUCTION\nThe parallelism offered by multi-robot systems is a natural fit for missions in which large numbers of tasks must be achieved as quickly as possible [1]. In realistic settings, each task requires robots with specific skills, such as specific sensors, actuators, or computational resources. However, as the diversity of the tasks increases and the set of required skills grows, it becomes infeasible to envision swarms of identical robots that can interchangeably perform any task. Rather, specialization and redundancy become desirable due to better scale economy and expected long-term resilience [2], [3].\nThe goal of this paper is to contribute to realizing this vision. In our setting, a heterogeneous swarm of multi-skilled robots must perform a set of tasks as quickly as possible. We assume that, due to the diversity of the tasks, the robot must form coalitions, i.e., teams of robots that, combined, offer the required skills for each task to be completed [4]\u2013[6]. In addition to heterogeneity, our problem setting has two crucial features: (i) the diversity of the tasks also requires the coalitions to be dynamically formed and disbanded on a per-task basis; and (ii) all the required robots in a coalition must be present at the same time for the task to progress. These two features imply that, along with the combinatorial problem of forming coalitions, the robots must also schedule the optimal task agenda in a coherent manner.\nThe key difference between our work and existing works is that we consider simultaneously multi-skill coalition formation and multi-robot task scheduling for a complete coverage problem. With reference to the Korsah et al. taxonomy [7], this problem is an instance of cross-schedule dependencies\nAll the authors are with the Dept. of Robotics Engineering, Worcester Polytechnic Institute, Worcester, MA, USA (email: {asaswale, cpinciroli}@wpi.edu).\n(XD), single-task robots (ST), multi-robot tasks (MR), and time-extended assignment (TA). In addition, to make our problem setting more realistic, we enrich our formulation with stochastic travel times across tasks [8].\nWe study two centralized algorithms to solve this problem. The first algorithm is optimal, but it scales poorly with the number of tasks, robots, and skills. In contrast, the second method scales to hundreds of tasks, robots, and skills. Even though the latter method offers no optimality guarantees, we empirically show that its performance is within a factor of 2 with respect to the optimum.\nThe rest of this paper is structured as follows. In Sec. 2 we survey related work on coalition formation and multi robot scheduling. In Sec. 3 we discuss the problem formulation for both of our approaches. In Sec. 4 we analyze the results of both the methods and compare them with each other. We conclude the paper in Sec. 5."
        },
        {
            "heading": "II. RELATED WORK",
            "text": "The problems of task scheduling and coalition formation have received wide attention in the literature. We identified several axes to categorize relevant work in Table I.\nSeveral works study coalition formation without scheduling. Rahwan et al. [9] and Guo et al. [10] focus on homogeneous coalition formation. Rahwan et al. [9] considers\nar X\niv :2\n30 6.\n11 93\n6v 1\n[ cs\n.R O\n] 2\n0 Ju\nn 20\n23\nstatic coalitions in which coalitions, once formed, are kept constant throughout the experiment. Guo et al. [10] compare static and dynamic coalition formation, in which the robots are allowed to change coalition from task to task.\nRecently, several researchers considered coalition formation of heterogeneously skilled robots [11]\u2013[13]. However, they focus on coverage and connectivity problems, neglecting scheduling aspects. Similarly, Barton et al. [4] study coalition formation in a network of heterogeneously skilled agents. At the opposite end of the spectrum, Parker et al. [14] and Visser et al. [15] study search-and-rescue scenarios with a heterogeneous set of robots and focus on scheduling them without coalition formation.\nSignificant effort has been devoted to combining coalition formation with task scheduling [5], [6], [16]\u2013[18]. However, all of these works assume the robots to be homogeneously skilled.\nSome of the closest research to this paper studies coalition formation with heterogeneous robots that also produces an optimal plan with cross-scheduling dependencies [19]\u2013[22]. However, these works do not consider multi-skilled robots; rather, each robot is a specialist of a specific skill.\nProrok et al. [23], [24] and Kosak et al. [25] address multiskilled robots. In the work of Prorok et al., [23], [24], the robots offer a subset of the possible skills, whereas Kosak et al. [25] allow \u201cmultipotent\u201d robots to modify themselves and adapt to the task at hand. However, all these works focus on coalition formation without a scheduling component.\nAmador et. al. [26], [27] addressed a comparable issue, the \u2018Law enforcement problem\u2019 (LEP), which assigns police officers to tasks with unknown locations, arrival times, and importance levels. Although LEP considers cross-scheduling dependencies for multi-skilled agents, their problem statement differs significantly from ours. Their approach concerns time-sensitive tasks with various importance levels and agents who can abandon or ignore tasks if they do not offer a higher utility. In contrast, our problem assumes all tasks are equally important and not time-sensitive. Moreover, our agents cannot abandon any tasks, and all tasks must be completed.\nWe are also interested in the presence of stochastic aspects in the problem statement. The works considered so far lack such a component, but recent research has started to include it. Nam et al. [8], for example, include stochastic travel times in multi-agent task scheduling; however, their work does not require coalitions formation. In the literature on coalitions, stochastic aspects concern resilience and reconfiguration [2], [28], [29], without a scheduling component."
        },
        {
            "heading": "III. APPROACH",
            "text": ""
        },
        {
            "heading": "A. Preliminaries",
            "text": "We consider an environment in which a set of m tasks is scattered. Each task requires a specific set of skills. A task can require any number of skills. In total, across all tasks, l skills are required; some might be in higher demand than others. The mapping between tasks and required skills\nis captured by the binary matrix R, whose element rjs is 1 if task j requires skill s and 0 otherwise.\nA swarm of n robots is deployed in the environment and must perform the tasks as quickly as possible. The robots may start from the same \u2018depot\u2019 or be scattered throughout the environment. We assume that each robot offers a subset of the possible skills, and the robots combined offer all the required skills for the tasks to be completed. We restrict each robot to have a maximum of l/2 skills. The binary matrix Q encodes the mapping between robots and skills. An element qis is 1 if robot i possesses skill s and 0 otherwise."
        },
        {
            "heading": "B. Optimal Formulation",
            "text": "We first discuss a Linear Program that produces the optimal solution to the problem. We use a binary assignment tensor (X) for the formulation. In this tensor, if an element xijk is 1, then robot i attends task k right after task j; otherwise the element is 0. We refer to the robot\u2019s location at the start and the end of the experiment as \u201ctask 0\u201d and \u201ctask m+ 1\u201d respectively.\nWe denote with T the cost tensor that stores the travel time from one task to another. Because the robots might start from different locations, the travel cost from task 0 to the other tasks differs from robot to robot. For this reason, tijk denotes the travel time for robot i to navigate from task j to task k. Travel times at this stage are deterministic; we will explain how to handle stochastic times in Sec. III-B.4.\n1) Valid schedule generation: We now discuss the constraints necessary to generate valid schedules for the robots. Every robot i must start from task 0 (initial location) exactly once (Eq. (1)) and finish its schedule at task (m+ 1) (final location) exactly once (Eq. (2)). Therefore, task 0 is exit-only (Eq. (3)) and task (m+ 1) is entry-only (Eq. (4)).\nFor what concerns the other tasks [1,m], we impose that a task cannot appear twice in a robot\u2019s schedule. To this effect, a robot can enter a task k at most once (Eq. (5)) and exit it at most once (Eq. (6)). In addition, if a robot has visited a task j, it must leave it, and it cannot leave it without first visiting it (Eq. (7)). Finally, robots cannot dwell at a task after visiting it (Eq. (8)).\n\u2200i\u2200k\\{0,m+ 1} m\u2211 j=0 xijk \u2264 1 (5)\n\u2200i\u2200j\\{0,m+ 1} m+1\u2211 k=1 xijk \u2264 1 (6)\n\u2200i\u2200j\\{0,m+ 1} ( m\u2211\nk=0\nxikj = m+1\u2211 k=1 xijk) (7)\n\u2200i\u2200j xijj = 0 (8)\nThese constraints could result in schedules where a robot travels along multiple different paths at the same time. There might be one valid path, starting from task 0 and ending at task m + 1, and an invalid path, looping between three or more tasks. To solve this, we add \u201clazy constraints\u201d that reject a candidate solution if it contains such loops. The algorithm to detect loops is reported in Alg. 1. Intuitively, the algorithm checks the number of tasks covered in the valid path from 0 to m + 1. It then compares this number with the total number of tasks covered in the whole schedule. Dissimilarity in these two numbers indicates the existence of an invalid path in the schedule.\nAlgorithm 1 Detecting loops in a candidate solution for each robot i do\nnext \u2190 0 count \u2190 0 while next is not m+ 1 do\nnext \u2190 argmax k (xi,next,k)\ncount \u2190 count + 1 end while visited \u2190 \u2211m+1 j=0 \u2211m+1 k=0 xijk if count \u0338= visited then return solution is not valid\nend if end for return solution is valid\n2) Skill allocation: To satisfy the skills required by the tasks, a robot i must possess at least one of the required skills to attend a task k \u2208 [1,m].\n\u2200i\u2200k\\{0,m+ 1} m\u2211 j=0 xijk \u2264 l\u2211 s=0 qisrks. (9)\nFor a schedule to be valid, each task must have robots with the required skills. To achieve this, we introduce matrix Z, where zks indicates the number of robots that offer skill s required for task k (Eq. (10)). We ensure that each element in Z is greater than or equal to the corresponding element in the skill requirement matrix R (Eq. (11)).\n\u2200s\u2200k\\{0,m+ 1} zks = n\u2211\ni=0 m\u2211 j=0 xijkqis (10)\n\u2200s\u2200k\\{0,m+ 1} zks \u2265 rks. (11)\nThe above constraints theoretically allow for a task to have more skills than required. In general this is unavoidable, because the robots contributing to a task might have overlapping skills while also contributing unique ones. However, there is a benefit in avoiding schedules where certain tasks are attended by superfluous robots, i.e., robots that have some of the required skills, but none of them is unique within the coalition. The benefit is that rejecting superfluous robots makes the search space much smaller, significantly reducing run-times as we empirically observed in the experiments we ran during early phases of this work.\nTo identify superfluous robots, we use the binary matrix Zb (Eq. (12)) where zbks equals 1 if skill s is excessive for task k, and 0 otherwise.\n\u2200s\u2200k\\{0,m+ 1} zbks = { 0 if zks \u2264 rks 1 otherwise.\n(12)\nWe then impose that, if a robot i attends a task k, the robot must have at least one skill that is not in excess. In Eq. (13) zbksqis is 1 when a skill s of robot i is in excess for task k, and \u2211 s z b ksqis is the number of redundant skills robot i has for task k. Due to constraint (9), if robot i attends task k then\n\u2211 s qisrks \u2265 1, i.e., at least one of robot i\u2019s skills is required by task k. We can then impose the following constraint:\n\u2200i\u2200k\\{0,m+ 1} m\u2211 j=0 xijk = 1 =\u21d2\nl\u2211 s=0 zbksqis \u2264 ( l\u2211 s=0 qisrks ) \u2212 1 (13)\n3) Arrival times: One of the core requirements in a coalition is the simultaneous presence of all its members. In this paper, we assume that the absence of even a single robot makes it impossible for a task to progress. Hence, a task can start when the last required robot has joined the coalition at the location.\nTo express these requirements, we consider the arrival times of each robot. We introduce matrix Y whose elements yik store the arrival time of robot i at task k. If a robot does not visit a task, its corresponding arrival time is set to 0:\n\u2200i, k\\{0} m\u2211 j=0 xijk = 0 =\u21d2 yik = 0 (14)\nTask j starts at the arrival time of the last robot to join the coalition, denoted by ymaxj .\n\u2200j\\{0} ymaxj = max i (yij) (15)\nTo calculate the arrival time yik of robot i at a task k, it is sufficient to sum the time of completion of the previous task j with the travel time from task j to task k (denoted by tijk). The constraint is then\n\u2200i\u2200j\\{m+ 1}\u2200k\\{0} xijk = 1 =\u21d2 yik = y max j + t e j + tijk + t s jk (16)\nwhere tej is the execution time of task j and y max j indicates the starting time of the same task. The stochastic buffer time between the task j and k is given by tsjk which will be covered in Sec. III-B.4. A pictorial representation of this calculation is reported in Fig. 2.\n4) Stochastic travel times: In the quest for a problem formulation that incorporates as many realistic aspects as possible, we include the possibility for travel times to be known only probabilistically. To model travel times as stochastic processes, we assume that the delay can be captured as Gaussian noise G(\u00b5, \u03c3). More specifically, if we denote with t the ideal travel time between two tasks, then\nt\u2217 = t+ G(\u00b5, \u03c3). (17)\nFor each robot in a coalition, we can express the need to arrive at the task as\nP (t < t\u0304) \u2265 \u03f5 (18)\nwhere t\u0304 is the hypothetical starting time of the task. We can develop Eq. (18) as follows:\nt\u2217 = t+ G(\u00b5, \u03c3) \u2264 t\u0304 G(\u00b5, \u03c3) \u2264 t\u0304\u2212 t\n\u03c32G(0, 1) + \u00b5 \u2264 t\u0304\u2212 t P ( \u03c32G(0, 1) + \u00b5 \u2264 t\u0304\u2212 t ) \u2265 \u03f5\nP ( G(0, 1) \u2264 t\u0304\u2212 t\u2212 \u00b5\n\u03c32\n) \u2265 \u03f5\n\u03a6\n( t\u0304\u2212 t\u2212 \u00b5\n\u03c32\n) \u2265 \u03f5\nwhere \u03a6(\u00b7) denotes the cumulative distribution function of G(0, 1). Therefore, indicating with \u03a6inv(\u00b7) the inverse of \u03a6(\u00b7), we can write (\nt\u0304\u2212 t\u2212 \u00b5 \u03c32\n) \u2265 \u03a6inv(\u03f5)\nt\u0304\u2212 t \u2265 \u00b5+ \u03c32\u03a6inv(\u03f5)\nThis calculation allows us to introduce the symbol ts defined as follows:\nts = \u00b5+ \u03c32\u03a6inv(\u03f5) (19)\nwhich indicates a \u201csafety margin\u201d to arrive on time at a task with probability \u03f5 given the mean and standard deviation \u00b5, \u03c3 of the road to that task.\n5) Objective: The cost function we aim to minimize is the total time taken by the robots to complete the tasks. This corresponds to the arrival time of the last robot at task (m+ 1). The objective is therefore\nmin ymaxm+1 (20)\n6) Solving: We use Gurobi [30] to solve the optimization problem. This software is well-known to efficiently produce optimal solutions for convex problems. However, our problem is non-convex, and the objective function (Eq. (20)) hints that multiple equally good solutions will exist."
        },
        {
            "heading": "C. Greedy formulation",
            "text": "The previously discussed method produces an optimal result, but experimental evaluation reveals that it takes a long time to reach a solution. This motivates the need for another method that can solve the same problem quickly, although at the cost of optimality. We propose a simple, but effective greedy solver that produces a quick but sub-optimal result.\nAlgorithm 2 The proposed greedy algorithm 1: while Any task is unsatisfied do 2: (i1, k1), ...\u2190 Robot-task pairs with max contribution 3: (ic, kc)\u2190 The earliest robot-task pair from(i1, k1), ... 4: Assign task kc to the robot ic using Algorithm 3 5: while Unaddressed skill at task kc do 6: id1, ...\u2190Robots with max contributions from remaining\nskills at kc\n7: id \u2190 The earliest robot from id1, ... 8: Assign task kc to the robot id using Algorithm 3 9: end while\n10: ymaxkc \u2190 max i yikc 11: end while\nAlgorithm 3 Assign task k to robot i 1: j \u2190 The current task of robot i 2: xijk = 1 3: yi,k \u2190 ymaxj + tej + tijk + tsjk 4: Update the list of unaddressed skills at task k\n1) Methodology: In this work, we assume that task execution can only start when all the required skills are fulfilled simultaneously. Thus, a coalition might cause its robots to wait idly until the last robot in the coalition arrives. It is thus desirable to have as small coalitions as possible with robots that cover as many skills as possible. On the other hand, only seeking a solution with small coalitions might require few, powerful robots to spend significant time travelling across the environment to attend the assigned tasks. In such a scenario, the generated paths for the robots are not optimal due to the absence of any mechanism to shorten the robots\u2019 travel path. Motivated by these observations, we propose a greedy algorithm that promotes forming small coalitions while also minimizing the distance traveled by the robots.\nOur algorithm first finds the robots that can contribute the most to a task and arrive the soonest. We define a robot\u2019s \u2018contribution\u2019 as the number of previously unoffered skills it can bring to a task. We identify all the robot-task pairs that maximize the robots\u2019 contributions to the tasks (Alg. 2, line 2). If multiple robots contribute equally, we choose the one that can reach the task location first (Alg. 2, line 3). This estimated time of arrival is calculated with the same logic as in Sec. III-B.3.\nWe use Alg. 3 to add the task to the robot\u2019s schedule (line 2), update its arrival time (line 3), and update the task\u2019s requirements (line 4) to account for the skills provided by the attending robot.\nWe now choose a robot coalition to fulfill the skills required for task kc. If the task still requires additional skills\nto start (Alg. 2, line 5) we select the robots that can offer the highest number of the remaining skills (Alg. 2, line 6). If multiple robots are tied, we choose the one that can reach the task location first (Alg. 2, line 7). We then use Algorithm 3 to add the task to the robot\u2019s schedule (Alg. 2, line 8). We repeat this process until all of the task requirements have been fulfilled (Alg. 2, line 5). We then update the task start time for the chosen task kc according to the attending coalition (Alg. 2, line 10).\n2) Correctness of the algorithm: We assert that our algorithm yields a feasible solution in which all tasks are allocated to suitable robots. To establish this claim, we demonstrate that the algorithm assigns each task to a set of appropriate robots. Suppose there is an unassigned task k with unfulfilled requirements, which means the sum of its requirements is greater than 0. The solver must continue until this task is assigned a group of robots that can fulfil all of its requirements. Hence, eventually a robot will choose this task, even if it can only provide a single skill. Once the solver has found a robot for task k, it will search for other robots to fulfil any remaining requirements. A feasible solution requires at least one robot to contribute at least one skill to the remaining requirements. As long as such a robot exists, it will be assigned to task k. Moreover, the solver will not choose a robot that cannot contribute to the task as long as there is a robot that can contribute at least one skill. Therefore, there can be no redundant robot assigned to any task. We conclude that our algorithm always terminates with a feasible solution. Therefore, we can conclude that the proposed greedy algorithm for task allocation is correct and produces a feasible solution."
        },
        {
            "heading": "IV. EXPERIMENTATAL EVALUATION",
            "text": "We conducted experiments with 4 robots and 8 tasks, testing 3 configurations with 2, 4, and 8 skills. Each configuration comprised of 30 unique setups that differed in the location of the tasks, their skill requirements, and the allocation of skills among the robots."
        },
        {
            "heading": "A. Experimental Setup",
            "text": "In our experiments, we define an effective area of 200 \u00d7 200 units, and we assume that each robot can travel 1 unit of distance per time unit. For each configuration setup, we randomly assign the locations and skill requirements for each task. The task execution time of each task is set uniformly at random from the range [0, 100]. We also allocate skills to the robots uniformly at random. We set the starting locations of the robots to be evenly distributed around the center of the experiment area. Specifically, the starting location (pix, p i y) of the ith robot is calculated using the value r = 15 units as follows:\n(pix, p i y) =\n( r sin ( i\u03c0\nn\n) , r cos ( i\u03c0\nn\n)) . (21)\nWe verify the validity of each generated experiment setup by checking the following conditions:\n1) Each robot is not allocated more than l/2 skills;\n2) Every skill is present at least once in the robot pool; 3) Every robot possesses at least one skill.\na) Stochasticity parameters: The value of the mean travel time, denoted by \u00b5, was set to 10% of the time it takes for the robot to travel between tasks. The value of the standard deviation, denoted by \u03c3, was set as a random fraction of \u00b5. Specifically, a value was chosen uniformly at random from the interval [0.05, 0.50] and multiplied by \u00b5 to obtain the final value of \u03c3. This ensured that the amount of variability in the travel times was proportional to the mean travel time. To make the experiment results repeatable, the standard deviation value for each path is assigned at the time of setup generation. This ensures that the same standard deviation values are used throughout all the experiment runs. Finally, the probability of a robot arriving at a task within a given time window, denoted as \u03f5, was set to 0.95 to allow for some flexibility in task scheduling.\nb) Computer specifications: The experiments were run on a computing cluster with the following configuration allocation: AMD EPYC 7543 processors, 22 CPU cores, 156 GB of RAM."
        },
        {
            "heading": "B. Discussion",
            "text": "To evaluate the performance of the two methods, we analyze two key aspects of the solution. The first one is the final cost of the solution produced. This tells us the quality of the produced solution. The second aspect of interest pertains to the wall clock time required to solve the problem. This allows us to assess the efficiency of the two algorithms in terms of the computational resources and time complexity. A sample of optimal solution for a 2-skill, 4-robot, 8-task setup is reported in Figure 3.\n1) Optimal solver: Figure 4 presents the results for the optimal solver. As we double the total number of skills required, both the solution cost and the wall clock solving time (WCST) increase. However, the notable increase is in the WCST of the 8-skilled setups. This indicates a significant increase in the computational resources required to solve the problem at higher scale. In this configuration, some setups required about 2,000 seconds and one of the setup required 5,000 seconds to declare the final solution as optimal. Based on these results, it would not be realistic to solve a problem larger than the setup presented, as the computational resources required would be prohibitively high.\n2) Greedy solver: To analyze the greedy solver, we compared its performance with the optimal solver. Figure 5 compares the performance of the greedy solver to that of the optimal one. In Figure 5a we can see that for the configuration with 2 skills, multiple points lie near 1. This means that most of the solutions were very close to the optimum. The median relative cost performance of the greedy solver was 1.15.\nThe greedy solver performs very well in terms of computational efficiency, as shown in Figure 5b. In 2-skills setups, the median log10 relative run-time is -3.57, indicating that the greedy solver is more than three orders of magnitude faster than the optimal solver. These results showcase the\nfast nature of the greedy solver and its potential for use in scenarios where real-time decision-making is required.\nAs we scale up the problem, the performance of the greedy solver in terms of cost slightly degrades. For the configuration with 8 skills, none of the experiments produced a solution close to the optimum. As indicated by the median cost performance of 1.36, the greedy solutions are off the optimal solution by a significant margin. However, as shown in Figure 5b, most solutions generated using the greedy solver are produced within a factor of 10\u22125 of the time it took to solve the same problem using the optimal method, demonstrating the efficiency of the greedy solver. Although the quality of the solutions generated by the greedy solver may not be very good for larger problem sizes, the method is extremely fast and can be useful for scenarios where quick, \u201cgood enough\u201d decision-making is prioritized over solution optimality.\n3) Optimal solver\u2019s first solution: It is interesting to analyze the time taken by the optimal solver to reach its first solution, neglecting the time needed to verify whether it is optimal. As shown in Figure 6a, for the configuration with 8 skills, the solver rapidly produced a feasible but suboptimal solution. However, it took a significantly longer time to reach the optimal solution and even more time to prove its optimality. This is further illustrated in Figure 6b, which displays the time taken by the solver to obtain the first feasible solution. The optimal solver consistently produces\nthe first solution quickly, but it takes a long time to reach the optimum and prove its optimality (Figure 4b).\nWe compared the performance of the greedy solver with the first solution offered by the optimal solver in Figure 7. As shown in Figure 7a, most of the solutions produced by the greedy solver are better than the first solutions provided by the optimal solver. While the optimal solver\u2019s solutions are superior half of the times with the 8-skill configurations, the greedy solver is still faster. The greedy solver is consistently more than two orders of magnitude faster than the optimal solver, as shown in Figure 7b. The data clearly shows the significant speed advantage of the greedy solver over the optimal solver.\n4) Large-scale experiments: To further investigate the speed and scalability of the proposed methods, we conducted a series of experiments on larger-scale configurations. We set the number of robots at 32 and the number of skills at 64, and generated 30 setups for each of four task counts: 128, 256, 512, and 1,024. For such large scales, the optimal solver failed to produce even the first solution after running for three hours. Hence, we analyze only the greedy solver\u2019s performance in what follows.\nFigure 8 displays the log10 of the wall clock times required by the greedy solver to solve each of these configurations. The results reveal that the log10 of the WCST required to solve the larger-scale configurations increases by approximately 0.6 for each doubling of the number of tasks. In other words, as the number of tasks doubles, the solve times increase by a factor of approximately four. Despite this increase, we consistently obtained solutions for the configuration of 1,024 tasks within 45-50 seconds. These results suggest that the greedy solver can handle large-scale instances efficiently, making it a promising approach for realworld scenarios with a large number of tasks."
        },
        {
            "heading": "V. CONCLUSION",
            "text": "In this work, we presented an approach to task allocation in heterogeneous multi-robot systems. Our problem combines coalition and scheduling of a heterogeneous swarm of multi-skilled robots. Our problem formulation also includes stochastic aspects of travel between any two tasks. We proposed two methods to solve this problem. The first\nproduces an optimal solution at the expense of long runtimes. This method is onsly suitable for small-scale problems where optimality is required. Our second proposed method uses a greedy approach and it quickly produces sub-optimal solutions.\nWe compared the performance of the two methods. We found that the greedy solver is typically between 2x the cost of the optimal solution, but it offers speedups in the order of 105 with respect to the optimal solver. Further, the greedy solver can tackle large-scale scenarios (32 robots, 64 skills, and 1,024 tasks) in less than a minute. This makes the greedy solver a viable option for quick but best-effort decision-making.\nIn future work, we aim to improve the performance of the greedy solver by using better heuristics. We also aim to make the system decentralized to promote parallelism."
        }
    ],
    "title": "Heterogeneous Coalition Formation and Scheduling with Multi-Skilled Robots",
    "year": 2023
}