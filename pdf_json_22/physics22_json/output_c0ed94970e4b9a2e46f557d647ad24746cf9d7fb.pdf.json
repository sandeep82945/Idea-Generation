{
    "abstractText": "A computational model is developed to investigate the jump of a self propelled dolphin out of water. This model relies on the Navier-Stokes equations where a fictitious domain approach with the volume penalization method is used for the fluid structure coupling, and the continuous surface force approach is used to model the water-air interface, the later being tracked in a level-set framework. The dolphin geometry is based on freely available data from the literature. While the body deformation is imposed, the leading linear and angular displacements are computed from the Newton\u2019s laws. Numerical simulations show that it is necessary to generate large propulsives forces to allow the jump out of water. When the dolphin is out of water, its trajectory follows a pure ballistic one.",
    "authors": [
        {
            "affiliations": [],
            "name": "Michel Bergmann"
        }
    ],
    "id": "SP:0e1a1226fc9d050c71d9473ddbb0759950553358",
    "references": [
        {
            "authors": [
                "V Pavlov"
            ],
            "title": "Bioinspiration & biomimetics 1, 31\u201340",
            "venue": "Peskin C 1972 J. Comp. Phys",
            "year": 2006
        },
        {
            "authors": [
                "G Russo",
                "P Smereka"
            ],
            "title": "Level Set Methods and Fast Marching Methods",
            "venue": "Journal of Computational Physics",
            "year": 2000
        },
        {
            "authors": [
                "J Smits A"
            ],
            "title": "Journal of Fluid Mechanics 874",
            "venue": "Journal of Computational Physics 114(1),",
            "year": 2019
        },
        {
            "authors": [
                "M Triantafyllou",
                "G Triantafyllou",
                "D Yue"
            ],
            "title": "Annual Review of Fluid Mechanics 32",
            "venue": "Truscott T T, Epps B P & Belden J 2014 Annual Review of Fluid Mechanics",
            "year": 2000
        }
    ],
    "sections": [
        {
            "text": "propelled dolphin out of water. This model relies on the Navier-Stokes equations where a fictitious domain approach with the volume penalization method is used for the fluid structure coupling, and the continuous surface force approach is used to model the water-air interface, the later being tracked in a level-set framework. The dolphin geometry is based on freely available data from the literature. While the body deformation is imposed, the leading linear and angular displacements are computed from the Newton\u2019s laws. Numerical simulations show that it is necessary to generate large propulsives forces to allow the jump out of water. When the dolphin is out of water, its trajectory follows a pure ballistic one."
        },
        {
            "heading": "1. Introduction",
            "text": "The study of underwater swimming animals is interesting to understand the possible effects related to the evolution, in particular to make link between the geometry of the body, the unsteady nature of the flow, and the unsteady swimming deformations imposed by muscles. The later can be optimized by using the energy enclosed in incoming vortices, in active (Gopalkrishnan et al. 1994, Liao et al. 2003, Fish & Lauder 2006, Triantafyllou et al. 2002) or passive (Beal et al. 2006) ways, or using vortices possibly generated by neighbor fishes (Bergmann & Iollo 2011, Maertens et al. 2017, Li et al. 2022, Gao & Triantafyllou 2018). Vortex induced control by the caudal tails of vortices generated along the fish body (Zhu et al. 2002) is also another mechanism to improve the swimming efficiency. The drag reduction and thrust generation are linked to the generation of an inverse Von Ka\u0301rma\u0301n street, as observed for simple manipulated circular cylinder wake flow (Bergmann et al. 2006).\nA detailed comprehension of all these mechanisms may help to design new concept of\nAutonomous Underwater Vehicles (AUVs). The swimming of a fish has been considered, following the pioneer but controversial work of (Gray 1936), later on called the Gray\u2019s paradox, as being a very efficient mean of locomotion. A review from a fluid mechanics point of view of the Gray\u2019s paradox can be found in (Bale et al. 2014). Also, this type\nof motion allows a maneuverability never reached by the previous generation of AUVs, of torpedo type (Bozkurttas et al. 2009).\nAs already mentioned, dolphin\u2019s kick swimming is an efficient way to move in water.\nHuman swimmers, especially during competitions, try to mimic the dolphin\u2019s kick during the fully immersed stage (von Loebbecke, Mittal, Mark & Hahn 2009, von Loebbecke, Mittal, Fish & Mark 2009b). A comparison of human and cetaceans is given in (von Loebbecke, Mittal, Fish & Mark 2009a).\nThe swimming of an animal in water is a complex and beautiful phenomenon that is\neasy to observe in nature, but difficult to model numerically. The complexity comes from the reciprocal coupling between the fluid and the animal\u2019s body. This phenomenon is even more complex when the animal swims close to the surface, because it is necessary to take into account the deformation of the water surface and the forces related to the surface tension. The complexity is greatest when the animal crosses the surface, typically when it jumps out of the water. High-performance propulsion together with trajectory control to optimize the position at the early jump are required to jump out of water. The jumping dynamics of a variety of aquatic animals are described in (Chang et al. 2019), and of focus on the study of the archer fish jump can be found in (Mendelson & Techet 2020). Examples of jump spinning (twist) maneuvering can be found in (Fish et al. 2006).\nThe goal of this paper is thus to study the dolphin jump in a numerical framework.\nOnly few numerical simulations of dolphin like swimming have been reported in the literature, most of them have been cited above. One reason is that it is difficult to define a realistic dolphin geometry. In this study we will use the freely available geometry of the Lagenorhynchus obliquidens dolphin proposed in (Tanaka et al. 2019). The other reason is, as previously mentioned, the complexity of the numerical modeling. Indeed, it is necessary to model the unsteady fluid structure interactions with large interface deformations and possible large density ratios (body and water interface deformations). In this study we consider a fictitious domain approach where the computational mesh, i.e. grid nodes, does not necessarily follow the interfaces. The dolphin body is considered with the Volume Penalization Method (Angot et al. 1999) and the fluid-structure interface is followed in a Lagrangian way, and the water-air interface is tracked in a Eulerian way using a Level set function (Osher & Sethian 1988, Sethian 1999). Even if it is not a dominant force at the dolphin\u2019s scale, we consider the surface tension using the Continuous Surface Force Method (CSF) originally introduced in (Brackbill et al. 1992). Other fictitious domain approaches can be used to compute large density ratios flows, an as for instance the one recently proposed in (Nangia, Griffith, Patankar & Bhalla 2019, Nangia, Patankar & Bhalla 2019). For simplicity reasons, no skin effects are considered in this study, even if they can play an important role in passive drag reduction (Pavlov 2006).\nThe paper is organized as follows. After having introduced the modeling and\nnumerical methods in \u00a72, including the description of the flow configuration, the governing equations and the associated numerical schemes, we will present the numerical\nresults for dolphin jumps out of water in \u00a73. Some conclusions and perspectives are finally given in \u00a74."
        },
        {
            "heading": "2. Modeling and numerical methods",
            "text": ""
        },
        {
            "heading": "2.1. Flow configuration",
            "text": "A sketch of the flow configuration is given in figure 1. The whole domain is \u2126 = \u2126+f \u222a \u2126 \u2212 f \u222a \u2126s, where \u2126s is the domain for the structure, i.e. the dolphin, \u2126 + f is the domain filled with water, and \u2126\u2212f is the domain filled with air. The two fluid domains are separated by an interface \u0393f , and the structure and the fluid domains are separated by an interface \u0393s. The intersection of \u0393f and \u0393s is noted \u03a3t = \u0393f \u2229\u0393s. For three-dimensional problems, \u03a3t could be a line, usually called the triple line. The external boundary of the domain is noted \u0393e. In what follows, the domain \u2126 is a three-dimensional Cartesian box, and the external boundary is \u0393e = \u0393top\u222a\u0393bottom\u222a\u0393left\u222a\u0393right\u222a\u0393front\u222a\u0393back, where each boundary is defined as indicated by the subscripts. The density of the dolphin is \u03c1s, the density and dynamic viscosity of water are \u03c1 + and \u00b5+, and the density and dynamic viscosity of air are \u03c1\u2212 and \u00b5\u2212.\nThe different domains and interfaces introduced before also depend on time, and\nare mathematically defined by two level-set (Osher & Sethian 1988, Sethian 1999) scalar functions \u03c8f and \u03c8s. Here, the structure is arbitrarily defined by \u03c8s > 0, the interface \u0393s by \u03c8s = 0 and the fluids (water and air) by \u03c8s < 0. Similarly, the water is arbitrarily defined by \u03c8f > 0, the interface \u0393f by \u03c8f = 0, and the air by \u03c8f < 0."
        },
        {
            "heading": "2.2. Governing equations",
            "text": "Without loss of generality, the density \u03c1 \u2208 R and dynamic viscosity \u00b5 \u2208 R of the fluids can be written:\n\u03c1 \u2261 \u03c1(\u03c8f ) = \u03c1\u2212 +H(\u03c8f )(\u03c1+ \u2212 \u03c1\u2212), (1) \u00b5 \u2261 \u00b5(\u03c8f ) = \u00b5\u2212 +H(\u03c8f )(\u00b5+ \u2212 \u00b5\u2212). (2)\nwhere H is the Heaviside function, i.e. H(x < 0) = 0, H(x > 0) = 1, and we can define H(x = 0) = 0.5.\nThe velocity fields is u =\u2208 R3, p \u2208 R is the pressure field and g \u2208 R3 is the gravity\nacceleration vector. The viscous part of the stress tensor is D(u) = \u2207u+ \u2207Tu\n2 . In\nwhat follows, we note u = (u, v, w), where u, v and w denote the velocity components in the x, y and z directions respectively. The incompressible Navier-Stokes equations for both fluids in domain \u2126+f \u222a \u2126 \u2212 f are:\n\u2202u \u2202t + (u \u00b7\u2207)u = \u22121 \u03c1 \u2207p+ 1 \u03c1 \u2207 \u00b7 2\u00b5D(u) + g in \u2126+f \u222a \u2126 \u2212 f , (3)\n\u2207 \u00b7 u = 0 in \u2126+f \u222a \u2126 \u2212 f \u2212, (4)\nwith initial conditions u(x, t = 0) = u0 and p(x, t = 0) = p0, boundary conditions on the external boundary for velocity u(x, t) and pressure p(x, t) for x \u2208 \u0393e, boundary conditions on the structure boundary \u0393s, and conditions through the bi-fluid interface \u0393f .\nOn the fluid-structure interface \u0393s, we have:\nu(x, t) = u\u0302(x, t) on \u0393s. (5)\nwhere the velocity u\u0302(x, t) will be described later on.\nTwo jump conditions have also to be satisfied throught the bi-fluid interface \u0393f .\nThe first kinematic condition is:\n[u] = 0 throught \u0393f . (6)\nThe second dynamic jump condition traduces the equilibrium between pressure forces, the friction forces and the surface tension:\n[\u2212pI + 2\u00b5D(u)] \u00b7 n = \u03c3\u03ban throught \u0393f , (7)\nwhere \u03c3 est the value of the surface tension, \u03ba is the curvature of the interface \u0393f and n is the unit normal to interface \u0393f pointed to the air."
        },
        {
            "heading": "2.3. Fictitious domain approach",
            "text": "The numerical resolution of the Navier-Stokes equations (3) and (4) requires a discretization on a mesh. The difficulty is that the interfaces \u0393f and \u0393s, and thus the domains \u2126+f , \u2126 \u2212 f and \u2126s, are time dependent. Different approaches to taken into account interface conditions (5), (6) and (7) can be envisioned.\nThis first class of methods are based on body-fitted grids. In these methods, degrees\nof freedom are put on the interfaces, and it is thus possible to impose directly the interface conditions (5), (6) and (7). Mesh deformation can be handle with arbitrary Lagrangian-Eulerian (ALE) method. These methods are accurate, but require mesh adaptation and a mesh partitioning for parallel computations.\nA second class of methods, adopted in this study, is based on fictitious domain\napproaches. In these approaches, the interfaces and associated domains, do not covered the same mesh nodes at each time step: the interface can cross a fixed mesh, and no interface markers are thus required. Simple meshes like Cartesian ones can be used. The drawback is that the accuracy at interfaces can be degraded, and an extra work has to be performed to model the interfaces.\nThe goal of fictitious approaches is to add extra force-like terms in the momentum\nequations (3) to take into account the conditions (5), (6) and (7). The condition on the fluid-structure interface is modeled with an extra term s and the two conditions on the bi-fluid interface are modeled with the extra term f .\nThe system (3), (4), (5), (6) and (7) is thus recasted in a system written in the\nwhole domain \u2126:\n\u2202u \u2202t + (u \u00b7\u2207)u = \u22121 \u03c1 \u2207p+ 1 \u03c1 \u2207 \u00b7 2\u00b5D(u) + g + s+ f in \u2126, (8) \u2207 \u00b7 u = 0 in \u2126, (9)\nThe methods used to model the terms s and f have been inspired by the Immersed\nBoundary Method (IBM) introduced by Peskin (Peskin 1972). In this continuous framework, an infinite force applied on a Dirac support function is regularized around the interface. This is mainly done for numerical reasons that will be explained later on.\nIn this study, the fluid structure interface is modeled using the Volume Penalization\nintroduced in (Angot et al. 1999) \u00a72.3.1, and the bi-fluide interface with surface tension is modeled using the Continuous Surface Force (CSF) method introduced in (Brackbill et al. 1992) \u00a72.3.2.\n2.3.1. Modeling of the conditions on the fluid-structure interface \u0393s Among the most popular fictitious approches are the Immersed Boundary Methods (IBM) originally introduced in (Peskin 1972) and later on used in several studies (Mittal & Iaccarino 2005, Mittal et al. 2008, Shirgaonkar et al. 2009) and the Volume Penalization (VP) Method introduced in (Angot et al. 1999) and used for instance in biolocomotion problems (Bergmann & Iollo 2011, Bergmann, Iollo & Mittal 2014, Bergmann & Iollo 2016). Another approche combining IBM and VP has been developed in (Bergmann, Hovnanian & Iollo 2014). Here, we used the VP method with\ns = \u03c7\nK (u\u0302\u2212 u), (10)\nwhere K 1 is the penalization parameter, \u03c7 = H(\u03c8s) is the characteristic function, and u\u0302 is the velocity of the body (on the boundary and inside the body). In domain \u2126\u00b1 we have \u03c8s < 0 and thus \u03c7 = 0, and the Navier-Stokes equations are recovered. In\ndomain \u2126s, we have \u03c8s > 0, and thus \u03c7 = 1, and the dominant term in (3) is \u03c7 K (u\u0302\u2212u) leading to u \u2192K\u21920 u\u0302 in \u2126s. Here, we chose K = 10\u22128. The computation of u\u0302 will be detailed in \u00a72.5.\n2.3.2. Modeling of the conditions on the bi-fluid interface \u0393f The CSF (Continuum Surface Force) has been originally introduced in (Brackbill et al. 1992) and developed in (Sussman et al. 1994). The CSF is to model the surface tension term as an extra volume force f in the momentum equation. The jump\n[\u2212pI + 2\u00b5D(u)] \u00b7 n = \u03c3\u03ban throught \u0393f , (11)\nis considered in an integral form and we have:\nf = 1\n\u03c1 \u03c3\u03ba\u03b4n. (12)\nwhere \u03c3 is the surface tension, \u03ba the curvature of the interface, n the normal to the interface pointing to the air, and \u03b4 the Dirac distribution.\nThe normal n and the curvature \u03ba are:\nn = \u2207\u03c8f \u2016\u2207\u03c8f\u2016 , (13)\n\u03ba = \u2207 \u00b7 (\n\u2207\u03c8f \u2016\u2207\u03c8f\u2016\n) . (14)\nThe problem is relaxed by regularization of the Dirac distribution \u03b4 in a narrow\nband with width\nH (\u03c8f ) =  0 si \u03c8f < \u2212 , 1 2 ( 1 + \u03c8f + 1 \u03c0 sin( \u03c0\u03c8f ) ) si |\u03c8f | \u2264 ,\n1 si \u03c8f > .\n(15)\nThe regularized Dirac distribution is:\n\u03b4 (\u03c8f ) = dH (\u03c8f )\nd\u03c8f =  0 si |\u03c8f | > ,1 2 ( 1 + cos( \u03c0\u03c8f ) ) si |\u03c8f | \u2264 .\n(16)\nThe extra term due to the surface tension is thus finally\nf = 1\n\u03c1 \u03c3\u03ba\u03b4 n. (17)\nFinally, due to the continuous framework introduced beforehand, the jump [u] =\n0 throught \u0393f in equation (6) is naturally satisfied."
        },
        {
            "heading": "2.4. Interface tracking",
            "text": "The model will be closed with the computations of functions \u03c8s and \u03c8f . The definition of these functions is not unique, and due to its hyper-regularity we chose \u03c8f to be\nthe signed distance function, i.e. \u2016\u2207\u03c8f (x)\u2016 = 1 \u2200x. Let d(x) \u2265 0 be the minimal distance from a given point x to the interface \u0393f , we have: \u03c8f (x) = 0 if x \u2208 \u0393f , \u03c8f (x) = +d if x \u2208 \u2126+f , \u03c8f (x) = \u2212d if x \u2208 \u2126\u2212f . (18)\nThe same holds for \u03c8s. The signed distance allows to simplify the computation of the normal and the curvature of the interface, and determine in a more precise way the distance \u03b5 defining the narrow band for CSF regularization.\nThese interfaces, represented by functions \u03c8f and \u03c8s, can be transported in Eulerian\nor Lagrangian ways. Due to possible large deformations and break downs, the bi-fluid interface \u0393f will be defined with a level set function that is able to track such interface with topology changes. The level set \u03c8f is thus transported by:\n\u2202\u03c8f \u2202t +w \u00b7\u2207\u03c8f = 0 in \u2126\u00b1f , (19)\nwhere w can be any desired velocity fields satisfying w(x, t) = u(x, t) \u2200x \u2208 \u0393f . For simplicity reasons we chose w(x, t) = u(x, t) \u2200x \u2208 \u2126, but other choices like the extension velocities can be used (Adalsteinsson & Sethian 1999).\nThe signed distance behavior of the function \u03c8f can be lost integrating (19), and\nit is thus necessary time to time to reinitialize \u03c8f to recover the signed distance function \u2016\u2207\u03c8f (x)\u2016 = 1. One of the most popular algorithm is the first order fast marching (Sethian 1996, Sethian 1999), extended later to higher orders (Ahmed et al. 2011). Another class of method was introduced by Sussman (Sussman et al. 1994). The goal is to solve a partial differential equation to recover the property \u2016\u2207\u03c8f (x)\u2016 = 1. This relaxation method is:\n\u2202\u03c8f \u2202\u03c4 + sign(\u03c80f )(|\u2207\u03c8f | \u2212 1) = 0, (20) \u03c8f (x, \u03c4 = 0) = \u03c8 0 f = \u03c8f (x, t), (21)\nfor a temporal horizon 0 \u2264 \u03c4 \u2264 \u03c4F such that |\u2207\u03c8f (x, \u03c4F )| = 1. The sign function is\nsign(\u03c8f ) =  1, if \u03c8f > 0, 0, if \u03c8f = 0,\n\u22121, if \u03c8f < 0, (22)\nor a regularized version of it.\nIn what follows, the dolphin surface \u0393s will be approximated by a mesh (i.e. with\nmarkers), and it is thus more convenient to use a Lagrangian transport for any mesh point xh:\ndxh dt = u\u0302h, (23)\nwhere the definition and computation of u\u0302 will be defined in \u00a72.5.\nThe signed distance function is recovered computing the minimal distance to the\ninterface:\n\u03c8s(x) = min y\u2208\u0393s \u2016x\u2212 y\u20162S(x). (24)\nwhere S(x) denote the sign applied on a point x, with S(x) > 0 inside the body, and S(x) < 0 outside. This sign function can be computed with simple geometric arguments, from the outward normal to the body.\nThe triple line \u03a3t, defined as being the intersection between \u0393s and \u0393f , has to\nbe modeled. Indeed, without special treatment, due to non-slip boundary condition on \u0393s, the line would never move on \u0393s. In this study we choose the macroscopic model introduced by Cox (Cox 1986). A local force proportional to the deviation of the equilibrium angle (Patankar 2003) is added to allow a displacement of the triple line.\nFinally, since the flows under consideration are turbulent, a turbulence model\nintroduced in (Vreman 2004) is added."
        },
        {
            "heading": "2.5. Dolphin model",
            "text": "The geometry of the Dolphin is built from the stl file given in the supplementary material of (Tanaka et al. 2019). Indeed, the authors have performed a very productive work given lot of material to work with. The geometry is reproduced in Figure 2. The two first figures are the exact geometry given by (Tanaka et al. 2019), and the two last figures are the geometry a little bit remodeled to fit our numerical framework with regular surface mesh.\nThe body velocity is\nu\u0302(x, t) = u(x, t) + u\u03b8(x, t) + u\u0303(x, t) \u2200x \u2208 \u2126s, (25)\nwhere u(x, t) is the linear velocity, u\u03b8(x, t) is the angular velocity and u\u0303(x, t) is the deformation velocity. While the deformation u\u0303(x, t) has to be imposed by swimmer muscles, the linear and angular velocities are the results of the loads generated by the fluid on the body, and are computed from the Newton\u2019s laws.\nIn order to avoid adding extra forces and torques due to deformation, a Procrustes\nanalysis is performed. The deformation must not introduce any linear and angular displacements. We thus compute the linear and angular displacements induced by the imposed deformation, and subtract them to the final admissible deformations. This is actually done in Figure 4.\nThe deformation velocity u\u0303(x, t) can be easily computed following surface markers\nin a Lagrangian way, after having performed the procrustes analysis. To recover u\u0303(x, t) values in \u2126s, interpolation is performed from values at the boundary \u0393s.\nThe swimming law is defined by a deformation of the swimmer midline, also called\nthe backbone. As we will see later on, the dolphin jump can be decomposed in three steps.\n\u2022 The first one is an underwater generation of a propulsive force using a periodic swimming with a large amplitude and frequency.\n\u2022 The second one corresponds to the jump out of the water, i.e. when the dolphin is in the air: the dolphin just imposes (active or passive) a constant curvature along\nthe midline.\n\u2022 The third and last step is another periodic swimming law with a small amplitude when the dolphin is back in water.\nWe consider a backbone deformation in the plan (0, x, y) of the third figure in\nfigure 2, where point O is at the front head of the dolphin and x positive to the right. We consider moreover that the midline for the steady body is 0 \u2264 x \u2264 `, y = 0, where ` is the length of the swimmer.\nMost of the fishes impose the following periodic swimming law (Barrett et al. 1999):\ny(x, t) = a(x) sin(k x\u2212 \u03c9 t), (26)\nwith a constant phase velocity cp = \u03c9/k, where k = 2\u03c0/\u03bb is the wavenumber, corresponding to wavelength \u03bb, \u03c9 is the circular frequency of oscillations, and where a(x) is the envelop defined by a(x) = A/2(c0 + c1(x\u2212 1) + c2(x2 \u2212 1)). Other kinds of swimming laws can be found in (Smits 2019) and (Han et al. 2020). The maximal tail amplitude A/2 is an important parameter for the swimming (Lighthill 1970). Here, we chose c0 = 1, c1 = \u22120.825 and c2 = 1.625 for a unit length fish with 0 \u2264 x \u2264 1. These parameters are used to mimic a thunniform like swimming. Several midline deformations are presented in Figure 3 for one stroke, with A = 0.33.\nInstead imposing directly the swimming law (26), it is more simple to impose\na curvature \u03ba(s) along the midline with curvilinear abscissa s. The curvature corresponding to the swimming law y(s, t) = a(s) sin(k s \u2212 \u03c9 t) for the first and third stage of the jump is:\n\u03ba(s, t) = \u22022y \u2202s2( 1 + ( \u2202y \u2202s )2) 32 . (27) The general curvature imposed on the midline is:\n\u03ba(s, t) = p(t)\u03ba(s, t) + q(t)\u03ba, (28)\nwhere \u03ba is the curvature imposed for the jump, i.e. when the dolphin is in the air, and 0 \u2264 p(t) \u2264 1 and 0 \u2264 p(t) \u2264 1 are two functions, possibly piecewise defined, allowing to go smoothly from step 1 to step 2 and from step 2 to step 3.\nThis swimming law is apply to the dolphin midline (the backbone). All body surface\nmesh nodes are displaced with respect to Euler Bernoulli beam deformation, i.e. each orthogonal section to the backbone for the undeformed shape remains orthogonal to the backbone during the deformation. Eight snapshots of the deformed body shape corresponding to (28) over one periodic stroke (p = 1 and q = 0) are presented in Figure 4. Note that a procrustes analysis is performed.\nFinally, the linear and angular motions are obtained from the Newton\u2019s law m du dt = Fext, dJ\u03c9\ndt = M ext,\n(29)\nwhere m and J are the mass and inertia matrix of the dolphin, and u and \u03c9 denote the linear and angular velocities.\nThe forces and the torques are computed by Fext = \u2212 \u222b\n\u0393s\nT(u, p)n dx+ g, (30)\nMext = \u2212 \u222b\n\u0393s\nr \u2227 T(u, p)n dx, (31)\nwhere T(u, p) = \u2212pI + \u00b5(\u2207u +\u2207uT ) is the stress tensor, n is the unit outward vector to \u0393s, and r = x\u2212 xG with xG the dolphin center of mass.\nThe rotation velocity is given by u\u03b8 = \u03c9 \u2227 r. Note that other methods can be used to computed the forces and torques in fictitious\ndomain approach when no surface markers are available. For instance, the surface integrals in (30) and (31) can be transformed in a control volume integrals (Nangia et al. 2017)."
        },
        {
            "heading": "2.6. Numerical resolution",
            "text": "The Navier-Stokes equations (8) and (9), and associated equations like transport and reinitialization of the level set function, are discretized in space on an uniform Cartesian mesh using finite differences method. The temporal discretization of the NavierStokes equations is based on a fractional step method introduced in (Chorin 1968) and (Temam 1969). The numerical method used in this paper follows (Bergmann & Iollo 2011, Bergmann, Hovnanian & Iollo 2014, Bergmann, Iollo & Mittal 2014, Bergmann & Iollo 2016) and we recall thus only the main steps.\nAll the differential operators are discretized in space using centered second order\nschemes, except the convective terms where up-winding is necessary for stability reasons. The convective terms in the momentum equations are discretized with a classical third order finite differences scheme, while the convective term in the level set transport equation (19) is discretized with a WENO5 scheme (Liu et al. 1994, Jiang & Shu 1996). A total variation diminishing third order Runge-Kutta (RK3-TVD) scheme is used to discretized equation (19) in time. The reinitialization equation (20) is solved using the the subcell fix method proposed in (Russo & Smereka 2000) with extensions developed in (Luddens et al. 2015). It is not necessary to perform a reinitialization step at each time step, and we use the criterion introduced in (Luddens et al. 2015) to decide when it is necessary to perform a reinitialization of the level set function.\nThe integrals over \u0393s involved to evaluate the forces and torques are discretized\nusing the body the surface mesh (that is a tessellation of the surface \u0393s). Since the dolphin\u2019s surface mesh nodes do not coincide with the fluid mesh, the stress tensor is interpolated from fluid mesh to the body surface mesh."
        },
        {
            "heading": "2.7. Numerical validations",
            "text": "The numerical approach presented above has already been validated onto several benchmark problems in our previous publications. Several validations in three dimensions complement numerous validations already performed for two dimensional problems. Our previous validations consider mono-fluid problems, i.e. without bi-fluid interface. A first validation is the sedimentation of a sphere (Bergmann, Iollo & Mittal 2014) for several sphere diameters and fluid viscosities. For bio-inspiration problems involving large deformations, another validation has been performed in (Bergmann & Iollo 2016) onto an eel swimming originally proposed by (Kern & Koumoutsakos 2006)\nand studied numerically thereafter in (Bhalla et al. 2013) and (Bhalla et al. 2014). For both validation problems, the numerical results are in good agreements with reference ones.\nIn what follow, a three-dimensional bi-fluid validation is performed for the entry of\na sphere in water. This problem has been studied experimentally (Aristoff et al. 2010) and (Truscott et al. 2014), and numerically with the commercial software ABAQUS in (Ahmadzadeh et al. 2014).\nA sphere with diameter D = 0.0254m impacts the water surface at V0 = 2.17m/s.\nThe density of the sphere is \u03c1s = 1.14\u03c1 +. The densities and dynamic viscosities of the fluids are \u03c1+ = 1000 kg/m3 and \u00b5+ = 10\u22123 Pa.s for the water, and \u03c1\u2212 = 1.2 kg/m3 and 1.87 \u00b7 10\u22125 Pa.s for the air. The surface tension is \u03c3 = 0.0728N/m. The computational domain under consideration is a Cartesian box with x \u2208 [\u22126, 6] cm, y \u2208 [\u221220, 10] cm and z \u2208 [\u22126, 6] cm. At rest, the air-water interface \u0393f is located at yI = 0 cm, and the initial position of the center of mass of the sphere is xG = (xG, yG, zG) = (0, D/2, 0)m. The computational domain is discretized by 240 \u00d7 600 \u00d7 240 \u2248 35 \u00b7 106 cells, and the step size is h = \u2206x = \u2206y = \u2206z = 0.05 cm. The time step is defined with a CFL condition equal to 0.3.\nNon-slip boundary conditions are applied on all external boundaries. The flow is\ninitially at rest, i.e. u(0,x) = 0.\nFigure 5 presents the image sequences showing the water-entry cavity formed by\nthe sphere until t = 65ms where the Pinch-Off, that is characterized by a cavity closure event, occurs. Results are in good agreement with experimental results (Aristoff et al. 2010) where the Pinch-Off is observed at t = 63.5ms, and with the numerical results (Ahmadzadeh et al. 2014) where the Pinch-Off is observed at t = 64.9ms.\nA time history comparison of experimental (Aristoff et al. 2010), numerical\nABAQUS simulation (Ahmadzadeh et al. 2014) and present numerical results of sphere center depth are shown in Figure 6. The present numerical results are in good agreements with reference results, especially with the experimental ones."
        },
        {
            "heading": "3. Numerical results",
            "text": ""
        },
        {
            "heading": "3.1. Numerical configuration and parameters",
            "text": "The densities and dynamic viscosities of the fluids are \u03c1+ = 1000 kg/m3 and \u00b5+ = 10\u22123 Pa.s for the water, and \u03c1\u2212 = 1.2 kg/m3 and 1.87 \u00b7 10\u22125 Pa.s for the air. The surface tension is \u03c3 = 0.0728N/m.\nThe dolphin geometry is extracted from the supplementary material from (Tanaka\net al. 2019) and the geometry is reproduced in Figure 2. Here, the length of the dolphin is imposed to be ` = 3m, leading to total mass m = 316 kg with \u03c1S = 1000 kg/m 3. The computational domain under consideration is x \u2208 [\u221212, 4]m, y \u2208 [\u22123, 9]m and z \u2208 [\u22122, 2]m. At rest, the air-water interface \u0393f is located at yI = 4.5m, and the center of mass of the dolphin is xG = (xG, yG, zG) = (0, 0, 0)m. The initial orientation of the dolphin is \u03b8 = (\u03b8x, \u03b8y, \u03b8z) = (0, 0, \u03b80). While the initial angular velocity is \u03c9 = 0, the initial dolphin linear velocity is u = (uG, vG, wG) = (0, v0, 0), where v0 can be a positive constant to decrease the distance to reach a sufficient velocity for a real jump, and thus to decrease the size of the computational domain.\nThe velocity boundary condition on the external boundaries \u0393ext are the following.\nOn the side boundaries (left, right, front, back), periodic conditions are imposed, ufront = uback and uleft = uright. No slip boundary conditions are imposed on the bottom ubottom = (0, 0, 0), and streamline type of boundary conditions are imposed on the top, i.e. vtop = 0, \u2202utop \u2202y = \u2202wtop \u2202y = 0. The dolphin surface is discretized with a regular mesh composed by 200 \u00d7 200 = 40, 000 cells, see two bottom figures in 2. Even if large skewness of mesh near fins and\ntails are observed, the mesh is a tessellation of the body surface on which integrals (30) and (31) can be discretized. This mesh is similar to those used in (Bergmann & Iollo 2016, Bergmann, Iollo & Mittal 2014) for carangiform and thunniform swimmers. The computational domain is discretized by 640 \u00d7 480 \u00d7 160 \u2248 50 \u00b7 106 cells, and the step size is h = \u2206x = \u2206y = \u2206z = 0.025m. The time step is defined with a CFL condition equal to 0.3.\nDue to the large dolphin deformations, boundary layers are detached and it is thus\nnot necessary to use a costly boundary layer mesh. The turbulence model introduced in (Vreman 2004) is used. Other turbulence model may be used to study the laminarturbulence transition (Riedeberger & Rist 2012).\nArtificial waves at the air-water interface are generated by a Kelvin-Helmholtz\ninstability using initial conditions u(x, 0) = 0m/s in the water (x \u2208 \u2126+f ) and u(x, 0) 6= 0m/s in the air (x \u2208 \u2126\u2212f ).\nFrom the initial water surface position at yI = 4.5m, we define two other loca-\ntions: the first one is over water, y+I = yI + 0.6m, and the second one is under water, y\u2212I = yI \u2212 0.8m. We denote by T = 0.2 s a transition period over that p goes linearly from 0 to 1 or from 1 to 0.\nThe dolphin body deformation is defined according to the following swimming law.\n(i) In order to produce enough propulsive effect to get out of the water starting only\n4.5m under the surface, we imposed a sinusoidal law with large amplitude and frequency, i.e. A = 1.5m and f = \u03c9/(2\u03c0) = 4Hz , with initial linear transition with p(0) = 0 and p(T ) = 1. This swimming law is performed until the dolphin center of mass yG reaches y + I at time t + I , and we thus have p(t) = 1 \u2200t \u2208 [T, t + I ]. The periodic swimming law is then linearly damped to reach p(t+I + T ) = 0.\n(ii) When the periodic swimming is damped from t = t+I , a mean curvature \u03ba = 1/R\nwith R = 2m is progressively added to the whole midline. The smoothing function q depends on the vertical position of the center of mass such that maximal curvature is obtained when the dolphin is in the air. When yG = yI , at the end of the jump, the function q is damped and the curvature tends to zero.\n(iii) When the dolphin re-enter into the water due to the gravity, more precisely when\nyG < y \u2212 I at t = t \u2212 I , another periodic swimming with A = 1m and f = 2Hz is activated with a linear transition with p(t\u2212I ) = 0 and p(t) = 1 for t \u2265 t \u2212 I + T .\nMathematically, the function p depends on some temporal intervals defined by:\np(t) =  t/T if 0 \u2264 t < T, 1 if T \u2264 t < t+I , (t+I + T \u2212 t)/T if t + I \u2264 t < t + I + T, 0 if t+I + T \u2264 t < t \u2212 I , (t\u2212 t\u2212I )/T if t \u2212 I \u2264 t < t \u2212 I + T,\n1 if t \u2265 t\u2212I + T,\n(32)\nand the function q is linked to the position yG of the dolphin center of mass for\nt \u2264 t\u2212I :\nq(t) = 1\nmax ( 1, 1\n(10\u22124 + minmod{0.7(t\u2212 t+I ), 1} (yG(t)\u2212 y \u2212 I )) 2 ) , (33) where\nminmod{a, b} =  a if |a| < |b|, ab > 0 b if |b| < |a|, ab > 0 0 otherwise,\n(34)\nThis handcrafted law has been developed from several numerical experiments to\nmimic as best as possible the dolphin jump."
        },
        {
            "heading": "3.2. Numerical results",
            "text": "A numerical simulation with \u03b80 = 60 \u25e6 and V = 4m/s is performed using 256 processors. The initial air velocity is u(x, 0) = \u22125m/s for (x) \u2208 \u2126\u2212f . The temporal evolution of functions p and q are given in figure 7(b), where the different time t\u2212I , tI , t + I and the other ones necessary to defined functions p and q are plotted using vertical lines. These lines depend on the vertical position yG of the dolphin center of mass following (32) and (33), see figure 7(a). The periods with p(t) \u2265 0 are highlighted in blue, and the period where q(t) \u2265 0 is highlighted in red. Blank zones thus denote undeformed body shape.\nFigure 8 shows the temporal evolution of the linear and angular position of the\ndolphin, the linear velocity, and the forces and torques exerted by the fluid on the body. The vertical velocity of the dolphin goes from vG = 4m/s at t = 0 s to vG = 6.4m/s at t = t+I , see figure 8(b). Note that we have chosen an initial velocity vG > 0 to make use of a smaller computational domain. After this initial acceleration, the obtained velocity allows the dolphin to go out of water (figure 8(a)). When the dolphin is the air (in the red zone in figure 8), the dolphin vertical velocity vG and the angle \u03b8z start to decrease due to gravity effect and the curvature. After re-entry into water, a new sinusoidal swimming law is performed and the the dolphin swims in the water with a position \u03b8z \u2248 \u221210\u25e6 along which a slight acceleration is observed. Eight snapshots {Si}i=1,..8 uniformly extracted during the actual numerical simulation are presented in figures 9, 10 and 11. These snapshots correspond to {ti}i=1,..8 with ti = 0.45 (i\u2212 1) + 0.6 s and are plotted in figure 8 using vertical black lines. While figures 9 and 10 present the dolphin jump visualisation of the water surface from different views, figure 11 presents snapshots of the Q-crietrion.\nThe two first snapshots S1 and S2 correspond to the first periodic swimming law\nfor propulsion. Snapshots S3 and S4 correspond to a period in the air where maximal curvature \u03ba is imposed. The fifth snapshot, S5 is extracted for almost undeformed body shape when re-entering in water. This deformation corresponds to q \u03ba = 0.007m\u22121 and\np = 0. Finally, snapshots S6, S7 and S8 correspond to the second periodic swimming law when the dolphin is back in water. In water, the vortices generated by the self propelled dolphin are similar to whose observed for most of fish like swimmers (Zhu et al. 2002, Triantafyllou et al. 2000, Liao et al. 2003, Bergmann & Iollo 2016). Other kind of vortices are generated in the shear layer at the water-air interface. Indeed, the initial water and air velocity are respectively u = 0m/s and u = \u22125m/s.\nTrajectories of the dolphin center of mass corresponding to different initial velocity\nv0 and angle \u03b80 are presented in figure 12. As expected, the highest jumps correspond to highest initial velocities. The correlation between initial velocity and the jump can not be easily determined. Indeed, the periodic swimming law is not stopped at the\nsame time during the swimming stroke, thus influencing the jump velocity and angle at y = yI .\nIn what follows we compare the dolphin jump with pure ballistic trajectories. The\nballistic equations are: xb(t) = x0 + v0 t cos(\u03b1),yb(t) = y0 + v0 t sin(\u03b1)\u2212 1 2 g t2,\n(35)\nwhere (x0, y0) is initial projectile position, \u03b1 is the initial trajectory orientation at (x0, y0), v0 is the initial velocity along the \u03b1 direction at (x0, y0), g = 9.81m/s 2 is the gravity acceleration and t is the time. Figure 13 shows the real dolphin trajectory and several ballistic trajectories corresponding to different initial positions (x0, y0).\nFor y0 = yI at t = 0.944 s, i.e. when the dolphin center of mass reach the water\nsurface, large deviations between the dolphin and ballistic trajectories are observed. This is due to the fact that the dolphin is still accelerating (see figure 8). For y0 = y + I = yI + 0.6m at t = 1.117 s, the periodic swimming law is progressively stopped. A part of the dolphin is still in water, the acceleration is positive, and the deviation between the real trajectory and the ballistic trajectory is lower. Finally, for y0 = yI + 0.8m at t = 1.23 s the acceleration tends slowly to zero and the ballistic trajectory almost perfectly matches the real dolphin trajectory, until the dolphin goes back to water at yG = yI . This is an obvious observation since the forces exerted by the air on the dolphin (FX \u2248 6N , see figure 8) are quite low comparing to the inertial effect of a 318 kg dolphin with velocity around 6m/s."
        },
        {
            "heading": "4. Conclusions",
            "text": "In this paper we have developed a numerical model of the dolphin jump. This model deals with complex physical phenomena such as fluid-structure interactions and liquid interface involving large deformations with possible topological changes (bubbles and droplets). The numerical model relies on fictitious domain approaches where the mesh used to solve the fluid does not follow the interfaces. The CSF method is used to model the water-air interface, and the Volume Penalization method is used to take into account the dolphin\u2019s body. The numerical results are qualitatively in good agreements with the dolphin jumps observed in nature. The dolphin has to generate large forces to reach a velocity threshold necessary for the jump. The jump is similar to a ballistic projectile where the resistive forces are neglected. This hypothesis is justified since the computed resistive forces are only around 6 Newtons for a 320 kg dolphin with a velocity around 6m/s. We are now working on the optimization of the initial periodic swimming law to generate maximal acceleration to produce the highest jump."
        },
        {
            "heading": "Acknowledgements",
            "text": "Computer time for this study was provided by the computing facilities MCIA (Me\u0301socentre de Calcul Intensif Aquitain) of the Universite\u0301 de Bordeaux and of the Universite\u0301 de Pau et des Pays de l\u2019Adour."
        }
    ],
    "title": "Numerical modeling of a self propelled dolphin jump out of water",
    "year": 2023
}