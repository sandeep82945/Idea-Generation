{
    "abstractText": "Computing diverse solutions for a given problem, in particular evolutionary diversity optimisation (EDO), is a hot research topic in the evolutionary computation community. This paper studies the Boolean satisfiability problem (SAT) in the context of EDO. SAT is of great importance in computer science and differs from the other problems studied in EDO literature, such as KP and TSP. SAT is heavily constrained, and the conventional evolutionary operators are inefficient in generating SAT solutions. Our approach avails of the following characteristics of SAT: 1) the possibility of adding more constraints (clauses) to the problem to forbid solutions or to fix variables, and 2) powerful solvers in the literature, such as minisat. We utilise such a solver to construct a diverse set of solutions. Moreover, maximising diversity provides us with invaluable information about the solution space of a given SAT problem, such as how large the feasible region is. In this study, we introduce evolutionary algorithms (EAs) employing a well-known SAT solver to maximise diversity among a set of SAT solutions explicitly. The experimental investigations indicate the introduced algorithms\u2019 capability to maximise diversity among the SAT solutions.",
    "authors": [
        {
            "affiliations": [],
            "name": "Adel Nikfarjam"
        },
        {
            "affiliations": [],
            "name": "Ralf Rothenberger"
        },
        {
            "affiliations": [],
            "name": "Frank Neumann"
        },
        {
            "affiliations": [],
            "name": "Tobias Friedrich"
        }
    ],
    "id": "SP:b1833cfb08ba99ab772cbd1a2fc9db029f1080a6",
    "references": [
        {
            "authors": [
                "B. Alexander",
                "J. Kortman",
                "A. Neumann"
            ],
            "title": "Evolution of artistic image variants through feature based diversity optimisation. In: GECCO",
            "year": 2017
        },
        {
            "authors": [
                "M. Allard",
                "S.C. Smith",
                "K.I. Chatzilygeroudis",
                "A. Cully"
            ],
            "title": "Hierarchical quality-diversity for online damage recovery. In: GECCO",
            "year": 2022
        },
        {
            "authors": [
                "C. Ans\u00f3tegui",
                "M.L. Bonet",
                "J. Levy"
            ],
            "title": "Towards industrial-like random SAT instances",
            "venue": "In: IJCAI. pp",
            "year": 2009
        },
        {
            "authors": [
                "J. Bossek",
                "P. Kerschke",
                "A. Neumann",
                "M. Wagner",
                "F. Neumann",
                "H. Trautmann"
            ],
            "title": "Evolving diverse tsp instances by means of novel and creative mutation operators",
            "venue": "Proceedings of the 15th ACM/SIGEVO Conference on Foundations of Genetic Algorithms",
            "year": 2019
        },
        {
            "authors": [
                "J. Bossek",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Breeding diverse packings for the knapsack problem by means of diversity-tailored evolutionary algorithms. In: GECCO",
            "year": 2021
        },
        {
            "authors": [
                "J. Bossek",
                "F. Neumann"
            ],
            "title": "Evolutionary diversity optimization and the minimum spanning tree problem. In: GECCO",
            "year": 2021
        },
        {
            "authors": [
                "J. Bossek",
                "F. Neumann"
            ],
            "title": "Exploring the feature space of TSP instances using quality diversity. In: GECCO",
            "year": 2022
        },
        {
            "authors": [
                "S. Chakraborty",
                "D.J. Fremont",
                "K.S. Meel",
                "S.A. Seshia",
                "M.Y. Vardi"
            ],
            "title": "On parallel scalable uniform SAT witness generation",
            "venue": "In: TACAS. Lecture Notes in Computer Science,",
            "year": 2015
        },
        {
            "authors": [
                "S.A. Cook"
            ],
            "title": "The complexity of theorem-proving procedures",
            "venue": "In: STOC. pp. 151\u2013158",
            "year": 1971
        },
        {
            "authors": [
                "M. Davis",
                "G. Logemann",
                "D.W. Loveland"
            ],
            "title": "A machine program for theorem-proving",
            "venue": "Commun. ACM 5(7),",
            "year": 1962
        },
        {
            "authors": [
                "A.V. Do",
                "J. Bossek",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Evolving diverse sets of tours for the travelling salesperson problem. In: GECCO",
            "year": 2020
        },
        {
            "authors": [
                "A.V. Do",
                "M. Guo",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Analysis of evolutionary diversity optimization for permutation problems",
            "venue": "ACM Trans. Evol. Learn. Optim",
            "year": 2022
        },
        {
            "authors": [
                "R. Dutra",
                "K. Laeufer",
                "J. Bachrach",
                "K. Sen"
            ],
            "title": "Efficient sampling of SAT solutions for testing",
            "venue": "In: ICSE",
            "year": 2018
        },
        {
            "authors": [
                "N. E\u00e9n",
                "N. S\u00f6rensson"
            ],
            "title": "An extensible sat-solver",
            "venue": "SAT. Lecture Notes in Computer Science,",
            "year": 2003
        },
        {
            "authors": [
                "M.C. Fontaine",
                "R. Liu",
                "A. Khalifa",
                "J. Modi",
                "J. Togelius",
                "A.K. Hoover",
                "S. Nikolaidis"
            ],
            "title": "Illuminating mario scenes in the latent space of a generative adversarial network. In: AAAI",
            "year": 2021
        },
        {
            "authors": [
                "M.C. Fontaine",
                "J. Togelius",
                "S. Nikolaidis",
                "A.K. Hoover"
            ],
            "title": "Covariance matrix adaptation for the rapid illumination of behavior space. In: GECCO",
            "year": 2020
        },
        {
            "authors": [
                "T. Friedrich",
                "A. Krohmer",
                "R. Rothenberger",
                "T. Sauerwald",
                "A.M. Sutton"
            ],
            "title": "Bounds on the satisfiability threshold for power law distributed random SAT",
            "venue": "ESA. LIPIcs,",
            "year": 2017
        },
        {
            "authors": [
                "T. Friedrich",
                "A. Krohmer",
                "R. Rothenberger",
                "A.M. Sutton"
            ],
            "title": "Phase transitions for scale-free SAT formulas",
            "venue": "In: AAAI. pp. 3893\u20133899",
            "year": 2017
        },
        {
            "authors": [
                "W. Gao",
                "S. Nallaperuma",
                "F. Neumann"
            ],
            "title": "Feature-based diversity optimization for problem instance classification",
            "venue": "Evol. Comput",
            "year": 2021
        },
        {
            "authors": [
                "X. Li",
                "M.G. Epitropakis",
                "K. Deb",
                "A.P. Engelbrecht"
            ],
            "title": "Seeking multiple solutions: An updated survey on niching methods and their applications",
            "venue": "IEEE Trans. Evol. Comput",
            "year": 2017
        },
        {
            "authors": [
                "M.W. Moskewicz",
                "C.F. Madigan",
                "Y. Zhao",
                "L. Zhang",
                "S. Malik"
            ],
            "title": "Chaff: Engineering an efficient SAT solver",
            "venue": "Proceedings of the 38th Design Automation Conference DAC",
            "year": 2001
        },
        {
            "authors": [
                "A. Nadel"
            ],
            "title": "Generating diverse solutions in SAT",
            "venue": "SAT. Lecture Notes in Computer Science,",
            "year": 2011
        },
        {
            "authors": [
                "A. Neumann",
                "D. Antipov",
                "F. Neumann"
            ],
            "title": "Coevolutionary pareto diversity optimization. In: GECCO",
            "year": 2022
        },
        {
            "authors": [
                "A. Neumann",
                "J. Bossek",
                "F. Neumann"
            ],
            "title": "Diversifying greedy sampling and evolutionary diversity optimisation for constrained monotone submodular functions. In: GECCO",
            "year": 2021
        },
        {
            "authors": [
                "A. Neumann",
                "W. Gao",
                "C. Doerr",
                "F. Neumann",
                "M. Wagner"
            ],
            "title": "Discrepancy-based evolutionary diversity optimization. In: GECCO",
            "year": 2018
        },
        {
            "authors": [
                "A. Neumann",
                "W. Gao",
                "M. Wagner",
                "F. Neumann"
            ],
            "title": "Evolutionary diversity optimization using multi-objective indicators. In: GECCO",
            "year": 2019
        },
        {
            "authors": [
                "A. Nikfarjam",
                "J. Bossek",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Computing diverse sets of high quality TSP tours by eax-based evolutionary diversity optimisation. In: FOGA",
            "year": 2021
        },
        {
            "authors": [
                "A. Nikfarjam",
                "J. Bossek",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Entropy-based evolutionary diversity optimisation for the traveling salesperson problem. In: GECCO",
            "year": 2021
        },
        {
            "authors": [
                "A. Nikfarjam",
                "A.V. Do",
                "F. Neumann"
            ],
            "title": "Analysis of quality diversity algorithms for the knapsack problem",
            "venue": "Lecture Notes in Computer Science,",
            "year": 2022
        },
        {
            "authors": [
                "A. Nikfarjam",
                "A. Moosavi",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Computing high-quality solutions for the patient admission scheduling problem using evolutionary diversity optimisation",
            "venue": "Lecture Notes in Computer Science,",
            "year": 2022
        },
        {
            "authors": [
                "A. Nikfarjam",
                "A. Neumann",
                "J. Bossek",
                "F. Neumann"
            ],
            "title": "Co-evolutionary diversity optimisation for the traveling thief problem",
            "venue": "Lecture Notes in Computer Science,",
            "year": 2022
        },
        {
            "authors": [
                "A. Nikfarjam",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "Evolutionary diversity optimisation for the traveling thief problem. In: GECCO",
            "year": 2022
        },
        {
            "authors": [
                "A. Nikfarjam",
                "A. Neumann",
                "F. Neumann"
            ],
            "title": "On the use of quality diversity algorithms for the traveling thief problem. In: GECCO",
            "year": 2022
        },
        {
            "authors": [
                "N. Rakicevic",
                "A. Cully",
                "P. Kormushev"
            ],
            "title": "Policy manifold search: exploring the manifold hypothesis for diversitybased neuroevolution. In: GECCO",
            "year": 2021
        },
        {
            "authors": [
                "J.P.M. Silva",
                "K.A. Sakallah"
            ],
            "title": "GRASP: A search algorithm for propositional satisfiability",
            "venue": "IEEE Trans. Computers",
            "year": 1999
        },
        {
            "authors": [
                "K. Steckel",
                "J. Schrum"
            ],
            "title": "Illuminating the space of beatable lode runner levels produced by various generative adversarial networks. In: GECCO Companion",
            "year": 2021
        },
        {
            "authors": [
                "T. Ulrich",
                "L. Thiele"
            ],
            "title": "Maximizing population diversity in single-objective optimization. In: GECCO",
            "year": 2011
        },
        {
            "authors": [
                "E. Zardini",
                "D. Zappetti",
                "D. Zambrano",
                "G. Iacca",
                "D. Floreano"
            ],
            "title": "Seeking quality diversity in evolutionary co-design of morphology and control of soft tensegrity modular robots. In: GECCO",
            "year": 2021
        }
    ],
    "sections": [
        {
            "text": "Keywords SAT, Evolutionary Diversity Optimisation"
        },
        {
            "heading": "1 Introduction",
            "text": "Combining the principle of EAs and diversity mechanisms has received increasing attention in the evolutionary computation community. Diversity is widely believed to be essential for survival in dynamic environments. In recent years, the benefits of having access to diverse solutions have been discussed in several studies such as [26, 27]. We can categorise the advantage into three main groups: 1) Robustness against dynamic changes and imperfect modeling, 2) critical information about the solution space, and 3) increasing decision-makers\u2019 ability to consider and choose between diverse alternatives."
        },
        {
            "heading": "1.1 Related Studies",
            "text": "Traditionally, diversity is seen as a means to avoid premature convergence or explore niches in fitness landscapes of optimisation problems. Niching is a technique that usually divides the population into sub-populations. This enables the algorithms to explore and cover a broader range of solution space. Li et al. [20] provides a comprehensive review of niching methods. Two other paradigms, Quality Diversity (QD) and EDO, have recently evolved.\nar X\niv :2\n30 5.\n11 45\n7v 1\n[ cs\n.N E\nQD aims to compute a diverse set of high-quality solutions that differs in terms of some pre-defined behavioural characteristics. In fact, QD sees diversity in exploring best-performing solutions in a behavioural space. QD has been mostly studied in robotics [34, 38, 2], and game designs [36, 16, 15]. Recently, some studies applied QD\u2019s principles to combinatorial optimisation problems [33, 7, 29].\nEDO is another concept recently developed around the idea of diversity. In contrast to the other paradigms, EDO explicitly maximises the structural diversity of solutions, often subject to a constraint on the solutions\u2019 quality. The concept has been defined in [37], which studied an optimisation problem in continuous domains. Afterwards, EDO has been adapted to generating benchmark instances for TSP and a diverse set of images respecting different aesthetics [1, 19]. These studies were followed up by works on the use of star-discrepancy, and multi-objective indicators [25, 26]. Bossek rt al. [4] studied the performance of sophisticated mutations at generating a diverse set of benchmark instances for TSP.\nRecently, the focus of the literature shifted from generating instances to computing solutions for combinatorial optimisation problems. There are several problems studied in that regard, such as the traveling salesperson problem (TSP) [11, 28], the knapsack problem (KP) [5], the quadratic assignment problem [12], the minimum spanning tree problem [6], the traveling thief problem [32], the optimisation of monotone Sub-modular Functions [24], and the patient scheduling problem [30]. In most of the mentioned papers, it has been assumed that we already know the optimal solution. The case of unknown optimal solutions has been studied in [27, 31, 23] by using co-evolutionary techniques or by dividing the population into two subpopulations.\nThis paper studies the SAT problem in the context of EDO. SAT is a classical problem in mathematical logic and computer science. The goal of the problem is to determine if there is an assignment to Boolean variables such that a given Boolean formula evaluates to true. The decision variant of SAT is one of the most well-known and well-studied NP-complete problems [9]. One can find many applications for SAT, such as software verification and constraint solving. [10] is one of the earliest studies carried out in SAT and introduced a method to compute a satisfying assignment. Several efficient approaches have been developed for SAT in recent years, like Conflict-Driven Clause-Learning (CDCL) [35] and the Variable State Independent Decaying Sum (VSIDS) branching heuristic [21]. One very versatile solver incorporating those heuristics is minisat [14]. Minisat has been widely adopted and used as the benchmark solver in the literature. To the best of our knowledge, Nadal [22] is the only study focusing on the diversity of SAT solutions. They studied DIVERSEkSET, the problem of finding a given number of diverse solutions to an SAT problem, by adapting the variable ordering strategy. However, there can be found another paradigm in the SAT literature, called uniform solution sampling. They aim to compute different solutions without taking diversity into account directly. UniGen2 [8] and QuickSampler [13] can be cited here."
        },
        {
            "heading": "1.2 Our Contribution",
            "text": "Several characteristics distinguish SAT from other problems studied in the EDO literature. For instance, the other problems contain either no or few constraints, such as the KP and the TSP. SAT, however, is a highly constrained problem, making it extremely difficult to generate a feasible solution with conventional operators and algorithms in the literature of EDO. In other fields such as constrained programming, researchers often forbid some variables or elements of a given problem to construct a diverse set of solutions. This paper makes a bridge between this approach and EDO. Instead of using conventional operators, which are inefficient in SAT, we introduce evolutionary algorithms (EAs) and operators that iteratively modify the original SAT problem by adding clauses. We use a time-efficient solver, such as minisat, to construct new solutions and utilise EDO approaches to maximise the diversity of the solutions. We define two entropy-based diversity measures to quantify the diversity of SAT assignments. The first measure treats all variables equally, while the other takes the frequency of variables in clauses into account. We also conduct a comprehensive experimental investigation, the goal of which is twofold: First, to evaluate the algorithms\u2019 performance in constructing diverse assignments. And second, to study the correlation among diversity, solution space, and the number of clauses. For this purpose, we use an SAT generator to construct instances with particular characteristics. Then, we observe how the changes in these characteristics affect the diversity of solutions and algorithms\u2019 performances. For example, The introduced mutation outperforms the crossover in the power law SAT instances, while it is the opposite in the uniform instances.\nThe remainder of the paper is structured as follows: We first define SAT and diversity in Section 2. The diversity algorithms are introduced in Section 3. The Comprehensive experimental investigation is presented in Section 4. Finally, we finish with concluding remarks."
        },
        {
            "heading": "2 SAT and Diversity",
            "text": "The Boolean Satisfiability Problem (SAT) consists of determining the existence of an assignment (also called model, interpretation, or solution) satisfying a Boolean formula. A Boolean formula is several literals combined by logical connectives, AND (\u2227), and OR (\u2228), and a literal is a Boolean variable or a negation of a variable (\u00ac). A formula that is formed by the conjunction of a number of clauses (a disjunction of literals) is in conjunctive normal form (CNF). A formula in CNF is satisfiable if there is at least one assignment of the variables such that the formula evaluates to true. In other words, a given CNF formula \u03a6 is true if an assignment x satisfies all clauses in \u03a6; otherwise, \u03a6 is false. This paper aims to compute a diverse set of assignments for a given formula. For this purpose, we require a measure to quantify the diversity of assignments."
        },
        {
            "heading": "2.1 Diversity",
            "text": "We utilise an entropy-based measure of diversity. First, we define some notations. Let X denote the set of Boolean variables, x = (x1, \u00b7 \u00b7 \u00b7 , xn) the assignment, and P a set of assignments, where |X| = n, |P | = \u00b5, m is number of the clauses. Also, let f(xi) be the number of assignments in P , where xi = True. Then, we can calculate the contribution of each variable to diversity as\nh(xi) = { 0 if f(xi) = 0 and \u2212 ( f(xi) \u00b5 ) \u00b7 ln ( f(xi) \u00b5 ) if f(xi) > 0.\nIn line with EDO literature [28, 30], the entropy of P can be calculated by summation of the variables\u2019 contributions: H1(P ) = \u2211 xi\u2208X h(xi)\nNevertheless, some variables appear in clauses more frequently than others. Such variables are likely to be more challenging to diversify, and often play a more important role in the problem. It would be intriguing to give more frequent variables more weight in the entropy calculation such that we first increase such variables\u2019 chance to be diverse and second the measure shows the diversity based on the frequency. Therefore, we define the second measure as follows:\nH2(P ) = \u2211 xi\u2208X r(xi) \u00b7 h(xi),\nwhere r(xi) is the number of occurrences of xi in the formula. It is beneficial to know the maximum diversity for the measures. It can be used as an upperbound to evaluate a diversity of a set of solutions. We can calculate the optimal f(x) from dh(x)df(x) = 0; Thus, the contribution of a variable is at maximum when:\nf(x) = \u00b5 \u00b7 e\u22121\nLet denote the optimal f(x) by f\u2217. Since there is no limitations on the number of true variables in P , H1 and H2 are maximum when {f(x) = f\u2217|\u2200x \u2208 X}. Then, we can calculate Hmax1 and Hmax2 form :\nHmax1 = n \u00b7 f\u2217 Hmax2 = C \u00b7 f\u2217\nwhere C is the number of the literals in \u03a6."
        },
        {
            "heading": "3 Diversity Algorithms",
            "text": "In this paper, we compute a diverse set of assignments for a given SAT problem using the well-known SAT solver minisat. A basic approach to compute P for an SAT problem is to forbid the current assignment by adding a clause to the formula and using the solver to generate another one. For constructing the clause, we can easily make a disjunction of the literals where each literal is the flipped associated variable in the assignment. This method only sometimes leads to a diverse set of assignments. Algorithm 1 outlines the steps required for this approach.\nEDO is another method to compute a diverse set of assignments. We can fix some variables to true or false and then use the solver (minisat) to determine a satisfying assignment with those fixed variables. Afterwards, we can employ\nAlgorithm 1 The basic algorithm 1: while |P | < \u00b5 do 2: Solve the SAT problem by the solver. 3: if A satisfying assignment x was found then 4: Add x to P . 5: Add a clause forbidding x to \u03a6. 6: else 7: Break.\nEDO approaches to maximise diversity. Here, the question is how to choose the fixed variables. In line with most EDO algorithms in the literature, we can randomly select one of the current solutions and, by standard bit flip mutation, flip some of the variable assignments and fix them. In contrast to the standard bit-flip mutation, where the rest of the variables remain unchanged, the solver determines the value for the other variables. Algorithm 2 describes this\nAlgorithm 2 The bit-flip evolutionary algorithm 1: Solve the SAT problem by the solver, and add x to P . 2: while A termination criterion is met do 3: Select an assignment x from P uniformly at random. 4: Select and flip each variable independently with probability 1n . 5: Add clauses fixing the selected variables to \u03a6 6: Solve \u03a6 and determine unfixed variables by the solver. 7: if A satisfying assignment x was found then 8: if |P | > \u00b5 then 9: Add x to P . 10: Remove one individual x from P , where x = arg maxx\u2208P H(P \\ {x}). 11: Remove the clauses that fixing the variables from \u03a6.\napproach. First, we find the first satisfying assignment for \u03a6 by minisat and add it to P . Then, we select a solution in P uniformly at random and choose and flip some variables by the bit-flip mutation. After adding clauses to \u03a6 that fix the selected variables, we solve \u03a6 by minisat. If a satisfying assignment is found, we add it to P ; Then, if |P | > \u00b5, we remove an assignment x with the least contribution to the diversity of P . Finally, we remove the clauses fixing the variables from \u03a6. We repeat these steps until a termination criterion is met.\nAlgorithm 3 The EDO algorithm 1: while |P | < \u00b5 do 2: Randomly fix l variables (determine y). 3: Add the clauses that fix the variables in y to \u03a6 and solve it by the solver. 4: if A satisfying assignment x was found then 5: Add x to P and y to Y . 6: Remove the clauses fixing the variables from \u03a6. 7: while A termination criterion is met do 8: Randomly select one (two) parent(s) yi (yj) from Y . 9: Generate a new solution yo by mutation or crossover + mutation. 10: Add clauses that fix the variables in yo to \u03a6 and solve the SAT problem. 11: if A satisfying assignment x is found then 12: Add x to P and yo to Y . 13: Remove one individual x from P , where x = arg maxx\u2208P H(P \\ {x}), and the corresponding solution y from Y . 14: Remove the clauses fixing the variables from \u03a6.\nSince minisat is an exact algorithm, we can map from the fixed variables to the actual assignments. Thus, we can save the fixed variables and operate (crossover, mutation) on them. So, we have a solution y consisting of a string y\u2032 = (y\u20321, \u00b7 \u00b7 \u00b7 , y\u2032l) showing the index of fixed variables and a Boolean string y\u2032\u2032 showing their values. Let Y be a set of solutions y, where |Y | = \u00b5. Note that from each yi \u2208 Y we can map to xi \u2208 P , by fixing variables in yi and solving the problem by the solver.\n6 2 9\nT F T\n6 2 9 5\nT F T F\n6 9\nT T\n8 2 9\nF F T\n6 2 9\nT F T\n6 2 9\nT F T\nAdding a new Variable\nRemove a variable\nChanging a variable\n(a) Mutation\n6 2 9 5\nT F T F\n7 3\nT F\n7 2 5\nT F F\n7 2 5\nT F F\nIndependently select each variable and its values from the\nRemove the empty cells. Add empty cells to the parent with less variables to have an\nAlgorithm 3 sketches the steps required in this approach. The algorithm consists of two stages, the initialisation and the evolutionary stage. In initialisation, we randomly generate a variable y, where |y| = l. We solve \u03c6 after adding clauses to it. If a satisfying assignment x is found, we add x to P , and y to Y . Afterwards, we remove the clauses fixing the variables from \u03a6. we continue these steps until |P | = \u00b5. Having constructed an initial population, we move to the evolutionary stage. We first select a solution y (or two solutions in case of crossover) from Y and generate an offspring yo by mutation (or first crossover, then mutation). After adding clauses fixing variables in yo to \u03a6, we solve it by the solver. If a satisfying assignment x is found, we add x to P and y to Y ; then remove a x from P and the corresponding y from Y that has the least contribution to the diversity of P . In last step, we remove the clauses fixing the variables from \u03a6. We repeat these steps in the evolutionary stage until a termination criterion is met.\nWe now describe the operators, the mutation and the crossover. For the mutation, we take one of the following three actions uniformly at random: 1) Fix another variable (add a new variable to y), 2) unfix a variable (remove a variable from y), or 3) switch a fixed variable with an unfixed variable, all uniformly at random. The steps are depicted in Figure1a. Turning to the crossover, we add empty cells to the parent with fewer fixed variables to make the sizes equal. Then, we select each variable randomly from the parents with probability 1/2. Figure1b illustrates the steps required by the crossover."
        },
        {
            "heading": "4 Experimental Investigation",
            "text": "This section empirically studies and compares the introduced algorithms. We examine two variations of Algorithm 3: One solely employs mutation as the operator, while the other first generates an offspring by crossover and then uses mutation on the offspring. To examine the algorithms, we use the SAT generator [3] to generate two sets of CNF formulas. The SAT generator is also used for experimental investigations in [18, 17]. In the first set, the variables appear in clauses based on a power law distribution. The following parameters were used in generating the first set: n = 100, k = 3, \u03b2 = 2.75, and m = {210, 220, \u00b7 \u00b7 \u00b7 , 380}, where k and \u03b2 are the number of literals in a clause and the power law exponent, respectively. In the second set, the variables appear in the clauses based on the uniform distribution. The parameters for the set are: n = 100, k = 3, and m = {270, 280, \u00b7 \u00b7 \u00b7 , 440}. We set \u00b5 = 20 and consider 2000"
        },
        {
            "heading": "430 0.153 0.146 2\u22123\u22124\u2212 0.311 0.299 1+3\u22174\u2212 0.326 0.309 1+2\u22174\u2217 0.326 0.309 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "420 0.125 0.118 2\u22123\u22124\u2212 0.603 0.592 1+3\u22174\u2212 0.612 0.599 1+2\u22174\u2217 0.613 0.6 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "410 0.105 0.098 2\u22123\u22124\u2212 0.674 0.669 1+3\u22124\u2212 0.693 0.685 1+2+4\u2217 0.693 0.684 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "400 0.226 0.215 2\u22123\u22124\u2212 0.637 0.622 1+3\u22124\u2212 0.648 0.63 1+2+4\u2217 0.647 0.629 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "390 0.178 0.178 2\u22123\u22124\u2212 0.822 0.822 1+3\u22174\u2212 0.832 0.829 1+2\u22174\u2217 0.835 0.832 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "380 0.058 0.042 2\u22123\u22124\u2212 0.846 0.855 1+3\u22124\u2212 0.876 0.879 1+2+4\u2217 0.877 0.88 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "370 0.084 0.07 2\u22123\u22124\u2212 0.851 0.862 1+3\u22124\u2212 0.884 0.886 1+2+4\u2217 0.891 0.895 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "360 0.08 0.067 2\u22123\u22124\u2212 0.866 0.875 1+3\u22124\u2212 0.893 0.896 1+2+4\u2217 0.898 0.903 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "350 0.073 0.062 2\u22123\u22124\u2212 0.895 0.903 1+3\u22124\u2212 0.916 0.918 1+2+4\u2217 0.918 0.92 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "340 0.135 0.117 2\u22123\u22124\u2212 0.898 0.905 1+3\u22124\u2212 0.928 0.927 1+2+4\u2217 0.933 0.933 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "330 0.157 0.137 2\u22123\u22124\u2212 0.885 0.895 1+3\u22124\u2212 0.927 0.927 1+2+4\u2217 0.932 0.934 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "320 0.062 0.051 2\u22123\u22124\u2212 0.884 0.894 1+3\u22124\u2212 0.936 0.939 1+2+4\u2217 0.937 0.94 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "310 0.09 0.078 2\u22123\u22124\u2212 0.875 0.893 1+3\u22124\u2212 0.943 0.946 1+2+4\u2217 0.945 0.948 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "300 0.183 0.175 2\u22123\u22124\u2212 0.877 0.888 1+3\u22124\u2212 0.943 0.943 1+2+4\u2217 0.946 0.946 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "290 0.202 0.186 2\u22123\u22124\u2212 0.834 0.848 1+3\u22124\u2212 0.937 0.938 1+2+4\u2217 0.939 0.941 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "280 0.241 0.217 2\u22123\u22124\u2212 0.867 0.879 1+3\u22124\u2212 0.944 0.943 1+2+4\u2217 0.944 0.946 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "270 0.295 0.28 2\u22123\u22124\u2212 0.859 0.889 1+3\u22124\u2212 0.942 0.947 1+2+4\u2217 0.94 0.948 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "270 0.089 0.061 2\u22123\u22124\u2212 0.757 0.823 1+3\u22124\u2212 0.911 0.893 1+2+4\u2217 0.896 0.886 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "260 0.114 0.075 2\u22123\u22124\u2212 0.765 0.832 1+3\u22124\u2212 0.925 0.909 1+2+4\u2217 0.914 0.904 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "250 0.171 0.135 2\u22123\u22124\u2212 0.774 0.851 1+3\u22124\u2212 0.928 0.918 1+2+4\u2217 0.911 0.915 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "240 0.046 0.007 2\u22123\u22124\u2212 0.731 0.808 1+3\u22124\u2212 0.933 0.927 1+2+4\u2217 0.921 0.924 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "230 0.055 0.019 2\u22123\u22124\u2212 0.738 0.823 1+3\u22124\u2212 0.937 0.932 1+2+4\u2217 0.925 0.925 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "220 0.052 0.011 2\u22123\u22124\u2212 0.721 0.818 1+3\u22124\u2212 0.945 0.938 1+2+4\u2217 0.932 0.933 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "210 0.055 0.016 2\u22123\u22124\u2212 0.753 0.839 1+3\u22124\u2212 0.962 0.959 1+2+4\u2217 0.953 0.955 1+2+3\u2217",
            "text": "iterations as the termination criterion for the EAs. Instead of 30 independent runs on one formula, we generate 30 formulas for each configuration and run the algorithms once on each formula. This helps us to comprehend more about SAT instances having the same characteristics. In algorithm 3, l should be set with taking number of clauses into account; a higher number of clauses, a lower l. Based on preliminary investigation, We set l = 10 for the lowest number of clauses in each set and gradually decrease it to 4 for the greatest number of clauses. Note that we made sure all formulas were satisfiable (\u03a6 = true)."
        },
        {
            "heading": "4.1 Comparison of algorithms employing H1 as the fitness",
            "text": "In this section, we compare the diversity of SAT assignments obtained by the presented algorithms using H1 as the fitness function. Table 1 summarises the algorithms\u2019 results in the first set of instances (formulas). As expected, the basic algorithm results in assignments with poor diversity; theH1 values range between 1.71 and 10.01. If we normalise these values, the range is from 5% to 27%. The interesting information is that the increase in the clause-variable ratio m n has no meaningful impact on the basic algorithm\u2019s result. The expectation is that an increase in ( m n ) reduces the feasible region which leads to a decrease in the diversity of assignments; we can observe the trend in the results of the other algorithms.\nAs Table 1 shows, the bit-flip brings about considerably more diverse assignments than the basic algorithm. The observation can be confirmed by the Kruskal-Wallis statistical test at a 5% significance level and with Bonferroni correction. The mean of diversity ranges from 44% to 82%. Although there are also fluctuations in the bit-flip algorithm\u2019s results, we can observe a general decrease in diversity by an increase in ( m n ) , especially when m is larger than 290. However, if we only consider the first half of the table, it is exactly the other way around; there is a slight increase in diversity obtained. One plausible reason is that the minisat solver is an exact algorithm, and bit-flip mutation does not impose as significant changes as required. On the other hand, an increase in ( m n ) makes even minor changes significantly impact the assignments. In fact, the feasible regain and the maximum achievable diversity decrease in instances with medium values of ( m n ) compared to small ones, but the bit-flip algorithm performs better in these instances.\nTable 1 indicates the superiority of EDO algorithms in constructing diverse sets of SAT assignments. Both algorithm variants yield decent results and statistically outperform the basic and the bit-flip algorithms in all instances. Here, we can observe a more static downward trend in diversity with increasing mn . It results in sets with more than 90% diversity (normalised H1) for instances with mn \u2264 3. For example, the mean of diversity is 96% in cases where m = 210. Interestingly, the variant using only mutation results in slightly higher diversity. Although, it is not statistically significant.\nTable 2 draws a similar comparison between the algorithms on the set of uniform formulas. Almost all our observations in Table 1 are still valid. Table 2 shows that: 1) Algorithm 1 results in solutions with poor diversity ranging from 6% to 29%. Nevertheless, the diversity obtained in the uniform instances is higher compared to the power law formulas. 2) Bit-flip performs better than the basic algorithm but worse than the EDO variants. The average H1 obtained by the bit-flip algorithms ranges from 0.31 to 0.86. 3) We can observe a descending trend in diversity for increasing mn , especially in the EDO algorithms\u2019 results.\nThe most interesting part of the table is comparing the two EDO variants. In contrast to the power law instances, the variant using both crossover and mutation slightly outperforms the other one in terms of H1. We can get diverse sets of SAT assignments with more than 90% diversity in terms of H1 with the EDO algorithm in cases m \u2264 360."
        },
        {
            "heading": "4.2 Comparison of algorithms employing H2 as the fitness",
            "text": "We examine the algorithms\u2019 performance when H2 is incorporated as the fitness function. The H2 differs from H1 in focusing on the variables with more appearances in \u03a6. Table 3 and 4 summarise the algorithms\u2019 results in the power law and uniform instances, respectively. Since Algorithm 2 does not use any diversity measures inside of the algorithm, the results are the same as those of Table 1 and 2. Nevertheless, the other algorithms\u2019 results in Table 3 and 4 are different to those in Table 1 and 2. As expected, the diversity of assignments slightly increases in terms of H2, while there is a minor drop in H1 values. The change is plausible since we incorporated H2 into the algorithms as the fitness function instead of H1.\nOne may observe that increasing mn affects the capability of the introduced algorithms in terms of H2 more than it does in terms of H1. This is because, in a limited feasible region, the more frequent variables are more likely to be fixed at true or false. Since those variables have a higher weight in the diversity calculation, increases in mn make it challenging to diversify solutions in terms of H2. For instance, Table 3 indicates that the H2 values drop from 0.96 to 0.38 for the"
        },
        {
            "heading": "430 0.146 0.153 2\u22123\u22124\u2212 0.3 0.311 1+3\u22174\u2212 0.309 0.325 1+2\u22174\u2217 0.309 0.326 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "420 0.118 0.125 2\u22123\u22124\u2212 0.593 0.601 1+3\u22124\u2217 0.602 0.611 1+2+4\u2217 0.601 0.61 1+2\u22173\u2217",
            "text": ""
        },
        {
            "heading": "410 0.098 0.105 2\u22123\u22124\u2212 0.672 0.673 1+3\u22124\u2212 0.684 0.688 1+2+4\u2217 0.684 0.686 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "400 0.214 0.226 2\u22123\u22124\u2212 0.623 0.636 1+3\u22124\u2212 0.631 0.646 1+2+4\u2217 0.631 0.645 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "390 0.178 0.178 2\u22123\u22124\u2212 0.824 0.818 1+3\u22174\u2212 0.832 0.829 1+2\u22174\u2217 0.834 0.83 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "380 0.042 0.058 2\u22123\u22124\u2212 0.858 0.843 1+3\u22124\u2212 0.878 0.867 1+2+4\u2217 0.881 0.869 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "370 0.07 0.084 2\u22123\u22124\u2212 0.866 0.851 1+3\u22124\u2212 0.892 0.882 1+2+4\u2217 0.896 0.884 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "360 0.067 0.08 2\u22123\u22124\u2212 0.879 0.865 1+3\u22124\u2212 0.897 0.889 1+2+4\u2217 0.904 0.894 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "350 0.062 0.073 2\u22123\u22124\u2212 0.904 0.892 1+3\u22124\u2212 0.919 0.911 1+2+4\u2217 0.922 0.913 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "340 0.117 0.135 2\u22123\u22124\u2212 0.907 0.895 1+3\u22124\u2212 0.932 0.927 1+2+4\u2217 0.934 0.925 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "330 0.136 0.157 2\u22123\u22124\u2212 0.897 0.882 1+3\u22124\u2212 0.93 0.923 1+2+4\u2217 0.934 0.923 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "320 0.051 0.062 2\u22123\u22124\u2212 0.895 0.881 1+3\u22124\u2212 0.938 0.929 1+2+4\u2217 0.94 0.928 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "310 0.078 0.09 2\u22123\u22124\u2212 0.897 0.874 1+3\u22124\u2212 0.945 0.933 1+2+4\u2217 0.95 0.937 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "300 0.175 0.183 2\u22123\u22124\u2212 0.891 0.871 1+3\u22124\u2212 0.945 0.939 1+2+4\u2217 0.947 0.936 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "290 0.186 0.202 2\u22123\u22124\u2212 0.849 0.83 1+3\u22124\u2212 0.939 0.931 1+2+4\u2217 0.942 0.93 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "280 0.217 0.241 2\u22123\u22124\u2212 0.881 0.863 1+3\u22124\u2212 0.946 0.937 1+2+4\u2217 0.947 0.934 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "270 0.28 0.295 2\u22123\u22124\u2212 0.891 0.849 1+3\u22124\u2212 0.95 0.933 1+2+4\u2217 0.946 0.923 1+2+3\u2217",
            "text": ""
        },
        {
            "heading": "210 0.016 0.055 2\u22123\u22124\u2212 0.849 0.732 1+3\u22124\u2212 0.965 0.944 1+2+4\u2217 0.957 0.912 1+2+3\u2217",
            "text": "EDO algorithm using mutation, while the same sets of solutions result in less severe decreases in H1 values (from 0.94 to 0.5).\nTable 3 also indicates that the gap between the results of the EDO algorithms\u2019 variants is more profound when H2 is used as the fitness function. The statistical tests also confirm the difference in favour of the variant employing the mutation in instances where m = {230, 270, 290}. However, it is the other way around in the uniform instances; the variant that benefits from the crossover performs slightly better, although the difference is statically insignificant. The same observation we had when H1 was incorporated into the algorithm as the fitness function."
        },
        {
            "heading": "4.3 Investigation on Unsatisfiablity",
            "text": "This subsection studies the correlation between the obtained diversity and the number of unsatisfiable formulas generated during the search. The introduced algorithms, as mentioned, modify the formula \u03a6 to generate a new assignment in each iteration. Although \u03a6 is a true formula, it is likely to make it false via modifications during the search. We consider Algorithm 2 for this purpose since the algorithm does not have any hyper-parameters affecting the results.\nFigure 2 depicts the trajectories of diversity and the false \u03a6 generated by Algorithm 2. Note that we normalise the values to plot them in a figure. As expected, the algorithm generates the minimum number of false formulas (false \u03a6) when mn is low. Low values of m n often lead to large feasible regions and, consequently, a larger room to diversify the solutions. In such cases, the modifications of Algorithm 2 are not large enough to cause unsatisfiability for \u03a6. If m n gets sufficiently large, so does the feasible region get more limited, affecting both the diversity and satisfiability rate. Although a disproportional relationship between diversity and unsatisfiability is expected, the figure interestingly\ndepicts a symmetric behaviour. The trajectories are pretty similar for H1 and H2. The sole difference is the range of H1 and H2 in the power law instances, where H2 starts and finishes at slightly higher values."
        },
        {
            "heading": "5 Conclusion",
            "text": "This study presented evolutionary approaches to construct a diverse set of solutions in SAT using the well-known SAT solver, minisat. We first defined two measures to quantify the diversity of solutions. One, which considers and one, which dismisses the frequency of variable appearances in clauses. Then, we introduced two EAs, employing the EDO principle to construct a diverse set of SAT assignments. The EAs iteratively make modifications on a given SAT instance, then solve it with a well-known solver, minisat. Finally, we conducted a comprehensive experimental investigation to assess the algorithms\u2019 performance and study the solution space and unsatisfiability rate. The results indicate the capability of the introduced algorithm to compute highly diverse sets of SAT solutions.\nFor future studies, it is intriguing to study more complicated EAs, like (\u00b5 + \u03bb)-EAs. Although it is challenging in diversity problems to select the next generation when \u03bb is larger than one, an increase in \u03bb can potentially improve the algorithms\u2019 performance. Another possible extension is to study other related problems, such as MaxSAT."
        },
        {
            "heading": "Acknowledgements",
            "text": "This work was supported by the Australian Research Council through grants DP190103894 and FT200100536."
        }
    ],
    "title": "EVOLUTIONARY DIVERSITY OPTIMISATION IN CONSTRUCTING SATISFYING ASSIGNMENTS",
    "year": 2023
}