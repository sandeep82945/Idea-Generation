{
    "abstractText": "We propose a node clustering method for time-varying graphs based on the assumption that the cluster labels are changed smoothly over time. Clustering is one of the fundamental tasks in many science and engineering fields including signal processing, machine learning, and data mining. Although most existing studies focus on the clustering of nodes in static graphs, we often encounter timevarying graphs for time-series data, e.g., social networks, brain functional connectivity, and point clouds. In this paper, we formulate a node clustering of time-varying graphs as an optimization problem based on spectral clustering, with a smoothness constraint of the node labels. We solve the problem with a primaldual splitting algorithm. Experiments on synthetic and real-world time-varying graphs are performed to validate the effectiveness of the proposed approach. INDEX TERMS Spectral clustering, graph signal processing, time-varying graphs, point clouds.",
    "authors": [
        {
            "affiliations": [],
            "name": "Katsuki Fukumoto"
        },
        {
            "affiliations": [],
            "name": "Koki Yamada"
        },
        {
            "affiliations": [],
            "name": "Yuichi Tanaka"
        }
    ],
    "id": "SP:154d91cb9e9d48f67db11897ff7e2df86d5a3428",
    "references": [
        {
            "authors": [
                "R. Xu",
                "D. Wunsch"
            ],
            "title": "Survey of clustering algorithms",
            "venue": "IEEE Transactions on neural networks, vol. 16, no. 3, pp. 645\u2013678, 2005.",
            "year": 2005
        },
        {
            "authors": [
                "A. Saxena",
                "M. Prasad",
                "A. Gupta",
                "N. Bharill",
                "O.P. Patel",
                "A. Tiwari",
                "M.J. Er",
                "W. Ding",
                "C.-T. Lin"
            ],
            "title": "A review of clustering techniques and developments",
            "venue": "Neurocomputing, vol. 267, pp. 664\u2013681, 2017.",
            "year": 2017
        },
        {
            "authors": [
                "E. Min",
                "X. Guo",
                "Q. Liu",
                "G. Zhang",
                "J. Cui",
                "J. Long"
            ],
            "title": "A survey of clustering with deep learning: From the perspective of network architecture",
            "venue": "IEEE Access, vol. 6, pp. 39 501\u201339 514, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "M.C. Nascimento",
                "A.C. De Carvalho"
            ],
            "title": "Spectral methods for graph clustering\u2013a survey",
            "venue": "European Journal of Operational Research, vol. 211, no. 2, pp. 221\u2013231, 2011.",
            "year": 2011
        },
        {
            "authors": [
                "S.E. Schaeffer"
            ],
            "title": "Graph clustering",
            "venue": "Computer science review, vol. 1, no. 1, pp. 27\u201364, 2007.",
            "year": 2007
        },
        {
            "authors": [
                "G. Rossetti",
                "R. Cazabet"
            ],
            "title": "Community discovery in dynamic networks: A survey",
            "venue": "ACM Computing Surveys (CSUR), vol. 51, no. 2, pp. 1\u201337, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "J. Shi",
                "J. Malik"
            ],
            "title": "Normalized cuts and image segmentation",
            "venue": "IEEE Transactions on pattern analysis and machine intelligence, vol. 22, no. 8, pp. 888\u2013905, 2000.",
            "year": 2000
        },
        {
            "authors": [
                "A.Y. Ng",
                "M.I. Jordan",
                "Y. Weiss"
            ],
            "title": "On spectral clustering: Analysis and an algorithm",
            "venue": "Advances in Neural Information Processing Systems, 2002, pp. 849\u2013856.",
            "year": 2002
        },
        {
            "authors": [
                "M.E. Newman"
            ],
            "title": "Fast algorithm for detecting community structure in networks",
            "venue": "Physical review E, vol. 69, no. 6, p. 066133, 2004.",
            "year": 2004
        },
        {
            "authors": [
                "M.E. Newman",
                "M. Girvan"
            ],
            "title": "Finding and evaluating community structure in networks",
            "venue": "Physical review E, vol. 69, no. 2, p. 026113, 2004.",
            "year": 2004
        },
        {
            "authors": [
                "M.E. Newman"
            ],
            "title": "Finding community structure in networks using the eigenvectors of matrices",
            "venue": "Physical review E, vol. 74, no. 3, p. 036104, 2006.",
            "year": 2006
        },
        {
            "authors": [
                "H. Shen",
                "X. Cheng",
                "K. Cai",
                "M.-B. Hu"
            ],
            "title": "Detect overlapping and hierarchical community structure in networks",
            "venue": "Physica A: Statistical Mechanics and its Applications, vol. 388, no. 8, pp. 1706\u20131712, 2009.",
            "year": 2009
        },
        {
            "authors": [
                "U. Von Luxburg"
            ],
            "title": "A tutorial on spectral clustering",
            "venue": "Statistics and computing, vol. 17, no. 4, pp. 395\u2013416, 2007.",
            "year": 2007
        },
        {
            "authors": [
                "S. White",
                "P. Smyth"
            ],
            "title": "A spectral clustering approach to finding communities in graphs",
            "venue": "Proceedings of the 2005 SIAM International Conference on Data Mining. SIAM, 2005, pp. 274\u2013285.",
            "year": 2005
        },
        {
            "authors": [
                "K. Yamada",
                "Y. Tanaka",
                "A. Ortega"
            ],
            "title": "Time-varying graph learning with constraints on graph temporal variation",
            "venue": "arXiv preprint arXiv:2001.03346, 2020.",
            "year": 2001
        },
        {
            "authors": [
                "A. Casteigts",
                "P. Flocchini",
                "W. Quattrociocchi",
                "N. Santoro"
            ],
            "title": "Timevarying graphs and dynamic networks",
            "venue": "International Journal of Parallel, Emergent and Distributed Systems, vol. 27, no. 5, pp. 387\u2013 408, 2012.",
            "year": 2012
        },
        {
            "authors": [
                "J. Zhang",
                "J.M. Moura"
            ],
            "title": "Diffusion in social networks as SIS epidemics: Beyond full mixing and complete graphs",
            "venue": "IEEE Journal of Selected Topics in Signal Processing, vol. 8, no. 4, pp. 537\u2013551, 2014.",
            "year": 2014
        },
        {
            "authors": [
                "M.G. Preti",
                "T.A. Bolton",
                "D. Van De Ville"
            ],
            "title": "The dynamic functional connectome: State-of-the-art and perspectives",
            "venue": "Neuroimage, vol. 160, pp. 41\u201354, 2017.",
            "year": 2017
        },
        {
            "authors": [
                "Y. Wang",
                "Y. Sun",
                "Z. Liu",
                "S.E. Sarma",
                "M.M. Bronstein",
                "J.M. Solomon"
            ],
            "title": "Dynamic graph cnn for learning on point clouds",
            "venue": "Acm Transactions On Graphics (tog), vol. 38, no. 5, pp. 1\u201312, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "S. Tabassum",
                "F.S. Pereira",
                "S. Fernandes",
                "J. Gama"
            ],
            "title": "Social network analysis: An overview",
            "venue": "Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery, vol. 8, no. 5, p. e1256, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "C.W. Lynn",
                "D.S. Bassett"
            ],
            "title": "The physics of brain network structure, function and control",
            "venue": "Nature Reviews Physics, vol. 1, no. 5, pp. 318\u2013 332, 2019.",
            "year": 2019
        },
        {
            "authors": [
                "W. Shi",
                "R. Rajkumar"
            ],
            "title": "Point-gnn: Graph neural network for 3d object detection in a point cloud",
            "venue": "Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, 2020, pp. 1711\u20131719.",
            "year": 2020
        },
        {
            "authors": [
                "J. Hopcroft",
                "O. Khan",
                "B. Kulis",
                "B. Selman"
            ],
            "title": "Tracking evolving communities in large linked networks",
            "venue": "Proceedings of the National Academy of Sciences, vol. 101, no. suppl 1, pp. 5249\u20135253, 2004.",
            "year": 2004
        },
        {
            "authors": [
                "T. Aynaud",
                "J.-L. Guillaume"
            ],
            "title": "Static community detection algorithms for evolving networks",
            "venue": "8th International Symposium on Modeling and Optimization in Mobile, Ad Hoc, and Wireless Networks. IEEE, 2010, pp. 513\u2013519.",
            "year": 2010
        },
        {
            "authors": [
                "J. Sun",
                "C. Faloutsos",
                "S. Papadimitriou",
                "P.S. Yu"
            ],
            "title": "Graphscope: Parameter-free mining of large time-evolving graphs",
            "venue": "Proceedings of the 13th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2007, pp. 687\u2013696.",
            "year": 2007
        },
        {
            "authors": [
                "F. Liu",
                "D. Choi",
                "L. Xie",
                "K. Roeder"
            ],
            "title": "Global spectral clustering in dynamic networks",
            "venue": "Proceedings of the National Academy of Sciences, vol. 115, no. 5, pp. 927\u2013932, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "A. Karaaslanli",
                "S. Aviyente"
            ],
            "title": "Constrained spectral clustering for dynamic community detection",
            "venue": "ICASSP 2020-2020 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP). IEEE, 2020, pp. 8474\u20138478.",
            "year": 2020
        },
        {
            "authors": [
                "L. Condat"
            ],
            "title": "A primal\u2013dual splitting method for convex optimization involving Lipschitzian, proximable and linear composite terms",
            "venue": "Journal of optimization theory and applications, vol. 158, no. 2, pp. 460\u2013479, 2013.",
            "year": 2013
        },
        {
            "authors": [
                "K. Fukumoto",
                "K. Yamada",
                "Y. Tanaka"
            ],
            "title": "Node clustering of timevarying graphs based on temporal label smoothness",
            "venue": "Proceedings of the 2021 Asia-Pacific Signal and Information Processing Association Annual Summit and Conference (APSIPA ASC). IEEE, 2021, pp. 324\u2013329.",
            "year": 2021
        },
        {
            "authors": [
                "D.I. Shuman",
                "S.K. Narang",
                "P. Frossard",
                "A. Ortega",
                "P. Vandergheynst"
            ],
            "title": "The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains",
            "venue": "IEEE signal processing magazine, vol. 30, no. 3, pp. 83\u201398, 2013.",
            "year": 2013
        },
        {
            "authors": [
                "A. Ortega",
                "P. Frossard",
                "J. Kova\u010devi\u0107",
                "J.M. Moura",
                "P. Vandergheynst"
            ],
            "title": "Graph signal processing: Overview, challenges, and applications",
            "venue": "Proceedings of the IEEE, vol. 106, no. 5, pp. 808\u2013828, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "L. Hagen",
                "A.B. Kahng"
            ],
            "title": "New spectral methods for ratio cut partitioning and clustering",
            "venue": "IEEE transactions on computer-aided design of integrated circuits and systems, vol. 11, no. 9, pp. 1074\u2013 1085, 1992.",
            "year": 1992
        },
        {
            "authors": [
                "D. Wagner",
                "F. Wagner"
            ],
            "title": "Between min cut and graph bisection",
            "venue": "International Symposium on Mathematical Foundations of Computer Science. Springer, 1993, pp. 744\u2013750.",
            "year": 1993
        },
        {
            "authors": [
                "L. Hagen",
                "A. Kahng"
            ],
            "title": "Fast spectral methods for ratio cut partitioning and clustering",
            "venue": "1991 IEEE International Conference on Computer-Aided Design Digest of Technical Papers. IEEE Computer Society, 1991, pp. 10\u201311.",
            "year": 1991
        },
        {
            "authors": [
                "P.K. Chan",
                "M.D. Schlag",
                "J.Y. Zien"
            ],
            "title": "Spectral k-way ratiocut partitioning and clustering",
            "venue": "IEEE Transactions on computer-aided design of integrated circuits and systems, vol. 13, no. 9, pp. 1088\u2013 1096, 1994.",
            "year": 1994
        },
        {
            "authors": [
                "T. Roxborough",
                "A. Sen"
            ],
            "title": "Graph clustering using multiway ratio cut (Software demonstration)",
            "venue": "International Symposium on Graph Drawing. Springer, 1997, pp. 291\u2013296.",
            "year": 1997
        },
        {
            "authors": [
                "V.D. Blondel",
                "J.-L. Guillaume",
                "R. Lambiotte",
                "E. Lefebvre"
            ],
            "title": "Fast unfolding of communities in large networks",
            "venue": "Journal of statistical mechanics: theory and experiment, vol. 2008, no. 10, p. P10008, 2008. 10 VOLUME , <Society logo(s) and publication title will appear here.>",
            "year": 2008
        },
        {
            "authors": [
                "M.-G. Gong",
                "L.-J. Zhang",
                "J.-J. Ma",
                "L.-C. Jiao"
            ],
            "title": "Community detection in dynamic social networks based on multiobjective immune algorithm",
            "venue": "Journal of computer science and technology, vol. 27, no. 3, pp. 455\u2013467, 2012.",
            "year": 2012
        },
        {
            "authors": [
                "A. Lancichinetti",
                "S. Fortunato",
                "F. Radicchi"
            ],
            "title": "Benchmark graphs for testing community detection algorithms",
            "venue": "Physical review E, vol. 78, no. 4, p. 046110, 2008.",
            "year": 2008
        },
        {
            "authors": [
                "T. Yang",
                "Y. Chi",
                "S. Zhu",
                "Y. Gong",
                "R. Jin"
            ],
            "title": "A bayesian approach toward finding communities and their evolutions in dynamic social networks",
            "venue": "Proceedings of the 2009 SIAM International Conference on Data Mining. SIAM, 2009, pp. 990\u20131001.",
            "year": 2009
        },
        {
            "authors": [
                "\u2014\u2014"
            ],
            "title": "Detecting communities and their evolutions in dynamic social networks\u2014a bayesian approach",
            "venue": "Machine learning, vol. 82, no. 2, pp. 157\u2013189, 2011.",
            "year": 2011
        },
        {
            "authors": [
                "N. Parikh",
                "S. Boyd"
            ],
            "title": "Proximal algorithms",
            "venue": "Foundations and Trends in optimization, vol. 1, no. 3, pp. 127\u2013239, 2014.",
            "year": 2014
        },
        {
            "authors": [
                "L. Condat",
                "A. Hirabayashi"
            ],
            "title": "Cadzow denoising upgraded: A new projection method for the recovery of dirac pulses from noisy linear measurements",
            "venue": "Sampling Theory in Signal and Image Processing, vol. 14, no. 1, pp. 17\u201347, 2015.",
            "year": 2015
        },
        {
            "authors": [
                "F. Andersson",
                "M. Carlsson",
                "J.-Y. Tourneret",
                "H. Wendt"
            ],
            "title": "A new frequency estimation method for equally and unequally spaced data",
            "venue": "IEEE Transactions on Signal Processing, vol. 62, no. 21, pp. 5761\u2013 5774, 2014.",
            "year": 2014
        },
        {
            "authors": [
                "P.W. Holland",
                "K.B. Laskey",
                "S. Leinhardt"
            ],
            "title": "Stochastic blockmodels: First steps",
            "venue": "Social networks, vol. 5, no. 2, pp. 109\u2013137, 1983.",
            "year": 1983
        },
        {
            "authors": [
                "A. Banerjee",
                "C. Krumpelman",
                "J. Ghosh",
                "S. Basu",
                "R.J. Mooney"
            ],
            "title": "Model-based overlapping clustering",
            "venue": "Proceedings of the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, 2005, pp. 532\u2013537.",
            "year": 2005
        },
        {
            "authors": [
                "J. Gall",
                "C. Stoll",
                "E. De Aguiar",
                "C. Theobalt",
                "B. Rosenhahn",
                "H.- P. Seidel"
            ],
            "title": "Motion capture using joint skeleton tracking and surface estimation",
            "venue": "2009 IEEE Conference on Computer Vision and Pattern Recognition. IEEE, 2009, pp. 1746\u20131753. VOLUME , 11",
            "year": 2009
        }
    ],
    "sections": [
        {
            "text": "INDEX TERMS Spectral clustering, graph signal processing, time-varying graphs, point clouds.\nI. INTRODUCTION CLUSTERING is an important and fundamental tech-nique in signal processing, machine learning, and data mining [1]\u2013[3]. Features of the data points belonging to the same community are expected to have similar characteristics and vice versa. That is, the intra-community relationship is stronger than that for the inter-community. Such an underlying relationship is often given by a graph, where nodes of the graph correspond to the data points, and the relationships among the data points are given by edges. Therefore, clustering nodes of the graph is an important and widely studied problem [4]\u2013[6].\nMany methods have been proposed for graph node clustering [7]\u2013[12]. In this paper, we focus on unsupervised learning where it is assumed that we have a graph, but we do not have training data associated with it.\nUnsupervised clustering can be classified into two approaches. One is the node-domain approach, where the nodes are clustered based on several node-wise features. Its examples include clustering based on a goodness-of-partition metric called modularity [9]. The other is the spectraldomain approach, where the node clustering is performed based on the spectral characteristics of graphs, e.g., the\npolarities of elements in eigenvectors of a graph operator, e.g., graph Laplacian [13]. Its representative method is the well-known spectral clustering (SC) [14]. Note that the nodeand spectral-domain approaches are related to each other. For example, SC with normalized graph Laplacian is an approximation of the minimum cut problem [7], [8].\nThese existing node clustering methods are mostly designed for static graphs. However, we often encounter timevarying (TV) graphs, i.e., a set of graphs where each graph represents a relationship between nodes at a certain time slot [15], [16]. Examples of TV graphs include social networks [17], brain functional connectivity [18], and point clouds [19]. TV graph clustering is a crucial problem since TV graphs are found in many applications mentioned above: For example, clustering of social networks can help us understand human behavior [20], that of brain functional connectivity could contribute to understanding the brain activity [21], and that of point clouds could be utilized for autonomous driving [22].\nThe static approach can be used for TV graph clustering by applying it independently at each time slot, however, this does not capture the temporal relationship or evolution of the clusters. Nevertheless, there exist few clustering methods\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nVOLUME , 1\nar X\niv :2\n30 5.\n06 57\n6v 1\n[ cs\n.L G\n] 1\n1 M\nAuthor et al.:\nfor TV graph clustering, and most existing algorithms are designed in an ad-hoc extension of the static methods (please see Section II-B for details) [23]\u2013[27].\nIn this paper, we propose a TV graph clustering method as an extension of the (static) SC for capturing the smooth temporal evolution of clusters. To capture temporal evolution, we assume a label smoothness property: only a small number of nodes changed their cluster membership at each time slot. Broadly speaking, time-series data points could change their relationships smoothly over time. For example, friendships, environments measured by sensor networks, and pixel values in videos, may change gradually over time. Feature values in machine learning may also gradually change over time in a high-dimensional space. Therefore, it is natural to assume their memberships, i.e., clusters, to be smoothly changed (or not-so-frequently changed) over time as well as their feature values. To reflect such a smoothness assumption, we propose a new regularization term that is incorporated with the proposed SC formulation. We then rewrite the problem so that it can be solved using a primal-dual splitting algorithm [28].\nWe perform our proposed TV graph clustering for synthetic graphs and real-world point cloud data. In both cases, the proposed method efficiently clusters TV graphs compared to the existing several static and TV graph clustering methods.\nIn our preliminary study [29], we proposed a basic methodology for the proposed TV graph clustering. In this paper, we significantly extend the preliminary version by showing a relationship between the static version of SC and the proposed TV graph clustering, reformulating the objective function, and performing comprehensive experiments.\nThe remainder of this paper is organized as follows. Notation used throughout the paper is defined in the following. Section II describes related works for graph clustering. The proposed method is described in Section III. Section IV provides experimental results with synthetic and real-world data. Finally, we conclude the paper in Section V.\nNotation In this paper, we consider a weighted undirected graph G = (V,E,W), where V := {v0, v1, . . . } is a set of nodes, E is a set of edges, and W \u2208 RN\u00d7N is a weighted adjacency matrix. The number of nodes is given by N = |V |. Each element of the weighted adjacency matrix is defined as\n[W]ij = { wij if vi and vj are connected, 0 otherwise.\n(1)\nThat is, wij \u2265 0 is the weight of the edge between vi and vj . In addition, the degree of the ith node, di, is given by\ndi = N\u2211 j=1 wij (2)\nwhere D := diag(d0, d1, . . . ) is called a degree matrix. Using D and W, a combinatorial graph Laplacian is given\nby L = D\u2212W. (3)\nA graph signal is defined as f : V \u2212\u2192 R [30], [31]. This can be written by a vector f \u2208 RN whose ith element, fi, is a signal value at the node vi. The quadratic form of the graph Laplacian is given by\nf>Lf = 1\n2 N\u2211 i,j=1 wij (fi \u2212 fj)2 . (4)\nThis is widely used for a smoothness measure of the graph signal f on G [31]."
        },
        {
            "heading": "II. RELATED WORK",
            "text": "In this section, we review existing works for static and TV graph clustering especially focusing on SC [14] since our work is based on the SC algorithm."
        },
        {
            "heading": "A. SPECTRAL CLUSTERING",
            "text": "Here, we describe the formulation of SC for static graphs [13]. The goal of clustering V of G is to divide the nodes so that they are strongly connected within the same cluster and are weakly connected between different clusters.\nFirst, let us define the strength of the connection between clusters. For a set of nodes A \u2282 V and A\u0304 := V \\ A, the connection strength between A and A\u0304 is defined as\nc(A, A\u0304) := \u2211\ni\u2208A,j\u2208A\u0304\nwij . (5)\nFor a given K, clustering should be performed by choosing a partition of A1, ..., AK which minimizes Cut given by\nCut (A1, . . . , AK) := 1\n2 K\u2211 k=1 c ( Ak, A\u0304k ) . (6)\nWe often need to balance the number of nodes in |Ai| to avoid very small clusters. For this purpose, RatioCut is proposed in [13], [32]. Its cost function is defined as follows:\nRatioCut (A1, . . . , AK) := K\u2211 k=1\nCut ( Ak, A\u0304k ) |Ak| . (7)\nHereafter, we assume K = 2 for simplicity. This can be straightforwardly generalized for K > 2. In RatioCut, the problem to be solved is formulated by using (7) as follows:\nmin A\u2282V RatioCut(A, A\u0304). (8)\nThis problem is combinatorial and NP-hard [33]. Therefore, many relaxation methods to solve (8) have been proposed [34]\u2013[36].\nThe typical relaxation is based on Laplacian quadratic form in (4) [14]. First, we define a vector c \u2208 RN which we call the cluster vector as follows:\nci =\n{\u221a |A\u0304|/|A| if vi \u2208 A,\n\u2212 \u221a |A|/|A\u0304| if vi \u2208 A\u0304.\n(9)\n2 VOLUME ,\n<Society logo(s) and publication title will appear here.>\nWhen we can find an appropriate c, clustering can be immediately done by using the polarity of ci. Furthermore, we can relate the Laplacian quadratic form (4) to the RatioCut in (7) as follows:\nc>Lc = 1\n2 N\u2211 i,j=1 wij (ci \u2212 cj)2\n= 1\n2 \u2211 i\u2208A,j\u2208A\u0304 wij (\u221a |A\u0304| |A| + \u221a |A| |A\u0304| )2\n+ 1\n2 \u2211 i\u2208A\u0304,j\u2208A wij\n( \u2212 \u221a |A\u0304| |A| \u2212 \u221a |A| |A\u0304| )2\n= cut(A, A\u0304) ( |A|+ |A\u0304| |A| + |A|+ |A\u0304| |A\u0304| ) =|V | \u00b7 RatioCut(A, A\u0304).\nNote that c satisfies\nN\u2211 i=1 ci = \u2211 i\u2208A \u221a |A\u0304| |A| \u2212 \u2211 i\u2208A\u0304 \u221a |A| |A\u0304|\n= |A| \u221a |A\u0304| |A| \u2212 |A\u0304| \u221a |A| |A\u0304| = 0 (10)\nand\n\u2016c\u201622 = N\u2211 i=1 c2i = |A| |A\u0304| |A| + |A\u0304| |A| |A\u0304| = |A\u0304|+ |A| = N. (11)\nThese results in that c is orthogonal to 1 and \u2016c\u201622 = N . Consequently, (8) can be rewritten as follows:\nmin c\u2208RN ,A\u2286V\nc>Lc\nsubject to c \u22a5 1, ci in (9), \u2016c\u201622 = N. (12)\nHowever, it is still combinatorial and NP-hard because the values in c are binary in (9). To approximately solve (12), the condition on c is relaxed to have arbitrary real values. This leads to the following optimization problem.\nmin c\u2208RN ,A\u2286V\nc>Lc subject to c \u22a5 1, \u2016c\u201622 = N. (13)\nIt is well known that the solution of (13) is given by Fiedler vector, the eigenvector corresponding to the second smallest eigenvalue of L. After solving (13), the cluster labels can be obtained by using the polarity of c.\nFor the case of K > 2, we need to find ` cluster vector {c(`)}K`=1. In this case, solutions are given as K eigenvectors of L corresponding to the smallest eigenvalues. Then, Kmeans clustering is performed for the set of eigenvectors."
        },
        {
            "heading": "B. TV GRAPH CLUSTERING",
            "text": "TV graph clustering can be classified into three main categories [6]. The first method consists of a two-step process. In the two-step methods, first, clustering is performed at each time step. Then, for each step, the clusters at step t\nare aligned with the clusters at step t \u2212 1. As an example, a method to track the evolution of TV clusters based on agglomerative clustering has been proposed [23]. Another clustering method in this category has been proposed based on SC [26]. The method first computes the eigenvectors of the graph in all time slots and then performs smoothing of the eigenvectors along the temporal direction. The advantage of this type of method is that static clustering methods can be used without modification. However, this does not take into account temporal evolution.\nThe second method is to iteratively compute the clusters of the TV graph. As an example, a method based on the Louvin method [37] is proposed [24]. In this method, clustering at t is repeated using the Louvin method using the clusters obtained at t \u2212 1 as the initial value. Another clustering method in the second category formulates optimization problems so that the clusters change smoothly [38]. This method maximizes modularity in the graph at each time slot as well as maximizes the normalized mutual information [39] of clusters at successive time slots. This approach aims to reflect the temporal dependency in clustering like our proposed approach, however, the initial cluster at t = 0 highly affects the resulting TV clusters.\nThe third method transforms a set of TV graphs into a single large network and then performs clustering for static graphs. As an example, a method based on the dynamic stochastic block model (SBM) is proposed in [40], [41]. This method extends the static SBM to a dynamic method. Specifically, the evolution of clusters is captured by modeling the cluster transitions for each node and by estimating the parameters of the model. However, this does not properly reflect temporal evolution like the first approach.\nIn contrast to existing approaches, our method obtains clusters of the entire TV graphs by solving an optimization problem as an extension of the static SC. We describe this in the following section."
        },
        {
            "heading": "III. TV GRAPH CLUSTERING BASED ON LABEL SMOOTHNESS",
            "text": "In this section, we formulate a node clustering problem for TV graphs based on the label smoothness assumption. First, we extend an SC problem for TV graphs. Second, its optimization algorithm is introduced."
        },
        {
            "heading": "A. FORMULATION",
            "text": "As mentioned previously, SC methods are mostly designed for static graphs, therefore, it is difficult to perform node clustering taking into account temporal evolution. To tackle the problem, we extend SC for TV graphs.\nSuppose that the number of clusters is K = 2 (it will be relaxed later in Section III-D) and we have a set of TV graphs, {Gt = (Vt, Et,Wt)}Tt=1, where Gt is a graph at time instance t. We assume that the number of nodes in Gt is the same N for all t and node registration has already been\nVOLUME , 3\nAuthor et al.:\nperformed. That is, node mappings among time instances are already known.\nWithout considering the temporal smoothness, (8) may be simply extended to handle TV graphs as follows:\nmin At\u2282Vt T\u2211 t=1 RatioCut(At, A\u0304t). (14)\nHowever, (14) does not reflect the temporal variation of node labels. This may lead to all node labels between Gt and Gt\u22121 being significantly different.\nHere, we assume that the cluster labels change smoothly over time. This is reasonable as long as the time-series data are obtained with a sufficiently high sampling frequency. Based on the label smoothness assumption, the label mismatch function between clusters At and At\u22121 can be defined as:\nmismatch(At, At\u22121) = N\u2211 i=1 ui, (15)\nwhere\nui = { 1 if vi \u2208 At and vi /\u2208 At\u22121, 0 otherwise .\n(16)\nEq. (15) counts the number of nodes included in cluster At but not in cluster At\u22121. Temporal variations of cluster labels can be smoothed by promoting (15) smaller.\nBy combining (14) and (15), we formulate a TV graph clustering based on SC as follows:\nmin A\u2282V T\u2211 t=1 RatioCut(At, A\u0304t)\n+ \u03b1 T\u2211 t=2 ( mismatch(At, At\u22121) + mismatch(A\u0304t, A\u0304t\u22121) ) .\n(17) where \u03b1 \u2208 R\u22650 is a parameter. As clearly observed, the optimization problem in (17) is NP-hard as in the classical SC problem (8). In the following subsection, we relax the problem into a more computationally-friendly form."
        },
        {
            "heading": "B. RELAXATION",
            "text": "In the first step of the relaxation, we define a vector ct \u2208 RN like the static SC as follows:\n[ct]i =\n{\u221a |A\u0304t|/|At| if vi \u2208 At,\n\u2212 \u221a |At|/|A\u0304t| if vi \u2208 A\u0304t.\n(18)\nTo rewrite the mismatch(\u00b7) using ct, the difference vector between ct and ct\u22121 can be written as follows:\n[ct \u2212 ct\u22121]i =  \u221a |A\u0304t|/|At| \u2212 \u221a |A\u0304t\u22121|/|At\u22121| if vi \u2208 At and vi \u2208 At\u22121,\u221a |A\u0304t|/|At| \u2212 (\u2212 \u221a |At\u22121|/|A\u0304t\u22121|) if vi \u2208 At and vi \u2208 A\u0304t\u22121, \u2212 \u221a |At|/|A\u0304t| \u2212 \u221a |A\u0304t\u22121|/|At\u22121| if vi \u2208 A\u0304t and vi \u2208 At\u22121, \u2212 \u221a |At|/|A\u0304t| \u2212 (\u2212 \u221a |At\u22121|/|A\u0304t\u22121|)\nif vi \u2208 A\u0304t and vi \u2208 A\u0304t\u22121. (19)\nBased on the label smoothness assumption, only a few nodes change their membership between t \u2212 1 and t. Therefore, we can approximate the number of nodes in clusters at successive time slots as follows:\n|At| \u2248 |At\u22121|, |A\u0304t| \u2248 |A\u0304t\u22121|. (20)\nBy substituting (20) into (19), it can be rewritten as\n[ct \u2212 ct\u22121]i \u223c [dt]i :=  0 if vi \u2208 At and vi \u2208 At\u22121, 2 \u221a |A\u0304t|/|At| if vi \u2208 At and vi \u2208 A\u0304t\u22121, \u22122 \u221a |At|/|A\u0304t| if vi \u2208 A\u0304t and vi \u2208 At\u22121,\n0 if vi \u2208 A\u0304t and vi \u2208 A\u0304t\u22121. (21)\nIt can be observed that [dt]i becomes nonzero only if vi changes its membership. By using (21), mismatch(\u00b7) can be rewritten using ct as follows:\nmismatch(At, At\u22121) + mismatch(A\u0304t, A\u0304t\u22121) = \u2016dt\u20160, (22) where \u2016 \u00b7 \u20160 represents the `0 pseudo norm. As a result, we can rewrite (17) by using (22) and the approximation of RatioCut shown in Section II-A as follows:\nmin ct\u2208RN T\u2211 t=1 c>t Ltct + \u03b1 T\u2211 t=2 \u2016dt\u20160\nsubject to ct \u22a5 1, \u2016ct\u201622 = N. (23)\nThis is a natural extension of RatioCut for TV graphs. Note that solving (23) directly requires a combinatorial optimization due to the `0 norm constraint. Instead, we consider to solve the following relaxed optimization problem using the `1 norm regularization:\nmin ct\u2208RN T\u2211 t=1 c>t Ltct + \u03b1 T\u2211 t=2 \u2016dt\u20161\nsubject to ct \u22a5 1, \u2016ct\u201622 = N, (24)\nwhere \u2016 \u00b7 \u20161 represents the `1 norm. We further rewrite (24) by introducing the concatenated label vector call = [c>1 , c > 2 , . . . , c > T ] > \u2208 RNT for a simple\n4 VOLUME ,\n<Society logo(s) and publication title will appear here.>\nexpression as follows.\nmin call\u2208RNT c>allLcall+\u03b1\u2016\u03a6call\u20161 subject to ct \u22a5 1, \u2016ct\u201622 = N, (25) where L := diag(L1, . . . ,LT ) and \u03a6 is a linear operator satisfying \u03a6call = call \u2212 c\u0302all, in which c\u0302all = [c>1 , c > 1 , c > 2 , . . . , c > T\u22121]\n>. In the following subsection, we present an algorithm to solve (25)."
        },
        {
            "heading": "C. OPTIMIZATION",
            "text": "Here, we rewrite (25) with a more tractable form to an existing solver. First, (25) is rewritten as follows by introducing indicator functions:\nmin call\u2208RNT\n1 2 c>allLcall + \u03b1\u2016\u03a6call\u20161\n+ T\u2211 j=1 {\u03b9A1 ([call]j) + \u03b9BN ([call]j)} , (26)\nwhere [call]j corresponds to cj and the indicator functions, \u03b9A1 and \u03b9BN , are respectively defined as follows:\n\u03b9A1 (x) = { 0 if x \u2208 A1 , \u221e otherwise,\n(27)\n\u03b9BN (x) = { 0 if x \u2208 BN , \u221e otherwise,\n(28)\nin which\nA1 = {x \u2208 RN ||x>1| \u2264 }, (29) BN = {x \u2208 RN |\u2016x\u201622 \u2212N = 0}. (30)\n\u03b9A1 and \u03b9BN represent constraints in (25). Note that (26) is a nonconvex optimization problem since BN in (30) is a nonconvex set. However, we can practically solve the problem using a popular primal-dual splitting (PDS) algorithm [28]. The PDS algorithm tackles a problem in the following form:\nmin c f1(c) + f2(c) + f3(Mc), (31)\nwhere f1 is a differentiable convex function with the \u03b2Lipschitzian gradient \u2207f1 for some \u03b2 > 0; f2 and f3 are proper lower semicontinuous convex functions which are proximable; and M is a linear operator.\nTo apply PDS on (26), the latter is split into the following PDS-applicable forms:\nf1(c) := c >Lc with \u03b2 = \u03bbmax(L),\nf2(c) := T\u2211 j=1 \u03b9BN ([c]j),\nf3(d) := T\u2211 j=1 \u03b9A1 ([d1]j) + \u03b1\u2016d2\u20161,\nM = [ I \u03a6 ] ,\nwhere \u03bbmax(L) is the maximum eigenvalue of L, and d := Mc = [d>1 ,d > 2 ] > is the dual variable.\nThe proximal operator of f2 is given by\nprox\u03b3\u03b9BN ([z]j) =\n\u221a N\n[z]>j [z]j [z]j . (32)\nMoreover, the proximal operator of f3 is calculated by dividing it into two terms. The first term, \u2211T j=1 \u03b9A1 ([d1]j), has the following proximal operator\nprox\u03b3\u03b9A1 ([z]j) =  [z]j \u2212 [z]>j 1\u2212 [z]>j [z]j\nif [z]>j 1 > ,\n[z]j \u2212 [z]>j 1+\n[z]>j [z]j if [z]>j 1 < \u2212 ,\n[z]j otherwise. (33)\nFurthermore, the proximal operator of the second term, \u2016\u00b7\u20161, is known to be the element-wise soft-thresholding operation [42]:\n[ prox\u03b3\u2016\u00b7\u20161(z) ] i = sgn (zi) max {0, |zi| \u2212 \u03b3} . (34)\nThe details of the algorithm are shown in Algorithm 1 where \u03c3 is a small real value.\nAlgorithm 1 TV Clustering with Label Smoothness\nInput: c(0),d(0)1 ,d (0) 2 Output: c(i) while \u2016c(i+1) \u2212 c(i)\u2016/\u2016c(i)\u2016 > \u03c3 do\nc(i+1) = prox\u03b31\u03b9BN (\u00b7) (c(i)\u2212\u03b31(Lc(i) +d(i)1 +\u03a6>d (i) 2 ))\nd (i+1) 1 = prox\u03b32\u03b9A1 (\u00b7)\u2217(d (i) 1 + \u03b32(2c (i+1) \u2212 c(i))) d\n(i+1) 2 = prox\u03b32\u2016\u00b7\u2016\u22171 (d (i) 2 + \u03b32\u03a6(2c (i+1) \u2212 c(i))) end while\nAlthough we observed that the algorithm works well in practice [43], [44], a formal convergence analysis is left for future work."
        },
        {
            "heading": "D. EXTENSION TO ARBITRARY NUMBER OF CLUSTERS",
            "text": "In the previous subsection, we assume K = 2. However, the number of clusters is often greater than two. In this subsection, we describe the proposed method for clustering graphs with arbitrary K.\nTo split {Gt}Tt=1 into multiple clusters, we need to have {c(`)t }K`=1 as those required in the static SC. Suppose that c\n(1) t , . . . , c (`) t , . . . , c K t , is obtained before calculating the `th\ncluster vector c(`)t . c (`) t is defined as follows:\n[c (`) t ]i =\n{\u221a |[A`]t| if vi \u2208 [A`]t,\n0 otherwise, (35)\nVOLUME , 5\nAuthor et al.:\nwhere [A`]t is the `th cluster at time t. With the spirit of SC, we need to solve the following problem:\nmin ct\u2208RN T\u2211 t=1 c>t Ltct + \u03b1 T\u2211 t=2 \u2016ct \u2212 ct\u22121\u20161 subject to ct \u22a5 {c(1)t , . . . , c (`) t }, \u2016ct\u201622 = N, c (`) t in (35). (36) As with the static SC, the condition on c is relaxed to have arbitrary real values. This leads to the following optimization problem.\nmin ct\u2208RN T\u2211 t=1 c>t Ltct + \u03b1 T\u2211 t=2 \u2016ct \u2212 ct\u22121\u20161 subject to ct \u22a5 {c(1)t , . . . , c (`) t }, \u2016ct\u201622 = N.\n(37)\nThe indicator function \u03b9A1 (\u00b7) in (27) is redefined as follows so that it can be computed for any vectors:\n\u03b9Av (x) = { 0 if x \u2208 Av , \u221e otherwise,\n(38)\nwhere\nAv = {x \u2208 RN ||x>v| \u2264 }.\nThe proximal operator of \u03b9A1 (\u00b7) is given by\nprox\u03b3\u03b9Av ([z]j) =  [z]j \u2212 [z]>j v\u2212 [z]>j [z]j v if [z]>j v > , [z]j \u2212 [z]>j v+ [z]>j [z]j v if [z]>j v < \u2212 ,\n[z]j otherwise. (39)\nThe algorithm to solve (37) is similar to Algorithm 1. We first determine {c(1)t } by Algorithm 1, and the others ct (K\u22121) `=2 \u2019s are sequentially computed."
        },
        {
            "heading": "IV. EXPERIMENTS",
            "text": "In this section, we evaluate the performance of the proposed method through experiments using synthetic and real-world data."
        },
        {
            "heading": "A. SYNTHETIC DATA",
            "text": ""
        },
        {
            "heading": "1) SETUP",
            "text": "First, we perform TV graph clustering for synthetic graphs. For a clustering purpose, TV graphs based on the stochastic block model (SBM) [45] are generated in the following manner. SBM is a well-known random graph model where intraand inter-cluster edges are generated randomly according to the predefined edge probabilities. The intra-cluster edge probability pintra is basically larger than that for inter-clusters pinter. We set the number of clusters (K) and that of frames (T ) are set to K = 3 and T = 100, respectively.\nIn this experiment, we generated two types of TV graphs with different edge connection probabilities. A set of TV graphs {Gt = (Vt, Et)}Tt=1 is generated as follows.\n1) Under given edge connection probabilities pintra and pinter, G1 is generated by the (static) SBM model having three equisized clusters with 50 nodes, i.e., N = 150. 2) For t > 1, Gt is yielded from Gt\u22121 in the following manner.\na) Node labels of Vt are randomly changed from that of Vt\u22121 with a probability of 0.01. b) The edge set Et is obtained by the static SBM model with pintra and pinter.\nTherefore, the synthesized TV graphs have a small mismatch(At, At\u22121) in (15) while the edges are randomly changed between Gt and Gt\u22121. Fig. 1 shows overview of synthetic TV graphs.\nFor the first TV graph, the edge connection probabilities are set to pintra = 0.3 and pinter = 0.2. This results in a set of TV graphs with high edge density.\nFor the second graph, those are set to pintra = 0.1 and pinter = 0.05. The second graph is sparser than the first one."
        },
        {
            "heading": "2) ACCURACY MEASURE",
            "text": "For calculating the clustering accuracy, we use the method in [46]. First, we create a matrix P \u2208 RN\u00d7N that indicates clusters as follows:\n[P]mn = { 1 if vm and vn belong to the same cluster, 0 otherwise.\n(40) Second, we calculate the correct classification ratio by comparing P of the ground-truth graph and its estimation as follows:\naccuracy = \u2211N i,j=1 countij \u2212N N(N \u2212 1) , (41)\ncountij = { 1 if [P]ij = [P\u0303]ij , 0 otherwise,\n(42)\nwhere P\u0303 is the same as (40) but is created from the estimated clusters.\n6 VOLUME ,\n<Society logo(s) and publication title will appear here.>"
        },
        {
            "heading": "3) RESULTS",
            "text": "We compare the experimental results of the proposed method with SC for static graphs introduced in Section II-A and PisCES [26]: The state-of-the-art TV graph clustering method.\nFig. 2 visualizes the clustering results of the first set of TV graphs (denser one) where node colors indicate the cluster labels. Figs. 2(a) and (e) show the original graphs where each of the three chunks corresponds to one cluster. Fig. 3 also compares the accuracy of clustering 100 randomly generated time-varying graphs. The figure plots the average accuracy of each TV graph as a function of t.\nAs shown in Figs. 2(b) and (f), SC for static graphs fail to extract accurate clusters because edge connection probabilities of intra- and inter-clusters are close to each other. In contrast, the proposed method and PisCES estimate the almost correct clusters, which reflects the power of temporal evolution. Fig. 3 also indicates that the accuracy\nof the proposed method is consistently higher than SC and comparable to PisCES.\nFig. 4 shows the clustering results of the set of the sparser TV graphs and the accuracy is compared in Fig. 5. As in the denser version, SC for static graphs does not work accurately. In contrast to the dense one, Figs. 4(c) and (h) indicate PisCES estimates all nodes as one cluster. The proposed method extracts the almost correct clusters as in the previous experiment. In Fig. 5, the accuracy of the proposed method is consistently higher than existing methods.\n4) Discussion Here, we investigate the performance difference between the proposed method and PisCES. PisCES automatically determines the number of clusters for each frame on the basis of the difference between the eigenvalues of the graph Laplacian [26]. Specifically, PisCES splits the graph into multiple clusters when eigengap exceeds a certain threshold. While the two sets of synthetic TV graphs only differ their edge densities, their eigenvalue characteristics are significantly different.\nWe compare the eigengaps of two versions of TV graphs in Fig. 6. As shown in the figure, the eigengap in the sparser TV graphs is much smaller than that in the denser ones.\nHere, we manually force to set K = 3 for PisCES as SC and the proposed method. Figs. 4(d) and (i) show the clustering results by PisCES with the manually set K. Even with the fixed K, the clustering results for PisCES for the set of sparser TV graphs are similar to the static SC, which is also confirmed from Fig. 5.\nVOLUME , 7\nAuthor et al.:"
        },
        {
            "heading": "B. REAL-WORLD DATA",
            "text": ""
        },
        {
            "heading": "1) SETUP",
            "text": "For an experiment using real-world data, we perform clustering of dynamic point clouds. We use dynamic point clouds\nin the dataset of [47]. It contains point cloud data capturing several types of human motion. In this experiment, we used two point cloud data: cartwheel and dancing.\nFirst, the both point clouds are downsampled to N = 301. Since the point cloud does not have a ground-truth graph, we connect the points by the k-nearest neighbor graph based on the 3-D Euclidean distance. We set k = 8 for both point clouds. We use T = 200 consecutive frames for the experiment. Examples of the TV graphs are shown in Figs. 7(a) and (e) for cartwheel, and Figs. 8(a), (e) and (i) for dancing. We set the number of clusters to K = 5."
        },
        {
            "heading": "2) RESULTS",
            "text": "Figs. 7 and 8 visualize the clustering results for the dynamic point clouds.\nAs shown in the figures, the proposed method almost extracts reasonable clusters for the both point clouds. In contrast, SC sometimes merges legs and hands close to each other as shown in Figs. 7(g) and 8(l). As in the synthetic sparser graphs, PisCES predicts the number of clusters as one in its default setting. This is due to the small eigengaps as shown in Fig. 9. Even if we force to set K = 5 for PisCES, it merges legs (Fig. 7(i)) and splits one leg into multiple clusters (Fig. 8(i))."
        },
        {
            "heading": "V. CONCLUSION",
            "text": "In this paper, we propose a clustering method for a set of TV graphs taking into consideration the temporal label smoothness. We formulate an optimization problem based on spectral clustering with a regularization term for the label temporal evolution. Through the experiments with synthetic and real world point cloud data, it is observed that the\n8 VOLUME ,\n<Society logo(s) and publication title will appear here.>\nVOLUME , 9\nAuthor et al.:\nproposed method extracts accurate clusters compared to the existing clustering methods."
        }
    ],
    "title": "Clustering of Time-Varying Graphs Based on Temporal Label Smoothness",
    "year": 2023
}