{
    "abstractText": "Integrated Circuits (ICs) are the target of diverse attacks during their lifetime. Fabrication-time attacks, such as the insertion of Hardware Trojans (HTs), can give an adversary access to privileged data and/or the means to corrupt the IC\u2019s internal computation. Post-fabrication attacks, where the enduser takes a malicious role, also attempt to obtain privileged information through means such as fault injection and probing. Taking these threats into account and at the same time, this paper proposes a methodology for Security-Aware Layout Synthesis (SALSy), such that ICs can be designed with security in mind in the same manner as power-performance-area (PPA) metrics are considered today, a concept known as security closure. Furthermore, the trade-offs between PPA and security are considered and a chip is fabricated in a 65nm CMOS commercial technology for validation purposes \u2013 a feature not seen in previous research on security closure. Measurements on the fabricated ICs indicate that SALSy promotes a modest increase in power in order to achieve significantly improved security metrics.",
    "authors": [
        {
            "affiliations": [],
            "name": "Mohammad Eslami"
        },
        {
            "affiliations": [],
            "name": "Samuel Pagliarini"
        }
    ],
    "id": "SP:9fe69f743fd507b2a68b16923b00635983eb87cb",
    "references": [
        {
            "authors": [
                "C. Ting-Fang"
            ],
            "title": "Tsmc to triple u.s. chip investment to $40bn to serve apple, others",
            "venue": "2022. [Online]. Available: https://asia.nikkei.com/Business/Tech/Semiconductors/ TSMC-to-triple-U.S.-chip-investment-to-40bn-to-serve-Apple-others",
            "year": 2022
        },
        {
            "authors": [
                "W. Hu",
                "C.-H. Chang",
                "A. Sengupta",
                "S. Bhunia",
                "R. Kastner",
                "H. Li"
            ],
            "title": "An overview of hardware security and trust: Threats, countermeasures, and design tools",
            "venue": "Trans. Comp.-Aided Des. Integ. Circ. Sys., vol. 40, no. 6, pp. 1010\u20131038, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "M. Rostami",
                "F. Koushanfar",
                "R. Karri"
            ],
            "title": "A primer on hardware security: Models, methods, and metrics",
            "venue": "Proc. IEEE, vol. 102, no. 8, pp. 1283\u20131295, 2014.",
            "year": 2014
        },
        {
            "authors": [
                "S. Bhunia",
                "M. Abramovici",
                "D. Agrawal",
                "P. Bradley",
                "M.S. Hsiao",
                "J. Plusquellic",
                "M. Tehranipoor"
            ],
            "title": "Protection against hardware trojan attacks: Towards a comprehensive solution",
            "venue": "Des. Test, pp. 6\u201317, 2013.",
            "year": 2013
        },
        {
            "authors": [
                "V. Gohil",
                "S. Patnaik",
                "H. Guo",
                "D. Kalathil",
                "J.J. Rajendran"
            ],
            "title": "Deterrent: Detecting trojans using reinforcement learning",
            "venue": "Proc. Des. Autom. Conf., 2022, pp. 697\u2013702.",
            "year": 2022
        },
        {
            "authors": [
                "C. Helfmeier",
                "D. Nedospasov",
                "C. Tarnovsky",
                "J.S. Krissler",
                "C. Boit",
                "J.-P. Seifert"
            ],
            "title": "Breaking and entering through the silicon",
            "venue": "Proc. Comp. Comm. Sec., 2013, p. 733\u2013744.",
            "year": 2013
        },
        {
            "authors": [
                "S.E. Quadir",
                "J. Chen",
                "D. Forte",
                "N. Asadizanjani",
                "S. Shahbazmohamadi",
                "L. Wang",
                "J. Chandy",
                "M. Tehranipoor"
            ],
            "title": "A survey on chip to system reverse engineering",
            "venue": "J. Emerg. Technol. Comput. Syst., 2016. 13 TABLE V COMPARISON OF THIS WORK (SALSY) WITH THE PREVIOUS TECHNIQUES Ref. Technique Implications Validated? [14] Internal Shielding Power Timing Area Density \u2717 [23] TroMUX Power Timing Area Density \u2717 [24] BISA Power N/A Area Density \u2717 [25] Layout Filling Power Timing Area Density \u2717 [26] DEFense Framework Power Timing Area Density \u2717 [27] ASSURER Power N/A Area Density \u2717 [28] T-TER Power Timing Area Density \u2717 This Work (SALSy) Power Timing Area Density \u2713",
            "year": 2016
        },
        {
            "authors": [
                "S. Bhunia",
                "M.S. Hsiao",
                "M. Banga",
                "S. Narasimhan"
            ],
            "title": "Hardware trojan attacks: Threat analysis and countermeasures",
            "venue": "Proc. IEEE, pp. 1229\u2013 1247, 2014.",
            "year": 2014
        },
        {
            "authors": [
                "M. Tehranipoor",
                "F. Koushanfar"
            ],
            "title": "A survey of hardware trojan taxonomy and detection",
            "venue": "Des. Test, p. 10\u201325, 2010.",
            "year": 2010
        },
        {
            "authors": [
                "N.G. Tsoutsos",
                "C. Konstantinou",
                "M. Maniatakos"
            ],
            "title": "Advanced techniques for designing stealthy hardware trojans",
            "venue": "Proc. Des. Autom. Conf., 2014, pp. 1\u20134.",
            "year": 2014
        },
        {
            "authors": [
                "A. Barenghi",
                "L. Breveglieri",
                "I. Koren",
                "D. Naccache"
            ],
            "title": "Fault injection attacks on cryptographic devices: Theory, practice, and countermeasures",
            "venue": "Proc. IEEE, pp. 3056\u20133076, 2012.",
            "year": 2012
        },
        {
            "authors": [
                "M. Nagata"
            ],
            "title": "Exploring fault injection attack resilience of secure ic chips : Invited paper",
            "venue": "Proc. Int. Rel. Physics Sym., 2022, pp. 1\u20136.",
            "year": 2022
        },
        {
            "authors": [
                "H. Wang",
                "D. Forte",
                "M.M. Tehranipoor",
                "Q. Shi"
            ],
            "title": "Probing attacks on integrated circuits: Challenges and research opportunities",
            "venue": "Des. Test, pp. 63\u201371, 2017.",
            "year": 2017
        },
        {
            "authors": [
                "H. Wang",
                "Q. Shi",
                "A. Nahiyan",
                "D. Forte",
                "M.M. Tehranipoor"
            ],
            "title": "A physical design flow against front-side probing attacks by internal shielding",
            "venue": "Trans. Comp.-Aided Des. Integ. Circ. Sys., pp. 2152\u20132165, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "M. Eslami",
                "J. Knechtel",
                "O. Sinanoglu",
                "R. Karri",
                "S. Pagliarini"
            ],
            "title": "Benchmarking advanced security closure of physical layouts: Ispd 2023 contest",
            "venue": "Proc. Int. Symp. Phys. Des., 2023, p. 256\u2013264.",
            "year": 2023
        },
        {
            "authors": [
                "R. Karri",
                "J. Rajendran",
                "K. Rosenfeld",
                "M. Tehranipoor"
            ],
            "title": "Trustworthy hardware: Identifying and classifying hardware trojans",
            "venue": "Computer, pp. 39\u201346, 2010.",
            "year": 2010
        },
        {
            "authors": [
                "K. Xiao",
                "D. Forte",
                "Y. Jin",
                "R. Karri",
                "S. Bhunia",
                "M. Tehranipoor"
            ],
            "title": "Hardware trojans: Lessons learned after one decade of research",
            "venue": "Trans. Des. Autom. Elec. Sys., 2016.",
            "year": 2016
        },
        {
            "authors": [
                "A. Hepp",
                "T. Perez",
                "S. Pagliarini",
                "G. Sigl"
            ],
            "title": "A pragmatic methodology for blind hardware trojan insertion in finalized layouts",
            "venue": "Proc. Int. Conf. Comp.-Aided Des., 2022.",
            "year": 2022
        },
        {
            "authors": [
                "T.D. Perez",
                "S. Pagliarini"
            ],
            "title": "Hardware trojan insertion in finalized layouts: From methodology to a silicon demonstration",
            "venue": "Trans. Comp.- Aided Des. Integ. Circ. Sys., vol. 42, no. 7, pp. 2094\u20132107, 2023.",
            "year": 2023
        },
        {
            "authors": [
                "B. Selmke",
                "J. Heyszl",
                "G. Sigl"
            ],
            "title": "Attack on a DFA protected AES by simultaneous laser fault injections",
            "venue": "Proc. Worksh. Fault Diag. Tol. Cryptogr., 2016, pp. 36\u201346.",
            "year": 2016
        },
        {
            "authors": [
                "R.A.C. Viera",
                "P. Maurine",
                "J.-M. Dutertre",
                "R. Possamai Bastos"
            ],
            "title": "Simulation and experimental demonstration of the importance of irdrops during laser fault injection",
            "venue": "Trans. Comp.-Aided Des. Integ. Circ. Sys., pp. 1231\u20131244, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "C. Boit",
                "S. Tajik",
                "P. Scholz",
                "E. Amini",
                "A. Beyreuther",
                "H. Lohrke",
                "J.P. Seifert"
            ],
            "title": "From IC debug to hardware security risk: The power of backside access and optical interaction",
            "venue": "Proc. Int. Symp. Physical Failure Analys. IC, 2016, pp. 365\u2013369.",
            "year": 2016
        },
        {
            "authors": [
                "F. Wang",
                "Q. Wang",
                "B. Fu",
                "S. Jiang",
                "X. Zhang",
                "L. Alrahis",
                "O. Sinanoglu",
                "J. Knechtel",
                "T.-Y. Ho",
                "E.F. Young"
            ],
            "title": "Security closure of ic layouts against hardware trojans",
            "venue": "Proc. Int. Symp. Phys. Des., 2023, p. 229\u2013237.",
            "year": 2023
        },
        {
            "authors": [
                "K. Xiao",
                "M. Tehranipoor"
            ],
            "title": "Bisa: Built-in self-authentication for preventing hardware trojan insertion",
            "venue": "Proc. Int. Symp. Hardw.-Orient. Sec. Trust, 2013, pp. 45\u201350.",
            "year": 2013
        },
        {
            "authors": [
                "P.-S. Ba",
                "S. Dupuis",
                "M. Palanichamy",
                "M.-L. Flottes",
                "G. Di Natale",
                "B. Rouzeyre"
            ],
            "title": "Hardware trust through layout filling: A hardware trojan prevention technique",
            "venue": "Proc. Comp. Soc. Symp. VLSI, 2016, pp. 254\u2013 259.",
            "year": 2016
        },
        {
            "authors": [
                "J. Knechtel",
                "J. Gopinath",
                "J. Bhandari",
                "M. Ashraf",
                "H. Amrouch",
                "S. Borkar",
                "S.-K. Lim",
                "O. Sinanoglu",
                "R. Karri"
            ],
            "title": "Security closure of physical layouts iccad special session paper",
            "venue": "Proc. Int. Conf. Comp.-Aided Des., 2021, pp. 1\u20139.",
            "year": 2021
        },
        {
            "authors": [
                "G. Guo",
                "H. You",
                "Z. Tang",
                "B. Li",
                "C. Li",
                "X. Zhang"
            ],
            "title": "Assurer: A ppafriendly security closure framework for physical design",
            "venue": "Proc. Asia South Pac. Des. Autom. Conf., 2023, p. 504\u2013509.",
            "year": 2023
        },
        {
            "authors": [
                "T. Trippel",
                "K.G. Shin",
                "K.B. Bush",
                "M. Hicks"
            ],
            "title": "T-ter: Defeating a2 trojans with targeted tamper-evident routing",
            "venue": "Proc. of the 2023 ACM Asia Conf. on Comp. and Comm. Sec., 2023, p. 746\u2013759.",
            "year": 2023
        },
        {
            "authors": [
                "J. Knechtel",
                "J. Gopinath",
                "M. Ashraf",
                "J. Bhandari",
                "O. Sinanoglu",
                "R. Karri"
            ],
            "title": "Benchmarking security closure of physical layouts: ISPD 2022 contest",
            "venue": "Proc. Int. Symp. Phys. Des., 2022, p. 221\u2013228.",
            "year": 2022
        },
        {
            "authors": [
                "T. Sugawara",
                "N. Homma",
                "T. Aoki",
                "A. Satoh"
            ],
            "title": "Asic performance comparison for the iso standard block ciphers",
            "venue": "JWIS, 2007. [Online]. Available: http://www.aoki.ecei.tohoku.ac.jp/crypto/web/cores.html",
            "year": 2007
        },
        {
            "authors": [
                "O. Girard"
            ],
            "title": "openmsp430 at opencores.org",
            "venue": "2021. [Online]. Available: https://opencores.org/projects/openmsp430",
            "year": 2021
        },
        {
            "authors": [
                "M. Hicks"
            ],
            "title": "Mit-ll common evaluation platform (cep) at github.com",
            "venue": "2021. [Online]. Available: https://github.com/mit-ll/CEP",
            "year": 2021
        }
    ],
    "sections": [
        {
            "text": "Index Terms\u2014Hardware Security, Integrated Circuits, Layout Synthesis, Hardware Trojan, Fault Injection, Probing.\nI. INTRODUCTION\nGLOBALIZATION of the Integrated Circuit (IC) sup-ply chain has brought several benefits to IC vendors, including increased efficiency, cost savings, and access to specialized fabrication. The IC supply chain, today, is a complex network of entities involved in the processes of designing, manufacturing, testing, distributing, and marketing ICs. The limited availability of advanced silicon manufacturing sites, i.e., foundries, is the embodiment of the process of globalization. With the cost to establish a foundry in the range of billions of dollars, only a few companies are left in the competition for cutting-edge chip manufacturing. Hence, IC design companies can avoid these capital expenses by outsourcing the fabrication process and instead concentrating on their core skills, such as designing their specific ICs and the systems around them [1]. This arrangement in which IC design companies are fabless has been the norm for many years, and it is sustained by the significant investments semiconductor foundries make in R&D.\nHowever, globalization has also created new security challenges. In the fabless model, the foundries are considered untrusted since design houses have no ownership or oversight claims over them. Hence, IC design houses should seek to protect their designs (layouts) against potential adversaries located in the untrusted foundries [2]\u2013[5]. Such adversaries could perform IP theft, IC overproduction, many forms of\nThis work was partially supported by the EU through the European Social Fund in the context of the project \u201cICT programme\u201d.\nM. Eslami, T. D. Perez, and S. Pagliarini are with the Department of Computer Systems, Centre for Hardware Security, Tallinn University of Technology (TalTech), 12618, Tallinn, Estonia (e-mail: mohammad.eslami@taltech.ee; tiago.perez@taltech.ee; samuel.pagliarini@taltech.ee)\nreverse engineering, and also compromise the IC\u2019s functionality or reliability [6], [7]. Untrusted foundries may introduce malicious hardware, known as Hardware Trojan (HT), into the IC design. HTs can compromise device functionality or security [8], [9]. For instance, a foundry may introduce a backdoor into an IC that allows an attacker to remotely control the device, steal sensitive data, or inject malicious code [10].\nFurthermore, there are many other threats beyond fabrication-time attacks. The finalized IC, once being available to a malicious end-user from the open market, may be targeted by an adversary through fault injection [7], [11], [12]. In this type of attack, the adversary tries to compromise the security of the chip by injecting different types of faults into it.\nAnother post-fabrication time attack is probing, in which the attacker tries to gain unauthorized access to the internal data of a chip by performing physical probing [13], [14]. This attack is mostly performed to extract sensitive data from within the chip, such as cryptographic keys or other proprietary information. Such attacks are even more relevant in dependable/critical applications [12].\nWith these concerns in mind, the notion of security closure [15] has been pursued by hardware security researchers. It involves accepting certain overheads in terms of powerperformance-area (PPA) to achieve heightened security measures, which aim to minimize vulnerabilities and potential attack surfaces. The primary objective is to create trustworthy and robust ICs capable of withstanding potential security breaches and ensuring their reliable performance.\nThis paper presents a methodology for security closure consisting of different techniques. Our proposed flow, SecurityAware Layout Synthesis (SALSy), is generic and can be adopted in any layout, regardless of size, type, or technology. The main contributions of this work are as follows:\n\u2022 Providing a generic approach for enhancing the security of designs during physical synthesis against multiple threats: (i) HTs, (ii) fault injection, and (iii) probing. \u2022 Prototyping a chip in a commercial 65nm CMOS technology to validate SALSy in silicon. \u2022 Comparing the use of commercial libraries and Process Design Kits (PDKs) with open-source ones in order to highlight the limitations and restrictions of using opensource PDKs for security research. \u2022 Making the scripts readily accessible to the public to empower the research community to comprehensively verify and validate the techniques presented in this study. Furthermore, the scripts operate within a commercial physical synthesis tool, assuring that SALSy is compatible with current industry practices.\nThe rest of the paper is organized as follows: Section II provides background on major threats against the ICs after\nar X\niv :2\n30 8.\n06 20\n1v 2\n[ cs\n.C R\n] 2\n1 A\nug 2\n02 3\n2 U N T R U S T E D Front-end Design Back-end Design Fabrication Assembly & Packaging Market T R U S T E D T R U S T E D U N T R U S T E D\nFig. 1. Different threats in the IC supply chain: HTs are a fabrication-time threat, FSP/FI are post-fabrication threats.\nbeing sent for fabrication. In Section III, the motivation of this work is explained, followed by the details and different techniques we used to enhance the security of the designs using open-source PDKs in Section IV. Section V points out the differences between commercial PDKs and open-source ones. The experimental results from the chip are presented in Section VI, followed by a discussion in Section VII. Finally, Section VIII concludes the paper."
        },
        {
            "heading": "II. BACKGROUND",
            "text": "The IC supply chain encompasses various stages, from design and manufacturing to distribution and deployment, as depicted in Fig. 1. Each stage presents unique security challenges and potential threats.\nOnce the chip is sent for fabrication, the design team has no control over it. Hence, considerations must be taken into account to protect the chip against mentioned threats in the fabrication and post-fabrication stages. In this work, we focus on three major post-design threats: Hardware Trojans, Fault Injection, and Probing. In the following, we provide more details about each of these threats."
        },
        {
            "heading": "A. Hardware Trojans",
            "text": "As mentioned, a HT is a malicious modification to an IC that can cause harm to the system it is embedded in and can remain undetected for long periods of time. Its purpose is to modify the behavior of the IC in a way that benefits the attacker, harms the user, leaks sensitive information, or causes the IC to fail under specific conditions [8], [16]. HTs can be introduced into an IC in several ways, such as by modifying the layout of the design or by manipulating the fabrication process to introduce defects [17]. The HT\u2019s activation mechanism is called \u2018trigger\u2019 \u2013 the event or condition that initiates the attack. The trigger could be a specific input, a particular sequence of operations, or even a specific date or time [9].\nThe specialized literature classifies HTs into two main categories: functional and parametric. Functional HTs alter the functionality of a circuit, while parametric HTs change the circuit\u2019s performance parameters. This work focuses primarily on additive functional HTs. Additive HTs involve the insertion of additional malicious components into an IC. Conceptually, the HT logic can replace filler cells in a finalized layout [18], [19]."
        },
        {
            "heading": "B. Fault Injection",
            "text": "Fault injection has emerged as a potent attack vector that adversaries can exploit to compromise the security and reliability of ICs [11]. Fault injection attacks involve intentionally\ndisturbing digital circuits to disrupt their regular operation, manipulate data, or bypass security mechanisms [20], [21]. Adversaries can exploit various fault injection techniques and target specific vulnerabilities to achieve their malicious objectives [11], [12]. By tampering with supply voltages, clocks, or even electromagnetic fields, attackers can induce faults that lead to system failures, unauthorized access, or information leakage. Circuits that implement cryptographic operations are particularly sensitive to such attacks. Mechanisms exploited in fault injection attacks include (but are not limited to):\nTiming Manipulation: Fault injection attacks often target the precise timing of digital circuits, exploiting vulnerabilities in clock signals, synchronization mechanisms, or critical timing paths to cause errors or disrupt the intended operation.\nPower and Voltage Manipulation: Tinkering with power supply levels, injecting voltage spikes, or inducing power glitches can lead to circuit malfunction."
        },
        {
            "heading": "C. Probing",
            "text": "This type of attack involves physical access and measurement of internal signals within a digital circuit [13], [22]. Adversaries employ various methods, such as utilizing oscilloscopes, logic analyzers, or even direct physical contact, to capture and analyze signals. This technique allows attackers to extract sensitive information, such as encryption keys, proprietary algorithms, or critical data, by bypassing traditional security mechanisms. Probing is often performed in two ways:\nFront-side Probing: This method allows unauthorized access to the internal data of an IC by making electrical connections with specific points on the surface of the chip (metal interconnects and active components) using specialized equipment like microprobes or needles. By reading the internal signals, an attacker can potentially extract sensitive information, including cryptographic keys or proprietary data.\nBack-side Probing: This method involves physically accessing the back or underside of the chip to obtain internal data, requiring the removal of the protective packaging to expose the silicon die. This more invasive and destructive technique enables direct access to the chip\u2019s internal circuitry, providing valuable insights into its behavior.\nFront-side probing and fault injection threats share similarities, as both require physical access to the IC. Combating one often involves addressing the other, as their countermeasures overlap, including secure layout design. From this point onward, we will refer to these threats as one under the abbreviation FSP/FI.\n3"
        },
        {
            "heading": "D. Related Works",
            "text": "While numerous works focus on mitigating post-design time attacks through methods like shielding to protect specific chip areas, only a limited number of studies propose defensive techniques targeting multiple threats during the physical synthesis phase \u2013 the final step before chip fabrication. Notably, the vast majority of proposed techniques have not been validated in silicon. This is particularly true for HT prevention techniques.\nDefensive techniques proposed against HT insertion are mainly based on the idea of increasing the design\u2019s density, thus reducing the available space within the design where an attacker could potentially embed malicious logic.\nIn [23], a locking technique is introduced during physical synthesis to enhance security and bridge layout gaps. Despite its resilience to various attacks, its practicality is debatable as meeting timing constraints remains uncertain for many benchmarks. In [24], authors propose populating unused spaces with functional cells, creating an independent combinational circuit for post-fabrication testing against cell modifications. A limitation of this approach is achieving a high occupation ratio while maintaining the design routable. To address this limitation, [25] prioritizes filling gaps that could be used for HT insertion. However, this approach may alter initial routing, potentially defrauding critical paths due to rerouting.\nIn [26], another selective approach places sensitive logic in denser layout areas and steers gaps around less sensitive regions. However, the user\u2019s control over placement can be limited, particularly when using commercial CAD tools. In [27], authors address this by suggesting a placing refinement technique to segment large unused layout spaces. Yet, this approach faces a significant vulnerability where attackers can reverse the refinement, creating optimal zones for their malicious logic.\nCountermeasures against FSP/FI are principally based on the idea of covering security-sensitive elements with different metal layers since the attacker usually uses laser or ion beams to attack the chip. In [26], a method is introduced to route sensitive wires beneath regular ones and widen non-sensitive wires. While this incurs substantial overhead in routing resources, it does not assure wire protection, especially against advanced attack techniques. To tackle this, [27] proposes maximizing sensitive element coverage by rerouting nets and utilizing available design tracks. However, this approach\u2019s applicability is uncertain, particularly as the work uses an open-source PDK.\nShielding offers another avenue to safeguard sensitive elements. In [28], guard wires are introduced to shield sensitive nets, yet the focus remains on fabrication-time attacks. Alternatively, [14] presents an anti-probing physical approach via added steps in the synthesis flow. However, this method\u2019s efficiency faces challenges with increased sensitive element numbers, and it entails area and power overheads."
        },
        {
            "heading": "E. Threat Model",
            "text": "A vital step to implementing countermeasures against different attacks is identifying and focusing on the exact attacker\u2019s capabilities, intentions, and limitations \u2013 i.e., establishing a\ncoherent threat model. As shown in Fig. 1, we assume all design stages (i.e. front-end, back-end) in the design house are performed in a trusted environment. We also assume the packaging-related activities are performed in a trusted setting.\nStill referring to Fig. 1, the first threat we consider in this work is that of a fabrication-time HT insertion. We assume that a rogue engineer inside the foundry has the ability to insert HTs into the finalized layout, and he/she is capable of using any type of advanced CAD tool. Since the adversary works for the foundry, he has access to the PDK. In our threat model, we specifically focus on additive HTs.\nWhen the already packaged chip reaches the market as a ready-to-use product, we consider the end-user to be a potential adversary. In line with the specialized literature, we assume he/she is capable of using advanced machines such as laser or focused ion beam generators, as well as precise measurement devices to perform fault injection and/or probing. In both cases, the goal of the attacker is to extract sensitive information out of the chip, either by injecting different types of fault or by creating a cavity through milling to expose the sensitive nets, followed by depositing a conductor in the cavity to form a contact pad on the chip\u2019s surface. In this case, an attacker is able to probe the created pad to extract the sensitive data. It should be noted that for the probing, we only consider front-side probing."
        },
        {
            "heading": "III. MOTIVATION",
            "text": "The initial motivation for this work is coming from the authors\u2019 participation in a hardware security contest that aimed to protect designs against post-design threats [29]. While being challenging, due to some limitations, only open-source libraries and PDKs can be used in these types of contests in order to make sure the contest does not restrict participation due to (lack of) access to realistic industry PDKs. Nevertheless, one should validate the devised techniques against commercial cell libraries, PDKs, and tools, in order to ensure their practicality in real applications.\nA. ISPD\u201922 Contest: Security Closure of Physical Layouts\nThis contest was part of the 2022 edition of the International Symposium on Physical Design (ISPD). The participants of this contest were to focus on enhancing the security of the physical layout of ICs. As security engineers, teams were required to systematically and proactively assess and address vulnerabilities in IC layouts during the design phase, specifically targeting the selected threats of HT insertion, probing, and fault injection.\n1) Contest Structure: To make the participants comfortable to use their own preferred (commercial, open-source, or inhouse-developed) tools, a Design Exchange Format (DEF) file, and other related post-synthesis files were given to the teams as the baseline. Teams were then asked to do their best to enhance the security of the provided designs. Proposed solutions could be submitted to an online evaluation system for scoring. The benchmarks chosen for this contest mostly consisted of crypto cores that were divided into alpha-round benchmarks (CAST, Camellia, MISTY, PRESENT, OpenMSP430 1, and\n4\nthree versions of AES [30]\u2013[32]) and final-round benchmarks (SEED, TDEA, OpenMSP430 2, and SPARX [30], [31]). Teams advanced to the final round by submitting valid designs for all alpha-round benchmarks.\n2) Scoring: The overall score is calculated using Eq. 1. To mimic the real challenges that a security engineer would face during physical synthesis, design quality (i.e., PPA) was considered in the final scores as well. Hence, the participants not only had to consider enhancing the security but also try to maintain the design quality at an acceptable level. The metrics for design quality consisted of equally-weighted distribution of power, performance (in terms of clock frequency), area, and routing quality. The baseline provided by the organizers had a score of 1. Submissions that improve design quality or security would be scored between [0, 1), whereas poor submissions would be scored between (1,\u221e].\nScore = DesignQuality \u00d7 Security (1)\nFor the security component of Eq. 1, equally-weighted metrics for HT insertion and FSP/FI were considered. For FSP/FI, only single-directional attacks from the front side are considered. Since the Security component is composed of two other metrics, Eq. 1 can be represented as follows:\nScore = des\u00d7 ti\u00d7 fsp fi (2)\nwhere des denotes the design quality, ti denotes the HT insertion and fsp fi is front-side probing and fault injection.\nTo obtain the security scores for FSP/FI, first, a set of sensitive cells (logical elements) and their related interconnections (wires) were introduced to the participants for each design. The cells are termed as cell assets and the wires are called net assets. After that, a so-called exposed area metric is calculated for each set of cell and net assets in each design. The exposed area is referred to any spatial area of those cell/net assets, whether continuous or fragmented, that is reachable through the metal stack from the top. An example of an exposed area is shown in Fig. 2.\nFor HTs, an exploitable region metric was defined as the set of continuous placement sites1 that are either i) free ii) occupied by filler cells or non-functional cells, or iii) unconnected\n1A placement site represents a predefined valid location where a cell be legally placed; placement sites are typically a function of the standard cell height and the contacted poly pitch.\ncells. The criterion for identifying continuous placement sites as an exploitable region is met when the number of the sites reaches a minimum threshold of 20. Moreover, free routing tracks around the exploitable region(s) were also considered. The main idea is that an adversary needs placement resources and routing resources to insert an HT successfully. Hence, there should be enough gaps in the layout or some logic that can be easily removed.\nEach of the mentioned parameters in 2 has specific weights and is calculated as follows:\n\u2022 For the Trojan insertion (ti), 60% of the score comes from the placement sites of exploitable regions (ti sts), and the other 40% comes from the routing resources of exploitable regions (ti fts).\n\u2022 For the front-side probing and fault injection (fsp fi), the score is equally distributed between the exposed area of the cell assets (fsp fi ea c) and the exposed area of the net assets (fsp fi ea n).\n\u2022 For the design quality (des), 10% of the score is dedicated to the power (des p total), 30% to the performance (des perf ) in terms of timing violations (if any), 30% to the area (des area), and 30% to Design Rule Checks (DRCs) (des issues).\n3) Contest Logistics: The contest did not restrict the use of any tooling from specific vendors. The PDK/standard cell library of choice is the Nangate 45nm Open Cell Library [33] since it is freely available. The metal stacks considered were 6M and 10M, depending on (complexity of) the benchmark."
        },
        {
            "heading": "IV. SECURITY-AWARE LAYOUT SYNTHESIS",
            "text": "Let us now introduce SALSy, the main contribution of this work. We will first describe the strategies employed during the contest, and later we will narrow down the strategies only to those practical ones exercised in our tapeout. The strategies and their relative order are shown in Fig. 3.\nWe remind the reader that the competition emphasized a balance between security and PPA, as evidenced by the scoring formulas. On the design side, even if we employed customized implementation scripts for each benchmark, our implementations will not be discussed in detail since the scripts implement a fairly traditional flow. In the text that follows, we will focus on the security aspects.\nSince the scoring system considers different metrics for front-side probing/fault injection (fsp fi) and HT insertion (ti), we explain the related techniques separately."
        },
        {
            "heading": "A. Countermeasures against FSP/FI",
            "text": "1) Non-default Rule Clock Tree Synthesis: The insight of this strategy is to change the default rules for Clock Tree Synthesis (CTS) 2 in order to cover more assets by enlarging the clock distribution wires. Note that CTS routing utilizes\n2CTS is an essential step in the design process of digital ICs, involving the construction of a network of clock branches to distribute clock efficiently signal across the entire circuit. By carefully constructing the network, observing delay balancing, and skew management, timing can be improved and power consumption can be reduced. CTS routing usually takes precedence and priority over signal routing, which we leverage for security purposes.\n5 Unsecured Layout\nNon-default Rule CTS \u2460 Intermediate Buffering \u2464\nLayer-targeted Routing \u2461 Selectively Cell Flipping \u2465\nMulticut Via Insertion \u2462 Location-based Buffering \u2466\nEdge Cell Placement \u2463 Final Cell Refinement \u2467\nSatisfied with TI\nSecurity?\nSatisfied with FSP/FI\nSecurity?\nSecure Layout\nNo\nYes\nNo\nYes\nFig. 3. SALSy framework. Red boxes highlight techniques that are not feasible for the tapeout. Green boxes highlight techniques that can be used in the contest and in the tapeout.\nfewer resources than signal routing. Hence, CTS wires can be widened many times more than signal wires. As shown in\nFig. 4(a), the enlarged clock tree can significantly cover more exposed areas under it. Quite often the quality of the CTS is improved by using non-default rules.\n2) Layer-targeted Routing: Recall that the exposed area metric, which applies to cells and nets, corresponds to the asset area directly accessible from the front side. In the first step, we try to hide the net assets under the other non-asset nets to protect them against FSP/FI, as shown in Algorithm 1. For this purpose, we dedicate the lowest possible metal layers3 to the net assets only (line 3). It should be noted that we use the minimum width for routing these asset-related wires to be later able to \u2018hide\u2019 them under the other nets (line 5).\nNext, all remaining non-assets nets are defined to be routed with higher metal layers (line 4). Furthermore, we choose wider width instead of the default one to increase the chance of covering net and cell assets (line 6). If the routing tool fails to route the nets with the modified width or in the preferred metal layer, it will try to route them with the default width and in default metal layers (lines 12-14, 20-22). For the physical synthesis tool utilized, routing constraints are soft constraints. I.e., the tool will try the hardest to follow the constraints; if it fails, the constraints are disregarded.\nAs an example, in Algorithm 1, we consider M2 and M3 layers for routing only the net assets (line 3), and the higher metal layers M4-M6 are used for non-asset net routing (line 4). In this example, the width of the non-asset nets is 2x wider than the asset nets (line 6), but this number can be increased if\n3Several metal layers form a metal stack, where the lowermost layers are usually the thinnest of them.\nAlgorithm 1 Layer-targeted Routing Algorithm 1: net assets\u2190 List of net assets 2: other nets\u2190 List of other nets 3: prf lays assets\u2190 [M2,M3] 4: prf lays others\u2190 [M4,M5,M6] 5: width for assets\u2190 width(M2) \u25b7 This value is the\nminimum width according to the library 6: width for others\u2190 width(M2)\u00d7 2 7: foreach net in net assets do 8: assign prf lays assets to route layer 9: assign width for assets to width rule\n10: end for 11: route net assets with width ruler in route layer 12: if (route err) then 13: route net assets with default rules 14: end if 15: foreach net in other nets do 16: assign prf lays others to route layer 17: assign width for others to width rule 18: end for 19: route other nets with width ruler in route layer 20: if (route err) then 21: route other nets with default rules 22: end if\nmore resources are available4. After applying this technique, the congestion increases significantly, and therefore, more cell assets and net assets can be protected against FSP/FI, as shown in Fig. 4(b).\n3) Multi-cut Via Insertion: A vertical connection named via (cut) connects different metal layers in the metal stack of an IC. By default, the physical synthesis tool uses the minimum number of vias and smallest vias available for the connection to optimize routing resource usage and prevent routing congestion. However, our strategy aims to increase the congestion on top of the cell assets to cover them as much as possible. Hence, we use multi-cut vias between M1 and M2 layers. By doing this, a larger piece of metal is routed on the top of the cell assets, improving the coverage, as shown in Fig. 5. The reason that we use multi-cut vias only between M1 and M2 layers is that we do not want to touch the higher metal layer resources, leaving them for signal routing.\n4) Edge Cell Placement: In some of the benchmarks, it is observed that net assets include long wires that travel a long distance from IO pins to their sinks (see the wires highlighted in green in Fig. 4(c)). Hence, we use a technique in which the sink cell connected to the IO pins via net assets is moved to the closest possible position to their driver. In this case, the length of the net assets becomes significantly shorter, which makes it easier to be covered by other nets on upper layers since shorter nets tend to have fewer turns and jogs.\n5) Intermediate Buffering: The previous technique for shortening net assets only works for those long wires connected to the IO pins. However, net assets are not always connected to IO pins, and it is challenging to protect them\n4In a real IC, the number of metal layers depends on the technology/metal stack agreed with the foundry. Current technologies often offer 10+ layers.\n6 (a) (b)\n(c) (d)\nFig. 4. Different techniques used in SALSy. The design on the left is always the BL variant, and the design on the right is always the SEC variant. a) Non-default Rule CTS, b) Increased congestion by applying Layer-targeted Routing, c) Edge Cell Placement for shortening the long net assets (highlighted in green), and d) Reducing the length of the net assets (highlighted in green) by applying Intermediate Buffering technique (added buffers appear in red).\nFig. 5. Using the default rules for via insertion (left) and multi-cut via insertion (right) to increase the coverage of cell assets\ndue to their long length. In this case, when both driver and sink are inside the core area (the region where all the cells are placed in), we put buffer(s) in between them to reduce the length of the long net assets, as shown in Fig. 4(d). It should be noted that buffer insertion might significantly impact the design\u2019s timing and power consumption. Hence, we consider this technique iteratively with multiple checkpoints. If the buffer insertion introduces a timing-violating path, that buffer can be removed, and the circuit goes back to its previous state without the violation.\n6) Selectively Cell Flipping: In some cases, the exposed area of the net assets can be significantly reduced by changing the orientation of the cell (flip over the Y axis). In this case, the physical synthesis tool automatically re-routes the nets connected to the flipped cell, and the chance of hiding the net asset under other nets increases, as depicted in Fig. 6. It\nFig. 6. An example of covering a net asset by flipping the cell: The exposed area (solid yellow regions in the left image) is totally covered by the nets in the upper metal layer(s) after the net is re-routed (right image).\nshould be noted that this technique is performed in the very last steps of our methodology, and only the net assets with the worst exposed area are selected."
        },
        {
            "heading": "B. Countermeasures against HT Insertion",
            "text": "We now explain the techniques used for preventing HT insertion. Recall the exploitable region notion, a set of continuous gaps, filler cells, unconnected cells, or non-functional cells, that an adversary can use to place his/her malicious logic. In principle, available routing resources are also considered when determining exploitable regions since the HT circuitry needs to be somehow connected to the original design. However, our efforts are directed toward mitigating the\n7 (a) (b)\nFig. 7. An example of a) design with exploitable regions (highlighted in red), and b) design with zero exploitable regions using our techniques.\nfree placement sites. This is mainly because if we eliminate all the gaps, there would be no room for the HT cells to be placed in the design. Therefore, available routing resources become meaningless.\n7) Location-based Buffering: Even after shrinking the design area to make the core area as dense and compact as possible, several gaps may still exist and create large exploitable areas. As the threshold for continuous gaps to be considered an exploitable region is 20 placement sites, we developed a script to search for these regions and insert buffers to fill or cut the continuous gaps below 20 sites. It should be noted that whenever buffer insertion is considered, there are overheads in power and, potentially, in timing. However, the trade-off between security and PPA is arguably beneficial for this particular technique.\n8) Final Cell Refinement: There might be cases where the buffer insertion fails due to a lack of routing resources in congested areas. It may also succeed but create timing violations. We try to eliminate the remaining exploitable regions in these cases by slightly moving the surrounding cells. This simple technique can be done using algorithmic approaches as introduced in [27] or manually by the physical design engineer (if there are few cases).\nFig. 7 shows how we eliminate all exploitable regions in a design by adopting the mentioned techniques.\nC. ISPD Contest Wrap-up\nThe scoring formula, given in Eq. 1, was meant to normalize results against the baselines while giving equal importance to design quality and security. However, since there is a multiplicative factor between these two score components, achieving a score of 0 in security (which is impossible in practice) would also bring the overall score to 0.\nContestants eventually realized that drawing a single metal plate above the entire design was sufficient to eliminate all threats. This solution corresponds to using an entire metal layer as a sacrificial layer. This solution does create DRC violations, but the scoring formula fails to penalize teams: since the security score is zero, the design component of Eq. 1\nis irrelevant. All in all, the contest ended with four teams tied with \u201cperfect scores\u201d of zero. The final scores are shown in Tab. I. Our team is identified as team \u2018K\u2019.\nTo be very clear, we emphasize that the sacrificial metal layer solution has no practical or academic merit. It does not effectively protect against any of the considered threats. It is only effective in satisfying the contest\u2019s scoring. A clearer picture of the overheads imposed by our techniques can be seen in Tab. II, where it can be seen that when considering only the design component of Eq. 1, our scores are rather competitive. These scores were later used as a tiebreaker to define the ranking of the tied teams.\n8 Camellia_BL (53.95%)\nCamellia_SEC (87.22%)\nPRESENT_SEC (91.32%)\nSEED_SEC (86.07%)\nCAST_SEC (86.75%)\nPRESENT_BL (48.41%)\nCAST_BL (49.55%)\nSEED_BL (51.26%)\nFig. 8. Floorplan view of the chip including eight blocks and density of each block."
        },
        {
            "heading": "V. SILICON VALIDATION OF SALSY",
            "text": "In the previous section, we provided details about the different techniques that can be used to improve the security of an IC based on specific evaluation metrics [29]. However, all these techniques were initially developed for open-source PDKs. Commercial PDKs that are used by industry are more detailed than the academic ones and using these commercial PDKs increases the design complexity and introduces certain practical limitations. Hence, we decided to fabricate a chip with the mentioned security features to highlight the gaps and limitations with the open PDKs and provide solutions to cope with these limitations.\nThe first step in designing our chip is to localize the scoring system with respect to the commercial library so that we can evaluate the security features of the chip while adopting the same metrics from [29]. Next, we have to decide which designs we are going to tapeout. We have opted for a small chip size (1 mm2) that is enough to fit four designs arranged as eight blocks: four secured versions (SEC) and four baseline versions (BL). By having a pair of each benchmark on the same chip, we can evaluate and compare the security and design quality of each block fairly. The designs were selected to provide variety in terms of complexity and size; The final candidates include Camellia, CAST, PRESENT, and SEED. The floorplan of the chip is shown in Fig. 8. Different blocks are highlighted in colors and the rest of the core area is dedicated to the comparison and control unit. To make the comparison fair, we set the same density for all BL versions of the benchmarks as they were set in the contest. For the SEC variants, density is a function of the SALSy methodology. Furthermore, we implement distinct power domains for each block. This strategic approach enables us to activate only one block at a time while ensuring all other blocks remain in an off-state. Consequently, we can precisely measure the power consumption, one block at a time.\nA microscope view of our fabricated chip is shown in Fig. 9. We validate the efficiency of our techniques on all four benchmarks implemented on our chip. However, it should be noted again that our approach is applicable to any design, regardless of function or size. Another advantage of our solution is that it does not need previous knowledge about the\nFig. 9. Microscope view of the fabricated 1mm2 chip.\ndesign since it is performed at the layout level. We hypothesize that SALSy creates an opportunity to assign security closure to a separate design team since no specific details/characteristics of the design are needed for improving security. The interface between this team and the traditional physical synthesis team would be the list of assets.\nA. Implementation\nA key factor to improve HT and FSP/FI security is to increase the design\u2019s density. By doing this, first, the chance of HT insertion decreases by reducing the number of gaps, and second, more cell and net assets can be protected against FI/FSP due to the increased wire congestion. Therefore, we shrink all designs as much as possible before applying any specific technique. Note the smaller size of the SEC variants with respect to the BL variants in Fig. 8. In the following, we provide more details about the chip implementation. It should be noted that the related scripts for the implementation flow have become publicly available in [34].\n1) Non-default Rule CTS: This technique is applicable to commercial libraries as well but with some restrictions regarding the maximum width of the wires. These restrictions are imposed by the foundry to maintain design compatibility with their equipment. In other words, we cannot enlarge the clock wires by arbitrary factors as we did in the contest, but still, it is possible to enlarge them from their default size. Although this technique is less effective in compared with the contest, we decided to keep using it since it has negligible overhead on the power and other performance-related metrics.\n2) Layer-targeted Routing: Similar to what we did in the contest, we use the routing strategy from Algorithm 1. The only difference here, when using commercial libraries, is that they are more detailed and characterized to ensure the design rule accuracy and verification. Hence, as the design gets denser, more violations appear due to different reasons to ensure the quality and reliability of the chip during the fabrication process. This means that achieving high density (above 90% for the considered 65nm technology) is very challenging. As a consequence, it is impossible to route all the asset or non-asset nets in their preferred metal layers as we did in the contest. However, even with the cost of routing some of the asset nets in the top metal layers, this technique\n9\nstill helps to cover a large portion of the exposed area of the assets (see Section VI for more details).\n3) Multicut Via Insertion: This method is the first one we had to abandon due to the strict constraint in the commercial library. Although it is theoretically possible to use multi-cut vias to connect the pins, it creates DRC issues after the wires are connected to the vias. Given the significant challenge of addressing numerous DRC violations, adopting this method in our chip was not practical. Yet, this solution can be revisited for a different commercial library/PDK.\n4) Edge Cell Placement: An important difference between the contest and an actual tapeout is that each design was treated as a separate chip in the contest, while we have to put all the designs together on one chip. Hence, we have little freedom in defining the IO pin locations for each design. The decision of putting the IO pins on one of the block sides (left, right, bottom, or top) is defined during top-level floorplanning. For instance, if we consider the location of the PRESENT SEC block in Fig. 8, the best place to put the IO pins is on the bottom edge of the block since it has the closest distance to the control and comparison unit which is located in the center of the chip. In this case, the routing would be done with fewer issues and unnecessary resource utilization would be avoided, leading to a more optimized floorplan.\nThis restriction in pin placement leads to the limitation of using this technique in our chip. As shown in Fig. 10, there is only a limited area close to the IO pins that are connected to the net assets (highlighted in white), and it is impossible to fit all the connected cells near their driver/sink pins since the congestion in that region increases significantly and the design becomes unroutable. Hence, this technique cannot be used in this specific floorplan. However, it is crucial to highlight that this limitation does not impede the potential application of this technique in other chip implementations, as in the contest that we could fit the cells near to their relative IO pins due to the square shape of the block and the fact that there was enough space around all four sides of the design (Fig. 4).\n5) Selectively Cell Flipping: This technique can be used in chip implementation as well as in the contest setting without facing any specific limitations. However, we minimize the use of this method due to its inherent manual nature. Our\noverarching objective is to uphold a holistic and automated approach, eschewing the adoption of selective techniques, in order to ensure the comprehensive applicability of our approach.\n6) Intermediate Buffering: As mentioned in the previous section, buffer insertion can have undesirable effects on the timing and power of the design. In the contest, such issues were only considered as a negative factor in the final score to penalize the teams. But in the actual chip, any single issue that violates the timing of the design (i.e. setup time, hold time, etc.) was considered unacceptable. Hence, the timing closure of the design should be perfect and the trade-off between the timing issues and the enhanced security is only possible as long as the timing slack remains positive. Due to this reason, we replaced this technique with a smarter buffer insertion algorithm which is explained in the text that follows.\n7) Location-based Buffering: As mentioned in the previous part, we change our buffer insertion strategy such that it is no longer aimed to shorten the long net assets. Instead, it is totally focused on filling the continuous gaps of the design in a completely automated fashion. In other words, the buffer insertion technique turns into a location-based algorithm that seeks exploitable regions, rather than searching for long net assets. The sinks and the drivers of the added buffer are selected from the nearby cells such that it has the least negative impact on the timing of the design, as highlighted in Fig. 11.\n8) Final Cell Refinement: Similar to what we did in the contest, this technique is used in the very late steps of the chip implementation as manual fixes. If any exploitable region is left that can be eliminated with a few cell movements, it is possible to use this method. However, we decided to minimize this technique in our chip due to two reasons: i) if an exploitable region is eliminated simply by moving the cells, the adversary can revert the changes to make enough space for his/her malicious logic as well. Although being effective in the contest, in a realistic scenario it seems to be a useless effort; ii) It conflicts with our aim to create an automated flow."
        },
        {
            "heading": "VI. RESULTS",
            "text": "In this section, we provide the experimental results obtained from chip design and measurements. During the physi-\n10\nTABLE III FINAL SCORES OF OUR APPROACH FOR FOUR DIFFERENT BENCHMARKS\nMetrics / Benchmarks Camellia CAST PRESENT SEED\nDesign Quality\nDRC des issues 0.000 0.000 0.000 0.000 PPA des perf 0.000 0.000 0.000 0.000 des p total 1.184 1.072 1.161 1.041 des area 0.686 0.606 0.597 0.627 Overall des 0.467 0.419 0.439 0.417\nSecurity\nTrojan Insertion ti sts 0.000 0.015 0.000 0.026 ti fts 0.000 0.079 0.000 0.169 Overall ti 0.000 0.047 0.000 0.097 FSP/FI fsp fi ea c 0.842 0.797 0.293 0.762 fsp fi ea n 0.624 0.833 0.568 0.835\nOverall fsp fi 0.733 0.815 0.430 0.799 Final score OVERALL 0.171 0.181 0.094 0.187\ncal implementation process, we used Cadence and Siemens toolchains and our target technology is a general-purpose flavor of a 65nm CMOS technology.\nWe divide the results into two parts, pre-silicon and postsilicon results. The first part represents the results obtained from the final layout sent for fabrication such as the area and density of the blocks. Physical chip measurements, such as power consumption, are provided in the second part."
        },
        {
            "heading": "A. Pre-silicon Results",
            "text": "As mentioned before, we evaluate our techniques using the same scoring system used in [29]. In the following, we provide more details about each metric.\nBased on the considered metrics, the final scores of our approach are presented in Tab. III. The table clearly demonstrates that our best scores are related to HT insertion, providing strong evidence that SALSy can effectively function as a prevention technique in a realistic PDK setting. Conversely, as anticipated, our worst scores are associated with power, primarily resulting from the buffer insertion applied to enhance security. The power consumption of our designs consistently exceeded the baselines, as indicated by values greater than 1.0 for all cases. Nevertheless, it is important to acknowledge that a certain level of overhead is inevitable when trading off for enhanced security. The power numbers reported in Tab. III are estimates from physical synthesis; precise power consumption numbers are provided in Section VI-B.\nThe presented table illustrates a substantial reduction in the count of exploitable regions within our secured version across all benchmarks. This reduction is notably profound, with a 100% decrease observed in the case of Camellia and PRESENT benchmarks. Furthermore, for the CAST and SEED benchmarks, the reduction percentages stand at 95.3% and 90.3% respectively. Regarding FSP/FI assessment, benchmarks exhibit varying outcomes. PRESENT benchmark excels with an impressive 43% exposed area reduction from the baseline, while the CAST benchmark demonstrates a more moderate 18.5% enhancement.\nTo provide a comprehensive understanding of the relationship between each step of SALSy and the resulting scores, individual scores for the PRESENT benchmark are presented in Tab. IV after subsequently applying each technique. The\nFig. 12. The testing environment for the fabricated chip.\ntable reveals that the Layer-targeted Routing step has the most significant effect on the fsp fi and overall scores, given its substantial impact on increasing congestion. On the other hand, the Location-based Buffer Insertion technique has the most substantial impact on enhancing the ti score, as it drastically reduces the number of gaps in the layout. Remarkably, the overall trend of score improvement, as displayed in Table IV, remains consistent for all other three benchmarks. We omit these results for the sake of space."
        },
        {
            "heading": "B. Post-fabrication Results",
            "text": "In this section, we present the measurement results obtained from the actual chip. The testing environment, illustrated in Fig. 12, comprises several components: a controller responsible for serial communication, input feeding, output reading, and data analysis; a power supply; a frequency generator providing a fast clock; and a precise measuring unit for assessing the chip\u2019s power consumption under various scenarios. We conducted the experiments on 20 packaged chips, chosen from a total of 100 fabricated chips.\n1) Verifying the Chip Functionality: Before proceeding with power measurements, it is crucial to ensure that our chips, particularly their blocks, are functioning as intended. To accomplish this, we developed a Python script that systematically activates the blocks one by one at the target frequency, while simultaneously verifying the validity of the output data for each chosen block. All chips are deemed functional and we proceed with power measurements. It is worth mentioning that our target frequency for all blocks is 100MHz, whereas\n11\nthe clock frequency for the comparison and control unit is set to 1MHz. A fast 100MHz reference clock is generated by an external frequency generator, as depicted in Fig. 12. We remind the reader that total power is the sum of dynamic and static (leakage) power, which we will report separately. Our dynamic power results are reported at 100MHz.\n2) Leakage Power Measurement: Once the functionality of the chip has been verified, we proceed to measure the power consumption. We begin by assessing the Always On (AO) leakage power of the chip. As the name suggests, AO indicates that this type of power consumption is present consistently, regardless of whether the IC is actively performing computations or tasks (functional mode), and measuring AO leakage power does not depend on the switching activity of the transistors of the chip. In this measurement, no inputs other than the power supply signals are fed into the chip. It allows us to capture the baseline power consumption when the chip is in its idle state, and no specific operations are being performed.\nFollowing the AO leakage power measurement, we proceed with measuring the leakage power of each individual block. To achieve this, we activate one block at a time by asserting the appropriate configuration of the input signals specifically designed for the voltage island of that block. Each block is encompassed by power switches, granting us the capability to activate or deactivate them as needed. This meticulous power domain segregation significantly enhances measurement accuracy by eliminating power-sharing with any other block. Similar to the AO leakage measurement, no clock or any other signals are fed to the chip during this procedure. This allows us to precisely assess the power consumption of each individual block in isolation, shedding light on their specific power characteristics.\nThe leakage power results are depicted in Fig. 13. As illustrated, different chips exhibit distinct power signatures, which can be attributed to process variation. These variations are inherent in the semiconductor fabrication process and can lead to differences in power consumption among individual chips. The observed differences in leakage power highlight the significance of process variability in chip manufacturing and underscore the need for thorough testing and analysis of power characteristics in real-world chip deployments. The\nstatic power incurs an average overhead of 1.72%, 1.66%, 15.89%, and 7.24% across the PRESENT, SEED, Camellia, and CAST benchmarks, respectively.\n3) Dynamic Power Measurement: The dynamic power measurement test is conducted to assess the power consumption of each design block in functional mode. To achieve this, we activate the blocks one by one and provide them with appropriate inputs (plain text) while operating at a clock frequency of 100MHz. The plain text inputs can be sourced either from an internal register bank within the chip or from the host controller through the UART protocol. The results of the dynamic power measurement are presented in Fig. 14. Across all benchmarks, the average overhead for dynamic power consumption remains below 3%. Specifically, the PRESENT, SEED, Camellia, and CAST benchmarks exhibit overheads of 0.79%, 0.86%, 2.02%, and 1.96% respectively."
        },
        {
            "heading": "VII. DISCUSSION",
            "text": "SALSy aims to prevent post-design attacks and is evaluated with the metrics from [29]. However, some introduced metrics could arguably be redefined to make the evaluation more realistic - thus, the results could be readily leveraged by industry. For instance, considering the threshold of 20 continuous gaps for the exploitable area might be too optimistic since small HTs only occupy a few placement sites [35]. Furthermore, for the FSP/FI threats, the aim is to protect the design. For instance, in the ideal case, if an attacker tries to compromise the sensitive data by drilling a hole (milling), the chip should fail to operate due to damage to the protective nets above the sensitive nets. Hence, trivial defense schemes such as covering the whole core area with a large metal plate should not be considered a valid solution since the existence of this layer will not be an obstacle for the attacker.\nMoreover, the scripted nature of SALSy is a strategic choice that aligns with the scalability needs of the industry. While designing a security-aware place and route engine might be an attractive academic pursuit, such an endeavor could lack the scalability required for real-world, large-scale chip designs. By scripting SALSy, we emphasize its flexibility, making it adaptable to various design sizes and complexities, and thus addressing the practical needs of industry.\n12\nAdditionally, standard deviation values for the leakage power consumption of both the baseline and secured versions of each block were obtained. The minimum values are 5.41\u00d7 10\u22123 and 5.49\u00d710\u22123 for the baseline and secured versions of the PRESENT benchmark, respectively, while the maximum values are 3.46 \u00d7 10\u22122 for the baseline and 3.39 \u00d7 10\u22122 for the secured versions of the CAST benchmark. These results highlight that the SALSy approach exhibits sensitivity to process variation comparable to that of the conventional security-unaware flow.\nWe have also compared SALSy against the most related prior arts to give the reader a better understanding of the key differences in power, timing, area, and density promoted by SALSy. As shown in Tab. VII, our work is the only one that validated the presented technique in silicon. All other works only aim for security closure, and some of them suffer from the various issues we have highlighted related to the use of limited PDKs/libraries. The sign indicates improvement, the sign indicates deterioration of the introduced metrics, while the\nsign indicates that there are no considerable changes after applying the individual technique. N/A indicates the metric is not reported by the authors. It should be noted that we consider the increase in density as an improvement since it enhances the security of the design against the considered threats."
        },
        {
            "heading": "VIII. CONCLUSION",
            "text": "In this paper, we have introduced SALSy, a design-time methodology to bolster the security of ICs against fabricationtime and post-fabrication attacks. Through a silicon demonstration, we successfully validated our solution, showcasing\nits fitness for use with a commercial PDK and cell library. In our pursuit of heightened security, our methodology strikes a prudent balance by incurring only a modest increase in power consumption. Although effective against Trojan insertion, there is still room for enhancing security against FSP/FI. Our future research will focus on automating the introduced techniques, including selective methods, and incorporating new approaches to bolster FSP/FI defense and overall security. Additionally, we contemplate introducing new evaluation metrics alongside the existing ones to provide a more realistic and comprehensive assessment."
        }
    ],
    "title": "SALSy: Security-Aware Layout Synthesis",
    "year": 2023
}