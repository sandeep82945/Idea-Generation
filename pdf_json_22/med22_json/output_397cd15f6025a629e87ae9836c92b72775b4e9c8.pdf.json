{
    "abstractText": "Over the last decade, the usage of Internet of Things (IoT) enabled applications, such as healthcare, intelligent vehicles, and smart homes, has increased progressively. These IoT applications generate delayedsensitive data and requires quick resources for execution. Recently, softwaredefined networks (SDN) offer an edge computing paradigm (e.g., fog computing) to run these applications with minimum end-to-end delays. Offloading and scheduling are promising schemes of edge computing to run delay-sensitive IoT applications while satisfying their requirements. However, in the dynamic environment, existing offloading and scheduling techniques are not ideal and decrease the performance of such applications. This article formulates joint and scheduling problems into combinatorial integer linear programming (CILP). We propose a joint task offloading and scheduling (JTOS) framework based on the problem. JTOS consists of task offloading, sequencing, scheduling, searching, and failure components. The study\u2019s goal is to minimize the hybrid delay of all applications. The performance evaluation shows that JTOS outperforms all existing baseline methods in hybrid delay for all applications in the dynamic environment. The performance evaluation shows that JTOS reduces the processing delay by 39% and the communication delay by 35% for IoT applications compared to existing schemes.",
    "authors": [
        {
            "affiliations": [],
            "name": "Abdullah Lakhan"
        },
        {
            "affiliations": [],
            "name": "Mazin Abed Mohammed"
        },
        {
            "affiliations": [],
            "name": "Mustafa Musa Jaber"
        },
        {
            "affiliations": [],
            "name": "Jan Nedoma"
        },
        {
            "affiliations": [],
            "name": "Radek Martinek"
        }
    ],
    "id": "SP:c7a8ffb8b8e1585544b27db2a590ef09599c2512",
    "references": [
        {
            "authors": [
                "D. De",
                "A. Mukherjee",
                "D.G. Roy"
            ],
            "title": "Power and Delay Efficient Multilevel Offloading Strategies for Mobile Cloud Computing",
            "venue": "Wirel. Pers. Commun",
            "year": 2020
        },
        {
            "authors": [
                "O.K. Shahryari",
                "H. Pedram",
                "V. Khajehvand",
                "M.D. TakhtFooladi"
            ],
            "title": "Energy-Efficient and Delay-Guaranteed Computation Offloading for Fog-Based",
            "venue": "IoT Networks. Comput. Netw",
            "year": 2020
        },
        {
            "authors": [
                "R.O. Aburukba",
                "M. AliKarrar",
                "T. Landolsi",
                "K. El-Fakih"
            ],
            "title": "Scheduling Internet of Things requests to minimize latency in hybrid Fog\u2013Cloud? computing",
            "venue": "Future Gener. Comput. Syst",
            "year": 2020
        },
        {
            "authors": [
                "C. Lin",
                "G. Han",
                "X. Qi",
                "M. Guizani",
                "L. Shu"
            ],
            "title": "A Distributed Mobile Fog Computing Scheme for Mobile Delay-Sensitive Applications in SDN-Enabled Vehicular Networks",
            "venue": "IEEE Trans. Veh. Technol",
            "year": 2020
        },
        {
            "authors": [
                "Q. Fan",
                "N. Ansari"
            ],
            "title": "Application aware workload allocation for edge computing-based IoT",
            "venue": "IEEE Internet Things J. 2018,",
            "year": 2018
        },
        {
            "authors": [
                "B. Kavitha",
                "R. Vallikannu",
                "K.S. Sankaran"
            ],
            "title": "Delay-aware concurrent data management method for IoT collaborative mobile edge computing environment",
            "venue": "Microprocess. Microsystems",
            "year": 2020
        },
        {
            "authors": [
                "T. Chanyour",
                "M. El Ghmary",
                "Y. Hmimz",
                "M.O. Cherkaoui Malki"
            ],
            "title": "Energy-efficient and delay-aware multitask offloading for mobile edge computing networks",
            "venue": "Trans. Emerg. Telecommun. Technol. 2019,",
            "year": 2019
        },
        {
            "authors": [
                "V. Chamola",
                "C.K. Tham",
                "S. Gurunarayanan",
                "N. Ansari"
            ],
            "title": "An optimal delay aware task assignment scheme for wireless SDN networked edge cloudlets",
            "venue": "Future Gener. Comput. Syst. 2020,",
            "year": 2020
        },
        {
            "authors": [
                "P. Roy",
                "S. Sarker",
                "M.A. Razzaque",
                "M.M. Hassan",
                "S.A. AlQahtani",
                "G. Aloi",
                "G. Fortino"
            ],
            "title": "AI-enabled mobile multimedia service instance placement scheme in mobile edge computing",
            "venue": "Comput. Netw",
            "year": 2020
        },
        {
            "authors": [
                "X. Gu",
                "G. Zhang",
                "Y. Cao"
            ],
            "title": "Cooperative mobile edge computing-cloud computing in Internet of vehicle: Architecture and energy-efficient workload allocation",
            "venue": "Trans. Emerg. Telecommun. Technol",
            "year": 2020
        },
        {
            "authors": [
                "L. Zhang",
                "N. Ansari"
            ],
            "title": "Latency-aware IoT Service Provisioning in UAV-aided Mobile Edge Computing Networks",
            "venue": "IEEE Internet Things J. 2020,",
            "year": 2020
        },
        {
            "authors": [
                "Q. Xia",
                "Z. Lou",
                "W. Xu",
                "Z. Xu"
            ],
            "title": "Near-Optimal and Learning-Driven Task Offloading in a 5G Multi-Cell",
            "venue": "Mobile Edge Cloud. Comput. Netw",
            "year": 2020
        },
        {
            "authors": [
                "M. Abbasi",
                "E.M. Pasand",
                "M.R. Khosravi"
            ],
            "title": "Workload Allocation in IoT-Fog-Cloud Architecture Using a Multi-Objective Genetic Algorithm",
            "venue": "J. Grid Comput",
            "year": 2020
        },
        {
            "authors": [
                "T. Ying Wah",
                "R. Gopal Raj",
                "A. Lakhan"
            ],
            "title": "A novel cost-efficient framework for critical heartbeat task scheduling using the Internet of medical things in a fog cloud system",
            "venue": "Sensors 2020,",
            "year": 2020
        },
        {
            "authors": [
                "K. Arikumar",
                "V. Natarajan"
            ],
            "title": "FIoT: A QoS-Aware Fog-IoT Framework to Minimize Latency in IoT Applications via Fog Offloading",
            "venue": "In Evolution in Computational Intelligence; Springer: Berlin/Heidelberg, Germany,",
            "year": 2021
        },
        {
            "authors": [
                "N. Siasi",
                "M. Jasim",
                "A. Aldalbahi",
                "N. Ghani"
            ],
            "title": "Delay-Aware SFC Provisioning in Hybrid Fog-Cloud Computing Architectures",
            "venue": "IEEE Access 2020,",
            "year": 2020
        },
        {
            "authors": [
                "R.K. Naha",
                "S. Garg",
                "A. Chan",
                "S.K. Battula"
            ],
            "title": "Deadline-based dynamic resource allocation and provisioning algorithms in fog-cloud environment",
            "venue": "Future Gener. Comput. Syst",
            "year": 2020
        },
        {
            "authors": [
                "A. Lakhan",
                "X. Li"
            ],
            "title": "Transient fault aware application partitioning computational offloading algorithm in microservices based mobile cloudlet networks",
            "year": 2020
        },
        {
            "authors": [
                "A. Lakhan",
                "F.A. Khan",
                "Q.H. Abbasi"
            ],
            "title": "Dynamic Content and Failure Aware Task Offloading in Heterogeneous Mobile Cloud Networks",
            "venue": "In Proceedings of the 2019 International Conference on Advances in the Emerging Computing Technologies (AECT), Al Madinah Al Munawwarah, Saudi Arabia,",
            "year": 2020
        },
        {
            "authors": [
                "A. Lakhan",
                "D.K. Sajnani",
                "M. Tahir",
                "M. Aamir",
                "R. Lodhi"
            ],
            "title": "Delay sensitive application partitioning and task scheduling in mobile edge cloud prototyping",
            "venue": "In Proceedings of the International Conference on 5G for Ubiquitous Connectivity, Levi, Finland,",
            "year": 2014
        },
        {
            "authors": [
                "A. Lakhan",
                "L. Xiaoping"
            ],
            "title": "Energy aware dynamic workflow application partitioning and task scheduling in heterogeneous mobile cloud network",
            "venue": "In Proceedings of the 2018 International Conference on Cloud Computing, Big Data and Blockchain (ICCBB), Fuzhou,",
            "year": 2018
        },
        {
            "authors": [
                "A. Lakhan",
                "X. Li"
            ],
            "title": "Content Aware Task Scheduling Framework for Mobile Workflow Applications in Heterogeneous MobileEdge-Cloud Paradigms: CATSA Framework",
            "venue": "In Proceedings of the 2019 IEEE International Conference on Parallel",
            "year": 2019
        },
        {
            "authors": [
                "Q.V. Pham",
                "F. Fang",
                "V.N. Ha",
                "M.J. Piran",
                "M. Le",
                "L.B. Le",
                "W.J. Hwang",
                "Z. Ding"
            ],
            "title": "A survey of multi-access edge computing in 5G and beyond: Fundamentals, technology integration, and state-of-the-art",
            "venue": "IEEE Access 2020,",
            "year": 2020
        },
        {
            "authors": [
                "X. Ma",
                "S. Wang",
                "S. Zhang",
                "P. Yang",
                "C. Lin",
                "X.S. Shen"
            ],
            "title": "Cost-efficient resource provisioning for dynamic requests in cloud assisted mobile edge computing",
            "venue": "IEEE Trans. Cloud Comput",
            "year": 2019
        },
        {
            "authors": [
                "J. Zhang",
                "W. Xia",
                "F. Yan",
                "L. Shen"
            ],
            "title": "Joint computation offloading and resource allocation optimization in heterogeneous networks with mobile edge computing",
            "venue": "IEEE Access 2018,",
            "year": 1932
        },
        {
            "authors": [
                "M.D. Hossain",
                "T. Sultana",
                "V. Nguyen",
                "T.D. Nguyen",
                "L.N. Huynh",
                "E.N. Huh"
            ],
            "title": "Fuzzy Based Collaborative Task Offloading Scheme in the Densely Deployed Small-Cell Networks with Multi-Access Edge Computing",
            "venue": "Appl. Sci",
            "year": 2020
        },
        {
            "authors": [
                "B. Dab",
                "N. Aitsaadi",
                "R. Langar"
            ],
            "title": "A novel joint offloading and resource allocation scheme for mobile edge computing",
            "venue": "In Proceedings of the 2019 16th IEEE Annual Consumer Communications & Networking Conference (CCNC),",
            "year": 2019
        },
        {
            "authors": [
                "N. Mohan",
                "J. Kangasharju"
            ],
            "title": "Edge-Fog cloud: A distributed cloud for Internet of Things computations",
            "venue": "In Proceedings of the 2016 Cloudification of the Internet of Things (CIoT), Paris, France,",
            "year": 2016
        },
        {
            "authors": [
                "A. Brogi",
                "S. Forti"
            ],
            "title": "QoS-aware deployment of IoT applications through the fog",
            "venue": "IEEE Internet Things J. 2017,",
            "year": 2017
        },
        {
            "authors": [
                "A. Brogi",
                "S. Forti",
                "A. Ibrahim"
            ],
            "title": "How to best deploy your fog applications, probably",
            "venue": "In Proceedings of the 2017 IEEE 1st International Conference on Fog and Edge Computing (ICFEC),",
            "year": 2017
        },
        {
            "authors": [
                "H. Gupta",
                "A. Vahid Dastjerdi",
                "S.K. Ghosh",
                "R. Buyya"
            ],
            "title": "iFogSim: A toolkit for modeling and simulation of resource management techniques in the Internet of Things, Edge and Fog computing environments",
            "venue": "Softw. Pract. Exp",
            "year": 2017
        },
        {
            "authors": [
                "S. Forti",
                "A. Pagiaro",
                "A. Brogi"
            ],
            "title": "Simulating FogDirector Application Management",
            "venue": "Simul. Model. Pract. Theory 2020,",
            "year": 1020
        },
        {
            "authors": [
                "T. Qayyum",
                "A.W. Malik",
                "M.A.K. Khattak",
                "O. Khalid",
                "S.U. Khan"
            ],
            "title": "FogNetSim++: A toolkit for modeling and simulation of distributed fog environment",
            "venue": "IEEE Access 2018,",
            "year": 2018
        },
        {
            "authors": [
                "X. Liu",
                "L. Fan",
                "J. Xu",
                "X. Li",
                "L. Gong",
                "J. Grundy",
                "Y. Yang"
            ],
            "title": "FogWorkflowSim: An automated simulation toolkit for workflow performance evaluation in fog computing",
            "venue": "In Proceedings of the 2019 34th IEEE/ACM International Conference on Automated Software Engineering",
            "year": 2019
        },
        {
            "authors": [
                "I. Lera",
                "C. Guerrero",
                "C. Juiz"
            ],
            "title": "YAFS: A simulator for IoT scenarios in fog computing",
            "venue": "IEEE Access 2019,",
            "year": 2019
        },
        {
            "authors": [
                "S. Forti",
                "A. Ibrahim",
                "A. Brogi"
            ],
            "title": "Mimicking FogDirector application management",
            "venue": "SICS Softw.-Intensive -Cyber-Phys. Syst",
            "year": 2019
        },
        {
            "authors": [
                "S. Tuli",
                "R. Mahmud",
                "R. Buyya"
            ],
            "title": "Fogbus: A blockchain-based lightweight framework for edge and fog computing",
            "venue": "J. Syst. Softw",
            "year": 2019
        },
        {
            "authors": [
                "M. Calvo-Fullana",
                "D. Mox",
                "A. Pyattaev",
                "J. Fink",
                "V. Kumar",
                "A. Ribeiro"
            ],
            "title": "ROS-NetSim: A Framework for the Integration of Robotic and Network Simulators",
            "venue": "IEEE Robot. Autom. Lett. 2021,",
            "year": 2021
        }
    ],
    "sections": [
        {
            "text": "Citation: Lakhan, A.; Mohammed,\nM.A.; Abdulkareem, K.H.; Jaber,\nM.M.; Nedoma, J.; Martinek, R.; Zmij,\nP. Delay Optimal Schemes for\nInternet of Things Applications in\nHeterogeneous Edge Cloud\nComputing Networks. Sensors 2022,\n22, 5937. https://doi.org/10.3390/\ns22165937\nAcademic Editor: Antonio Guerrieri\nReceived: 9 July 2022\nAccepted: 5 August 2022\nPublished: 9 August 2022\nPublisher\u2019s Note: MDPI stays neutral\nwith regard to jurisdictional claims in\npublished maps and institutional affil-\niations.\nCopyright: \u00a9 2022 by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an open access article\ndistributed under the terms and\nconditions of the Creative Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n4.0/).\nKeywords: JTOS; CLIP; SDN; task scheduling; framework; dynamic environment"
        },
        {
            "heading": "1. Introduction",
            "text": "These days, the usage of industrial automation applications in the Internet of Things (IoT) enabled paradigm has been growing progressively in practice. Industrial automation applications are smart homes, smart agriculture, smart healthcare, and smart transport with different data analytics sensors that offload their data to the cloud server for execution. Recently, Internet of Things (IoT) applications, such as healthcare, autonomous vehicles, and smart homes, are increasing progressively. IoT brings the efficient resource environment for the industrial automation applications with the collaboration of fog and cloud networks. With millions of sensors and intelligent devices, various applications can be developed that generate vast amounts of data and have stringent latency requirements.\nSensors 2022, 22, 5937. https://doi.org/10.3390/s22165937 https://www.mdpi.com/journal/sensors\nThese applications include smart grids, innovative healthcare, intelligent vehicles, intelligent buildings, and many more. Typically, in cloud computing, data are sent to remote data centers for computing and storage. However, with the advent of IoT platforms, novel applications and use cases have emerged with bandwidth and latency requirements that cannot be met by traditional cloud computing. Hence, a new computing paradigm was created to cater to applications with low latency requirements. Fog computing extends cloud computing by bringing the storage and computing facility to the edge of the network, reducing bandwidth requirement and latency. Fog computing, also called edge computing, does not replace cloud computing. Fog nodes are used for short-term analytics with limited data. Resource-intensive computing and long-term analytics take place at cloud data centers. The Open Fog Consortium (OFC) is an open-source multi-vendors hybrid architecture that allows the IoT applications that leverage fog and cloud architectures mutually [1]. Core mobile cloud computing (MCC) offers unlimited shareable services to the users [2]. However, it is often incurred with long end-to-end latency due to the multiple hops away from users. Fog computing is a subset of cloud computing that enables cloud services at the edge of users\u2019 networks with ultra-low latency [3]. Typically, IoT sensors and devices are resource constrained and generate huge amounts of data that are processed by applications [4]. IoT-based applications comprise various tasks that can be computed or data-intensive. Due to the high demand for computing and other resources, compute-intensive tasks are offloaded. Task offloading is a method which transfers all compute-intensive parts of an application either to the fog or public cloud for processing [5]. The major challenge in task offloading is to decide whether the task is to be sent to the fog or cloud for processing [6]. Though the decision is based on several factors, bandwidth, data, and latency remain the most critical. Further, the heterogeneous nature of IoT applications\u2019 data, along with the high quality of service (QoS) requirements in terms of latency and efficiency, makes the decision of task offloading more complex [7]. In order to meet latency requirements, the tasks are offloaded jointly in heterogeneous computing nodes to solve scheduling. Task offloading problems for IoT applications have been widely addressed separately by many researchers. For instance, these studies [8\u201314] investigated the delay optimal offloading problem in the mobile edge cloud (MEC). The aim is to reduce device energy consumption and accelerate application performance on resource-constrained devices. Furthermore, the authors [15\u201318] addressed the issue of task scheduling in the MEC. The goal is to schedule edge cloud resources to improve application performance and decrease the energy consumption of cloud nodes. The joint optimization problem has been investigated by these studies [6,7] to address task offloading and resource allocation problems mutually for IoT applications. However, the work mentioned earlier did not focus on task offloading and task scheduling problems jointly to meet the requirements of latency-sensitive tasks in the fog cloud networks. Therefore, there is a need for a framework that can optimize IoT application performance by considering both task offloading and scheduling problems in fog cloud networks. This article formulates delay-efficient joint offloading and scheduling as combinatorial integer linear programming (CLIP) problems in heterogeneous fog cloud networks for industrial automation applications. All the problem constraints are linear integers and objective functions to be minimized for each task. The industrial automation applications based on IoT are smart homes, augmented reality (A.G), E-Business (E-Factories), and E-Healthcare; they offload their workloads to the fog cloud for the processing in the system. Furthermore, heterogeneous fog cloud networks are the combination of different capacity fog computing and core cloud computing. This research aims to minimize the total delays (i.e., network delay and cloud delay) of a task during offloading and scheduling. Each IoT application consists of independent tasks. Each task includes workload attributes and deadline constraints. The fog clouds are dispersed and connected with users via the base station (BS). All BSs are linked via switches and managed by a software-defined network (SDN) control [8].\nThe considerations in our article are quite different from the existing ones in several aspects:\n\u2022 Generally, former studies [7\u201314] made offloading decisions based on single criteria, such as either mobile battery power threshold or application total time limitation. Whereas, in a dynamic environment, a single threshold value-based offloading decision is not accurate; thus, we consider the multi-criteria task offloading-based decisions more accurate, and they incur lower overhead during the task offloading decision. \u2022 Existing task scheduling problems generally involve soft deadlines in the homogeneous edge only or core cloud-only resources [15\u201323]. Nonetheless, the frameworks proposed in those research works consider mutually heterogeneous fog cloud resources for IoT applications. Furthermore, each task has a hard deadline and must meet the stringent latency requirements during offloading and scheduling. \u2022 The high-level placement policy of the proposed fog-cloud architecture for real-time and delay-sensitive applications is different from earlier works\u2019 architectures regarding offloading decisions and task prioritizing for scheduling.\nThe state of the art formulated the network delay and computational delay for IoT tasks. The key objective is to minimize the delay of tasks in the system. There are many types of delays in the fog cloud network. For instance, network delay, communication delay, wait for delay, and processing delay. However, these studies only considered static offloading and static scheduling in their solutions without considering the mobility factors and dynamic aspects of functions in the system. Therefore, real-time, multi-parameter aware offloading and scheduling in dynamic environments are widely ignored in the state-of-the-art studies. This study focuses on two types for each task, such as network delay and computational delay. The network will optimize by the offloading technique, and computational delay will optimize by dynamic scheduling in the study.\nThe Major contributions of this article are summarized below:\n1 The problem considered the hybrid delay, a combination of network delay and computation delay under a dynamic environment where transient failure in resources always occurs. This study suggests an architecture that shows how to solve the joint offloading and scheduling problem in different steps. The study considered the following steps: offloading, sequencing, scheduling, and transient failure awareness for IoT applications. The architecture aims to construct an environment to facilitate applications to run with distributed resources in the network. The architecture components or steps are discussed in the proposed solution in detail. 2 The fuzzy multi-criteria task offloading method is proposed, which makes an optimal offloading decision that adopts changes during the offloading decision process, ensuring that the network context changes do not degrade the task offloading performance. 3 The work devises latency efficient task sequence in which their competent order arranges all tasks, thereby meeting all application requirements. 4 The task scheduling method with topological sorting, searching, and transient failure methods proposed by the study to deal with the robustness of the applications during scheduling in the network.\nThis study formulated the CLIP problem for IoT, which is different from existing studies in the following way. This work formulated the joint optimization as the CLIP problem, which is a well-known NP-Hard problem. To solve the joint optimization problem, the JTOS framework is proposed. For offloading and scheduling, the prediction of delay and QoS of applications are satisfied during the process. We consider the round-trip delay between users and BS and BS to computing nodes in the network delay. Existing studies only considered either user to node delay or user to BS delay. This study introduced a novel transient failure method, which can handle any transient failure tasks during the process. The previous works focused on the failure of tasks based on checkpointing and or primary backup method. These methods cannot handle transient failure and consume much more resources of the nodes during the recovery of tasks from the failure state.\nThe rest of the article is organized as follows. Section 2 elaborates related work, followed by Section 3, which describes the proposed description and formalizes the problem under study. A heuristic is proposed for the considered problem in Section 4 that describes the proposed algorithm: JTOS. Section 5 discusses the experiments and results, whereas Section 6 concludes the article."
        },
        {
            "heading": "2. Related Work",
            "text": "Recently, the usage of IoT with different computing nodes (e.g., fog/edge computing) is increasing day by day [24]. Many partitioning, offloading, and scheduling frameworks, architectures, and methods have been suggested to improve the energy, cost, and delay of applications and solve the CLIP problem. In the literature, many efforts have been made to solve the different IoT application problems. We analyze the actions of existing studies in the table to solve the CLIP problem (Table 1).\nDebashis et al. [1] suggested a multi-leveling offloading method to solve the partitioning and offloading problem in distributed mobile cloud architecture. The goal was to minimize the power and latency of the application during the process in the architecture. The study considered the single parameter offloading (e.g., battery energy/delay), static offloading, network profiling technology, and fixed resources (e.g., mobile and cloud resources) and solved as integer linear programming. However, due to the long distance between mobile users and the cloud, the offloading faced end-to-end latency issues during the process. Shahryari et al. [2] investigated energy-delay-aware offloading for latencysensitive applications. The study formulated this problem as linear programming with non-linear constraints. The single parameter offloading (e.g., battery energy/delay), static offloading, program technology, and fixed resources (e.g., mobile and fog resources) have been considered. However, due to the high ratio of user requests, the resource-constraint fog node faced an overloading situation during the offloading process. Aruba et al. [3] formulated a scheduling convex optimization problem for the IoT in a fog cloud network to minimize the lateness of the applications. The study considered two types of workload, including latency-sensitive and delay-tolerant with multi-parameters (e.g., workload size and offloading time) in the static resource environment. The study presented the window algorithm for application profiling which may decide whether the workload of the\napplication offloads or not in the distributed fog cloud network. Lin and Fan et al. [4,5] suggested a SDN-based fog cloud network for IoT applications. The offloading and resource allocation-aware schemes are widely suggested to minimize the end-to-end delay of applications. The combinatorial optimization (e.g., Concave) and linear programming (e.g., Quadratic) based objectives were optimized. The multi-parameters (e.g., local execution, network execution, and computing execution delay were taken into consideration) during offloading and resource allocation. The network changes are also considered an adaptive environment where offloading is performed based on new available values instead of old network contents. The authors in [6\u201310] investigated joint offloading and resource placement problems for IoT applications in distributed fog/cloudlet cloud networks. These studies considered the dynamic and adaptive environment where network contents and resource placement can change at runtime. The proposed scheduler and offloader engine adopt any runtime changes during the initial process. Based on the experience, a new offloading decision will be more optimal than the existing one. The offloading decision is dynamic concerning resource placement and offloading, where remote procedure call methods are formulated as the integer constraints and the quadratic problem. The objective function was a convex function, i.e., minimize delay, and all variables are convex linear integers in the considered problem. The authors in [8,11\u201314] investigated resource provisioning and cost-aware offloading and scheduling problems for IoT applications in the distributed mobile fog cloud network. The SDN controller was implemented to facilitate mobility features of applications during roaming among networks. The dynamic environment and hybrid static and dynamic offloading decisions were taken into consideration. The resource cost, budget, rent and application delay, and energy objectives were optimized as joint linear integer programming optimization problems. All coarse-grained workloads are scheduled under their maximum threshold level to avoid any violence of users. The authors in [15\u201319] suggested that frameworks and architectures solve deadline-aware offloading and scheduling problems for IoT applications. They formulated problems as integer linear programming where all objective functions and constraints are linear and integer variables. The budget, energy, renting cost, scheduling cost, and offloading delay objectives are optimized via different optimization methods. The orchestrator controller (e.g., SDN and system components) are implemented to offer mobility-aware services to the IoT vehicle applications during their roaming features. The dynamic offloading decision (e.g., static and dynamic) and dynamic workload assignment in fog cloud network were considered during the problem formulation. Table 1 shows the efforts of existing studies in the area. Furthermore, the authors in [1,3,5,8,11] proposed optimization algorithms based on a genetic algorithm (GA) with many components (e.g., resource searching, resource allocation and offloading) for IoT applications. The suggested that mixture architectures are based on fog-cloud nodes with virtual machine implementation to serve users\u2019 requests. The proposed methods contained average time complexity during the process of applications in the network. The linear and global searches are parts of GA during the execution of applications. The works [2,4,6,10,12] devised optimization techniques based on particle swarm optimization (PSO) meta-heuristics with many components (e.g., resource searching, composition, allocation, and migration). The fog-cloud was implemented with virtual machines to process the workload of applications with their constraints. To obtain the complexity of the algorithms, the lightweight and linear search-based iterative model was devised by studies. The studies [13\u201319] devised different optimization heuristics based on Bundle branch-bound, Subgradient linear search, Interior-Points, and Cutting-plane Hungarian with different types of searching methods. These methods search for the best resource among edge/fog cloud nodes before allocating tasks to them. The time complexity is lower because these studies implemented linear search, where all optimal solutions select randomly based on integer parameters.\nRecently, the complexities of IoT applications are increasing day by day. For instance, healthcare applications contain real-time tasks, which require continuous attention from network and computation nodes. Due to the uncertainty of the network due to mobility and traffic, the ratio of failure tasks, delay, and deadline can occur widely. The uncertainty and fluctuation in computing nodes can lead to the violence of the quality of service of applications in the system. Therefore, all existing conventional heuristics cannot adapt to any dynamic changes and do not support the complex requirements of applications. Recently, dynamic environment aware deep reinforcement learning (DRL) aware heuristics were proposed [20\u201323,25\u201327] to solve the complex IoT problems. The DRL approaches can work better in a dynamic environment via different states where all states are independent. These approaches are achieving long-term goals in terms of offloading and resource allocations. However, many issues remain in both conventional methods and machine learning approaches when solving the joint offloading and scheduling problem for IoT applications."
        },
        {
            "heading": "3. Proposed Solution",
            "text": "This section aims to discuss the importance and all steps of the proposed architecture. As mentioned above, this study considers the joint offloading and scheduling optimization problem as a CLIP for IoT applications in the distributed network. The proposed architecture consists of three main layers: IoT application layer, agent layer, and resource layer, as shown in Figure 1. All layers are managed and controlled by the agent layer. The application layer consists of different applications, where each application is composed of various independent tasks. However, resource-constrained local devices (e.g., limited battery, computational capability, and storage) cannot run all tasks locally on devices. Therefore, a Fuzzy multi-criteria method (FMCM) is implemented at the application layer, which boosts the performance of all applications via an offloading process based on QoS requirements (e.g., deadline and hybrid delay). Initially, FMCM generates an offloading result based on QoS requirements and sends it to the agent layer. Then, the agent layer allows devices to offload their tasks to the system for efficient execution. The agent layer accepts offloaded tasks based on their offloading result for further execution. Initially, all tasks are sorted into topological order based on their deadlines and total delay. The main reason behind sorting is that all tasks have different sizes, deadlines, and resource requirements. Therefore, delay-sensitive tasks with the lowest deadline must have high priority compared to delay-tolerant tasks with long deadlines. Furthermore, based on sorting order, all tasks are scheduled onto different computing nodes based on their offloading results. In the dynamic environment, in different timezones, the ratio of user traffic is different; therefore, due to the ingests percentages of users in peak hours (8 am to 4 pm), the transient failure of resources often occurs in the system. The transient failure aware (e.g., detection, retry, and familiar failure schemes) handles all transient failure tasks and runs all applications robustly without losing their generosity. The orchestrator, multilayers SDN scheduler controller is the primary controller in the agent layer, responsible for managing load balancing and connectivity of all computing nodes and all layers, and it helps to monitor resource status in the network. The resource layer combination of fog nodes and cloud nodes is connected with the SDN controller and BSs. Here, the SDN controller allows devices to make the offloading request to the associated BSs and ensures that BSs are directly connected with computing nodes for further processing. For instance, BS 1 was directly connected with the fog node k1 to process task v1 and v6. Whereas BS 2 connected with fog k2 and processed the tasks v3 and v2. The delay-tolerant tasks are scheduled on fog nodes; however, all delay-tolerant tasks must be scheduled on cloud computing for efficient processing. For instance, v5 and v4 and the rest of the tasks are offloaded to the remote cloud by the SDN controller for execution via the Internet."
        },
        {
            "heading": "3.1. System Model Scenario",
            "text": "As we mentioned above, the study considered leaving dynamic requests of users in the system. Therefore, resources, network channel capacity, and QoS (quality of service) and quality of experience (QoE) requirements of applications are dynamic. The scenario of IoT applications in the fog cloud network is defined as follows. Initially, all IoT applications (e.g., mobile devices, sensors, cameras, vehicles, etc.) are connected to the BSs. Each application is only connected with one BS at a time. In comparison, many base stations are connected with fog nodes which are dynamically distributed and managed by the SDN control plane. All the BSs are connected with fog nodes via different fiber optics switches. The SDN control plane is also associated with the remote cloud via wire Internet to process the delay-tolerant tasks of applications during execution. All BSs and fog nodes are resource constraints; therefore, SDN control is also responsible for load balancing among BSs and computing nodes."
        },
        {
            "heading": "3.2. Problem Formulation",
            "text": "The architecture leverages three different core technologies: IoT sensor-based technologies, wireless technologies (i.e., WiFi, Bluetooth, and cellular network), and computing frameworks (e.g., fog node and cloud node). The considered joint optimization task is offloading and the scheduling problem for IoT applications incurred two kinds of delays: network delay and computation delay. Thus, total delays for each task have network delay and computation delay during offloading and execution. The notation of the study is described in Table 2."
        },
        {
            "heading": "3.3. Dynamic Environment",
            "text": "The problem constraints, such as computing resources, network contexts, and task size, are highly dynamic in the study. This work considered the in and out user requests in the system as a dynamic environment without mobility features. Although the mobility feature is a part of the dynamic environment, this study did not consider the mobility of the application in the current version of the work."
        },
        {
            "heading": "3.4. Network Delay",
            "text": "The network delay for IoT applications is comprised of round-trip delays, such as the delay between a task vi and associated base station b and kth computing node. The notation vi \u2194 b shows round-trip delay between task vi and assigned BS b. Whereas the notation b \u2194 k shows round-trip delay between the base station b and computing node k. Each application is composed of different types of tasks, such as video, audio, image, text, and so on. However, it is not trivial to know in advance what amount of task data will be carried via a channel per second or at what rate the channel transfers task data to the cloud for execution. There are many factors that can interrupt communication links during task offloading and downloading, such as noise, inference, and intermittency in the wireless network [28]. Thus, our task offloading decision method adopts dynamic changes of network contexts during offloading. The binary variable y = {0, 1} shows either the offloaded task i being implied in base station b in the coverage area yib = 1 or not yib = 0. The communication delay for a task during offloading and downloading between BS and computing node can be estimated in the following way:\nTneti = yib(vi \u2194 b + b\u2194 k)\u00d7 C. (1)\nEquation (1) determines the maximum capacity C of the channel and measures the network delay of each task, which is the sum of delay between the user and BS and BS to any particular computing node during offloading and downloading. In simple terms, it is round-trip delay between a user to BS and BS to computing node.\nrc = (\nWi UB \u00b7 wc + W \u2032i DB \u00b7 wc\n) log2 ( 1 +\nS N\n) . (2)\nIn Equation (2), the variable rc determines the usage ratio of channel resources. Where UB.wc is the uploading bandwidth (i.e., not fixed) of the wireless channel, wc determines the hertz (H), and UB.wc is the downloading bandwidth. The variable S is the signal power of the network in watts, and N is the present noise and inference in the wireless during task offloading to the fog cloud network. Whereas the variable log2( Wi UB\u00b7wc ) + ( W \u2032i\nUB\u00b7wc ) is the amount of data offloaded and downloaded to and from BS and computing. The network delay of all tasks between all BSs and computing nodes is determined in the following way.\nTnet = A\n\u2211 G=1\nN\n\u2211 i=1 yGib(v G i \u2194 b + b\u2194 k), (3)\nb \u2208 B , k \u2208 M.\nEquation (3) calculates the network delay of all tasks during offloading and downloading.\nComputation Delay\nThe aim of the study is to offload and schedule all independent tasks of different IoT applications to the heterogeneous computing nodes k \u2208 M to reduce the maximum delay of all tasks. The tasks are represented by {v1, v2, v3, . . . , vN}. Each task vi has workload Wi{vi = 1, . . . , N} and deadline di, which is defined by the user when tasks are offloaded to the proper computing node. All computing nodes are heterogeneous and represented by {k1, k2, . . . , kM}. Each computing node has a different computing speed which is depicted as \u03b6k, where k = 1, 2, . . . M. We denote the computing resources of all computing nodes in this way, i.e., ek = {k = 1, . . . , kM}. The notation ek denotes particular resources of the node k. To reduce the computation delay of all submitted tasks, we assign each vi to the ideal computing node to meet the deadline constraint of all tasks with minimum delay. Meanwhile, a task vi is executed by a single cloud k. The decision variable is employed xik and either task vi is assigned to k or not. The execution time of the task vi on kth computing node can be estimated as given in Equation (4). The computation delay on a particular node of a task i is determined in the following way:\nTei = xij Wi \u03b6k . (4)\nEquation (4) measures the execution delay of a task on the particular computing node. Similarly, the execution delay of all tasks on all computing nodes is determined in the following way.\nTe = A\n\u2211 G=1\nN\n\u2211 i=1\nxGij WiG\n\u03b6k where k \u2208 M (5)\nEquation (5) calculates the computation delay of all tasks on heterogeneous computing nodes.\nThe considered problem is mathematically modeled as below:\nTtotal = Tnet + Te. (6)\nwhereas Ttotal is the total delay (e.g, communication delay and computation delay) of tasks of all applications in distributed computing nodes as determined in Equation (6). The objective function is to minimize communication delay and computation delay for each task.\nmin Ttotal . (7)\nThe considered problem is a convex linear integer optimization problem, where Equation (7) is a convex main function and computation delay and network delay are the convex constraints in the problem.\nrs = Wi \u2264 M\n\u2211 k=1 ek, \u2200{i = 1, . . . , GN}\u2200A. (8)\nThe requested workloads of tasks must not be exceeded by the limit of resource capacity that is ensured in Equation (8). Whereas rs is an integer variable that shows the 0 and 1 status, if it is greater than zero, it means nodes have sufficient resources to process the workload. Otherwise, it shows 0.\nFi = Bi + Tei , \u2200{i = 1, . . . , GN}\u2200A. (9)\nThe finish time ensures that all tasks are executed under their deadlines with a minimum lateness determined in Equation (9), whereas Bi is the beginning time of a task.\nBi = 1\u2212 Tei , \u2200{i = 1, . . . , GN \u2208 A}. (10)\nThe beginning time of a task on the same machine is equal to the execution of the current task during scheduling, as determined in Equation (10).\nrc \u2264 C, \u2200{b = 1, . . . , B}. (11)\nEach network channel has limited capacity to offload workloads from users to computing nodes; therefore, Equation (11) ensures that the capacity of channel is sufficient for offloading all workloads to the system.\nA\n\u2211 G=1\nN\n\u2211 i=1 xik = 1, \u2200{k = 1, . . . M}. (12)\nEach task can only assign to one computing node, as defined in Equation (12).\nM\n\u2211 k=1 xik = 1, \u2200{i = 1, . . . , GN}\u2200A. (13)\nEach computing node can only execute one task at a time, as defined in Equation (13).\nB\n\u2211 b=1 yib = 1, b \u2208 B. (14)\nEach task can access one base station at a time. It depends upon the availability of the network; therefore, the binary variable yib shows 1 if a task accesses the particular base station, otherwise it is zero, as shown in the Equation (14).\nxij \u2208 {0, 1}, yib \u2208 {0, 1}. (15)\nEquation (15) shows that task i is either assigned to the computing node k or not. The combinatorial Integer Linear Programming (CLIP) offers an optimization solution\nto the linear problem. The offloading and scheduling are linear and have a trade-off between\nnetwork delay and computational delay in the considered problem. CLIP has an objective function with different constraints. Therefore, communication delay and computation delay for each task are determined based on their primitives. For instance, data size required resources to execute data and make the deadline. Mainly, the performance of the objective function depends upon available resources, including network resources and computation resources. The formulation of CLIP is performed based on Equations (1)\u2013(14)."
        },
        {
            "heading": "4. Proposed Algorithmic Jtos Framework",
            "text": "The study considered offloading and scheduling problems as a joint optimization and formulated a combinatorial integer linear programming (CILP). The objective function is an integer value, where all constraints are integer numbers and are denoted as a convex set. For a feasible solution, it is necessary to satisfy all conditions of the problem during the entire process in the system. The CILP is an NP-hard problem when it processes heterogeneous machines in the distributed fog cloud network. In joint optimization, offloading decides whether to offload or not based on certain values to obtain the minimum network delay and computation delay of applications. Moreover, scheduling will handle resource allocation mechanisms of tasks under deadline and failure constraints. Keep the balance between the total delay of Ttotal and deadline and constraints, and the joint optimization will achieve the overall objective of the study. Furthermore, the CILP problem will be divided into more sub-problems, such as offloading, sequencing, and scheduling. To solve the CILP problem, the study proposes the JTOS algorithmic framework, which consists of different components for processing user requests. JTOS framework initially takes the input of all tasks of applications. The study suggests that an Algorithm 1 is the main algorithmic framework that consists of different methods in the sequences. For instance, the FMCM method is the framework method that makes the offloading decision based on the following parameters (e.g., network delay, computation delay, required computing instructions (ms) data size, and total delay). The Fuzzy indexes and weight ratios consist of different attributes, including execution time, communication time, resource availability, and deadline. The pairwise comparisons of giving elements are produced based on the normalized comparison scale on nine levels as illustrated in Table 3. Task offloading results are a result of tasks, as shown in Table 4. Each task has different requirements, such as a small workload, a small deadline, and being delay-sensitive and delay-tolerant. Therefore, all listed tasks are furthermore sorted into the proposed topological ordering of their needs. Based on topological ordering, machine learning-based search finds the optimal computing node for each task. Based on topological sorting, all tasks are scheduled onto search nodes based on their objective function. However, initial scheduling incurs the failure of tasks it will handle in two ways. Firstly, the transient failure tasks will recover under their deadlines and comprehensively failed tasks will re-offload from scratch to the system. The work discusses all components in the corresponding subsections.\nG1 Fog Nodes Cloud Node\nk1 k2 k3 k4\nv1 30 20 10 50\nv2 27 28 47 70\nv3 51 26 29 80\nv4 50 47 71 29\nv5 24 57 56 77\nv6 35 26 16 34.5\nG2 Fog Nodes Cloud Node\nk1 k2 k3 k4\nv1 41 31 51 66\nv2 47 30 31 86\nv3 36 29 27 21\nv4 41 37 71 33\nv5 33 30 18 54\nv6 19 26 49 59"
        },
        {
            "heading": "4.1. Fuzzy Multi-Criteria Method (Fmcm)",
            "text": "The offloading is the sub-problem of the CILP type problem, which makes the decision when and where to offload tasks in such a way that total Ttotal is minimized for all applications. The offloading problem only ensures that it delays optimal offloading from users to computing nodes without considering deadlines and failure situations of tasks. In this study, offloading is a multi-criteria decision problem, where decision parameters have some weights to make the offloading for tasks. The fuzzy logic algorithm accommodates solving an enigma input. This study presented the FMCM offloading method for the applications, where the FMCM method evaluates the rank of each criterion according to criterion, i.e., \u03c9 based on Equation (15). The goal is to sort and determine all ranks based on their given requirements. Furthermore, the FMCM method normalized aggregated fuzzy importance weight for each criterion based on Equation (16). After that, the technique normalized the matrix for all applications G \u2208 A for each measure based on Equation (17). Similarly, the FMCM method normalized stored weights based on Equation (18). FMCM constructs the weighted normalized fuzzy decision matrix of application and makes decisions in the fifth and sixth. The seventh FMCM determines the fuzzy positive and negative ideal solution based on Equations (19) and (20). In the final step, FMCM determines the fuzzy closeness computing node for each task and ranks the alternatives according to their closeness based on Equation (21). To solve the multi-criteria offloading decision, we propose the FMCM. The FMCM determines a decision based on the given weights to the criteria of the task during offloading matrix, i.e., G{v1, v2 . . . , vN}, where each attribute includes relative weight for their importance, i.e., \u03c9 = {0.1, 0.4, 0.3, 0.5}. We formulate the task offloading problem as a multi-criteria decision-making (MCDP) problem [27]. The existing decision methods [26] are not suitable for our task offloading where elements are dynamically changed. However, all decision methods are efficient and effective when the environment is stable with the perfective of all elements. We propose a lightweight and multi-criteria task offloading decision method, which tackles all elements dynamically based on their current values. Furthermore, we apply similar elements pairwise comparison to the analytic hierarchy\nprocess (AHP) method [29] to obtain pairwise values. We show the pairwise value in the matrix G.\nA\n\u2211 G=1 G =  v11 \u00b7 f w11, v12 \u00b7 f w12, v13 \u00b7 f w13, v14 \u00b7 f w14 v21 \u00b7 f w21, v22 \u00b7 f w22, v23 \u00b7 f w23, v24 \u00b7 f w24 v31 \u00b7 f w31, v32 \u00b7 f w32, v33 \u00b7 f w33, v34 \u00b7 f w34 v41 \u00b7 f w41, v42 \u00b7 f w42, v43 \u00b7 f w43, v44 \u00b7 f w44 , (16) \u03c9 \u00b7 vi\u00d7k =1 \u00b7 vk\u2208K\u00d7vi\u2208N =\n1 vi\u00d7k . (17)\nEquation (16) describes three alternative computing nodes, i.e., n = (k1, k2, k3) and four attributes \u03c9 = { f w1, f w2 . . . , \u03c9}. It determines the K\u00d7 N(3\u00d7 4) resource matching calculation during the offloading decision. The attributes are execution time, communication time, resource availability, and deadline. The pairwise comparisons of giving elements are produced based on the normalized comparison scale on nine levels employed in matrix G to compute the weight of the attributes by obtaining an eigenvector \u03c9, which is also associated to the prime eigenvalue \u03bbmax. As usual, the outcome of the pairwise comparison reliability index (RI) is determined in the following way:\nRI = \u03bbmax \u2212 n (n\u2212 1) , (18)\nRR = RI\n(n\u2212 1)\u00d7 Random\u2212 Index . (19)\nEquation (18) shows the reliability indexes of elements, where RR is the reliability index ration of RI, whereas successive relative weights are produced by RI, the possibility of multi-criteria derive via NM(xi\u00d7k)dc . Where x is a integer value, which is equal to 1 when it has ideal fuzzy weight. Because k is a fascinating alternative (k1, . . . , K) with N number of tasks, it further normalizes in the following way:\nNM(xi\u00d7k)dc = M(xi\u00d7k)dc\n\u22114n=1 M 2 i\u00d7k\n, (20)\nEquation (20) determines the selection of the best resources among all existing resources, as x is any real number of R which explores the choices that may be criteria and alternative. Where dc is the dcth decision maker whose task has the highest rank on the computing node. Due to the dynamic environment, tasks and resource offloading have many FMCM choices, i.e., {dc1, . . . , DC}.\nMw = \u03c9v \u00d7 N, (21)\nEquation (21) stored the related weight of each element (which is fixed in advance), where \u03c9v is a weight which is already initialized above. The affirmative best solution and the aversive solutions for each decision maker can be determined dc from the weight matrix.\nAdc+ = (22)\n\u3008min Ttotal \u00d7 i\u00d7 k | i = 1, 2, 3, 4, k = 1, 2, 3 | N \u2208 J+\u3009, \u3008min Ttotal \u00d7 i\u00d7 k | v = 1, 2, 3, 4, k = 1, 2, 3 | N \u2208 J\u2212\u3009, Adc\u2212 = (23) \u3008min Ttotal \u00d7 i\u00d7 k | v = 1, 2, 3, 4, k = 1, 2, 3 | N \u2208 J\u2212\u3009, \u3008min Ttotal \u00d7 i\u00d7 k | v = 1, 2, 3, 4, k = 1, 2, 3 | N \u2208 J+\u3009\nwhere J+ is a positive solution of the decision maker for application objective, where J\u2212 is aversive (negative) solution to the objective. It is natural to consider the real time information related to the available wireless network via the network profiler; the FMCM uses the Euclidean distance matrix among all possible alternatives and it can be calculated in this way:\nD+v = \u221a\u221a\u221a\u221a 4\u2211 v=1 ((Ttotal \u00d7 i\u00d7 k)+)2, (24)\nD\u2212v = \u221a\u221a\u221a\u221a 4\u2211 v=1 ((Ttotal \u00d7 i\u00d7 k)\u2212)2, (25)\nEquation (24) determines the best choice: which solution is best for each task before offloading. Because D+v and D\u2212v show the best and worst solution for each alternative, the task offloading algorithm chooses the highest rank solution Hv solution from all alternatives, as follows:\nHv = D\u2212v\nD+v + D\u2212v . (26)\nEquation (26) finds the highest rank of each node for every task during the offloading decision. Algorithm 2 processes the offloading mechanism for all applications onto different heterogeneous computing nodes. In step 2\u20134, Algorithm 2 constructs the fuzzy weight tasks and resource matrix of each application based on Equation (15). The reliability index is measured based on Equation (16). In step 6\u20138, the algorithm normalized the tasks index based on Equation (17). In step 9\u201314, Algorithm 2 constructs the decision matrix based on Equation (18) and generates the position solution and negative solution based on Equation (19). The algorithm determines each task\u2019s best choice and worst choice for computing based on Equation (20). In the end, the optimal and ideal rank of each task onto optimal computing are constructed based on Equation (21). The output of Algorithm 2, i.e., results[i \u2208 N, k \u2208 K] is shown in Table 4. The offloading results of four applications, such as E-Healthcare, E-Transport, Self-Autonomous (e.g., Augmented Reality), and smart home are analyzed by FMCM with different steps. Table 4 shows that, in the result list, i.e., results[i \u2208 N, k \u2208 K], each task has different Ttotal on different computing nodes. Therefore, these results will be passed to the system for further execution under deadlines and failure constraints."
        },
        {
            "heading": "4.2. Topological Ordering of Tasks",
            "text": "Table 5 shows the topological ordering of the tasks into the system. A topological sort is a method of sorting jobs in which each vertex appears before any of the vertices reliant on it. We use a topological sort to represent the task graph using an adjacency list. The task restructuring adjacency list was ordered in this study. A period task graph topological sort algorithm is based on a topological sort algorithm. However, we compare methods by the period at a specific time. Furthermore, this approach assigns a period to all tasks using a harmonic relation. Therefore, it is based on the assumption of usage. The offloading method generated the offloading result, i.e., results[i \u2208 N, k \u2208 K] of tasks of all applications. Each task has different requirements, such as workload, deadline, required bandwidth, and Ttotal . Therefore, all tasks are sorting into some topological order, such as lateness order and deadline order. The study proposes a novel three ordering rules-based methods. In sequence-1, all tasks are sorted by descending order of their Ttotal on computing nodes. In the second sequence-2, all tasks are sorted on the specific node by their deadlines. The first topological ordering of tasks based on the proposed is shown in Table 5.\nFog Nodes Cloud Node\nApplication k1 k2 k3 k4\nG1 v2, v5 v3 v1, v6 v4 G2 v6 v2, v1 v5 v3, v4 G3 v6 v3 v2 v4, v5 G4 v1, v4 v5 v1 v3, v6\nThe topological ordering of deadline sequence is shown in Table 6."
        },
        {
            "heading": "4.3. Dynamic Task Scheduling",
            "text": "The study devises the scheduler method Algorithm 3 for the workload sorting and execution in the system. The dynamic scheduling is the mapping process in this study which schedules all tasks onto different computing based on their given ranks or orders. The task scheduling scheme is an iterative model where the objective of each task will improve during the runtime of execution. The scheduler only handles computing node failure tasks instead of offloading failure. The study only considered the node failure tasks, which are transitory failed during their process. This study devises a task scheduling Algorithm 3 which takes a sorted list of tasks and resources as an input. We only determined the communication offloading and downloading time of tasks in the system. As we assumed, we have fixed bandwidth for the offloading and downloading task data between users and servers in the article. The study exploited the scheduler in which tasks are received in random format and stored in the queue before being scheduled in the system. All steps of Algorithm 3 defined as below. \u2022 The workload of all tasks must be less than the capacity of the computing nodes before scheduling in the network as defined between 2 and 5 steps. \u2022 All tasks are sorted based on sequence-1 and sequence-2. \u2022 If the task deadline is satisfied at any node without wasting any resource, the objective of each task is calculated based on Equation (7). \u2022 There are three statuses of each task with different activities, such as start, i.e., status-1,\nand status = 2 shows progress, and status shows the finished process at a particular node as defined in 9 to 20 steps.\n\u2022 If any task is incurred with transient failure, it will be added to the failure list. \u2022 The failure list will recover tasks based on the failure aware method with their detection, retry, and failure aware strategies. \u2022 However, due to the dynamic environment, the initial solution is not optimal. There-\nfore, the searching method searches for the optimal solution based on the current values of the network.\n\u2022 The searching method will improve the initial solution of tasks from the neighborhood structure. \u2022 The neighborhood structure consists of different objective functions of each task in the dynamic environment, where the scheduler will choose the best one via the linear searching method. \u2022 The scheduler will control both the failure and dynamic environment for all tasks in the system.\nAlgorithm 3: Task Scheduling Scheme\nInput : results[i \u2208 N, k \u2208 K]; , ek\n1 begin 2 foreach (vi=1 to N \u2208 A) do 3 Initially all tasks are sorted according to Sequence-1; 4 if (Wi \u2190 k \u2264 ek) then 5 Sort all tasks based on deadline order according to Sequence-2; 6 if (i\u2190 Fi \u2264 di) then 7 i\u2190 k\u2190 Ttotal ; 8 Calculate the initial scheduling based on equation (7);\n9 if (statusi = 1) then 10 Return Status=Started;\n11 else 12 Failure[i, k, in f o]\u2190 i\u2190 k; 13 Return Status=2;\n14 foreach (i=1 to Failure[i, k, in f o]) do 15 if (Failure[i, k, in f o] 6= empty) then 16 Call Transient Failure Method; 17 Call Searching Method; 18 Optimize: Ttotal \u2190 T\u2217total ; 19 Calculate the new scheduling based on in f o; 20 i\u2190 k\u2190 T\u2217total ; 21 Status=3;\n22 End of Failure Tasks;\n23 End of Inner Iteration;\n24 End of Main Loop;"
        },
        {
            "heading": "4.4. Solution Searching Method",
            "text": "The study considered the dynamic environment, where users can enter and leave the network at runtime. At different timezones, the objective function of each task could be changed. In the night timezone, the user\u2019s traffic is low, and all requests are entertained in a better way. However, during peak time, the traffic is high and the objective function will suffer from time to time. Due to this dynamic environment, the study constructs the different solutions for each task via neighborhood structure. The study proposes a novel searching engine, i.e., Algorithm 4, which determines the best solution for each task based on offloading results in the system.\nThe study defines all steps of Algorithm 4 as follows.\n\u2022 Initially, the study constructs the neighborhood structure of available solutions. \u2022 The initial objective of each task is Ttotal . \u2022 The initial objective of each task Ttotal will be compared with another solution when a\nnew solution is better than the existing ones, and it will return a new optimal solution, i.e., T\u2217total .\n\u2022 All the failure tasks or scheduled tasks always obtained an optimal solution, i.e., T\u2217total in the dynamic environment. \u2022 The length of the search method is limited, and each solution is compared with a new solution in the non-linear way; when a new one is the better existing solution, the searching mechanism will stop searching. This way, the number of search steps will be reduced and remain optimal.\nAlgorithm 4: Searching Optimal Solution Input : Neighborhood Structure: NS = G \u2190 results[i \u2208 N, k \u2208 K] \u2208 A\n1 begin 2 Ttotal \u2190=1 Initial Solution; 3 while (Ttotal \u2264 NS) do 4 foreach (G \u2190 results[i \u2208 N, k \u2208 K] \u2208 A) do 5 Ttotal = (Ttotal , NS); 6 T\u2217total=Local Search (Ttotal); 7 if ( f (T\u2217total) \u2264 f (Ttotal) then 8 Ttotal = 1;\n9 else 10 Ttotal+ = 1;\n11 Stop when criteria are met;\n12 return T\u2217total ; 13 End"
        },
        {
            "heading": "4.5. Transient Failure Aware Method",
            "text": "To understand the failure-aware mechanism, the study discusses a case study of the real-world practice of IoT applications. There are two types of failure in distributed computing that are often considered: communication node failure and computing node failure. However, this study considers the transient failure of computing nodes in a dynamic environment. Figure 2 illustrates the execution process of application G1 with its tasks on different computing devices. The information is the history of a task from beginning to end. Each task has three statuses: s1 shows that a task has started its execution on a particular node. s2 illustrates that a task is still in the process of execution on any node, whereas s3 ensures the execution of a task is finished successfully. The tasks v2 and v5 of application G1 are scheduled on k1. Let us assume that a task v5 failed at the computing node k1. The detection strategy saves information on the failure of a task from the point of failure and sends it to the retry strategy. At the same time, the retry strategy tries to recover s2 status with two possible iterations left, i.e., three before the deadline, as shown in Figure 2. The task v1 recovered with three retried operations on computing node k1 and final failure aware (FA) policy return success status to the system. In another case, a task v5 on computing node k1 failed, and the retry strategy tried possible iterations. However, a task failure exceeds its deadline limit, and then the FA will mark it as a failure. The v5 will reschedule from the scheduler from the start for execution. Algorithm 5 handles the transient failure aware process of all applications robustly without violating their performances during execution.\nThe transient failure steps of Algorithm 5 are explained as below.\n\u2022 Initially, the failure list of all tasks saved those tasks which have failure status during scheduling. \u2022 The retry variable ret = 0 and max-iteration (max-ite) has a limited three attempts to recover the transient failure aware process of tasks. \u2022 The detection will return the information of tasks when they are failed on different computing nodes. \u2022 The retry strategy will retry tasks from their point of failure with three iterations. The retry duration is only 30 s, and the gap between the first iteration and the second iteration is about 15 s. \u2022 In the end, if the tasks are retried under their deadlines, then FA returns finished status. Otherwise, it will inform the scheduler of the tasks to be scheduled again from scratch."
        },
        {
            "heading": "4.6. Time Complexity of Jtos",
            "text": "A study mentioned above shows that the JTOS framework consists of different components, such as offloading, sequencing, searching, and scheduling. Therefore, the time complexity of JTOS is determined by various elements. The time complexity of offloading is divided into three phases: parameters, normalization, and weighting, and it is equal to O(n\u00d7 n). In comparison, the time complexity of the positive ideal solution and negative ideal solution becomes n. The ranking of each task becomes n. Therefore, the total complexity of the offloading algorithm is equal to O(n\u00d7 n). The task sequence is divided into two ordered, such as Ttotal and deadline, and the time complexity becomes Olog(n\u00d7 n). The Ttotal ordering becomes n and it is the same for the deadline, which becomes n. Therefore, the total time complexity is equal to Olog(n\u00d7 n). The searching for an optimal solution for each task to the resource is equal to n\u00d7m. n is several tasks, and m matches each resource\u2019s iteration during searching. Furthermore, all tasks are scheduled in n order to the optimal solution. The total time complexity of searching and scheduling becomes (n\u00d7m + n). The final time complexity transient failure algorithm is divided into three parts: detection, retry, and failure aware event. The detection strategy finds the failure of tasks when they have failed status in n time, and the same for the retry method, i.e., n. The failure awareness is the decision scheme for all tasks, and then it is equal to n. Therefore, the total time complexity of transient failure is equal to n + n + n.\nAlgorithm 5: Transient Failure Aware Schemes Input : Failure[i, k, s, in f o]\u2200A\n1 begin 2 ret=0; 3 Max\u2212 ite = 3; 4 while (ret \u2264 Max\u2212 ite) do 5 Call Detection policy; Failure[i, k, s, in f o]\u2200A; 6 if (si==1) then 7 Apply Retry Policy; 8 Failure[i, k, s, in f o];\n9 if (si == 2) then 10 i\u2190 k\u2190 Failure[i, k, s, in f o]; 11 ret++;\n12 if (si == 3 & vi \u2190 Ttotal \u2264 di) then 13 Failure Aware Scheme Apply; 14 Return Status=success;\n15 else 16 Return Status=Fail;\n17 Three rules condition run until executed all tasks;\n18 End of Main;"
        },
        {
            "heading": "5. Performance Evaluation and Experimental Settings",
            "text": "This section evaluates the performances of the proposed algorithms on the different workloads of IoT applications in a dynamic environment. The performance evaluation consists of many sub-parts, from the parameter setting to the result in the discussion."
        },
        {
            "heading": "5.1. Existing Simulation Tools",
            "text": "Many existing simulation tools and their approaches suggested different frameworks to solve the CLIP problem in distributed computing, as shown in Table 7. These tools consist of the following parts: control plane network, framework, implementation, environment, and the problem type. The control plane is a centralized system, which handles the entire system within the system. For instance, the SDN control plane enables many BS and fog nodes and manages their management during the process. Due to offloading, these studies considered the BS, wireless access point, and Bluetooth as a network channel for offloading. The algorithm framework is most important here, and many works suggest their methods based on GA, iterative heuristic, PSO, and optimization techniques to solve the problem. The computing nodes, such as fog node and cloud, offer two kinds of servicing model based on container and virtual machines. However, recently, results are witnessed that container-type resources outperform virtual machines concerning the delay in the system."
        },
        {
            "heading": "5.2. Proposed Simulation Tool",
            "text": "The evaluation part is crucial to evaluate the performances of applications based on proposed schemes. We exploited the multi-variance analysis of variance (ANOVA) method to find out the ideal parameters of the proposed algorithm. The simulation parameters are organized in Table 8. The workload analysis of mobile cloud applications with different task types (i.e., image, text, and video) is explained in Table 9. We use a fog cloud network based on android emulators, i.e., Amazon GenyMotion, running as virtual images on the AWS product, as a service (PaaS) on virtual machines and on the desktop machine. We also implemented a cloud-based android emulator running as a virtual image on a desktop machine as software (SaaS). We constructed a virtual cloud, i.e., edge cloud, that will be scaled up and down on-demand while emulator and configurations are performed in the cloud. We designed JTOS heuristic in the JAVA language with an advanced application programming interface (API) and tested it on Intel (R) Core (TM) i5-3475 CPU @ 3.30 GHz, 10 G Memory machine. We implemented the 64 bit X86 Amazon Machine Image (AMI) mobile cloud environment with Android 7.0 nougat for mobile cloud applications. We installed mobile applications APK\u2019s (i.e., Android Packages) on 64 bit X86 AMI. The configuration of heterogeneous computing nodes resources defined in Table 10 with their characteristics and specifications.\nWorkload Wi (MB) W \u2032i (MB) Image Tasks Video Tasks Text Tasks N\nG1 825 5.2 100 100 300 500 G2 631 6.3 150 200 350 700 G3 645 7.4 100 200 500 800 G4 755 8.7 200 200 600 1000\nTable 10 defines resource specification of computing nodes with their characteristics and features."
        },
        {
            "heading": "5.3. Data Performance Method",
            "text": "We tested four benchmark mobile cloud applications; their specifications are exemplified in Table 9. We tested applications that generate data (i.e., configuration file obtained data via profiling technologies and task scheduling heuristics) of different applications via analysis of variance (ANOVA). At the same time, ANOVA is an efficient parametric technique accessible for examining algorithm-generated data of mobile cloud applications from experiments. We exploit t-tests and dependent and independent random variables in the one way ANOVA method to note the proposed method\u2019s efficiency. To compute the recital of the JTOS, we exploit RPD (relative percentage deviation) statistical analysis. It evaluates the power consumption consumed by different parameters and frameworks, plus algorithm permutation throughout the parameter space of component calibration. The RPD estimation can be as demonstrated in the following Equation (27):\nRPD(%) = Ttotal \u2212 T\u2217total\nT\u2217total \u00d7 100%, (27)\nwhere Ttotal is the objective function of the article that executes the tasks via the proposed IoT tasks fog cloud architecture and JTOS algorithm. Furthermore, T\u2217total is the delay optimal and scheduling in the proposed architecture in the distributed computing environment."
        },
        {
            "heading": "5.4. Baseline Approaches",
            "text": "The study implemented the recently published article methods to compare the performance of the proposed JTOS framework based on different components. Recently, two computing models, virtual machines and container-based services, have been widely used to run various IoT applications. However, many additional features, such as service start time, pre-allocation, and post-allocation of resources, have utilization and delay effects on both applications and the system. The following research methods are assumed as baseline approaches in the experimental part.\n(1) Baseline 1: The experiment environment implemented existing method frameworks [1\u201310] that are considered dynamic situations during offloading and resource allocation. They suggested joint offloading and GA and PSO-aware resource allocation methods to CILP problems with the fixed environment (e.g., where users entered and left at different timezone). They considered a virtual machine-based fog cloud network and SDN controller with different base stations and wireless access points. (2) Baseline 2: The experiment environment implemented existing method frameworks [11,14,19,22,39] that are considered dynamic situation during offloading and resource allocation. They suggested joint offloading and iterative and search-aware greedy heuristics-based resource allocation methods to CILP problems with the fixed environment (e.g., where users entered and left at different timezone). They considered a docker container-based fog cloud network and SDN controller with different base stations and wireless access points."
        },
        {
            "heading": "5.5. Sdn Fog Nodes Offloading Scenario",
            "text": "Sdn Controller Configuration\nNetSim [40] is a widely used simulation modeling for the SDN control plane to handle distributed fog and cloud computing via different base stations. This study extended the SDN class control plane and base-station classes as an abstract class from the NetSim model for the experiment purpose in the proposed work. The SDN control plane monitors the channel capacity and resource of computing nodes. The SDN control plane is a management manager that helps offload the engine to reduce the total delay of applications. However, in different timezones, the uncertainty of applications could be added due to traffic and load on nodes. The study considered the following assumptions during offloading for all tasks.\n1. Each task vi is only finished and its execution or fail once it is assigned to any node. 2. Each task has a different total delay in a different timezone. 3. The study only considered the node failure and ignored the base-station failure. 4. The task migration and pre-emption are not allowed. 5. The dynamic environment only considered enter and leaving requests in the network. It is different from mobility, and mobility is not considered in this study. 6. The failure tasks reschedule from scratch if they completely failed on their computing nodes. 7. The roundtrip time between user and base station and base station to computing\nnodes is fixed in the same timezone. However, in a different timezone, there would be a different network roundtrip during offloading.\nThe offloading of tasks in different timezones has an impact on the objective of each application. Whereas in a dynamic environment, users with different applications can enter and leave at any time. However, the traffic of users becomes dense from 8 am to 10 pm. Therefore, in the simulation, the timezone is divided into three zones, such as TZ = 1, i.e., 12 am to 8 am; this time, the traffic is more minor, and total delay (communication delay and computation delay) becomes less. Whereas TZ = 2, i.e., 8 am to 4 pm, the traffic becomes very high, applications\u2019 objective function has a huge impact on their performances. In the final timezone TZ = 3, i.e., 4 pm to 12 am, the traffic becomes less than daytime peak time. In the joint offloading and allocation optimization problem, existing studies only consider the random and linear offloading without considering the timezone. Furthermore, they offload tasks based on task size and required CPU requirements. However, they did not consider the deadline and total delay of applications in their offloading scheme. Figure 3 shows FMCM in JTOS gained lower delay of application with random tasks as compared to all baseline approaches. The study evaluated the offloading of all applications at different timezones with JTOS with a different number of arbitrary tasks. Hence it is proved that the multi-criteria offloading in a dynamic environment with different timezones outperforms all conventional offloading methods in terms of RPD%. In the following way, the proposed FMCM works better than the existing offloading method: (1) All existing offloading methods in baseline 1 and baseline 2 just focused on compute-intensive or data-intensive task offloading in the full offloading scheme. Whereas, in full offloading, all tasks were offloaded in the associated external server for execution. The task offloading scheme could not meet the QoS requirement of applications, such as deadline and objective function based on data size. (2) The study proposed a fuzzy multi-criteria method that offloads all tasks based on data size, execution time, total delay, and deadline of each application in a different timezone. Different timezones have different offloading results; FMCM in JTOS always adopts the environment and makes an offloading decision based on the current values in the system."
        },
        {
            "heading": "5.6. Proposed Task Scheduling Performance against State-of-the-Art Approaches",
            "text": "Scheduling (e.g., resource allocation) is always a challenging problem in the dynamic environment. Whereas ordering of tasks, i.e., ranks, searching for particular resources, and transient failure often happen in the background. Due to different requirements of tasks in size, deadline, and additional computing speed of nodes, they are assigning tasks appropriately based on their ranks. For instance, v1 has a small deadline compared to v2, which has both a large size and deadline. Therefore, in this case, the scheduler should not assign them to power machines for their execution. In this way, a lot of resources are wasted. We implemented the existing GA, PSO, and HEFT-based methods as existing studies used in their resource allocation model and evaluated all applications\u2019 performance in terms of RPD% in the dynamic environment. Figure 4 shows the performance of all random tasks of different applications at different timezones onto heterogeneous computing nodes. Initially, all algorithms rank to each task before scheduling in the network, then search the appropriate resource for the execution of every task. Different searches such as liner search informed search and bi-searched are implemented as baseline approaches in the simulation tool. Figure 4 illustrates that JTOS outperforms all existing resource allocation policies in terms of RPD% of applications in different timezones with their characteristics. These are the reasons why JTOS outperforms all existing baseline approaches: (1) The first reason is that they exploited a simple sorting strategy, i.e., all tasks are ranked based on their size. However, this way, they will violence their deadline during scheduling. (2) The second reason, all tasks are sorted based on the available resource of machines. However, in this way, the slack time gap between tasks leads to lateness for each task. (3) All existing resource allocation schemes were used for exploration and exploitation searching during scheduling for all applications. However, due to the ample space of candidate searching, the scheduling will face a lot of overhead during the assignment of\ntasks. (4) They implemented failure aware strategy and recalled backup or checkpointing strategy until and unless tasks are recovered from the point of failure. However, this way, resource and recovery time become very high. Therefore, scheduling in JTOS ranks all tasks based on size, execution time, deadline, and total delay before scheduling. The initial scheduling maps all tasks based on sorting order. Then, the failure of tasks reschedules from the failure aware strategy with minimum recovery time compared to existing studies. In the dynamic environment at different timezones, JTOS outperforms for all applications in terms of RPD%."
        },
        {
            "heading": "5.7. Proposed Failure Aware Technique Performance against State-of-the-Art Approaches",
            "text": "The failure of tasks in the dynamic environment often occurs at different timezone due to intermittent changes in network and computing nodes. We implemented all existing strategies of fault-tolerant in distributed computing. Baseline 1 and baseline 2 are implemented checkpointing, backup recovery, runtime backup recovery, and node failure. However, these policies cannot apply to the transient failure of tasks in a dynamic environment. The transient failure is a temporary failure that can recover under task deadlines. The transient failure methods recover the failure of tasks on the same node instead of transferring to another node. For instance, v1 is failed due to computing node k1, and it is a transient failure; it will recover soon after some instants under the task deadline. It requires some iterations for recovery. However, the recovery will complete under its deadline. The study implemented all existing failure methods and evaluated the performance of all applications in terms of RPD%. Figure 5 shows the transient failure aware schemes in JTOS handled all types of errors with detection scheme, retry scheme, and failure aware scheme and gained good performance as compared to all existing baseline approaches. However, still, the failure ratio is high because many transient failures need to be recovered with\ndeadlines. For instance, communication failure, application failure, switches failure, and busy failure still need to be recovered in the transient failure aware methods.\nHowever, Figure 5 shows that the failure ratio is still high in the dynamic environment because all methods did not consider the failure of tasks due to the communication node in a different timezone. The resource fluctuation could occur in other computing during peak hours because of many requests generated by users. Therefore, it is necessary to measure the performances of the system in a different timezone. The proposed JTOS algorithm offers timezone-aware scheduling without degrading the quality of tasks at an additional time."
        },
        {
            "heading": "5.8. Rescheduling and Searching Delay Performance against State-of-the-Art Approaches",
            "text": "The searching for a new resource after the failure of a task is necessary for the scheduling method. For instance, if a task v1 is currently executing on computing node k1, and if a task cannot recover, it will schedule from scratch with a new resource, i.e., k2 \u2208 K. It is important, and a new computing node must execute the failure of tasks without wasting a lot of resources. The study proposed a searching mechanism for failure of tasks based on tasks\u2019 objective function and executing them under their deadline without violence of their performances. Figure 6 shows that all failed tasks are executed under their deadlines with minimum loss of generosity. Whereas, these methods will still improve when the communication and computing failure of tasks are noted in the dynamic environment for execution. However, the searching mechanism in JTOS for the failure of tasks still work better than existing methods in terms of applications of RPD%."
        },
        {
            "heading": "6. Conclusions and Future Work",
            "text": "This study formulated the joint offloading and scheduling CILP problem for IoT applications in the distributed fog cloud network. The proposed JTOS algorithm framework executed all tasks with different components under deadline and failure-aware constraints. The performance evaluation showed that JTOS outperforms all existing joint offloading and scheduling problems in the dynamic environment. The results discussed showed that the proposed work executed the successful industrial automation applications on the collaborative fog cloud network. All the results differed, and the proposed work minimized the overall delays compared to existing studies by 50% in work. However, there are a lot of limitations in the proposed schemes to be improved in future work. The JTOS does not support mobility-aware and location-aware services for IoT applications. This work still suffers from security issues in the fog cloud network. Application failure, communication failure, and node failure are standard transient errors in the network. However, this study only considered momentary node failure for IoT applications. This study formulated the joint offloading and scheduling CILP problem for IoT applications in the distributed fog cloud network. The proposed JTOS algorithm framework executed all tasks with different components under deadline and failure-aware constraints. The performance evaluation showed that JTOS outperforms all existing joint offloading and scheduling problems in the dynamic environment. The researched technologies have great potential for application within the Industry 4.0/5.0 concept. For the development of predictive maintenance in the industry, the use of IoT and fog cloud will be key. In future research, the author\u2019s collective will deal with the design of a suitable architecture for the needs of Industry 4.0/5.0. It will also be a key element of the Operator 4.0/5.0 concept.\nAuthor Contributions: Conceptualization, A.L. and M.A.M.; Data curation, A.L. and M.A.M.; Formal analysis, A.L. and M.A.M.; Funding acquisition, J.N., R.M. and P.Z.; Investigation, A.L., M.A.M. and K.H.A.; Methodology, A.L., M.A.M., K.H.A. and M.M.J.; Software, A.L.; Supervision, A.L.; Validation, A.L.; Visualization, A.L.; Writing\u2014original draft, A.L., M.A.M., K.H.A. and M.M.J.; Writing\u2014review & editing, J.N., R.M. and P.Z. All authors have read and agreed to the published version of the manuscript.\nFunding: This research work was partially supported by the Ministry of Education of the Czech Republic (Project No. SP2022/18 and No. SP2022/34) and partially by the European Regional Development Fund in Research Platform focused on Industry 4.0 and Robotics in Ostrava project, CZ.02.1.01/0.0/0.0/17_049/0008425 within the Operational Program Research, Development, and Education.\nInstitutional Review Board Statement: Not applicable.\nInformed Consent Statement: Not applicable.\nData Availability Statement: All the experimental data are generated at the local institution servers. Therefore, it cannot be made publicly available for other researchers.\nConflicts of Interest: The authors declare that there is no conflict of interest.\nReferences 1. De, D.; Mukherjee, A.; Roy, D.G. Power and Delay Efficient Multilevel Offloading Strategies for Mobile Cloud Computing. Wirel. Pers. Commun. 2020, 112, 2159\u20132186. [CrossRef] 2. Shahryari, O.K.; Pedram, H.; Khajehvand, V.; TakhtFooladi, M.D. Energy-Efficient and Delay-Guaranteed Computation Offloading for Fog-Based IoT Networks. Comput. Netw. 2020, 182, 107511. [CrossRef] 3. Aburukba, R.O.; AliKarrar, M.; Landolsi, T.; El-Fakih, K. Scheduling Internet of Things requests to minimize latency in hybrid Fog\u2013Cloud? computing. Future Gener. Comput. Syst. 2020, 111, 539\u2013551. [CrossRef] 4. Lin, C.; Han, G.; Qi, X.; Guizani, M.; Shu, L. A Distributed Mobile Fog Computing Scheme for Mobile Delay-Sensitive Applications in SDN-Enabled Vehicular Networks. IEEE Trans. Veh. Technol. 2020, 69, 5481\u20135493. [CrossRef] 5. Fan, Q.; Ansari, N. Application aware workload allocation for edge computing-based IoT. IEEE Internet Things J. 2018, 5, 2146\u20132153. [CrossRef] 6. Kavitha, B.; Vallikannu, R.; Sankaran, K.S. Delay-aware concurrent data management method for IoT collaborative mobile edge computing environment. Microprocess. Microsystems 2020, 74, 103021. [CrossRef] 7. Chanyour, T.; El Ghmary, M.; Hmimz, Y.; Cherkaoui Malki, M.O. Energy-efficient and delay-aware multitask offloading for mobile edge computing networks. Trans. Emerg. Telecommun. Technol. 2019, 33, e3673. [CrossRef] 8. Chamola, V.; Tham, C.K.; Gurunarayanan, S.; Ansari, N. An optimal delay aware task assignment scheme for wireless SDN networked edge cloudlets. Future Gener. Comput. Syst. 2020, 102, 862\u2013875. 9. Roy, P.; Sarker, S.; Razzaque, M.A.; Hassan, M.M.; AlQahtani, S.A.; Aloi, G.; Fortino, G. AI-enabled mobile multimedia service instance placement scheme in mobile edge computing. Comput. Netw. 2020, 182, 107573. [CrossRef] 10. Gu, X.; Zhang, G.; Cao, Y. Cooperative mobile edge computing-cloud computing in Internet of vehicle: Architecture and energy-efficient workload allocation. Trans. Emerg. Telecommun. Technol. 2020, 32, e4095. [CrossRef] 11. Zhang, L.; Ansari, N. Latency-aware IoT Service Provisioning in UAV-aided Mobile Edge Computing Networks. IEEE Internet Things J. 2020, 7, 10573\u201310580. [CrossRef] 12. Xia, Q.; Lou, Z.; Xu, W.; Xu, Z. Near-Optimal and Learning-Driven Task Offloading in a 5G Multi-Cell Mobile Edge Cloud. Comput. Netw. 2020, 176, 107276. [CrossRef] 13. Abbasi, M.; Pasand, E.M.; Khosravi, M.R. Workload Allocation in IoT-Fog-Cloud Architecture Using a Multi-Objective Genetic Algorithm. J. Grid Comput. 2020, 18, 43\u201356. [CrossRef] 14. Ying Wah, T.; Gopal Raj, R.; Lakhan, A. A novel cost-efficient framework for critical heartbeat task scheduling using the Internet of medical things in a fog cloud system. Sensors 2020, 20, 441. 15. Arikumar, K.; Natarajan, V. FIoT: A QoS-Aware Fog-IoT Framework to Minimize Latency in IoT Applications via Fog Offloading. In Evolution in Computational Intelligence; Springer: Berlin/Heidelberg, Germany, 2021; pp. 551\u2013559. 16. Siasi, N.; Jasim, M.; Aldalbahi, A.; Ghani, N. Delay-Aware SFC Provisioning in Hybrid Fog-Cloud Computing Architectures. IEEE Access 2020, 8, 167383\u2013167396. [CrossRef] 17. Naha, R.K.; Garg, S.; Chan, A.; Battula, S.K. Deadline-based dynamic resource allocation and provisioning algorithms in fog-cloud environment. Future Gener. Comput. Syst. 2020, 104, 131\u2013141. [CrossRef] 18. Lakhan, A.; Li, X. Transient fault aware application partitioning computational offloading algorithm in microservices based mobile cloudlet networks. Computing 2020, 102, 105\u2013139. [CrossRef] 19. Lakhan, A.; Khan, F.A.; Abbasi, Q.H. Dynamic Content and Failure Aware Task Offloading in Heterogeneous Mobile Cloud\nNetworks. In Proceedings of the 2019 International Conference on Advances in the Emerging Computing Technologies (AECT), Al Madinah Al Munawwarah, Saudi Arabia, 10 February 2020; pp. 1\u20136.\n20. Lakhan, A.; Sajnani, D.K.; Tahir, M.; Aamir, M.; Lodhi, R. Delay sensitive application partitioning and task scheduling in mobile edge cloud prototyping. In Proceedings of the International Conference on 5G for Ubiquitous Connectivity, Levi, Finland, 26\u201327 November 2014; Springer: Berlin/Heidelberg, Germany, 2018; pp. 59\u201380. 21. Mahesar, A.R.; Lakhan, A.; Sajnani, D.K.; Jamali, I.A. Hybrid delay optimization and workload assignment in mobile edge cloud networks. Open Access Libr. J. 2018, 5, 1\u201312. [CrossRef] 22. Lakhan, A.; Xiaoping, L. Energy aware dynamic workflow application partitioning and task scheduling in heterogeneous mobile cloud network. In Proceedings of the 2018 International Conference on Cloud Computing, Big Data and Blockchain (ICCBB), Fuzhou, China, 15\u201317 November 2018; pp. 1\u20138. 23. Lakhan, A.; Li, X. Content Aware Task Scheduling Framework for Mobile Workflow Applications in Heterogeneous MobileEdge-Cloud Paradigms: CATSA Framework. In Proceedings of the 2019 IEEE International Conference on Parallel & Distributed Processing with Applications, Big Data & Cloud Computing, Sustainable Computing & Communications, Social Computing & Networking (ISPA/BDCloud/SocialCom/SustainCom), Xiamen, China, 16\u201318 December 2019; pp. 242\u2013249.\n24. Pham, Q.V.; Fang, F.; Ha, V.N.; Piran, M.J.; Le, M.; Le, L.B.; Hwang, W.J.; Ding, Z. A survey of multi-access edge computing in 5G and beyond: Fundamentals, technology integration, and state-of-the-art. IEEE Access 2020, 8, 116974\u2013117017. [CrossRef] 25. Sajnani, D.K.; Mahesar, A.R.; Lakhan, A.; Jamali, I.A. Latency Aware and Service Delay with Task Scheduling in Mobile Edge Computing. Commun. Netw. 2018, 10, 127. [CrossRef] 26. Ma, X.; Wang, S.; Zhang, S.; Yang, P.; Lin, C.; Shen, X.S. Cost-efficient resource provisioning for dynamic requests in cloud assisted mobile edge computing. IEEE Trans. Cloud Comput. 2019, 9, 968\u2013980. [CrossRef] 27. Zhang, J.; Xia, W.; Yan, F.; Shen, L. Joint computation offloading and resource allocation optimization in heterogeneous networks with mobile edge computing. IEEE Access 2018, 6, 19324\u201319337. [CrossRef] 28. Hossain, M.D.; Sultana, T.; Nguyen, V.; Nguyen, T.D.; Huynh, L.N.; Huh, E.N. Fuzzy Based Collaborative Task Offloading Scheme in the Densely Deployed Small-Cell Networks with Multi-Access Edge Computing. Appl. Sci. 2020, 10, 3115. [CrossRef] 29. Dab, B.; Aitsaadi, N.; Langar, R. A novel joint offloading and resource allocation scheme for mobile edge computing. In Proceedings of the 2019 16th IEEE Annual Consumer Communications & Networking Conference (CCNC), Las Vegas, NV, USA, 11\u201314 January 2019; pp. 1\u20132. 30. Mohan, N.; Kangasharju, J. Edge-Fog cloud: A distributed cloud for Internet of Things computations. In Proceedings of the 2016 Cloudification of the Internet of Things (CIoT), Paris, France, 23\u201325 November 2016; pp. 1\u20136. 31. Brogi, A.; Forti, S. QoS-aware deployment of IoT applications through the fog. IEEE Internet Things J. 2017, 4, 1185\u20131192. [CrossRef] 32. Brogi, A.; Forti, S.; Ibrahim, A. How to best deploy your fog applications, probably. In Proceedings of the 2017 IEEE 1st International Conference on Fog and Edge Computing (ICFEC), Madrid, Spain, 14\u201315 May 2017; pp. 105\u2013114. 33. Gupta, H.; Vahid Dastjerdi, A.; Ghosh, S.K.; Buyya, R. iFogSim: A toolkit for modeling and simulation of resource management techniques in the Internet of Things, Edge and Fog computing environments. Softw. Pract. Exp. 2017, 47, 1275\u20131296. [CrossRef] 34. Forti, S.; Pagiaro, A.; Brogi, A. Simulating FogDirector Application Management. Simul. Model. Pract. Theory 2020, 101, 102021. [CrossRef] 35. Qayyum, T.; Malik, A.W.; Khattak, M.A.K.; Khalid, O.; Khan, S.U. FogNetSim++: A toolkit for modeling and simulation of distributed fog environment. IEEE Access 2018, 6, 63570\u201363583. [CrossRef] 36. Liu, X.; Fan, L.; Xu, J.; Li, X.; Gong, L.; Grundy, J.; Yang, Y. FogWorkflowSim: An automated simulation toolkit for workflow performance evaluation in fog computing. In Proceedings of the 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE), San Diego, CA, USA, 11\u201315 November 2019; pp. 1114\u20131117. 37. Lera, I.; Guerrero, C.; Juiz, C. YAFS: A simulator for IoT scenarios in fog computing. IEEE Access 2019, 7, 91745\u201391758. [CrossRef] 38. Forti, S.; Ibrahim, A.; Brogi, A. Mimicking FogDirector application management. SICS Softw.-Intensive -Cyber-Phys. Syst. 2019, 34, 151\u2013161. [CrossRef] 39. Tuli, S.; Mahmud, R.; Tuli, S.; Buyya, R. Fogbus: A blockchain-based lightweight framework for edge and fog computing. J. Syst. Softw. 2019, 154, 22\u201336. [CrossRef] 40. Calvo-Fullana, M.; Mox, D.; Pyattaev, A.; Fink, J.; Kumar, V.; Ribeiro, A. ROS-NetSim: A Framework for the Integration of Robotic\nand Network Simulators. IEEE Robot. Autom. Lett. 2021, 6, 1120\u20131127. [CrossRef]"
        }
    ],
    "title": "Delay Optimal Schemes for Internet of Things Applications in Heterogeneous Edge Cloud Computing Networks",
    "year": 2022
}