{
    "abstractText": "We consider the problem of sharing a set of indivisible goods among agents in a fair manner, namely such that the allocation is envy-free up to any good (EFX). We focus on the problem of computing an EFX allocation in the two-agent case and characterize the computational complexity of the problem for most well-known valuation classes. We present a simple greedy algorithm that solves the problem when the agent valuations are weakly well-layered, a class which contains gross substitutes and budget-additive valuations. For the next largest valuation class we prove a negative result: the problem is PLS-complete for submodular valuations. All of our results also hold for the setting where there are many agents with identical valuations.",
    "authors": [
        {
            "affiliations": [],
            "name": "Paul W. Goldberg"
        },
        {
            "affiliations": [],
            "name": "Kasper H\u00f8gh"
        },
        {
            "affiliations": [],
            "name": "Alexandros Hollender"
        }
    ],
    "id": "SP:59478266ad9e8dd75adaebf42d5a1f8942260e18",
    "references": [
        {
            "authors": [
                "Hannaneh Akrami",
                "Noga Alon",
                "Bhaskar Ray Chaudhury",
                "Jugal Garg",
                "Kurt Mehlhorn",
                "Ruta Mehta"
            ],
            "title": "EFX: A simpler approach and an (almost) optimal guarantee via rainbow cycle number",
            "venue": "In Proceedings of the 24th ACM Conference on Economics and Computation (EC),",
            "year": 2023
        },
        {
            "authors": [
                "Georgios Amanatidis",
                "Georgios Birmpas",
                "Aris Filos-Ratsikas",
                "Alexandros Hollender",
                "Alexandros A. Voudouris"
            ],
            "title": "Maximum Nash welfare and other stories about EFX",
            "venue": "Theoretical Computer Science,",
            "year": 2021
        },
        {
            "authors": [
                "Georgios Amanatidis",
                "Haris Aziz",
                "Georgios Birmpas",
                "Aris Filos-Ratsikas",
                "Bo Li",
                "Herv\u00e9 Moulin",
                "Alexandros A. Voudouris",
                "Xiaowei Wu"
            ],
            "title": "Fair division of indivisible goods: Recent progress and open questions",
            "venue": "Artificial Intelligence,",
            "year": 2023
        },
        {
            "authors": [
                "Georgios Amanatidis",
                "Georgios Birmpas",
                "Philip Lazos",
                "Stefano Leonardi",
                "Rebecca"
            ],
            "title": "Reiffenh\u00e4user. Round-robin beyond additive agents: Existence and fairness of approximate equilibria",
            "venue": "In Proceedings of the 24th ACM Conference on Economics and Computation (EC),",
            "year": 2023
        },
        {
            "authors": [
                "Haris Aziz",
                "Simon Mackenzie"
            ],
            "title": "A discrete and bounded envy-free cake cutting protocol for any number of agents",
            "venue": "In Proceedings of the 57th IEEE Symposium on Foundations of Computer Science (FOCS),",
            "year": 2016
        },
        {
            "authors": [
                "Moshe Babaioff",
                "Tomer Ezra",
                "Uriel Feige"
            ],
            "title": "Fair and truthful mechanisms for dichotomous valuations",
            "venue": "In Proceedings of the 35th AAAI Conference on Artificial Intelligence (AAAI),",
            "year": 2021
        },
        {
            "authors": [
                "Siddharth Barman",
                "Sanath Kumar Krishnamurthy",
                "Rohit Vaish"
            ],
            "title": "Finding fair and efficient allocations",
            "venue": "In Proceedings of the 19th ACM Conference on Economics and Computation (EC),",
            "year": 2018
        },
        {
            "authors": [
                "Ben Berger",
                "Avi Cohen",
                "Michal Feldman",
                "Amos Fiat"
            ],
            "title": "Almost full EFX exists for four agents",
            "venue": "In Proceedings of the 36th AAAI Conference on Artificial Intelligence (AAAI),",
            "year": 2041
        },
        {
            "authors": [
                "Eric Budish"
            ],
            "title": "The combinatorial assignment problem: Approximate competitive equilibrium from equal incomes",
            "venue": "Journal of Political Economy,",
            "year": 2011
        },
        {
            "authors": [
                "Ioannis Caragiannis",
                "Nick Gravin",
                "Xin Huang"
            ],
            "title": "Envy-freeness up to any item with high Nash welfare: The virtue of donating items",
            "venue": "In Proceedings of the 20th ACM Conference on Economics and Computation (EC),",
            "year": 2019
        },
        {
            "authors": [
                "Ioannis Caragiannis",
                "David Kurokawa",
                "Herv\u00e9 Moulin",
                "Ariel D. Procaccia",
                "Nisarg Shah",
                "Junxing Wang"
            ],
            "title": "The unreasonable fairness of maximum Nash welfare",
            "venue": "ACM Transactions on Economics and Computation,",
            "year": 2019
        },
        {
            "authors": [
                "Bhaskar Ray Chaudhury",
                "Jugal Garg",
                "Kurt Mehlhorn"
            ],
            "title": "EFX exists for three agents",
            "venue": "In Proceedings of the 21st ACM Conference on Economics and Computation (EC),",
            "year": 2020
        },
        {
            "authors": [
                "Bhaskar Ray Chaudhury",
                "Jugal Garg",
                "Kurt Mehlhorn",
                "Ruta Mehta",
                "Pranabendu Misra"
            ],
            "title": "Improving EFX guarantees through rainbow cycle number",
            "venue": "In Proceedings of the 22nd ACM Conference on Economics and Computation (EC),",
            "year": 2021
        },
        {
            "authors": [
                "Bhaskar Ray Chaudhury",
                "Telikepalli Kavitha",
                "Kurt Mehlhorn",
                "Alkmini Sgouritsa"
            ],
            "title": "A little charity guarantees almost envy-freeness",
            "venue": "SIAM Journal on Computing,",
            "year": 2021
        },
        {
            "authors": [
                "Jack Edmonds"
            ],
            "title": "Matroids and the greedy algorithm",
            "venue": "Mathematical Programming,",
            "year": 1971
        },
        {
            "authors": [
                "Duncan K. Foley"
            ],
            "title": "Resource Allocation and the Public Sector",
            "venue": "PhD thesis, Yale University,",
            "year": 1966
        },
        {
            "authors": [
                "David Gale"
            ],
            "title": "Optimal assignments in an ordered set: An application of matroid theory",
            "venue": "Journal of Combinatorial Theory,",
            "year": 1968
        },
        {
            "authors": [
                "Laurent Gourv\u00e8s",
                "J\u00e9r\u00f4me Monnot",
                "Lydia Tlilane"
            ],
            "title": "Near fairness in matroids",
            "venue": "In Proceedings of the 21st European Conference on Artificial Intelligence (ECAI),",
            "year": 2014
        },
        {
            "authors": [
                "Faruk Gul",
                "Ennio"
            ],
            "title": "Stacchetti. Walrasian equilibrium with gross substitutes",
            "venue": "Journal of Economic Theory,",
            "year": 1999
        },
        {
            "authors": [
                "David S. Johnson",
                "Christos H. Papadimitriou",
                "Mihalis Yannakakis"
            ],
            "title": "How easy is local search",
            "venue": "Journal of Computer and System Sciences,",
            "year": 1988
        },
        {
            "authors": [
                "Benny Lehmann",
                "Daniel Lehmann",
                "Noam Nisan"
            ],
            "title": "Combinatorial auctions with decreasing marginal utilities",
            "venue": "Games and Economic Behavior,",
            "year": 2006
        },
        {
            "authors": [
                "Richard J. Lipton",
                "Evangelos Markakis",
                "Elchanan Mossel",
                "Amin Saberi"
            ],
            "title": "On approximately fair allocations of indivisible goods",
            "venue": "In Proceedings of the 5th ACM Conference on Electronic Commerce (EC),",
            "year": 2004
        },
        {
            "authors": [
                "Pasin Manurangsi",
                "Warut Suksompong"
            ],
            "title": "Closing gaps in asymptotic fair division",
            "venue": "SIAM Journal on Discrete Mathematics,",
            "year": 2021
        },
        {
            "authors": [
                "Nimrod Megiddo",
                "Christos H. Papadimitriou"
            ],
            "title": "On total functions, existence theorems and computational complexity",
            "venue": "Theoretical Computer Science,",
            "year": 1991
        },
        {
            "authors": [
                "Benjamin Plaut",
                "Tim Roughgarden"
            ],
            "title": "Almost envy-freeness with general valuations",
            "venue": "SIAM Journal on Discrete Mathematics,",
            "year": 2020
        },
        {
            "authors": [
                "Richard Rado"
            ],
            "title": "Note on independence functions",
            "venue": "Proceedings of the London Mathematical Society,",
            "year": 1957
        },
        {
            "authors": [
                "Hugo Steinhaus"
            ],
            "title": "The problem of fair division",
            "venue": "Econometrica, 16(1):101\u2013104,",
            "year": 1948
        },
        {
            "authors": [
                "Walter Stromquist"
            ],
            "title": "How to cut a cake fairly",
            "venue": "The American Mathematical Monthly,",
            "year": 1980
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "The field of fair division studies the following fundamental question: given a set of resources, how should we divide them among a set of agents (who have subjective preferences over those resources) in a fair way? This question arises naturally in many settings, such as divorce settlement, division of inheritance, or dissolution of a business partnership, to name just a few. Although the motivation for studying this question is perhaps almost as old as humanity itself, the first mathematical investigation of the question dates back to the work of Banach, Knaster and Steinhaus [Steinhaus, 1948, 1949].\nOf course, in order to study fair division problems, one has to define what exactly is meant by a fair division. Different fairness notions have been proposed to formalize this. Banach, Knaster and Steinhaus considered a notion which is known today as proportionality : every agent believes that it obtained at least a fraction 1/n of the total value available, where n is the number of agents. A generally1 stronger notion, and one which seems more adapted to the motivating examples we mentioned above, is that of envy-freeness [Gamow and Stern, 1958; Foley, 1966; Varian, 1974]. A division of the resources is said to be envy-free, if no agent is envious, i.e., no agent values the bundle of resources obtained by some other agent strictly more than what it obtained itself.\nAs our motivating examples already suggest, the case with few agents \u2013 in fact, even just with two agents \u2013 is very relevant in practice. When the resources are divisible, such as for example money, water, oil, or time, the fair division problem with two agents admits a very simple and elegant solution: the cut-and-choose algorithm, which already appears in the Book of Genesis. As its name suggests, in the cut-and-choose algorithm one agent cuts the resources in half (according to its own valuation), and the other agent chooses its preferred piece, leaving the other piece to the first agent. It is easy to check that this guarantees envy-freeness, among other things. The case of divisible resources, which is usually called cake cutting, has been extensively studied for more than two agents. One of the main objectives in that line of research\n1As long as agents\u2019 valuations are subadditive, every envy-free division also satisfies proportionality.\nar X\niv :2\n30 1.\n10 35\n4v 2\n[ cs\n.G T\n] 1\n5 Ju\nl 2 02\n3\ncan be summarized as follows: come up with approaches that achieve similar guarantees to cut-and-choose, but for more than two agents. This has been partially successful, and notable results include the proof of the existence of an envy-free allocation for any number of agents [Stromquist, 1980; Woodall, 1980; Su, 1999], as well as a finite, albeit very inefficient, protocol for computing one [Aziz and Mackenzie, 2016].\nIn many cases, however, assuming that the resources are divisible might be too strong an assumption. Indeed, some resources are inherently indivisible, such as a house, a car, or a company. Sometimes these resources can be made divisible by sharing them over time, for example, one agent can use the car over the weekend and the other agent on weekdays. But, in general, and in particular when agents are not on friendly terms with each other, as one would expect to often be the case for divorce settlements, this is not really an option.\nIndivisible resources make the problem of finding a fair division more challenging. First of all, in contrast to the divisible setting, envy-free allocations are no longer guaranteed to exist. Indeed, this is easy to see even with just two agents and a single (indivisible) good that both agents would like to have. No matter who is given the good, the other agent will envy them. In order to address this issue of non-existence of a solution, various relaxations of envy-freeness have been proposed and studied in the literature. The strongest such relaxation, namely the one which seems closest to perfect envy-freeness, is called envy-freeness up to any good and is denoted by EFX [Caragiannis et al., 2019b; Gourve\u0300s et al., 2014]. An allocation is EFX if for all agents i and j, agent i does not envy agent j, after removal of any single good from agent j\u2019s bundle. In other words, an allocation is not EFX, if and only if there exist agents i and j, and a good in j\u2019s bundle, so that i envies j\u2019s bundle even after removal of that good.\nFor this relaxed notion of envy-freeness, it is possible to recover existence, at least in some cases. An EFX allocation is guaranteed to exist for two agents with any monotone valuations [Plaut and Roughgarden, 2020], and for three agents if we restrict the valuations to be additive [Chaudhury et al., 2020]. It is currently unknown whether it always exists for four or more agents, even just for additive valuations.\nSurprisingly, proving the existence of EFX allocations for two agents is non-trivial. In order to use the cut-and-choose approach, we need to be able to \u201ccut in half\u201d. In the divisible setting, this is straightforward. But, in the indivisible setting, we need to \u201ccut in half in the EFX sense,\u201d i.e., divide the goods into two bundles such that the first agent is EFX with either bundle. In other words, we first need to show the existence of EFX allocations for two identical agents, namely two agents who share the same valuation function, which is not a trivial task.\nPlaut and Roughgarden [2020] provided a solution to this problem by introducing the leximin++ solution. Given a monotone valuation function, they defined a total ordering over all allocations called the leximin++ ordering. They proved that for two identical agents, the leximin++ solution, namely the global maximum with respect to the leximin++ ordering, must be an EFX allocation. As mentioned above, using the cut-and-choose algorithm, this shows the existence of EFX allocations for two, possibly different, agents. Unfortunately, computing the leximin++ solution is computationally intractable2 and so, while this argument proves the existence of EFX allocations, it does not yield an efficient algorithm.\nNevertheless, for two agents with additive valuations, Plaut and Roughgarden [2020] provided a polynomial-time algorithm based on a modification of the Envy-Cycle elimination algorithm of Lipton et al. [2004]. They also provided a lower bound for the problem in the more general class of submodular valuations, but not in terms of computational complexity (i.e., not in the standard Turing machine model). Namely, they proved that for two identical agents with submodular valuations computing an EFX allocation requires an exponential number of queries in the query complexity model.\n2Computing the leximin++ solution is NP-hard, even for two identical agents with additive valuations. This can be shown by a reduction from the Partition problem (see [Plaut and Roughgarden, 2020, Footnote 7] and note that their argument, which they use for leximin, also applies to leximin++).\nTheir work naturally raises the following two questions about the problem of computing an EFX allocation for two agents:\n1. What is the computational complexity of the problem for submodular valuations?\n2. What is the computational complexity of the problem for well-known valuation classes lying between additive and submodular,3 such as gross substitutes, OXS, and budget-additive?\nNote that it does not make sense to study the query complexity for additive valuations, since a polynomial number of queries is sufficient to reconstruct the whole valuation functions (and the amount of computation then needed to determine a solution is not measured in the query complexity). However, it does make sense to study the computational complexity of the problem for submodular valuations, as well as other classes beyond additive. The query lower bound by Plaut and Roughgarden essentially says that many queries are needed in order to gather enough information about the submodular valuation function to be able to construct an EFX allocation. But it does not say anything about the computational hardness of finding an EFX allocation. Their lower bound does not exclude the possibility of a polynomial-time algorithm for submodular valuations in the standard Turing machine model. Studying the problem in the computational complexity model allows us to investigate how hard it is to solve when the valuation functions are given in some succinct representation, e.g., as a few lines of code, or any other form that allows for efficient evaluation.\nOur contribution. We answer both of the aforementioned questions:\n1. For submodular valuations, we prove that the problem is PLS-complete in the standard Turing machine model, even with two identical agents.\n2. We present a simple greedy algorithm that finds an EFX allocation in polynomial time for two agents with weakly well-layered valuations, a class of valuation functions that we define in this paper and which contains all well-known strict subclasses of submodular, such as gross substitutes (and thus also OXS) and budget-additive.4\nTogether, these two results resolve the computational complexity of the problem for all valuation classes in the standard complement-free hierarchy (additive \u2286 OXS \u2286 gross substitutes \u2286 submodular \u2286 XOS \u2286 subadditive) introduced by Lehmann et al. [2006]. Furthermore, just like in the work of Plaut and Roughgarden [2020], our negative and positive results also hold for any number of identical agents.\nRegarding the PLS-completeness result, the membership in PLS is easy to show using the leximin++ ordering of Plaut and Roughgarden [2020]. The PLS-hardness is more challenging. The first step of our hardness reduction is essentially identical to the first step in the corresponding query lower bound of Plaut and Roughgarden [2020]: a reduction from a local optimization problem on the Kneser graph to the problem of finding an EFX allocation. The second step of the reduction is our main technical contribution: we prove that finding a local optimum on a Kneser graph is PLS-hard5, which might be of independent interest.\n3In particular, Plaut and Roughgarden [2020, Section 7] propose studying the complexity of fair division problems with respect to the hierarchy of complement-free valuations (additive \u2286 OXS \u2286 gross substitutes \u2286 submodular \u2286 XOS \u2286 subadditive) introduced by Lehmann et al. [2006].\n4The class of weakly well-layered valuations also contains the class of cancelable valuations which have been recently studied in fair division [Berger et al., 2022; Akrami et al., 2023; Amanatidis et al., 2023b].\n5We note that proving a tight computational complexity lower bound is more challenging than proving a query lower bound, because we have to reduce from problems with more structure. Indeed, the exponential query lower bound for the Kneser problem (and thus also for the EFX problem) can easily be obtained as a byproduct of our reduction.\nFurther related work. The existence and computation of EFX allocations has been studied in various different settings, such as for restricted versions of valuation classes [Amanatidis et al., 2021; Babaioff et al., 2021], when some items can be discarded [Caragiannis et al., 2019a; Chaudhury et al., 2021b; Berger et al., 2022; Chaudhury et al., 2021a], or when valuations are drawn randomly from a distribution [Manurangsi and Suksompong, 2021].\nA weaker relaxation of envy-freeness is envy-freeness up to one good (EF1) [Budish, 2011; Lipton et al., 2004]. It can be computed efficiently for any number of agents with monotone valuations using the Envy-Cycle elimination algorithm [Lipton et al., 2004]. If one is also interested in economic efficiency, then it is possible to obtain an allocation that is both EF1 and Pareto-optimal in pseudopolynomial time for additive valuations [Barman et al., 2018]. For more details about fair division of indivisible items, we refer to the recent survey by Amanatidis et al. [2023a].\nOutline. We begin with Section 2 where we formally define the problem and solution concept, as well as some standard valuation classes of interest. In Section 3 we introduce weakly well-layered valuation functions, and present our simple greedy algorithm for computing EFX allocations. Finally, in Section 4 we prove our main technical result, the PLS-completeness for submodular valuations."
        },
        {
            "heading": "2 Preliminaries",
            "text": "We consider the problem of discrete fair division where an instance consists of a set of agents N , a set of goods M , and for every agent i \u2208 N a valuation function vi : 2M \u2192 R\u22650 assigning values to bundles of goods. All valuation functions will be assumed to be monotone, meaning that for any subsets S \u2286 T \u2286 M it holds that v(S) \u2264 v(T ), and normalized, i.e., v(\u2205) = 0.\nWe now introduce the different types of valuation functions that are of interest to us. A valuation v : 2M \u2192 R\u22650 is additive if v(S) = \u2211 g\u2208S v({g}) for every S \u2286 M . The hardness result we present in Section 4 holds for submodular valuations. These are valuations that satisfy the following diminishing returns condition that whenever S \u2286 T and x /\u2208 T it holds that v(S \u222a {x})\u2212 v(S) \u2265 v(T \u222a {x})\u2212 v(T ).\nNext, for our results in the positive direction, we introduce the classes of gross substitutes and budget-additive valuations, both contained in the class of submodular valuations. Before defining gross substitutes valuations, we have to introduce some notation. For a price vector p \u2208 Rm on the set of goods, where m = |M |, the function vp is defined by vp(S) = v(S) \u2212 \u2211 g\u2208S pg for any subset S \u2286 M , and the demand set is D(v, p) = argmaxS\u2286M vp(S). A valuation v is gross substitutes if for any price vectors p, p\u2032 \u2208 Rm with p \u2264 p\u2032 (meaning that pg \u2264 p\u2032g for all g \u2208 M), it holds that if S \u2208 D(v, p), then there exists a demanded set S\u2032 \u2208 D(v, p\u2032) such that {g \u2208 S : pg = p\u2032g} \u2286 S\u2032. That is to say, if some good g is demanded at prices p and the prices of some other goods increase, then g will still be demanded. These valuations have various nice properties, for instance guaranteeing existence of Walrasian equilibria [Gul and Stacchetti, 1999]. Lastly, a valuation v is budget-additive if it is of the form v(S) = min{B, \u2211 g\u2208S wg} for reals B,w1, . . . , wm \u2265 0. [Lehmann et al., 2006] show that a budget-additive valuation need not satisfy the gross substitutes condition. See Figure 1 for the relationship between the valuation classes.\nEnvy-freeness up to any good (EFX). The goal of fair division is to find an allocation of the goods to the agents (i.e., a partitioning M = X1\u2294\u00b7 \u00b7 \u00b7\u2294Xn) satisfying some notion of fairness. One might hope for an envy-free division in which every agent prefers his own bundle over the bundle of any other agent, that is, vi(Xi) \u2265 vi(Xj) for all i, j \u2208 N . Such a division need not exist, however, as can be seen in the case where one has to divide one good among two agents, as already mentioned in the introduction. Therefore various weaker notions of fairness have been\nstudied. In this paper we consider the notion of envy-freeness up to any good (EFX) introduced by Caragiannis et al. [2019b], and before that by Gourve\u0300s et al. [2014] under a different name. An allocation (X1, . . . , Xn) is said to be EFX if for any i, j \u2208 N and any g \u2208 Xj it holds that vi(Xi) \u2265 vi(Xj \\ {g})."
        },
        {
            "heading": "3 Polynomial-time Algorithm for Weakly Well-Layered Valua-",
            "text": "tions\nIn this section we present our positive result, namely the polynomial-time algorithm for computing an EFX allocation for two agents with weakly well-layered valuations. To be more precise, our algorithm works for any number of agents that all share the same weakly well-layered valuation function. As a result, using cut-and-choose it can then be used to solve the problem with two possibly different agents. We begin with the definition of this new class of valuations, and then present the algorithm and prove its correctness."
        },
        {
            "heading": "3.1 Weakly Well-Layered Valuations",
            "text": "We introduce a property of valuation functions and then situate this with respect to well-known classes of valuation functions in the next section.\nDefinition 3.1. A valuation function v : 2M \u2192 R\u22650 is said to be weakly well-layered if for any M \u2032 \u2286 M the sets S0, S1, S2, . . . obtained by the greedy algorithm (that is, S0 = \u2205 and Si = Si\u22121 \u222a {xi} where xi \u2208 argmaxx\u2208M \u2032\\Si\u22121 v(Si\u22121 \u222a {x}) for 1 \u2264 i \u2264 |M \u2032|) are optimal in the sense that v(Si) = maxS\u2286M \u2032 : |S|=i v(S) for all i.\nWe can reformulate this definition as follows: a valuation function v is weakly well-layered if and only if, for all M \u2032 \u2286 M and all i, the optimization problem\nmax v(S) s.t. S \u2286 M \u2032\n|S| \u2264 i (1)\ncan be solved by using the natural greedy algorithm. Note that since we only consider monotone valuations, we can also use the condition |S| = i instead of |S| \u2264 i.\nThe reformulation of the definition in terms of the optimization problem (1) is reminiscent of one of the alternative definitions of a matroid. Consider the optimization problem\nmax v(S) s.t. S \u2208 F (2)\nwhere v : 2M \u2192 R\u22650 is a valuation function and F is an independence system on M . Then, it is well-known that F is a matroid, if and only if, for all additive valuations v, the optimization problem (2) can be solved by the natural greedy algorithm [Rado, 1957; Gale, 1968; Edmonds, 1971]. In other words, the class of set systems (namely, matroids) is defined by fixing a class of valuations (namely, additive). The alternative definition of weakly well-layered valuations given in (1) can be viewed as doing the opposite: the class of valuations (namely, weakly well-layered) is defined by fixing a class of set systems (namely, all uniform matroids on subsets M \u2032 \u2286 M , or, more formally, F = {S \u2286 M \u2032 : |S| \u2264 i} for all M \u2032 \u2286 M and all i)."
        },
        {
            "heading": "3.2 Relationship to other valuation classes",
            "text": "Gross substitutes. We begin by showing that any gross substitutes valuation is weakly well-layered. In particular, this also implies that OXS valuations, which are a special case of gross substitutes, are also weakly well-layered. Paes Leme [2017] proved that gross substitutes valuation functions satisfy the stronger condition of being well-layered, that is, for any p \u2208 Rm it holds that if S0, S1, S2, . . . is constructed greedily with respect to the valuation vp, where vp(S) := v(S)\u2212 \u2211 g\u2208S pg, then Si satisfies that Si \u2208 argmaxS\u2286M : |S|=i vp(S).\nLemma 1. If v : 2M \u2192 R\u22650 is well-layered, then it is also weakly well-layered. In particular, gross substitutes valuations are weakly well-layered.\nProof. Assume that v : 2M \u2192 R\u22650 is well-layered and let M \u2032 \u2286 M . Assume that the sequence S0, S1, S2, . . . is constructed via the greedy algorithm: that is S0 = \u2205 and Si = Si\u22121 \u222a {xi} where xi \u2208 argmaxx\u2208M \u2032\\Si\u22121 v(Si\u22121 \u222a {x}) for 1 \u2264 i \u2264 |M\n\u2032|. We have to show that v(Si) = maxS\u2286M \u2032 : |S|=i v(S).\nIn order to exploit the assumption that v is well-layered, we introduce a price vector p \u2208 Rm given by\npg =\n{ 0 g \u2208 M \u2032\nv(M) + 1 g /\u2208 M \u2032\nOne sees that the sequence S0, S1, S2, . . . can occur via the greedy algorithm for the valuation vp, because goods not in M\n\u2032 cannot be chosen as their prices are too high. As v is well-layered, we have that vp(Si) = maxS\u2286M : |S|=i vp(S). As pg = 0 for all g \u2208 M \u2032, this implies that v(Si) = maxS\u2286M \u2032 : |S|=i v(S). We conclude that v is weakly well-layered.\nClosure properties and budget-additive valuations. We note that the class of weakly well-layered valuations is closed under two natural operations.\nLemma 2. Let v : 2M \u2192 R\u22650 be weakly well-layered and let f : R\u22650 \u2192 R\u22650 strictly increasing. Then the composition f \u25e6 v : 2M \u2192 R\u22650 is weakly well-layered.\nProof. Let M \u2032 \u2286 M and assume that S0, S1, S2, . . . are constructed greedily, that is S0 = \u2205 and Si = Si\u22121 \u222a {xi} where xi \u2208 argmaxx\u2208M \u2032\\Si\u22121 f(v(Si\u22121 \u222a {x})) for 1 \u2264 i \u2264 |M \u2032|. As f is strictly increasing, we see that xi \u2208 argmaxx\u2208M \u2032 f(v(Si\u22121\u222a{x})) if and only if xi \u2208 argmaxx\u2208M \u2032 v(Si\u22121\u222a\n{x}). Therefore S0, S1, S2, . . . could also arise via the greedy construction based on the valuation v. As v is weakly well-layered, this implies that v(Si) = maxS\u2286M \u2032 : |S|=i v(S) for all i. As f is increasing, this shows that f(v(Si)) = maxS\u2286M \u2032 : |S|=i f(v(S)) for all i. We conclude that f \u25e6 v is weakly well-layered.\nLemma 3. Let v : 2M \u2192 R\u22650 be weakly well-layered and B \u2265 0. Then the valuation u : 2M \u2192 R\u22650 given by u(S) = min(v(S), B) is weakly well-layered. Proof. Let S0, S1, S2, . . . be constructed greedily from the valuation u. Suppose that S0, S1, . . . , Sk have utility < B and that Sk+1, Sk+2, . . . have utility B. As x 7\u2192 min(x,B) is strictly increasing on [0, B), the sets S0, S1, . . . , Sk could have been constructed greedily from v. As v is weakly well-layered, they are therefore optimal of their given size for v and therefore also for u. The sets Sk+1, . . . all have maximal utility B and are therefore optimal of their given sizes.\nAs a corollary, since additive valuations are weakly well-layered, it follows that the class of budget-additive valuations satisfies the weakly well-layered property.\nCorollary 1. Any budget-additive valuation is weakly well-layered.\nIn contrast, it is known that budget-additive valuations are not necessarily gross substitutes, and, as the following example shows, not even well-layered.\nExample 1. Consider the budget-additive valuation on three goods a, b, c with values va = vb = 2, vc = 4 and a budget of B = 4. Let p = (1, 1, 2) be a price vector. Under these prices, the greedy algorithm would pick good c as its first item. However, {a, b} is the unique optimal bundle of size 2, and so the greedy algorithm would fail in this case. As a result, the valuation is not well-layered.\nCancelable valuations. The class of weakly well-layered valuations also contains the class of cancelable valuations recently defined by Berger et al. [2022], which contains budget-additive, unit-demand, and multiplicative valuations as special cases. A valuation function v : 2M \u2192 R\u22650 is said to be cancelable if v(S \u222a {x}) > v(T \u222a {x}) =\u21d2 v(S) > v(T ) for any S, T \u2286 M and x \u2208 M \\ (S \u222a T ). Lemma 4. Any cancelable valuation is weakly well-layered. Proof. Let v be cancelable, M \u2032 \u2286 M , and let S0, S1, S2, . . . be obtained by the greedy algorithm on v and M \u2032 (see Definition 3.1). We prove by induction that v(Si) = maxS\u2286M \u2032:|S|=i v(S) for all i. Clearly, this holds for i = 1.\nNow assume that the induction hypothesis holds for some i \u2265 1 and consider Si+1 = Si \u222a {xi+1}. If there existed T \u2286 M \u2032 with |T | = i+ 1 such that v(T ) > v(Si+1), then, letting y be any element in T \\ Si, we would obtain\nv((T \\ {y}) \u222a {y}) = v(T ) > v(Si+1) = v(Si \u222a {xi+1}) \u2265 v(Si \u222a {y})\nwhere we used the fact that xi+1 was added greedily to Si. Since v is cancelable, it follows that v(T \\ {y}) > v(Si), which contradicts the induction hypothesis for i. As a result, the set Si+1 must also be optimal.\nThe results of this subsection are summarised in Figure 1. Note also that the classes of submodular valuations and weakly well-layered valuations are incomparable. For an example of a valuation function that is submodular but not weakly well-layered, see Example 3 in the next section. For the other direction, see the following example of a valuation that is well-layered (and thus weakly well-layered), but not submodular.\nExample 2. Consider the valuation function v on two goods a, b given by v({a, b}) = 1 and v(\u2205) = v({a}) = v({b}) = 0. This valuation function is seen to be well-layered (and thus weakly well-layered), because subsets of equal size have the same valuation. However, it is not submodular, because v({a} \u222a {b})\u2212 v({a}) = 1 > 0 = v(\u2205 \u222a {b})\u2212 v(\u2205).\nAlgorithm 1 Greedy EFX Input: N,M, v Output: EFX allocation\nLet Ai = \u2205 for i \u2208 N . Let R = M . while R \u0338= \u2205 do\ni = argminj\u2208N v(Aj) g = argmaxx\u2208R v(Ai \u222a {x}) Ai = Ai \u222a {g} R = R \\ {g}\nend while return (A1, . . . , An)"
        },
        {
            "heading": "3.3 The Greedy EFX Algorithm",
            "text": "We now present a simple algorithm that computes an EFX allocation for many agents that all share the same weakly well-layered valuation function v.\nTheorem 3.1. If the valuation function v is weakly well-layered, then the output of Algorithm 1 is EFX. In particular, by using the cut-and-choose protocol one may compute an EFX allocation for two agents with different valuations as long as one of these valuations is weakly well-layered.\nProof. We show that the algorithm maintains a partial EFX allocation throughout. Initially the partial allocation is empty and so clearly EFX. Suppose that at the beginning of some round the current partial allocation (X1, . . . , Xn) is EFX and that some agent i \u2208 N receives a good g in this round. We have to show that the new (partial) allocation (X \u20321, . . . , X \u2032 n) is EFX, where X \u2032i = Xi \u222a {g} and X \u2032j = Xj for j \u0338= i. Clearly, the only thing we have to argue is that v(X \u2032i \\ {g\u2032}) \u2264 v(X \u2032j) for all j \u2208 N and all g\u2032 \u2208 X \u2032i. As i received a good in the current round we have that v(Xi) \u2264 v(Xj) = v(X \u2032j). Therefore, it suffices to argue that v(X \u2032i \\ {g\u2032}) \u2264 v(Xi) for all g\u2032 \u2208 X \u2032i. This last inequality follows from v being weakly well-layered by taking M \u2032 = X \u2032i. With this M \u2032, the set Xi could namely be produced by running the greedy algorithm. Therefore, Xi is an optimal subset of M\n\u2032 = X \u2032i of size |Xi| = |X \u2032i| \u2212 1, meaning that v(X \u2032i \\ {g\u2032}) \u2264 v(Xi) for all g \u2208 X \u2032i.\nThe algorithm can fail to provide an EFX allocation for submodular valuations that are not weakly well-layered, as the following example shows.\nExample 3. Consider an instance with two agents and four goods denoted a, b, c, d, where the valuation function v is given by: v({a}) = 11, v({b}) = v({c}) = 10, v({d}) = 16, v({a, b}) = 15, v({a, c}) = 15, v({b, c}) = 17, v({a, b, c}) = 18, and v(S) = 18 for all sets S that satisfy d \u2208 S and |S| \u2265 2. It can be checked by direct computation that v is indeed submodular. The greedy EFX algorithm yields: agent 1 gets good d, and then agent 2 gets goods a, b, c. This allocation is not EFX, because v({d}) < v({b, c}).\n4 PLS-completeness for Submodular Valuations\nTotal NP search problems (TFNP). A total search problem is given by a relation R \u2286 {0, 1}\u2217 \u00d7 {0, 1}\u2217 that satisfies: for all x \u2208 {0, 1}\u2217, there exists y \u2208 {0, 1}\u2217 such that (x, y) \u2208 R. The relation R is interpreted as the following computational problem: given x \u2208 {0, 1}\u2217, find some y \u2208 {0, 1}\u2217 such that (x, y) \u2208 R. The class TFNP [Megiddo and Papadimitriou, 1991] is defined as the set of all total search problems R such that the relation R is polynomial-time decidable\n(i.e., given some x, y we can check in polynomial time whether (x, y) \u2208 R) and polynomially balanced (i.e., there exists some polynomial p such that |y| \u2264 p(|x|) whenever (x, y) \u2208 R).\nLet R and S be two problems in TFNP. We say that R reduces to S if there exist polynomialtime functions f : {0, 1}\u2217 \u2192 {0, 1}\u2217 and g : {0, 1}\u2217 \u00d7 {0, 1}\u2217 \u2192 {0, 1}\u2217 such that for all x, y \u2208 {0, 1}\u2217: if (f(x), y) \u2208 S, then (x, g(y, x)) \u2208 R. In other words, f maps an instance of R to an instance of S, and g maps back any solution of the S-instance to a solution of the R-instance.\nPolynomial Local Search (PLS). Johnson et al. [1988] introduced the class PLS, a subclass of TFNP, to capture the complexity of computing locally optimal solutions in settings where local improvements can be computed in polynomial time. In order to define the class PLS, we proceed as follows: first, we define a set of basic PLS problems, and then define the class PLS as the set of all TFNP problems that reduce to a basic PLS problem.\nA local search problem \u03a0 is defined as follows. For every instance6 I \u2208 {0, 1}\u2217, there is a finite set FI \u2286 {0, 1}\u2217 of feasible solutions, an objective function cI : FI \u2192 N, and for every feasible solution s \u2208 FI there is a neighborhood NI(s) \u2286 FI . Given an instance I, one seeks a local optimum s\u2217 \u2208 FI with respect to cI and NI , meaning, in case of a maximization problem, that cI(s \u2217) \u2265 cI(s) for all neighbors s \u2208 NI(s\u2217).\nDefinition 4.1. A local search problem \u03a0 is a basic PLS problem if there exists some polynomial p such that FI \u2286 {0, 1}p(|I|) for all instances I, and if there exist polynomial-time algorithms A,B and C such that:\n1. Given an instance I, algorithm A produces an initial feasible solution s0 \u2208 FI .\n2. Given an instance I and a string s \u2208 {0, 1}p(|I|), algorithm B determines whether s is a feasible solution and, if so, computes the objective value cI(s).\n3. Given an instance I and any feasible solution s \u2208 FI , the algorithm C checks if s is locally optimal and, if not, produces a feasible solution s\u2032 \u2208 NI(s) that improves the objective value.\nNote that any basic PLS problem lies in TFNP.\nDefinition 4.2. The class PLS is defined as the set of all TFNP problems that reduce to a basic PLS problem.\nA problem is PLS-complete if it lies in PLS and if every problem in PLS reduces to it. Johnson et al. [1988] showed that the so-called Flip problem is PLS-complete. We will define this problem later when we make use of it to prove our PLS-hardness result.\n4.1 PLS-membership\nPlaut and Roughgarden [2020] prove the existence of an EFX allocation when all agents share the same monotone valuation, by introducing the leximin++ solution. In this section, we show how their existence proof can be translated into a proof of PLS-membership for the following problem.\nDefinition 4.3 (Identical-EFX). An instance I = (N,M,C) of the Identical-EFX search problem consists of a set of agents N = [n], a set of goods M = [m], and a boolean circuit C with m input gates. The circuit C defines a valuation function v : 2M \u2192 N which is the common valuation of all the agents. A solution is one of the following:\n6A more general definition would also include a polynomial-time recognizable set D\u03a0 \u2286 {0, 1}\u2217 of valid instances. The assumption that D\u03a0 = {0, 1}\u2217 is essentially without loss of generality. Indeed, for I /\u2208 D\u03a0 we can define FI = {0}, cI(0) = 1 and NI(0) = {0}. Note that this does not change the complexity of the problem.\n1. An allocation (X1, . . . , Xn) that is EFX.\n2. A pair of bundles S \u2286 T that violate monotonicity, that is, v(S) > v(T ).\nThe reason for allowing the violation-of-monotonicity solutions is that the circuit C is not guaranteed to define a monotone valuation, and in this case an EFX allocation is not guaranteed to exist. Importantly, we note that our PLS-hardness result (presented in the next section) does not rely on violation solutions. In other words, even the version of the problem where we are promised that the valuation function is monotone remains PLS-hard.\nTheorem 4.1. The Identical-EFX problem lies in PLS.\nThe problem of computing an EFX allocation for two non-identical agents with valuations v1 and v2 is reducible to the problem of computing an EFX allocation for two identical agents via the cut-and-choose protocol. As a result, we immediately also obtain the following:\nCorollary 2. Computing an EFX allocation for two not necessarily identical agents is in PLS.\nProof. To show that the Identical-EFX problem is in PLS, we reduce it to a basic PLS problem. An instance of this basic PLS problem is just an instance of the Identical-EFX problem, i.e, a tuple I = (N,M,C). The set of feasible solutions FI is the set of all possible allocations of the goods in M to the agents in N . As an initial feasible solution, we simply take the allocation where one agent receives all goods. It remains to specify the objective function cI and the neighborhood structure NI , and then to argue that a local optimum corresponds to an EFX allocation.\nPlaut and Roughgarden [2020, Section 4] introduce the leximin++ ordering on the set of allocations, and show that the maximum element with respect to that ordering must be an EFX allocation. In fact, a closer inspection of their proof reveals that even a local maximum with respect to the leximin++ ordering must be an EFX allocation. As a result, we construct an objective function that implements the leximin++ ordering and then use the same arguments as Plaut and Roughgarden [2020, Theorem 4.2].\nFor an allocation (X1, . . . , Xn), we let O X = (i1, . . . , in) be an ordering of the agents according to increasing values of v(Xi) (if multiple agents have bundles of equal utility, we break ties by ordering tied agents in terms of their agent number, i.e., if agents i and j are tied, and i < j, then agent i will appear before agent j in the ordering). The objective value is then defined as\ncI(X) = |Xin |+ v(Xin)K +|Xin\u22121 |K2 + v(Xin\u22121)K3\n+ . . . +|Xi1 |K2n\u22122 + v(Xi1)K2n\u22121\nwhere K is an upper bound on the size or utility of any bundle. We claim that if an allocation X is not EFX, then one may construct an allocation X \u2032 from X by moving a single good from one bundle to another such that the objective strictly increases, cI(X\n\u2032) > cI(X). Therefore, we will consider local maximization of this objective and we define the neighborhood of X to be NI(X) = {X \u2032 \u2208 FI : \u2203i, j \u2208 N, \u2203g \u2208 Xj s.t. X \u2032i = Xi \u222a {g}, X \u2032j = Xj \\ {g}, X \u2032k = Xk for k \u0338= i, j}. We note that the cardinality of NI(X) is polynomial in n and m, so the algorithm for finding an improving neighbor if one exists may simply compute the objective value for every allocation in the neighborhood. Thus, this local maximization problem is indeed a basic PLS problem.\nFinally, we have to show that any local maximum X \u2208 FI yields a solution to the IdenticalEFX problem, i.e., X is an EFX allocation or X yields a violation of monotonicity. We say that an allocation X yields a violation of monotonicity, if there exist i \u2208 N and g \u2208 M such that\nv(Xi \\{g}) > v(Xi) or v(Xi\u222a{g}) < v(Xi). We note that if X yields a violation of monotonicity, then the violation can be found in polynomial time.\nConsider an allocation X \u2208 FI that is not EFX and that does not yield a violation of monotonicity. We will show that X cannot be a local maximum, which then implies the desired statement by contrapositive. Since X is not EFX, we may find i, j \u2208 N and g \u2208 Xj such that v(Xi) < v(Xj \\ {g}). Without loss of generality, we may assume that i = argmink\u2208N v(Xk), and if more than one agent attains this minimum, then we take the i that appears last among those tied agents in OX according to the tie-breaking. Now define an allocation X \u2032 by\nX \u2032i = Xi \u222a {g} X \u2032j = Xj \\ {g} X \u2032k = Xk for k \u0338= i, j\nand note that X \u2032 \u2208 NI(X). We claim that cI(X \u2032) > cI(X), meaning that X is not a local maximum.\nIn order to prove this, we first show that the orderings OX and OX \u2032 agree in their first \u2113 positions, where \u2113 \u2208 {0, 1, . . . , n \u2212 1} is the index such that OX\u2113+1 = i, i.e., agent i appears in position \u2113+ 1 in OX . Let S denote the set of agents that appear in OX before agent i, i.e., the first \u2113 agents appearing in OX . Note that S consists of all the agents that have utility v(Xi) in allocation X, excluding i. First, observe that j /\u2208 S, because v(Xj) \u2265 v(Xj \\ {g}) > v(Xi) as X does not yield a violation of monotonicity. Therefore, we find that the bundles of the agents in S are not changed from allocation X to X \u2032, and, in particular, these agents still have utility v(Xi) in allocation X \u2032. Furthermore, in allocation X \u2032, all other agents (except possibly i) have strictly larger utility than S-agents, namely v(X \u2032j) = v(Xj \\ {g}) > v(Xi), and v(X \u2032k) = v(Xk) > v(Xi) for k /\u2208 S \u222a {i, j}. Finally, v(X \u2032i) = v(Xi \u222a {g}) \u2265 v(Xi) as X does not yield a violation of monotonicity, and thus, in allocation X \u2032, agent i is either also tied with the agents in S, or it has strictly larger utility. In any case, by the tie-breaking, the first \u2113 positions of OX and OX \u2032 are the same. We now argue that cI(X \u2032) > cI(X). Since O X and OX \u2032 agree in their first \u2113 positions, and the bundles of those first \u2113 agents have not changed, the 2\u2113 highest-order terms in cI(X) and cI(X \u2032) have identical coefficients. By definition, OX\u2113+1 = i. If O X\u2032 \u2113+1 = i, then we have that cI(X \u2032) > cI(X), because v(X \u2032 i) = v(Xi\u222a{g}) \u2265 v(Xi) and |X \u2032i| = |Xi\u222a{g}| > |Xi|, meaning that the coefficient in front of K2n\u2212(2\u2113+1) is at least as large in cI(X \u2032) as in cI(X) and the coefficient in front of K2n\u2212(2\u2113+2) is strictly larger. If OX \u2032\n\u2113+1 = k \u0338= i, then we have that cI(X \u2032) > cI(X), because v(X \u2032k) > v(Xi), implying that the coefficient in front of K\n2n\u2212(2\u2113+1) is strictly larger in cI(X\n\u2032) than in cI(X). We conclude that X is not a local maximum. Therefore, by contraposition, a local maximum is an EFX allocation or it yields a violation of monotonicity.\n4.2 PLS-hardness\nIn this section we prove the following theorem.\nTheorem 4.2. The problem of computing an EFX allocation for two identical agents with a submodular valuation function is PLS-hard.\nThe reduction consists of two steps. First, following Plaut and Roughgarden [2020], we reduce the problem of local optimization on an odd Kneser graph to the problem of computing an EFX allocation for two agents sharing the same submodular valuation function. Then, in the second step, which is also our main technical contribution, we show that the PLS-complete problem Flip reduces to local optimization on an odd Kneser graph.\n4.2.1 Kneser \u2264 Identical-EFX\nFor k \u2208 N, the odd Kneser graph K(2k + 1, k) is defined as follows: the vertex set consists of all subsets of [2k + 1] of size k, and there is an edge between two vertices if the corresponding sets are disjoint. We identify the vertex set of K(2k + 1, k) with the set {x \u2208 {0, 1}2k+1 : ||x||1 = k}, where ||x||1 = \u22112k+1 i=1 xi denotes the 1-norm. Note that there is an edge between x and x\n\u2032 if and only if \u27e8x, x\u2032\u27e9 = 0, where \u27e8\u00b7, \u00b7\u27e9 denotes the inner product.\nDefinition 4.4 (Kneser). The Kneser problem of local optimization on an odd Kneser graph is defined as the following basic PLS problem. An instance of the Kneser problem consists of a boolean circuit C with 2k + 1 input nodes for some k \u2208 N. The set of feasible solutions is FC = {x \u2208 {0, 1}2k+1 : ||x||1 = k}, and the neighborhood of some x \u2208 FC is given by NC(x) = {x\u2032 \u2208 FC : \u27e8x, x\u2032\u27e9 = 0}. The goal is to find a solution that is a local maximum with respect to the objective function C(x) = \u2211m\u22121 i=0 yi \u00b7 2i, where y0, . . . , ym\u22121 denote the output nodes of the circuit C.\nLemma 5. Kneser reduces to Identical-EFX with two identical submodular agents.\nProof. Our proof of this lemma closely follows the corresponding proof of Plaut and Roughgarden [2020, Theorem 3.1], with some minor modifications due to the different computational model. First, we describe the map f taking instances C of Kneser to instances of Identical-EFX. We consider a valuation on subsets of [2k + 1] given by\nv(X) =  2|X| if |X| < k 2k \u2212 2\u2212C(X) if |X| = k 2k if |X| > k\nUsing the description of the circuit C, we may in polynomial time construct a boolean circuit computing v. This valuation may take non-integer values, but this can be fixed by scaling by a larger power of 2. Scaling will not change anything in the arguments below. We now define f(C) = ([2], [2k + 1], v). That is, the Kneser instance C is mapped to an Identical-EFX instance with 2k + 1 goods and with two agents sharing the same valuation v.\nWe note that 2\u2212C(X) \u2208 (0, 1], because C takes values in the natural numbers. This ensures that the valuation v is monotone, because v(S) is seen to be non-decreasing in |S|. Therefore, the only optimal solutions of f(C) are EFX allocations (X1, X2). Note by inspection of v that if (X1, X2) is EFX, then |X1| = k and |X2| = k + 1 (or |X1| = k + 1 and |X2| = k). If we are in the first case then X1 corresponds to a feasible solution of the Kneser instance C. Also any neighbor of X1 in the Kneser graph is of the form X2 \\ {g} for some g \u2208 X2. As (X1, X2) is EFX we have that\n2k \u2212 2\u2212C(X1) = v(X1) \u2265 v(X2 \\ {g}) = 2k \u2212 2\u2212C(X2\\{g})\nimplying that C(X1) \u2265 C(X2 \\ {g}) for all g \u2208 X2. We conclude that X1 is a local maximum for the instance of Kneser given by the circuit C. Similarly, when |X2| = k, X2 will be a local maximum. As a result, we can define the polynomial-time map g that maps solutions of the Identical-EFX instance to solutions of the Kneser-instance by\ng((X1, X2), C) = { X1 if |X1| = k X2 otherwise\nBy the discussion above it follows that if (X1, X2) is a solution to the Identical-EFX instance, then g((X1, X2), C) is an optimal solution to the Kneser-instance. Therefore, the pair (f, g) constitutes a reduction from Kneser to Identical-EFX.\nFinally, we show that v is submodular. For any X \u2286 [2k + 1] and x /\u2208 X we have that\nv(X \u222a {x})\u2212 v(X) =  2 if |X| < k \u2212 1 2\u2212 2\u2212C(X\u222a{x}) if |X| = k \u2212 1 2\u2212C(X) if |X| = k 0 if |X| > k\nUsing that 2\u2212C(X) \u2208 (0, 1], this shows that v(X \u222a {x})\u2212 v(X) is non-increasing in |X|. Thus, if Y \u2286 X and x /\u2208 X, we have that v(X \u222a {x})\u2212 v(X) \u2264 v(Y \u222a {x})\u2212 v(Y ), meaning that v is submodular.\n4.2.2 Flip \u2264 Kneser\nJohnson et al. [1988] introduced the computational problem Flip and proved that it is PLScomplete. We will now reduce from Flip to Kneser to show that Kneser, and thus IdenticalEFX, are PLS-hard. In particular, this also establishes the PLS-completeness of Kneser, which might be of independent interest.\nDefinition 4.5 (Flip). The Flip problem is the following basic PLS problem. The instances of Flip are boolean circuits. For an instance C with n input nodes x0, . . . , xn\u22121 and m output nodes y0, . . . , ym\u22121, the set of feasible solutions is all the possible inputs to the circuit: FC = {0, 1}n. For any x \u2208 {0, 1}n, the neighborhood is all the inputs that can be obtained from x by flipping one bit: NC(x) = {x\u2032 \u2208 {0, 1}n : \u2206(x, x\u2032) = 1} where \u2206(\u00b7, \u00b7) denotes the Hamming distance. The goal is to find a solution that is locally minimal with respect to the objective function defined by C(x) = \u2211m\u22121 i=0 yi \u00b7 2i.\nLemma 6. Flip reduces to Kneser.\nProof. We construct a reduction from Flip to the minimization version of Kneser. The minimization version of Kneser is seen to be equivalent to its maximization version by negating the output nodes of the original circuit. Let CF be an instance of Flip. Denote by p = poly(|CF |) the length of the feasible solutions of CF . The map of instances f now takes CF to an instance CK of the Kneser-problem whose feasible solutions are FK = {x \u2208 {0, 1}2p+1 : ||x||1 = p}. A typical feasible solution will be written as s = uvb where u, v \u2208 {0, 1}p and b \u2208 {0, 1}. We will use the notation u to denote the bitwise negation of u \u2208 {0, 1}p. The circuit CK is defined as follows:\n1. CK(uu0) = 2 \u00b7 CF (u),\n2. CK(uv1) = 2 \u00b7min(CF (u), CF (v)) + 1 if \u2206(u, v) = 1,\n3. CK(uvb) = M +\u2206(u, v) otherwise.\nHere M denotes a number chosen to be sufficiently large so that it dominates any cost 2 \u00b7CF (w). Note that the circuit CK is well-defined and that it can be constructed in polynomial time given the circuit CF . At a high level, the definition of the cost of a vertex of the third type is meant to ensure that for any such vertex uvb, there is a sequence of neighbors with decreasing costs that ends in a vertex of the form uu0. The costs of the first and second vertex types are then meant to ensure that for a vertex uu0, there is a sequence of neighbors with decreasing costs that ends in a vertex ww0 where w is an improving neighbor of u in the original Flip-instance.\nBelow we show that the only local minima of CK are of the form uu0 where u is a local minimum for CF . Therefore, upon defining the solution-mapping by g(uvb) = u we have that (f, g) is a reduction from Flip to Kneser.\nNo optimal solutions of type (3). If a feasible solution s = uvb is of type (3), then we claim that it must have a neighbor of lower cost. First of all, note that since s is not of type (1) or (2), and since ||s||1 = p, it follows that \u2206(u, v) \u2265 2. Now, because \u2206(u, v) \u2265 2 > 0 and ||uv||1 \u2264 p, there must exist an i such that ui = vi = 0. Otherwise one would find that ||uv||1 > p, which contradicts s being a feasible solution. Now, let s\u2032 = u\u2032v\u2032b\u2032, where u\u2032 = u, b\u2032 = b, and v\u2032j = vj for all j \u0338= i, but v\u2032i = vi = 0. We note that ||s\u2032||1 = ||s||1\u22121 = (p+1)\u22121 = p, so s\u2032 is a valid vertex in the Kneser graph. Further, we see that s\u2032 is a neighbor of s, because s\u2032jsj = 0 for all j. If s \u2032 is not of type (3), then it has lower cost than s by construction of CK and choice of M . Finally, if s\u2032 is of type (3), then the observation that \u2206(u\u2032, v\u2032) < \u2206(u, v) again yields that s\u2032 has lower cost than s.\nNo optimal solutions of type (2). Suppose s = uv1 is of type (2). As ||s||1 = p and \u2206(u, v) = 1, there is some i with vi = 0 and ui = 1, and vj = uj for j \u0338= i. This implies that\u2211\ni uivi = 0, and so both s \u2032 = uu0 and s\u2032\u2032 = vv0 are neighbors of s. Furthermore, by construction\nof CK , the cost of s \u2032 or of s\u2032\u2032 is strictly less than the cost of s.\nOptimal solutions. Consider a feasible solution of the form uu0. If u is not a local minimum for CF , then let w be an improving neighbor of u. As \u2206(u,w) = 1, there are now two cases to consider. If ui = 0 and wi = 1 for some i, then s\n\u2032 = wu1 is a type (2) neighbor of lower cost. If ui = 1 and wi = 0 for some i, then s\n\u2032 = uw1 is a type (2) neighbor of lower cost. Therefore, if uu0 is a local minimum for CK , then u is a local minimum for CF .\nCorollary 3. Let n \u2265 2 be an integer. Computing an EFX allocation for n identical agents with a submodular valuation function is PLS-hard.\nProof. By Theorem 4.2 it suffices to produce a reduction from the problem of computing an EFX allocation for two identical agents to the problem of computing an EFX allocation for n identical agents. We sketch this reduction. Let u : 2M \u2192 R denote the common submodular valuation function of the two agents. Construct an EFX-instance with n agents by adding n\u2212 2 agents and n\u2212 2 goods, M \u2032 = M \u222a {g1, . . . , gn\u22122}. Define the valuation function of the n agents to be u\u2032 = u+ v where u : 2M\n\u2032 \u2192 R is the extension of u given by u(S) = u(S \u2229M) and where v : 2M\n\u2032 \u2192 R is additive given by v({gi}) = u(M) + 1 for i = 1, . . . , n \u2212 2 and v({g}) = 0 for g \u2208 M . One may verify that u is submodular, and so that u\u2032 is the sum of two submodular valuations and therefore itself submodular.\nLet (X1, . . . , Xn) denote an EFX allocation of this instance. We claim that after permuting the bundles, we may assume that Xi+2 = {gi} for i = 1, . . . , n\u2212 2 and X1 \u222aX2 = M . At least one bundle, say X1, receives no good from {g1, . . . , gn\u22122}, and so u\u2032(X1) = u(X1) \u2264 u(M). Now suppose some other bundle Xi contains some good gj . If Xi contained another good g, then\nu\u2032(Xi \\ {g}) \u2265 u\u2032({gj}) = u(M) + 1 > u\u2032(X1),\ncontradicting (X1, . . . , Xn) being EFX. Hence, Xi = {gj}, and the claim follows. Now, one sees that (X1, X2) is an EFX allocation of the original two-agent instance."
        },
        {
            "heading": "Acknowledgements",
            "text": "We thank all the reviewers of SAGT 2023 for their comments and suggestions that improved the presentation of the paper. In particular, we thank one reviewer for pointing out that weakly well-layered valuations also generalize cancelable valuations.\nP.W.Goldberg was supported by a JP Morgan faculty award. K.H\u00f8gh was supported by the Independent Research Fund Denmark under grant no. 9040-00433B. Most of this work was done while he was visiting Oxford thanks to a STIBO IT Travel Grant. A.Hollender was supported by the Swiss State Secretariat for Education, Research and Innovation (SERI) under contract number MB22.00026."
        }
    ],
    "title": "The Frontier of Intractability for EFX with Two Agents",
    "year": 2023
}