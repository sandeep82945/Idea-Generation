{
    "abstractText": "Vector addition systems with states (VASS) are a popular model for concurrent systems. However, many decision problems have prohibitively high complexity. Therefore, it is sometimes useful to consider overapproximating semantics in which these problems can be decided more efficiently. We study an overapproximation, called monus semantics, that slightly relaxes the semantics of decrements: A key property of a vector addition systems is that in order to decrement a counter, this counter must have a positive value. In contrast, our semantics allows decrements of zero-valued counters: If such a transition is executed, the counter just remains zero. It turns out that if only a subset of transitions is used with monus semantics (and the others with classical semantics), then reachability is undecidable. However, we show that if monus semantics is used throughout, reachability remains decidable. In particular, we show that reachability for VASS with monus semantics is as hard as that of classical VASS (i.e. Ackermann-hard), while the zeroreachability and coverability are easier (i.e. EXPSPACE-complete and NP-complete, respectively). We provide a comprehensive account of the complexity of the general reachability problem, reachability of zero configurations, and coverability under monus semantics. We study these problems in general VASS, two-dimensional VASS, and one-dimensional VASS, with unary and binary counter updates. 2012 ACM Subject Classification Theory of computation \u2192 Concurrency",
    "authors": [
        {
            "affiliations": [],
            "name": "Pascal Baumann"
        },
        {
            "affiliations": [],
            "name": "Khushraj Madnani"
        },
        {
            "affiliations": [],
            "name": "Filip Mazowiecki"
        },
        {
            "affiliations": [],
            "name": "Georg Zetzsche"
        }
    ],
    "id": "SP:6f3b16e33d37a8cdba4ae08fe02c6974197b2b38",
    "references": [
        {
            "authors": [
                "Parosh Aziz Abdulla",
                "Karlis Cerans",
                "Bengt Jonsson",
                "Yih-Kuen Tsay"
            ],
            "title": "General decidability theorems for infinite-state systems",
            "venue": "In Proceedings, 11th Annual IEEE Symposium on Logic in Computer Science,",
            "year": 1996
        },
        {
            "authors": [
                "Shaull Almagor",
                "Nathann Cohen",
                "Guillermo A. P\u00e9rez",
                "Mahsa Shirmohammadi",
                "James Worrell"
            ],
            "title": "Coverability in 1-VASS with Disequality Tests",
            "venue": "31st International Conference on Concurrency Theory, CONCUR 2020,",
            "year": 2020
        },
        {
            "authors": [
                "Pascal Baumann",
                "Roland Meyer",
                "Georg Zetzsche"
            ],
            "title": "Regular Separability in B\u00fcchi VASS",
            "venue": "editors, 40th International Symposium on Theoretical Aspects of Computer Science (STACS 2023),",
            "year": 2023
        },
        {
            "authors": [
                "Michael Blondin"
            ],
            "title": "The ABCs of Petri net reachability relaxations",
            "venue": "ACM SIGLOG News,",
            "year": 2020
        },
        {
            "authors": [
                "Michael Blondin",
                "Matthias Englert",
                "Alain Finkel",
                "Stefan G\u00f6ller",
                "Christoph Haase",
                "Ranko Lazic",
                "Pierre McKenzie",
                "Patrick Totzke"
            ],
            "title": "The Reachability Problem for Two-Dimensional Vector Addition Systems with States",
            "venue": "J. ACM,",
            "year": 2021
        },
        {
            "authors": [
                "Michael Blondin",
                "Alain Finkel",
                "Christoph Haase",
                "Serge Haddad"
            ],
            "title": "Approaching the coverability problem continuously",
            "venue": "In Proc. 22nd International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS),",
            "year": 2016
        },
        {
            "authors": [
                "Michael Blondin",
                "Christoph Haase",
                "Philip Offtermatt"
            ],
            "title": "Directed reachability for infinitestate systems",
            "venue": "International Conference,",
            "year": 2021
        },
        {
            "authors": [
                "Wojciech Czerwinski",
                "Slawomir Lasota",
                "Ranko Lazic",
                "J\u00e9r\u00f4me Leroux",
                "Filip Mazowiecki"
            ],
            "title": "Reachability in fixed dimension vector addition systems with states",
            "venue": "31st International Conference on Concurrency Theory, CONCUR 2020,",
            "year": 2020
        },
        {
            "authors": [
                "Wojciech Czerwinski",
                "Lukasz Orlikowski"
            ],
            "title": "Reachability in vector addition systems is ackermann-complete",
            "venue": "IEEE Annual Symposium on Foundations of Computer Science,",
            "year": 2021
        },
        {
            "authors": [
                "Wojciech Czerwinski",
                "Lukasz Orlikowski"
            ],
            "title": "Lower bounds for the reachability problem in fixed dimensional vasses",
            "venue": "LICS \u201922: 37th Annual ACM/IEEE Symposium on Logic in Computer",
            "year": 2022
        },
        {
            "authors": [
                "St\u00e9phane Demri",
                "Marcin Jurdzinski",
                "Oded Lachish",
                "Ranko Lazic"
            ],
            "title": "The covering and boundedness problems for branching vector addition systems",
            "venue": "J. Comput. Syst. Sci.,",
            "year": 2013
        },
        {
            "authors": [
                "Alex Dixon",
                "Ranko Lazic"
            ],
            "title": "Kreach: A tool for reachability in petri nets",
            "venue": "26th International Conference,",
            "year": 2020
        },
        {
            "authors": [
                "Catherine Dufourd",
                "Alain Finkel",
                "Philippe Schnoebelen"
            ],
            "title": "Reset nets between decidability and undecidability",
            "venue": "Automata, Languages and Programming, 25th International Colloquium,",
            "year": 1998
        },
        {
            "authors": [
                "Matthias Englert",
                "Piotr Hofman",
                "Slawomir Lasota",
                "Ranko Lazic",
                "J\u00e9r\u00f4me Leroux",
                "Juliusz Straszynski"
            ],
            "title": "A lower bound for the coverability problem in acyclic pushdown VAS",
            "venue": "Inf. Process. Lett.,",
            "year": 2021
        },
        {
            "authors": [
                "Javier Esparza",
                "Rusl\u00e1n Ledesma-Garza",
                "Rupak Majumdar",
                "Philipp J. Meyer",
                "Filip Nik\u0161i\u0107"
            ],
            "title": "An SMT-based approach to coverability analysis",
            "venue": "In Proc. 26th International Conference on Computer Aided Verification (CAV),",
            "year": 2014
        },
        {
            "authors": [
                "John Fearnley",
                "Marcin Jurdzi\u0144ski"
            ],
            "title": "Reachability in Two-Clock Timed Automata Is PSPACEComplete",
            "year": 2013
        },
        {
            "authors": [
                "John Fearnley",
                "Marcin Jurdzinski"
            ],
            "title": "Reachability in two-clock timed automata is pspacecomplete",
            "venue": "Automata, Languages, and Programming - 40th International Colloquium,",
            "year": 2013
        },
        {
            "authors": [
                "Diego Figueira",
                "Ranko Lazic",
                "J\u00e9r\u00f4me Leroux",
                "Filip Mazowiecki",
                "Gr\u00e9goire Sutre"
            ],
            "title": "Polynomialspace completeness of reachability for succinct branching VASS in dimension one",
            "venue": "44th International Colloquium on Automata, Languages, and Programming,",
            "year": 2017
        },
        {
            "authors": [
                "Alain Finkel",
                "Philippe Schnoebelen"
            ],
            "title": "Well-structured transition systems everywhere",
            "venue": "Theor. Comput. Sci.,",
            "year": 2001
        },
        {
            "authors": [
                "Est\u00edbaliz Fraca",
                "Serge Haddad"
            ],
            "title": "Complexity analysis of continuous Petri nets",
            "venue": "Fundamenta Informaticae,",
            "year": 2015
        },
        {
            "authors": [
                "Moses Ganardi",
                "Rupak Majumdar",
                "Andreas Pavlogiannis",
                "Lia Sch\u00fctze",
                "Georg Zetzsche"
            ],
            "title": "Reachability in bidirected pushdown VASS",
            "venue": "49th International Colloquium on Automata, Languages, and Programming,",
            "year": 2022
        },
        {
            "authors": [
                "Steven M. German",
                "A. Prasad Sistla"
            ],
            "title": "Reasoning about systems with many processes",
            "venue": "J. ACM,",
            "year": 1992
        },
        {
            "authors": [
                "Stefan G\u00f6ller",
                "Christoph Haase",
                "Ranko Lazic",
                "Patrick Totzke"
            ],
            "title": "A polynomial-time algorithm for reachability in branching VASS in dimension one",
            "venue": "43rd International Colloquium on Automata, Languages, and Programming,",
            "year": 2016
        },
        {
            "authors": [
                "Eitan M. Gurari",
                "Oscar H. Ibarra"
            ],
            "title": "The complexity of decision problems for finite-turn multicounter machines",
            "venue": "J. Comput. Syst. Sci.,",
            "year": 1981
        },
        {
            "authors": [
                "Christoph Haase",
                "Simon Halfon"
            ],
            "title": "Integer vector addition systems with states",
            "venue": "Reachability Problems - 8th International Workshop,",
            "year": 2014
        },
        {
            "authors": [
                "Christoph Haase",
                "Stephan Kreutzer",
                "Jo\u00ebl Ouaknine",
                "James Worrell"
            ],
            "title": "Reachability in succinct and parametric one-counter automata",
            "venue": "CONCUR 2009 - Concurrency Theory, 20th International Conference,",
            "year": 2009
        },
        {
            "authors": [
                "John Hopcroft",
                "Jean-Jacques Pansiot"
            ],
            "title": "On the reachability problem for 5-dimensional vector addition systems",
            "venue": "Theoretical Computer Science,",
            "year": 1979
        },
        {
            "authors": [
                "Eryk Kopczynski"
            ],
            "title": "Complexity of problems of commutative grammars",
            "venue": "Log. Methods Comput. Sci.,",
            "year": 2015
        },
        {
            "authors": [
                "J\u00e9r\u00f4me Leroux"
            ],
            "title": "The reachability problem for petri nets is not primitive recursive",
            "venue": "IEEE Annual Symposium on Foundations of Computer Science,",
            "year": 2021
        },
        {
            "authors": [
                "J\u00e9r\u00f4me Leroux",
                "Sylvain Schmitz"
            ],
            "title": "Reachability in vector addition systems is primitiverecursive in fixed dimension",
            "venue": "In 34th Annual ACM/IEEE Symposium on Logic in Computer Science,",
            "year": 2019
        },
        {
            "authors": [
                "J\u00e9r\u00f4me Leroux",
                "Gr\u00e9goire Sutre"
            ],
            "title": "Reachability in Two-Dimensional Vector Addition Systems with States: One Test Is for Free",
            "venue": "31st International Conference on Concurrency Theory (CONCUR 2020),",
            "year": 2020
        },
        {
            "authors": [
                "J\u00e9r\u00f4me Leroux",
                "Gr\u00e9goire Sutre",
                "Patrick Totzke"
            ],
            "title": "On the coverability problem for pushdown vector addition systems in one dimension",
            "venue": "Automata, Languages, and Programming - 42nd International Colloquium,",
            "year": 2015
        },
        {
            "authors": [
                "Richard Lipton"
            ],
            "title": "The reachability problem is exponential-space hard",
            "venue": "Yale University, Department of Computer Science, Report,",
            "year": 1976
        },
        {
            "authors": [
                "Filip Mazowiecki",
                "Henry Sinclair-Banks",
                "Karol W\u0119grzycki"
            ],
            "title": "Coverability in 2-vass with one unary counter is in np",
            "venue": "Foundations of Software Science and Computation Structures,",
            "year": 2023
        },
        {
            "authors": [
                "Charles Rackoff"
            ],
            "title": "The covering and boundedness problems for vector addition systems",
            "venue": "Theoretical Computer Science,",
            "year": 1978
        },
        {
            "authors": [
                "Louis E Rosier",
                "Hsu-Chun Yen"
            ],
            "title": "A multiparameter analysis of the boundedness problem for vector addition systems",
            "venue": "Journal of Computer and System Sciences,",
            "year": 1986
        },
        {
            "authors": [
                "Sylvain Schmitz"
            ],
            "title": "The complexity of reachability in vector addition systems",
            "venue": "ACM SIGLOG News,",
            "year": 2016
        },
        {
            "authors": [
                "Leslie G. Valiant",
                "Mike Paterson"
            ],
            "title": "Deterministic one-counter automata",
            "venue": "J. Comput. Syst. Sci.,",
            "year": 1975
        },
        {
            "authors": [
                "Wil M.P. van der Aalst"
            ],
            "title": "Verification of workflow nets",
            "venue": "In Proc. 18th International Conference on Application and Theory of Petri Nets (ICATPN),",
            "year": 1997
        }
    ],
    "sections": [
        {
            "text": "We study an overapproximation, called monus semantics, that slightly relaxes the semantics of decrements: A key property of a vector addition systems is that in order to decrement a counter, this counter must have a positive value. In contrast, our semantics allows decrements of zero-valued counters: If such a transition is executed, the counter just remains zero.\nIt turns out that if only a subset of transitions is used with monus semantics (and the others with classical semantics), then reachability is undecidable. However, we show that if monus semantics is used throughout, reachability remains decidable. In particular, we show that reachability for VASS with monus semantics is as hard as that of classical VASS (i.e. Ackermann-hard), while the zeroreachability and coverability are easier (i.e. EXPSPACE-complete and NP-complete, respectively). We provide a comprehensive account of the complexity of the general reachability problem, reachability of zero configurations, and coverability under monus semantics. We study these problems in general VASS, two-dimensional VASS, and one-dimensional VASS, with unary and binary counter updates.\n2012 ACM Subject Classification Theory of computation \u2192 Concurrency\nKeywords and phrases Vector addition systems, Overapproximation, Reachability, Coverability\nDigital Object Identifier 10.4230/LIPIcs.CONCUR.2023.10\nFunding Filip Mazowiecki: Supported by the ERC grant INFSYS, agreement no. 950398.\nAcknowledgements The authors are grateful to Wojciech Czerwi\u0144ski and Sylvain Schmitz for discussions, and to Sylvain Schmitz for suggesting the term \u2019monus\u2019.\n1 Introduction\nVector addition systems with states (VASS) are an established model used in formal verification with a wide range of applications, e.g. in concurrent systems [22], business processes [39] and others (see the survey [37]). They are finite automata with transitions labeled by vectors over integers in some fixed dimension d. A configuration of a VASS consists of a pair (p,v), denoted p(v), where p is a state and v is a vector in Nd. As a result of applying a transition labeled by some z \u2208 Zd, the vector in the resulting configuration is v + z. Thus in particular v + z \u2265 0 must hold for the transition to be applicable. The latter requirement is often called the VASS semantics. To avoid ambiguity we will refer to it as the classical VASS semantics.\nThe VASS model is also studied with other semantics. One of the most natural variants of VASS semantics is the integer semantics (or simply Z-semantics), where configurations are of\n\u00a9 Pascal Baumann, Khushraj Madnani, Filip Mazowiecki, and Georg Zetzsche; licensed under Creative Commons License CC-BY 4.0\n34th International Conference on Concurrency Theory (CONCUR 2023). Editors: Guillermo A. P\u00e9rez and Jean-Fran\u00e7ois Raskin; Article No. 10; pp. 10:1\u201310:23\nLeibniz International Proceedings in Informatics Schloss Dagstuhl \u2013 Leibniz-Zentrum f\u00fcr Informatik, Dagstuhl Publishing, Germany\nar X\niv :2\n30 8.\n14 92\n6v 2\n[ cs\n.L O\n] 1\n2 Se\np 20\n23\np(0, 4) are of the form p(0, 4 + 2n).\nthe form p(v), where v \u2208 Zd [25]. There, a transition can always be applied, i.e. the resulting configuration is v + z and we do not require v + z \u2265 0. In this paper we consider VASS with the monus semantics, whose behavior partly resembles both classical and integer semantics. There, a transition can always be applied (as in Z-semantics), however, if as a result the vector in the new configuration would have negative entries, then these are replaced with 0. Thus, vectors in configurations are over the naturals (as in classical semantics). The name monus semantics comes from the monus binary operator, which is a variant of the minus operator.1 Note that every instance of a VASS can be considered with all three semantics. See Figure 1 for an example.\nWe study classical decision problems for VASS: reachability and coverability. The input for these problems is a VASS V , an initial configuration p(v), and a final configuration q(w). The reachability problem asks whether there is a run from p(v) to q(w). A variant of this problem, called zero reachability, requires additionally that in the input the final vector is fixed to w = 0. The coverability problem asks whether there is a run from p(v) to q(w\u2032), where w\u2032 \u2265 w. Note that all three problems can be considered with respect to any of the three VASS semantics. As an example consider the VASS in Figure 1. Then for all three semantics p(1, 2) is both reachable and coverable from p(2, 0); and p(0, 2) is not reachable from p(2, 0) (but it is coverable as (1, 2) \u2265 (0, 2)).\nContribution I: Arbitrary dimension. Our first contribution is settling the complexities of reachability and coverability for VASS with the monus semantics (see Table 1). We prove that reachability is Ackermann-complete by showing that it is inter-reducible with classical VASS reachability, which is known to be Ackermann-complete [30, 9, 29]. This comes as a surprise, since in monus semantics, every transition can always be applied, just like in Z-semantics, where reachability is merely NP-complete [25]. Thus, the monus operation encodes enough information in the resulting configuration that reachability remains extremely hard.\nThe Ackermann-hardness relies crucially on the fact that the final configuration is non-zero: We also show that the zero reachability problem is EXPSPACE-complete in monus semantics. This uses inter-reducibility with classical VASS coverability, which is EXPSPACE-complete due to seminal results of Lipton and Rackoff [33, 35]. The fact that zero-reachability is significantly easier than general reachability is in contrast to classical semantics, where zero\n1 One can also think that monus semantics is integer semantics, where after every step we apply the ReLU function.\nreachability is interreducible with the reachability problem (intuitively, one can modify the input VASS by adding an extra edge that decrements by w).\nIn another unexpected result, the complexity of coverability drops even more: We prove that it is NP-complete in monus semantics. We complete these results by showing that mixing classical and monus semantics (i.e. each transition is designated to either work in classical or monus semantics) makes reachability undecidable.\nContribution II: Fixed dimension. Understanding the complexity of reachability problems in VASS of fixed dimension has received a lot of attention in recent years and is now well understood. This motivates our second contribution: An almost complete complexity analysis of reachability, zero reachability and coverability for VASS with the monus semantics in dimensions 1 and 2. Here, the complexity depends on whether the counter updates are encoded in unary or binary (see Table 1).\nWe restrict our attention to dimensions 1 and 2 as most research in fixed dimension for the classical semantics. For the classical semantics not much is known about reachability in dimension d \u2265 3. Essentially, the only known results consist of an upper bound of F7 that follows from the Ackermann upper bound in the general case [30], and a PSPACE-lower bound that holds already for d = 2 [5]. An intuition as to why the jump from 2 to 3 is so difficult is provided already by Hopcroft and Pansiot [27] who prove that the reachability set is always semilinear in dimension 2, and show an example that this is not the case in dimension 3. In contrast, coverability is well understood, and already Rackoff\u2019s construction [35] shows that for fixed dimension d \u2265 2 coverability is in NL and in PSPACE, for unary and binary encoding, respectively (with matching lower bounds [5]).\nKey technical ideas The core insights of our paper are characterizations of the reachability and coverability relations in monus semantics, in terms of reachability and coverability in classical and Z-semantics (Propositions 3.6 and 3.12 and Lemma 3.10). These allow us to apply a range of techniques to reduce reachability problems for one semantics into problems for other semantics, and thereby transfer existing complexity results. There are three cases where we were unable to ascertain the exact complexity: (i) reachability in 2-VASS with unary counter updates, (ii) zero reachability in 1-VASS with binary updates, and (iii) coverability in 1-VASS with binary counter updates. Concerning (i), this is because for 2-VASS with unary updates, it is known that classical reachability is NL-complete [5], but we would need to decide existence of a run that visits intermediate configurations of a certain shape. In the case of 2-VASS with binary updates, the methods from [5] (with a slight extension from [3]) allow this. The other cases, (ii) and (iii), are quite similar to each other. In particular, problem (ii) is logspace-interreducible with classical coverability in 1-VASS with binary updates, for which only an NL lower bound and an NC2 upper bound are known [2].\nMonus semantics as an overapproximation. Recall the example in Figure 1. Notice that every configuration reachable in the classical semantics is also reachable in the integer and monus semantics. It is not hard to see that this is true for every VASS model. Such semantics are called overapproximations of the classical VASS semantics. Overapproximations are a standard technique used in implementations of complex problems, in particular for the VASS model (see the survey [4]). They allow to prune the search space of reachable configurations, based on the observation that if a configuration is not reachable by an overapproximation then it cannot be reachable in the classical semantics. This is the core idea behind efficient implementations both of the coverability problem [15, 6] and the reachability problem [12, 7].\nCONCUR 2023\nThe two most popular overapproximations, integer semantics [25] and continuous semantics [20], behave similarly for both reachability and coverability problems, namely both problems are NP-complete. Note that all of the implementations mentioned above rely on such algorithms in NP as they can be efficiently implemented via SMT solvers. Interestingly, the monus semantics is an efficient overapproximation only for the coverability problem. (As far as we know this is the first study of a VASS overapproximation with this property.) Therefore, it seems to be a promising approach to try to speed up backward search algorithms using monus semantics (in the same vein as [6]). Whether this leads to improvements in practice remains to be seen in future work.\nRelated work. We discuss related work for VASS in classical semantics. A lot of research is dedicated to reachability for the flat VASS model, i.e. a model that does not allow for nested cycles in runs. In dimension 2 decision problems for VASS reduce to flat VASS, which is crucial to obtain the exact complexities [5]. It is known that in dimensions d \u2265 3 such a reduction is not possible, but this raised natural questions of the complexity for flat VASS in higher dimensions [8, 10]. Another research direction is treating the counters in VASS models asymmetrically. For example, it is known that allowing for zero tests in VASS makes reachability and coverability undecidable (they essentially become Minsky machines). However, it was shown that if only one of the 2 counters is allowed to be zero tested then both reachability and coverability remain PSPACE-complete [31]. A different asymmetric question is when one counter is encoded in binary and the other is encoded in unary. Then recently it was shown that coverability is in NP [34] but it is unknown whether there is a matching lower bound. Finally, there are two important extensions of the VASS model: branching VASS (where runs are trees, not paths), and pushdown VASS (with one pushdown stack). For branching VASS, coverability is 2EXPTIME-complete [11]. The complexity of reachability is well understood in dimension 1 [23, 18] but in dimension 2 or higher it is unknown whether it is decidable. For pushdown VASS only coverability in dimension 1 is known to be decidable [32], otherwise decidability of both reachability and coverability remain open problems. Recently some progress was made on restricted pushdown VASS models [14, 21]. The monus semantics is a natural overapproximation that can be studied in all of these variants. Finally, let us mention that VASS with monus semantics fit into the very general framework of G-nets [13], but does not seem to fall into any of the decidable subclasses studied in [13]. However, if we equip VASS with with the usual well-quasi ordering on configurations, it is easy to see that even with monus semantics, they constitute well-structured transition systems (WSTS) [19, 1], which makes available various algorithmic techniques developed for WSTS.\nOrganization. In Section 2 we formally define the VASS model and the classical, integer and monus semantics. In Section 3 we prove the results in arbitrary dimension. Then in Section 4 and Section 5 we prove the results in dimension 2 and 1, respectively.\n2 Vector addition systems with monus semantics: Main results\nGiven a vector v \u2208 Zd we write v[i] for the value in the i-th coordinate, where i \u2208 {1, . . . , d}. We also refer to i as the i-th counter and write that it contains v[i] tokens. Given two vectors v and v\u2032 we write v \u2265 v\u2032 if v[i] \u2265 v\u2032[i] for all i = 1, . . . , d. By 0d we denote the zero vector in dimension d. We also simply write 0 if d is clear from context.\nVector addition systems with states. A vector addition system with states (VASS) is a triple V = (d,Q,\u2206), where d \u2208 N, Q is a finite set of states and \u2206 \u2286 Q\u00d7 Zd \u00d7Q is a finite set of transitions. Throughout the paper we fix a VASS V = (d,Q,\u2206).\nWe start with the formal definitions in the classical semantics. A configuration of a VASS is a pair p(v) \u2208 Q \u00d7 Nd, denoted p(v). Any transition t \u2208 \u2206 induces a successor (partial) function Succt : Q \u00d7 Nd \u2192 Q \u00d7 Nd such that Succt(q(v)) = q\u2032(v\u2032) iff t = (q, z, q\u2032) and v\u2032 = v + z. This successor function can be lifted up to \u2206 to get a step relation \u2192V , such that any pair of configuration C \u2192V C \u2032 iff there exists t \u2208 \u2206 with Succt(C) = C \u2032. A run is a sequence of configurations\nq0(v0), q1(v1), q2(v2), . . . , qk(vk)\nsuch that for every 0 < j \u2264 k, qj\u22121(vj\u22121) \u2192V qj(vj). If there exists such a run we say that qk(vk) is reachable from q0(v0) and denote it C0 \u2217\u2212\u2192V Ck. We call \u2217\u2212\u2192V the reachability relation in the classical VASS semantics. In this paper we consider two additional semantics. The first is called the integer semantics (or Z-semantics). A configuration in this semantics is a pair p(v) \u2208 Q\u00d7 Zd (hence, values of vector coordinates can drop below zero). The definitions of successor function, step relation and run are analogous as for the classical semantics. By \u2192\nZ V and \u2217\u2192 Z\nV , we denote the step and reachability relations in the Z-semantics, respectively.\nThe second is called monus semantics. The configurations are the same as in the classical semantics. The difference is in the successor function. Every transition t \u2208 \u2206 induces a successor function Succt : Q\u00d7 Nd \u2192 Q\u00d7 Nd as follows: Succt(q(v)) = q\u2032(v\u2032) iff t = (q, z, q\u2032) and for all j \u2208 {1, 2, . . . d}, v\u2032[j] = max(v[j] + z[j], 0). We write in short v\u2032 = max(v + z,0). Step relation and runs are defined analogously as in the case of classical semantics. By \u21d2V and \u2217=\u21d2V , we denote the step and reachability relations in the monus semantics, respectively.\nWe drop the subscript V from the above relations when the VASS is clear from context. We write that a run is a classical run, a Z run or a monus run to emphasize the considered semantics. An example highlighting the differences between the three semantics is in Figure 1.\nDecision problems. We study the following decision problems for VASS.\nThe classical reachability problem: Given A VASS V = (d,Q,\u2206) and two configurations p(v) and q(w). Question Does p(v) \u2217=\u21d2 q(w) hold?\nThe classical zero reachability problem: Given A VASS V = (d,Q,\u2206), a configuration p(v) and a state q. Question Does (p,v) \u2217=\u21d2 q(0d) hold?\nThe classical coverability problem: Given A VASS V = (d,Q,\u2206) and two configurations p(v) and q(w). Question Does p(v) \u2217=\u21d2 q(w\u2032) hold for some w\u2032 \u2265 w?\nSimilarly, the above problems in Z and classical semantics are defined by replacing \u2217=\u21d2\nwith \u2217\u2192 Z and \u2217\u2212\u2192, respectively.\nCONCUR 2023\nconditional jump: p q\nr\n(\u22121, 0, 0 , 0)\n(\u22121, 0, \u22121, 0)\nincrement: p q(1, 0, 1, 0)\nFigure 2 Two gadgets for realizing a zero-testable counter.\nMain results The main complexity results of this work are summarized in Table 1. In Table 2, we recall complexity results for VASS with classical semantics for comparison. We do not split the cases of unary and binary encoding for arbitrary dimensions, since there all lower bounds work for unary, whereas all upper bounds work for binary.\nConcerning the reachability problem, we note that in all cases where we obtain the exact complexity, it is the same as for the classical VASS semantics. For the other decision problems, there are stark differences: First, while in the classical semantics, zero reachability is easily inter-reducible with general reachability, in the monus semantics, its complexity drops in two cases: In 1-VASS with binary counter updates, monus zero reachability is in NC2 (thus polynomial time), compared to NP in the classical setting. Moreover, in arbitrary dimension, monus zero reachability is EXPSPACE-complete, compared to Ackermann in the classical semantics. For the coverability problem, the monus semantics also lowers the complexity in two cases: For binary encoded 2-VASS (NP in monus semantics, PSPACE in classical) and in the general case (NP in monus semantics, EXPSPACE in classical semantics).\nUndecidability To stress the subtle effects of monus semantics, we mention that it leads to undecidability if combined with classical semantics: If one can specify the applied semantics (classical vs. monus) for each transition, then (zero) reachability becomes undecidable.\nWe sketch the proof using Figure 2. It shows two gadgets, where \u201c\u2192\u201d transitions use classical semantics and \u201c\u21d2\u201d transitions use monus semantics. The two gadgets realize a counter with zero test: The left gadget is a conditional jump (\u201cif zero, then go to q, otherwise decrement and go to r\u201d), whereas the right gadget is just an increment. In intended runs (i.e. where the left gadget always takes the intended transition), the counter value is stored both in components 1 and 3. (To realize a full two-counter machine, the same gadgets on components 2 and 4 realize the other testable counter.) Thus, initially, all components are zero. Note that if the left gadget always takes the transitions as intended, then the first and third counter will remain equal. If the gadget takes the upper transition when the counter is not actually zero, then the first counter becomes smaller than the third, and will then always stay smaller. Hence, to reach (0, 0, 0, 0), the left gadget must always behave as intended.\nHowever, coverability remains decidable if we can specify the semantics of each transition. Indeed, suppose we order the configurations of a VASS by the usual well-quasi ordering (i.e. the control states have to agree, and the counter values are ordered component-wise). Then it is easy to see that this results in a well-structured transition system (WSTS) [19, 1]. This also implies, e.g. that termination is decidable in this general setting.\n3 Arbitrary dimension\nIn this section, we prove the complexity results concerning VASS with arbitrary dimension. This will include the characterizations of monus reachability, monus zero reachability, and monus coverability in terms of classical and Z-semantics. We begin with some terminology.\nDimension & encoding Monus Reachability Monus zero reachability Monus coverability\n1-dim, unary NL-complete NL-complete NL-complete 1-dim, binary NP-complete in NC2 in NC2\n2-dim, unary in PSPACE NL-complete NL-complete 2-dim, binary PSPACE-complete PSPACE-complete NP-complete arbitrary Ack-complete EXPSPACE-complete NP-complete\nTable 1 Complexity results shown in this work.\nDimension & encoding Reachability Zero reachability Coverability\n1-dim, unary NL-complete [38] NL-complete [38] NL-complete [38] 1-dim, binary NP-complete [26] NP-complete [26] in NC2 [2] 2-dim, unary NL-complete [5] NL-complete [5] NL-complete [36] 2-dim, binary PSPACE-complete [5] PSPACE-complete [5] PSPACE-complete [5, 36, 16] arbitrary Ack-compl. [30, 29, 9] Ack-compl. [30, 29, 9] EXPSPACE-compl. [33, 35]\nTable 2 Known complexities for classical VASS semantics, for comparison.\nPaths. A sequence of transitions (p1, z1, q1), . . . , (pk, zk, qk) is valid iff qi = pi+1 for every 1 \u2264 i < k\u2212 1. Furthermore, we say that it is valid from a given configuration (p,v) if p = p0. We call a valid sequence of transitions a path.\nGiven two paths \u03c11 and \u03c12 if the last state of \u03c11 is equal to the first state of \u03c12 then by \u03c1 = \u03c11\u03c12 we denote the path defined as the sequence \u03c11 followed by the sequence \u03c12. Similarly, we use this notation with more paths, e.g. \u03c1 = \u03c11\u03c12 . . . \u03c1k means that the path \u03c1 is composed from k paths: \u03c11, . . . \u03c1k.\nFix a path \u03c1 = (p0, z0, p1), . . . , (pk\u22121, zk\u22121, pk). We say that z = \u2211k\u22121\ni=0 zi is the effect of the path \u03c1. Notice that while for classical and Z-semantics the effect of a path can be computed by subtracting the vectors in the last and first configurations, this is not necessarily true for monus semantics. In Figure 1 consider the path \u03c1 = t, t, t. The effect is (\u22123, 6). In the Z-semantics (2, 0) \u2217\u2192\nZ (\u22121, 6) and the difference (\u22121, 6) \u2212 (2, 0) is precisely the effect of \u03c1.\nIn the monus semantics it is not the case as (2, 0) \u2217=\u21d2 (0, 6). This is because a run in monus semantics can lose some decrements, unlike in classical and Z-semantics.\n\u25b6 Remark 3.1. Observe that every classical and Z run defines a unique path from the initial configuration. For monus semantics uniqueness is not guaranteed as it is possible that a run induces more than one path. Indeed, suppose p(2, 0) \u21d2 q(1, 0). This could be realised by any transition of the form (p, (\u22121, z), q), where z \u2264 0. Conversely, a path induces a unique run for Z and monus semantics. Formally, consider a path (p0, z1, p1), . . . , (pk\u22121, zk, pk) from a configuration s(v). Then, in the Z and monus semantics there exists a unique corresponding run. In the classical semantics a path might be blocked if a counter drops below zero (see e.g. Figure 1). We write p0(v0)\n\u03c1\u2212\u2192 pk(vk), p0(v0) \u03c1\u2192 Z pk(vk) and p0(v0) \u03c1=\u21d2 pk(vk) if p0(v0), . . . , pk(vk) is a run in classical, integer and monus semantics, respectively. Recall that for classical and Z-semantics vi+1 \u2212 vi = zi, and for monus semantics vi+1 = max(vi + zi,0).\nCONCUR 2023\nConsider a run R = p0(v0), . . . , pk(vk) (in any semantics). We say that the counter j \u2208 {1, \u00b7 \u00b7 \u00b7 , d} hits 0 iff vi[j] = 0 for some 1 \u2264 i \u2264 k. Similarly, we say that the counter j \u2208 {1, \u00b7 \u00b7 \u00b7 , d} goes negative in R iff vi[j] < 0 for some 0 \u2264 i \u2264 k (this can happen only in the Z-semantics).\nLet \u03c1 = (p0, z0, p1) . . . (pk\u22121, zk\u22121, pk) be a path such that R is the unique run corresponding to \u03c1 from the initial configuration p0(v0). We say that (\u03c1,R) or p0(v0)\n\u03c1=\u21d2 pk(vk) is lossy for the counter j \u2208 {1, \u00b7 \u00b7 \u00b7 , d} iff vi[j] \u2212 vi\u22121[j] \u0338= zi\u22121[j] for some 1 \u2264 i \u2264 k (a lossy run can happen only in the monus semantics).\n\u25b6 Remark 3.2. Integer and monus semantics are overapproximations of the classical semantics. That is, s(v) \u03c1\u2212\u2192 t(w) implies s(v) \u03c1\u2192\nZ t(w) and s(v) \u03c1=\u21d2 t(w). The converse is not always the\ncase (see Figure 1). Moreover, s(v) \u03c1=\u21d2 t(w) implies s(v) \u03c1\u2212\u2192 t(w) if s(v) \u03c1=\u21d2 t(w) is not lossy.\nNotice that if in s(v) \u03c1=\u21d2 t(w), none of the counters j \u2208 {1, . . . , d} hits 0 then it is not a lossy\nrun. Similarly, s(v) \u03c1\u2192 Z t(w) implies s(v) \u03c1\u2212\u2192 t(w) if, in the former run, none of the counters j \u2208 {1, . . . , d} goes negative.\nCharacterizing Monus Reachability. Our first goal is to characterize the reachability problem for the monus semantics in terms of the classical semantics. We start with some propositions that relate monus runs to Z runs and classical runs. Let \u03c1 be a path and s0(v0) a configuration. Let s0(v0) . . . sk(vk) be the unique Z run defined by \u03c1 and s0(v0). We define the vector m = minZ(\u03c1, s0,v0) by m[i] = min(minkj=0 vj [i], 0). Intuitively, it is the vector of minimal values in the Z run, but note that m \u2264 0.\nFor the next two propositions we fix a configuration s0(v0) \u2208 Q \u00d7 Nd, a path \u03c1 = (s0, z0, s1) . . . (sk\u22121, zk\u22121, sk), and m = minZ(\u03c1, s0,v0).\n\u25b6 Proposition 3.3. Consider the unique runs induced by \u03c1 from s0(v0) in Z-semantics\ns0(v0), . . . , sk\u22121(vk\u22121), sk(vk),\nand in monus semantics\ns0(v\u20320), . . . , sk\u22121(v\u2032k\u22121), sk(v\u2032k).\nwhere v\u20320 = v0. Then v\u2032k = vk \u2212 m.\nProof (sketch). We analyse the behavior of every counter j. Recall that the Z run and the monus run have the same value in the counter j until the first time the value of j becomes negative in the Z run. We denote this as vi[j] = \u2212u. Note that v\u2032i[j] = 0. Hence, vi[j] \u2212 v\u2032i[j] = \u2212u. It is not hard to see that every time the value of the counter j reaches a new minimum in the Z-semantics, the difference v\u2032i[j] \u2212 vi[j] will be equal to it. We prove this formally by induction on k. Refer to Appendix A.1.1 for the formal proof. \u25c0\n\u25b6 Remark 3.4. Let z \u2208 Zd. A sequence of configurations s0(v0) . . . sk(vk) is a run in Zsemantics corresponding to a path \u03c1 iff s0(v0 \u2212 z) . . . sk(vk \u2212 z) is a run in Z-semantics on the same path \u03c1.\n\u25b6 Proposition 3.5. Consider the following unique run corresponding to the path \u03c1 from s0(v0) in the monus semantics\ns0(v0), . . . , sk\u22121(vk\u22121), sk(vk).\nThen the following run, induced by \u03c1, exists in the classical semantics\ns0(v\u20320), . . . , sk\u22121(v\u2032k\u22121), sk(v\u2032k).\nwhere v\u20320 = v0 \u2212 m and v\u2032k = vk.\nProof. This essentially follows from the definition of m and Remark 3.4. One just needs to observe that the Z run with configurations shifted by the vector \u2212m does not go below zero, hence it is a classical run. See Appendix A.1.2 for the formal proof. \u25c0\nWe now characterize monus reachability in terms of classical reachability.\n\u25b6 Proposition 3.6. Let V = (d,Q,\u2206) be a VASS, let s(v) and t(w) be configurations of V, and let \u03c1 be a path of V. Then, s(v) \u03c1=\u21d2 t(w) if and only if there is a subset Z \u2286 {1, . . . , d} and a vector v\u2032 \u2265 v such that 1. s(v\u2032) \u03c1\u2212\u2192 t(w), 2. For every z \u2208 Z, the coordinate z hits 0 in s(v\u2032) \u03c1\u2212\u2192 t(w), 3. For every j \u2208 {1, . . . , d} \\ Z, we have v\u2032[j] = v[j].\nProof. ( =\u21d2 ) Let m = minZ(\u03c1, s,v). This direction is implied by Proposition 3.5 along with the following argument. Every counter j \u2208 {1, . . . , d} hits 0 in s(v) \u03c1=\u21d2 t(w) if and only\nif it hits 0 in s(v \u2212 m) \u03c1\u2212\u2192 t(w). Moreover, if j does not hit 0 in s(v) \u03c1=\u21d2 t(w) then m[j] = 0.\n( \u21d0= ) Let v\u2032 \u2265 v be a vector as in the statement and let s(v\u2032) \u03c1\u2212\u2192 t(w). We define Z \u2286 {1 . . . d} such that i \u2208 Z if it hits 0. Moreover, let s(v) \u03c1=\u21d2 t(w\u2032\u2032). It suffices to show that w = w\u2032\u2032. We write s(v\u2032) = p0(v\u20320) . . . pk(v\u2032k) = t(w) and s(v) = p0(v0) . . . pk(vk) = t(w\u2032\u2032) for the corresponding runs in the classical and monus semantics, respectively. Note that v\u2032 \u2265 v implies v\u2032i \u2265 vi for all 0 \u2264 i \u2264 k. By definition of v\u2032 it suffices to consider counters j that hit zero, i.e. v\u2032i[j] = 0 for some 0 \u2264 i \u2264 k. Since v\u2032i \u2265 vi we get v\u2032i[j] = 0 = vi[j]. Hence, from i onward both runs agree on the value in counter j. Thus w = w\u2032\u2032.\nSee Appendix A.1.3 for an extended version of this proof. \u25c0\nThe reachability problem. We begin with the Ackermann-completeness proof.\n\u25b6 Theorem 3.7. Reachability in monus semantics is Ackermann-complete.\nFor the upper bound we show how to reduce reachability in monus semantics to reachability in classical semantics. Let V = (d,Q,\u2206), s(v), and t(w) be the input of the reachability problem in monus semantics. We rely on Proposition 3.6. Intuitively, we have to guess a subset Z \u2286 {1, . . . , d} and a permutation \u03c3 : [1, k] \u2192 Z (where k = |Z|). Then we check whether there exists a run as described in Proposition 3.6 with zi = \u03c3(i) for i \u2208 [1, k]. To detect the latter run, we construct the VASS V\u03c3 = (d+ k,Q\u2032, T \u2032) as follows. It simulates V, but it has k extra counters to freeze the values of the counter in Z at the points where the coordinates \u03c3(k), . . . , \u03c3(1) hit 0 as mentioned in Proposition 3.6.\nTo remember which counters have already been frozen the set of control states is Q\u2032 = {qi | q \u2208 Q, i \u2208 [0, k]}. Intuitively, the index i \u2208 [0, k] stores the information how many counters are frozen. The index i can only increment. Note that guessing the permutation \u03c3 allows us to assume that we know the order in which the counters are frozen.\nSince we deal with vectors in dimension d and d+ k we introduce some helpful notation. We write ej \u2208 Zd for the unity vector with ej [j] = 1 and with 0 on other coordinates. Given a vector z \u2208 Zd we define copy(z) \u2208 Zd+k as copy(z)[j] = z[j] for 1 \u2264 j \u2264 d and\nCONCUR 2023\ncopy(z)[j] = z[\u03c3(j \u2212 d)] for d < j \u2264 d+ k. Intuitively, it simply copies the behaviors of the corresponding counters. We generalise this notation to allow to also remove the effect on some coordinates (i.e. \u201cfreeze\u201d them). Given z \u2208 Zd and 0 \u2264 i \u2264 k we define copyi(z) \u2208 Zd+k as copyi(z)[j] = copy(z)[j] for 1 \u2264 j \u2264 d+ k\u2212 i and copyi(z)[j] = 0 for d+ k\u2212 i < j \u2264 d+ k. In particular copy0(z) = copy(z) and copyi(z) is 0 in the last i counters.\nIt remains to define the set of transitions T \u2032. In the beginning there are transitions in T \u2032 that can arbitrarily increment each counter that belongs to Z and its extra copy: (s0, copy(ej), s0) \u2208 T \u2032 for every j \u2208 Z. Moreover, the counter in the control state can spontaneously be incremented: (pi,0, pi+1) for every p \u2208 Q and 0 \u2264 i < k. For every transition (p, z, q) \u2208 T and 0 \u2264 i \u2264 k we define (pi, copyi(z), qi) \u2208 T \u2032.\nThe following claim is straightforward by Proposition 3.6:\n\u25b7 Claim 3.8. We have s(v) \u2217=\u21d2V t(w) if and only if there exists a subset Z \u2286 {1, . . . , d} and bijection \u03c3 : [1, k] \u2192 Z such that s0(copy0(v)) \u2217\u2212\u2192V\u03c3 tk(copyk(w)).\nThis implies that we can decide monus reachability by guessing a subset Z \u2286 [1, d], guessing a bijection \u03c3 : [1, k] \u2192 Z, and deciding reachability in V\u03c3. This yields the upper bound.\nFor the lower bound we reduce classical reachability to monus reachability. Let V = (d,Q,\u2206), s(0) and t(0) be the input of the reachability problem in classical semantics (without loss of generality the input vectors can be 0). We construct the VASS V \u2032 = (d+ 2, Q\u2032, T \u2032) as follows. The states are Q\u2032 = Q \u222a {t\u2032}, where t\u2032 is a fresh copy of t.\nAgain to deal with vectors in different dimension we introduce the following notation. Given z \u2208 Zd we write \u2206(z) \u2208 Z for \u2206(z) = \u2211d j=1 z[j], i.e. the sum of all components. Based on this we define extend(z) \u2208 Zd+2 as: extend(z) = (z,\u2206(z), 0) if \u2206(z) \u2265 0, and extend(z) = (z, 0,\u2212\u2206(z)) otherwise.\nWe define T \u2032 as follows. For every (p, z, q) \u2208 T : (p, extend(z), q) \u2208 T \u2032. Thus, in the (d+ 1)-th counter, we collect the sum of all non-negative entry sums of the added vectors. Analogously, in the (d + 2)-th counter, we collect the sum of all negative entry sums (with a flipped sign). We also add the transition (t,0, t\u2032) \u2208 T \u2032, and a \u201ccount down\u201d loop: (t\u2032(0,\u22121,\u22121), t\u2032), where (0,\u22121,\u22121) is 0 in the first d components and \u22121 otherwise. The following claim completes the proof of Ackermann-hardness.\n\u25b7 Claim 3.9. We have s(0, 1, 1) \u2217=\u21d2 t\u2032(0, 1, 1) in V \u2032 if and only if s(0) \u2217\u2212\u2192 t(0) in V.\nProof. ( \u21d0= ) This is obvious, because every run in classical semantics yields a run in monus semantics between the same configurations.\n( =\u21d2 ) Suppose there is a monus run from s(0, 1, 1) to t\u2032(0, 1, 1). Then for some m \u2208 N, there is a transition sequence \u03c1 leading in monus semantics from s(0, 1, 1) to t(0,m,m). Now let us execute \u03c1 in Z-semantics. This execution will arrive at some configuration t(v,m,m) (note that the last two counters are never decreased, except for the final loop). We shall prove that (i) v = 0 and (ii) this execution never drops below zero. First, according to Proposition 3.3, the resulting counter values in monus semantics are always at least the values from Z-semantics. This implies v \u2264 0. Next observe that since the right-most components have the same value m, the total sum of all entry sums of added vectors (in the first d entries) must be zero. Thus, \u2206(v) = 0. Together with v \u2264 0, this implies v = 0, which shows (i). Second, if the execution in Z-semantics ever drops below zero in some counter i, then by Proposition 3.3 and the fact that in Z-semantics we reach v = 0, this would imply that \u03c1 in monus semantics ends up in a strictly positive value in counter i, which is not true. This shows (ii). Hence, we have shown that the run in Z-semantics is actually a run in classical VASS semantics. Therefore, s(0) \u2217\u2212\u2192 t(0) in V. \u25c1\nCharacterizing zero-reachability. Monus zero-reachability has a simple characterization in terms of classical coverability. Here, V rev is obtained by reversing all transitions in V and their effects. Formally, there is a transition (p, z, q) in V rev iff there is a transition (q,\u2212z, p) in V.\n\u25b6 Lemma 3.10. For any v, we have s(v) \u2217=\u21d2V t(0) iff t(0) \u2217\u2212\u2192V rev s(v\u2032) for some v\u2032 \u2265 v.\nProof. By Proposition 3.6, s(v) \u2217=\u21d2 t(0) yields a v\u2032 \u2265 v with s(v\u2032) \u2217\u2212\u2192 t(0). Conversely, if\ns(v\u2032) \u2217\u2212\u2192 t(0), then we can pick Z = [1, d] in Proposition 3.6 to obtain s(v) \u2217=\u21d2 t(0). \u25c0\nThis together with the known complexity of classical coverability [33, 35] immediately implies:\n\u25b6 Proposition 3.11. The monus zero-reachability problem is EXPSPACE-complete.\nCharacterizing coverability. Our third characterization describes coverability in monus semantics in terms of reachability in Z-semantics:\n\u25b6 Proposition 3.12. Let V = (d,Q,\u2206) be a VASS and let s(v) and t(w) be configurations. Then s(v) \u2217=\u21d2 t(w\u2032\u2032) for some w\u2032\u2032 \u2265 w if and only if there is a permutation \u03c3 of {1, . . . , d} and Z-configurations pd(vd), . . . , p1(v1), t(w\u2032) so that 1. s(v) \u2217\u2192\nZ pd(vd) \u2217\u2192 Z pd\u22121(vd\u22121) \u2217\u2192 Z \u00b7 \u00b7 \u00b7 \u2217\u2192 Z p1(v1) \u2217\u2192 Z t(w\u2032),\n2. for each j \u2208 {1, . . . , d}, we have w\u2032[j] + | min(v\u03c3\u22121(j)[j], 0)| \u2265 w[j].\nProof. ( =\u21d2 ) Let \u03c1 be any path such that s(v) \u03c1=\u21d2 t(w\u2032\u2032) and w\u2032\u2032 \u2265 w. Then, by\nProposition 3.3 s(v) \u03c1\u2192 Z t(w\u2032\u2032 + m), where m is the vector of minimum values in the Z run. The required permutation \u03c3 represents the order \u03c3(d), . . . , \u03c3(1) in which these coordinates reach their corresponding minimum values. Hence, s(v) \u03c1\u2192\nZ t(w\u2032\u2032 + m) is the same as s(v) \u2217\u2192\nZ pd(vd)\n\u2217\u2192 Z pd\u22121(vd\u22121) \u2217\u2192 Z \u00b7 \u00b7 \u00b7 \u2217\u2192 Z p1(v1) \u2217\u2192 Z t(w\u2032), such that vd[\u03c3(d)] = m[\u03c3(d)], . . . ,v1[\u03c3(1)] =\nm[\u03c3(1)], and w\u2032\u2032[j] = w\u2032[j] \u2212 m[j] = w\u2032[j] + |m[j]| = w\u2032[j] + | min(v\u03c3\u22121(j)[j], 0)| for all 1 \u2264 j \u2264 d. As w\u2032\u2032 \u2265 w, w\u2032[j] + | min(v\u03c3\u22121(j)[j], 0)| \u2265 w[j] for all 1 \u2264 j \u2264 d.\n( \u21d0= ) This is a direct consequence of Proposition 3.3. It implies that given any permutation \u03c3 on {1, . . . , d} and any run s(v) \u2217\u2192\nZ pd(vd) \u2217\u2192 Z pd\u22121(vd\u22121) \u2217\u2192 Z \u00b7 \u00b7 \u00b7 \u2217\u2192 Z p1(v1) \u2217\u2192 Z\nt(w\u2032) such that w\u2032[j] \u2212 min(v\u03c3\u22121(j)[j], 0) \u2265 w[j], there is a run from configuration s(v) and reaching a configuration t(w\u2032\u2032) where w\u2032\u2032[j] = w\u2032[j]\u2212m[j] \u2265 w\u2032[j]\u2212min(v\u03c3\u22121(j)[j], 0) \u2265 w[j] for all 1 \u2264 j \u2264 d. \u25c0\nWe conclude the following.\n\u25b6 Proposition 3.13. Monus coverability is NP-complete.\nCONCUR 2023\nProof. First we show NP-hardness. In [28, Prop. 5.11], it is shown that it is NP-hard to decide whether a regular language over some alphabet \u03a3, given as an NFA, contains a word in which every letter appears exactly once. Given such an NFA A over \u03a3 = {a1, . . . , ad}, we construct a d-VASS V. The VASS V simulates A such that when A reads ai, V increments counter i. Moreover, V maintains a number k \u2208 {0, . . . , d} in its state, which always holds the number of letters read so far. Thus, V has states qk, where q is a state of A and k \u2208 {1, . . . , d}. Moreover, let s and t be the initial and final state of A, respectively. Then in V, one can cover td(1, . . . , 1) from s0(0) in monus semantics if and only if A accepts some word as above.\nWe turn to the NP upper bound. Suppose we are given a d-VASS V = (d,Q,\u2206) and configurations s(u), t(v). We employ Proposition 3.12. First non-deterministically guess a permutation \u03c3 of [1, d]. We now construct a 2d-VASS V \u2032\u03c3 and two configurations c\u20321, c\u20322 such that in V \u2032\u03c3, we have c\u20321\n\u2217\u2192 Z c\u20322 if and only if there is a run as in Proposition 3.12 with this \u03c3.\nSince reachability in Z-semantics is NP-complete [25], this yields the upper bound. Our VASS V \u2032\u03c3 is a slight extension of the VASS V\u03c3 from Theorem 3.7, see Figure 3. Recall that for a permutation \u03c3 : [1, k] \u2192 Z, V\u03c3 keeps k extra counters that freeze the values of the counters in Z, in the order \u03c3(k), \u03c3(k \u2212 1), . . . , \u03c3(1). We use this construction, but for our permutation \u03c3 of [1, d]. Thus, V\u03c3 simulates a run of V and then freezes the counters \u03c3(d), . . . , \u03c3(1) in the extra d counters, in this order. The steps that freeze counters define the vectors vd, . . . , v1 in Proposition 3.12. Note that for each vi, only vi[\u03c3(i)] is important.\nTo verify the second condition in Proposition 3.12, we introduce an extra state t\u2032 and extra transitions as depicted in Figure 3. After executing V\u03c3, V \u2032\u03c3 then has two types of loops: One to move tokens from the counters d+ j to counters \u03c3(j) (for each j \u2208 [1, d]), and one to reduce tokens in counters 1, . . . , d. Thus there exists \u03c3 such that s0(copy0(u))\n\u2217\u2192 Z t\u2032(copyd(v))\nin V \u2032\u03c3 if and only if s(u) \u2217=\u21d2 t(v\u2032\u2032) for some v\u2032\u2032 \u2265 v in V . This proves the NP upper bound. \u25c0\n4 Two-dimensional VASS\nIn this section we prove the results of Table 1 related to 2-VASS, both for unary and binary encoding. Note that for all three considered problems, reachability, zero reachability, and coverability, we always have an NL lower bound, inherited from state reachability in finite automata. The latter is well-known to be NL-hard, and a VASS without counters (in all considered semantics) is a finite state automaton.\nWhen dealing with binary/unary updates one needs to be careful with the input size. In all problems suppose a VASS V = (d,Q, T ) is in the input. If we are interested in the unary encoding its size is defined as d + |Q| + \u2211 (p,z,q)\u2208T \u2225z\u2225, where \u2225z\u2225 is the absolute value of the maximal coordinate in z. In the binary encoding one needs to change \u2225z\u2225 to \u2308log(\u2225z\u2225 + 1)\u2309. From this point onwards, we use the term succinct VASS for VASS where updates are encoded in binary.\nWe consider each of the three problems separately.\nReachability Here we only prove the PSPACE upper bound for monus reachability in binary encoded 2-VASS, which implies the same upper bound for unary encoding. The PSPACE lower bound for binary encoding is inherited from zero reachability, see Proposition 4.3 below.\n\u25b6 Proposition 4.1. In succinct 2-VASS, reachability with monus semantics is in PSPACE.\nAccording to Proposition 3.6, reachability with monus semantics is equivalent to existence of a run under classical semantics, where said run is subject to some additional constraints.\nRecall that Presburger arithmetic is the first-order theory of (N,+, <, 0, 1). We observe that all the additional constraints of Proposition 3.6 can be expressed by quantifier-free Presburger formulas. This leads us to the so-called constrained runs problem for succinct 2-VASS, which was recently shown to be in PSPACE [3], following the fact that classical reachability itself is PSPACE-complete for succinct 2-VASS [5].\nFormally, the constrained runs problem for succinct 2-VASS is the following: Given A succinct 2-VASS V, a number m \u2208 N, states q1, . . . , qm in V, a quantifier-free\nPresburger formula \u03c8(x1, y1, . . . , xm, ym), and numbers s, t \u2208 [1,m] with s \u2264 t. Question Does there exist a run q0(0, 0) \u2217\u2212\u2192 q1(x1, y1) \u2217\u2212\u2192 \u00b7 \u00b7 \u00b7 \u2217\u2212\u2192 qm(xm, ym) that visits a\nfinal state between qs(xs, ys) and qt(xt, yt) and satisfies \u03c8(x1, y1, . . . , xm, ym)?\n\u25b6 Lemma 4.2 ([3, Prop. 6.5]). The constrained runs problem for succinct 2-VASS is in PSPACE.\nWe can now prove Proposition 4.1 by reducing to the constrained runs problem: Let V be a 2-VASS with configurations s(v) and t(w). According to Proposition 3.6, existence of a run s(v) \u2217=\u21d2 t(w) is equivalent to existence of states p1, p2 and a set Z \u2286 [1, 2] such that a run s(v\u2032) \u2217\u2212\u2192 t(w) with v\u2032 \u2265 v that is subject to additional requirements enforced by conditions (2) and (3) of the Proposition 3.6. Our PSPACE algorithm enumerates all possibilities of p1, p2 and Z, constructing an instance of the constrained run problem each time, and checking for a constrained run in PSPACE using Lemma 4.2. If such a run exists in at least one of the instances, the algorithm accepts, otherwise it rejects. To construct each instance the algorithm first modifies V to ensure that a starting configuration s(v\u2032) is reachable for any v\u2032 \u2265 v. To this end a new initial state q0 is added, with two loops that increment one of the counters each, and a transition that goes to s by adding v. Then the additional requirements of Proposition 3.6 are encoded in quantifier-free Presburger arithmetic, as required by the constrained run problem. Clearly the constructed algorithm runs in PSPACE and decides s(v) \u2217=\u21d2 t(w). For more details refer to Appendix B.1.1."
        },
        {
            "heading": "Zero reachability",
            "text": "\u25b6 Proposition 4.3. Monus zero reachability in 2-VASS is PSPACE-complete under binary encoding and NL-complete under unary encoding.\nProof. This is a simple consequence of monus zero reachability being interreducible with classical coverability: Classical coverability in 2-VASS under binary encoding is PSPACEcomplete under binary encoding (in [5, Corollary 3.3], this is deduced from [36, p. 108] and [17, Corollary 10] and NL-complete under unary encoding [36, p. 108].\nLet V be a 2-VASS with configurations s(v) and t(0). Then according to Proposition 3.6, we know that t(0) is monus reachable from s(v) if and only if in V rev the configuration s(v) is coverable from t(0) with classical semantics. On the other hand, given configurations s(v) and t(w) of a 2-VASS V, we add a new state s\u2032 and transition (s\u2032,v, s) to construct the 2-VASS V \u2032. Then classical coverability of t(w) from s(v) in V is equivalent to the same from s\u2032(0) in V \u2032. Now applying Proposition 3.6 in reverse, the latter is further equivalent to monus reachability of s\u2032(0) from t(w) in V \u2032rev. \u25c0\nCoverability By Proposition 3.13, monus coverability is in NP in arbitrary dimension. Thus, it remains to show the NP lower bound.\n\u25b6 Proposition 4.4. Monus coverability in succinct 2-VASS is NP-hard.\nCONCUR 2023\ns t\u00b7 \u00b7 \u00b7 (1, a+ 1)\n(a1,\u2212a1)\n(0, 0)\n(an,\u2212an)\n(0, 0)\n(\u2212a, 0)\nFigure 4 2-VASS to show NP-hardness of coverability in dimension two.\nProof. We reduce from the subset sum problem, which is well-known to be NP-hard. Here, we are given binary encoded numbers a1, . . . , an, a \u2208 N and are asked whether there is a vector (x1, . . . , xn) \u2208 {0, 1}n such that x1a1 + \u00b7 \u00b7 \u00b7 + xnan = a. Given such an instance, we construct the 2-VASS in Figure 4. It is clear that we can cover t(1, 1) from s(0, 0) iff the subset-sum instance is positive: Covering 1 in the first counter means our sum is at least a, whereas covering 1 in the second counter means our sum is at most a. \u25c0\n\u25b6 Proposition 4.5. Monus coverability in unary-encoded 2-VASS is in NL.\nProof. This follows using the same construction as for Proposition 3.13: Given a 2-VASS, there are only two permutations \u03c3 of {1, 2}. Thus, we can try both permutations \u03c3 and construct the VASS V \u2032\u03c3 in logspace. Then, V\u03c3 has dimension 2d. Thus, we reduce monus coverability in 2-VASS to reachability in Z-semantics in 4-VASS. Since reachability with Z-semantics in each fixed dimension can be decided in NL [24], this provides an NL upper bound. \u25c0\n5 One-dimensional VASS\nReachability We begin with the proofs regarding reachability.\n\u25b6 Proposition 5.1. Monus reachability in 1-VASS is in NL under unary encoding and in NP under binary encoding.\nThe proof of Proposition 5.1 relies on the following simple consequence of Proposition 3.6:\n\u25b6 Lemma 5.2. Let V be a 1-VASS. Then s(m) \u2217=\u21d2V t(n) if and only if (i) s(m) \u2217\u2212\u2192V t(n) or (ii) there exist a state q and number m\u2032 \u2265 m with s(m\u2032) \u2217\u2212\u2192V q(0) and q(0) \u2217\u2212\u2192V t(n).\nFor Proposition 5.1, we reduce to reachability in one-counter automata. A one-counter automaton (OCA) is a 1-VASS with zero-tests, i.e. special transitions that test the counter for zero instead of adding a number. For encoding purposes, zero tests take up as much space as a transition adding 0 to the counter. In our reduction, the update encoding is preserved: If the input 1-VASS has unary encoding, then the OCA has unary updates as well. If the input 1-VASS has binary updates, then the OCA will too. Then, we can use the fact that in OCA with unary updates, reachability is in NL [38] and for binary updates, it is in NP [26].\nThe OCA first guesses whether to simulate a run of type (i) or of type (ii) in Lemma 5.2. Then for type (i), it just simulates a classical 1-VASS. For type (ii), it first non-deterministically increments the counter, and then simulates a run of the 1-VASS. However, on the way, it keeps a flag signaling whether the counter has hit 0 at some point (which it can maintain using zero tests). Thus, when simulating runs of type (ii), the OCA only accepts if zero has been hit. For a detailed description, refer to Appendix C.1.1.\n\u25b6 Proposition 5.3. Monus reachability in 1-VASS is NP-hard under binary encoding.\nAs in Proposition 4.4, we reduce from subset sum. Given a1, . . . , an, a in binary, we construct the 1-VASS in Figure 5. Then q0(0) \u2217=\u21d2 qf (1) iff this is a positive instance. See Appendix C.1.2."
        },
        {
            "heading": "Zero reachability and coverability",
            "text": "\u25b6 Proposition 5.4. Monus zero-reachability in 1-VASS is in NL under unary encoding and in NC2 under binary encoding.\nSince monus zero-reachability reduces to classical coverability (Lemma 3.10), this follows from existing 1-VASS results: Coverability in 1-VASS is in NL under unary encoding [38] and NC2 under binary encoding [2].\n\u25b6 Proposition 5.5. Monus coverability in 1-VASS is in NL under unary encoding and in NC2 under binary encoding.\nThe first statement follows from Proposition 5.1 and the fact that monus coverability reduces to monus reachability by simply adding a new final state where we can count down. For the NC2 bound, we use the following consequence of Lemma 3.10 (see Appendix C.2.1).\n\u25b6 Lemma 5.6. Let V be a 1-VASS with configurations s(m) and t(n). Then t(n) is monus coverable from s(m) in V if and only if t(n) is coverable from s(m) in V under classical semantics or there is a state q of V such that t(n) is coverable from q(0) in V under classical semantics and s(m) is coverable from q(0) in V rev under classical semantics.\nProof of Proposition 5.5. It remains to prove the NC2 upper bound, for which we check the requirements of Lemma 5.6. Let k be the number of states of the input 1-VASS. Observe that Lemma 5.6 yields a logical disjunction over k + 1 disjuncts, where one disjunct consists of a single coverability check and the remaining k each consist of a logical conjunction over two coverability checks. Classical coverability of binary encoded 1-VASS is in NC2 [2], and by the definition of this complexity class, we can combine 2k + 1 such checks according to the aforementioned logical relationship and still yield an NC2-algorithm. Note that this is only possible because k is linear in the size of the input. \u25c0\nReferences 1 Parosh Aziz Abdulla, Karlis Cerans, Bengt Jonsson, and Yih-Kuen Tsay. General decidability\ntheorems for infinite-state systems. In Proceedings, 11th Annual IEEE Symposium on Logic in Computer Science, New Brunswick, New Jersey, USA, July 27-30, 1996, pages 313\u2013321. IEEE Computer Society, 1996. 2 Shaull Almagor, Nathann Cohen, Guillermo A. P\u00e9rez, Mahsa Shirmohammadi, and James Worrell. Coverability in 1-VASS with Disequality Tests. In Igor Konnov and Laura Kov\u00e1cs, editors, 31st International Conference on Concurrency Theory, CONCUR 2020, September 1-4, 2020, Vienna, Austria (Virtual Conference), volume 171 of LIPIcs, pages 38:1\u201338:20. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2020.\nCONCUR 2023\n3 Pascal Baumann, Roland Meyer, and Georg Zetzsche. Regular Separability in B\u00fcchi VASS. In Petra Berenbrink, Patricia Bouyer, Anuj Dawar, and Mamadou Moustapha Kant\u00e9, editors, 40th International Symposium on Theoretical Aspects of Computer Science (STACS 2023), volume 254 of Leibniz International Proceedings in Informatics (LIPIcs), pages 9:1\u20139:19, Dagstuhl, Germany, 2023. Schloss Dagstuhl \u2013 Leibniz-Zentrum f\u00fcr Informatik.\n4 Michael Blondin. The ABCs of Petri net reachability relaxations. ACM SIGLOG News, 7(3), 2020.\n5 Michael Blondin, Matthias Englert, Alain Finkel, Stefan G\u00f6ller, Christoph Haase, Ranko Lazic, Pierre McKenzie, and Patrick Totzke. The Reachability Problem for Two-Dimensional Vector Addition Systems with States. J. ACM, 68(5):34:1\u201334:43, 2021.\n6 Michael Blondin, Alain Finkel, Christoph Haase, and Serge Haddad. Approaching the coverability problem continuously. In Proc. 22nd International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), pages 480\u2013496, 2016.\n7 Michael Blondin, Christoph Haase, and Philip Offtermatt. Directed reachability for infinitestate systems. In Jan Friso Groote and Kim Guldstrand Larsen, editors, Tools and Algorithms for the Construction and Analysis of Systems - 27th International Conference, TACAS 2021, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021, Luxembourg City, Luxembourg, March 27 - April 1, 2021, Proceedings, Part II, volume 12652 of Lecture Notes in Computer Science, pages 3\u201323. Springer, 2021.\n8 Wojciech Czerwinski, Slawomir Lasota, Ranko Lazic, J\u00e9r\u00f4me Leroux, and Filip Mazowiecki. Reachability in fixed dimension vector addition systems with states. In Igor Konnov and Laura Kov\u00e1cs, editors, 31st International Conference on Concurrency Theory, CONCUR 2020, September 1-4, 2020, Vienna, Austria (Virtual Conference), volume 171 of LIPIcs, pages 48:1\u201348:21. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2020.\n9 Wojciech Czerwinski and Lukasz Orlikowski. Reachability in vector addition systems is ackermann-complete. In 62nd IEEE Annual Symposium on Foundations of Computer Science, FOCS 2021, Denver, CO, USA, February 7-10, 2022, pages 1229\u20131240. IEEE, 2021.\n10 Wojciech Czerwinski and Lukasz Orlikowski. Lower bounds for the reachability problem in fixed dimensional vasses. In Christel Baier and Dana Fisman, editors, LICS \u201922: 37th Annual ACM/IEEE Symposium on Logic in Computer Science, Haifa, Israel, August 2 - 5, 2022, pages 40:1\u201340:12. ACM, 2022.\n11 St\u00e9phane Demri, Marcin Jurdzinski, Oded Lachish, and Ranko Lazic. The covering and boundedness problems for branching vector addition systems. J. Comput. Syst. Sci., 79(1):23\u2013 38, 2013.\n12 Alex Dixon and Ranko Lazic. Kreach: A tool for reachability in petri nets. In Armin Biere and David Parker, editors, Tools and Algorithms for the Construction and Analysis of Systems - 26th International Conference, TACAS 2020, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020, Dublin, Ireland, April 25-30, 2020, Proceedings, Part I, volume 12078 of Lecture Notes in Computer Science, pages 405\u2013412. Springer, 2020.\n13 Catherine Dufourd, Alain Finkel, and Philippe Schnoebelen. Reset nets between decidability and undecidability. In Kim Guldstrand Larsen, Sven Skyum, and Glynn Winskel, editors, Automata, Languages and Programming, 25th International Colloquium, ICALP\u201998, Aalborg, Denmark, July 13-17, 1998, Proceedings, volume 1443 of Lecture Notes in Computer Science, pages 103\u2013115. Springer, 1998.\n14 Matthias Englert, Piotr Hofman, Slawomir Lasota, Ranko Lazic, J\u00e9r\u00f4me Leroux, and Juliusz Straszynski. A lower bound for the coverability problem in acyclic pushdown VAS. Inf. Process. Lett., 167:106079, 2021.\n15 Javier Esparza, Rusl\u00e1n Ledesma-Garza, Rupak Majumdar, Philipp J. Meyer, and Filip Nik\u0161i\u0107. An SMT-based approach to coverability analysis. In Proc. 26th International Conference on Computer Aided Verification (CAV), pages 603\u2013619, 2014.\n16 John Fearnley and Marcin Jurdzi\u0144ski. Reachability in Two-Clock Timed Automata Is PSPACEComplete. In Fedor V. Fomin, Ru\u0304sin, \u0161 Freivalds, Marta Kwiatkowska, and David Peleg, editors, Automata, Languages, and Programming, pages 212\u2013223, Berlin, Heidelberg, 2013. Springer Berlin Heidelberg.\n17 John Fearnley and Marcin Jurdzinski. Reachability in two-clock timed automata is pspacecomplete. In Fedor V. Fomin, Rusins Freivalds, Marta Z. Kwiatkowska, and David Peleg, editors, Automata, Languages, and Programming - 40th International Colloquium, ICALP 2013, Riga, Latvia, July 8-12, 2013, Proceedings, Part II, volume 7966 of Lecture Notes in Computer Science, pages 212\u2013223. Springer, 2013.\n18 Diego Figueira, Ranko Lazic, J\u00e9r\u00f4me Leroux, Filip Mazowiecki, and Gr\u00e9goire Sutre. Polynomialspace completeness of reachability for succinct branching VASS in dimension one. In Ioannis Chatzigiannakis, Piotr Indyk, Fabian Kuhn, and Anca Muscholl, editors, 44th International Colloquium on Automata, Languages, and Programming, ICALP 2017, July 10-14, 2017, Warsaw, Poland, volume 80 of LIPIcs, pages 119:1\u2013119:14. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2017.\n19 Alain Finkel and Philippe Schnoebelen. Well-structured transition systems everywhere! Theor. Comput. Sci., 256(1-2):63\u201392, 2001.\n20 Est\u00edbaliz Fraca and Serge Haddad. Complexity analysis of continuous Petri nets. Fundamenta Informaticae, 137(1):1\u201328, 2015.\n21 Moses Ganardi, Rupak Majumdar, Andreas Pavlogiannis, Lia Sch\u00fctze, and Georg Zetzsche. Reachability in bidirected pushdown VASS. In Mikolaj Bojanczyk, Emanuela Merelli, and David P. Woodruff, editors, 49th International Colloquium on Automata, Languages, and Programming, ICALP 2022, July 4-8, 2022, Paris, France, volume 229 of LIPIcs, pages 124:1\u2013124:20. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2022.\n22 Steven M. German and A. Prasad Sistla. Reasoning about systems with many processes. J. ACM, 39(3):675\u2013735, 1992.\n23 Stefan G\u00f6ller, Christoph Haase, Ranko Lazic, and Patrick Totzke. A polynomial-time algorithm for reachability in branching VASS in dimension one. In Ioannis Chatzigiannakis, Michael Mitzenmacher, Yuval Rabani, and Davide Sangiorgi, editors, 43rd International Colloquium on Automata, Languages, and Programming, ICALP 2016, July 11-15, 2016, Rome, Italy, volume 55 of LIPIcs, pages 105:1\u2013105:13. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, 2016.\n24 Eitan M. Gurari and Oscar H. Ibarra. The complexity of decision problems for finite-turn multicounter machines. J. Comput. Syst. Sci., 22(2):220\u2013229, 1981.\n25 Christoph Haase and Simon Halfon. Integer vector addition systems with states. In Jo\u00ebl Ouaknine, Igor Potapov, and James Worrell, editors, Reachability Problems - 8th International Workshop, RP 2014, Oxford, UK, September 22-24, 2014. Proceedings, volume 8762 of Lecture Notes in Computer Science, pages 112\u2013124. Springer, 2014.\n26 Christoph Haase, Stephan Kreutzer, Jo\u00ebl Ouaknine, and James Worrell. Reachability in succinct and parametric one-counter automata. In Mario Bravetti and Gianluigi Zavattaro, editors, CONCUR 2009 - Concurrency Theory, 20th International Conference, CONCUR 2009, Bologna, Italy, September 1-4, 2009. Proceedings, volume 5710 of Lecture Notes in Computer Science, pages 369\u2013383. Springer, 2009.\n27 John Hopcroft and Jean-Jacques Pansiot. On the reachability problem for 5-dimensional vector addition systems. Theoretical Computer Science, 8(2):135\u2013159, 1979.\n28 Eryk Kopczynski. Complexity of problems of commutative grammars. Log. Methods Comput. Sci., 11(1), 2015.\n29 J\u00e9r\u00f4me Leroux. The reachability problem for petri nets is not primitive recursive. In 62nd IEEE Annual Symposium on Foundations of Computer Science, FOCS 2021, Denver, CO, USA, February 7-10, 2022, pages 1241\u20131252. IEEE, 2021.\nCONCUR 2023\n30 J\u00e9r\u00f4me Leroux and Sylvain Schmitz. Reachability in vector addition systems is primitiverecursive in fixed dimension. In 34th Annual ACM/IEEE Symposium on Logic in Computer Science, LICS 2019, Vancouver, BC, Canada, June 24-27, 2019, pages 1\u201313. IEEE, 2019. 31 J\u00e9r\u00f4me Leroux and Gr\u00e9goire Sutre. Reachability in Two-Dimensional Vector Addition Systems with States: One Test Is for Free. In Igor Konnov and Laura Kov\u00e1cs, editors, 31st International Conference on Concurrency Theory (CONCUR 2020), volume 171 of Leibniz International Proceedings in Informatics (LIPIcs), pages 37:1\u201337:17, Dagstuhl, Germany, 2020. Schloss Dagstuhl\u2013Leibniz-Zentrum f\u00fcr Informatik. 32 J\u00e9r\u00f4me Leroux, Gr\u00e9goire Sutre, and Patrick Totzke. On the coverability problem for pushdown vector addition systems in one dimension. In Magn\u00fas M. Halld\u00f3rsson, Kazuo Iwama, Naoki Kobayashi, and Bettina Speckmann, editors, Automata, Languages, and Programming - 42nd International Colloquium, ICALP 2015, Kyoto, Japan, July 6-10, 2015, Proceedings, Part II, volume 9135 of Lecture Notes in Computer Science, pages 324\u2013336. Springer, 2015. 33 Richard Lipton. The reachability problem is exponential-space hard. Yale University, Department of Computer Science, Report, 62, 1976. 34 Filip Mazowiecki, Henry Sinclair-Banks, and Karol W\u0119grzycki. Coverability in 2-vass with one unary counter is in np. In Orna Kupferman and Pawel Sobocinski, editors, Foundations of Software Science and Computation Structures, pages 196\u2013217, Cham, 2023. Springer Nature Switzerland. 35 Charles Rackoff. The covering and boundedness problems for vector addition systems. Theoretical Computer Science, 6(2):223\u2013231, 1978. 36 Louis E Rosier and Hsu-Chun Yen. A multiparameter analysis of the boundedness problem for vector addition systems. Journal of Computer and System Sciences, 32(1):105\u2013135, 1986. 37 Sylvain Schmitz. The complexity of reachability in vector addition systems. ACM SIGLOG News, 3(1):4\u201321, 2016. 38 Leslie G. Valiant and Mike Paterson. Deterministic one-counter automata. J. Comput. Syst. Sci., 10(3):340\u2013350, 1975. 39 Wil M. P. van der Aalst. Verification of workflow nets. In Proc. 18th International Conference on Application and Theory of Petri Nets (ICATPN), volume 1248, pages 407\u2013426, 1997.\nA Formal Proofs for Arbitrary Dimensions"
        },
        {
            "heading": "A.1 Reachability in Arbitrary Dimensions",
            "text": "In this section, we fix a VASS V = (Q, d,\u2206), a configuration s0(v0) \u2208 Q\u00d7Nd, a valid sequence of transitions \u03c1 = (p0, z0, p1) . . . (pk\u22121, zk\u22121, pk), and the number m = minZ(\u03c1, s0,v0).\nFigures 6\u20137 describe the relations between runs of each of the considered semantics.\nA.1.1 Proof of Proposition 3.3: Relating monus and Z runs Statement. Consider the unique runs induced by \u03c1 from s0(v0) in Z-semantics\ns0(v0), . . . , sk\u22121(vk\u22121), sk(vk),\nand in monus semantics\ns0(v\u20320), . . . , sk\u22121(v\u2032k\u22121), sk(v\u2032k).\nwhere v\u20320 = v0. Then v\u2032k = vk \u2212 m.\nProof. We prove the above by applying induction on length of the path i.e. |\u03c1| = k. For |\u03c1| = k = 0, the above proposition is trivially true. Assume that the proposition holds for any path of length n. Let k = n + 1. Let \u03c1 = \u03c11\u03c12 such that |\u03c11| = n. Let\nCONCUR 2023\nmn = minZ(\u03c11, s0,v0). Let j be any integer in {1, 2, . . . , n}. By induction hypothesis, v\u2032n[j] = vn[j] \u2212 mn[j] (i). By Z semantics and monus semantics v[j]n+1 = v[j]n + z[j]n and v\u2032n+1[j] = max(v\u2032n[j] + zn[j], 0), respectively (ii). By (i) and (ii) we have v\u2032n+1[j] = max(vn[j] + z[j] \u2212 mn[j], 0) = max(vn+1[j] \u2212 mn[j], 0) (iii). There are two possible cases. Case 1: vn+1[j] \u2265 mn[j] (iv). Then m[j] = mn[j] (by definition of minZ) (v). Thus we have v\u2032n+1[j] (iii)= max(vn+1[j] \u2212 mn[j], 0) (iv)= vn+1[j] \u2212 mn[j]\n(v)= vn+1[j] \u2212 m[j]. Case 2: vn+1[j] < mn[j] (vi). Then m[j] = vn+1[j] (by definition of minZ) (vii). Thus we have v\u2032n+1[j] (iii)= max(vn+1[j] \u2212 mn[j], 0) (vi)= 0 (vii)= vn+1[j] \u2212 m[j]. Hence, v\u2032n+1 = vn+1 \u2212 m. \u25c0\nA.1.2 Proof of Proposition 3.5: Relating monus and Classical runs Statement- Consider the following unique run corresponding to the path \u03c1 from s0(v0) in the monus semantics\ns0(v0), . . . , sk\u22121(vk\u22121), sk(vk).\nThen the following run, induced by \u03c1, exists in the classical semantics\ns0(v\u20320), . . . , sk\u22121(v\u2032k\u22121), sk(v\u2032k).\nwhere v\u20320 = v0 \u2212 m and v\u2032k = vk.\nProof. By Proposition 3.3, s0(v0), . . . , sk(vk) is a run corresponding to \u03c1 in monus semantics iff s0(v\u2032\u20320) . . . sk(v\u2032\u2032k) is the run corresponding to \u03c1 in Z semantics where v\u2032\u20320 = v0 and v\u2032\u2032k = vk + m. By Remark 3.4, R = s0(v\u2032\u20320 \u2212 m), s1(v\u2032\u20321 \u2212 m) . . . sk(v\u2032\u2032k \u2212 m) is a valid Z run on the same path \u03c1. Notice that, for any counter 1 \u2264 j \u2264 d, m[j] is 0 iff j never goes negative in s0(v\u2032\u20320) . . . sk(v\u2032\u2032k). Otherwise, m[j] is the lowest number that the counter j reaches in the run s0(v\u2032\u20320) . . . sk(v\u2032\u2032k). Hence, all the vectors, v\u2032\u20320 \u2212 m, . . .v\u2032\u2032k \u2212 m are in Nd. Therefore none of the coordinates in the run R goes negative. By Remark 3.1, R = s0(v\u2032\u20320 \u2212m), s1(v\u2032\u20321 \u2212m) . . . sk(v\u2032\u2032k \u2212m) is a valid classical run corresponding to \u03c1. Finally, v\u2032\u20320 \u2212 m = v0 \u2212 m and v\u2032\u2032k \u2212 m = vk. This concludes the proof. \u25c0"
        },
        {
            "heading": "A.1.3 Proof of Proposition 3.6: Characterizing monus Reachability",
            "text": "Statement- Let V = (d,Q,\u2206) be a VASS, let s(v) and t(w) be configurations of V , and let \u03c1 be a path of V. Then, s(v) \u03c1=\u21d2 t(w) if and only if there is a subset Z \u2286 {1, . . . , d} and a vector v\u2032 \u2265 v such that 1. s(v\u2032) \u03c1\u2212\u2192 t(w), 2. For every z \u2208 Z, the coordinate z hits 0 in s(v\u2032) \u03c1\u2212\u2192 t(w), 3. For every j \u2208 {1, . . . , d} \\ Z, we have v\u2032[j] = v[j].\nProof. Let m = minZ(\u03c1, p,v). Intuitively, the ( =\u21d2 )-direction is implied by Proposition 3.5 along with the following argument. Any counter j \u2208 {1, . . . , d} hits 0 in s(v) \u03c1=\u21d2 t(w) iff\nit hits 0 in s(v \u2212 m) \u03c1\u2212\u2192 t(w). Moreover, if j doesn\u2019t hit 0 in s(v) \u03c1=\u21d2 t(w) then m[j] = 0.\nFormally, by Propositions 3.3 and 3.5 and Remark 3.4, s(v) \u03c1=\u21d2 t(w) iff s(v) \u03c1\u2192 Z t(w + m) iff s(v \u2212 m) \u03c1\u2192 Z t(w) iff s(v \u2212 m) \u03c1\u2212\u2192 t(w). Notice that if a coordinate j doesn\u2019t hit 0 in s(v) \u03c1=\u21d2 t(w) then it doesn\u2019t in s(v) \u03c1\u2192 Z t(w + m) (the counters that don\u2019t hit 0 have identical behaviour in all the semantics discussed, by definition). This implies j doesn\u2019t hit 0 in\ns(v) \u03c1\u2192 Z t(w + m). Hence, it doesn\u2019t in s(v \u2212 m) \u03c1\u2192 Z t(w) (as \u2212m \u2208 Nd) and therefore, it deosn\u2019t in s(v \u2212 m) \u03c1=\u21d2 s(w) either (as the runs are identical by Remark 3.2). Moreover,\nby definition of minZ, m[j] = 0, if j doesn\u2019t hit 0 in s(v) \u03c1=\u21d2 t(w + m). Hence, For all the\ndimensions j that don\u2019t hit 0 in s(v \u2212 m) \u03c1\u2212\u2192 t(w) (i.e., j /\u2208 Z), we have (v \u2212 m)[j] = v[j]. For all the dimensions j that hit 0 (i.e., j \u2208 Z) we have (v \u2212 m)[j] \u2265 v[j] (as \u2212m \u2208 Nd). With the choice of v\u2032 = v \u2212 m, we conclude the proof of this direction.\nFor the ( \u21d0= )-direction, let v\u2032 be any vector such that v\u2032 \u2265 v and s(v\u2032) \u03c1\u2212\u2192 t(w). Then, if any coordinate i \u2208 {1 . . . d} doesn\u2019t hit 0 in s(v\u2032) \u03c1\u2212\u2192 t(w), we have v\u2032[i] = v[i]. Let s(v) \u03c1=\u21d2 t(w\u2032\u2032). It suffices to show that w = w\u2032\u2032.\nLet s(v\u2032) \u03c1\u2212\u2192 t(w) and s(v) \u03c1=\u21d2 t(w\u2032\u2032) be runs of the form p0(v0) . . . pk(vk) and p0(v\u20320) . . . pk(v\u2032k), respectively, where p0 = s, pk = t, v0 = v, v\u20320 = v\u2032, vk = w\u2032\u2032 and v\u2032k = w. Since the same sequence of transitions is applied in both of these runs, v\u2032 \u2265 v implies v1 \u2264 v\u20321, v2 \u2264 v\u20322, . . . , vk \u2264 v\u2032k (*). Moreover, if a coordinate i never hits 0 in the former (classical run) then both the runs agree on the value of the counter throughout, as v[j] = v\u2032[i]. Otherwise if vj [i] = 0 for for some 1 \u2264 j \u2264 k then v\u2032j [i] = 0 = v[i] by (*). Hence, from this point onwards, both the runs agree on the value of i. Therefore both the runs end up in the same configuration.\nFormally, for any coordinate i \u2208 {1 . . . d} we distinguish two cases. (Case 1) vj [i] > 0 for every 0 \u2264 j \u2264 k and v\u2032[i] = v[i]. Then for every 0 \u2264 j \u2264 k, v\u2032j [i] = vj [i] (as we apply an identical sequence of transitions). Hence, v\u2032k[i] = vk[i]. (Case 2) There exists 0 \u2264 j \u2264 k such that vj [i] = 0 and v[i] \u2264 v\u2032[i]. Without loss of generality, we assume that j is the smallest such number. Notice that, until the (j \u2212 1)th step we have v0[i] \u2264 v\u20320[i], v1[i] \u2264 v\u20321[i], v2[i] \u2264 v\u20322[i], . . .vj\u22121[i] \u2264 v\u2032j\u22121[i] (\u2020). Let \u03c1[j] = (pj\u22121, zj\u22121, pj). As vj [i] = 0, zj\u22121[i] = \u2212vj\u22121[i] (\u2021). By definition of monus semantics v\u2032j [i] = max(0,v\u2032j\u22121[i] \u2212 zj\u22121[i]). By (\u2020) and (\u2021) we have v\u2032j\u22121[i] \u2212 zj\u22121[i] \u2264 0. Hence, v\u2032j [i] = vj [i] = 0. Similar to Case 1, as the sequence of transitions in both the runs are the same, the value of counter i in both the runs synchronizes from step j onwards. \u25c0\nB Formal Proofs for Two-dimensional VASS"
        },
        {
            "heading": "B.1 Reachability for Two-dimensional VASS",
            "text": ""
        },
        {
            "heading": "B.1.1 Proof of Proposition 4.1",
            "text": "Statement- In succinct 2-VASS, reachability with monus semantics is in PSPACE.\nProof. We reduce to the constrained runs problem for succinct 2-VASS. Let V = (2, Q,\u2206) be a 2-VASS with configurations p(v) and q(w). By Proposition 3.6 existence of a monus run p(v) \u03c1=\u21d2 q(w) for some path \u03c1 is equivalent to the following: There is a subset Z = {z1, . . . , zk} \u2286 {1, 2} and there are configurations p1(v1), p2(v2), p(v\u2032) so that 1. p(v\u2032) \u2217\u2212\u2192 p1(v1) \u2217\u2212\u2192 p2(v2) \u2217\u2212\u2192 q(w) on the classical run induced by \u03c1, 2. for each j \u2208 [1, k], we have vj [zj ] = 0, 3. v\u2032 \u2265 v 4. for each i \u2208 [1, d] \\ Z, we have v\u2032[i] = v[i]. For each choice of p1, p2 \u2208 Q here, we translate these conditions into an instance of the constrained runs problem, which we can then solve in PSPACE by Lemma 4.2. Since enumerating all possibilities for p1, p2 is also possible in PSPACE, this results in a PSPACE\nCONCUR 2023\nalgorithm as required. We simply accept if one of the possibilities results in a positive instance of the constrained runs problem, and reject otherwise.\nFor the translation to a constrained runs problem instance, we first construct a new 2-VASS V \u2032 from V by making all states final, adding a new initial state q0, and adding the transitions (q0, (1, 0), q0), (q0, (0, 1), q0), and (q0,v, p). This ensures that condition (1) becomes q0(0, 0) \u2217\u2212\u2192 p(x1, y1) \u2217\u2212\u2192 p1(x2, y2) \u2217\u2212\u2192 p2(x3, y3) \u2217\u2212\u2192 q(x4, y4) in V \u2032, as required by the constrained runs problem. The added loops on q0 furthermore ensure that we can reach p(v\u2032) for any v\u2032 \u2265 v. Secondly, we fix the numbers m = 4 = s = t and the sequence of states q0, q1 = p, q2 = p1, q3 = p2, q4 = q. Thirdly, we use the Presburger formula w[1] = x4 \u2227 w[2] = y4 to express that the run ends in the desired configuration q(w). Finally, we need to express conditions (2) to (4) using equivalent quantifier-free Presburger formulas. We will use the conjunction of all the constructed formulas as input formula \u03c8 for the constrained runs problem. Condition (3) simply becomes v[1] \u2264 x1 \u2227 v[2] \u2264 y1, where a \u2264 b is syntactic sugar for a < b \u2228 a = b. For conditions (2) and (4) we can go through all five possibilities for the set Z and construct a big disjunction:\n(v[1] = x1 \u2227 v[2] = y1) \u2228 (0 = x2 \u2227 v[2] = y1) \u2228 (v[1] = x1 \u2227 0 = y2) \u2228 (0 = x2 \u2227 0 = y3) \u2228 (0 = x3 \u2227 0 = y2)\nNote that the order of elements in Z matters, as z1 = 1, z2 = 2 and z1 = 2, z2 = 1 result in two different conditions here.\nClearly the conditions (1) to (4) are equivalent to existence of a constrained run in V \u2032 subject to the conjunction of the constructed formulas. \u25c0\nIn the above proof the constructed algorithm enumerates all possible choices of states p1, p2, and moreover goes through all possibilities for the set Z and a total order over its elements. We remark that since NPSPACE = PSPACE, one could alternatively have the algorithm make nondeterministic guesses in both these cases. The resulting nondeterministic algorithm would have been sufficient to show PSPACE-membership.\nC Formal proofs for One-dimensional VASS"
        },
        {
            "heading": "C.1 Reachability for One-dimensional VASS",
            "text": ""
        },
        {
            "heading": "C.1.1 Proof of Proposition 5.1",
            "text": "Statement- Monus reachability in 1-VASS is in NL under unary encoding and in NP under binary encoding.\nProof. We reduce this problem to classical configuration reachability in one-counter automata, which is in NL for unary counter updates and in NP for binary counter updates [26].\nConsider an instance of the monus reachability problem in 1-VASS: Let V be a 1-VASS with configurations s(m) and t(n). In the following we construct a one-counter automaton A with two configurations in such a way that reachability will be equivalent to the characterization given by Lemma 5.2. To this end we start with three copies of V, which we call V0,V1,V2. The first copy, V0, is supposed to check classical reachability of t(n) from s(m) in V , whereas the other two copies handle other case of Lemma 5.2. We add a new state s\u2032 and a gadget that from s\u2032 either jumps to s in V0, or first increments the counter arbitrarily (via a loop) and then jumps to s in V1. Every state in V1 is also connected to the same state in V2 with a zero test. Then finally we add a new state t\u2032 and ensure that starting from t in either V0\nor V2, one can jump to t\u2032 without changing the counter. This completes the construction fo A; as its two configurations we choose s\u2032(m) and t\u2032(n). Note that the size of A is linear in the size of V.\nLet us now argue why classical reachability from s(m) to t(n) in V. is equivalent to monus reachability from s\u2032(m) to t\u2032(n) in A. By Lemma 5.2 the former is equivalent to (a) classical reachability in V or (b) existence of a state q such that t(n) is classically reachable form q(0) and s(m) is classically coverable from q(0) in the reverse VASS. The second part of case (b) can be equivalently restated as existence of a counter value \u2113 \u2265 m such that q(0) is classically reachable from s(\u2113) in V. Both parts of case (b) together thus are equivalent to existence of a run \u03c1 from s(\u2113) to t(n) under classical semantics such that \u2113 > m and \u03c1 reaches counter value 0 in some state q. It is not difficult to see that reachability from s\u2032(m) to t\u2032(n) in A by going through V1 and V2 is equivalent to case (b), whereas going through V0 is equivalent to case (a). Since t\u2032 can only be reached from s\u2032 in A by going through these copies of V, we thus have proven the reduction correct. \u25c0"
        },
        {
            "heading": "C.1.2 Proof of Proposition 5.3",
            "text": "Statement- Monus reachability in 1-VASS is NP-hard under binary encoding.\nProof. Given a1, . . . , an, a in binary, we construct the 1-VASS in Figure 5. It is clear from the construction that in this 1-VASS, we can monus reach qf (1) from q0(0) if and only if the subset-sum instance is positive: If we reach qf (1) from q0(0) under classical semantics, then it is clear that our sum equates to exactly a. On the other hand, the only possible subtraction in this 1-VASS is the transition qn+1\n\u2212a\u2212\u2212\u2192 qf , which, if performed in monus semantics, would lead to qf (0) instead of qf (1). Therefore all runs reaching the latter configuration are also valid under classical semantics. This completes the proof. \u25c0"
        },
        {
            "heading": "C.2 Coverability for One-dimensional VASS",
            "text": ""
        },
        {
            "heading": "C.2.1 Proof of Lemma 5.6",
            "text": "Statement- Let V be a 1-VASS with configurations s(m) and t(n). Then t(n) is monus coverable from s(m) in V if and only if t(n) is coverable from s(m) in V under classical semantics or there is a state q of V such that t(n) is coverable from q(0) in V under classical semantics and s(m) is coverable from q(0) in V rev under classical semantics.\nProof. For the only if direction, assume t(n) is monus coverable from s(m) in V. If the witnessing run \u03c1 does not reach counter value 0 anywhere in-between, then clearly we also have coverability under classical semantics. On the other hand, let q(0) be the last configuration before t(n) in \u03c1 counter value 0. Then by the same argument as before, t(n) is monus coverable from q(0) in V under classical semantics. Moreover, q(0) is monus reachable from s(m) in V , which by Lemma 3.10 implies that s(m) is coverable from q(0) in V rev under classical semantics.\nFor the if direction, note that coverability of t(n) from s(m) under classical semantics obviously implies the same under monus semantics. Therefore let us assume that there is a state q of V such that t(n) is coverable from q(0) in V under classical semantics and s(m) is coverable from q(0) in V rev under classical semantics. Applying Lemma 3.10 to the latter yields monus reachability of q(0) from s(m) in V . If we take the witnessing run for this, and append to it the run that covers t(n) from q(0), we obtain a run that monus covers t(n) from s(m) as required. \u25c0\nCONCUR 2023"
        }
    ],
    "title": "Monus semantics in vector addition systems with states",
    "year": 2023
}