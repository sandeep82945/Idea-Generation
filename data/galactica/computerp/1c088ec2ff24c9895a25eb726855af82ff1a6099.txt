Community detection techniques are useful tools for social media platforms to discover tightly connected groups of users who share common interests. However, this functionality often comes at the expense of potentially exposing individuals to privacy breaches by inadvertently revealing their tastes or preferences. Therefore, some users may wish to safeguard their anonymity and opt out of community detection for various reasons, such as affiliation with political or religious organizations. In this study, we address the challenge of community membership hiding, which involves strategically altering the structural properties of a network graph to prevent one or more nodes from being identified by a given community detection algorithm.We tackle this problem by formulating it as a constrained counterfactual graph objective, and we solve it via deep reinforcement learning. We validate the effectiveness of our method through two distinct tasks: node and community deception. Extensive experiments show that our approach overall outperforms existing baselines in both tasks. 1 conclusions can be drawn for the other community detection algorithms considered and using different combinations of values for the key parameters 𝜏 and 𝛽 . The complete results for the node deception task are outlined in Appendix C.1. Community Deception Task.We evaluate our method against the baselines outlined in Section 6.3, using the same datasets, detection algorithms, and 𝜏 constraint values as the node deception task, with the only difference being the variation of 𝛽 (1, 3, 5) due to its distinct interpretation. For smaller to medium-sized datasets, the number of rewirings is fixed based on [8]. Conversely, for larger datasets, we define 𝛽 as a ratio of the community size to hide (e.g., 𝛽 = 0.1|C𝑖 |). As with the node deception task, we examine two distinct scenarios: symmetric and asymmetric. The former involves our DRL-Agent trained on the same modularity-based community detection algorithm as used during deception, i.e., the Greedy algorithm. The latter, instead, assesses the agent’s capability to adapt to a different community detection algorithm (Louvain) during deception, despite being still trained on the Greedy algorithm (transferability). In Fig. 4 and Fig. 5, we report the Deception Score (H ) and NMI score for our DRL-Agent in the symmetric and asymmetric setup, respectively. Much like our findings in the node deception task, our approach finds the optimal trade-off between these two quality metrics. This observation holds even more significance for the larger dataset (vote), where our agent not only achieves the highest Deception Score but also the best NMI score. Moreover, our DRL-Agent demonstrates the ability to transfer its performance to a community detection algorithm that differs from the one it was trained on. In summary, across various algorithms and datasets, a common trend emerges: as the 𝜏 similarity constraint increases, the performance of the DRL-Agent on the community deception task typically decreases. This phenomenon may arise because the agent achieves the node deception objective with fewer rewirings, resulting in
fewer actions targeting nodes with high centrality, as they are typically among the first analyzed by the algorithm. The full results of the community deception task can be found in Appendix C.2. 6.5 parameter sensitivity The effectiveness of ourDRL-Agent relies on two critical parameters: (𝑖) the similarity threshold (𝜏 ) used to determine whether the node deception goal has been achieved or not, and (𝑖𝑖) the budget (𝛽) to limit the effort – i.e., graph modifications – performed to achieve the goal. In this section, we analyze their impact. Specifically, in Table 2 and Table 3, we explore how the SR and NMI metrics for the node deception task are influenced by varying the values of 𝜏 and 𝛽 , while keeping the detection algorithm 𝑓 (·) and dataset fixed. These results reinforce the previously mentioned findings: our method consistently achieves a superior balance between SR and NMI. Indeed, for instance, Roam has a milder impact on the graph structure, but it frequently fails to achieve the node deception goal. On the other hand, our DRL-Agent has the best success rate without overly altering the original graph. 7 ethical implications As highlighted in the motivation for this work, community membership hiding algorithms can serve as valuable tools for safeguarding the privacy of social network users. Furthermore, these methods can be used to protect individuals at risk, including journalists or opposition activists, in regions governed by authoritarian regimes. Additionally, these techniques can combat online criminal activities by modifying network connections to infiltrate espionage agents or disrupt communications among malicious users. However, node-hiding techniques can also be exploited to pursue harmful goals. For instance, malicious individuals can strategically employ these methods to evade network analysis tools, often used by law enforcement agencies for public safety, enabling them to mask their illicit or criminal activities on the network. 8 conclusion and futurework This paper tackled the challenge of community membership hiding, which entails strategically modifying the structural characteristics of a network graph to prevent specific nodes from being detected by a community detection algorithm. To address this problem, we formulated it as a constrained counterfactual graph objective and employed deep reinforcement learning for its solution. We conducted extensive experiments to validate our method’s effectiveness in two distinct tasks: node and community deception. Results demonstrated that our approach strikes the best balance between achieving the deception goal and the required cost of graph modifications compared to existing baselines in both tasks.