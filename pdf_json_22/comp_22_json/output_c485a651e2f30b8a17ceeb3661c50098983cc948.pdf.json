{
    "abstractText": "With the wide deployment of autonomous multi-agent robotic systems, control solutions based on centralized algorithms have been developed. Even though these centralized algorithms can optimize the performance of the multi-agent robotic systems, they require a lot of computational effort, and a centralized unit to undertake the whole process. Yet, many robotic platforms like some ground robots and even more, aerial robots, do not have the computing capacity to execute this kind of frameworks on their on onboard computers. While cloud computing has been used as a solution for offloading computationally demanding robotic applications, from the robots to the cloud servers, the latency they introduce to the system has set them unsuitable for time sensitive applications. To overcome these challenges, this article promotes an Edge computing-based Centralized Nonlinear Model Predictive Control (E-CNMPC) framework to control, and optimize, in swarm formation, the trajectory of multiple ground robotic agents, while taking under consideration potential collisions. The data processing procedure for the time critical application of controlling the robots in a centralized manner, is offloaded to the edge machine, thus the framework benefits from the provided edge resources, features, and centralized optimal performance, while the latency remains bounded in desired values. Besides, real experiments were conducted as a proof-of-concept of the proposed framework to evaluate the system\u2019s performance and effectiveness. INDEX TERMS Edge-based Centralized Nonlinear Model Predictive Control (E-CNMPC), Edge Computing, Kubernetes, Robotics",
    "authors": [
        {
            "affiliations": [],
            "name": "ACHILLEAS SANTI SEISA"
        },
        {
            "affiliations": [],
            "name": "BJ\u00d6RN LINDQVIST"
        },
        {
            "affiliations": [],
            "name": "SUMEET GAJANAN SATPUTE"
        }
    ],
    "id": "SP:e7d024a58d7dd49e9a4fc22713e6d52d5cbf5269",
    "references": [
        {
            "authors": [
                "N.A. Sulieman",
                "L. Ricciardi Celsi",
                "W. Li",
                "A. Zomaya",
                "M. Villari"
            ],
            "title": "Edge-oriented computing: A survey on research and use cases",
            "venue": "Energies, vol. 15, no. 2, p. 452, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "G. Barb",
                "M. Otesteanu"
            ],
            "title": "4g/5g: A comparative study and overview on what to expect from 5g",
            "venue": "2020 43rd International Conference on Telecommunications and Signal Processing (TSP). IEEE, 2020, pp. 37\u2013 40.",
            "year": 2020
        },
        {
            "authors": [
                "H. Zhu",
                "M. Sharma",
                "K. Pfeiffer",
                "M. Mezzavilla",
                "J. Shen",
                "S. Rangan",
                "L. Righetti"
            ],
            "title": "Enabling remote whole-body control with 5g edge computing",
            "venue": "2020 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2020, pp. 3553\u20133560.",
            "year": 2020
        },
        {
            "authors": [
                "B. Dhiyanesh"
            ],
            "title": "Dynamic resource allocation for machine to cloud communications robotics cloud",
            "venue": "2012 International Conference on Emerging Trends in Electrical Engineering and Energy Management (ICETEEEM). IEEE, 2012, pp. 451\u2013454.",
            "year": 2012
        },
        {
            "authors": [
                "M. Groshev",
                "G. Baldoni",
                "L. Cominardi",
                "A. de la Oliva",
                "R. Gazda"
            ],
            "title": "Edge robotics: are we ready? an experimental evaluation of current vision and future directions",
            "venue": "Digital Communications and Networks, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "T. Haidegger",
                "P. Galambos",
                "I.J. Rudas"
            ],
            "title": "Robotics 4.0\u2013are we there yet?",
            "venue": "IEEE 23rd International Conference on Intelligent Engineering Systems (INES). IEEE,",
            "year": 2019
        },
        {
            "authors": [
                "J. Wan",
                "S. Tang",
                "H. Yan",
                "D. Li",
                "S. Wang",
                "A.V. Vasilakos"
            ],
            "title": "Cloud robotics: Current status and open issues",
            "venue": "IEEE Access, vol. 4, pp. 2797\u2013 2807, 2016.",
            "year": 2016
        },
        {
            "authors": [
                "G. Hu",
                "W.P. Tay",
                "Y. Wen"
            ],
            "title": "Cloud robotics: architecture, challenges and applications",
            "venue": "IEEE network, vol. 26, no. 3, pp. 21\u201328, 2012.",
            "year": 2012
        },
        {
            "authors": [
                "O. Saha",
                "P. Dasgupta"
            ],
            "title": "A comprehensive survey of recent trends in cloud robotics architectures and applications",
            "venue": "Robotics, vol. 7, no. 3, p. 47, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "J.P. Queralta",
                "L. Qingqing",
                "Z. Zou",
                "T. Westerlund"
            ],
            "title": "Enhancing autonomy with blockchain and multi-access edge computing in distributed robotic systems",
            "venue": "2020 Fifth International Conference on Fog and Mobile Edge Computing (FMEC). IEEE, 2020, pp. 180\u2013187.",
            "year": 2020
        },
        {
            "authors": [
                "G. Toffetti",
                "T.M. Bohnert"
            ],
            "title": "Cloud robotics with ros",
            "venue": "Robot operating system (ROS). Springer, 2020, pp. 119\u2013146.",
            "year": 2020
        },
        {
            "authors": [
                "A.S. Seisa",
                "G. Damigos",
                "S.G. Satpute",
                "A. Koval",
                "G. Nikolakopoulos"
            ],
            "title": "Edge computing architectures for enabling the realisation of the next generation robotic systems",
            "venue": "2022 30th Mediterranean Conference on Control and Automation (MED), 2022, pp. 487\u2013493.",
            "year": 2022
        },
        {
            "authors": [
                "J. Luo",
                "L. Zhang",
                "H. Zhang"
            ],
            "title": "Design of a cloud robotics middleware based on web service technology",
            "venue": "2017 18th International Conference on Advanced Robotics (ICAR). IEEE, 2017, pp. 487\u2013492.",
            "year": 2017
        },
        {
            "authors": [
                "S.A. Miratabzadeh",
                "N. Gallardo",
                "N. Gamez",
                "K. Haradi",
                "A.R. Puthussery",
                "P. Rad",
                "M. Jamshidi"
            ],
            "title": "Cloud robotics: A software architecture: For heterogeneous large-scale autonomous robots",
            "venue": "2016 world automation congress (WAC). IEEE, 2016, pp. 1\u20136.",
            "year": 2016
        },
        {
            "authors": [
                "R. Rahimi",
                "C. Shao",
                "M. Veeraraghavan",
                "A. Fumagalli",
                "J. Nicho",
                "J. Meyer",
                "S. Edwards",
                "C. Flannigan",
                "P. Evans"
            ],
            "title": "An industrial robotics application with cloud computing and high-speed networking",
            "venue": "2017 First IEEE International Conference on Robotic Computing (IRC). IEEE, 2017, pp. 44\u201351.",
            "year": 2017
        },
        {
            "authors": [
                "S. Rosa",
                "L.O. Russo",
                "B. Bona"
            ],
            "title": "Towards a ros-based autonomous cloud robotics platform for data center monitoring",
            "venue": "Proceedings of the 2014 IEEE Emerging Technology and Factory Automation (ETFA). IEEE, 2014, pp. 1\u20138.",
            "year": 2014
        },
        {
            "authors": [
                "K.E. Chen",
                "Y. Liang",
                "N. Jha",
                "J. Ichnowski",
                "M. Danielczuk",
                "J. Gonzalez",
                "J. Kubiatowicz",
                "K. Goldberg"
            ],
            "title": "Fogros: An adaptive framework for automating fog robotics deployment",
            "venue": "2021 IEEE 17th International Conference on Automation Science and Engineering (CASE). IEEE, 2021, pp. 2035\u20132042.",
            "year": 2021
        },
        {
            "authors": [
                "P. Huang",
                "L. Zeng",
                "X. Chen",
                "K. Luo",
                "Z. Zhou",
                "S. Yu"
            ],
            "title": "Edge robotics: Edge-computing-accelerated multi-robot simultaneous localization and mapping",
            "venue": "IEEE Internet of Things Journal, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "F. Okumu\u015f",
                "A. Fatih"
            ],
            "title": "Exploring the feasibility of a multifunctional software platform for cloud robotics",
            "venue": "2018 International Conference on Artificial Intelligence and Data Processing (IDAP). IEEE, 2018, pp. 1\u20134.",
            "year": 2018
        },
        {
            "authors": [
                "D. Dechouniotis",
                "D. Spatharakis",
                "S. Papavassiliou"
            ],
            "title": "Edge robotics experimentation over next generation iiot testbeds",
            "venue": "NOMS 2022-2022 IEEE/IFIP Network Operations and Management Symposium. IEEE, 2022, pp. 1\u20133.",
            "year": 2022
        },
        {
            "authors": [
                "F.L.M. de Sousa",
                "M.C. Silva",
                "R.A.R. Oliveira"
            ],
            "title": "Applying edge ai towards deep-learning-based monocular visual odometry model for mobile robotics.",
            "year": 2022
        },
        {
            "authors": [
                "D. Spatharakis",
                "M. Avgeris",
                "N. Athanasopoulos",
                "D. Dechouniotis",
                "S. Papavassiliou"
            ],
            "title": "A switching offloading mechanism for path planning and localization in robotic applications",
            "venue": "2020 International Conferences on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData) and IEEE Congress on Cybermatics (Cybermatics). IEEE, 2020, pp. 77\u201384.",
            "year": 2020
        },
        {
            "authors": [
                "G. Mehrooz",
                "E. Ebeid",
                "P. Schneider-Kamp"
            ],
            "title": "System design of an opensource cloud-based framework for internet of drones application",
            "venue": "2019 22nd Euromicro Conference on Digital System Design (DSD). IEEE, 2019, pp. 572\u2013579.",
            "year": 2019
        },
        {
            "authors": [
                "X. Wang",
                "H. Guo"
            ],
            "title": "Mobility-aware computation offloading for swarm robotics using deep reinforcement learning",
            "venue": "2021 IEEE 18th Annual Consumer Communications & Networking Conference (CCNC). IEEE, 2021, pp. 1\u20134.",
            "year": 2021
        },
        {
            "authors": [
                "H. Sun",
                "H. Xi"
            ],
            "title": "Resource optimization technology using genetic algorithm in uav-assisted edge computing environment",
            "venue": "Journal of Robotics, vol. 2022, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "S. Wang",
                "N. Kong"
            ],
            "title": "Network resource allocation strategy based on uav cooperative edge computing",
            "venue": "Journal of Robotics, vol. 2022, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "L. Turnbull",
                "B. Samanta"
            ],
            "title": "Cloud robotics: Formation control of a multi robot system utilizing cloud infrastructure",
            "venue": "2013 Proceedings of IEEE Southeastcon. IEEE, 2013, pp. 1\u20134.",
            "year": 2013
        },
        {
            "authors": [
                "K.-E. \u00c5rz\u00e9n",
                "P. Skarin",
                "W. T\u00e4rneberg",
                "M. Kihl"
            ],
            "title": "Control over the edge cloud-an mpc example",
            "venue": "1st International Workshop on Trustworthy and Real-time Edge Computing for Cyber-Physical Systems, Nashville, United States, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "P. Skarin",
                "J. Eker",
                "M. Kihl",
                "K.-E. \u00c5rz\u00e9n"
            ],
            "title": "Cloud-assisted model predictive control",
            "venue": "2019 IEEE International Conference on Edge Computing (EDGE). IEEE, 2019, pp. 110\u2013112.",
            "year": 2019
        },
        {
            "authors": [
                "A.S. Seisa",
                "S.G. Satpute",
                "B. Lindqvist",
                "G. Nikolakopoulos"
            ],
            "title": "An edge architecture oriented model predictive control scheme for an autonomous uav mission",
            "venue": "2022 IEEE 31st International Symposium on Industrial Electronics (ISIE), 2022, pp. 1195\u20131201.",
            "year": 2022
        },
        {
            "authors": [
                "A. Papadimitriou",
                "H. Jafari",
                "S.S. Mansouri",
                "G. Nikolakopoulos"
            ],
            "title": "Multi-stage nmpc for a mav based collision free navigation under varying communication delays",
            "venue": "arXiv preprint arXiv:2208.03692, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "A.S. Seisa",
                "S.G. Satpute",
                "B. Lindqvist",
                "G. Nikolakopoulos"
            ],
            "title": "An Edge- Based Architecture for Offloading Model Predictive Control for UAVs",
            "venue": "Robotics, vol. 11, no. 4, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "P. Skarin",
                "J. Eker",
                "K.-E. \u00c5rz\u00e9n"
            ],
            "title": "A cloud-enabled rate-switching mpc architecture",
            "venue": "2020 59th IEEE Conference on Decision and Control (CDC). IEEE, 2020, pp. 3151\u20133158.",
            "year": 2020
        },
        {
            "authors": [
                "P. Skarin",
                "J. Eker",
                "K.-E. \u00c5rz\u00e9n"
            ],
            "title": "Cloud-based model predictive control with variable horizon",
            "venue": "IFAC-PapersOnLine, vol. 53, no. 2, pp. 6993\u20137000, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "X. Yang",
                "J. Ni"
            ],
            "title": "A cloud-edge combined control system with mpc parameter optimization for path tracking of unmanned ground vehicle",
            "venue": "Proceedings of the Institution of Mechanical Engineers, Part D: Journal of Automobile Engineering, p. 09544070221080312, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "J. Hu",
                "A. Bruno",
                "D. Zagieboylo",
                "M. Zhao",
                "B. Ritchken",
                "B. Jackson",
                "J.Y. Chae",
                "F. Mertil",
                "M. Espinosa",
                "C. Delimitrou"
            ],
            "title": "To centralize or not to centralize: A tale of swarm coordination",
            "venue": "arXiv preprint arXiv:1805.01786, 2018.",
            "year": 1805
        },
        {
            "authors": [
                "Y. Kuwata",
                "J.P. How"
            ],
            "title": "Cooperative distributed robust trajectory optimization using receding horizon milp",
            "venue": "IEEE Transactions on Control Systems Technology, vol. 19, no. 2, pp. 423\u2013431, 2010.",
            "year": 2010
        },
        {
            "authors": [
                "J. Huang",
                "Z. Ji",
                "S. Xiao",
                "C. Jia",
                "Y. Jia",
                "X. Wang"
            ],
            "title": "Multi-agent vehicle formation control based on mpc and particle swarm optimization algorithm",
            "venue": "2022 IEEE 6th Information Technology and Mechatronics Engineering Conference (ITOEC), vol. 6. IEEE, 2022, pp. 288\u2013292.",
            "year": 2022
        },
        {
            "authors": [
                "E. Nejabat",
                "A. Nikoofard"
            ],
            "title": "Switched robust model predictive based controller for uav swarm system",
            "venue": "2021 29th Iranian Conference on Electrical Engineering (ICEE). IEEE, 2021, pp. 721\u2013725.",
            "year": 2021
        },
        {
            "authors": [
                "B. Lindqvist",
                "P. Sopasakis",
                "G. Nikolakopoulos"
            ],
            "title": "A scalable distributed collision avoidance scheme for multi-agent uav systems",
            "venue": "2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2021, pp. 9212\u20139218.",
            "year": 2021
        },
        {
            "authors": [
                "S.S. Mansouri",
                "G. Nikolakopoulos",
                "T. Gustafsson"
            ],
            "title": "Distributed model predictive control for unmanned aerial vehicles",
            "venue": "2015 Workshop on Research, Education and Development of Unmanned Aerial Systems (RED- UAS). IEEE, 2015, pp. 152\u2013161.",
            "year": 2015
        },
        {
            "authors": [
                "J. Wehbeh",
                "S. Rahman",
                "I. Sharf"
            ],
            "title": "Distributed model predictive control for uavs collaborative payload transport",
            "venue": "2020 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2020, pp. 11 666\u201311 672.",
            "year": 2020
        },
        {
            "authors": [
                "J. Zhan",
                "Z. Ma",
                "L. Zhang"
            ],
            "title": "Data-driven modeling and distributed predictive control of mixed vehicle platoons",
            "venue": "IEEE Transactions on Intelligent Vehicles, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "A. Sahu",
                "H. Kandath",
                "K.M. Krishna"
            ],
            "title": "Model predictive control based algorithm for multi-target tracking using a swarm of fixed wing uavs",
            "venue": "2021 IEEE 17th International Conference on Automation Science and Engineering (CASE). IEEE, 2021, pp. 1255\u20131260.",
            "year": 2021
        },
        {
            "authors": [
                "S. Graffione",
                "C. Bersani",
                "R. Sacile",
                "E. Zero"
            ],
            "title": "Model predictive control of a vehicle platoon",
            "venue": "2020 IEEE 15th International Conference of System of Systems Engineering (SoSE). IEEE, 2020, pp. 513\u2013518.",
            "year": 2020
        },
        {
            "authors": [
                "S. Sabino",
                "N. Horta",
                "A. Grilo"
            ],
            "title": "Centralized unmanned aerial vehicle mesh network placement scheme: A multi-objective evolutionary algorithm approach",
            "venue": "Sensors, vol. 18, no. 12, p. 4387, 2018.",
            "year": 2018
        },
        {
            "authors": [
                "B. Lindqvist",
                "S.S. Mansouri",
                "P. Sopasakis",
                "G. Nikolakopoulos"
            ],
            "title": "Collision avoidance for multiple micro aerial vehicles using fast centralized nonlinear model predictive control",
            "venue": "IFAC-PapersOnLine, vol. 53, no. 2, pp. 9303\u20139309, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "S. Hu",
                "W. Shi",
                "G. Li"
            ],
            "title": "Cec: A containerized edge computing framework for dynamic resource provisioning",
            "venue": "IEEE Transactions on Mobile Computing, 2022.",
            "year": 2022
        },
        {
            "authors": [
                "S. B\u00f6hm",
                "G. Wirtz"
            ],
            "title": "Profiling lightweight container platforms: Microk8s and k3s in comparison to kubernetes.",
            "venue": "ZEUS,",
            "year": 2021
        },
        {
            "authors": [
                "Y. Xiong",
                "Y. Sun",
                "L. Xing",
                "Y. Huang"
            ],
            "title": "Extend cloud to edge with kubeedge",
            "venue": "2018 IEEE/ACM Symposium on Edge Computing (SEC). IEEE, 2018, pp. 373\u2013377.",
            "year": 2018
        },
        {
            "authors": [
                "I.A. Tsokalo",
                "H. Wu",
                "G.T. Nguyen",
                "H. Salah",
                "F.H.P. Fitzek"
            ],
            "title": "Mobile edge cloud for robot control services in industry automation",
            "venue": "2019 16th IEEE Annual Consumer Communications Networking Conference (CCNC), 2019, pp. 1\u20132.",
            "year": 2019
        },
        {
            "authors": [
                "P. Kochovski",
                "R. Sakellariou",
                "M. Bajec",
                "P. Drobintsev",
                "V. Stankovski"
            ],
            "title": "An architecture and stochastic method for database container placement in the edge-fog-cloud continuum",
            "venue": "2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 2019, pp. 396\u2013 405.",
            "year": 2019
        },
        {
            "authors": [
                "R.P. Salas",
                "J. Ho"
            ],
            "title": "A remote/virtual robotics lab",
            "venue": "2021 IEEE Frontiers in Education Conference (FIE), 2021, pp. 1\u20134.",
            "year": 2021
        },
        {
            "authors": [
                "S. Aldegheri",
                "N. Bombieri",
                "S. Germiniani",
                "F. Moschin",
                "G. Pravadelli"
            ],
            "title": "A containerized ros-compliant verification environment for robotic systems",
            "venue": "2021 Design, Automation Test in Europe Conference Exhibition (DATE), 2021, pp. 222\u2013225.",
            "year": 2021
        },
        {
            "authors": [
                "F. Lumpp",
                "M. Panato",
                "F. Fummi",
                "N. Bombieri"
            ],
            "title": "A container-based design methodology for robotic applications on kubernetes edge-cloud architectures",
            "venue": "2021 Forum on specification Design Languages (FDL), 2021, pp. 01\u201308.",
            "year": 2021
        },
        {
            "authors": [
                "P. Sopasakis",
                "E. Fresk",
                "P. Patrinos"
            ],
            "title": "Open: Code generation for embedded nonconvex optimization",
            "venue": "International Federation of Automatic Control, 2020.",
            "year": 2020
        },
        {
            "authors": [
                "B. Hermans",
                "G. Pipeleers",
                "P.P. Patrinos"
            ],
            "title": "A penalty method for nonlinear programs with set exclusion constraints",
            "venue": "Automatica, vol. 127, p. 109500, 2021.",
            "year": 2021
        },
        {
            "authors": [
                "K. Li",
                "H. Tu"
            ],
            "title": "Design and implementation of autonomous mobility algorithm for home service robot based on turtlebot",
            "venue": "2021 IEEE 5th Information Technology,Networking,Electronic and Automation Control Conference (ITNEC), vol. 5, 2021, pp. 1095\u20131099.",
            "year": 2021
        }
    ],
    "sections": [
        {
            "text": "INDEX TERMS Edge-based Centralized Nonlinear Model Predictive Control (E-CNMPC), Edge Computing, Kubernetes, Robotics\nI. INTRODUCTION\nMANY key technologies have emerged over the recentyears to encounter the challenges of massive data production and processing. From cloud and edge computing for data storage and processing to 4G/LTE and 5G networks for low latency, high bandwidth, data transferring [1]\u2013[3]. Researchers seek to take advantage of these technologies and integrate them to their robotic applications [4]\u2013[11]. Edge computing - 5G enabled robotic applications will provide the advantages of computational resources, features for scalable, automated and self-healing applications, and low latency. Through edge-based architectures [12], robots will be able to communicate, exchange information and cooperate with each other to execute complex tasks in optimal ways. In that context, centralized schemes will play an important role to\nensure the optimization of these multi-agent systems, while edge computing technologies will manage the computational workload over powerful clusters.\nCloud and edge computing have been used for numerous different robotic applications, based on Robotic Operating System (ROS), like in [13]\u2013[15] or in [16], where researchers developed a system for a ground robot to autonomously navigate inside data center rooms and collect useful measurements. The different processes and the Graphical User Interface (GUI) for the measurement visualization are handled by the cloud. Mainly, cloud and edge have been studied for offloading computationally intensive tasks, such as simultaneous localization and mapping (SLAM). That is the subject in [17]\u2013[20], where researchers created a framework to expand the ROS environment so it would be easy for users\nVOLUME 4, 2016 1\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nto offload the SLAM algorithms to the edge servers [17], and architectures for a multi-ground-robot [18], [19] or singlerobot [20] edge-based SLAM mechanism. While the previous works focused on the SLAM problem, [21] and [22] asses the problem of deep learning based visual odometry and the problem of path planning and localization, respectively, for mobile robots through the edge. In [23], a cloud-based framework is presented for Unmanned Aerial Vehicles (UAVs), where the resourced-constrained UAVs operates as a client and connects to the cloud servers to access information about their mission, thus it can overcome the limited computational processing capabilities. In [24], a swarm of UAVs has access to a mobile edge server to offload the computation tasks based on a deep reinforcement learning model, while respecting latency requirements. On the other hand, a powerful UAV has been deployed, as an assisted edge computing node, in [25] and in [26]. In these cases, computation procedures can be offloaded from ground users to the UAV edge node or, if the UAV can not handle the process, it operates as a relay to offload the task to the ground base station. The researchers also took under consideration a communication strategy to minimize the total energy consumption.\nEven though some studies like [27], where a cloud-based formation control was applied for multiple robots, none of the above works are focused on the centralized or distributed control properties that cloud and edge can offer. Model Predictive controller (MPC) schemes, which are the base of the proposed framework, have been assisted by edge or cloud in several cases like [28]\u2013[35]. All these works though, investigate the control system for only one agent as in [30] and in [32], where we introduced architectures to control an UAV in a simulation and real-world environment respectively. For multi-agent systems, distributed or centralized frameworks should be implemented. A detailed analysis for centralized and distributed control schemes for UAV swarms based on cloud and edge computing is presented in [36]. In this work, only separately systems are studied for UAV swarms task allocation missions. Either a cloud system is utilized for the centralized control system or edge servers are used. The centralized schemes clearly outperform the distributed one when the number of agents that form the swarm is small. However, when the number of agents is large enough, the centralized framework introduces major scheduling latencies, while for the distributed framework, the scheduling latency maintains the same. A hybrid framework was not investigated but the authors suggest that it could probably exceed the performance of the two studied schemes. Distributed approaches were introduced in [37] and in [38] to achieve optimized behavior but at the same time reduced computational complexity for the cooperation of multiple UAVs. In [39], a decentralized control scheme based on leader-follower formation for an UAV swarm system was presented. In [40] and in [41], distributed Nonlinear Model Predictive Control (NMPC) for collision avoidance between multiple aerial agents was presented, while in [42] distributed and centralized MPC frameworks were evaluated for coop-\nerative motion of multiple UAVs. In [43], authors proposed and compared centralized and decentralized MPC formulations for controlling the UAVs\u2019 maneuvers when carrying a payload. In [44], a strategy with centralized and distributed MPC algorithms was addressing the problem of controlling platoons with both autonomous and human-driven vehicles, and in [45] distributed and centralized MPC formulations are also studied for tracking multiple targets using a swarm of UAVs. Centralized schemes were proposed in [46]\u2013[48], for controlling platoons based on leader\u2019s behavior, for placing UAVs to form a mesh network, and for preventing potential collisions between multiple UAVs navigating in a narrow area, respectively.\nAnother important part of this work, is the integration of cloud services and technologies to our framework, to make our application scalable and robust. Containerized applications should be implemented in a way to minimize edge latency and enable resource provision as in [49]. Afterwards, a proper orchestrator should be used. Thus, it has been proposed the utilization of microk8s which is a lightweight container platform comparable to kubernetes [50]. In [51], authors suggested an infrastructure to connect the cloud to the edge, and expand the cloud services and kubernetes management to the edge through a proposed network protocol, while in [52], a remote controller was implemented in a form of a docker containerized application and was running through a mobile edge server. In [53], an automated process based on stochastic processes and implemented through kubernetes for optimizing the distribution of containers to the cloud, edge and fog, was introduced. A virtual robotics lab, based on a kubernetes cluster implementation, was presented in [54], for students to access it, get familiar with it and develop their robotic applications. Finally, a framework based on docker, kubernetes and ROS for monitoring containerized robot tasks, was proposed in [55] and a mechanism for deploying robotic containerized application to the edge and the cloud was presented in [56].\nThe motivation behind this work was to control multiple agents in an optimized manner, while keeping their swarm behavior. To the best of our knowledge, the existing frameworks rely on distributed methods because the needed computational effort for centralized methods is drastically increasing with respect to the increase in the number of agents. Thus, robots\u2019 onboard computers cannot execute these centralized controllers since the controller fails under resource constraints, like the limited Central Processing Unit (CPU) and the Random-Access Memory (RAM) capacity. On the other hand, centralized control schemes seems to have enhanced performance as quoted in [36], but need to be executed in an powerful external centralized unit. The improved centralized performance can be in fact, of great importance for our application because controlling multiple agents is a time critical task and we must ensure that potential collisions will be prevented. In the proposed work, the parameters of the optimization problem, which significantly increase the complexity, are depended on the number of agents, the prediction"
        },
        {
            "heading": "2 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nFIGURE 1. Concept of edge computing-based centralized control scheme for multiple ground robots\nhorizon, the initial tolerance, the hard constrains for the collision avoidance and the swarm behavior. In order to overcome the drawback of computational limitations, our proposed framework is based on edge computing solutions by utilizing an edge machine. Suggested solutions based on cloud computing cannot be applied for controlling robots in realtime, since the system will fail due to the introduced latency. The novel proposed E-CNMPC framework is offloaded to an edge machine that hosts a kubernetes cluster. The kubernetes cluster and the ground robots exchange messages for the operation of navigating the robots in the environment in a swarm behavior and at the same time prevent any potential collisions, while this concept is depicted in Fig. 1. The edge machine is located in physical proximity to ground robots and, therefore, remarkably shortens data communication distance, lowers offloading transmission delay, and allows the advanced quality of kubernetes services.\nThe proof-of-concept experimental analysis corroborates the feasibility and efficiency of the proposed framework, while demonstrating the advantages of the edge-based system. Thus, a number of key contributions can be highlighted.\nThe initial contribution stems from the fact that the proposed E-CNMPC framework is based on a novel robot-edge architecture to enable relatively real-time trajectory control for a multi-agent system. In the proposed approach, each agent can offload their states to the edge so they do not need to run the computationally demanding MPC on their onboard computer. Thus we can secure the availability of sufficient resources for the execution of the controller, even when we want to change the values of some MPC parameters, such as the MPC prediction horizon, that improve the behavior of the system but on the other hand increase its complexity. Moreover, edge kubernetes cluster can give the capability of assigning resources for the application, thus we can request more resources on demand, which is of great importance for a centralized scheme, where the number of agents and several control parameters, might vary, thus the required resources will vary as well.\nThe second contribution concerns the novel architecture of the proposed framework that it is utilizing technologies such\nas containers and orchestrators that enable novel capabilities from a control systems approach, as scalability, robustness, management and overall resiliency. The proposed controller and the related architecture can be fast and easily deployed and redeployed, in case of failure, in any external edge machine. In addition, the proposed control architecture is introducing a novel concept in edge based closed loop systems as it is running in a form of containerized application, thus it does not have software dependencies from the host machine for instance the robot\u2019s onboard computer or the users operating system. Users will just have to connect to the edge machine to control the robotic fleet, from any device, without having to carry computational heavy devices, and will not have to worry whether their computer or device can handle the execution of the application.\nBy investigating the current state-of-art, we realized that the existing multi-agent systems are based on distributed control schemes that fall behind in terms of performance. Our centralized optimization framework considers all the ground agents and solves the optimization problem for the whole system online and in an edge architecture orientation that forms the third contribution. As such the E-CNMPC framework is able to generate control actions for the trajectories of every agent, in an optimal manner and to optimizes the behavior of the whole system as in [48]. The designed framework differs from [48], in terms of architecture since our framework is based on a total novel robot-edge architecture and real-life experiments.\nFinally, the last contribution is related to the comparison of the E-CNMPC framework to [48]. In this case we introduce a system that provides a swarm-kind behavior for the cooperation of the agents. Even though most swarm systems that are based on classical approaches, such as the leader-follower, the proposed E-CNMPC guarantees the swarm behavior through hard constrains. Minimum and maximum distances have been considered, thus the agents would always try to keep the swarm behavior while navigating in an area and avoiding collision between each other and the surrounding environment. In Fig. 2 this concept is demonstrated, where rswarm represents the radius for maximum allowed distance\nVOLUME 4, 2016 3\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nbetween agents, and rsafe the minimum allowed distance between agents. The E-CNMPC takes care that these constrains would not be violated, or if they do violated, the optimizer will generate trajectories for all the ground robots, in order to move accordingly and respect again the constrains.\nThe rest of the article is divided into discrete sections and subsections to present and describe the different components of the proposed framework, as well the results of the experimental setup. The developed framework is presented in Section II. This Section is divided into several parts in an effort to address in detail the main implementations, the developments and the multiple proposed components of this work. In Section III, we demonstrate the experimental setup for the multi-agent system and we quote representative results for each study case. Lastly, we end this work with Section IV, where we state our conclusions and discuss future directions.\nII. CENTRALIZED CONTROL FRAMEWORK A. MULTIPLE AGENTS The concept of this work is to control multiple agents through the proposed edge-based centralized framework as depicted in Fig. 3. In an effort to achieve this task, all the agents have to send their states to the edge machine, where the centralized controller is offloaded and running. Despite the spatially distributed nature of the multi-agent system, the states are sent to the edge as an unified flow of data collection to satisfy the input requirements of the system. Then, the edge-based centralized control framework calculates and generates control action for each agent. In that way, the control framework can optimize the performance of the entire system by generating trajectories for each agent, while taking into account the trajectories of the other agents and potential collisions. In addition, by setting an increased prediction horizon (60 steps or greater) for the E-CNMPC, the framework can make more accurate predictions for the future trajectories of the agents, thus, it can produce smoother and safer trajectories for every agent. This optimal behavior though, comes with computational cost, which our framework was able to overcome since it integrates edge computing resources and services.\nThe right part of Fig.3 depicts the closed looped system. The states that need to be sent to the edge for the execution of\nthe controller are the position and orientation of each robot, x1(k), x2(k), .., xn(k). Since these states do not arrive at the edge at the exact time that they are generated, the states that arrive as the inputs to the controller are delayed, hence are represented as x1(k \u2212 d1), x2(k \u2212 d1), .., xn(k \u2212 d1). The parameter d1 expresses the robot to edge travel time delay and depends on the network characteristics, as well to the ROS publishing/subscribing delays and kubernetes message forwarding delays. Once the controller receives the states of the agents, it generates control action denoted as u1(k\u2212 d2), u2(k\u2212 d2), .., un(k\u2212 d2). These control actions are the control commands forward/backward velocities and angular rates for each robot. Due to the execution time of the controller, which can be comparable to the travel time delays, we introduced another parameter specified as d2. This parameter is the sum of the d1 plus the execution time delay of the controller. Yet again, the control commands need to be forwarded through the network from the edge cluster to the robots. To express this delay, the input commands arriving to the robots are denoted as u1(k \u2212 d3), u2(k \u2212 d3), .., un(k \u2212 d3), where d3 describes the travel time delay from the edge to the robot plus the delays d2. The last parameters of the closed loop system are the outputs y1(k), y2(k), .., yn(k)."
        },
        {
            "heading": "B. ROBOTIC OPERATING SYSTEM",
            "text": "ROS is the fundamental software that researchers use to develop their robotic applications. Due to its friendly interface and the convenience it provides when it comes to coding experience, it is universally accepted. On the other contrary, on the communication level, it introduces some challenges when integrated with technologies, such as containers and kubernetes. ROS handles the source code and manages the communication into topics through publishers and subscribers. All the robotic agents are running ROS nodes that need to publish their states to their own odometry topic and subscribe to the command topic to receive their control actions. On the edge side, a CNMPC ROS node is running to execute the controller and it needs to subscribe to every odometry topic to receive the states of every robot and publish the control action for each agent to the corresponding command topic. When different ROS nodes need to communicate to exchange data through a topic, these nodes first need to register to the same ROS master. Then, the master opens a random socket and assigns the nodes to communicate through that socket by publishing and subscribing to the topic. The way ROS master opens ports for communication is random and the ports are different each time the nodes need to communicate. On the other hand, kubernetes by default, only allows some ports to be exposed for communication. In this work, because some ROS nodes are running on the edge side of the architecture, where they are deployed inside the kubernetes cluster, and others are running on the robots, the kubernetes cluster should allow all the ports to be exposed. To overcome this challenge, when deploying the kubernetes pods, we choose the host Network option to expose all the ports of the edge machine to all the pods and vice versa."
        },
        {
            "heading": "4 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nFIGURE 3. Block diagram of CNMPC framework including the kubernetes architecture for controlling multiple ground robots\nBy doing that, we allow all the data that arrive to the edge machine to be forward inside the pods.\nC. DOCKER IMAGES For the CNMPC framework, we had to create images for each different task. We used docker to develop our customized images, which were two in total. For both images, we used ROS entrypoint and ROS noetic environment, running on Ubuntu 20.04. The main image is the one running the CNMPC execution. We deployed the image with all the necessary libraries and dependencies as well as the needed packages for the execution of the CNMPC. When we run the kubernetes pod created by that docker image, the UAVs register to the CNMPC, and the operator get the options discussed in Section II-A. The other image, hosts the ROS master and is responsible to execute the roscore. Byf developing and using docker container, our application does not depend on software and operating system dependencies of the host unit, thus they application can run in any environment.\nD. KUBERNETES Kubernetes is responsible for managing the procedure regarding the containerized applications. To achieve that, kubernetes consist of many different components, each one of them handling a different task. These components are running either on the master node, which is the control panel or \u201cbrain\u201d of kubernetes, or the worker nodes which host the applications as depicted in Fig. 3. On the master node the main components are: the controller manager (kube\u2212controller), which runs all build-in controllers, like node or replication controller, the scheduler (kube\u2212 scheduler) that distributes unscheduled workloads across the available worker nodes, the API server (kube \u2212 apiserver), which is tracking the state of all cluster components and it is managing interactions between them and finally, the etcd which is the key value store for all cluster configuration data. Optional components on the master node, that can be useful for the edge cluster operation are: the cluster DNS, which provides in-clusterDNS for pods and services and the cloudcontrollermanager,\nwhich runs cloud controller processes that take care of tasks, such as node auto scaling, creating DNS entries, etc. The kube \u2212 controller, kube \u2212 scheduler, clusterDNS and cloudcontrollermanager watch for changes related to their tasks and register them to the kube\u2212apiserver, which reads and writes data from/to the etcd. The worker node on the other hand consists mainly of the application\u2019s components. These are the kube \u2212 proxy, which accepts and controls network connections to the node\u2019s pods, the kube\u2212let, which manages containers based on incoming pod specifications and uses containerruntime that implements the CRI , and finally, the pods which host the application\u2019s several tasks."
        },
        {
            "heading": "E. CENTRALIZED NONLINEAR MODEL PREDICTIVE CONTROL SCHEME",
            "text": "The base CNMPC module that is combined with the edge framework is based on the preliminary work in [48]. In this work, we apply the framework on a multi-agent set-up of ground robots as opposed to aerial vehicles and we transform it in a novel Edge based architecture. The ground robots are non-holonomic and as such pose an interesting recedinghorizon problem where the predictive nature of the CNMPC scheme can shine in orchestrating trajectories for all agents in the system while considering the kinematic constraints of their movements. The ground robots are described by a simple nonlinear kinematic model as:\np\u0307x(t) = cos\u03c8(t)uv(t)\np\u0307y(t) = sin\u03c8(t)uv(t)\n\u03c8\u0307(t) = u\u03c9(t) (1)\nwhere [px, py] describes the position states and \u03c8 is the heading state. It is assumed that the ground robot takes input commands in the form of a forward/backward velocity uv and an angular rate command as uw. We describe each agents\u2019 states as x(i) = [p(i)x , p (i) y ], \u03c8(i) and inputs u(i) = [u (i) v , u (i) w ], where i = 1 . . . ....Na, and Na denotes the total number of agents in the system. In the centralized\nVOLUME 4, 2016 5\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nscheme, the states are collected into an augmented model as x = [x1, x2 . . . xNa ] and similarly we define the total control actions as u = [u1, u2 . . . uNa ]. The whole system dynamics can then be discretized with a sampling time Ts using the forward Euler to obtain the predictive form xk+1 = \u03b6(xk, uk). The NMPC problem is solved with a receding horizon, where we denote the prediction horizon as N and denote predicted time steps with k+ j|k denoting a discrete prediction j steps into the future produced at time k. From this, we can describe the full vectors of predicted states and control inputs along the horizon, and for all agents, as xk = (x (i) k+j|k)j,i and uk = (u (i) k+j|k)j,i respectively.\nWe form a cost function for the complete centralized system that penalized deviations from a state reference, while minimizing the inputs\u2019 actuation and change in actuation from one time step to the next as:\nJ(xk,uk;uk\u22121|k) = N\u2211 j=0 Na\u2211 i=1 \u2225p(i)ref \u2212 p (i) k+j|k\u2225 2 Qp\n+Q\u03c8(\u2212 cos(\u03c8(i)ref \u2212 \u03c8 (i) ref) + 1) + \u2225uref \u2212 u (i) k+j|k\u2225 2 Qu\n+ \u2225u(i)k+j|k \u2212 u (i) k+j\u22121|k\u2225 2 Q\u2206u , (2)\nwhere the cost matrices for various states, inputs and input rates respectively are denoted as Qp \u2208 R2\u00d72, Q\u03c8 \u2208 R, Qu, Q\u2206u \u2208 R2\u00d72. While the other terms follow the classical quadratic penalties, the penalty on the heading state stands out as strange. The motivation is quite simple: the centralized scheme requires that all agents share the same coordinate frame for their states, and as such we need to properly capture the 2\u03c0-modularity of the heading state \u03c8 as to avoid the discontinuity at \u03c8 \u223c \u00b1\u03c0. Although more computationally complex, the utilized solver [57] in combination with the assistance from the Edge offloading, has no problems with it.\nTo enforce collision avoidance and swarm behavior, we impose set-exclusion constraints [58] on the available position space of each agent in the system. First, the most critical component in any multi-agent scheme is to avoid agent-agent collisions. As such, we can form a constraint for each pair of agents l, i as:\nCl,isafe(xk) := [r 2 safe \u2212 (p (i) x,k+j|k \u2212 p (l) x,k+j|k) 2\n\u2212 (p(i)y,k+j|k \u2212 p (l) y,k+j|k) 2]+ = 0, (3)\nwhere we use the max(a, b) = h[a, b]+ operator to form an expression such that Cl,i = 0 implies that the constraint is satisfied, e.g. we can write it as an equality constraint. The result is that each agent is commanded to be at least a distance of rsafe from each other. Let us also form an additional Ccircle(xk, pobs, robs) as a general static circle-type obstacle that all agents should avoid using the same kind of \"circle\"expression.\nWe also pose a similar constraint to set a maximum distance among agents in the system as:\nCl,iswarm(xk) := [\u2212r2swarm + (p (i) x,k+j|k \u2212 p (l) x,k+j|k) 2\n+ (p (i) y,k+j|k \u2212 p (l) y,k+j|k) 2]+ = 0, (4)\nthat sets a maximum allowed distance between agents in the system defined by rswarm. We should note that these constraints are also imposed along the prediction horizon at all predicted time steps for all agents. Classically, in swarm robotics these terms are handled as competing potentials or costs but in this research we will impose these \"attractive\" and \"repulsive\" terms as hard bounds, while letting the agents move freely as long as those two conditions are met (we will for example, in Section III, set Qp, Q\u03c8 = 0 for all agents except one forming a leader-follower set-up). In this way, the grouping and agent-agent safety terms of the swarm dynamics are implicitly formed. This results in a very high number of constraints, and for a large horizon it becomes an incredibly complex NMPC problem to be solved. We fully utilize the edge computation offloading in order to be able to solve an optimization problem with such a high number of constraints. The resulting NMPC problem is (let us for the sake of notation combine all constraints into the simple Cl,i(xk)):\nMinimize uk,xk J(xk,uk;uk\u22121|k) (5a)\ns.t.:xk+j+1|k = \u03b6(xk+j|k, uk+j|k), j = 0, . . . , N \u2212 1, (5b)\numin \u2264 u(i)k+j|k \u2264 umax, j = 0, . . . , N, (5c) Cl,i(xk) = 0, j = 0, . . . , N,\ni, l = 1, . . . , Na, (5d)\nx (i) k|k = x (i) k , i = 1, . . . , Na, (5e)\nThis problem fits into the framework of the open-source solver OpEn [57], that solves parametric optimization problems of the general form (see the preliminary works for details [48], [57]:\nMinimizez\u2208Z f(z) (6a) subject to:F (z) = 0, (6b)\nFor the consideration of equality constraints, a quadratic Penalty Method [58] is applied. The penalty method is based on solving gauge problems (referred to as inner problems), which have the form: Minimizez\u2208Z f(z)+ c\u2225F (z)\u22252, where c is a positive penalty parameter. The inner problems are solved using PANOC and the penalty parameter is increased in an outer iteration loop until \u2225F (z)\u2225\u221e drops below a specified infeasibility tolerance. This provides the perfect use-case for the Edge offloading system as this method of solving the NMPC problem in many ways benefits greatly from increased computational effort. Optimally, we want to impose a higher number of penalty method iterations and a"
        },
        {
            "heading": "6 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nFIGURE 4. Experimental setup of the proposed framework. In setup A, the edge unit is connected in the TBs\u2019 network only while in setup B, the edge unit is connected in both the MoCap network and the TBs\u2019 network\nlower (more strict) tolerance to solve for collision-free trajectories more perfectly. Additionally, increasing the prediction horizon N , especially in the case of the swarm concept, will result in more optimal orchestration of trajectories at the trade-off of computational effort. Also, as we increase the number of agents, the constraints in (3) and (4) become considerably more complex. The result is an optimization problem whose performance scales with the available computational resources.\nIII. EXPERIMENTAL EVALUATION In this Section we present the experimental setup, we describe the different study cases and we evaluate the results. The proposed framework consists of many different components, thus the experimental setup has many different components as well. The controllable ground robots for the following experiments are the TurtleBots (TBs) [59], and the odometry of these robots is generated by Vicon Motion Capture (MoCap) System [60]. This MoCap system provides high accuracy for the position, velocity and orientation of each robot, and is considered as the ground truth of the system. Moreover, the edge kubernetes cluster is hosted in a local Linux-based unit. The specifications of the unit are\nshown in Table 1. For the kubernetes cluster, microk8s [50], which is a lightweight kubernetes environment with one master node and one worker node, was utilized.\nThe accessibility of the system is justified by accessing the edge kubernetes cluster through a Secure Socket Shell (SSH). The user can use any device as operating working station to access the edge and the TBs when connected to the same network. In our case, we used a laptop connected to the edge. For the transmission of the data from the MoCap system to the edge, two different connection topologies were carried out as depicted in Fig. 4. In the first case, both the laptop and the edge unit are connected to the same network through Router 1 via WiFi. This is the TBs\u2019 network to which the TBs are connected and through which they are receiving the control commands. Additionally, a second network is accessed through Router 2 for the MoCap system. The working station receives the odometry of the robots from the MoCap system through Router 2 and forwards it to the edge unit through Router 1. Finally, edge can transmit the control commands to the TBs through Router 1. In the second case, the edge unit is connected to both the TBs\u2019 network via WiFi and the MoCap\u2019s network via ethernet cable. Since the edge unit and the MoCap system are communicating directly with each\nVOLUME 4, 2016 7\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nother via ethernet cable, the travel time from the agents to the edge in significantly smaller, in comparison to the first case where the data had to be forwarded from the MoCap to the operating working station, to the edge, wireless.\nFor the first set of experiments, we utilized four TBs that should avoid potential collision while navigating into the space.\nIn Fig. 5 the minimum distance between the TBs (top figures) and the computation time (bottom figures), during the duration of the mission, for three different prediction horizons is depicted. When the prediction horizon was set to 20 steps, the TBs could not follow the desired trajectory and they would even crush with each other. With 40 steps the behavior of the system was better, but the best performance was when the horizon was set at 60 steps. The utilization of the edge was beneficial because it gave us the chance to assign high values for the horizon, without having computational problems. The black line shows minimum distance between the agents, and the red line shows the allowed minimum distance between the agents (constrain for collision avoidance).\nBesides experimenting with different horizons, we also conducted experiments with different initial tolerance. The initial tolerance increases the complexity of the optimization problem, when reduced, since the solution of the optimization problem should be accurate enough to be within the certain initial tolerance value. Even though in the previous\nruns the initial tolerance was set at 0.00001, which is a relatively small value, the solver could find solutions in bounded time and do not break the execution of the application, as depicted in the previous graphs, thanks to the edge resources. Because in some light onboard computers, we can not solve the problem when we use this small value, we increased the value of the initial tolerance up to 0.001. The results are depicted in Fig. 6.\nWith reduced initial tolerance, the solver can find solutions faster as depicted in Fig. 6 but it can fail to local minima. The behavior of the TBs is not the desired one, since they do not follow the reference points but instead they might avoid the collision but then they go to random positions."
        },
        {
            "heading": "8 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nFIGURE 9. Trajectories of the TBs for a. exchanging positions and ending up in their initial position (TB1 (blue trajectory) goes from A to B then C and back to A, TB2 (red trajectory) goes from B to A then D and back to B, TB3 (yellow trajectory) goes from D to C then B and back to D, TB4 (purple trajectory) goes from C to D then A and back to C) while the prediction horizon is set at 40 steps, b. following the swarm behavior, c. following the swarm behavior while trying to avoid a static obstacle. In figures b. and c. the o symbol represent the starting position of the TBs and the x symbol their ending position. The big circle dashed line represents the maximum allowed distance between the TBs in order to keep the swarm behavior while the small circle dashed lines represent the minimum distance between two TBs in order to avoid collisions\nUp next, we performed the same experiments with 4 TBs for the swarm behavior. The results with and without obstacles are depicted in Fig 7 and Fig 8 respectively. The blue line shows the maximum distance between the leader any other agent, and the red lines show the allowed maximum distance between the leader any other agent and the allowed minimum distance between the agents respectively. The prediction horizon for these experiments were set at 60 steps and the initial tolerance 0.00001.\nIn Fig. 9, the trajectories of the TBs are depicted for the previous experiments. The figure a. shows the exchanging positions and ending up in their initial position while the prediction horizon is set at 40 steps. The TB1 (blue trajectory) starts from point A goes to point B then point C and then back to point A, TB2 (red trajectory) goes from B to A then D and back to B, TB3 (yellow trajectory) goes from D to C then B and back to D, and finally TB4 (purple trajectory) goes from C to D then A and back to C. The figure b. demonstrates the swarm behavior when we indicate the end point for the TB following the blue trajectory. The blue TB have to reach the end point while the E-CNMPC has to figure out the trajectories of all the TBs in order to respect the constrains regarding the maximum distance between the TBs (the big circle dashed line to keep the swarm behavior), and the minimum distance between the TBs (the small circle dashed lines to avoid collisions). The maximum distance was set 1m and the minimum 0.4m. Finally in figure c. the TBs should again keep the swarm behavior, but at the same time they should trying to avoid a static obstacle, and respect the previous constrains.\nIn addition, the Round Trip Time (RTT) was calculated for the presented system, and every time delay that the RTT is depended on is depicted in Fig. 10, 11, 12 and 13. The uplink time (tup) and downlink time (tdown) represent the travel time for the data to travel from the agents to the edge,\nand vice versa respectively. These time delays were described in Section II-A through the parameters d1 and d3, are shown in Fig. 10, 11 and in Fig. 13. The mean uplink and downlink were measured 124.7ms and 214.3ms while the maximum measurements were 917.9ms and 793ms respectively when the setup A was used. For the uplink, when the setup B was used, the mean and maximum measurements were 10ms and 98.2ms, while the downlink time was the same since the transmission of the data for the downlink trip was the same\nVOLUME 4, 2016 9\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nFIGURE 12. The computational time for the execution of the E-CNMPC\nFIGURE 13. Downlink: the travel time for the data to travel from the edge kubernetes cluster to the ground robots\nin both setups. Moreover, the execution time (texec) of the controller which was described through d2 in Section II-A as well, is depicted in Fig. 12. The measured mean execution time was 100.6ms and the maximum 168.2ms. Since we measured the time dependencies of RTT, we can calculate the RTT from the following expression 7. The deviation of RTT is depicted in Fig. 14.\nRTT = tup + texec + tdown (7)\nIn Fig. 14 the RTT is calculated for both setups. For the setup A, the mean RTT is 448.6ms and the maximum is 1250.2 while for the setup B the mean and maximum measurements were 325.3ms and 897.4ms respectively. The difference between the two RTTs is expected since for the first setup the routing for uplink the data is longer in comparison to the second setup.\nIn Fig. 15, we evaluate the usage of CPU for the execution of the E-CNMPC. From the figure, it is obvious that the\nusage of the CPU depends on the computation time of the solver. The solver requires more time when we increase the complexity of the optimization problem (more agents, higher prediction horizon, reduced initial tolerance) and when the constrains are about to or are even violated, and they are trying to pull the system to the desired behavior. In these cases, the kubernetes pod is using near maximum resources and the CPU is even over 90%."
        },
        {
            "heading": "IV. CONCLUSIONS AND FUTURE WORK",
            "text": "In this work we presented a edge-based centralized nonlinear model predictive control framework to control multiple agents through an edge unit. The utilized technologies provide several advantages and the centralize mechanism enables the swarm behavior of the system, while optimizing the performance of the whole system. To evaluate the proposed framework, a sequence of experiments were conducted and tested. Even though the system suffered from latency, when we selected high values for the prediction horizon and the initial tolerance, the ground robots followed the desired behavior. We were able to choose these values and control 4 ground robots simultaneously thanks to the edge resources.\nAn interesting future direction would be to make the application even more scalable and control more agents. This could be by utilizing bigger edge units or by dividing the ECNMPC to more sub-controllers that would be responsible to control up to a specific amount of agents. Additionally, safety actions can be implemented to secure the smooth transition between different edge controllers or local ones in case of network failure, high latency or when a controller or application is crashing. Thanks to the kubernetes managing properties and features, these additions can be implemented and can provide a secure environment for offloading time sensitive robotic application for scalable systems."
        },
        {
            "heading": "10 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nREFERENCES [1] N. A. Sulieman, L. Ricciardi Celsi, W. Li, A. Zomaya, and M. Villari,\n\u201cEdge-oriented computing: A survey on research and use cases,\u201d Energies, vol. 15, no. 2, p. 452, 2022. [2] G. Barb and M. Otesteanu, \u201c4g/5g: A comparative study and overview on what to expect from 5g,\u201d in 2020 43rd International Conference on Telecommunications and Signal Processing (TSP). IEEE, 2020, pp. 37\u2013 40. [3] H. Zhu, M. Sharma, K. Pfeiffer, M. Mezzavilla, J. Shen, S. Rangan, and L. Righetti, \u201cEnabling remote whole-body control with 5g edge computing,\u201d in 2020 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2020, pp. 3553\u20133560. [4] B. Dhiyanesh, \u201cDynamic resource allocation for machine to cloud communications robotics cloud,\u201d in 2012 International Conference on Emerging Trends in Electrical Engineering and Energy Management (ICETEEEM). IEEE, 2012, pp. 451\u2013454. [5] M. Groshev, G. Baldoni, L. Cominardi, A. de la Oliva, and R. Gazda, \u201cEdge robotics: are we ready? an experimental evaluation of current vision and future directions,\u201d Digital Communications and Networks, 2022. [6] T. Haidegger, P. Galambos, and I. J. Rudas, \u201cRobotics 4.0\u2013are we there yet?\u201d in 2019 IEEE 23rd International Conference on Intelligent Engineering Systems (INES). IEEE, 2019, pp. 000 117\u2013000 124. [7] J. Wan, S. Tang, H. Yan, D. Li, S. Wang, and A. V. Vasilakos, \u201cCloud robotics: Current status and open issues,\u201d IEEE Access, vol. 4, pp. 2797\u2013 2807, 2016. [8] G. Hu, W. P. Tay, and Y. Wen, \u201cCloud robotics: architecture, challenges and applications,\u201d IEEE network, vol. 26, no. 3, pp. 21\u201328, 2012. [9] O. Saha and P. Dasgupta, \u201cA comprehensive survey of recent trends in cloud robotics architectures and applications,\u201d Robotics, vol. 7, no. 3, p. 47, 2018. [10] J. P. Queralta, L. Qingqing, Z. Zou, and T. Westerlund, \u201cEnhancing autonomy with blockchain and multi-access edge computing in distributed robotic systems,\u201d in 2020 Fifth International Conference on Fog and Mobile Edge Computing (FMEC). IEEE, 2020, pp. 180\u2013187. [11] G. Toffetti and T. M. Bohnert, \u201cCloud robotics with ros,\u201d in Robot operating system (ROS). Springer, 2020, pp. 119\u2013146. [12] A. S. Seisa, G. Damigos, S. G. Satpute, A. Koval, and G. Nikolakopoulos, \u201cEdge computing architectures for enabling the realisation of the next generation robotic systems,\u201d in 2022 30th Mediterranean Conference on Control and Automation (MED), 2022, pp. 487\u2013493. [13] J. Luo, L. Zhang, and H. Zhang, \u201cDesign of a cloud robotics middleware based on web service technology,\u201d in 2017 18th International Conference on Advanced Robotics (ICAR). IEEE, 2017, pp. 487\u2013492. [14] S. A. Miratabzadeh, N. Gallardo, N. Gamez, K. Haradi, A. R. Puthussery, P. Rad, and M. Jamshidi, \u201cCloud robotics: A software architecture: For heterogeneous large-scale autonomous robots,\u201d in 2016 world automation congress (WAC). IEEE, 2016, pp. 1\u20136. [15] R. Rahimi, C. Shao, M. Veeraraghavan, A. Fumagalli, J. Nicho, J. Meyer, S. Edwards, C. Flannigan, and P. Evans, \u201cAn industrial robotics application with cloud computing and high-speed networking,\u201d in 2017 First IEEE International Conference on Robotic Computing (IRC). IEEE, 2017, pp. 44\u201351. [16] S. Rosa, L. O. Russo, and B. Bona, \u201cTowards a ros-based autonomous cloud robotics platform for data center monitoring,\u201d in Proceedings of the 2014 IEEE Emerging Technology and Factory Automation (ETFA). IEEE, 2014, pp. 1\u20138. [17] K. E. Chen, Y. Liang, N. Jha, J. Ichnowski, M. Danielczuk, J. Gonzalez, J. Kubiatowicz, and K. Goldberg, \u201cFogros: An adaptive framework for automating fog robotics deployment,\u201d in 2021 IEEE 17th International Conference on Automation Science and Engineering (CASE). IEEE, 2021, pp. 2035\u20132042. [18] P. Huang, L. Zeng, X. Chen, K. Luo, Z. Zhou, and S. Yu, \u201cEdge robotics: Edge-computing-accelerated multi-robot simultaneous localization and mapping,\u201d IEEE Internet of Things Journal, 2022. [19] F. Okumus\u0327 and A. Fatih, \u201cExploring the feasibility of a multifunctional software platform for cloud robotics,\u201d in 2018 International Conference on Artificial Intelligence and Data Processing (IDAP). IEEE, 2018, pp. 1\u20134. [20] D. Dechouniotis, D. Spatharakis, and S. Papavassiliou, \u201cEdge robotics experimentation over next generation iiot testbeds,\u201d in NOMS 2022-2022 IEEE/IFIP Network Operations and Management Symposium. IEEE, 2022, pp. 1\u20133.\n[21] F. L. M. de Sousa, M. C. Silva, and R. A. R. Oliveira, \u201cApplying edge ai towards deep-learning-based monocular visual odometry model for mobile robotics.\u201d in ICEIS (1), 2022, pp. 561\u2013568. [22] D. Spatharakis, M. Avgeris, N. Athanasopoulos, D. Dechouniotis, and S. Papavassiliou, \u201cA switching offloading mechanism for path planning and localization in robotic applications,\u201d in 2020 International Conferences on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData) and IEEE Congress on Cybermatics (Cybermatics). IEEE, 2020, pp. 77\u201384. [23] G. Mehrooz, E. Ebeid, and P. Schneider-Kamp, \u201cSystem design of an opensource cloud-based framework for internet of drones application,\u201d in 2019 22nd Euromicro Conference on Digital System Design (DSD). IEEE, 2019, pp. 572\u2013579. [24] X. Wang and H. Guo, \u201cMobility-aware computation offloading for swarm robotics using deep reinforcement learning,\u201d in 2021 IEEE 18th Annual Consumer Communications & Networking Conference (CCNC). IEEE, 2021, pp. 1\u20134. [25] H. Sun and H. Xi, \u201cResource optimization technology using genetic algorithm in uav-assisted edge computing environment,\u201d Journal of Robotics, vol. 2022, 2022. [26] S. Wang and N. Kong, \u201cNetwork resource allocation strategy based on uav cooperative edge computing,\u201d Journal of Robotics, vol. 2022, 2022. [27] L. Turnbull and B. Samanta, \u201cCloud robotics: Formation control of a multi robot system utilizing cloud infrastructure,\u201d in 2013 Proceedings of IEEE Southeastcon. IEEE, 2013, pp. 1\u20134. [28] K.-E. \u00c5rz\u00e9n, P. Skarin, W. T\u00e4rneberg, and M. Kihl, \u201cControl over the edge cloud-an mpc example,\u201d in 1st International Workshop on Trustworthy and Real-time Edge Computing for Cyber-Physical Systems, Nashville, United States, 2018. [29] P. Skarin, J. Eker, M. Kihl, and K.-E. \u00c5rz\u00e9n, \u201cCloud-assisted model predictive control,\u201d in 2019 IEEE International Conference on Edge Computing (EDGE). IEEE, 2019, pp. 110\u2013112. [30] A. S. Seisa, S. G. Satpute, B. Lindqvist, and G. Nikolakopoulos, \u201cAn edge architecture oriented model predictive control scheme for an autonomous uav mission,\u201d in 2022 IEEE 31st International Symposium on Industrial Electronics (ISIE), 2022, pp. 1195\u20131201. [31] A. Papadimitriou, H. Jafari, S. S. Mansouri, and G. Nikolakopoulos, \u201cMulti-stage nmpc for a mav based collision free navigation under varying communication delays,\u201d arXiv preprint arXiv:2208.03692, 2022. [32] A. S. Seisa, S. G. Satpute, B. Lindqvist, and G. Nikolakopoulos, \u201cAn EdgeBased Architecture for Offloading Model Predictive Control for UAVs,\u201d Robotics, vol. 11, no. 4, 2022. [33] P. Skarin, J. Eker, and K.-E. \u00c5rz\u00e9n, \u201cA cloud-enabled rate-switching mpc architecture,\u201d in 2020 59th IEEE Conference on Decision and Control (CDC). IEEE, 2020, pp. 3151\u20133158. [34] P. Skarin, J. Eker, and K.-E. \u00c5rz\u00e9n, \u201cCloud-based model predictive control with variable horizon,\u201d IFAC-PapersOnLine, vol. 53, no. 2, pp. 6993\u20137000, 2020. [35] X. Yang and J. Ni, \u201cA cloud-edge combined control system with mpc parameter optimization for path tracking of unmanned ground vehicle,\u201d Proceedings of the Institution of Mechanical Engineers, Part D: Journal of Automobile Engineering, p. 09544070221080312, 2022. [36] J. Hu, A. Bruno, D. Zagieboylo, M. Zhao, B. Ritchken, B. Jackson, J. Y. Chae, F. Mertil, M. Espinosa, and C. Delimitrou, \u201cTo centralize or not to centralize: A tale of swarm coordination,\u201d arXiv preprint arXiv:1805.01786, 2018. [37] Y. Kuwata and J. P. How, \u201cCooperative distributed robust trajectory optimization using receding horizon milp,\u201d IEEE Transactions on Control Systems Technology, vol. 19, no. 2, pp. 423\u2013431, 2010. [38] J. Huang, Z. Ji, S. Xiao, C. Jia, Y. Jia, and X. Wang, \u201cMulti-agent vehicle formation control based on mpc and particle swarm optimization algorithm,\u201d in 2022 IEEE 6th Information Technology and Mechatronics Engineering Conference (ITOEC), vol. 6. IEEE, 2022, pp. 288\u2013292. [39] E. Nejabat and A. Nikoofard, \u201cSwitched robust model predictive based controller for uav swarm system,\u201d in 2021 29th Iranian Conference on Electrical Engineering (ICEE). IEEE, 2021, pp. 721\u2013725. [40] B. Lindqvist, P. Sopasakis, and G. Nikolakopoulos, \u201cA scalable distributed collision avoidance scheme for multi-agent uav systems,\u201d in 2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2021, pp. 9212\u20139218. [41] H. Zhou and C. Liu, \u201cDistributed motion coordination using convex feasible set based model predictive control,\u201d in 2021 IEEE International\nVOLUME 4, 2016 11\nThis work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/\nAuthor et al.: Preparation of Papers for IEEE TRANSACTIONS and JOURNALS\nConference on Robotics and Automation (ICRA). IEEE, 2021, pp. 8330\u2013 8336. [42] S. S. Mansouri, G. Nikolakopoulos, and T. Gustafsson, \u201cDistributed model predictive control for unmanned aerial vehicles,\u201d in 2015 Workshop on Research, Education and Development of Unmanned Aerial Systems (REDUAS). IEEE, 2015, pp. 152\u2013161. [43] J. Wehbeh, S. Rahman, and I. Sharf, \u201cDistributed model predictive control for uavs collaborative payload transport,\u201d in 2020 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2020, pp. 11 666\u201311 672. [44] J. Zhan, Z. Ma, and L. Zhang, \u201cData-driven modeling and distributed predictive control of mixed vehicle platoons,\u201d IEEE Transactions on Intelligent Vehicles, 2022. [45] A. Sahu, H. Kandath, and K. M. Krishna, \u201cModel predictive control based algorithm for multi-target tracking using a swarm of fixed wing uavs,\u201d in 2021 IEEE 17th International Conference on Automation Science and Engineering (CASE). IEEE, 2021, pp. 1255\u20131260. [46] S. Graffione, C. Bersani, R. Sacile, and E. Zero, \u201cModel predictive control of a vehicle platoon,\u201d in 2020 IEEE 15th International Conference of System of Systems Engineering (SoSE). IEEE, 2020, pp. 513\u2013518. [47] S. Sabino, N. Horta, and A. Grilo, \u201cCentralized unmanned aerial vehicle mesh network placement scheme: A multi-objective evolutionary algorithm approach,\u201d Sensors, vol. 18, no. 12, p. 4387, 2018. [48] B. Lindqvist, S. S. Mansouri, P. Sopasakis, and G. Nikolakopoulos, \u201cCollision avoidance for multiple micro aerial vehicles using fast centralized nonlinear model predictive control,\u201d IFAC-PapersOnLine, vol. 53, no. 2, pp. 9303\u20139309, 2020. [49] S. Hu, W. Shi, and G. Li, \u201cCec: A containerized edge computing framework for dynamic resource provisioning,\u201d IEEE Transactions on Mobile Computing, 2022. [50] S. B\u00f6hm and G. Wirtz, \u201cProfiling lightweight container platforms: Microk8s and k3s in comparison to kubernetes.\u201d in ZEUS, 2021, pp. 65\u201373. [51] Y. Xiong, Y. Sun, L. Xing, and Y. Huang, \u201cExtend cloud to edge with kubeedge,\u201d in 2018 IEEE/ACM Symposium on Edge Computing (SEC). IEEE, 2018, pp. 373\u2013377. [52] I. A. Tsokalo, H. Wu, G. T. Nguyen, H. Salah, and F. H.P. Fitzek, \u201cMobile edge cloud for robot control services in industry automation,\u201d in 2019 16th IEEE Annual Consumer Communications Networking Conference (CCNC), 2019, pp. 1\u20132. [53] P. Kochovski, R. Sakellariou, M. Bajec, P. Drobintsev, and V. Stankovski, \u201cAn architecture and stochastic method for database container placement in the edge-fog-cloud continuum,\u201d in 2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 2019, pp. 396\u2013 405. [54] R. P. Salas and J. Ho, \u201cA remote/virtual robotics lab,\u201d in 2021 IEEE Frontiers in Education Conference (FIE), 2021, pp. 1\u20134. [55] S. Aldegheri, N. Bombieri, S. Germiniani, F. Moschin, and G. Pravadelli, \u201cA containerized ros-compliant verification environment for robotic systems,\u201d in 2021 Design, Automation Test in Europe Conference Exhibition (DATE), 2021, pp. 222\u2013225. [56] F. Lumpp, M. Panato, F. Fummi, and N. Bombieri, \u201cA container-based design methodology for robotic applications on kubernetes edge-cloud architectures,\u201d in 2021 Forum on specification Design Languages (FDL), 2021, pp. 01\u201308. [57] P. Sopasakis, E. Fresk, and P. Patrinos, \u201cOpen: Code generation for embedded nonconvex optimization,\u201d International Federation of Automatic Control, 2020. [58] B. Hermans, G. Pipeleers, and P. P. Patrinos, \u201cA penalty method for nonlinear programs with set exclusion constraints,\u201d Automatica, vol. 127, p. 109500, 2021. [59] K. Li and H. Tu, \u201cDesign and implementation of autonomous mobility algorithm for home service robot based on turtlebot,\u201d in 2021 IEEE 5th Information Technology,Networking,Electronic and Automation Control Conference (ITNEC), vol. 5, 2021, pp. 1095\u20131099. [60] P. Merriaux, Y. Dupuis, R. Boutteau, P. Vasseur, and X. Savatier, \u201cA study of vicon system positioning performance,\u201d Sensors, vol. 17, no. 7, p. 1591, 2017.\nACHILLEAS SANTI SEISA (SM 2022) is currently is Ph.D. student at the Department of Computer Science, Electrical and Space Engineering at Lule\u00e5 University of Technology, Lule\u00e5, Sweden. He is part of the Robotics and Artificial Intelligence research group of the Signal and System Division, under the guidance of Professor George Nikolakopoulos. He received his Integrated Master\u2019s degree in Electrical Engineering and Computer Science from University of Patras, Greece,\nwhere his direction was towards, automatic control and robotic systems. His research interests are focused on edge computing architectures for robotic applications, aerial manipulation autonomy components and augmented reality for remote aerial operation. Contact him at achsei@ltu.se.\nBJ\u00d6RN LINDQVIST is currently pursuing his Ph.D. at the Robotics and AI Team at the Department of Computer Science, Electrical and Space Engineering, Lule\u00e5 University of Technology, Sweden, working in the field of aerial robotics. He received his Master\u2019s Degree in Space Engineering with a specialisation Aerospace Engineering from Lule\u00e5 University of Technology, Sweden, in 2019. Bj\u00f6rn\u2019s research has so far been focused on collision avoidance and path planning\nfor single and multi-agent Unmanned Aerial Vehicle systems, as well as field applications of such technologies. He has worked as part of the JPLNASA led Team CoSTAR in the DARPA Sub-T Challenge on subterranean UAV exploration applications, specifically in the search-and-rescue context. Contact him at bjolin@ltu.se.\nSUMEET GAJANAN SATPUTE is a Postdoctoral Researcher with the Robotics and Artificial Intelligence group of Lule\u00e5 University of Technology, Lule\u00e5, Sweden. His current research focuses on multiple spacecraft formation and autonomous planetary explorations with multiple agents. He received the Ph.D. degree from the Onboard Space Systems group, Kiruna, and Masters degree in Electrical Engineering with specialization in Control Systems from Veermata Jijabai Technological\nInstitute (VJTI), India. Contact him at sumsat@ltu.se.\nGEORGE NIKOLAKOPOULOS (M) is the Chair on Robotics and Artificial Intelligence and a Professor on Robotics and Automation at the Department of Computer Science, Electrical and Space Engineering at Lule\u00e5 University of Technology, Lule\u00e5, Sweden. His main research interests are in the areas of: Robotics and Artificial Intelligence, Field Robotics, UAVs, Automatic Control Applications, Learning, Reasoning, Networked Embedded Controlled Systems, Wireless\nSensor and Actuator Networks, Cyber Physical Systems, Mechatronics, Adaptive Control, System Identification and Multimedia Wireless Sensor Networks and Cyberphysical systems. Contact him at geonik@ltu.se."
        },
        {
            "heading": "12 VOLUME 4, 2016",
            "text": "This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/"
        }
    ],
    "title": "E-CNMPC: Edge-based Centralized Nonlinear Model Predictive Control for Multi-agent Robotic Systems",
    "year": 2022
}