{
    "abstractText": "The design of car shapes requires a delicate balance between aesthetic and performance. While fluid simulation provides the means to evaluate the aerodynamic performance of a given shape, its computational cost hinders its usage during the early explorative phases of design, when aesthetic is decided upon. We present an interactive system to assist designers in creating aerodynamic car profiles. Our system relies on a neural surrogate model to predict fluid flow around car shapes, providing fluid visualization and shape optimization feedback to designers as soon as they sketch a car profile. Compared to prior work that focused on time-averaged fluid flows, we describe how to train our model on instantaneous, synchronized observations extracted from multiple pre-computed simulations, such that we can visualize and optimize for dynamic flow features, such as vortices. Furthermore, we architectured our model to support gradient-based shape optimization within a learned latent space of car profiles. In addition to regularizing the optimization process, this latent space and an associated encoder-decoder allows us to input and output car profiles in a bitmap form, without any explicit parameterization of the car boundary. Finally, we designed our model to support pointwise queries of fluid properties around car shapes, allowing us to adapt computational cost to application needs. As an illustration, we only query our model along streamlines for flow visualization, we query it in the vicinity of the car for drag optimization, and we query it behind the car for vortex attenuation. [\"This is the author\u2019s version of the work. It is posted here for your personal use. Not for redistribution. The original paper appeared in Computer Graphics Forum, Volume 42(2023), Number 2.]",
    "authors": [
        {
            "affiliations": [],
            "name": "Nicolas Rosset"
        },
        {
            "affiliations": [],
            "name": "Guillaume Cordonnier"
        },
        {
            "affiliations": [],
            "name": "Regis Duvigneau"
        },
        {
            "affiliations": [],
            "name": "Adrien Bousseau"
        }
    ],
    "id": "SP:ef738ab29107b9d8a0eca8654c71642e4dd40414",
    "references": [
        {
            "authors": [
                "P. BAQUE",
                "E. REMELLI",
                "F. FLEURET",
                "P. FUA"
            ],
            "title": "Geodesic convolutional shape optimization",
            "venue": "International Conference on Machine Learning (2018)",
            "year": 2018
        },
        {
            "authors": [
                "A. BARTLE",
                "A. SHEFFER",
                "G. KIM V",
                "M. KAUFMAN D",
                "N. VINING",
                "F. BERTHOUZOZ"
            ],
            "title": "Physics-driven pattern adjustment for direct 3d garment editing",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH)",
            "year": 2016
        },
        {
            "authors": [
                "K. BAI",
                "C. WANG",
                "M. DESBRUN",
                "X. LIU"
            ],
            "title": "Predicting highresolution turbulence details in space and time",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH Asia) 40,",
            "year": 2021
        },
        {
            "authors": [
                "L.-W. CHEN",
                "A. CAKAL B",
                "X. HU",
                "N. THUEREY"
            ],
            "title": "Numerical investigation of minimum drag profiles in laminar flow using deep learning surrogates",
            "venue": "Journal of Fluid Mechanics",
            "year": 2021
        },
        {
            "authors": [
                "M. CHU",
                "L. LIU",
                "Q. ZHENG",
                "E. FRANZ",
                "H.-P. SEIDEL",
                "C. THEOBALT",
                "R. ZAYER"
            ],
            "title": "Physics informed neural fields for smoke reconstruction with sparse data",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH) 41,",
            "year": 2022
        },
        {
            "authors": [
                "N. DURASOV",
                "A. LUKOYANOV",
                "J. DONIER"
            ],
            "title": "FUA P.: Debosh: Deep bayesian shape optimization, 2021",
            "year": 2021
        },
        {
            "authors": [
                "S. ELFWING",
                "E. UCHIBE",
                "K. DOYA"
            ],
            "title": "Sigmoid-weighted linear units for neural network function approximation in reinforcement learning, 2017",
            "year": 2017
        },
        {
            "authors": [
                "D. GAO",
                "X. LI",
                "Y. DONG",
                "P. PEERS",
                "K. XU",
                "X. TONG"
            ],
            "title": "Deep inverse rendering for high-resolution svbrdf estimation from an arbitrary number of images",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH)",
            "year": 2019
        },
        {
            "authors": [
                "X. GUO",
                "W. LI",
                "F. IORIO"
            ],
            "title": "Convolutional neural networks for steady flow approximation",
            "venue": "In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining",
            "year": 2016
        },
        {
            "authors": [
                "Y. GUO",
                "C. SMITH",
                "M. HA\u0160AN",
                "K. SUNKAVALLI",
                "S. ZHAO"
            ],
            "title": "Materialgan: Reflectance capture using a generative svbrdf model",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH Asia) 39,",
            "year": 2020
        },
        {
            "authors": [
                "R. HIMENO",
                "K. FUJITANI"
            ],
            "title": "Numerical analysis and visualization of flow in automobile aerodynamics development",
            "venue": "In Computational Wind Engineering",
            "year": 1993
        },
        {
            "authors": [
                "P. HOLL",
                "N. THUEREY",
                "V. KOLTUN"
            ],
            "title": "Learning to control pdes with differentiable physics",
            "venue": "In International Conference on Learning Representations",
            "year": 2020
        },
        {
            "authors": [
                "B. KIM",
                "V.C. AZEVEDO",
                "N. THUEREY",
                "T. KIM",
                "M. GROSS",
                "B. SOLENTHALER"
            ],
            "title": "Deep Fluids: A Generative Network for Parameterized Fluid Simulations",
            "venue": "Computer Graphics Forum (Proc. Eurographics)",
            "year": 2019
        },
        {
            "authors": [
                "J. LI",
                "X. DU",
                "R. MARTINS J"
            ],
            "title": "Machine learning in aerodynamic shape optimization",
            "venue": "Progress in Aerospace Sciences",
            "year": 2022
        },
        {
            "authors": [
                "D. LIU H.-T",
                "F. WILLIAMS",
                "A. JACOBSON",
                "S. FIDLER",
                "O. LITANY"
            ],
            "title": "Learning smooth neural functions via lipschitz regularization",
            "venue": "In ACM SIGGRAPH Conference Proceedings (2022)",
            "year": 2022
        },
        {
            "authors": [
                "F. MUYL",
                "L. DUMAS",
                "V. HERBERT"
            ],
            "title": "Hybrid method for aerodynamic shape optimization in automotive industry",
            "venue": "Computers & Fluids 33,",
            "year": 2004
        },
        {
            "authors": [
                "B. MILDENHALL",
                "P. SRINIVASAN P",
                "M. TANCIK",
                "T. BARRON J",
                "R. RAMAMOORTHI",
                "R. NG"
            ],
            "title": "Nerf: Representing scenes as neural radiance fields for view synthesis",
            "year": 2020
        },
        {
            "authors": [
                "C. OTHMER"
            ],
            "title": "Adjoint methods for car aerodynamics",
            "venue": "Journal of Mathematics in Industry",
            "year": 2014
        },
        {
            "authors": [
                "J. PARK J",
                "P. FLORENCE",
                "J. STRAUB",
                "R. NEWCOMBE",
                "S. LOVEGROVE"
            ],
            "title": "Deepsdf: Learning continuous signed distance functions for shape representation",
            "venue": "In IEEE Conference on Computer Vision and Pattern Recognition",
            "year": 2019
        },
        {
            "authors": [
                "L. REGENWETTER",
                "H. NOBARI A",
                "F. AHMED"
            ],
            "title": "Deep Generative Models in Engineering Design: A Review",
            "venue": "Journal of Mechanical Design 144,",
            "year": 2022
        },
        {
            "authors": [
                "M. RAISSI",
                "P. PERDIKARIS",
                "E. KARNIADAKIS G"
            ],
            "title": "Physicsinformed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations",
            "venue": "Journal of Computational physics",
            "year": 2019
        },
        {
            "authors": [
                "V. SITZMANN",
                "N. MARTEL J",
                "W. BERGMAN A",
                "B. LINDELL D",
                "G. WETZSTEIN"
            ],
            "title": "Implicit neural representations with periodic activation functions",
            "venue": "In Proc. NeurIPS (2020)",
            "year": 2020
        },
        {
            "authors": [
                "M. TANCIK",
                "P. SRINIVASAN P",
                "B. MILDENHALL",
                "S. FRIDOVICH-KEIL",
                "N. RAGHAVAN",
                "U. SINGHAL",
                "R. RAMAMOORTHI",
                "T. BARRON J",
                "R. NG"
            ],
            "title": "Fourier features let networks learn high frequency functions in low dimensional domains",
            "venue": "NeurIPS (2020)",
            "year": 2020
        },
        {
            "authors": [
                "J. TOMPSON",
                "K. SCHLACHTER",
                "P. SPRECHMANN",
                "K. PERLIN"
            ],
            "title": "Accelerating eulerian fluid simulation with convolutional networks",
            "venue": "In International Conference on Machine Learning (2017),",
            "year": 2017
        },
        {
            "authors": [
                "N. THUEREY",
                "K. WEISSENOW",
                "L. PRANTL",
                "X. HU"
            ],
            "title": "Deep learning methods for reynolds-averaged navier\u2013stokes simulations of airfoil flows",
            "venue": "AIAA Journal 58,",
            "year": 2020
        },
        {
            "authors": [
                "N. UMETANI",
                "B. BICKEL"
            ],
            "title": "Learning three-dimensional flow for interactive aerodynamic design",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH)",
            "year": 2018
        },
        {
            "authors": [
                "N. UMETANI",
                "T. IGARASHI",
                "J. MITRA N"
            ],
            "title": "Guided exploration of physically valid shapes for furniture design",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH) 31,",
            "year": 2012
        },
        {
            "authors": [
                "N. UMETANI",
                "M. KAUFMAN D",
                "T. IGARASHI",
                "E. GRINSPUN"
            ],
            "title": "Sensitive couture for interactive garment modeling and editing",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH)",
            "year": 2011
        },
        {
            "authors": [
                "N. UMETANI",
                "Y. KOYAMA",
                "R. SCHMIDT",
                "T. IGARASHI"
            ],
            "title": "Pteromys: Interactive design and optimization of free-formed free-flight model airplanes",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH)",
            "year": 2014
        },
        {
            "authors": [
                "V. VLACHOS MICHAIL YU PHILIP C"
            ],
            "title": "On Periodicity Detection and Structural Periodic Similarity",
            "venue": "Proceedings of the 2005 SIAM International Conference on Data Mining (SDM)",
            "year": 2005
        },
        {
            "authors": [
                "S. WIEWEL",
                "M. BECHER",
                "N. THUEREY"
            ],
            "title": "Latent space physics: Towards learning the temporal evolution of fluid flow",
            "venue": "In Computer graphics forum (2019),",
            "year": 2019
        },
        {
            "authors": [
                "B. ZHU",
                "M. IWATA",
                "R. HARAGUCHI",
                "T. ASHIHARA",
                "N. UMETANI",
                "T. IGARASHI",
                "K. NAKAZAWA"
            ],
            "title": "Sketch-based dynamic illustration of fluid systems",
            "venue": "ACM Transactions on Graphics (Proc. SIGGRAPH Asia) 30,",
            "year": 2011
        },
        {
            "authors": [
                "Y. ZHANG",
                "J. SUNG W",
                "N. MAVRIS D"
            ],
            "title": "Application of Convolutional Neural Network to Predict Airfoil Lift Coefficient. 2018. 2 submitted to COMPUTER GRAPHICS Forum (2/2023)",
            "year": 2023
        }
    ],
    "sections": [
        {
            "text": "Keywords: Interactive design, fluid simulation, surrogate model, shape optimization, neural network, implicit representation"
        },
        {
            "heading": "1. Introduction",
            "text": "The design of everyday objects often requires balancing conflicting objectives between aesthetic and functionality. For instance, the profile of a new car should not only look more appealing than previous cars, it should also offer efficient aerodynamic properties. But aerodynamics is hard to guess even for expert designers, while aesthetic is difficult to encode as a mathematical objective for automatic shape optimization [Oth14].\nIn this paper, we describe an interactive car design system that allows users to sketch the 2D profile of a car and obtain immediate feedback on its aerodynamic properties, including suggestions for improvements (Fig. 1). Users of our system can alternate between creative sketching and aerodynamic evaluation to quickly converge towards a novel, efficient design. While designing 2D profiles is a simplified version of real-world 3D car design, it allows us to study key challenges that would also occur in a more realistic setting (see Sec. 7 for additional discussion on the extension to 3D).\nExisting tools to evaluate and optimize car aerodynamics typically rely on expensive simulation over a fine volumetric mesh of the car and its surrounding [Ope07]. While necessary for down-\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nstream engineering, such accurate fluid flow simulations are too costly for rapid exploration of early design alternatives. This computational bottleneck has motivated the development of so-called surrogate models, which are machine learning models that approximate costly simulators by being trained on large datasets of simulations pre-computed over a family of shapes of interest [RNA22, LDM22]. We follow this methodology and present a neural-based surrogate model tailored to sketch-based interactive design of car profiles. Specifically, we develop our model to support designers in multiple tasks, from streamline visualization to shape optimization under various criteria.\nAchieving our goal raises several unique challenges. First, in contrast to prior work that predicts fluid quantities averaged over time [UB18, CCHT21], we are interested in predicting the instantaneous pressure and velocity fields of vortical flows to display and optimize for dynamic physical criteria. But training a machine learning model to predict flow fields at any time step would require enormous amounts of simulation data. We alleviate this challenge by extracting a representative frame for each simulation in our dataset. Observing that 2D flow fields are often periodic, we synchronize the simulations such that their representative frames correspond to the same instant within a phase of the periodic flow field. The resulting instantaneous fields thus react continuously to changes of car shapes, and as such are easier to regress by a neural network.\nOur second challenge is to parameterize the input car profile to be fed to our surrogate model. Prior work addresses this challenge by representing the input with parametric curves and surfaces [UB18,BRFF18], such that all shapes share the same number of control points, and that these control points correspond to consistent parts across all shapes. But extracting consistent parametric shapes from arbitrary car profiles sketched by users would require error-prone vectorization or template-matching. Instead, we use a convolutional auto-encoder to learn a latent descriptor of each profile in our dataset. We then train our surrogate model to take as input this latent descriptor and to predict fluid properties of the corresponding profile. We also train our model to predict an implicit surface of the profile from its latent descriptor, and we describe how to compute some aerodynamic criterias from this implicit representation to perform shape optimization in latent space. This approach benefits from the low-dimensional structure of the latent space to ease the optimization task and to prevent it from producing shapes that differ too much from the training data.\nFinally, a third challenge we address is the computational efficiency of the prediction over potentially large domains. Several prior methods predict flow fields around a shape using convolutional neural networks (CNNs), such that fluid properties are predicted at each pixel of a finite grid [GLI16, TWPH20, CCHT21]. Yet, we observe that not all parts of the domain are relevant for the applications we target. For instance, for streamline visualization, the velocity along a few particle trajectories suffices; for shape optimization based on the drag, only the pressure field along the car silhouette matters; and for other optimization criteria, such as vortex attenuation, the velocity field is only needed in specific regions of the domains. Inspired by recent work on implicit shape representations [PFS\u221719, SMB\u221720], we adapt to these diverse application\nscenarios by implementing our surrogate model as a multi-layerperceptron (MLP) that predicts the fluid pressure and velocity for a given car profile at a given spatial position. We then query this network multiple times to get values where needed.\nIn summary, we make the following contributions:\n\u2022 A surrogate model based on a MLP to predict fluid flow properties of a given shape, at a given spatial position, along with an optimization that leverages this model to improve aerodynamic properties expressed over an implicit representation of the shape. \u2022 A simple algorithm to synchronize multiple fluid simulations, such that frames extracted from these simulations correspond to similar instants of the periodic flow. These frames form a coherent dataset for training our model to predict instantaneous flow fields from car profiles. \u2022 Based on the above ingredients, an end-to-end interactive pipeline that takes as input the profile of a car sketched by a user, visualizes the flow field around the car and suggests how to modify the profile to improve its aerodynamics."
        },
        {
            "heading": "2. Related work",
            "text": "Our work enables an interactive workflow where designers iterate between creative shape exploration (via a simple sketch-based interface) and simulation-based shape improvement (via streamline visualization and shape optimization). Similar workflows that combine modeling and simulation have been proposed for other application domains, such as furniture design [UIM12], garment design [UKIG11, BSK\u221716], paper airplane design [UKSI14]. Closest to our work is the system by Umetani and Bickel [UB18], who train a surrogate model based on Gaussian Processes to predict 3D fluid flow around car shapes. Our approach differs on several key aspects. First, they rely on a custom polycube template of the car and its ambient space to obtain a consistent parameterization across their dataset of car simulations. In contrast, we train an encoder to automatically project each car profile into a low-dimensional latent space, which makes our approach applicable to input shapes and representations for which an explicit parameterization is difficult to obtain. Second, they train their surrogate model to predict pressure and velocity averaged over time. In contrast, we describe how to extract synchronized instantaneous observations of the fluid flow across a simulation dataset, allowing us to capture dynamic flow patterns such as vortices. Finally, the system by Umetani and Bickel only provides visualizations of drag, pressure and velocity, letting users explore the shape space by trial-and-error. In contrast, our neural surrogate model allows to perform gradient-based shape optimization and to suggest shape improvements to users.\nApproximating costly simulations with machine learning models is common practice in shape optimization [RNA22, LDM22]. In contrast to approaches that predict a single property to be optimized, such as drag or lift [ZSM18], we designed our surrogate model to predict elementary physical quantities, from which we derive optimization objectives for various applications. Many existing approaches rely on convolutional neural networks (CNNs) to predict fluid quantities over the entire spatial domain surrounding the object of interest [GLI16, TWPH20, CCHT21]. Alternatively, Baque et al. [BRFF18] and Durasov et al. [DLDF21] employ graph\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nneural networks to predict pressure over the surface of an object. While graph neural networks are well suited to optimize on-surface quantities like drag, they cannot be used to visualize fluid flow away from the surface or to optimize for flow features like vortices. Our originality is to rely on a multi-layer perceptron (MLP) to provide pointwise predictions, such that we only predict fluid quantities where necessary for the application at hand. While we focus on 2D car profiles, our pointwise approach has a greater potential of scaling to 3D than the regular grids of convolutional networks [GLI16].\nWe also designed our model to take as input a compact latent descriptor of the shape, allowing optimization in a latent space representative of car shapes. Such latent-space optimization is not possible with methods based on the UNet convolutional neural network [TWPH20], as the skip connections transmit shape information while bypassing the encoder-decoder bottleneck. Latent-space optimization has proven to be a very effective regularization strategy for other ill-posed inverse problems, such as material recovery from few photographs [GLD\u221719, GSH\u221720] and shape completion from partial point clouds [PFS\u221719].\nWhile we rely on deep learning to obtain a fast predictor of fluid flows from pre-computed simulations, other work seeks to leverage deep learning to accelerate fluid solvers [KCAT\u221719, WBT19, TSSP17, BWDL21]. Recent work also describes how to train neural networks with so-called physics-informed losses [RPK19, CLZ\u221722], with the potential of replacing traditional solvers and alleviating the need for large simulation datasets [WWK21]."
        },
        {
            "heading": "3. Problem statement",
            "text": "Aiming to support the design of aerodynamic objects, we propose a sketch-based system that provides fluid simulation feedback to designers at interactive rate. We demonstrate this system on the task of 2D car design, and we illustrate its capabilities by providing visual feedback in the form of streamlines, and optimization feedback in the form of suggestions of shape improvements. Our interactive\n2D tool could also serve in an educational context [ZIH\u221711], for instance to illustrate aerodynamic concepts such as drag and vorticity, and to show their relation to car shapes.\nIn a domain \u2126 \u2282 R2, we represent a shape S \u2282 \u2126 as a closed region that defines the inner boundary conditions of a boundary-value problem, which solution is a time-dependant flow field F(S, t,x). In this work, we focus on the velocity v\u20d7 and pressure p of the flow field, in the context of unsteady incompressible viscous flows.\nThe interaction between the shape and the flow is responsible for several key aerodynamic properties. Some of these properties are defined on the surface of the shape, such as pressure drag, which measures the resistance against the motion of the object due to air pressure:\n\u03b1drag(S) = 1 T \u222b T 0 \u222e \u0393 \u2212p(S,x, t)n1(S,x)d\u0393dt, (1)\nwhere p(S,x, t) is the pressure of the flow field at point x and time t, and n1(S,x) is the horizontal component of the normal on the surface \u0393 of the shape at x. In practice, pressure drag accounts for around 80% of the total drag of passenger cars [HF93], which is why we ignore other sources of drag such as friction. Aerodynamic studies often use the drag coefficient, which differs form the drag force in Eq. 1 by a factor that depends on the projected frontal area of the car (in our 2D case, that would be the height of the vehicle). In our setup, optimizing the drag force or the drag coefficient is similar because we target small changes of the original design, and therefore the size of the car remains mostly constant. Other properties of interest are defined over specific regions of the domain, such as vorticity, which measures the degree of rotation of the fluid around a given point, and that designers may seek to reduce behind the car, e.g. to prevent back-projection of rain over the rear glass:\n\u03b1vortex(S) = 1 T \u222b T 0 \u222b \u2126\u0304 \u2225\u2207\u00d7 v\u20d7(S,x, t)\u2225d\u2126\u0304dt, (2)\nwhere \u2126\u0304 denotes the region of interest.\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nHowever, accounting for the time-dependency is prohibitive in practice, both in terms of data size and of difficulty of learning. Therefore, most of the works in the literature resort to timeaveraged properties, yielding reduced and smoothed data [UB18, CCHT21]. We overcome this limitation by considering instantaneous synchronized observation times, which allows us to predict dynamical phenomena like vortices without significant increase in complexity. We detail in Section 5.2 how we synchronize simulations performed over multiple shapes of a dataset and how we extract a representative observation of each simulation. In what follows, we drop the time dependency and only compute performance measures \u03b1(S) over instantaneous observations.\nShape optimization consists in searching for the shape S\u22c6 that offers the best aerodynamic properties, i.e., that minimizes a given performance measure \u03b1(S):\nS\u22c6 = argmin S \u03b1(S). (3)\nMinimizing Equation 3 raises multiple challenges:\n1. Evaluating the fluid flow F(S,x) around a given shape involves a costly, potentially non-differentiable simulation, which is especially problematic for iterative shape optimization algorithms that typically need to perform multiple evaluations to reach a minimum. We tackle this challenge by replacing the simulator by a fast surrogate model F\u0302 , which we implement as a neural network trained to predict fluid flow for a class of car shapes. 2. Minimizing the aerodynamic property using gradient-based optimization algorithms requires the computation of the gradient of \u03b1(S) with respect to the shape S. However, the definition of \u03b1drag(S) involves an integral over the surface of the shape itself, for which we do not have an explicit parameterization. We tackle this challenge by expressing the shape as the zero levelset of an implicit function d defined over the entire spatial domain \u2126, such that we can rewrite the integral over that domain to drop the dependency on the shape surface. 3. Both our neural-based surrogate and our gradient-based optimization algorithm require that all possible shapes share a common, continuous parameterization. Defining this parameterization is especially challenging for complex objects like cars that exhibit strong variations. We tackle this challenge by encoding the profile of the car in a learned, low-dimensional latent space.\nFigure 2 illustrates how these different ingredients interact in our system. We first describe how we perform shape optimization within the latent space of an implicit shape representation (Section 4). We then explain how we model and train the surrogate F\u0302 to approximate flow fields around car profiles (Section 5)."
        },
        {
            "heading": "4. Shape Optimization",
            "text": "Our approach relies on three different representations of the shape of interest, each serving a different purpose. Users provide their design intent in the form of a binary bitmap S. We encode this bitmap into a low-dimensional latent descriptor s, which serves both to condition the surrogate model on this specific shape, and to perform shape optimization by navigating in the latent space of car profiles. Finally, our surrogate model decodes this latent representation into\na signed distance field d, which allows us to express drag as an integral over the entire spatial domain \u2126, simplifying gradient-based optimization of the shape via automatic differentiation.\nShape optimization in the latent space of car profiles. The input to our system is the profile of a car drawn by the user as a binary mask. We circumvent the difficulty of vectorizing this user input by relying on a learned parameterization, in the form of an image encoder E that maps the input profile S into a fixed-size latent descriptor s (8 dimensions in our experiments). We implement the encoder as a convolutional neural network, which we train jointly with a symmetric decoder D on a standard image reconstruction task according to the binary cross-entropy loss (see details about the network architecture in supplemental materials).\nGiven this parameterization, we now express the optimization problem over the space of latent descriptors:\ns\u22c6 = argmin s \u03b1(s). (4)\nIn addition to its continuous, low-dimensional structure, this learned latent space behaves like a smooth interpolant between the car profiles in our training dataset, preventing the optimization to produce shapes that do not resemble cars (Figure 3).\nDrag computation over an implicit shape representation. Solving Eq. 4 requires converting the latent code s back to a geometric representation S, and computing interactions \u03b1(S) between this geometry and the fluid flow. But evaluating \u03b1drag(S) with Eq. 1 involves computing an integral over the surface of this geometry, for which we lack a consistent parameterization. Our solution to this challenge is to express the shape implicitly as the zero levelset of a signed distance function, S = {x|d(S,x) = 0}. For a given latent descriptor, we predict this signed distance function over \u2126 with a neural network d\u0302(s,x) similar to the one we use to model the flow field F\u0302(s,x) around the shape (see Section 5). Thanks to this implicit representation, we can follow Chen et al. [CCHT21] and rewrite Eq. 1 as\n\u03b1drag(S)= \u222e\n\u0393 \u2212p(S,x)n1(S,x)d\u0393\u2248 \u222b \u2126 \u2212p(S,x)n1(S,x)\u03b4(d(S,x))d\u2126\n(5)\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nwhere \u03b4(x) = 1 \u03c3 \u221a 2\u03c0 exp\n\u2212x2 2\u03c32 is a smoothed Dirac function modeled\nas a Gaussian (we fixed \u03c3= 1.2d\u2126 in all of our experiments). Since \u03b4(x) quickly vanishes away from the surface of the shape, it effectively restricts the integral to only measure pressure in the vicinity of the shape. Note that expressing S via a signed distance function also equips us with an estimate of the surface normal on and around the surface as n\u20d7(S,x) \u2248 \u2207d(S,x), which is necessary to compute Eq. 5 at any point of the domain. We provide as supplemental materials an evaluation of this formulation, which achieves an error of 1.7% on average compared to the exact linear integral computed with Eq. 1.\nInteractive optimization. Equipped with this reformulation of \u03b1drag, we can solve Eq. 4 using gradient descent with line-search to obtain progressive updates of the shape in latent space, denoted as \u03b4s. We display these updates to users by extracting the zero levelset of the corresponding signed distance field. Users can then decide to accept these modifications, to modify them by re-sketching the profile, or to optimize the profile further by executing a few more gradient descent steps. The same workflow applies to \u03b1vortex, for which we offer a simple interface to let users indicate the region in which they want to attenuate vortices. Figure 1 and 4 illustrate shapes designed and optimized within our interactive system."
        },
        {
            "heading": "5. Surrogate Fluid Flow Model",
            "text": "We use neural networks to learn the shape signed distance function d(S,x), as well as the flow field F(S,x) obtained from a set of precomputed simulations. While the flow field is defined in the whole domain, we are mostly interested in values within small regions, such as pressure along the surface of the car. This need for localized predictions motivated us to design an architecture that operates on spatial coordinates rather than on complete images, so that both training and inference can be adjusted to specific regions of interest.\nThe main challenge in training this surrogate model resides in generating a dataset of simulations that exhibit fine details of dynamic vortical flows, while ensuring that these details vary smoothly across simulations of similar shapes so they can be learned by a neural network. But vortices appear at chaotic locations in space and time, yielding very different flow patterns at a given frame of each simulation (Figure 5). Our key observation is that, after an initial transitory period, the fluid flow usually becomes periodic. This behavior is classical for such 2D simulations, in particular when using fluid models that damp turbulent high-frequency fluctuations. Such models (e.g. Reynolds-averaged Navier-Stokes) are commonly used in aerodynamic design to achieve reasonable accuracy at a computational time suitable for design iterations\n[MDH04]. By analyzing this periodicity, we extract a representative frame of the flow field where vortices appear at similar locations across different simulations.\nWe next describe how we created our dataset of car profiles and the corresponding simulations, and how we detect the periodic regime of each simulation to extract a representative frame that exhibits consistent flow patterns across simulations. We end with a detailed description of the architecture and training of our surrogate model given this data."
        },
        {
            "heading": "5.1. Car profiles extraction and encoding",
            "text": "We created our dataset by extracting the central vertical crosssection of 3D cars from a subset of ShapeNet [CFG\u221715]. Since the cross-sections might contain holes as well as interior parts, we apply morphological closing and region filling to obtain the outer boundary of the cars (Fig. 6). We adjusted the size of the morphological filter manually for each car, and we rejected any profile that would exhibit defects, such as large missing parts. This process yielded a total of around 2500 profiles, which we used to train our auto-encoder to form pairs (S,s) of profiles and latent codes."
        },
        {
            "heading": "5.2. Fluid flow simulation and synchronization",
            "text": "We next associate each car profile with a representative frame of its flow field.\nFluid simulation. We run a flow simulation to compute the evolution of the velocity and pressure fields around each car profile. We model the fluid by the incompressible Navier-Stokes equations \u2202\u20d7v \u2202t + v\u20d7 \u00b7 \u2207\u20d7v = \u2212 1 \u03c1\u2207p+ \u03bd\u2206\u20d7v, \u2207\u00b7 v\u20d7 = 0. We fix the density of the air to \u03c1 = 1kg/m3 . Our low-resolution domain yields additional diffusion effects in the flow simulation, which can be considered as a turbulence model that damps high-frequency fluctuations. This effect is far larger than the physical diffusion, which is why we fix the viscosity of the air \u03bd to 0. While our flow model lacks highfrequency details, we stress that it captures unsteady, dynamic phenomena that are characteristic of flows around vehicles and that should be accounted for during design, such as vortex shedding.\nWe impose a 12m \u00d7 5.12m domain, with open right and top boundaries. We scaled the cars to have equal width and we positioned them at a fixed distance from the bottom and left side of this domain. To guide users in drawing cars within that region, we initialize the interface with an average car that users edit by sketching (see accompanying video). We attach our observation frame relative to the car that moves toward the left. In this frame, the car is\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nstatic and the surrounding air has an initial velocity opposed to the speed of the car, v(0) = 54km/h. The same applies to the boundary conditions for the velocity on the left and bottom sides of the domain, which correspond to the air inlet in front of the car, and to the road moving relatively to the car, respectively. The car itself is implemented as a zero-velocity Dirichlet boundary condition. We set pressure boundaries as Dirichlet for the right and top (open) bounds, and as Neumann for the road (bottom), the left bound, and the car.\nWe use a 600\u00d7 256 2D Eulerian staggered grid that stores the pressure at the center of the cells and the horizontal and vertical components of the velocity in the vertical and horizontal edges, respectively. The cell size is 2cm and the time step 1/750s. We use a solver based on the Stable-Fluids Helmholtz\u2019s decomposition method [Sta99], with bilinear interpolation and 3rd-order Runge-Kutta Semi-Lagrangian advection, and a sparse preconditioned conjugate gradient method for the pressure projection.\nSynchronization. For each profile, we run a simulation that produces many \u2013 possibly thousands of \u2013 frames, and we analyse the history of each simulation on-the-fly to determine when to stop it. To do so, we define a descriptor of the pressure of the flow field at a given frame k as \u03c4k = \u2211k\u2208S p(xk), where S is a set of 2200 points\nof coordinates xk, uniformly distributed in the wake area behind the car. Figure 7 visualizes the evolution of this descriptor along a representative simulation, revealing that it adopts a periodic regime after around 1000 frames in this example.\nWe follow a method by Vlachos et al. [VM05] to detect the periodicity of this signal. At every 50 simulation steps, we extract the N previous values for \u03c4. We choose N = 600 as the size of this sliding window because it significantly exceeds the periods we detected on our simulations (around 150 frames in average, up to 400 at most). Let us denote by Tk = {\u03c4k\u2212N , ..,\u03c4k} the time sequence of the signal extracted by this procedure at frame k. The method by Vlachos et al. first detects candidate periods by running a fast Fourier transform on the signal, and then selects the period that yields the highest auto-correlation value as measured by the Auto-Correlation Function (ACF). This function expresses the self-similarity of the signal, shifted by all possible periods T :\nACFk(T ) = 1 N \u2211i\u2208[k\u2212N,k] \u03c4i\u03c4i\u2212T . (6)\nIf a period exists, it forms a local maximum of the Auto-Correlation Function. Starting with candidate frequencies that have a high amplitude in the Fourier decomposition of T , the algorithm refines each candidate by performing a hill climbing to the closest local maximum of the ACF. Given the predicted period Tk, we consider that the simulation has reached its periodic regime if the length of the period and its auto-correlation value ACFk(Tk) did not change significantly over the past 5 estimations, i.e., Tk \u2248 Tk\u221250 \u2248 ... \u2248 Tk\u2212200 and ACFk(Tk) \u2248 ACFk\u221250(Tk\u221250) \u2248 ... \u2248 ACFk\u2212200(Tk\u2212200).\nIf a period is found, we extract the representative frame as the frame for which the pressure descriptor \u03c4 reaches its maximum over\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nthe period. We then test if this maximum is close to the one measured over the previous period. If it is not, we perform additional simulation steps until we reach a regime where the maximum value of \u03c4 is stable from one period to the next. If no stable period is found after 6000 frames, we discard the profile from the dataset. This algorithm allowed us to extract periodic flow fields for 81% of the profiles, yielding a dataset of 2013 pairs of profiles and simulations that we split in 1812 pairs for training our surrogate model, and 201 pairs for testing.\nNote that this procedure could be easily extended to extract several representative frames per period to offer a more global representation of the flow dynamics."
        },
        {
            "heading": "5.3. Learning the physical values",
            "text": "Our goal is now to train neural networks to reconstruct the car profile and the corresponding flow field from a given latent code.\nNetwork architecture. We use a different neural network per output (distance field d, velocity v\u20d7, pressure p), because it allows more generality in the applications and ease the fine-tuning of the network hyper-parameters for each task. Furthermore, these networks might be evaluated at different locations, for instance to predict pressure along the surface of the car, and velocity behind the car. Note that although we could extract the distance field from the input profile, this information is no longer available during shape optimization, for which we have only the latent code. This is why we need to predict the distance field along with the other physical quantities.\nBuilding on the recent developments of implicit shape representations [PFS\u221719], each network takes as input a shape latent code s, along with the coordinate x of the point of interest. We performed a couple of adjustments to the original DeepSDF MLP architecture. First, we expand the input coordinates dimensions using positional encoding [MST\u221720, TSM\u221720] to capture higher frequencies in the learned field. We then concatenate the encoded coordinates with the shape latent code to be processed by the MLP. Second, to better preserve the spatial gradients of the fields, we include an optional loss that minimizes the error between the spatial gradient of the predicted field and the spatial gradient of the ground truth field. Since our prediction is performed by a coordinate-based MLP, we compute its gradient via automatic differentiation. In contrast, since the ground truth field is stored as a bitmap in our dataset, we compute its gradient via finite differences. We activate this loss for the network in charge of predicting velocity, whose gradients serve in the computation of vorticity. We also use SiLU [EUD17] activation functions instead of ReLUs for the velocity network to obtain smoother signals for its gradients. Third, because our dataset is relatively small, we add Lipschitz regularization [LWJ\u221722] to prevent overfitting and to favor smooth reactions to small latent code perturbations. Finally, we also found that the use of small batches (15k samples) of input coordinates and codes randomized per epoch improves generalization compared to batches of coordinates sharing the same latent code.\nPropagating pressure away from the profile. In theory, the computation of drag involves the pressure only at the surface of the car.\nIn practice, our formulation with a smoothed Dirac (Eq. 5) requires values farther from the surface, both inside and outside the shape. Yet, these values evaluated at a small distance from the surface should represent the pressure at the location of the surface. While we could obtain these values by projecting any point of the domain to its closest point along the profile, the resulting pressure field exhibits discontinuities that are difficult to learn. Instead, we achieve a smooth propagation by solving a Laplace equation with pressure values along the profile set as Dirichlet boundary conditions (see supplemental materials for a numerical comparison between these two propagation strategies)."
        },
        {
            "heading": "6. Results and discussion",
            "text": "Fluid flow prediction. We first evaluate the ability of our surrogate model to predict fluid flow quantities suitable for shape optimization. Since many prior methods rely on a CNN to predict similar quantities [GLI16, TWPH20, CCHT21], we compare our approach to a CNN baseline that takes as input a latent descriptor s and decodes it as 256\u00d7600 distance and pressure fields, from which we evaluate drag using Eq. 5 (see supplemental materials for architectural details). We configured this CNN to have roughly the same number of parameters as our MLP (200k vs. 150k parameters, respectively).\nFigure 8 provides a visual comparison of our predictions of signed distance d, pressure p and velocity v\u20d7 against the respective ground truth fields, for representative profiles of our test set. Our surrogate model captures the overall flow field patterns, even though it lacks fine details.\nTable 1 quantifies the accuracy of our model and of the CNN baseline in terms of Mean Squared Error (MSE), showing that our model is twice more accurate than the CNN on the end drag prediction. The poor performance of the CNN is likely due to the loss of spatial information within the encoder bottleneck. While prior work alleviated this issue by using a UNet architecture with skip connections to transmit high-frequency spatial information, this solution prevents using the encoder latent code as a descriptor of the shape for latent-space optimization. In contrast, by complementing the latent code with the coordinates of the point of interest, our MLP-based approach is better equipped to learn spatially-varying information. We provide as supplemental materials the histogram of error for drag, showing that it exhibits a Gaussian-like shape, which is why we summarize it with mean and variance in Table 1.\nShape optimization. Figure 9 illustrates results of our shape optimization for drag and vorticity attenuation. For each result, we used our user interface to perform a few gradient descent steps such that the profile improves yet stays close to the input. The accompanying video showcases a few design sessions recorded with this interface, where users sketch car profiles, interactively evaluate the resulting fluid flow, and improve their designs with shape optimization.\nWe evaluated the improvement in drag achieved by our approach quantitatively by running 20 gradient descent steps on a random set of 25 test profiles, and by comparing the gain predicted by our method to the effective gain measured by running a precise fluid simulation on the output profile. For an average gain of 20.53%, our\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nprediction differs by 11.02% from the effective gain, demonstrating the ability of our method to suggest effective shape improvements.\nTimings. Providing interactive feedback requires an efficient surrogate model. We now evaluate the inference time of our neural networks for different target problems, and compares them to the CNN baseline. All timings were measured on a computer equipped with an Intel Xeon E5-2650 CPU (64GB RAM), and a single Nvidia RTX A5000 with 24GB of dedicated memory.\nTable 2 summarizes the timings of our different problems, aver-\naged over 1,000 inferences. For each case, we leverage the implicit nature of our networks to evaluate them over a small set of spatial coordinates. In practice, we first define a large set of regularlyspaced samples that cover the whole domain, with a resolution equivalent to the output of the fluid simulation (600x256), and we select a subset of these points based on problem-specific criteria.\nThe estimation of drag requires the evaluation of pressure near the profile, as well as the evaluation of the signed distance function and of its horizontal normal computed analytically with automatic differentiation. The vicinity to the profile is localized by the smoothed Dirac function introduced in Eq. 5, which is negligible at distances greater than 5\u03c3 from the shape. This criterion allows us to select 6,000 points on average, from which the total computation for the drag estimation requires 8.5 ms. In comparison, computing\nsubmitted to COMPUTER GRAPHICS Forum (2/2023).\nthe same quantity over the entire pressure and distance fields predicted by the CNN \u2013 using finite differences for the evaluation of the normals \u2013 takes 39 ms.\nSuggesting a change to the profile that will improve drag also requires computing the analytical gradients of the drag with respect to the input latent code. Because the profile typically drifts away from its initial state during successive steps of gradient descent, we potentially need to perform this computation for points that are further away from the input profile. Assuming a maximum displacement of 10% of the horizontal extent of the domain \u2013 which correspond to the average height of the cars in our dataset \u2013 we select 37,000 samples around the input profile on average. These points allow computing the suggestion in around 26 ms. The same task, for the CNN, would take 98 ms.\nThe vortex attenuation is prescribed by the user in a small region behind the car, and requires automatic differentiation on the horizontal and vertical components of the velocity to compute the orthogonal spatial derivatives. The selected region usually covers between 1,000 samples for small regions to 20,000 points for regions close to the size of the car itself. For these, the vorticity estimation takes from 9.0 to 13.4 ms. The corresponding suggestion for shape improvement takes from 15.0 to 28.6 ms.\nOne possibility to generate the streamlines is to sample around 200 seed points along and behind the car profile, and then iteratively displace the points in the direction of the evaluated velocity. In practice, this procedure requires around 50 successive evaluations of the network, for a total time of 124 ms. Note that we did not include in these timings the post-processing step that cuts overlapping streamlines. Since the GPU is scarcely used during this sequential process, the timing would not increase significantly for more seed points.\nFinally, our networks are relatively fast to train: 16h for the pressure (learning rate 1\u00d7 10\u22123, 100 epochs), 15h for the signed dis-\ntance function that has one layer less (learning rate 7.5\u00d710\u22124, 100 epochs). The velocity network is slower to train (8d, 3h) because of the additional gradient loss, and because we used a smaller learning rate with more epochs (learning rate 1\u00d7 10\u22125, 265 epochs). While we measured these timings by training the networks with points sampled uniformly in the simulation domain, training could be accelerated by adaptively sampling the input coordinates around and behind the car \u2013 where accurate prediction matters most for our applications.\nLimitations. Our prototype interface demonstrates the potential of our implicit surrogate model to provide various forms of feedback to designers, from streamline visualization all the way to suggestions of shape improvements for various aerodynamic properties. However, our current implementation is limited by the relatively small dataset we used for training our model. In particular, shape optimization might exit the densely sampled regions of our latent space and produce implausible profiles, as illustrated in Fig. 10. Fortunately, our interactive workflow allows users to follow the optimization trajectory step-by-step and stop it before the profile degrades. Extending our dataset should offer designers greater flexibility by navigating in a more diverse space of car shapes.\nOur quantitative evaluation also revealed that our predictions differ from ground truth by up to 7% on average, preventing our system to make relevant suggestions for subtle shape changes. We hope that our approach will benefit from recent progress on neuralbased fluid flow prediction, for instance by training the surrogate model with physics-aware losses [RPK19], or by treating the predicted fluid flow as an initialization for a precise, differentiable solver [HTK20].\nFinally, since our strategy to synchronize the simulations in our dataset relies on the periodicity of 2D fluid flows, it would not apply to more complex, chaotic flows.\nsubmitted to COMPUTER GRAPHICS Forum (2/2023)."
        },
        {
            "heading": "7. Conclusion",
            "text": "Design and engineering have long been considered as sequential activities, where the role of the engineer was to rationalize the creative propositions of designers to make them physically efficient. We proposed a system that tightly integrates physical simulation within the workflow of car profile design, such that designers can benefit from immediate feedback on the aerodynamic performance of the profiles they sketch. We achieved this goal by leveraging the ability of neural networks to encode complex visual signals \u2013 such as user-sketched car profiles, as well as to generate complex spatially-varying signals \u2013 such as flow fields.\nFocusing on 2D car profiles allowed us to avoid the cost of generating a large training set of 3D simulations, and yet helped us identify key ingredients to offer real-time feedback and suggestions for aerodynamic design tasks. We hope that these ingredients will inspire research towards a 3D design tool. Specifically:\n\u2022 We believe that processing the input with a learned shape encoder is a promising approach to accommodate shape representations that are difficult to parametrize consistently, such as 3D sketches [Gra17], meshes, or point clouds. \u2022 We showed that a coordinate-based MLP is more efficient than a CNN because it can be adaptively sampled in the areas of interest, while CNNs are executed on the entire simulation domain (Sec. 6). We conjecture that adaptive sampling will yield even better performances in 3D where CNNs grow with cubic complexity. \u2022 We showed that dynamic flow features like vortices can be learned if the surrogate model is trained with frames that are coherent across simulations. We leveraged the periodic behavior of 2D flow fields to identify these frames. Depending on the turbulence model used, our strategy might not be as effective in 3D where flows are more chaotic. Identifying similar frames, or features, across chaotic 3D simulations is a challenging direction for future research to go beyond learning time-averaged flow fields."
        },
        {
            "heading": "Acknowledgements",
            "text": "We are grateful to the OPAL infrastructure from Universit\u00e9 C\u00f4te d\u2019Azur for providing resources and support. We also thank Jingwei Tang for implementing the fluid solver. This work was supported by the European Research Council (ERC) starting grant\nD3 (ERC-2016-STG 714221) and research and software donations from Adobe Inc."
        }
    ],
    "title": "Interactive design of 2D car profiles with aerodynamic feedback",
    "year": 2024
}