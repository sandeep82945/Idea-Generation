{
    "abstractText": "Cryptography is an unexpected revolution in information security in the recent decades, where remarkable improvements have been created to provide confidentiality and integrity. Quantum cryptography is one such improvement that has grown rapidly since the first announced protocol. Quantum cryptography contains substantial elements that must be addressed to ensure secure communication between legitimate parties. Quantum key distribution (QKD), a technique for creating a secret key, is one of the most interesting areas in quantum cryptography. This paper reviews some well-known quantum key distribution techniques that have been demonstrated in the past three decades. Furthermore, this paper discusses the process of creating a secret key using quantum mechanics and cryptography methods. Moreover, it explains the relationships between many basic aspects of QKD protocols and suggests some improvements in the cryptosystem. An accurate quantitative comparison between the QKD protocols is presented, especially the runtime execution for each QKD protocol. In addition, the paper will demonstrate a general model of each considered QKD protocol based on security principles.",
    "authors": [
        {
            "affiliations": [],
            "name": "Abdulbast A. Abushgra"
        }
    ],
    "id": "SP:04402ef3a6fd7ed1d17f8e444ec87b720008b4f3",
    "references": [
        {
            "authors": [
                "B. Schneier"
            ],
            "title": "Applied Cryptography: Protocols, Algorithms, and Source Code in C",
            "year": 2007
        },
        {
            "authors": [
                "R.L. Rivest",
                "A. Shamir",
                "L. Adleman"
            ],
            "title": "A method for obtaining digital signatures and public-key cryptosystems",
            "venue": "Commun. ACM",
            "year": 1978
        },
        {
            "authors": [
                "W. Diffie",
                "M. Hellman"
            ],
            "title": "New directions in cryptography",
            "venue": "IEEE Trans. Inf. Theory",
            "year": 1976
        },
        {
            "authors": [
                "G. Brassard"
            ],
            "title": "Brief history of quantum cryptography: A personal perspective",
            "venue": "In IEEE Information Theory Workshop on Theory and Practice in Information-Theoretic Security; IEEE: Piscataway, NJ,",
            "year": 2005
        },
        {
            "authors": [
                "N. Walk",
                "T.C. Ralph",
                "T. Symul",
                "P.K. Lam"
            ],
            "title": "Security of post-selection based continuous variable quantum key distribution against arbitrary attacks",
            "venue": "In CLEO: Applications and Technology; Optical Society of America: Washingdon, DC,",
            "year": 2011
        },
        {
            "authors": [
                "L. Oesterling",
                "D. Hayford",
                "G. Friend"
            ],
            "title": "Comparison of commercial and next generation quantum key distribution: Technologies for secure communication of information",
            "venue": "In Proceedings of the 2012 IEEE Conference on Technologies for Homeland Security (HST),",
            "year": 2012
        },
        {
            "authors": [
                "R.T. Possignolo",
                "C.B. Margi"
            ],
            "title": "A quantum-classical hybrid architecture for security algorithms acceleration",
            "venue": "In Proceedings of the 2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications, Liverpool, UK,",
            "year": 2012
        },
        {
            "authors": [
                "N.S. Yanofsky",
                "M.A. Mannucci"
            ],
            "title": "Quantum Computing for Computer Scientists",
            "year": 2008
        },
        {
            "authors": [
                "M.S. Sharbaf"
            ],
            "title": "Quantum cryptography: An emerging technology in network security",
            "venue": "In Proceedings of the 2011 IEEE International Conference on Technologies for Homeland Security (HST),",
            "year": 2011
        },
        {
            "authors": [
                "W.C. Barker",
                "E.B. Barker"
            ],
            "title": "Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher; Citeseer",
            "year": 2012
        },
        {
            "authors": [
                "B. Schneier"
            ],
            "title": "Description of a new variable-length key, 64-bit block cipher (Blowfish)",
            "venue": "In International Workshop on Fast Software Encryption; Springer: Berlin/Heidelberg, Germany,",
            "year": 1993
        },
        {
            "authors": [
                "J. Patarin",
                "L. Goubin"
            ],
            "title": "Asymmetric cryptography with S-Boxes Is it easier than expected to design efficient asymmetric cryptosystems",
            "venue": "In Proceedings of the International Conference on Information and Communications Security, Beijing,",
            "year": 1997
        },
        {
            "authors": [
                "H.-K. Lo",
                "X. Ma",
                "K. Chen"
            ],
            "title": "Decoy state quantum key distribution",
            "venue": "Phys. Rev. Lett",
            "year": 2005
        },
        {
            "authors": [
                "V. Bu\u017eek",
                "M. Hillery"
            ],
            "title": "Quantum copying: Beyond the no-cloning theorem",
            "venue": "Phys. Rev. A",
            "year": 1996
        },
        {
            "authors": [
                "M. Steege"
            ],
            "title": "Free-Space Optics: A Viable, Secure Last Mile Solution",
            "venue": "Sans Institute: Bethesda, MD,",
            "year": 2002
        },
        {
            "authors": [
                "M. Niemiec",
                "A.R. Pach"
            ],
            "title": "Management of security in quantum cryptography",
            "venue": "IEEE Commun. Mag",
            "year": 2013
        },
        {
            "authors": [
                "A. Cabello",
                "\u00c1. Feito",
                "A. Lamas-Linares"
            ],
            "title": "Bell\u2019s inequalities with realistic noise for polarization-entangled photons",
            "venue": "Phys. Rev. A",
            "year": 2005
        },
        {
            "authors": [
                "C.H. Bennett",
                "G. Brassard"
            ],
            "title": "Quantum cryptography: Public key distribution and coin tossing",
            "venue": "Theor. Comput. Sci",
            "year": 2014
        },
        {
            "authors": [
                "J. Russell"
            ],
            "title": "Application of quantum key distribution",
            "venue": "In Proceedings of the MILCOM 2008\u20142008 IEEE Military Communications Conference, San Diego, CA, USA,",
            "year": 2008
        },
        {
            "authors": [
                "D. Gottesman",
                "H.-K. Lo"
            ],
            "title": "From quantum cheating to quantum security. arXiv 2001, arXiv:quant-ph/0111100",
            "year": 2001
        },
        {
            "authors": [
                "P.W. Shor"
            ],
            "title": "Polynomial-time algorithms for prime factorization and discrete logarithms on a quantum computer",
            "venue": "SIAM Rev",
            "year": 1999
        },
        {
            "authors": [
                "Z. Cao",
                "L. Liu"
            ],
            "title": "Improvement of one quantum encryption scheme",
            "venue": "Int. J. Quantum Inf",
            "year": 2012
        },
        {
            "authors": [
                "S.-M. Zhao",
                "F. Li",
                "B.-Y. Zheng"
            ],
            "title": "A proof of security of quantum key distribution in probabilistic clone scheme",
            "venue": "In Proceedings of the International Conference on Communication Technology Proceedings,",
            "year": 2003
        },
        {
            "authors": [
                "R.D. Sharma",
                "A. De"
            ],
            "title": "A new secure model for quantum key distribution protocol",
            "venue": "In Proceedings of the 2011 6th International Conference on Industrial and Information Systems, Kandy, Sri Lanka,",
            "year": 2011
        },
        {
            "authors": [
                "P. Jouguet",
                "S. Kunz-Jacques"
            ],
            "title": "High performance error correction for quantum key distribution using polar codes",
            "year": 2012
        },
        {
            "authors": [
                "N.J. Cerf",
                "M. Bourennane",
                "A. Karlsson",
                "N. Gisin"
            ],
            "title": "Security of quantum key distribution using d-level systems",
            "venue": "Phys. Rev. Lett",
            "year": 2002
        },
        {
            "authors": [
                "D.N. Kartheek",
                "G. Amarnath",
                "P.V. Reddy"
            ],
            "title": "Security in quantum computing using quantum key distribution protocols",
            "venue": "In Proceedings of the 2013 International Mutli-Conference on Automation,",
            "year": 2013
        },
        {
            "authors": [
                "G. Zeng",
                "X. Wang"
            ],
            "title": "Quantum key distribution with authentication",
            "venue": "arXiv 1998,",
            "year": 1202
        },
        {
            "authors": [
                "A. Sharma",
                "V. Ojha",
                "S.K. Lenka"
            ],
            "title": "Security of entanglement based version of BB84 protocol for Quantum Cryptography",
            "venue": "In Proceedings of the 2010 3rd International Conference on Computer Science and Information Technology, Chengdu, China,",
            "year": 2010
        },
        {
            "authors": [
                "P.W. Shor",
                "J. Preskill"
            ],
            "title": "Simple proof of security of the BB84 quantum key distribution protocol",
            "venue": "Phys. Rev. Lett",
            "year": 2000
        },
        {
            "authors": [
                "V. Scarani",
                "A. Acin",
                "G. Ribordy",
                "N. Gisin"
            ],
            "title": "Quantum cryptography protocols robust against photon number splitting attacks for weak laser pulse implementations",
            "venue": "Phys. Rev. Lett",
            "year": 2004
        },
        {
            "authors": [
                "T. ElGamal"
            ],
            "title": "A public key cryptosystem and a signature scheme based on discrete logarithms",
            "venue": "IEEE Trans. Inf. Theory",
            "year": 1985
        },
        {
            "authors": [
                "M. Stip\u010devi\u0107"
            ],
            "title": "How secure is quantum cryptography",
            "venue": "In Proceedings of the 2012 35th International Convention MIPRO, Opatija, Croatia,",
            "year": 2012
        },
        {
            "authors": [
                "L.I.A. Ghazali",
                "A.F. Abas",
                "W.A.W. Adnan",
                "M. Mokhtar",
                "M.A. Mahdi",
                "M.I. Saripan"
            ],
            "title": "Security proof of Improved-SARG04 protocol using the same four qubit states",
            "venue": "In Proceedings of the International Conference on Photonics",
            "year": 2010
        },
        {
            "authors": [
                "A.A. Abushgra"
            ],
            "title": "SARG04 and AK15 Protocols Based on the Run-Time Execution and QBER",
            "venue": "In Proceedings of the 2021 IEEE 5th International Conference on Cryptography, Security and Privacy (CSP), Zhuhai, China,",
            "year": 2021
        },
        {
            "authors": [
                "S. Rass",
                "P. Schartner",
                "M. Greiler"
            ],
            "title": "Quantum coin-flipping-based authentication",
            "venue": "In Proceedings of the 2009 IEEE International Conference on Communications, Dresden, Germany,",
            "year": 2009
        },
        {
            "authors": [
                "Y. Zhou",
                "X. Zhou",
                "J. Gao"
            ],
            "title": "Scarani-acin-ribordy-gisin decoy-state protocols in quantum key distribution with a heralded single photon source",
            "venue": "In Proceedings of the 2009 9th International Conference on Electronic Measurement & Instruments, Beijing, China,",
            "year": 2009
        },
        {
            "authors": [
                "V. Scarani",
                "H. Bechmann-Pasquinucci",
                "N.J. Cerf",
                "M. Du\u0161ek",
                "N. L\u00fctkenhaus",
                "M. Peev"
            ],
            "title": "The security of practical quantum key distribution",
            "venue": "Rev. Mod. Phys",
            "year": 2009
        },
        {
            "authors": [
                "C.H. Bennett"
            ],
            "title": "Quantum cryptography using any two nonorthogonal states",
            "venue": "Phys. Rev. Lett",
            "year": 1992
        },
        {
            "authors": [
                "M. Elboukhari",
                "M. Azizi",
                "A. Azizi"
            ],
            "title": "Quantum Key Distribution Protocols: A Survey",
            "venue": "Int. J. Univers. Comput. Sci. 2010,",
            "year": 2010
        },
        {
            "authors": [
                "P. Jobez",
                "N. Timoney",
                "C. Laplane",
                "J. Etesse",
                "A. Ferrier",
                "P. Goldner",
                "N. Gisin",
                "M. Afzelius"
            ],
            "title": "Towards highly multimode optical quantum memory for quantum repeaters",
            "venue": "Phys. Rev. A",
            "year": 2016
        },
        {
            "authors": [
                "N. Gisin",
                "G. Ribordy",
                "H. Zbinden",
                "D. Stucki",
                "N. Brunner",
                "V. Scarani"
            ],
            "title": "Towards practical and fast quantum cryptography",
            "year": 2004
        },
        {
            "authors": [
                "D. Stucki",
                "N. Brunner",
                "N. Gisin",
                "V. Scarani",
                "H. Zbinden"
            ],
            "title": "Fast and simple one-way quantum key distribution",
            "venue": "Appl. Phys. Lett. 2005,",
            "year": 1941
        },
        {
            "authors": [
                "H. Singh",
                "D.L. Gupta",
                "A.K. Singh"
            ],
            "title": "Quantum key distribution protocols: A review",
            "venue": "J. Comput. Eng",
            "year": 2014
        },
        {
            "authors": [
                "K. Inoue",
                "E. Waks",
                "Y. Yamamoto"
            ],
            "title": "Differential phase shift quantum key distribution",
            "venue": "Phys. Rev. Lett",
            "year": 2002
        },
        {
            "authors": [
                "M.M. Khan",
                "M. Murphy",
                "A. Beige"
            ],
            "title": "High error-rate quantum key distribution for long-distance communication",
            "venue": "New J. Phys",
            "year": 2009
        },
        {
            "authors": [
                "E.H. Serna"
            ],
            "title": "Quantum key distribution protocol with private-public key",
            "venue": "arXiv 2009,",
            "year": 2009
        },
        {
            "authors": [
                "Z.-F. Han",
                "H. Li"
            ],
            "title": "Security of practical quantum key distribution system",
            "venue": "In Proceedings of the 2011 International Symposium on Intelligent Signal Processing and Communications Systems (ISPACS),",
            "year": 2011
        },
        {
            "authors": [
                "M.M. Khan",
                "J. Xu",
                "A. Beige"
            ],
            "title": "Improved Eavesdropping Detection in Quantum Key Distribution",
            "venue": "arXiv 2011,",
            "year": 2011
        },
        {
            "authors": [
                "A. Einstein",
                "B. Podolsky",
                "N. Rosen"
            ],
            "title": "Can quantum-mechanical description of physical reality be considered complete",
            "venue": "Phys. Rev",
            "year": 1935
        },
        {
            "authors": [
                "A. Abushgra",
                "K. Elleithy"
            ],
            "title": "Initiated decoy states in quantum key distribution protocol by 3 ways channel",
            "venue": "In Proceedings of the 2015 Long Island Systems, Applications and Technology, Farmingdale, NY, USA,",
            "year": 2015
        },
        {
            "authors": [
                "A.K. Ekert"
            ],
            "title": "Quantum cryptography based on Bell\u2019s theorem",
            "venue": "Phys. Rev. Lett",
            "year": 1991
        },
        {
            "authors": [
                "T. Hwang",
                "K.-C. Lee"
            ],
            "title": "EPR quantum key distribution protocols with potential 100% qubit efficiency",
            "venue": "IET Inf. Secur. 2007,",
            "year": 2007
        },
        {
            "authors": [
                "E.H. Serna"
            ],
            "title": "Quantum Key Distribution from a random seed",
            "venue": "arXiv 2013,",
            "year": 2013
        },
        {
            "authors": [
                "K. Inoue",
                "E. Waks",
                "Y. Yamamoto"
            ],
            "title": "Differential-phase-shift quantum key distribution using coherent light",
            "venue": "Phys. Rev. A",
            "year": 2003
        },
        {
            "authors": [
                "T. Honjo",
                "A. Uchida",
                "K. Amano",
                "K. Hirano",
                "H. Someya",
                "H. Okumura",
                "K. Yoshimura",
                "P. Davis",
                "Y. Tokura"
            ],
            "title": "Differential-phaseshift quantum key distribution experiment using fast physical random bit generator with chaotic semiconductor lasers",
            "venue": "Opt. Express",
            "year": 2009
        },
        {
            "authors": [
                "A. Abushgra",
                "K. Elleithy"
            ],
            "title": "Differentiations of QKDPs in Run-Time Execution",
            "venue": "p. 12. Available online: Khaledelleithy.org/ Conferences/5-%20Differentiations%20of%20QKDPs%20in%20Run-Time%20Execution.pdf (accessed on",
            "year": 2022
        },
        {
            "authors": [
                "P.P. Rohde"
            ],
            "title": "Quack! A Quantum Computer Simulator for Matlab; Centre for Quantum Computer Technology, Department of Physics, University of Queensland",
            "year": 2005
        },
        {
            "authors": [
                "A.A. Bruen",
                "M.A. Forcinito"
            ],
            "title": "Cryptography, Information Theory, and Error-Correction: A Handbook for the 21st Century",
            "year": 2011
        }
    ],
    "sections": [
        {
            "text": "Citation: Abushgra, A.A. Variations of QKD Protocols Based on Conventional System Measurements: A Literature Review. Cryptography 2022, 6, 12. https://doi.org/ 10.3390/cryptography6010012\nAcademic Editor: Josef Pieprzyk\nReceived: 21 January 2022 Accepted: 2 March 2022 Published: 4 March 2022\nPublisher\u2019s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affiliations.\nCopyright: \u00a9 2022 by the author. Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (https:// creativecommons.org/licenses/by/ 4.0/).\nKeywords: quantum key distribution protocol; district variable; continues variable; superposition state; quantum bit (qubit); entanglement state\n1. Introduction\nFor several years, cryptographers have experimented with encryption/decryption techniques to create effective and robust methods to secure communications between two or more legitimate entities. The first known method is conventional (classical) cryptography, which involves sharing a message between two legitimate parties through insecure channels (for example, the Internet). The shared message (plaintext) should be sent from Alice (the sender) to Bob (the receiver) without the intervention by Eve (an eavesdropper). To prevent impersonation and listening, both Alice and Bob are supposed to send an X encrypted plaintext. Alice encrypts the plaintext X to become ciphertext C. On the other hand, Bob decrypts the ciphertext C to reveal the original plaintext X. The two legitimate participants use a shared code (secret key) to produce a ciphertext C [1]. For a long time, various algorithms have been used in the cryptosystem, and Caesar Cipher is one of them. Later, several cryptographic algorithms were introduced based on the large amount of data used by the Internet. RSA [2] and Diffie-Hellman [3] are the two most popular classical algorithms used in today\u2019s cryptographic systems. Due to the huge amount of data that is shared over the Internet, classical cryptography may not provide sufficient protection. Hence, scientists are seeking a more reliable system based on the law of physics. A quantum system is the next solution for cryptography, where quantum cryptography is empowered by quantum mechanics. The power of quantum cryptography was initially introduced by Wiesner and Bennett in 1979 [4,5]. Quantum cryptography applies theories of physics to produce a secret key that can be shared by communicating parties. Moreover, sharing a secret key usually contains a random string of qubits (quantum bits) between the two entities. The encryption/decryption of plaintext X\nCryptography 2022, 6, 12. https://doi.org/10.3390/cryptography6010012 https://www.mdpi.com/journal/cryptography\nCryptography 2022, 6, 12 2 of 25\nare processed using a quantum system [6]. This quantum system operates based on the principles of physics and generates a secret key that is shared between communicating parties. These parties can communicate over insecure (public) channels to confirm the uncovered qubits (sifting phase). Therefore, Quantum Key Distribution (QKD) provides a secret key generator that can be guaranteed by the law of physics. Generally, QKD protocol consists of two approaches to deal with a string of qubits: the first approach is a Discrete Variable (DV), which is coded in the quantum state of a single photon, and the binary data should be measured using a single photon detector, while the second approach contains a Continuous Variable (CV), which is encoded on coherent states of weak pulses of light. Continuous data values are measured using homodyne detection methods [7], where CV systems should offer advantages over traditional DV systems. These advantages could be reflected in a higher secret key exchange rate for short distances, lower cost, or compatibility with telecommunication technologies. Although quantum computers are light years away from today\u2019s technology, current cryptologists are exploring the impacts of this future technology, especially by breaking the current cryptosystem, which is based on prime factors of large numbers, such as ECC and RSA. Moreover, these impacts are a threat to cryptography elements such as confidentiality, data integrity, and authentication (digital signature). Consequently, breaking public-key cryptography requires a quantum computer that is supposed to be at least (\u2248 2000 qubits). Therefore, this quantum computer would break a prime factor of a great number in milliseconds. Usually, breaking an RSA encryption using an existing classical system (even power computers) would take hundreds of years [8]. This paper highlights the mechanisms and processes that are used to produce a secret key in quantum system using QKD protocols such as the BB84 protocol, SARG04 protocol, B92 protocol, Coherent-One-Way (COW) protocol, KMB09 protocol, EPR protocol, S09 protocol, Differential-Phase-Shift (DPS) protocol, and S13 protocol. Although many interesting QKD protocols have been announced in the quantum cryptography world, these QKD protocols determine the most applicable and well-known protocols.\n2. Literature Review\nIn 1984, Bennett and Brassard invented the first quantum key distribution protocol, which became the first step toward quantum cryptography [9,10]. Many recent QKD protocols have been designed based on Bennett and Brassard\u2019s algorithms, particularly the quantum channel. A quantum key distribution protocol has been adopted to generate a shared key using quantum mechanics. This shared key is supposed to be confirmed in sifting and correcting error phases, where both phases should be applied during the classical communication channel. Each QKD protocol has a certain design that makes the generation of a secret key either secure or weak. These designs will be explained later based on the original protocols. Section 2.1 presents the history of classical cryptography, and Section 2.2 explains quantum cryptography as well as the known QKD protocols. Finally, the paper presents outcomes of the QKD protocol comparisons and experiments that mainly focus on runtime execution during secret key exchange.\n2.1. Classical Cryptography\nClassical (conventional) cryptography relies on the complexity and difficulty of computing mathematical equations. This complexity will help Alice and Bob hamper Eve by exposing submitted messages or taping some of the contents. However, the reality of classical cryptography depends on the ability to stop threats caused by two types of cyber-attacks. One attack is called an active attack, and the other is called a passive attack. Active attacks can involve changes in the submitted data, unlike passive attacks that tap data without any changes. Historically, classical cryptography was explored in 1900 B.C., after the discovery of some messages that had been written in an ancient Egyptian tomb [11]. Subsequently,\nCryptography 2022, 6, 12 3 of 25\nseveral cryptographic algorithms [1] were introduced, and all of these algorithms have the same goal, which is inferred by creating a secret shared key as follows:\nC = E {K, X}, and then X = D {K, C}.\nIn addition, many encryption/decryption algorithms have been developed in classical cryptography, such as the RSA algorithm. The RSA algorithm [2] uses a cryptography method that is based on the complexity of computing prime factors of large integers. Moreover, there are many cryptographic algorithms [12,13] that possess stability and applicability in today\u2019s classical system. However, these algorithms will most likely fail once a quantum computer exists. The main reason behind the failure of the classical system is due to the power of the quantum system, especially the processing speed of the quantum machine. Because of the high degree of parallelism in quantum machines introduced by superposition states, the time required for factoring a large prime number is small compared to a classical machine. Generally, classical cryptography is considered secure, as long as the quantum computer is not publicly available. The weakness of classical cryptography is related to the time needed to encrypt/decrypt algorithms, which can be a cryptanalysis solution for any cryptographic algorithm. However, the mechanism of encrypting/decrypting any kind of plaintexts in the classical system is applicable and simple operations, but it contains difficult mathematical equations that are impenetrable for any attack as shown in Figure 1. The main purpose of a cryptographic system is to send a message from Alice, who converts the plaintext X to ciphertext C using one of the available algorithms (e.g., DES, 3DES, AES, Diffie-Hellman, RSA, etc.), and then the ciphertext is sent through one of the classical communication channels (e.g., the Internet) to Bob. Hence, Bob converts the ciphertext C to plaintext X by decrypting the ciphertext using only a shared key (secret key) in symmetric cryptography methods. In asymmetric cryptography methods, Alice and Bob use the same previous scenario except that two shared keys (public and private keys) are required between the communicating parties [14].\nCryptography 2022, 6, x FOR PEER REVIEW 3 of 26\nthe discovery of some messages that had been written in an ancient Egyptian tomb [11]. Subsequently, several cryptographic algorithms [1] were introduced, and all of these algorithms have the same goal, which is inferred by creating a secret shared key as follows:\nC = E {K, X}, and then X = D {K, C}.\nIn addition, many encryption/decryption algorithms have been developed in classi-\ncal cryptography, such as the RSA algorithm. The RSA algorithm [2] uses a cryptography method that is based on the complexity of computing prime factors of large integers. Moreover, there are many cryptographic algorithms [12,13] that possess stability and applicability in today\u2019s classical system. However, these algorithms will most likely fail once a quantum computer exists. The main reason behind the failure of the classical system is due to the power of the quantum system, especially the processing speed of the quantum machine. Because of the high degree of parallelism in quantum machines introduced by superposition states, the time required for factoring a large prime number is small compared to a classical machine.\nGenerally, classical cryptography is considered secure, as long as the quantum com-\nputer is not publicly available. The weakness of classical cryptography is related to the time needed to encrypt/decrypt algorith s, hich can be a cryptanalysis solution for any cryptographic algorith . o ever, the echanis of encrypting/decrypting any kind of plaintexts in the classical system is applicable and simple operations, but it contains difficult mathematical equations that are impenetrable for any attack as sho i i re 1. The main purpose of a cryptographic system is to send a message from Alice, who conv rts the plaintext X to ciphertext C using on of the available algorithms (e.g., DES, 3DES, AES, Diffie-Hellman, RSA, etc.), and then the ciphertext is sent through one of the cla sical communication cha nels (e.g., the Interne ) to Bob. Hence, Bob converts the cipher ex C to plaintext X by decrypting the ciphertext using only a shared key (secret ke ) in symmetric cryptograp y methods. In asymmetric cryptography methods, Alice and Bob use the same previous scenario except that two shared keys (public and private k ys) are requir d between the communicating parties [14].\nPresently, quantum cryptography is a sparkling topic in the field of communications\nand information technology. There is no doubt that the main focus of the cryptosystem is to prevent any entity from accessing the shared data, except for legal correspondents. Confidential communications between the sender and the receiver message must be ensured, and the principles of quantum communication ensure that data are transmitted over a secure channel with notification in the event of a data interruption.\nQuantum cryptography uses symmetric key encryption, which is very common in\nclassical cryptography methods. Moreover, symmetric key encryption provides straightforwardness between communicating parties in a quantum system, such as the One-Time Pad (OTP) encryption technique [15]. Furthermore, the Shared Secret Key (SSK) is used in\nPresently, quantum cryptography is a sparkling topic in the field of communications and infor ation technology. There is no doubt that the ain focus of the cryptosystem is to prevent any entity from accessing the shared data, except for legal correspondents. Confidential communications between the sender and the receiver message must be ensured, and the principles of quantum communication ensure that data are transmitted over a secure channel with notification in the event of a data interruption. Quantum cryptography uses symmetric key encryption, which is very common in classical cryptography methods. Moreover, symmetric key encryption provides straightforwardness between communicating parties in a quantum system, such as the One-Time Pad (OTP) encryption technique [15]. Furthermore, the Shared Secret Key (SSK) is used in the OTP mechanism by converting the entire plaintext X into a long string of n-bits.\nCryptography 2022, 6, 12 4 of 25\nOn the other hand, the SSK should be created to match the same length (number of bits) of the original plaintext X, where the plaintext X and secret key SSK will be XORed (\u2297) to produce a ciphertext C. This process can be used in quantum cryptography when both legitimate parties obtain an SSK with the known plaintext X. An interesting point in quantum cryptography is the inability to make a copy of the original plaintext X or even listen to the message content by an eavesdropper, due to the rules of quantum mechanics (non-cloning theory) [16]. For instance, if two connected terminals are interrupted during a quantum communication, then the quantum system will be altered. This alteration is recognized by destroying the content of the message. Therefore, communicating parties can detect the information attacks, while the eavesdropper cannot take advantage of a system interruption. Furthermore, several requirements are available to achieve secure communication using quantum systems. The first condition is a quantum channel, where the submitted data (set of quantum bits) is transmitted. The quantum channel should be either free space or fiber optics [17]. The data submitted in the quantum channel includes information about the shared secret key (SSK), which is carried by elementary particles. The second condition consists of a classical channel that should be established to recognize whether the shared key was detected by an eavesdropper or altered by the environment [18]. The classical channel uses a sifting process to correct errors that occur during the transmission of quantum channel. In addition, it is used to terminate the communication initiated between the parties if the detected error rate is high. Public key cryptography provides only a certain amount of protection. Therefore, quantum mechanics will provide a complete solution for the next generation of secure communication networks. Quantum cryptography is based on quantum mechanics, in which some of theories of physics are applied. Moreover, there are many physical quantities or observables, such as photon polarization, momentum, and mass that can be used in the field of cryptography [19]. Based on the law of physics, the process of exchanging information within a quantum system is naturally protected from passive attacks, but it is still a challenge for active attacks. Here, the information used is initiated as a string of bits that are converted by quantum devices into quantum bits (qubits). The qubits are directed by light filters to different polarized states |\u03d5i\u3009. Therefore, a single photon can be initiated and measured based on multiple states. The explanations for used symbols are shown in Table 1.\nThen, this paper introduces some well-known QKD protocols and explains each QKD protocol based on the mechanism of the adopted algorithm. In addition, the QKD protocols were tested and analyzed to demonstrate the differences between all selected QKD protocols.\nCryptography 2022, 6, 12 5 of 25\n2.2.1. The BBB84 Protocol\nIn 1984, the BB84 protocol was introduced by Bennett and Brassard [20]. The concept of the BB84 protocol depends on the exchange of a secret key between Alice and Bob through a secure quantum channel. The process is described as a tossing-coin, whereby two communication channels (quantum and classical channels) are initiated between Alice and Bob. The quantum channel is technically the emission of a photon in either a free space or fiber-optic cable. The classical channel is an ordinary, traditional bit-shift channel, in which communications during the classical channel do not need to be secure. Both the sender and receiver should have a random number generator and four polarizing filters to generate qubits. These requirements should be available to fulfill the quality of photon submissions [21,22]. Moreover, generating a secret key using the BB84 protocol requires each of the communicating parties (the sender and receiver) to have a random number generator that should be placed in an appropriate position. The generator can be set in the middle between the legitimate parties. Primarily, the sender (Alice) starts preparing plaintext X, which is converted to a string of bits. Simultaneously, Alice initiates a random set of bases (recliner or diagonal) that matches the length of plaintext X. These bases include four states (|+\u3009, |\u2212\u3009, |0\u3009, and |1\u3009). Each state on a different basis reflects the probability of (0 or 1). Furthermore, the entire prepared states |\u03d5i\u3009 will be submitted to a quantum channel with the same polarization of the prepared state as long as there is no interruption [23]. The probability of X encoded during Alice\u2019s setup represents the randomness of an encryption algorithm, where encoding the same information of X many times produces various ciphertexts [24]. Although many schemes have been published illustrating the inefficiency of the BB84 protocol as well as the weaknesses in the encryption mechanism, the BB84 protocol remains a solid background for many modern QKD protocols. The BB84 protocol is also considered to demonstrate the relationship between simplicity and durability, as shown in Figure 2.\nCryptography 2022, 6, x FOR PEER REVIEW 5 of 26\nThen, this paper introduces some well-known QKD protocols and explains each\nQKD protocol based on the mechanism of the adopted algorithm. In addition, the QKD protocols were tested and analyzed to demonstrate the differences between all selected QKD protocols.\n2.2.1. The BBB84 Protocol\nIn 1984, the BB84 protocol was introduced by Bennett and Brassard [20]. The concept\nof the BB84 protocol depends on the exchange of a secret key between Alice and Bob through a secure quantum channel. The process is described as a tossing-coin, whereby two communication channels (quantum and classical channels) are initiated between Alice and Bob. The quantum channel is technically the emission of a photon in either a free space or fiber-optic cable. The classical channel is an ordinary, traditional bit-shift channel, in which communications during the classical channel do not need to be secure. Both the sender and receiver should have a random number generator and four polarizing filters to generate qubits. These requirements should be available to fulfill the quality of photon submissions [21,22].\nMoreover, generating a secret key using the BB84 protocol requires each of the com-\nmunicating parties (the sender and receiver) to have a random number generator that should be placed in an appropriate position. The generator can be set in the middle between the legitimate parties. Primarily, the sender (Alice) starts preparing plaintext X, which is converted to a string of bits. Simultaneously, Alice initiates a random set of bases (recliner or diagonal) that matches the length of plaintext X. These bases include four states (|+\u27e9, |\u2212\u27e9, |0\u27e9, and |1\u27e9). Each state on a different basis reflects the probability of (0 or 1). Furthermore, the entire prepared states |\u03c6i\u27e9 will be submitted to a quantum channel with the same polarization of the prepared state as long as there is no interruption [23]. The probability of X encoded during Alice\u2019s setup represents the randomness of an encryption algorithm, where encoding the same information of X many times produces various ciphertexts [24]. Although many schemes have been published illustrating the inefficiency of the BB84 protocol as well as the weaknesses in the encryption mechanism, the BB84 protocol remains a solid background for many modern QKD protoc ls. The BB84 protoc l is also considere to emonstrate the relationship betwe n simplicity and durability, as shown in Figure 2.\nFigure 2. The main outline of secret key\u2019s process in quantum key distribution protocols, where the sender initiates the communication from up with converting the bits to quantum bit. Then processing the submissions between the sender and receiver through quantum channels, and finally the confirmation and error-correction will be using a classical system.\nIn addition, the BB84 protocol relies on the non-cloning theorem and the Heisenberg\nuncertainty principle to secure the submitted qubits. The non-cloning theorem is derived from the superposition principles of quantum mechanics [25]. Moreover, the non-cloning feature makes the BB84 protocol more stable by detecting any attack, although attackers never stop attempting to crack any cryptographic protocol. The Heisenberg uncertainty\nFigure 2. The main outline of secret key\u2019s process in quantum key distribution protocols, where the sender initiates the communication from up with converting the bits to quantum bit. Then processing the submissions between the sender and receiver through quantum channels, and finally the confirmation and error-correction will be using a classical system.\nIn addition, the BB84 protocol relies on the non-cloning theorem and the Heisenberg uncertainty principle to secure the submitted qubits. The non-cloning theorem is derived from the superposition principles of quantum mechanics [25]. Moreover, the non-cloning feature makes the BB84 protocol more stable by detecting any attack, although attackers never stop attempting to crack any cryptographic protocol. The Heisenberg uncertainty principle is described as the impossibility to prepare or measure states simultaneously in a specific environment based on position and momentum with quantum conditions. In general, quantum key distribution protocols can be categorized by two disciplines of the photon behavior: the first one is based on superposition states (orthogonal/nonorthogonal) and the second one is based on the entangled states, where the BB84 protocol uses polarized orthogonal states [26]. In superposition states, Alice sends a state that should\nCryptography 2022, 6, 12 6 of 25\nbe generated on bases of (\u00d7) or (+) as above, where in this case, Bob should work on one of these bases randomly. Furthermore, if Alice uses the (\u00d7) basis to submit a |1\u3009 state, she will send a | \u2196\u3009 state. Following the same, if she wants to send a | \u2191\u3009 state, and Bob already measured the | \u2191\u3009 state in the (+) basis, he will record a |1\u3009 state. Additionally, if Alice sends a photon as | \u2197\u3009 or | \u2196\u3009 state and Bob just measures the photon in the basis (+), the measurement will be in the polarized states in Equation (1) as follows:\n| \u2197\u3009 = 1\u221a 2 (| \u2191\u3009+ | \u2192\u3009), | \u2196\u3009 = 1\u221a 2 (| \u2191\u3009+ | \u2192\u3009).\n(1)\nTherefore, there is a 50% chance of recording |0\u3009 or |1\u3009 state by Bob as well as four possibilities [9] in Equation (2) as follows:\n| \u2196\u3009 with (+) = 1\u221a 2 (| \u2191\u3009\u2212 | \u2192\u3009), | \u2197\u3009 with (+) = 1\u221a 2 (| \u2191\u3009+ | \u2192\u3009), | \u2191\u3009 with (\u00d7) = 1\u221a 2 (|\u2197\u3009+ | \u2196\u3009), | \u2192\u3009 with (\u00d7) = 1\u221a 2 (|\u2197\u3009\u2212| \u2196\u3009).\n(2)\nThese possibilities are shown on the Bloch sphere to display the measure of each polarization state that can be displayed in a three-dimensional space (x, y, and z) as shown in Figure 3.\nCryptography 2022, 6, x FOR PEER REVIEW 6 of 26 principle is described as the impossibility to prepare or measure states simultaneously in a specific environment based on position and momentum with quantum conditions.\nIn general, quantum key distribution protocols can be categorized by two disciplines of the photon behavior: the first one is based on superposition states (orthogonal/non-orthogonal) and the second one is based on the entangled states, where the BB84 protocol uses polarized orthogonal states [26]. In superposition states, Alice sends a state that should be generated on bases of (\u00d7) or (+) as above, where in this case, Bob should work on one of these bases randomly. Furthermore, if Alice uses the (\u00d7) basis to submit a |1\u27e9 state, she will send a |\u2196\u27e9 state. Following the same, if she wants to send a |\u2191\u27e9 state, and Bob already measured the |\u2191\u27e9 state in the (+) basis, he will record a|1\u27e9 state. Additionally, if Alic sends a ph ton as |\u2197\u27e9 or |\u2196\u27e9 state and Bob ju t m asure the photon in the basis (+), the measurement will be in the polarized states in Equation (1) as follows:\n|\u2197\u27e9 = 1\n\u221a2 (|\u2191\u27e9 + |\u2192\u27e9),\n|\u2196\u27e9 = 1\n\u221a2 (|\u2191\u27e9 + |\u2192\u27e9).\n(1)\nTherefore, there is a 50% chance of recording |0\u27e9 or |1\u27e9 state by Bob as well as four\npossibilities [9] in Equation (2) as follows:\n|\u2196\u27e9 \ud835\udc64\ud835\udc56\ud835\udc61\u210e (+) = 1\n\u221a2 (|\u2191\u27e9 \u2212 |\u2192\u27e9),\n|\u2197\u27e9 \ud835\udc64\ud835\udc56\ud835\udc61\u210e (+) = 1\n\u221a2 (|\u2191\u27e9 + |\u2192\u27e9),\n|\u2191\u27e9 \ud835\udc64\ud835\udc56\ud835\udc61\u210e (\u00d7) = 1\n\u221a2 (|\u2197\u27e9 + |\u2196\u27e9),\n|\u2192\u27e9 \ud835\udc64\ud835\udc56\ud835\udc61\u210e (\u00d7) = 1\n\u221a2 (|\u2197\u27e9 \u2212 |\u2196\u27e9).\n(2)\nThese po sibilities are hown on the Bloch sphere to display the measure of each po-\nlarization st e that can be displayed in a three-dim ns onal space (x, y, and z) as shown in Figure 3.\nFigure 3. The Bloch Sphere.\nIn fact, there are many sequential steps for both parties to create a successful Shared\nSecret Key (SSK) using the BB84 protocol, as shown in Figure 2. These steps are described as follows:\nFigure 3. The Bloch Sphere.\nIn fact, there are many sequential steps for both parties to create a successful Shared Secret Key (SSK) using the BB84 protocol, as shown in Figure 2. These steps are described as follows: Step 1: The length of the plaintext X should be set up by Alice to become a string of n-bits, and then the n-bits are applied to a randomly prepared basis (\u00d7 or+). Step 2: Each random basis will produce a random state either |0\u3009 or |1\u3009 if the basis is |\u00d7\u3009, or |0\u3009 or |1\u3009 if the basis is |+\u3009 as shown in Table 2.\nTable 2. The Alice sends n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1 Alice\u2019s random bases + + \u00d7 + + +\nAlice sends \u2192 \u2191 \u2196 \u2192 \u2191 \u2191\nCryptography 2022, 6, 12 7 of 25\nStep 3: When the string of n-qubits is submitted by Alice, Bob measures the upcoming n-qubits based on random bases, as shown in Table 3. Next, Bob obtains a string of states that reflect n-bits. If Bob cannot measure all the submitted qubits, both parties will release additional qubits by sharing the used bases through a public channel.\nTable 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7 Bob observes \u2197 \u2191 \u2196 \u2196 \u2191 \u2197\nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice and Bob start estimating the errors that could be caused by Eve, where many error-correction methods [27] are used in the BB84 protocol. The raw secret key is processed, when Alice and Bob compare the matching bits, where the uncorrelated bits are discarded, as shown in Table 4. This is called a sifting procedure, which enhances any attempt by Eve to obtain information and detect any error [28].\nTable 4. Alice and bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + + Bob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26 Step 1: The length of the plaintext X should be set up by Alice to become a string of n-bits, and then the n-bits are applied to a randomly prepared basis (\u00d7 or +). Step 2: Each random basis will produce a random state either |0\u27e9 or|1\u27e9 if the basis is |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice sends n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is submitted by Alice, Bob measures the upcom-\ning n-qubits based on random bases, as shown in Table 3. Next, Bob obtains a string of states that reflect n-bits. If Bob cannot measure all the submitted qubits, both parties will release additional qubits by sharing the used bases through a public channel.\nTable 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice and Bob start estimating the errors that could be caused by Eve,\nwhere many er or-correction methods [27] are u ed in the BB84 protocol. The raw secret key is processed, when Alice and Bob ompare the matching bits, w ere the uncorrelat d bits are discarded, as shown in Table 4. This is called a s fting procedure, whi h enhances any attempt by Eve to o tain inf rmation and detect y error [28].\nTable 4. Alice and bob publicly compare used bases.\nBit Number 0 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 \u00d7 \u00d7 + \u00d7\nAgreement   \nShared secret key 1 1 1\nStep 5: After matching the sent and received qubits, the communication moves to the\nreconciliation phase only if the error rate is low. On the other hand, Alice and Bob end up the current communication if the error rate is too high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey contains the matched qubits of both parties. Unmatched qubits are supposed to be removed from the shared key SSK.\nStep 7: Next, Alice and Bob start correcting the erroneous qubits again in a separate\nphase, as shown in Table 5, as they endeavor to reduce the number of exposed qubits.\nTable 5. Alice and Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26 St p 1: The length of the plaintext X ho ld be set up by Alice to become a string of n-bits, and then the n-bits are applied to a randomly prepared basis (\u00d7 or +). Step 2: Each random basis will pro uce a random state either |0\u27e9 or|1\u27e9 if the basis is |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice sends n ra dom bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is submitt d by Alice, Bob m asures the upcom-\ning n-qubits based on random bases, as shown in Table 3. Next, Bob obtains a string of stat s that reflect n-bits. If Bob cannot measure all the submitted qubits, both parties will release additional qub ts by sharing th used bases through a public channel.\nTabl 3. Bob receives n ra dom bits in rando measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s r ndom bases \u00d7 + \u00d7 \u00d7 +\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice and Bob start estimating e errors that coul e caused by Eve, h re any er r-cor ection methods [27] are used in the B 84 protocol. Th raw secret key is proces ed, when Alice and Bob co pare the matching bits, where the uncorrelated bits are di carded, as shown in Table 4. This is called a sifting procedure, which enhances any atte pt by Eve to obt in i formation and detect any er or [28].\nT l . lice and bob publicly co pare used bases.\nBit Number 0 1 2 3 4\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement   \nShar d secret key 1 1 1\nStep 5: After matching the sent and received qubits, the communication moves to the\nreconciliation phas only if the error rate is low. On the other h , Alic and Bob end up\nhe curre t communication if the err r rate is too high.\nStep 6: If th err r rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey contains the matched qubits of both parties. Unmatched q bits are supposed to be\ne ov d from th shared key SSK.\nS ep 7: Next, Alice nd Bob s art corr cting the erroneous qubits again in a separate\nphase, as shown in Table 5, as they endeavor to reduce the number of exposed qubits.\nTable 5. Alice and Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShar d secret keys 1 1 1 Randomly chosen  \nShar d secret key 1 1 1\nAgreements  \nUnreveal d secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26 Step 1: Th lengt of the pla ntext X should be set up by Alice to become a string of n-b ts, and then the n-bits ap lied to a r ndomly prepared basis (\u00d7 or +). Step 2: Each random b sis will produce a random ta e either |0\u27e9 or|1\u27e9 if the basis is |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if th basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice s n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is su itted by Alice, B b measures the upcom-\ning -qubits ba ed on random bas s, as shown in Table 3. Next, Bob obtains a string of s ates that reflec n-bits. If Bob cannot measure all the submi t d qubits, both parties will release additional q bits by sharing t e used bases through a public channel.\nT ble 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 \u00d7 \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nSt p 4: Both Alic d Bob sta t estim ting th rror that could be caused by Eve,\nwh re many error-correction methods [27] are used in t BB84 protocol. The raw secret key is processed, when Al ce and Bob compare t matchi g bits, where the uncorrelated bits are disc rd d, as shown in T ble 4. This is call d a s fting pro dure, which enhances any at empt by Ev to obtain information and detect any error [28].\nTa 4. Alice nd bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 \u00d7 \u00d7 + \u00d7\nAgreement   \nShared secret key 1 1 1\nStep 5: Aft r mat hing the sent and received qubits, the communication moves to the\nrec nciliation ph s only if the error rate is low. On the other hand, Alice and Bob end up the curren communication if the error rate is too high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey con a ns th matched qubits of both parties. Unmatched qubits are supposed to be remov d from the shared key SSK.\nStep 7: Next, Alice a d Bob star correct g the erroneous qubits again in a separate\nphase s wn in Table 5, as they end av r to reduce the number of exposed qubits.\nTa 5. Alice nd Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nShared secret key 1 1 1\nStep 5: After matching th sent and received qubits, the c unica on moves to the reconciliation phase only if he e ror rate is l w. On the other hand, Alice and Bob e up the cu rent co unication if the e r r rate is too high. Step 6: If the e ror ra is low, Alice nd Bob shar the r w k y. Mo ov r, the raw key cont ins the atched qubits of both par ies. Unmatched qubit are su posed to be re oved fro the shared key SSK. Step 7: Next, Alice and Bob start co r cti g the e rone us qubit ag in in a separa e phase, as sho n in Ta le 5, as they endeavor to reduc the nu b r of exposed q bits.\nT l . lice and Bob publicly co pare half of the re aining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: The length of the plaintext X should be set up by Alice to become a string of\nn-bits, and then the n-bits are applied to a randomly prepared basis (\u00d7 or +).\nStep 2: Each random basis will produce a random state either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice sends n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is submitted by Alice, Bob measures the upcom-\ning n-qubits based on random bases, as shown in Table 3. Next, Bob obtains a string of states that reflect n-bits. If Bob cannot measure all the submitted qubits, both parties will release additional qubits by sharing the used bases through a public channel.\nTable 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice and Bob start estimating the errors that could be caused by Eve,\nwhere many error-correction methods [27] are used in the BB84 protocol. The raw secret key is processed, when Alice and Bob compare the matching bits, where the uncorrelated bits are discarded, as shown in Table 4. This is called a sifting procedure, which enhances any attempt by Eve to obtain information and detect any error [28].\nTable 4. Alice and bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement   \nShared secret key 1 1 1\nStep 5: After matching the sent and received qubits, the communication moves to the\nreconciliation phase only if the error rate is low. On the other hand, Alice and Bob end up the current communication if the error rate is too high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey contains the matched qubits of both parties. Unmatched qubits are supposed to be removed from the shared key SSK.\nStep 7: Next, Alice and Bob start correcting the erroneous qubits again in a separate\nphase, as shown in Table 5, as they endeavor to reduce the number of exposed qubits.\nTable 5. Alice and Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: Th lengt of the plaintext X should be set up by Alice to become a string of\nn-bits, and then the n-bits are ap lied to a r ndomly prepared basis (\u00d7 or +).\nStep 2: Each random b sis will produce a random sta e either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice se s n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is su itted by Alice, B b measures the upcom-\ning -qubits ba ed on random bas s, as shown in Table 3. Next, Bob obtains a string of s ates that reflec n-bits. If Bob cannot measure all the submi t d qubits, both parties will release additional q bits by sharing t e used bases through a public channel.\nT ble 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice a d Bob start estimating th errors that could be caused by Eve,\nwhere many error-correction methods [27] are used in the BB84 protocol. The raw secret key is processed, when Alice and Bob compare the matching bits, where the uncorrelated bits are disc rd d, as shown in T ble 4. This is call d a s fting pro dure, which enhances any attempt by Eve to obtain information and detect any error [28].\nTa e 4. Alice nd bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement   \nShared secret key 1 1 1\nStep 5: After mat hing the sent and received qubits, the communication moves to the\nreconciliation ph s only if the error rate is low. On the other hand, Alice and Bob end up the current communication if the error rate is too high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey conta ns the matched qubits of both parties. Unmatched qubits are supposed to be remov d from the shared key SSK.\nStep 7: Next, Alice a d Bob start correcting the erroneous qubits again in a separate\nphase s own in Table 5, as they endeavor to reduce the number of exposed qubits.\nTa e 5. Alice nd Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nShared secr t k y 1 1 1 Agreements\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: The length of the plaintext X should be set up by Alice to become a string of\nn-bits, and then the n-bits are applied to a randomly prepared basis (\u00d7 or +).\nStep 2: Each random basis will produce a random state either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice sends n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s r ndom base + + \u00d7 + + +\nAlice sends      \nStep 3: When the string f n-qubits is submitted by Alice, Bob measures the upcom-\ning n-qubits based on random bases, as shown in Table 3. Next, Bob obtains a string of states that reflect n-bits. If Bob cannot measure all the submitted qubits, both parties will release additional qubits by shari g the used bases through a public channel.\nTable 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Ali e and Bob s art esti ng the errors that could b c used by Ev ,\nwhere many error-co ction methods [27] are used in the BB84 protocol. The raw secret key is processed, when Ali e and Bob mpare the ma ching bits, wher the u correl ted bits are discarded, as shown in Table 4. his is c lled a sifti g proced re, which enhances any attempt by Eve to obtain informati n and detect any error [28].\nTable 4. Alice and bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement   \nShared secret key 1 1 1\nStep 5: After matching the sent and received qubits, the communication moves to the\nreconciliation phase only if the error rate is low. On the other hand, Alice and Bob end up the current communication if the error rate is too high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey contains the matched qubits of both parties. Unmatched qubits are supposed to be removed from the shared key SSK.\nStep 7: Next, Alice and Bob start correcting the erroneous qubits again in a separate\nphase, as shown in Table 5, as they endeavor to reduce the number of exposed qubits.\nTable 5. Alice and Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: Th lengt of the plaintext X should be set up by Alice to become a string of\nn-bits, and then the n-bits are ap lied to a r ndomly prepared basis (\u00d7 or +).\nStep 2: Each random b sis will produce a random sta e either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice se s n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlic \u2019s r ndom b ses + + \u00d7 + + +\nAlice se s      \nSt p 3: When the string f n-qubits is su itted by Alice, B b measures the upcom-\ning -qubits ba ed on random bas s, as shown in Table 3. Next, Bob obtains a string of s ates that reflec n-bits. If Bob cannot measure all the submi t d qubits, both parties will release additional q bits by shari g t e used bases through a public channel.\nT ble 3. Bob receives n random bits in random measurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice a d Bob st rt stima ng th error that could be caused by Ev ,\nwhere many error-co rection methods [27] are used in the BB84 protocol. The raw secret k y is pr cessed, wh n Alice and B b compare th matching bits, where the uncorrelated bits are disc rd , s show in T bl 4. Thi is call d a s fti g pro dure, which enhances any attempt by Eve to obtain information and detect any error [28].\nTa e 4. Alice nd bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bases + + \u00d7 + + +\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement   \nShared secret key 1 1 1\nStep 5: After mat hing the sent and received qubits, the communication moves to the\nreconciliation ph s only if the error rate is low. On the other hand, Alice and Bob end up the current communication if the error rate is too high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey conta ns the matched qubits of both parties. Unmatched qubits are supposed to be remov d from the shared key SSK.\nStep 7: Next, Alice a d Bob start correcting the erroneous qubits again in a separate\nhase s own in Table 5, as they endeavor to reduce the number of exposed qubits.\nTa e 5. Alice nd Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nUnrevealed secret keys 1\n8 checking for errors, Alice and Bob hare an SSK that has the same length of plaintext X [29,30]. In o r words, Alice could cheat in this positio by sending a different basis (rectilinear and diagonal b sis or neit er rectilinear nor dia onal photon), so that she is not in a position to agree with any of Bob\u2019s table records in step (3). In contrast, Bob\u2019s table records the result of probabilistic b hav or that is not unde the control of the matching raw key [31]. Hence, it is very important to r alize that if Alice t ies t cheat in step (1), for instance, by sending a mixture of r ctilinear a di gonal states, Alic will l se the ability to ag ee with Bob\u2019s records table after step (1).\nCryptography 2022, 6, 12 8 of 25\nFinally, the BB84 protocol is assigned a secure protocol as mentioned in [32], and it is a simple protocol compared with current QKD protocols. This simplicity is based on the law of physics that occur during key generation.\n2.2.2. The SARG04 Protocol\nIn 2004, SARG04 was introduced by Scarain, Acin, Ribordy, and Gisin [33]. This protocol was then extracted using the previous protocol BB84. The SARG04 protocol uses the same bases and states as the BB84 protocol, where two bases (\u00d7 or +) and four states (|+\u3009, |\u2212\u3009, |0\u3009, |1\u3009) are used to initiate quantum submissions between the communicating parties. The SARG04 protocol is designed to be a robust protocol against Photon-NumberSplitting (PNS) attacks, especially when weakened laser pulses are emitted instead of a single photon source. Furthermore, SARG04 and BB84 are essentially equivalent to each other in the quantum communication phase, but the variation occurs by encoding and decoding the exchanged information into the classical channel [34]. The SARG04 protocol has a certain number of instructive differences, of which Bob must always choose the bases with a probability of 12 , even when Alice uses the same bases [35,36], [37] (p. 4). Although the SARG04 protocol is considered a new quantum mechanism for creating a secure shared key, the BB84 protocol is still seen in the instructions of the SARG04 protocol. In other words, when Alice matches the initiated qubits with the equivalent qubits from Bob, the Quantum Bit Error Rate (QBER) increases based on the presence of the error (unlike BB84, which is satisfied by the sifting phase). To abstract the sequential steps of the SARG04 protocol between the two legitimate parties Alice and Bob, one-way communication was applied as follows: Step 1: Alice creates n photons that start randomly with each of the four states (|\u03d5i\u3009, i = 0, 1, 2, 3. ); Bob should receive one of the four states. Step 2: When the photon is sent to Bob, it is measured randomly into quantum detectors using two bases (\u00d7or +). If this measurement does not match or cannot be measured, Bob informs Alice to ignore this photon. Step 3: Alice informs Bob about the states of photons |\u03d5i\u3009 that were chosen during the initiation period. Bob then matches outcomes using only two states. If the result was proven to be an orthogonal state to one of the set of states, the other states will already be proven. However, if the measured photons are not orthogonal, Bob should know that the measurements are not incisive. He then asks Alice to provide more specific details in the reconciliation phase. Step 4: In the reconciliation phase, some qubits are chosen randomly to be tested and corrected by Alice, where Bob calculates the QBER. If the measurement of QBER was very high, Alice and Bob would agree to cancel the protocol and start another communication. Step 5: In accordance with the previous step, both Alice and Bob retain only the conclusively matched qubits, which are used in a raw key. Unmatched qubits are treated during the qubit error-correction and privacy amplification phases [38\u201340]. SARG04 protocol can withstand PNS attacks. Although SARG04 appears as the BB84 protocol for all manipulations at the quantum level, it differs in the error-correction phase (sifting phase), where both parties communicate using a classical channel by encoding and decoding the shared information.\n2.2.3. The B92 Protocol\nB92 was proposed by Bennett in 1992 [41]. The protocol contains only two particle states, rather than four states in the BB84 protocol. The two states should be nonorthogonal, as illustrated in Figure 4. The process of the B92 protocol is involved in the quantum phase as follows: Step 1: Alice sends a random string of qubits (A) to Bob; where A \u2208 {0, 1}n, n > N (which N is the length of final key), so if Alice sent the |0\u3009 state that means Ai = 0, and Ai = 1 if she sent |+\u3009 state, for all i \u2208 {0, 1, . . . n}.\nCryptography 2022, 6, 12 9 of 25\nStep 2: On the other hand, Bob creates a vector of bits (B) where B \u2208 {0, 1}n, n > N, which if (Bi = 0); then Bob will choose the basis (+), and if (Bi = 1) he will choose the basis (\u00d7) for all i \u2208 {0, 1 . . . n}. Step 3: When Bob starts measuring the upcoming qubits, each qubit is measured on a selected (+) or (\u00d7) basis. Step 4: After measuring the vector of states, Bob starts completing the following rules: if the measurement of the qubit produces |0\u3009 or |+\u3009 then Ti = 0, and if it produces |1\u3009 or |\u2212\u3009, Ti = 1 for all i \u2208 {0, 1 . . . n} [42].\nCryptography 2022, 6, x FOR PEER REVIEW 9 of 26 2.2.3. The B92 Protocol B92 was proposed by Bennett in 1992 [41]. The protocol contains only two particle states, rather than four states in the BB84 protocol. The two states should be nonorthogo-\nnal, as illustrated in Figure 4. The process of the B92 protocol is involved in the quantum\nphase as follows:\nStep 1: Alice sends a random string of qubits (A) to Bob; where A \u2208 {0,1}n, n > N\n(which N is the length of final key), so if Alice sent the |0\u27e9 state that means Ai = 0, and Ai = 1 if she sent |+\u27e9 state, for all i \u2208 {0, 1, \u2026 n}.\nStep 2: On the other hand, Bob creates a vector of bits (B) where B \u2208 {0,1}n, n > N,\nwhich if (Bi = 0); then Bob will choose the basis (+), and if (Bi = 1) he will choose the basis (\u00d7) for all i \u2208 {0,1 \u2026 n}.\nStep 3: When Bob starts measuring the upcoming qubits, each qubit is measured on\na selected (+) or (\u00d7) basis.\nStep 4: After measuring the vector of states, Bob starts completing the following\nrules: if the measurement of the qubit produces |0\u27e9 or |+\u27e9 then Ti = 0, and if it produces | \u27e9 or |\u2212\u27e9, Ti = 1 for all i \u2208 {0,1 \u2026 n} [42].\nIn general, the B92 protocol uses a non-orthogonal state to transmit information to a\nquantum channel. The protocol has a robust scheme with optical imperfection and detec-\ntor noise, unlike the BB84 protocol. Naturally, the noise at the end of the communication\ncan be as high as 1.6% [43]. Moreover, the B92 protocol technically has less usage of quan-\ntum memory (if any) and quantum channel capacity.\n2.2.4. The Coherent One-Way Protocol\nThe Coherent One-Way (COW) is a simple protocol [44,45], which depends on de-\ncoding the information into time slots. Alice sends coherent pulses in logic states as [35]\nor decoy states. Each logical bit is encoded to either (\u03bc \u2212 0) for logical (0) or (0 \u2212 \u03bc)\nfor logical (1) by a sequence of two pulses. Furthermore, to improve the security of this\nprotocol, Alice adds decoy sequences of (\u03bc \u2212 \u03bc) while submitting the other logical\nstates. If the pulses submitted to the interferometer are well aligned on Bob\u2019s side, then\nthe received pulses will be perfectly detected on DM1 (interferometer) and there will be\nno detection on DM2 (detector). Therefore, the loss of coherence will be displayed on the\ndetector when the eavesdropper tries to listen [46].\nlogic 1: |0\u27e9 + |\u03bc\u27e9\nlogic 0: |\u03bc\u27e9 + |0\u27e9\nDecoy: |\u03bc\u27e9 + |\u03bc\u27e9,\n(3)\nwhere \u03bc is the mean photon number per pulse.\nIn this protocol, the transmission and reception of data depends on the time of arrival\nof the signal and does not depend on the polarization of the optical signals. The COW\nprotocol works briefly as follows:\nIn general, the B92 protocol uses a non-orthogonal state to transmit information to a quantum channel. The protocol has a robust scheme with optical imperfection and detector noise, unlike the BB84 protocol. Naturally, the noise at the end of the communication can be as high as 1.6% [43]. Moreover, the B92 protocol technically ha less usag of quantum memory (if any) and quantum channel capacity.\n2.2.4. The Coherent One-Way Protocol\nThe Coherent One-Way (COW) is a simple protocol [44,45], which depends on decoding the information into time slots. Alice sends coherent pulses in logic states as [35] or decoy states. Each logical bit is encoded to either (\u00b5 \u2212 0) for logical (0) or (0\u2212 \u00b5) for logical (1) by a sequence of two pulses. Furthermore, to improve the security of this protocol, Alice adds decoy sequences of (\u00b5 \u2212 \u00b5) while submitting the other logical states. If the pulses submitted to the interferometer are well aligned on Bob\u2019s side, then the received pulses w ll be perfectly detected on DM1 (interferometer) and there will be no detection on DM2 (detector). Therefore, the loss of coherence will be displayed on the detector when the eavesdropper tries to listen [46].\nlogic 1 : |0\u3009+|\u00b5\u3009\nlogic 0 : |\u00b5\u3009+|0\u3009\nDecoy : |\u00b5\u3009+|\u00b5\u3009,\n(3)\nwhere \u00b5 is the mean photon number per pulse. In this protocol, the transmission and reception of data depends on the time of arrival of the signal and does not depend on the polarization of the optical signals. The COW protocol works briefly as follows: Step 1: Alice transmits a sequence of binary bits using time slots to Bob and generates both logical states of |1\u3009 or |0\u3009 (which has the same probability unless decoy states are added). Obtaining a probability of 12 for each of |1\u3009 or |0\u3009 states and adding the decoy states are calculated by (1\u2212 f)/2 (where f is the pr bability of decoy state generati n).\nCryptography 2022, 6, 12 10 of 25\nStep 2: Bob exploits the time detection to generate a raw key, where all previous processes are performed by different detectors to improve the security rate in Equation (4).\nV = p(DM1)\u2212 p(DM2) p(DM1) + p(DM2)\n(4)\nwhere p ( DMj ) is the probability of the ( DMj ) clicks at the time when (DM1) should click, as shown in Figure 5.\nCryptography 2022, 6, x FOR PEER REVIEW 10 of 26\nStep 1: Alice transmits a sequence of binary bits using time slots to Bob and generates\nboth logical states of |1\u27e9 or |0\u27e9 (which has the same probability unless dec y states are added). Obtaining a probability of \u00bd for each of |1\u27e9 or |0\u27e9 states and adding the decoy\nstates are calculated by (1 \u2212 f) 2\u2044 (where f is the probability of decoy state generation).\nStep 2: Bob exploits the time d tection to g nerate raw key, where all previous pro-\ncesse are perfor ifferent d tectors to improv the security rate in Equation (4).\nV = p(DM1) \u2212 p(DM2)\np(DM1) + p(DM2) (4)\nwhere p(DMj) is the probability of the (DMj) clicks at the time when (DM1) should click, as shown in Figure 5.\nStep 3: Bob declares the number of bits by simultaneous procedures between the data\ndetector and time detection on the side.\nStep 4: On monitoring the detectors, Alice ensures that the sequence of decoy states\nand bit sequences still exists. If not, Eve has tapped the communication. In this case, Alice\nbreaks the coherence into two pulses to detect an interrupted state.\nStep 5: Alice informs Bob about the bits that have been removed from the raw key\nbecause those bits belong to the decoy state sequence.\nStep 6: The secret key is extracted after dropping the decoy sequences from the raw\nkey using a classical process, and the shared key is obtained by error-correction and pri-\nvacy amplification [47].\nThis protocol, as reported in [48], is designed to be a robust quantum protocol against\nreduced interference visibility and PNS attacks. The COW protocol also has simple trans-\nmissions into data lines, low losses at the measurement side, and a small QBER detection.\n2.2.5. The KMB09 Protocol\nThis protocol was presented in 2009 [49] by Khan, Murphy, and Beige, and is de-\nsigned to be robust against PNS attacks. Khan et al. describe the protocol as being between\ntwo parties (Alice and Bob) and an eavesdropper (Eve). Both parties must use two bases\ne and f, where both parties should use different indices i whenever they use the same\nbasis [50]. Moreover, the i index is publicly declared between two legitimate parties,\nwhich can be pointed to Alice\u2019s prepared indices as i and Bob\u2019s measured indices as j.\nIn KMB09, the authors attempted to create a protocol that could withstand PNS attacks.\nIn addition, KMB09 was created when other protocols were used for a few kilometers,\nwhere the system error rate could exceed the eavesdropper\u2019s presence. The protocol was\noptimized by using an Index Transmission Error Rate (ITER) instead of QBER during the\nreconciliation phase. The next steps briefly explain the KMB09 protocol as follows:\nStep 3: Bob declares the number of bits by simultaneous procedures between the data detector and time detection on the side. Step 4: On monitoring the detectors, Alice ensures that the sequence of decoy states and bit sequences still exists. If not, Eve has tapped the communication. In this case, Alice breaks the coherence into two pulses to detect an interrupted state. Step 5: Alice informs Bob about the bits that have been removed from the raw key because those bits belong to the decoy state s quence. Step 6: Th secret key is extracted after dropping the decoy sequences from the raw key using a classical process, and the shared key is obtained by error-correction and privacy amplification [47]. This protocol, as reported in [48], is designed to be a robust quantum protocol against reduced interference visibility and PNS attacks. The COW protocol also has simple transmissions into data lines, low losses at the measurement side, and a small QBER detection.\n2.2.5. The KMB09 Protocol\nThis protocol was presented in 2009 [49] by Khan, Murphy, and Beige, and is designed to be robust against PNS attacks. Khan et al. describe the protocol as being between two parties (Alice and Bob) and an eavesdropper (Eve). Both parties must use two bases e and f, where both parties should use different indices i whenever they use the same basis [50]. Moreover, the i index is publicly declared between two legitimate parties, which can be pointed to Alice\u2019s prepared indices as i. and Bob\u2019s measured indices as j. In KMB09, the authors attempted to create a protocol that could withstand PNS attacks. In addition, KMB09 was created when other protocols were used for a few kilometers, where the syst m error rate could exce d the eavesdropper\u2019s presence. Th protocol was optimized by using an Index Transmission Error Rate (ITER) instead of QBER during the reconciliation phase. The next steps briefly explain the KMB09 protocol as follows: Step 1: Alice randomly generates a sequence of classical bits, and then randomly specifies an index i = 1, 2 . . . N. Step 2: Alice sends the prepared bits in a single photon into either |ei\u3009 or |fi\u3009 basis to Bob.\nCryptography 2022, 6, 12 11 of 25\nStep 3: Each incoming state is measured by Bob to be randomly switched between bases e and f. Step 4: Alice announces in public communication to Bob about the random sequential indices i to obtain the secret key.\nStep 5: Bob translates the measurement outcomes. Step 6: Bob communicates with Alice publicly to share that the photon measurements\nwere successfully received and obtained the secret key. Step 7: Alice and Bob can determine whether Eve is eavesdropping on the communication as Equation (5) [51].\nPITER = 1\u2212 1\n2N\nN\n\u2211 i=1\nN\n\u2211 k=1\n[ |\u3008gk|ei\u3009 4 + gk|fi\u3009 4| ]\n(5)\nwhere e, f and g are bases, and the state of |gk\u3009 is Eve\u2019s possible measurement outcomes, and it is forwarded to Bob without alteration. The polarization of a single photon is initiated in multi-dimensional states, as shown in Figure 6, which is based on orthogonal or non-orthogonal bases [52].\nCryptography 2022, 6, x FOR PEER REVIEW 11 of 26\nStep 1: Alice randomly generates a sequence of classical bits, and then randomly\nspecifies an index i = 1, 2 \u2026 N.\nStep 2: Alice sends the prepared bits in a single photon into either |ei\u27e9 or |fi\u27e9 basis\nto Bob.\nStep 3: Each incoming state is measured by Bob to be randomly switched between\nbases e and f.\nStep 4: Alice announces in public communication to Bob about the random sequen-\ntial indices i to obtain the secret key.\nStep 5: Bob translates the measurement outcomes.\nStep 6: Bob communicates with Alice publicly to share that the photon measurements\nwere successfully received nd obtained th secret key.\nStep 7: Alice and Bob can determine whether Eve is eavesdropping on the commu-\nnication as Equation (5) [51].\nPITER = 1 \u2212 1\n2N \u2211 \u2211[|\u27e8gk|ei\u27e9 4 + \u27e8gk|fi\u27e9 4|]\nN\nk=1\nN\ni=1\n(5)\nwhere e, f and g are bases, and the state of |gk\u27e9 is Eve\u2019s possible measurement outcomes, and it is forwarded to Bob without alteration.\nThe polarization of a single photon is initiated in multi-dimensional states, as shown\nin Figure 6, which is based on orthogonal or non-orthogonal bases [52].\nFigure 6. Two bases vector used by Alice, Bob, and Eve in the N = 2 protocol.\nThe KMB09 protocol is designed to be used under ideal conditions, where it is im-\npossible for Alice and Bob to have different indices while using the same basis. This pro-\ntocol is more robust against any eavesdropper who tries to hide his/her presence. In ad-\ndition, the strong correlation between QBER and ITER makes the eavesdropper produce\na distinct signature that is easy to detect.\n2.2.6. The EPR Protocol\nEPR Pair Paradox was inspired by Einstein, Podolsky, and Rosen, who presented a\ndialectical paper in 1935 [53]. The presented theory has led to an argument about quantum\nmechanics, which is not a completely physical theory. The main concept uses three states\nof polarization considering |\u03b8\u27e9, where the polarization state of the photon is linearly po-\nlarized at angle \u03b8. More precisely, the EPR is a pair of particles that can be separated even\nover a great distance, so that both photons show in a paradox \u201caction at a distance\u201d [54].\nTo explain the nature of the EPR pair paradox clearly, when one photon is measured\non the right side, the outcome may be a vertical linear polarization |0\u27e9 state. On the other\nhand, the measurement will be a |1\u27e9 state on the left side, where the measured photons\nwill be horizontally in a linear polarization state |\u03c0/2\u27e9 (and vice versa). Therefore, the\nEPR is one of the four Bell states as Equation (6).\nFigure 6. Two bases vector used by Alice, Bob, and Eve in the N = 2 protocol.\nThe KMB09 protocol is designed to be used under ideal conditions, where it is impossible for Alice and Bob to have different indices while using the same basis. This protocol is more robust aga nst y eavesdropper who tries to hi e hi /her presence. In addition, the strong correlation between QBER and ITER makes the eavesdropper produce a distinct signature that is easy to detect.\n2.2.6. The EPR Protocol\nEPR Pair Paradox was inspired by Einstein, Podolsky, and Rosen, who presented a dialectical paper in 1935 [53]. The presented theory has led to an argument about quantum mechanics, which is not a completely physical theory. The main concept uses three states of polarization considering |\u03b8\u3009, where the polarization state of the photon is linearly polarized at angle \u03b8. More precisely, the EPR is a pair of particles that can be separated even over a great distance, so that both photons show in a aradox \u201caction at a distance\u201d [54]. To explain the nature of the EPR pair paradox clearly, when one photon is measured on the right side, the outcome may be a vertical linear polarization |0\u3009 state. On the other hand, the measurement will be a |1\u3009 state on the left side, where the measured photons will be horizontally in a linear polarization state |\u03c0/2\u3009 (and vice versa). Therefore, the EPR is one of the four Bell states s Equation (6). The EPR protocol was presented by Artur K. Ekert in 1991 [55], which is completely based on the use of an entanglement state between two remote parties. Moreover, few\nCryptography 2022, 6, 12 12 of 25\nmodifications have been made since the first EPR protocol has become popular. Hwang et al. [56] explained some of these modifications to the EPR protocol. The EPR process is shown in steps that demonstrate the original protocol [9]: Step 1: Alice creates a sequence of EPR photons (entangled qubits) n, where one photon is stored in a quantum memory and sends the other to Bob.\n|\u03c81\u3009 = 1\u221a2 (|00\u3009+|11\u3009) |\u03c82\u3009 = 1\u221a2 (|00\u3009\u2212|11\u3009) |\u03c83\u3009 = 1\u221a2 (|10\u3009+|01\u3009) |\u03c84\u3009 = 1\u221a2 (|10\u3009\u2212|01\u3009)\n(6)\nStep 2: Both communicators randomly choose a sequence of bases (\u00d7or +); these bases are used to measure the particles at each side of the communication, as shown in Table 6.\nTable 6. The measurements in the EPR protocol Alice and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 + Alice\u2019s observations \u2197 \u2196 \u2192 \u2191 \u2197 \u2192 Bob\u2019s random bases \u00d7 + + \u00d7 \u00d7 + Bob\u2019s observations \u2197 \u2192 \u2192 \u2197 \u2197 \u2192\nStep 3: In public, Alice and Bob match the outcomes of their measurements and keep only the qubits that were measured on the same basis, as in Table 7.\nTable 7. The measurements in the EPR protocol Alice and bob publicly compare their bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 + Public channel\nCryptography 2022, 6, x FOR PEER REVIEW 12 of 26\nThe EPR protocol was presented by Artur K. Ekert in 1991 [55], which is completely\nbased on the use of an entanglement state between two remote parties. Moreover, few modifications have been made since the first EPR protocol has become popular. Hwang et al. [56] explained some of these modifications to the EPR protocol. The EPR process is shown in steps that demonstrate the original protocol [9]:\nStep 1: Alice creates a sequence of EPR photons (entangled qubits) n, where one\nphoton is st red in a quantum m mory and sends the other to Bob.\n| \u27e9 = 1\n\u221a2 (|00\u27e9 + |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|00\u27e9 \u2212 |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 + |01\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 \u2212 |01\u27e9)\n(6)\nStep 2: Both communicators randomly choose a sequence of bases (\u00d7 or +); these\nbases are used to measure the particles at each side of the communication, as shown in Table 6.\nTable 6. the measurements in the EPR protocol Alice and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random base \u00d7 \u00d7 + + \u00d7 +\nAlice\u2019s observations      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nBob\u2019s observations      \nStep 3: In public, Alice and Bob match the outcomes of their measurements and keep\nonly the qubits that were measured on the same basis, as in Table 7.\nTable 7. The measurements in the EPR protocol Alice and bob publicly compare their bases.\nBit Number 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nPublic channel      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nAgree    \nThe remaining of EPR protocol includes decisions made by communicating parties.\nThe public channel will be the next choice to ignore any errors while exchanging qubits through the quantum channel. Therefore, classical communication is analogous to the reconciliation phase of the BB84 protocol.\n2.2.7. The S09 Protocol\nS09 protocol was presented by Esteban and Serna in 2012; this protocol has a different\ntechnique compared to the previous protocols. S09 relies on public-private key cryptography, and the main process of the S09 is based on exchanging a qubit multiple times to build a secret key between Alice and Bob. However, the S09 protocol transfers the qubit into any arbitrary state that is agreed on between Alice and Bob only through the quantum channel. The sequences of the S09 protocol are briefly explained as follows.\nCryptography 2022, 6, x FOR PEER REVIEW 12 of 26\nThe EPR protocol was presented by Artur K. Ekert in 1991 [55], which is completely\nbased on the use of an angl m nt state between two emote parties. Moreover, few modifications have bee made since the first EPR protoc l has become popular. Hwang et al. [56] explained some f these modifications to the EPR protocol. The EPR process is shown in steps that d monstrate the riginal protocol [9]:\nSt p 1: Alice creates a sequence f EPR photons (entangled qubits) n, where one\nphoton is stored in a quantum memory and sends the other to Bob.\n| \u27e9 = 1\n\u221a2 (|00\u27e9 + |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|00\u27e9 \u2212 |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 + |01\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 \u2212 |01\u27e9)\n(6)\nStep 2: Both commu icators randomly choose a sequence of bases (\u00d7 or +); these\nbases are used to measure the particles at eac side of the communication, as shown in Table 6.\nTable 6. the measurements in the EPR protocol Alice and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nAlice\u2019s observations      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nBob\u2019s observations      \nte 3: I lic, lice atc t e tc es of th ir easure nts and keep\no l e bits t at ere eas re o t e sa e basis, as i able 7.\nTable 7. The easure ents in the EP rotocol lice li l t i .\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nPublic channel      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nAgree    \nThe remaining of EPR protocol includes decisions made by communicating parties.\nThe pub ic channel will be the next ch ice to ignore any errors while exchanging qubits through the qua tum channel. Therefore, classical communic tion is analogous to the reconciliation phase of the BB84 protocol.\n2.2.7. The S09 Protocol\nS09 protocol was presented by Est ban and Serna in 2012; this protocol has a different\ntechnique c mpared to the previ us protocols. S09 relies on public-private key cryptography, nd the main process of the S09 is based on exchanging a qubi ultiple times to build a secret key between Alice and Bob. However, the S09 protocol transfers the qubit in o any arbi rary tate that is agreed on between Alice and Bob only through the quantum channel. The sequ nces of the S09 protocol are br efly explained as follows.\nCryptography 2022, 6, x FOR PEER REVIEW 12 of 26\nThe EPR protocol was pres n ed by Artur K. Ekert in 1991 [55], which is completely\nbas d o the use of an e angl m nt state betwe n two emote parties. Moreover, few modifications have bee made since the first EPR pr toc l has become popular. Hwang et al. [56] xplained some f thes modifications to the EPR protocol. The EPR process is show in steps that d mons rate the riginal protocol [9]:\nSt p 1: Alice creates a sequence f EPR photons (entangled qubits) n, where one\nphoton is stored in quantum memory and sends the other to Bob.\n| \u27e9 = 1\n\u221a2 (|00\u27e9 + |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|00\u27e9 \u2212 |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 + |01\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 \u2212 |01\u27e9)\n(6)\nStep 2: Both commu icators randomly choose a sequence of bases (\u00d7 or +); these\nbases are used to measure the particles at eac side of the c mmu ication, as shown in Table 6.\nTable 6. the measurements in the EPR protocol Alic and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nAlice\u2019s observations      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nBob\u2019s observations      \nStep 3: In public, Alice nd Bob match the utco s of th ir measurem nts and keep\nonly q bits that were measured o the same basis, as in Table 7.\nTable 7. Th measur ments in he EPR roto ol Alice nd bob publicly compare their bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nPublic channel      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nAgree    \nThe remaini g of EPR protocol includes decisions made by communicating parties.\nThe pub ic channel will be the next ch ice to ignore any errors while exchanging qubits through the qua tum channel. Therefore, classic l communic tion is analogous to the reconciliation phase of the BB84 protocol.\n2.2.7. The S09 Protocol\nS09 protocol was presented by Est ban and Serna in 2012; this protocol has a different\ntechnique c mpared to the previ u protocols. S09 relies on public private key cryptography, nd t main process of the S09 is b sed on exchanging a qubi ultiple times to build a se ret key between Alice and Bob. H wever, th S09 protocol transfers the qubit in o ny rbi rary tate that is agreed on between Alice and Bob only through the quantum channel. The sequ nces of the S09 protocol are br efly explained as follows.\nCryptography 2022, 6, x FOR PEER REVIEW 12 of 26\nThe EPR protocol was pres n ed by Artur K. Ek rt in 1991 [55], which is completely\nbas d o the use of an e angl m nt state betwe n two emote parties. Moreover, few modifications have bee made since th first EPR pr toc l has become popular. Hwang\nt al. [56] xplained some f thes modifications to the EPR protocol. The EPR process is\nshow in steps that d mons rate the riginal protocol [9]:\nSt p 1: Alice creates a sequence f EPR photons ( ntangled qubits) n, where one\nphot n is stor d in quantum memory and sends the other to Bob.\n| \u27e9 = 1\n\u221a2 (|00\u27e9 + |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|00\u27e9 \u2212 |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 + |01\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 \u2212 |01\u27e9)\n(6)\nStep 2: Both commu icators randomly choose a sequence of bases (\u00d7 or +); these\nb ses are us d to m asure the particles at eac ide of the c mmu ication, as shown in Table 6.\nTable 6. he measurements in the EPR protocol Alic and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nAlice\u2019s observations      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nBob\u2019s observations      \nStep 3: In public, Alice nd Bob match the utco s of th ir measurem nts and keep\nonly q bits that were measur d o the same basis, as in Table 7.\nTable 7. The measurements in the EPR roto ol Alice nd bob publicly compare their bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nPublic channel      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nAgree    \nThe remaini g f EPR protocol incl des decisions made by communicating parties.\nThe pub i channel will be the next ch ice to i ore any errors while exchanging qubits t rough the qua tum chan el. Therefore, classic l communic tion is analogous to the reconciliation phase of the BB84 protocol.\n2.2.7. The S09 Protocol\nS09 protocol was presented by Est ban and Serna in 2012; this protocol has a different\ntechnique c mpared to the previ u otocols. S09 relies on public private key cryptography, nd t main process of the S09 is b sed on exchanging a qubi ultiple times to build a se ret key betwe n Alice and Bob. H wever, th S09 protocol transfers the qubit in o ny rbi rary tat that is agreed on between Alice and Bob only through the quantum channel. The s qu nces of the S09 pr tocol are br efly explained as follows.\nCryptography 2022, 6, x FOR PEER REVIEW 12 of 26\nThe PR protocol was pres n ed by Ar ur K. Ek rt in 1991 [55], which is completely\nbas d o the use of an e angl m nt state betwe n two emote parties. Moreover, few modifications have bee made since th first EPR pr toc l has become popular. Hwang\nt al. [56] xplained s me f t s modifi ations to the EPR protocol. The EPR process is\nshow in steps that d mons rate the riginal protocol [9]:\nSt p 1: Alice creates a seque ce f EPR photons ( ntangled qubits) n, where one\nphot n is stor d in quantum mem ry and sends the other to Bob.\n| \u27e9 = 1\n\u221a2 (|00\u27e9 + |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|00\u27e9 \u2212 |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 + |01\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 \u2212 |01\u27e9)\n(6)\nStep 2: Both commu icators randomly choose a sequence of bases (\u00d7 or +); these\nb ses are us d to m asure the particles at eac ide of the c mmu ication, as shown in Table 6.\nTable 6. he measur ments i the EPR protocol Alic and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 + + \u00d7 +\nAlice\u2019s observations      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nBob\u2019s observations      \nStep 3: In public, Alice nd Bob m tch th utco s of th ir measurem nts and keep\nonly q bits that were measur d o the same basis, as in Table 7.\nTab e 7. The meas rements in th EPR roto ol Alice nd bob publicly compare their bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nPublic channel      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nAgree    \nThe remaini g f EPR proto ol incl des decisions made by communicating parties.\nThe pub i channel will be the next ch ice to i ore any errors while exchanging qubits t rough the qua tum chan el. Therefore, classic l communic tion is analogous to the reconciliation phase of the BB84 protocol.\n2.2.7. The S09 Protocol\nS09 protocol was presented by Est ban and Serna in 2012; this protocol has a different\ntechnique c mpared to the previ u otocols. S09 relies on public private key cryptography, d t ma process of the S09 is b sed on exchanging a qubi ultiple times to build a s ret key betwe n Alice and Bob. H wever, th S09 protocol transfers the qubit in o y rbi rary tat tha is agreed on between Alice and Bob only through the quantum channel. The s qu nces of the S09 pr tocol are br efly explained as follows.\nCryptography 2022, 6, x FOR PEER REVIEW 12 of 26\nThe PR protocol was presen ed by Ar ur K. Ek rt in 1991 [55], which is completely\nbas d o th use of an e angl m nt state betwe n two emote parties. Moreover, few modifications have bee made since th first EPR pr toc l has become popular. Hwang\nt al. [56] xplained s me f t s modifi ations to the EPR protocol. The EPR process is\nshow in steps that d mons rate the riginal protocol [9]:\nSt p 1: Alice creates a s que ce f EPR photons ( ntangled qubits) n, where one\nph t n is st r d in quantum memory and sends the other to Bob.\n| \u27e9 = 1\n\u221a2 (|00\u27e9 + |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|00\u27e9 \u2212 |11\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 + |01\u27e9)\n| \u27e9 = 1\n\u221a2 (|10\u27e9 \u2212 |01\u27e9)\n(6)\nStep 2: Both commu icators randomly choose a sequence of bases (\u00d7 or +); these\nb ses are us d to m asure the particles at eac ide of the c mmu ication, as shown in Table 6.\nTa le 6. he measur ments i the EPR protocol Alic and bob measure in each of their random bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nAlice\u2019s observations      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nBob\u2019s observations      \nStep 3: In public, Alice Bob m tch th utco s of th ir measurem nts and keep\nonly q bits that were measur d o the same basis, as in Table 7.\nTab e 7. The measurements in th EPR roto ol Alice nd bob publicly compare their bases.\nBit Number 1 2 3 4 5 6\nAlice\u2019s random bases \u00d7 \u00d7 + + \u00d7 +\nPublic channel      \nBob\u2019s random bases \u00d7 + + \u00d7 \u00d7 +\nAgree    \nThe remaini g f EPR proto ol incl des decisions made by communicating parties.\nThe pub i channel will be the next ch ice to i ore any errors while exchanging qubits t ro gh the qua tum chan el. Therefore, classic l communic tion is analogous to the reconciliation phase of the BB84 protocol.\n2.2.7. The S09 Protocol\nS 9 protocol was pre ented by Est ban and Serna in 2012; this protocol has a different\ntechnique c mpared to the previ u otocols. S09 relies on public private key cryptograp y, d t ma process of the S09 is b sed on exchanging a qubi ultiple times to build a s et key betwe n Alice and Bob. H wever, th S09 protocol transfers the qubit in o y rbi rary tat tha is agreed on between Alice and Bob only through the quantum channel. The s qu nces of the S09 pr tocol are br efly explained as follows.\nBob\u2019s random bases + + + Agree\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: The length of the plaintext X should be set up by Alice to become a string of\nn-bits, and then the n-bits are applied to a randomly prepared basis (\u00d7 or +).\nStep 2: Each random basis will produce a random state either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice sends n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is submitted by Alice, Bob measures the upcom-\ning n-qubits based on random bases, as shown in Table 3. N xt, Bob bt ins a tring f states that refl ct n-bits. If Bob c nnot mea ure ll the ubmitt d qubit , b th parti s will release additional qubits by sharing the used bases through a pu lic channel.\nTable 3. Bob rec ives n r ndom bits i r do easure nts.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observes      \nBob\u2019s bits 0 1 1 1 1 0\nStep 4: Both Alice and Bob start estimating the err r that could be caused by Eve,\nwhere many error-correction methods [27] are used in the BB84 protocol. The raw secret key is processed, when Alic and Bob compare the matching bits, where the uncor lat d bits are discarded, as shown in Table 4. This i called a sif ing procedure, which nhances any attempt by Eve to obtain information and detect any error [28].\nTable 4. Alice and bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random ases + + \u00d7 + + +\nBob\u2019s rand m base \u00d7 + \u00d7 \u00d7 + \u00d7\nAgreement  \nShared secret key 1 1 1\nStep 5: After mat ing the sent a d rec ived qub s, the communication mov s to t\nreconciliation phase only if the er r rate is low. On the other and, Ali e and B b end up the current communication if the error ra e is t o high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey contains the matched qubits of both parties. Unmatched qubits are supp sed to be removed from the shared key SSK.\nStep 7: Next, Alice and Bob start correcting the erroneous qubits again in a separate\nphase, as shown in Table 5, as they endeavor to reduce the number of exposed qubits.\nTable 5. Alice and Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: Th lengt of the plaintext X should be set up by Alice to become a string of\nn-bits, and then the n-bits are ap lied to a r ndomly prepared basis (\u00d7 or +).\nStep 2: Each random b sis will produce a random sta e either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice se s n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is su itted by Alice, B b measures the upcom-\ning -qubits ba ed n random bas s, as shown in Table 3. N xt, Bob bt in a tring f s t that refl c n-bit . If Bob c nnot mea ure ll the submi t d q bit , b th parti s will release additional q bits by sharing t e used bases through a public channel.\nl 3. Bob rec ives n r ndom bits i r do easure nts.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observe      \nBob\u2019s bi s 0 1 1 1 1 0\nStep 4: B th Alice a d Bob start estimating th err r that could be caused by Eve,\nwhere many error-correction methods [27] are used in the BB84 protocol. The raw secret key is pro essed, when Alic and Bob compar the matching bits, where the uncor lat d bits are disc d d, s show in T ble 4. Thi i call d a s f ing pro dure, which enhances any attempt by Eve to obtain information and detect any error [28].\nTa e 4. Alice nd bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random ases + + \u00d7 + + +\nBob\u2019s rand m bases \u00d7 \u00d7 \u00d7 + \u00d7\nAgreement  \nShared secret key 1 1 1\nSt p 5: Aft r mat ing sent a d c ived qub s, th communication mov s to t e\nrec nciliation ph s only i th er r r t is low. On he other hand, Ali e and B b end up the current communication if the err r ra e is t o high.\nStep 6: If the error rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey conta ns the matched qubits of both parties. Unmatched qubits are supposed to be remov d from the shared key SSK.\nStep 7: Next, Alice a d Bob start correcting the erroneous qubits again in a separate\nphase s own in Table 5, as they endeavor to reduce the nu ber of exposed qubits.\nTa e 5. Alice nd Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nStep 1: Th lengt of he plaintext X should be set up by Alice to become a string of\nn-bits, and th n th n-bits are ap lied to a r ndomly prepared basis (\u00d7 or +).\nStep 2: Each random b sis will produce a random sta e either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if the basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice se s n random bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is su itted by Alice, B b measures the upcom-\ning -qubits ba e n random b s s, hown in Table 3. N xt, Bob obt in a tring f s t that refl n-bit . If Bob c nnot measure all the submi t d q bits, b th parties will r lease additional q bits by sharing t e used bases through a public channel.\nl 3. B b rec iv s n r ndom bit i r do m asurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observe      \nBob\u2019s bi s 0 1 1 1 1 0\nStep 4: B th Alice a d Bob start estimating th errors that could be caused by Eve,\nwhere many error-correction methods [27] a used in the BB84 protocol. The raw secret key s pro essed, when Alic and Bob compar the matching bits, where the uncor lat d bits are disc d d, how in T ble 4. i is call d a s fti g pro dure, which enhances any attempt b Eve to obtain information and detect any error [28].\nT e 4. Alice nd bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random ases + + \u00d7 + + +\nBob\u2019s rand m bases + \u00d7 \u00d7 + \u00d7\nAgreement  \nShared secret key 1 1 1\nSt p 5: Aft r mat in e t a d c ived qubi s, h communication mov s to t e\nrec nciliation p s ly th error r t is l w. On he other hand, Ali e and Bob end up t e urrent communication if the err r ra e is t o high.\nStep 6: If the e ror rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey conta s the matched qubit of both parti s. Unmatched qubits are supposed to be remov d from the shared key SSK.\nStep 7: Next, Alice a d Bob start correcting the erroneous qubits again in a separate\nphase s own i Ta le 5, as they endeavor to reduce the nu ber of exposed qubits.\nTa e 5. Al ce nd Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShared secret keys 1 1 1 Randomly chosen  \nShared secret key 1 1 1\nAgreements  \nUnrevealed secret keys 1\nCryptography 2022, 6, x FOR PEER REVIEW 7 of 26\nSt p 1: The length of the pla ntext X ho ld be set up by Alice to become a string of\nn-b ts, and then the n-bits applied to a randomly prepared basis (\u00d7 or +).\nStep 2: Each random basis will pro uce a random tate either |0\u27e9 or|1\u27e9 if the basis\nis |\u00d7\u27e9, or |0\u27e9 or|1\u27e9 if th basis is |+\u27e9 as shown in Table 2.\nTable 2. The Alice nds n ra dom bits in random bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random bits 0 1 1 0 1 1\nAlice\u2019s random bases + + \u00d7 + + +\nAlice sends      \nStep 3: When the string of n-qubits is submitt d by Alice, Bob m asures the upcom-\ning n-qubits base n random b ses, hown in Table 3. N xt, Bob obtain a tring f st t tha refl t n-bit . If Bob c not measure all the submitt d q bits, both parties will release additional qub ts by sharing th used bases through a public channel.\nl 3. B b rec iv s n random bit i ra do m asurements.\nBit Number 0 1 2 3 4 5\nBob\u2019s random bases \u00d7 + \u00d7 \u00d7 + \u00d7\nBob observe      \nBob\u2019s bi s 0 1 1 1 1 0\nSt p 4: B th Alic and Bob start estim ting e errors that coul e caused by Eve,\nwh r many e r r-correction methods [27] are used in the BB84 protocol. Th raw secret key s pro e sed, w n Al ce and Bob co pare he matching bits, where the uncor lat d bit are di ca ed, how i Table 4. hi is called a sifti g procedure, which enhances any at empt by Ev to obt in i formation and detect any error [28].\nTabl 4. Alice and bob publicly compare used bases.\nBit Number 0 1 2 3 4 5\nAlice\u2019s random ases + + \u00d7 + + +\nBob\u2019s rand m bases \u00d7 \u00d7 + \u00d7\nAgreement  \nShar d secret key 1 1 1\nSt p 5: Aft r mat in e t and c ived qubi s, h communication mov s to the\nrec n iliation ph s nly th err r r t is l w. On he other h , Ali and Bob end up\ne urre t communication if the err r rate is t o high.\nSt p 6: If th err r rate is low, Alice and Bob share the raw key. Moreover, the raw\nkey con ains th matched qubits of both parties. Unmatched q bits are supposed to be\ne ov d from th shared key SSK.\nS ep 7: Next, Alice d Bob s ar corr ct g the erroneous qubits again in a separate\nphase, as sh wn in Tabl 5, as they end av r to reduce the nu ber of exposed qubits.\nTabl 5. Alice and Bob publicly compare half of the remaining bits.\nBit Number 0 1 2 3 4 5\nShar d secret keys 1 1 1 Randomly chosen  \nShar d secret key 1 1 1\nAgreements  \nUnreveal d secret keys 1\nr i i f r t c l i cl s cisi s e c u icati g parties. T e li c l ill t t i t i r rr r il i its t r t a tu ch n l. Th refore, classi l omm nic tion is an log us t the reconciliati phase of the BB84 rotoc l.\n2.2.7. l\n9 r t c l t te i ; t i r t l as a different tec i co are to the vi us p to ls. S09 relies on public-privat k y c y togra-\ny, and the mai process of the S09 is bas d exch nging a qu it multi l tim s to uil a secr t k y b tween Alic nd Bob. However, th S09 prot c l tr sf rs the qubit int any arbitrar state that is agreed on etwee Alice d Bob onl thr ug the quantum cha el. T e sequences of the S09 protocol are briefly explained as foll ws. Step 1: Generate a bit i by Alice that would be in element of a secret base (Bk) to create a qubit |\u03a8, k\u3009, which in turn is sent to Bob with a quantum channel.\nStep 2: Bob applies ( Uj )\nto qubit |\u03a8, k\u3009 on the other side, which is only recognized by Bob. Thus, he can send the outcome of the qubit to Alice. Step 3: When Alice receives the qubit, it is measured in the base (Bk) and includes bit j, where the qubit must be in a pure state (\u03c1) by the operator density [50]:\n\u03c1 = |\u03a8, k\u3009\u3008\u03a8, k|, (7)\nCryptography 2022, 6, 12 13 of 25\nwhere the interaction of the qubits (\u03c1) with the environment produces:\n\u03c1\u2032 = \u2211 j Ej\u03c1E\u2020j , (8)\nwhere Ej is an operator that acts in the space of a qubit. Subsequently, these operators convey the state of qubit |\u03a8, k\u3009 in the overlap.\n|\u03a8, k\u3009 \u2192 Ei |\u03a8, k\u3009 (9)\nStep 4: After a complex operation, parity bits are appended by the operators (\u2016 or &&). Step 5: The previous step is attached to the distribution of the sent addresses or hashed values. In addition, with the approach of this protocol, Eve can obtain nothing from her eavesdropping, since Bk and Uj transformations can be changed as frequently as needed. On the other hand, the S09 protocol has a complex exchange process that makes operating the protocol inefficient.\n2.2.8. The S13 Protocol\nS13 is a quantum key distribution protocol developed by Serna in 2013 [57]. This protocol corresponds to the BB84 protocol in quantum procedures but differs in the classical channel. S13 was designed for implementation in current system devices, without the need for modifications. Furthermore, S13 has the same quantum communication phase as BB84; however, this will be overlooked in this section because it is already explained in Section 2.2.1. The second phase of the S13 protocol is explained as follows:\n\u2022 Quantum part - Raw key exchange: (as shown in the BB84 protocol). - Random seed: one of the communicating parties creates a random binary string\n(x1 x2 . . . xN). - Missing key exchange:\n1. Alice makes a summation of the random binary string with the binary basis from the first part and obtains a binary basis (t1 t2 . . . tN). Alice then randomly generates another string of binary ( j1 j2 . . . jN ) , where this is an exchanged key with Bob. 2. Bob sums each of the sequences sent to him by Alice with the created\nbinary string (1\u2295mk) \u2295 xk, where (k = 1, 2 . . . N). Thus, the sum becomes a binary string basis (n1 n2 . . . nN). Next, Bob measures the received state |\u03a8tk jk\u3009, with the correspondence of the basis (Bnk) to generate (b1 b2 . . . bN).\n\u2022 Classical part Alice and Bob apply function ( f ) to different binary exchanges in a set of binary strings:\nf (z, x, y) := {\nx, z = 0 y, z = 1\n(10)\n1. Asymmetric cryptography: Step 1: Alice sums the binary string created by her in quantum part i with a random string of binary values that were created by missing the key exchange j.\nik \u2295 jk, ( k = 1, 2 . . . N), (11)\nwhere (y1 y2 . . . yN) will be sent to Bob.\nCryptography 2022, 6, 12 14 of 25\nStep 2: To obtain the public key, Bob encrypts:\nuk = nk \u2295 f (mk, ak, bk \u2295 yk), vk = nk \u2295 f (mk, bk, ak \u2295 yk). (12)\nStep 3: Alice makes a summation to obtain the private string of mk, which is:\ntk \u2295 f (sk, (1\u2295 ik)\u2295 uk, jk \u2295 vk), (13)\nand then decrypts the string (m1 m2 . . . mN). 2. Private Reconciliation:\nStep 4: Bob receives the binary sequence (l1 l2 . . . lN) after completing the comparison between (s1 s2 . . . sN) and (m1 m2 . . . mN) by Alice. Step 5: Bob sums the sequence of bases mk with lk, where (mk \u2295 lk), k = 1, 2 . . . N. This is to obtain the private string sk.\nf (lk, ak, bk \u2295 yk) \u2261 ik f (lk, ak \u2295 yk, bk) \u2261 jk,\n(k = 1, 2 . . . N).\n(14)\nBob then obtains the private string from Alice (i1 i2 . . . iN).\nFinally, the S13 protocol is designed to be functional with existing devices, especially in the exchange phase after a qubit transmission. Several exchanges in the public channel will lead to a waste of time, as well as a chance for an eavesdropper to tap data. Furthermore, S13 is an improvement of the S09 protocol, which was ranked as a complex QKD protocol.\n2.2.9. The Differential-Phase-Shift Protocol\nThe Differential-Phase-Shift (DPS) protocol was developed in 2002 by Inoue et al. [48]. The DPS protocol is based on four fully non-orthogonal states, in which Alice\u2019s photon splits into three pulses and it is randomly modulated. On the other hand, Bob measures the incoming photons from Alice with a differential phase measurement. As mentioned in [58], the DPS protocol is more suitable for fiber-optic transmission and provides a higher effective shared key than the BB84 protocol. Additionally, the DPS protocol has specific advantageous features that are included in a simple configuration, accurate time usage, and robustness again PNS attacks [59]. Technically, the DPS is used to create a secret key between two parties, and it starts at Alice\u2019s side when the single photon is divided into three paths (a, b, and c) and then recombined them using a beam splitter (BS) or optical switcher (SW), as shown in Figure 7. Moreover, the time delay (between a, b and b, c) is equal, so that the recombined photon is converted to each of (0 || \u03c0). The incoming photons from Alice to Bob are divided into two paths and recombined using (50:50) beam splitters. The entire expected scenario of the DPS protocol is performed in the following sequential steps.\nStep 1: At Alice\u2019s side, a photon is sent from (a) to the short path on Bob\u2019s side. Step 2: Another photon is pushed through (a) to the long path on Bob\u2019s side and\nthrough (b) to the short path. Step 3: A photon is pushed through (b) to the long path on Bob\u2019s side, and (c) to the short path. Step 4: Another photon is pushed through (c) to the long path on Bob\u2019s side. In the first part of processing DPS, two probabilities overlap in steps (2) and (3), where the phase difference is (0 or \u00b1 \u03c0) which depends on Alice\u2019s modulation. Moreover, each detector clicks on (0) and the other clicks on (\u00b1\u03c0) phase difference. Finally, when Bob\u2019s detectors click, Bob records the time and knows which detector clicks. During the classical two-way communication, Alice knows which one clicks at Bob\u2019s detector [48,58].\nCryptography 2022, 6, 12 15 of 25Cryptography 2022, 6, x FOR PEER REVIEW 15 of 26\nFigure 7. The DPS scheme between two parties (Alice and Bob) where |\ud835\udf11\u27e9 is the qubits that are transmitted in certain time (Differential-Phase). T is the slot time considered to be measured by detectors on Bob\u2019s side, also Bob uses the double beam splitters with accuracy of 50:50.\nStep 1: At Alice\u2019s side, a photon is sent from (a) to the short path on Bob\u2019s side.\nStep 2: Another photon is pushed through (a) to the long path on Bob\u2019s side and\nthrough (b) to the short path.\nStep 3: A photon is pushed through (b) to the long path on Bob\u2019s side, and (c) to the\nshort path.\nStep 4: Another photon is pushed through (c) to the long path on Bob\u2019s side.\nIn the first part of processing DPS, two probabilities overlap in steps (2) and (3), where the\nphase difference is (0 \ud835\udc5c\ud835\udc5f \u00b1 \ud835\udf0b) which depends on Alice\u2019s modulation. Moreover, each de-\ntector clicks on (0) and the other clicks on (\u00b1\ud835\udf0b) phase difference. Finally, when Bob\u2019s de-\ntectors click, Bob records the time and knows which detector clicks. During the classical\ntwo-way communication, Alice knows which one clicks at Bob\u2019s detector [48,58].\n3. The QKD Protocols Features Based on Quantum Computing\nAs stated in the previous schemes, each quantum key distribution protocol is ad-\ndressed in two critical aspects. The first aspect is the movement of particles, which is re-\nlated to quantum mechanics and theories of physics. Moreover, this aspect shows the\nFigure 7. The DPS scheme between t o parties (Alice and Bob) where |\u03d5\u3009 is the qubits that are transmitted in certain time (Differential-Phase). T is the slot time considered to be measured by detectors on Bob\u2019s side, also Bob uses the double beam splitters with accuracy of 50:50.\n3. The QKD Protocols Features Based on Quantum Computing\nAs stated in the previous schemes, each quantum key distribution protocol is addressed in two critical aspects. The first a p ct is the movement of particles, which is related to quantum mechanics and theories of physics. Moreover, this aspect shows the physical motion of specific photons using the required observables (polarization, momentum, mass, etc.) at initiation and measurement conditions. The second aspect represents the comfort of using a classical system (or our current computer) with quantum bits (qubits). The ability to convert qubits to bits in existing platforms using quantum computers is still unavailable. Furthermore, the conclusion of the previous aspects has been collected on the cryptographic point of view as shown in Table 8 [60], where the main security classifications of the quantum cryptography for some well-known QKD protocols (review of previous literature) are presented. These classifications focused on the instructions for the QKD prot cols that used either the law of physics or the fundamenta s of cl ssical cryptography. However, many cryptographic features are still not available for approval today, such as professional quantum apparatus and quantum hardware. To improve the presence of these features, the entire classical system used, and the upcoming quantum system should overlap. For example, security attackers att mpt to break any information system by discovering vulnerabilities and weaknesses into those platforms.\nCryptography 2022, 6, 12 16 of 25\nSince the processing time of each QKD protocol is a critical term for secret key generation, the runtime execution has been experimented with in a specific ecological scheme. The same number of n-qubits has been implemented, and all QKD algorithms are formatted based on the original protocol, with many improvements recently updated. Moreover, the experiments present runtime simulations of all QKD protocols in a classical system by applying quantum libraries [61,62] in MATLAB. All these simulations reflected a high percentage of reality as far as they are used in a quantum system. These simulations were implemented by applying 500 qubits to create a secret key (SSK), where each protocol has an independent scheme. In terms of the number of qubits that can be sent from Alice to Bob, each QKD protocol expects an error rate (covered qubits). Based on the recorded error rate, both participants can decide to either extend the protocol\u2019s operations or cancel the communication entirely.\nFigures 8\u201316 [60] show only one of the runtime execution measurements for each QKD protocol, although several implementations were performed to determine the behavior of each QKD protocol. The measurements show variations during the process of each QKD protocol, as well as the real-time of each protocol, especially, when the QKD protocol applies more than 500 qubits between two legitimate parties. The gaps between each runtime execution depend on the properties of the states used (arbitrary, superposition, or entangled) and the number of bases used (orthogonal or non-orthogonal) that are employed for encrypting/decrypting the plaintext X. In addition, the differences between the studied QKD are related to the type of communication channels that are initiated between two legitimate parties (e.g., quantum or public channels). Each communication channel should have a certain mechanism, either to generate a specific state of a photon or to measure the received qubits. Therefore, runtime execution measurements were applied in the absence of Eve since Eve can cause relative and unstable errors. These errors can produce large variations based on different methods [63]. However, noise was applied in these experiments, which are usually generated by the environment.\nAfter simulating each QKD algorithm by applying the runtime execution T(n) function, the results show the relative complexity in each QKD protocol with obvious variations. The T(n) function is linear and will lead to an increase in the life of the key generation, as long as the communication is active. For instance, the SARG04 protocol is similar to the BB84 protocol, except that SARG04 has a higher complexity than the BB84 protocol. Furthermore, SARG04 takes (\u2248 0.815 ms) to generate a secret key more than BB84 (\u2248 0.364 ms). Table IX shows the runtime execution of the QKD protocol limited to 500 qubits (ms). In addition, the runtime execution measurement for the DPS protocol shows differentiation because initiating the DPS requires applying a photon in multiple states (arbitrary states). The differentiation of running each QKD protocol at certain functions and operations is based on the nature of each operation complexity such as converting a bit to qubit. In addition, the looping of each function produces sequential procedures before creating the SSK.\nCryptography 2022, 6, 12 17 of 25Cryptography 2022, 6, x FOR PEER REVIEW 17 of 26\nFigure 9. The Runtime Execution in the SARG04 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The SARG04 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 8. The Runtime Execution is m asured in the BB84 by applying 500 qubits of transferred data (qubits) into quantum channel as well as rec cili tion phase into classica channel. This QKD protocol was experimented with in a las ical system using q antum libraries, wher these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nryptography 2022, 6, x I 17 f 26\ni r . ti c ti is s r i t l i its f tr sf rr t\n( its) i t t c l s ll s r c cili ti s i t cl ssic l c l. is r - t c l s ri t i i cl ssic l s st si t li r r s, r t s li r ri s\nsi i t s ll s . cc r c f t s ri ts l i\nt r t r t c ls s r t ti t cr t s cr t .\ni r . ti c ti i t ft r l i its f tr sf rr t\n( its) i t t c l s ll s r c cili ti s i t cl ssic l c l.\nr t c l s ri t it i cl ssic l s st si t li r ri s, r t s li r ri s\nsi i t s ll s . cc r c f t s ri ts l i\nt r t r t c ls s r t ti t cr t s cr t .\nFigure 9. The Runtime Execution in the SARG04 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The SARG04 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nCryptography 2022, 6, 12 18 of 25Cryptography 2022, 6, x FOR PEER REVIEW 18 of 26\nFigure 10. The Runtime Execution in the B92 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The B92 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 11. The Runtime Execution in COW after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The COW protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 10. The Runtime Execution in the B92 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The B92 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nCryptography 2022, 6, x FOR PEER REVIEW 18 of 26\nFigure 10. The Runtime Execution in the B92 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical hannel. The B92 protocol was experiment d with in a cl ssical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 11. The Runtime Execution in COW after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The COW protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 11. The Runtime Execution in COW after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classi al channel. The COW protocol was experim nted w th in classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nCryptography 2022, 6, 12 19 of 25Cryptography 2022, 6, x FOR PEER REVIEW 19 of 26\nFigure 12. The Runtime Execution in the KMB09 after assigning multidimensional qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The KMB09 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 12. The Runtime Execution in the KMB09 after assigning multidimensional qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The KMB09 protocol was experim nted w th in classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be igh enough to run the QKD protocols and measure the time needed to create a secret key.\nCryptography 2022, 6, x FOR PEER REVIEW 19 of 26\nFigure 12. The Runtime Execution in the KMB09 after ssigning multidimensional qubits of transferred data (qubits) into quant m channel as well as reconciliation phase into classic l ch nnel. The KMB09 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 13. The Runtime Execution in the EPR after applying 500 qubits of transferred data (qubits) into q antum channel as well as reconciliation phase into cl ssic l channel. The EPR protocol was experimented with in a cl s ical system using q antum l braries, where these l braries d sig ed in Python as well as M TLAB. The accuracy of these exp riments would be igh enough to run the QKD protocols and measure the tim needed to cr ate a s cret key.\nCryptography 2022, 6, 12 20 of 25Cryptography 2022, 6, x FOR PEER REVIEW 20 of 26\nFigure 14. The Runtime Execution in the S09 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The S09 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 15. The Runtime Execution in the S13 after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The S13 protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFigure 14. The Runtime Execution in the S09 after applying 500 qubits of transferred data (qubits) into quantum channel as well as re onciliation phase into classi al channel. The S09 protocol was experimented with in classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nCryptography 2022, 6, x FOR PEER REVIEW 20 of 26\nFigure 14. The Runtime Executio in the S09 after ap lying 50 qubits of transf rred data (qubits) into quantum chan el as well as reconciliation phase into classical chan el. The S09 prot col was experimented with in a classical ystem using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD prot cols and measure the time ne ed to create a secret key.\nFigure 15. The Runtime Executio in the S13 after applying 500 qubits of transf rred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The S13 prot col was experimented with in a classical ystem using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD prot cols and measure the time ne ed to create a secret key.\nFigure 15. The Runtime Execution in the S13 after a plying 500 qubits of transferred data (qubits) into quantum cha nel as well as reconciliation phase into cla sical cha nel. The S13 protocol was xperimented with in cla sical system using quantum libraries, wher these librari s designed in Python as well as MATLAB. The accuracy of th se xperiments would be igh enough to run the QKD protocols and measure the time needed to create a secret key.\nCryptography 2022, 6, 12 21 of 25Cryptography 2022, 6, x FOR PEER REVIEW 21 of 26\nFigure 16. The Runtime Execution in the DPS after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classical channel. The DPS protocol was experimented with in a classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nAfter simulating each QKD algorithm by applying the runtime execution T(n) func-\ntion, the results show the relative complexity in each QKD protocol with obvious variations. The T(n) function is linear and will lead to an increase in the life of the key generation, as long as the communication is active. For instance, the SARG04 protocol is similar to the BB84 protocol, except that SARG04 has a higher complexity than the BB84 protocol. Furthermore, SARG04 takes (\u2248 0.815 ms) to generate a secret key more than BB84 (\u2248 0.364 ms). Table \u2168 shows the runtime execution of the QKD protocol limited to 500 qubits (ms).\nIn addition, the runtime execution measurement for the DPS protocol shows differ-\nentiation because initiating the DPS requires applying a photon in multiple states (arbitrary states). The differentiation of running each QKD protocol at certain functions and operations is based on the nature of each operation complexity such as converting a bit to qubit. In addition, the looping of each function produces sequential procedures before creating the SSK.\nFor instance, matching the measured qubits with the expected raw key depends on a\nseparate reconciliation algorithm. Hence, the operations of running each reconciliation algorithm are calculated with the entire execution process, which starts from initiating a stream of bits until the secret key SSK is created before correcting any errors. Therefore, the following formula is applied to measure the runtime execution for each QKD protocol:\n\ud835\udc47(\ud835\udc5b) = \u2211 (\ud835\udc5d. \ud835\udc61)\ud835\udc56=1 , (15)\nwhere \ud835\udc5d is a single loop of each QKD protocol process, \ud835\udc61 is the total time taken by each loop, and \ud835\udc5b is the length of plaintext X. Furthermore, each QKD protocol should have multiple operations during the quantum communication and reconciliation (usually classical communications) phases to generate a secret key. Afterwards, the QKD protocols are similar in three sequential phases: the first phase is initiation and preparation, the second phase is a submission, and the third phase is a reconciliation phase. These phases are shown in the previous QKD protocol, Algorithm 1.\nFigure 16. The Runtime Execution in the DPS after applying 500 qubits of transferred data (qubits) into quantum channel as well as reconciliation phase into classi al channel. The DPS protocol was experim nted with in classical system using quantum libraries, where these libraries designed in Python as well as MATLAB. The accuracy of these experiments would be high enough to run the QKD protocols and measure the time needed to create a secret key.\nFor instance, m tching the measured qubits with the expected raw key depends on a sepa ate reconciliation algorithm. H nce, th operations of running each reconcili tion algorithm are calculated with the entire execution p ocess, w ich starts from initiating a stream of bits until the secret key SSK is created before correcting any e rors. Therefore, the following f rmu a is applied to measure the runtime execution for each QKD :\nT(n) = \u2211i=1(p.t), (15)\nwhere p is a single loop of each QKD protocol process, t is the total time taken by each loop, and n is the length of plaintext X. Furthermore, each QKD protocol should have multiple operations during the quantum communication and reconciliation (usually classical communications) phases to generate a secret key. Afterwards, the QKD protocols are similar in three sequential phases: the first phase is initiation and preparation, the second phase is a submission, and the third phase is a reconciliation phase. These phases are shown in the previous QKD protocol, Algorithm 1.\nAlgorithm 1: QKD Protocol\n1. Initiate n Qubits // prepare a plaintext 2. for: each n\u2192 (+ || \u00d7 ) // Initiation loop 3. if (ni == +) : 4. then ni (0 || 90) // Loop (1) 5. else ni (45 || 135) 6. end; end // ending the loop 7. Reconciliation phase: 8. for: 1\u2192 n // reconciliation loop 9. if : ( i 6= j) // loop (2) 10. use different mechanisms 11. to correct error, 12. else : accept 13. end; end; //ending the loop\nCryptography 2022, 6, 12 22 of 25\nMore precisely, many execution loops occurred in the S09 and S13 protocols, especially during the reconciliation phase, unlike the BB84 and B92 protocols. The KMB09 protocol uses unique reconciliation procedures by exchanging indices instead of bases, which makes the correction phase more efficient. Therefore, runtime execution reflects the simplicity of using each QKD protocol. Thus, the BB84 protocol is classified as a simple QKD protocol based on previous measurement.\n5. Comparison between QKD Protocols\nSubsequently, several cryptographic approaches were extracted from the well-known QKD protocol (BB84, B92, SARG04, EPR, COW, DPS, KMB09, S09, and S13), which clarified the variations between these QKD protocols. These variations assist in realizing the weaknesses and strengths of each QKD process during communication between two users. As shown in the previous sections, some technical details are presented in the definition of each protocol, especially when a certain protocol has a unique design, such as the CoherentOne-Way (COW) protocol. The COW protocol depends on the insertion of the decoy states (\u00b5i) in pulse transmission. Using decoy states means more protection against PNS attacks, while extra time is required during either the submission or reconciliation phases. Moreover, the QKD protocols vary in terms of the techniques used to determine the reliability of each QKD protocol against attack challenges. Security, simplicity, and efficiency are factors that are typically applied to measure QKD protocols. The previous QKD protocols were tested using one of these factors, where the simplicity factor was applied to test the runtime execution at a limited number of qubits. On the other hand, the major issue in most QKD protocols is the verification of the identity of the communicated parties. As demonstrated in Table 9, the authentication is not approved in the previous QKD protocols except for the S13 protocol, which requires verification of user identity in the classical channel. Moreover, verification requires additional procedures that reduce the lifetime of the protocol. Thus, spending a long term could expose communication, especially when the public channel is used to confirm the transferred data during the quantum channel. In other words, the multiple processes that occur in the classical channel provide a high rate of information gain by eavesdroppers.\nIn addition, there are three categories that cryptosystem designers try to achieve. First, designing a cryptographic algorithm assists the submitted data in being heavily mixed and complex. Second, creating encryption/decryption keys locks and unlocks the submitted plaintext X. Finally, the secure keys should be distributed between trusted communicating entities. In other words, there are still several hard attempts to break the QKD protocol or at least show weak points. None of these attempts can be functionally considered, even when Eve tries to intercept and resend the submitted particles and then generate new particles. On the other hand, the eavesdropper wishes to read at least 25% of the originally submitted message, where the rest of the message remains for guessing as null. Furthermore, Intercepted/Resend attacks (IRA) are a well-known strategy against QKD protocols. IRA is the most popular attack, which is based on replacing some of\nCryptography 2022, 6, 12 23 of 25\nthe submitted qubits by applying a random basis (\u00d7 or +) when Alice sends qubits to Bob. Meanwhile, Eve leaves the rest of these qubits without changes because Eve wishes that the qubits should be received by Bob without changes. Next, when Alice and Bob start to compare the matching qubits, Eve constructs other qubits to be incompatible measurements. More precisely, if Eve attempts to listen to the transmitted qubits between Alice and Bob, Eve and Bob will use identical bases sent by Alice. Bob obtains identical bases to the eavesdropper, but no one can detect Eve. In other words, if Eve used a different measurement to intercept the bases sent by Alice, Eve will would experience uncertain changes in the state\u2019s polarization.\n6. Conclusions\nThis paper presents a set of QKD protocols over a period of time, as QKD is a new generation of cryptography in the information theory world. Moreover, several issues in quantum cryptography are theoretically solved using the QKD protocol; in particular, QKD is powered by quantum mechanics. The reason behind the strength of quantum mechanics is the non-cloning theory, which produces an alteration of any permeation. On the other hand, the explanation of ambiguous ideas was clearly discovered in this study to show the mechanism of each QKD protocol. One of the most important insights is to implement the runtime of each QKD protocol, as the use of multi-communications in a classical channel requires extending the life of the QKD protocol process as well as increasing the rate of information attacks. The classical channel is used heavily during the implementation of each QKD protocol, where a significant amount of processing time is spent during the reconciliation phase. In contrast, a classical channel is needed, as long as there is no way to reconcile the submitted information during the quantum channel. In other words, the classical channel should not completely affect the implementation of the QKD protocol, as this will lead to an infinite experience. Finally, the QKD protocol provides a Secure Shared Key (SSK) between legitimate parties through the secure communication. The secret key should be robust against any type of information attack with a 0.0% exposure to the SSK. QKD is expected to be the next generation of secret key in various information exchange systems.\nFunding: This research received no external funding.\nConflicts of Interest: The author declares no conflict of interest.\nReferences 1. Schneier, B. Applied Cryptography: Protocols, Algorithms, and Source Code in C; John Wiley & Sons: Hoboken, NJ, USA, 2007. 2. Rivest, R.L.; Shamir, A.; Adleman, L. A method for obtaining digital signatures and public-key cryptosystems. Commun. ACM 1978, 21, 120\u2013126. [CrossRef] 3. Diffie, W.; Hellman, M. New directions in cryptography. IEEE Trans. Inf. Theory 1976, 22, 644\u2013654. [CrossRef] 4. Wiesner, S. Conjugate coding. ACM Sigact News 1983, 15, 78\u201388. [CrossRef] 5. Brassard, G. Brief history of quantum cryptography: A personal perspective. In IEEE Information Theory Workshop on Theory and Practice in Information-Theoretic Security; IEEE: Piscataway, NJ, USA, 2005; Volume 2005, pp. 19\u201323. 6. Walk, N.; Ralph, T.C.; Symul, T.; Lam, P.K. Security of post-selection based continuous variable quantum key distribution against arbitrary attacks. In CLEO: Applications and Technology; Optical Society of America: Washingdon, DC, USA, 2011; p. JTuC4. 7. Oesterling, L.; Hayford, D.; Friend, G. Comparison of commercial and next generation quantum key distribution: Technologies\nfor secure communication of information. In Proceedings of the 2012 IEEE Conference on Technologies for Homeland Security (HST), Waltham, MA, USA, 13\u201315 November 2012; pp. 156\u2013161.\n8. Possignolo, R.T.; Margi, C.B. A quantum-classical hybrid architecture for security algorithms acceleration. In Proceedings of the 2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications, Liverpool, UK, 25\u201327 June 2012; pp. 1032\u20131037. 9. Yanofsky, N.S.; Mannucci, M.A. Quantum Computing for Computer Scientists; Cambridge University Press: Cambridge, UK, 2008. 10. Pirandola, S.; Andersen, U.L.; Banchi, L.; Berta, M.; Bunandar, D.; Colbeck, R.; Englund, D.; Gehring, T.; Lupo, C.; Ottaviani, C.; et al. Advances in Quantum Cryptography. Adv. Opt. Photon. 2020, 12, 1012. [CrossRef] 11. Sharbaf, M.S. Quantum cryptography: An emerging technology in network security. In Proceedings of the 2011 IEEE International\nConference on Technologies for Homeland Security (HST), Waltham, MA, USA, 15\u201317 November 2011; pp. 13\u201319.\nCryptography 2022, 6, 12 24 of 25\n12. Barker, W.C.; Barker, E.B. SP 800-67 Rev. 1. Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher; Citeseer: Princeton, NJ, USA, 2012. 13. Schneier, B. Description of a new variable-length key, 64-bit block cipher (Blowfish). In International Workshop on Fast Software Encryption; Springer: Berlin/Heidelberg, Germany, 1993; pp. 191\u2013204. 14. Patarin, J.; Goubin, L. Asymmetric cryptography with S-Boxes Is it easier than expected to design efficient asymmetric cryptosystems? In Proceedings of the International Conference on Information and Communications Security, Beijing, China, 11\u201314 November 1997; pp. 369\u2013380. 15. Lo, H.-K.; Ma, X.; Chen, K. Decoy state quantum key distribution. Phys. Rev. Lett. 2005, 94, 230504. [CrossRef] [PubMed] 16. Bu\u017eek, V.; Hillery, M. Quantum copying: Beyond the no-cloning theorem. Phys. Rev. A 1996, 54, 1844. [CrossRef] 17. Steege, M. Free-Space Optics: A Viable, Secure Last Mile Solution? Sans Institute: Bethesda, MD, USA, 2002. 18. Niemiec, M.; Pach, A.R. Management of security in quantum cryptography. IEEE Commun. Mag. 2013, 51, 36\u201341. [CrossRef] 19. Cabello, A.; Feito, \u00c1.; Lamas-Linares, A. Bell\u2019s inequalities with realistic noise for polarization-entangled photons. Phys. Rev. A 2005, 72, 052112. [CrossRef] 20. Bennett, C.H.; Brassard, G. Quantum cryptography: Public key distribution and coin tossing. Theor. Comput. Sci. 2014, 560, 7\u201311. [CrossRef] 21. Russell, J. Application of quantum key distribution. In Proceedings of the MILCOM 2008\u20142008 IEEE Military Communications Conference, San Diego, CA, USA, 16\u201319 November 2008; pp. 1\u20136. 22. Gottesman, D.; Lo, H.-K. From quantum cheating to quantum security. arXiv 2001, arXiv:quant-ph/0111100. [CrossRef] 23. Shor, P.W. Polynomial-time algorithms for prime factorization and discrete logarithms on a quantum computer. SIAM Rev. 1999, 41, 303\u2013332. [CrossRef] 24. Cao, Z.; Liu, L. Improvement of one quantum encryption scheme. Int. J. Quantum Inf. 2012, 10, 1250076. [CrossRef] 25. Zhao, S.-M.; Li, F.; Zheng, B.-Y. A proof of security of quantum key distribution in probabilistic clone scheme. In Proceedings of\nthe International Conference on Communication Technology Proceedings, ICCT 2003, Beijing, China, 9\u201311 April 2003; Voume 2, pp. 1507\u20131509.\n26. Sharma, R.D.; De, A. A new secure model for quantum key distribution protocol. In Proceedings of the 2011 6th International Conference on Industrial and Information Systems, Kandy, Sri Lanka, 16\u201319 August 2011; pp. 462\u2013466. 27. Jouguet, P.; Kunz-Jacques, S. High performance error correction for quantum key distribution using polar codes. arXiv 2012, arXiv:1204.5882. [CrossRef] 28. Cerf, N.J.; Bourennane, M.; Karlsson, A.; Gisin, N. Security of quantum key distribution using d-level systems. Phys. Rev. Lett. 2002, 88, 127902. [CrossRef] 29. Kartheek, D.N.; Amarnath, G.; Reddy, P.V. Security in quantum computing using quantum key distribution protocols. In Proceedings of the 2013 International Mutli-Conference on Automation, Computing, Communication, Control and Compressed Sensing (iMac4s), Kottayam, India, 22\u201323 March 2013; pp. 19\u201325. 30. Zeng, G.; Wang, X. Quantum key distribution with authentication. arXiv 1998, arXiv:quant-ph/9812022. 31. Sharma, A.; Ojha, V.; Lenka, S.K. Security of entanglement based version of BB84 protocol for Quantum Cryptography. In\nProceedings of the 2010 3rd International Conference on Computer Science and Information Technology, Chengdu, China, 9\u201311 July 2010; Volume 9, pp. 615\u2013619.\n32. Shor, P.W.; Preskill, J. Simple proof of security of the BB84 quantum key distribution protocol. Phys. Rev. Lett. 2000, 85, 441. [CrossRef] 33. Scarani, V.; Acin, A.; Ribordy, G.; Gisin, N. Quantum cryptography protocols robust against photon number splitting attacks for weak laser pulse implementations. Phys. Rev. Lett. 2004, 92, 057901. [CrossRef] 34. ElGamal, T. A public key cryptosystem and a signature scheme based on discrete logarithms. IEEE Trans. Inf. Theory 1985, 31, 469\u2013472. [CrossRef] 35. Stipc\u030cevic\u0301, M. How secure is quantum cryptography? In Proceedings of the 2012 35th International Convention MIPRO, Opatija, Croatia, 21\u201325 May 2012; pp. 1529\u20131533. 36. Ghazali, L.I.A.; Abas, A.F.; Adnan, W.A.W.; Mokhtar, M.; Mahdi, M.A.; Saripan, M.I. Security proof of Improved-SARG04 protocol using the same four qubit states. In Proceedings of the International Conference on Photonics 2010, Langkawi, Malaysia, 5\u20137 July 2010. 37. Abushgra, A.A. SARG04 and AK15 Protocols Based on the Run-Time Execution and QBER. In Proceedings of the 2021 IEEE 5th International Conference on Cryptography, Security and Privacy (CSP), Zhuhai, China, 8\u201310 January 2021; pp. 176\u2013180. 38. Rass, S.; Schartner, P.; Greiler, M. Quantum coin-flipping-based authentication. In Proceedings of the 2009 IEEE International Conference on Communications, Dresden, Germany, 14\u201318 June 2009; pp. 1\u20135. 39. Zhou, Y.; Zhou, X.; Gao, J. Scarani-acin-ribordy-gisin decoy-state protocols in quantum key distribution with a heralded single photon source. In Proceedings of the 2009 9th International Conference on Electronic Measurement & Instruments, Beijing, China, 16\u201319 August 2009; pp. 4\u2013751. 40. Scarani, V.; Bechmann-Pasquinucci, H.; Cerf, N.J.; Du\u0161ek, M.; L\u00fctkenhaus, N.; Peev, M. The security of practical quantum key distribution. Rev. Mod. Phys. 2009, 81, 1301. [CrossRef] 41. Bennett, C.H. Quantum cryptography using any two nonorthogonal states. Phys. Rev. Lett. 1992, 68, 3121. [CrossRef] [PubMed] 42. Elboukhari, M.; Azizi, M.; Azizi, A. Quantum Key Distribution Protocols: A Survey. Int. J. Univers. Comput. Sci. 2010, 1, 59\u201367.\nCryptography 2022, 6, 12 25 of 25\n43. Jobez, P.; Timoney, N.; Laplane, C.; Etesse, J.; Ferrier, A.; Goldner, P.; Gisin, N.; Afzelius, M. Towards highly multimode optical quantum memory for quantum repeaters. Phys. Rev. A 2016, 93, 032327. [CrossRef] 44. Gisin, N.; Ribordy, G.; Zbinden, H.; Stucki, D.; Brunner, N.; Scarani, V. Towards practical and fast quantum cryptography. arXiv 2004, arXiv:quant-ph/0411022. 45. Stucki, D.; Brunner, N.; Gisin, N.; Scarani, V.; Zbinden, H. Fast and simple one-way quantum key distribution. Appl. Phys. Lett. 2005, 87, 194108. [CrossRef] 46. Gottesman, D.; Lo, H.-K.; Lutkenhaus, N.; Preskill, J. Security of quantum key distribution with imperfect devices. In Proceedings of the International Symposium onInformation Theory, Chicago, IL, USA, 27 June\u20132 July 200; p. 136. 47. Singh, H.; Gupta, D.L.; Singh, A.K. Quantum key distribution protocols: A review. J. Comput. Eng. 2014, 16, 1\u20139. [CrossRef] 48. Inoue, K.; Waks, E.; Yamamoto, Y. Differential phase shift quantum key distribution. Phys. Rev. Lett. 2002, 89, 037902. [CrossRef] 49. Khan, M.M.; Murphy, M.; Beige, A. High error-rate quantum key distribution for long-distance communication. New J. Phys. 2009, 11, 063043. [CrossRef] 50. Serna, E.H. Quantum key distribution protocol with private-public key. arXiv 2009, arXiv:0908.2146. 51. Han, Z.-F.; Li, H. Security of practical quantum key distribution system. In Proceedings of the 2011 International Symposium on Intelligent Signal Processing and Communications Systems (ISPACS), Chiang Mai, Tailand, 7\u20139 December 2011; pp. 1\u20133. 52. Khan, M.M.; Xu, J.; Beige, A. Improved Eavesdropping Detection in Quantum Key Distribution. arXiv 2011, arXiv:1112.1110. 53. Einstein, A.; Podolsky, B.; Rosen, N. Can quantum-mechanical description of physical reality be considered complete? Phys. Rev. 1935, 47, 777. [CrossRef] 54. Abushgra, A.; Elleithy, K. Initiated decoy states in quantum key distribution protocol by 3 ways channel. In Proceedings of the 2015 Long Island Systems, Applications and Technology, Farmingdale, NY, USA, 1 May 2015; pp. 1\u20135. [CrossRef] 55. Ekert, A.K. Quantum cryptography based on Bell\u2019s theorem. Phys. Rev. Lett. 1991, 67, 661. [CrossRef] [PubMed] 56. Hwang, T.; Lee, K.-C. EPR quantum key distribution protocols with potential 100% qubit efficiency. IET Inf. Secur. 2007, 1, 43\u201345. [CrossRef] 57. Serna, E.H. Quantum Key Distribution from a random seed. arXiv 2013, arXiv:1311.1582. 58. Inoue, K.; Waks, E.; Yamamoto, Y. Differential-phase-shift quantum key distribution using coherent light. Phys. Rev. A 2003, 68, 022317. [CrossRef] 59. Honjo, T.; Uchida, A.; Amano, K.; Hirano, K.; Someya, H.; Okumura, H.; Yoshimura, K.; Davis, P.; Tokura, Y. Differential-phase-\nshift quantum key distribution experiment using fast physical random bit generator with chaotic semiconductor lasers. Opt. Express 2009, 17, 9053. [CrossRef] [PubMed]\n60. Abushgra, A.; Elleithy, K. Differentiations of QKDPs in Run-Time Execution. p. 12. Available online: Khaledelleithy.org/ Conferences/5-%20Differentiations%20of%20QKDPs%20in%20Run-Time%20Execution.pdf (accessed on 10 January 2022). 61. Rohde, P.P. Quack! A Quantum Computer Simulator for Matlab; Centre for Quantum Computer Technology, Department of Physics, University of Queensland: Brisbane, Australia, 2005. 62. Tan, S.M. A quantum optics toolbox for Matlab 5. J. Opt. B Quantum Semiclass. Opt 1999, 1, 161. [CrossRef] 63. Bruen, A.A.; Forcinito, M.A. Cryptography, Information Theory, and Error-Correction: A Handbook for the 21st Century; John Wiley &\nSons: Hoboken, NJ, USA, 2011; Volume 68."
        }
    ],
    "title": "Variations of QKD Protocols Based on Conventional System Measurements: A Literature Review",
    "year": 2022
}