{
    "abstractText": "This study presents a front-end gateway system with asynchronous and synchronous serial communication protocol conversion between the universal asynchronous receiver/transmitter (UART) protocol and inter-integrated circuit (IC) protocol. The valid data and sensing data can be integrated using the IC protocol and sent to an edge computing platform for automated data analysis. Our system reduces data processing time and the number of buses. The system has an edge computing platform that handles simple linear regression, base conversion, a neural network, and a text database and communicates with multiple peripheral devices. The IC master and slave are constructed on the edge computing platform and implement arbitration by using the carrier-sense multiple access with collision avoidance protocol to prevent data collision. According to the results obtained from the Signal Tap logic analyzer in experiments conducted using a field-programmable gate array board, a completed 330-bit UART packet requires 755.2 \uf06ds to be received, and the throughput is 436.97 kbps. By contrast, a 90-bit IC packet requires 184.6 \uf06ds to be received, and the throughput is 487.54 kbps. The front-end gateway sends integrated packets by using the IC protocol, and the operating freuency (serial clock) of the IC slave can reach up to 3.6 MHz bidirectionally. An integrated 153-bit packet requires 42.96 \uf06ds to be received by the edge computing platform, and the throughput is 3.5614 Mbps, which is approximately 8.15 times higher than that of the UART packet. We also fabricated a front-end gateway ASIC by using the TSMC 90-nm 1P9M CMOS process. INDEX TERMS Serial communication protocol, universal asynchronous receiver/transmitter (UART), inter-integrated circuit (IC), ZigBee, front-end gateway, edge computing platform, IoT network, application-specific integrated circuit (ASIC).",
    "authors": [
        {
            "affiliations": [],
            "name": "Guo-Ming Sung"
        },
        {
            "affiliations": [],
            "name": "Li-Fen Tung"
        },
        {
            "affiliations": [],
            "name": "Chih-Jung Huang"
        },
        {
            "affiliations": [],
            "name": "Chih-Ping Yu"
        }
    ],
    "id": "SP:b674217f2fb8487038b2f4bcac7e6ca42b6650ea",
    "references": [
        {
            "authors": [
                "M.E.M. Campista",
                "L.H.M.K. Costa",
                "O.C.M.B. Duarte"
            ],
            "title": "Improving the multiple access method of CSMA/CA home networks",
            "venue": "Proc. IEEE Consumer Communications and Networking Conference (CCNC), Las Vegas, NV, USA, January 2006, pp. 645-649.",
            "year": 2006
        },
        {
            "authors": [
                "J. Peng",
                "L. Cheng"
            ],
            "title": "Revisiting carrier sense multiple access with collision avoidance (CSMA/CA),",
            "venue": "Proc. 40th Annual Conference on Information Sciences and Systems,",
            "year": 2006
        },
        {
            "authors": [
                "M. Vall\u00e9rian",
                "F. Hu\u0163u",
                "G. Villemaud",
                "B. Miscopein",
                "T. Risset"
            ],
            "title": "A parallel unbalanced digitization architecture to reduce the dynamic range of multiple signals",
            "venue": "Radio Science, vol. 51, no. 5, pp. 411-420, May 2016.",
            "year": 2016
        },
        {
            "authors": [
                "H.H. Choi",
                "J.M. Moon",
                "I.H. Lee",
                "H. Lee"
            ],
            "title": "Carrier sense multiple access with collision resolution",
            "venue": "IEEE Communications Letters, vol. 17, no. 6, pp. 1284-1287, June 2013.",
            "year": 2013
        },
        {
            "authors": [
                "T. Kondo",
                "H. Watanabe",
                "T. Ohigashi"
            ],
            "title": "Development of the edge computing platform based on functional modulation architecture",
            "venue": "Proc. IEEE 41 Annual Computer Software and Applications Conference (COMPSAC), Turin, Italy, July 2017, pp. 284-285.",
            "year": 2017
        },
        {
            "authors": [
                "D. Trivedi",
                "A. Khade",
                "K. Jain",
                "R. Jadhav"
            ],
            "title": "SPI to I2C protocol conversion using Verilog,",
            "venue": "Proc. 4 Int. Conf. on Computing Communication Control and Automation (ICCUBEA),",
            "year": 2018
        },
        {
            "authors": [
                "R.S.S. Kumari",
                "C. Gayathri"
            ],
            "title": "Interfacing of MEMS motion sensor with FPGA using I2C protocol",
            "venue": "Proc. Int. Conf. on Innovations in Information, Embedded and Communication Systems (ICIIECS), Coimbatore, India, March 2017, pp. 1-5.",
            "year": 2017
        },
        {
            "authors": [
                "D.S. Dawoud",
                "P. Dawoud"
            ],
            "title": "Serial Communication Protocols and Standards RS232/485, UART/USART, SPI, USB, INSTEON, Wi-Fi and WiMAX",
            "venue": "River Publishers - IEEE Xplore, 2020, pp. 169-190.",
            "year": 2020
        },
        {
            "authors": [
                "C. Wang",
                "T. Jiang",
                "Q. Zhang"
            ],
            "title": "ZigBee Network Protocols and Applications",
            "venue": "Auerbach Publications, 1 ed., Taylor & Francis Group, New York, NY, USA, March 2014.",
            "year": 2014
        },
        {
            "authors": [
                "D.J. Pagliari",
                "E. Macii",
                "M. Poncino"
            ],
            "title": "Zero-transition serial encoding for image sensors",
            "venue": "IEEE Sensors Journal, vol. 17, no. 8, pp. 2563-2571, April 2017.",
            "year": 2017
        },
        {
            "authors": [
                "W.W. Peterson",
                "D.T. Brown"
            ],
            "title": "Cyclic codes for error detection",
            "venue": "Proceedings of the IRE, January 1961.",
            "year": 1961
        },
        {
            "authors": [
                "B. Eswari",
                "N. Ponmagal",
                "K. Preethi",
                "S.G. Sreejeesh"
            ],
            "title": "Implementation of I2C master bus controller on FPGA",
            "venue": "Proc. Int. conf. on Communication and Signal Processing, Melmaruvathur, India, April 2013, pp. 1113-1116.",
            "year": 2013
        },
        {
            "authors": [
                "M. Sukhanya",
                "K. Gavaskar"
            ],
            "title": "Functional verification environment for I2C master controller using System Verilog",
            "venue": "Proc. 4th Int. Conf. on Signal Processing, Communications and Networking, Chennai, India, March 2017, pp. 1-6.",
            "year": 2017
        },
        {
            "authors": [
                "C. Liu",
                "X. Bao",
                "Q. Meng",
                "C. Xu",
                "Tao Liao"
            ],
            "title": "A flexible hardware architecture for slave device of I2C bus",
            "venue": "Proc. Int. Conf. on Electronic Engineering and Informatics (EEI), Nanjing, China, November 2019, pp. 309-313.",
            "year": 2019
        },
        {
            "authors": [
                "D. Wang",
                "Y. Gao",
                "Z. Tian"
            ],
            "title": "One-variable linear regression mathematical model of color reading and material concentration identification",
            "venue": "Proc. Int. Conf. on Smart City and Systems Engineering (ICSCSE), Changsha, China, November 2017, pp. 119- 122.",
            "year": 2017
        },
        {
            "authors": [
                "A. Chawla",
                "P. Babu",
                "T. Gawande",
                "E. Aumayr",
                "P. Jacob",
                "S. Fallon"
            ],
            "title": "Intelligent monitoring of IoT devices using neural networks",
            "venue": "Proc. 24 Conf. on Innovation in Clouds, Internet and Networks, and Workshops (ICIN), Paris, France, March 2021, pp. 137-139.",
            "year": 2021
        },
        {
            "authors": [
                "Y. Sai",
                "R. Jinxia",
                "L. Zhongxia"
            ],
            "title": "Learning of neural networks based on weighted mean squares error function",
            "venue": "Proc. 2 Int. Symp. on Computational Intelligence and Design, Changsha, China, December 2009, pp. 241-244.",
            "year": 2009
        },
        {
            "authors": [
                "W. Zhu",
                "X. Liu",
                "Z. Zhu"
            ],
            "title": "Optimized air quality prediction model based on neural network",
            "venue": "Proc. Int. Conf. on Computer Engineering and Application (ICCEA), Guangzhou, China, March 2020, pp. 565-568.",
            "year": 2020
        },
        {
            "authors": [
                "Y.S. Elshakhs",
                "M. Pudzs"
            ],
            "title": "Communication system for standardized multipurpose CNC machine",
            "venue": "Proc. IEEE 9th Workshop on Advances in Information, Electronic and Electrical Engineering (AIEEE), Riga, Latvia, November 2021, pp. 1-5.",
            "year": 2021
        }
    ],
    "sections": [
        {
            "text": "VOLUME XX, 2023 1\ncommunication protocol conversion between the universal asynchronous receiver/transmitter (UART) protocol and inter-integrated circuit (I2C) protocol. The valid data and sensing data can be integrated using the I2C protocol and sent to an edge computing platform for automated data analysis. Our system reduces data processing time and the number of buses. The system has an edge computing platform that handles simple linear regression, base conversion, a neural network, and a text database and communicates with multiple peripheral devices. The I2C master and slave are constructed on the edge computing platform and implement arbitration by using the carrier-sense multiple access with collision avoidance protocol to prevent data collision. According to the results obtained from the Signal Tap logic analyzer in experiments conducted using a field-programmable gate array board, a completed 330-bit UART packet requires 755.2 s to be received, and the throughput is 436.97 kbps. By contrast, a 90-bit I2C packet requires 184.6 s to be received, and the throughput is 487.54 kbps. The front-end gateway sends integrated packets by using the I2C protocol, and the operating freuency (serial clock) of the I2C slave can reach up to 3.6 MHz bidirectionally. An integrated 153-bit packet requires 42.96 s to be received by the edge computing platform, and the throughput is 3.5614 Mbps, which is approximately 8.15 times higher than that of the UART packet. We also fabricated a front-end gateway ASIC by using the TSMC 90-nm 1P9M CMOS process.\nINDEX TERMS Serial communication protocol, universal asynchronous receiver/transmitter (UART), inter-integrated circuit (I2C), ZigBee, front-end gateway, edge computing platform, IoT network, application-specific integrated circuit (ASIC).\nI. INTRODUCTION A front-end gateway system is proposed in this paper; this system has a multimaster structure that prevents transmitted data from interfering with each other by using a wired-AND configuration and the carrier-sense multiple access with collision avoidance (CSMA/CA) protocol [1]. Specifically, CSMA/CA is a basic medium-access control (MAC) protocol specified in the popular IEEE 802.11 standard. One key feature of CSMA/CA is the use of in-band control frames for handling hidden terminals and reducing the cost of data interference. In general, the gateway used to collect data in a sensor network must be highly flexible for it to be compliant with the latest communication standards [2]. All\nreceived signals can be transmitted with different features in response to the signal propagation conditions. Collision prevention and suitable transmission must be ensured in a gateway system. This study\u2019s system ensures collision avoidance by using sketchy frames to deliver control information instead of bit-based control frames, as is the case in traditional MAC protocols. A sketchy frame encodes control information despite containing no meaningful bits; it does so through its length, which is closely related to its transmission time [3].\nThe present study also formulated a new carrier-sense multiple access with collision resolution protocol. This protocol is used for collision resolution; specifically, when a\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n2\ncollision is detected, a jamming signal that stops the transmissions of other stations is released, and the data are retransmitted without a backoff procedure. This step ensures the success of retransmission after the detection of a collision, which is a key feature of the proposed MAC protocol [4].\nEdge computing is implemented using container-based virtualization for data-driven analysis and prediction [5]; such computing is highly useful for the platform controllers and process modules of Internet of Things (IoT) platforms and can be used to treat an edge processing workflow as a data flow model in accordance with user requirements [6]. In general, an edge computing platform has an interintegrated circuit (I2C) master and slave that are combined for serial communication. The protocol conversion unit (PCU) enables a serial peripheral interface master device (sender) to communicate (specifically, send data) with an I2C slave device (receiver).\nA previous study fabricated an edge computing platform by using Xilinx ISE 14.7 and simulated it by using ISIM software [7]. The I2C bus specification of [8] shows that the data on the I2C-bus can be transferred at rates of up to 3.4 Mbps in the high-speed mode and the clock frequency of serial clock (SCL) can reach 3.4 MHz for the I2C-bus devices. In general, I2Cs have a half-diplex and two-wire interface and are popular because of their simplicity; they enable communication between devices of different speeds without data loss. For example, an I2C can have a fieldprogrammable gate array (FPGA) board acting as the master (faster device) and an MEMS motion sensor (slow device) acting as the slave. Because of their wealth of features, I2Cs will continue to be highly popular as serial interfaces for connecting integrated circuits on a board [9]. In this study, our front-end gateway was evaluated on an FPGA development board with a Cyclone V chip; this board allowed us to examine simulated waveforms by using the Signal Tap logic analyzer program [10].\nFig. 1 depicts a prototypical packet in asynchronous serial communication [11]. If the potential of the data line is low (0), a start bit is triggered before the data are sent. After a waiting period that is equal to the duration of a single clock (1 bit) has elapsed, an 8-bit data sequence is transferred, and the system can choose whether to send a parity bit. Finally, the system triggers a stop bit by increasing the potential of the data line to a high state (1).\nThe present study fabricated a chip for the proposed front-end gateway system with asynchronous and synchronous serial communication protocols by using the TSMC 90-nm CMOS technology. The proposed IoT network not only receives and stores sensing data by using an FPGA board but also uses edge computing to output predictions easily on the basis of sensing data. The gateway system application-specific integrated circuit (ASIC) accelerates integrated packet transmission with arbitration to prevent data collision by using the CSMA/CA protocol. The rest of this paper is organized as follows. Section II\ndescribes the system architecture of the proposed front-end gateway ASIC with serial communication protocol conversion, and Section III details the edge computing platform. Section IV describes the evaluation experiments, in which an FPGA was used. Finally, Section V provides the conclusions of this study.\nII. SYSTEM ARCHITECTURE OF THE PROPOSED FRONT-END GATEWAY ASIC Fig. 2 illustrates the system architecture of the proposed IoT network with a front-end-gateway ASIC, which runs on an I2C-based serial communication protocol [8]. The system architecture comprises front-end, medium-end, and backend parts. The front-end part is used for data processing, specifically data receiving, packet processing, checksum verification, and protocol conversion. The medium-end part is used for edge computing and to run online simple linear regression and a neural network (NN) and to store data. The back-end part is used for data monitoring and storage and to display the sensing data and store data offline in electrically erasable programmable read-only memory (EEPROM).\nFig. 3 illustrates the flow of sensing data in the proposed front-end gateway system. Sensing data are communicated using two methods. The first method involves wireless communication with ZigBee, where the system is connected to a ZigBee module and generates universal asynchronous receiver/transmitter (UART) packets after a ZigBee receiver is connected at the front end [12], [13]. The second method involves wired communication with an onboard sensor, which is connected to I2C master A. The front-end gateway sends periodic fetch\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n3\ncommands to obtain sensing data from the onboard sensor and to process the obtained packets by using I2C master A. The data received from I2C master A are integrated with UART packets and sent to the edge computing platform only after passing checksum and cyclic redundancy check (CRC) verification. The aforementioned integrated packets are received by the I2C slave at the edge computing platform. After the received packets have been verified, real-time linear regression and an NN are run on hardware for data analysis and prediction. Subsequently, I2C master B displays the predicted data on an organic LED (OLED) display and stores them into the EEPROM offline."
        },
        {
            "heading": "A. FINITE-STATE MACHINE OF THE I2C MASTER A",
            "text": "The I2C communication protocol is used to transmit data from an onboard sensor [14]. The address of the I2C slave, which is one of several sensing devices, is set as \u201c0x44.\u201d To enable bidirectional communication between the onboard sensor and the edge computing platform, a finite-state machine (FSM) is used in the front-end gateway ASIC of the I2C master A. Fig. 4 illustrates the FSM of the I2C master for onboard sensor. In the proposed FSM, the operating mode and state flow of the ASIC are formulated to ensure that the designed functions can be completed in a sequential manner. The SCL frequency is set at 0.5 MHz on the basis of the device address, acquisition command specifications, and data parameters in the datasheet of onboard sensor. The gateway ASIC has six modes of operation that are switched using a 2-bit switch (SW). The first and second bits are the most significant bit (MSB) and least significant bit (LSM), respectively. The six modes of the ASIC are as follows:\n1) Idle mode/waiting mode: In this mode, the system is\nidle and waits for the user to trigger the gateway by using an externally mounted hardware button. The state flow is determined using 2-bit switches. 2) Soft reset mode/measurement mode: In this mode, the\ncalibration value is automatically loaded, and the sensor status register is updated. If the status registers\nas abnormal, the user can switch to the idle mode by pushing the externally mounted hardware button to calibrate the value of the sensor. 3) Single shot mode/verification mode: This mode is used\nto receive a single packet for the functional verification of the sensor. In this mode, the measurement command is sent first, and the system then immediately switches to a receiving state to capture a single packet of data from the sensor. After receiving the packet, the frontend gateway performs a CRC, thus reducing the time required for verification. 4) Periodic command/working mode: In this mode, the\nASIC operates on the basis of periodic measurements performed without interruption. A periodic measurement command must be sent to the sensor in the I2C network for periodic measurement to be executed. The I2C master then switches to the fetch mode and awaits the fetch command. 5) Fetch mode: In this mode, a fetch command is sent 2 s\nafter a periodic command is issued. If the fetch command is sent too quickly, the sensor responds with a negative acknowledgment in the acknowledgment (ACK) stage to invalidate the periodic command because the sensing data are not ready in the register. In response, the sensor automatically switches to the break mode. If the fetch command is sent successfully, the sensor returns an ACK in the ACK stage. 6) Break mode: This mode is activated when a running\nprocedure stops because of an error in the code or the presence of deliberate interference in the data transfer process. In this mode, the sensor automatically switches to the idle mode.\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n4"
        },
        {
            "heading": "B. OPERATION FLOW OF THE FRONT-END GATEWAY SYSTEM",
            "text": "An accurate wireless sensor that measures humidity and temperature (SHT31-DIS) was developed by SensingTek [15]. Our front-end gateway is used to connect the sensing device and implement checksum and CRC algorithms. The front-end gateway is designed to guarantee the validity of the transmitted packet, and the operation flow of this gateway is illustrated in Fig. 5. Specifically, the outdoor and indoor sensing data must pass checksum and CRC verification."
        },
        {
            "heading": "C. CHECKSUM VERIFICATION",
            "text": "The operation flow of checksum verification is illustrated in Fig. 6. A byte stuffing flag is used to detect and store the next piece of data; these data are subject to XOR calculations with the byte stuffing value (0x10) in Chksum_buf. After the stop byte (1) is received, the checksum system verifies the checksum value in Chksum_buf. The data are error-free if the checksum value is 0x00. The attribute value of these data is then set to 0xFF, which denotes error-free data. Moreover, during the idle state, the data line is maintained in a high-potential state to ensure that erroneous data are not captured in the packet. The checksum value of erroneous data is 0x00, which is also their attribute value and the initial value of Chksum_buf."
        },
        {
            "heading": "D. CRC VERIFICATION",
            "text": "The operation flow of CRC verification is illustrated in Fig. 7. Our proposed design is based on the CRC-8 rule, which is used to generate the CRC value according to the ITUIEEE specification [16]. An 8-bit CRC checksum is generated by the CRC algorithm after the sensing data are received. The CRC-8 properties of the CRC algorithm are\nvalue\nFIGURE 6. Operation flow of checksum verification.\nStart\nData_CRC = Data_MSB XOR 0xFF Shift = 0\nData_CRC[7]=1 ?\nData_CRC << 1\nShift + 1\nShift < 8 ? Data_CRC XOR 0x31 Y\nY\nN\nN\nData_CRC[7:0]\n= CRC ?\nStop\nData = 0xFF\nData_CRC = Data_CRC XOR Data_LSB\nData_CRC << 1\nShift + 1\nData_CRC[7]=1 ?\nData_CRC << 1\nShift + 1\nShift < 16 ? Data_CRC XOR 0x31 Y\nY\nN\nN\nData_CRC << 1\nShift + 1\nIdle\nN\nY\nFIGURE 7. Operation flow of CRC verification.\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n5\nTABLE I CRC-8 PROPERTY OF THE CRC ALGORITHM\nProperty Quantity\nrule CRC-8\nwidth 8 bits\nprotected data Read and/or write data\npolynomial 0x31 (x8+x5+x4+1)\ninitialization 0xFF reflect input False reflect output False\nfinal XOR 0x00\nlisted in Table I. The CRC data are encoded as two transmitted bytes that are used to calculate the checksum value: Data_MSB and Data_LSB. First, the XOR operation is completed using Data_MSB and an initial value of 0xFF. Subsequently, if the highest bit of the CRC checksum Data_CRC [7] is high (1), the left-shift operation (<<) is executed to obtain the remainder of the binary division and to perform the XOR operation with the polynomial value of 0x31. If the Data_CRC [7] value is low (0), the left-shift operation (<<) is used to execute binary division. The lower byte of the sensing data (Data_LSB) is subjected to a similar series of operations. Thereafter, the final CRC checksum is determined."
        },
        {
            "heading": "III. EDGE COMPUTING PLATFORM",
            "text": "The present study adopted an edge computing platform with a costructured architecture and an I2C protocol. The I2C slave receives the sensing data, analyzes the integrated packet, and determines the trend of the received packets through on-time linear regression. The calculated data are then sent to an NN for prediction. Sensing and prediction data packets are transmitted using the I2C protocol. The I2C slave is used to receive the sensing data with the front-end gateway system, and the master is used to control the back-end peripheral display and the storage devices [17], [18]. Fig. 8 illustrates the operation flow of the edge computing platform.\nA. I2C SLAVE ARCHITECTURE A specially designed I2C slave is used in the edge computing platform to receive the integrated packet; its operation is as follows (Fig. 9). First, start\u2013stop logic is used to detect the initiation and completion of the operation of the I2C slave. The slave address comparator is then used to verify whether a sensing signal has been received. Subsequently, the ACK logic of the I2C master is used to control the control signal SDA_OEN [19].\nThe CSMA/CA protocol is used to prevent collision in the I2C bus. The protocol monitors the serial data (SDA) and SCL signals and the START and STOP signals to determine whether sensing data have been fully transmitted by other master devices. The system compares the signal SCL_OEN with the signal SCL to decide whether the present channel (bus) is busy, which is indicated by workingflag_CSMA.\nI2C Slave Integrated Packet\nAnalysis On-line Linear\nRegression Model\nNN Model I\n2 C Master B\n(Display & Storage)\nData [7:0]SDA SCL\nValid Data [7:0]\nFIGURE 8. Data flow in the edge computing platform.\nSDA\nSCL\nStart Stop Logic Serial data\nControl\nLogic\nACK Logic\nSlave Address\nComparator\nBidirectional I/O Pad (SDA)\nBidirectional I/O Pad (SCL)\nData Counter\nData Reg CSMA/DA LogicNormal High at Slave\nArbitration\ncircuit I2C Master\nDout/ACK\nLogic\nData [7:0]\nSCL_OEN\nSDA_OEN\nSDA_IN SCL_IN\nLoa\nd COMP\nR/W\nLoad INC\nEN\nCtrl\nLoad\nFIGURE 9. Operation flow of the I2C slave architecture.\nFig. 10 presents simulation results for CSMA/CA conditional detection, gateway command execution, and edge platform initialization. In the first period of workingflag_CSMA (denoted by ), the gateway command of the test mode is executed; consequently, a single packet is received to verify that the sensor is operational. Subsequently, the edge platform initialization of the EEPROM is initiated in the second period of workingflag_CSMA (denoted by )."
        },
        {
            "heading": "B. SIMPLE LINEAR REGRESSION",
            "text": "An initial linear model of calculated temperature yt and data (T = 20 s) xt is established as follows:\n01   tt xy (1)\nwhere 1 and 0 are the slope and intercept, respectively, of the linear equation of the sensing data.\nLeast squares regression can be used to determine the optimal values of 1 and 0. Specifically, least squares regression yields the sum of the square deviation (SSX) and the sum of cross product SSXY for X and Y when evaluating the predicted values b0 and b1 of 0 and 1, respectively [20]. Table II presents an example where seven historical data points on temperature, which are measured by the sensor, are used to predict future temperature.\n4)(\n1   nixX\nn\ni\nt (2)\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n29)(\n1   niyY\nn\ni\nt (3)\n   284 7\n1\n2 \ni\ntX ixSS (4)\n      56.0294 7\n1  i ttXY iyixSS (5) Correspondingly, b1 = SSXY/SSX = 0.56/28 = 0.02 and b0 = 29 \u2212 0.02 \u00d7 4 = 28.92, and the linear regression model is yt = 0.02 xt + 28.92. Fig. 11 presents the fitted curve and data points. The mean squared error (MSE) of the linear regression model is approximately 0.5606."
        },
        {
            "heading": "C. NEURAL NETWORK (NN)",
            "text": "A nonlinear autoregressive time-series model was established in MATLAB NN Toolbox software for training and prediction. Fig. 12 illustrates the established NN architecture. During training, the weight of the input layer is fed to each neuron of the hidden layer and then activated using the activation function. After the output value is\nobtained, the weight is continually calculated and passed to the subsequent hidden layer. Finally, the final value is output through the output layer. To evaluate the output, the MSE is calculated as the difference between the final output value and the target value, which serves as feedback for weight correction. The MSE is defined in (6), in which N is the number of data points, yi is the ith target value, and iy\u0302 is the ith predicted value. Ideally, the output value of the network approaches the target output value as training progresses [21].\nTABLE II SEVEN SENSED TEMPERATURE VALUES\ndata (xt)\n(time interval = 20 seconds) temperatures (yt)\n1st Data 28.97 2nd Data 29.02 3rd Data 28.87 4th Data 28.98 5th Data 29.04 6th Data 29.02 7th Data 29.10\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n7\nFig. 13 illustrates the training flowchart for the established NN; 75%, 15%, and 10% of the data are used for training, validation, and testing, respectively. During training, the MSE is calculated in each epoch, and the network parameters are adjusted. Subsequently, the output results of all epochs are recalculated using the validation set. The MSE for the test set in each epoch is used to obtain the best prediction model (i.e., the model with the best generalization ability) [22].\n   \nN\ni\nii yy N MSE\n1\n2\u02c6 1\n(6)"
        },
        {
            "heading": "IV. EVALUATION EXPERIMENTS",
            "text": "An experimental platform was used to evaluate the proposed front-end gateway system (Fig. 14). In this platform, two DE 10-Standard development boards (i.e., FPGA boards) are used for the validation of bidirectional communication [23]. The wireless sensor transmits sensing data on the basis of the ZigBee wireless protocol. The sensing data are then converted according to the UART protocol by using a TTL circuit and fed to the FPGA board through a general purpose input/output (GPIO) interface. The packet of the onboard sensor is processed by the I2C master. The edge computing platform handles OLED initialization commands and the character library. This platform is used to detect device abnormalities and to display the received data. The EEPROM is used to store the sensing data offline."
        },
        {
            "heading": "A. BIDIRECTIONAL I/O PORT VERIFICATION",
            "text": "The FPGA board of the proposed front-end gateway system does not have a bidirectional I/O port in its GPIO interface, which makes verifying the output of the bidirectional I/O port difficult. Specifically, the sensing data cannot be transmitted bidirectionally with a single wire. Therefore, only one signal I/O port was selected to be an input pin or output pin in the pin planner stage. Consequently, a tri-state buffer was required for bidirectional transmission to be\nFIGURE 14. Verification environment of the proposed front-end gateway system.\nG P\nIO\nFPGA\nI 2 C\nMaster\nI 2 C\nSlave\nSDA\nSCL\nSDA_in\nSCL\nSDA_oen GND\nVDD\nClock Stretching disable\n74HC125\nA Y\nR1 OE\nFIGURE 15. Bidirectional I/O port with a single wire that was implemented using the 74HC125 device.\nverified with a single wire. Thus, we used a 74HC125 chip, which provides four independent buffer gates with threestage outputs, in the bidirectional I/O port with a single wire (Fig. 15).\nFig. 16 illustrates a measured UART packet captured by the Signal Tap logic analyzer on the FPGA board [23]. The clock frequency of the sensing device was 5 MHz, the baud rate was 0.5 MHz, and the total number of sampling points was 3776 points. A completed 330-bit packet was received in approximately 755.2 s, and the throughput was approximately 436.97 kbps. The start byte was 0x01 in hexadecimal notation (h; Fig. 16). The LSB and MSB were transmitted first and last, respectively. The output address, attribute, and value of the sensor were 5692h, 0012h, and 0002h, respectively. Finally, the checksum was verified as 0xB7h after the execution of the XOR operation with byte stuffing, which indicates that the next byte had to have a value of 0x10h after the XOR operation when the receiving byte was 0x02h.\nFig. 17 presents the plot of a measured I2C packet captured by the Signal Tap logic analyzer. The operating frequency of SCL was approximately 0.5 MHz. A 90-bit packet was transmitted at approximately 184.6 s, and the throughput was approximately 487.54 kbps. The front-end gateway sent the integrated packets by using the I2C protocol. The operating freuency (SCL) of the I2C slave could reach up to 3.6 MHz bidirectionally. As shown in Fig. 17, the write and read bits of the slave address were 0x88h and 0x89h, respectively. Given this information, the system could find two received binary codes in the received signal\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n8\n(sda_in): \u201c1000_1000\u201d and \u201c1000_1001\u201d for the write and read bits, respectively. In the same expression, the hexadecimal code (0x000E) of the fetch command was expressed as the binary code \u201c1110_0000_0000_0000\u201d in the received signal (sda_in).\nFig. 18 illustrates the analysis and verification of the integrated packet received by the edge computing platform. An integrated 153-bit packet required 42.96 s to be received at an operating frequency (SCL) of 3.6 MHz. The throughput was approximately 3.5614 Mbps, which was approximately 8.15 times higher than that of the UART packet. When the edge computing unit received the integrated packet, the online linear regression, NN, and data monitoring units were triggered. The real and predicted humidities and temperatures are displayed in Fig. 19; the formulas for the relative humidity (RH) and temperature (T) conversions are provided in [15].\n12 100 16   RH\nS RH (7)\n  12 17545 16 \n ro S CT (8)\nwhere SRH and Sr are the raw sensor outputs for humidity and temperature, respectively. The aforementioned formulas hold only when SRH and Sr are represented in decimal form. For example, the hexadecimal code \u201c6C25h\u201d indicates an indoor temperature of 28.93 \u00b0C with the temperature conversion formula, as shown in (8). Specifically, the following expression is obtained:\n  .93.28928.28 12\n27685 17545\n16   CT o (9)\nNote that the Signal Tap logic analyzer, which handles conversion, was used to capture the hexadecimal code. The real sensing value could be obtained directly from the computer. Fig. 20 presents the real and predicted temperatures for comparison. The root-mean-square error is defined in (10), in which N is the number of data points, yi is the ith actual value, and iy\u0302 is the ith predicted value [24].\n \nN\nyy\nRMSE\nN\ni ii  \n 1\n2\u02c6\n(10)\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n9\nB. ASIC IMPLEMENTATION AND FUNCTIONAL VERIFICATION We evaluated the performance of the front-end gateway ASIC in protocol conversion and data transmission. A sensor (SensingTek) collected data on temperature, humidity, and particulate matter 2.5 level [15]. The communication protocol of the wireless sensor was ZigBee, and the onboard sensing device was a Sensirion SHT31-\nDIS device, which measured temperature and humidity and transmitted the measured data through the I2C protocol. In the ASIC, debugging and verification were conducted using the NC-Verilog simulator and Verdi/nWave waveform viewer.\nAfter the functional verification of the ASIC and the packet analysis of the I2C master and UART, we synthesized the ASIC using a TSMC 90-nm CMOS cellbased process, and the clock frequency was set as 10 MHz. The Synopsys IC Compiler was used to plan the chip layout of the front-end gateway system. After the ASIC passed the design rule check (DRC) and layout versus schematic (LVS) verifications, the chip of the front-end gateway system was imaged (Fig. 21). Table III presents the specifications of the ASIC of the proposed front-end gateway system. Figs. 22 and 23 show the prelayout (gate-level) and postlayout simulated waveforms, respectively, of this circuit, which were captured using the Verdi/nWave waveform viewer. The chip layout was correctly fabricated, as indicated by the waveforms. A PC-based logic analyzer from the Acute TravelLogic series (TravelLogic TL2236), which was newly released on the market, was used to measure the output waveform of the I2C packet. The waveform results indicated that the I2C\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\nFIGURE 22. Prelayout (gate-level) simulated waveforms of the front-end gateway system.\nFSM was working correctly. Fig. 24 displays the captured waveform of the I2C packet at a clock frequency of 10 MHz and an SCL frequency of 0.5 MHz. Subsequently, two input signals of the integrated packet, namely SDA and SCL, were captured by the Signal Tap logic analyzer in a postlayout simulation and measured using the logic analyzer (TravelLogic TL2236). Figs. 25 and 26 depict the captured and measured SDA and SCL signals of the integrated packet. The close correspondence between the captured postlayout simulated waveforms [Fig. 25] and the measured waveforms [Fig. 26] indicated that the ASIC was working correctly. A summary of the throughput results of the wireless sensor, onboard sensor, and I2C integrated packet are presented in Table IV. The highest throughput was approximately 3.5614 Mbps in the high-speed mode under an operating frequency (SCL) of 3.6 MHz.\nTABLE III SPECIFICATIONS OF THE ASIC OF THE FRONT-END GATEWAY SYSTEM\nPerformances Specification\nTechnology TSMC 90-nm 1P9M\nSupplied Voltage (V) 3.3 / 1.0\nClock Frequency (MHz) 10 / 5 / 1\nPower Consumption (mW) 0.6545\nGate Count (gates) 6,057\nChip area (mm2) 0.82990.8297\nPackage S/B-48\nTABLE IV THROUGHPUT RESULTS FOR THE WIRELESS SENSOR, ONBOARD SENSOR, AND I2C INTEGRATED PACKET\nParameter Wireless\nSensor\nOnboard\nSensor\nI2C Integrated\nPacket\nProtocol UART I2C I2C\nOperating frequency\n(MHz) 5 0.5 3.6\nTransmitted Bits (bits) 320 90 153\nThroughput (Mbps) 0.4478 0.4877 3.5614\nG. M. Sung et al.: Front-End Gateway System with Serial Communication Protocols Conversion\n11\nThe proposed front-end gateway ASIC with serial communication protocol conversion was compared against relevant methods proposed in previous studies (Table V). Similar to the designed ASIC, the methods of [7] and [25] use protocol conversion, and the methods of [19] and [26] are designed for data communication through the I2C protocol. These methods were implemented on devices that were different from our device. However, only this study is implemented on an ASIC and can prevent data collision through an arbitration process based on the CSMA/CA protocol. Our device also has a higher maximum SCL (approximately 3.6 MHz) than do those proposed in the aforementioned studies. The EEPROM communicates with the proposed ASIC through the I2C protocol and stores sensing data to prevent data loss caused by power outages. The throughputs of the wireless sensor, onboard sensor, and I2C integrated packet were high at 447 kbps, 487.7 kbps, and 3.5614 Mbps, respectively (Table IV). Thus, the designed ASIC can be used in various applications."
        },
        {
            "heading": "V. CONCLUSION",
            "text": "In this paper, a front-end gateway system with serial communication protocol conversion and an edge computing platform is proposed. This system is useful for deep learning applications on IoT networks that not only receive and store sensing data by using an FPGA board but also leverage edge computing for prediction. The front-end gateway system is composed of a data control unit and a serial communication PCU with the I2C and UART protocols. The proposed gateway system also accelerates integrated packet transmission through arbitration based on the CSMA/CA protocol to prevent collision. The highest SCL frequency of the I2C slave is approximately 3.6 MHz for sending integrated packets to the edge computing platform. Furthermore, the SCL frequency of the I2C master can be reduced to 0.2 MHz in edge computing\nplatforms for real-time data monitoring and data storage in EEPROM. The simulation results indicate that the NN of the proposed system outperforms simple linear regression. In this study, a front-end gateway ASIC was fabricated using the TSMC 90-nm 1P9M CMOS process. The power consumption, gate count, and chip area of this circuit were 0.6545 mW, 6,057 gates, and 0.82990.8297 mm2, respectively, at 3.3 V and a clock frequency of 10 MHz. Our designed ASIC can be added to the front-end gateway system to enable this system to achieve faster communication, a smaller size, and greater robustness."
        },
        {
            "heading": "ACKNOWLEDGMENT",
            "text": "We thank the National Science and Technology Council (NSTC), Taiwan, for financially supporting this research under Contract No. MOST 111-2622-E-027-012. We are also grateful to the Taiwan Semiconductor Research Institute (TSRI), Taiwan, for fabricating the test chip. This manuscript was edited by Wallace Academic Editing."
        }
    ],
    "title": "Front-End Gateway System With Serial Communication Protocol Conversion and Edge Computing Platforms",
    "year": 2023
}