{
    "abstractText": "Trajectory retiming is the task of computing a feasible time parameterization to traverse a path. It is commonly used in the decoupled approach to trajectory optimization whereby a path is first found, then a retiming algorithm computes a speed profile that satisfies kino-dynamic and other constraints. While trajectory retiming is most often formulated with the minimum-time objective (i.e. traverse the path as fast as possible), it is not always the most desirable objective, particularly when we seek to balance multiple objectives or when bang-bang control is unsuitable. In this paper, we present a novel algorithm based on factor graph variable elimination that can solve for the global optimum of the retiming problem with quadratic objectives as well (e.g. minimize control effort or match a nominal speed by minimizing squared error), which may extend to arbitrary objectives with iteration. Our work extends prior works, which find only solutions on the boundary of the feasible region, while maintaining the same linear time complexity from a single forward-backward pass. We experimentally demonstrate that (1) we achieve better realworld robot performance by using quadratic objectives in place of the minimum-time objective, and (2) our implementation is comparable or faster than state-of-the-art retiming algorithms.",
    "authors": [
        {
            "affiliations": [],
            "name": "Gerry Chen"
        },
        {
            "affiliations": [],
            "name": "Frank Dellaert"
        },
        {
            "affiliations": [],
            "name": "Seth Hutchinson"
        }
    ],
    "id": "SP:5e7eb7768818d7b0571196a798794e74345ee079",
    "references": [
        {
            "authors": [
                "H. Choset",
                "K.M. Lynch",
                "S. Hutchinson",
                "G.A. Kantor",
                "W. Burgard",
                "L.E. Kavraki",
                "S. Thrun"
            ],
            "title": "Principles of Robot Motion: Theory, Algorithms, and Implementations",
            "year": 2005
        },
        {
            "authors": [
                "\u00c1. Nagy",
                "I. Vajk"
            ],
            "title": "Sequential Time-Optimal Path-Tracking Algorithm for Robots",
            "venue": "IEEE Transactions on Robotics, vol. 35, no. 5, pp. 1253\u20131259, Oct. 2019.",
            "year": 2019
        },
        {
            "authors": [
                "J. Bobrow",
                "S. Dubowsky",
                "J. Gibson"
            ],
            "title": "Time-Optimal Control of Robotic Manipulators Along Specified Paths",
            "venue": "The International Journal of Robotics Research, vol. 4, no. 3, pp. 3\u201317, Sept. 1985. [Online]. Available: https://doi.org/10.1177/027836498500400301",
            "year": 1985
        },
        {
            "authors": [
                "K. Shin",
                "N. McKay"
            ],
            "title": "Minimum-time control of robotic manipulators with geometric path constraints",
            "venue": "IEEE Transactions on Automatic Control, vol. 30, no. 6, pp. 531\u2013541, June 1985.",
            "year": 1985
        },
        {
            "authors": [
                "F. Pfeiffer",
                "R. Johanni"
            ],
            "title": "A concept for manipulator trajectory planning",
            "venue": "IEEE Journal on Robotics and Automation, vol. 3, no. 2, pp. 115\u2013123, Apr. 1987.",
            "year": 1987
        },
        {
            "authors": [
                "J.-J. Slotine",
                "H. Yang"
            ],
            "title": "Improving the efficiency of time-optimal path-following algorithms",
            "venue": "IEEE Transactions on Robotics and Automation, vol. 5, no. 1, pp. 118\u2013124, Feb. 1989.",
            "year": 1989
        },
        {
            "authors": [
                "S. Singh",
                "M.C. Leu"
            ],
            "title": "Optimal Trajectory Generation for Robotic Manipulators Using Dynamic Programming",
            "venue": "Journal of Dynamic Systems, Measurement, and Control, vol. 109, no. 2, pp. 88\u201396, June 1987. [Online]. Available: https://doi.org/10.1115/1.3143842",
            "year": 1987
        },
        {
            "authors": [
                "K. Hauser"
            ],
            "title": "Fast Interpolation and Time-Optimization on Implicit Contact Submanifolds",
            "venue": "Robotics: Science and Systems IX. Robotics: Science and Systems Foundation, June 2013. [Online]. Available: http://www.roboticsproceedings.org/rss09/p22.pdf",
            "year": 2013
        },
        {
            "authors": [
                "D. Verscheure",
                "B. Demeulenaere",
                "J. Swevers",
                "J. De Schutter",
                "M. Diehl"
            ],
            "title": "Time-Optimal Path Tracking for Robots: A Convex Optimization Approach",
            "venue": "IEEE Transactions on Automatic Control, vol. 54, no. 10, pp. 2318\u20132327, Oct. 2009.",
            "year": 2009
        },
        {
            "authors": [
                "G. Chen",
                "S. Hutchinson",
                "F. Dellaert"
            ],
            "title": "Locally Optimal Estimation and Control of Cable Driven Parallel Robots using Time Varying Linear Quadratic Gaussian Control",
            "venue": "2022 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). Kyoto, Japan: IEEE, Oct. 2022, pp. 7367\u20137374.",
            "year": 2022
        },
        {
            "authors": [
                "G. Chen",
                "S. Baek",
                "J.-D. Florez",
                "W. Qian",
                "S.-W. Leigh",
                "S. Hutchinson",
                "F. Dellaert"
            ],
            "title": "GTGraffiti: Spray Painting Graffiti Art from Human Painting Motions with a Cable Driven Parallel Robot",
            "venue": "2022 International Conference on Robotics and Automation (ICRA). Philadelphia, PA, USA: IEEE, May 2022, pp. 4065\u20134072.",
            "year": 2022
        },
        {
            "authors": [
                "K. Shin",
                "N. McKay"
            ],
            "title": "A Dynamic Programming approach to trajectory planning of robotic manipulators",
            "venue": "IEEE Transactions on Automatic Control, vol. 31, no. 6, pp. 491\u2013500, June 1986.",
            "year": 1986
        },
        {
            "authors": [
                "D. Constantinescu",
                "E.A. Croft"
            ],
            "title": "Smooth and time-optimal trajectory planning for industrial manipulators along specified paths",
            "venue": "Journal of Robotic Systems, vol. 17, no. 5, pp. 233\u2013249, 2000. [Online]. Available: https://onlinelibrary.wiley.com/doi/abs/ 10.1002/%28SICI%291097-4563%28200005%2917%3A5%3C233% 3A%3AAID-ROB1%3E3.0.CO%3B2-Y",
            "year": 2000
        },
        {
            "authors": [
                "Z. Shiller"
            ],
            "title": "Time-energy optimal control of articulated systems with geometric path constraints",
            "venue": "Proceedings of the 1994 IEEE International Conference on Robotics and Automation, May 1994, pp. 2680\u2013 2685 vol.4.",
            "year": 1994
        },
        {
            "authors": [
                "J.T. Betts",
                "W.P. Huffman"
            ],
            "title": "Path-constrained trajectory optimization using sparse sequential quadratic programming",
            "venue": "Journal of Guidance, Control, and Dynamics, vol. 16, no. 1, pp. 59\u201368, 1993. [Online]. Available: https://doi.org/10.2514/3.11428",
            "year": 1993
        },
        {
            "authors": [
                "H. Pham",
                "Q.-C. Pham"
            ],
            "title": "A New Approach to Time-Optimal Path Parameterization Based on Reachability Analysis",
            "venue": "IEEE Transactions on Robotics, vol. 34, no. 3, pp. 645\u2013659, June 2018.",
            "year": 2018
        },
        {
            "authors": [
                "K. Lynch",
                "F. Park"
            ],
            "title": "Modern Robotics: Mechanics, Planning, and Control",
            "year": 2017
        },
        {
            "authors": [
                "T. Lipp",
                "S. Boyd"
            ],
            "title": "Minimum-time speed optimisation over a fixed path",
            "venue": "International Journal of Control, vol. 87, no. 6, pp. 1297\u20131311, June 2014. [Online]. Available: https://www.tandfonline. com/doi/full/10.1080/00207179.2013.875224",
            "year": 2014
        },
        {
            "authors": [
                "G. Chen"
            ],
            "title": "C++ Implementation of \u201dGeneralizing Trajectory Retiming to Quadratic Objective Functions",
            "venue": "Sept. 2023. [Online]. Available: https://github.com/gchenfc/gtsam/tree/features/ gerry/trajectory retiming/gtsam unstable/retiming",
            "year": 2023
        },
        {
            "authors": [
                "H. Pham",
                "Q.-C. Pham",
                "J. Mirabel",
                "EdsterG"
            ],
            "title": "Toppra: Time- Optimal Path Parameterization",
            "venue": "2023. [Online]. Available: https: //github.com/hungpham2511/toppra",
            "year": 2023
        },
        {
            "authors": [
                "A. Pott",
                "T. Bruckmann",
                "L. Mikelsons"
            ],
            "title": "Closed-form Force Distribution for Parallel Wire Robots",
            "venue": "Computational Kinematics, A. Kecskem\u00e9thy and A. M\u00fcller, Eds. Berlin, Heidelberg: Springer, 2009, pp. 25\u201334.",
            "year": 2009
        },
        {
            "authors": [
                "M. Xie",
                "A. Escontrela",
                "F. Dellaert"
            ],
            "title": "A factor-graph approach for optimization problems with dynamics constraints",
            "venue": "2020.",
            "year": 2020
        },
        {
            "authors": [
                "S. Yang",
                "G. Chen",
                "Y. Zhang",
                "H. Choset",
                "F. Dellaert"
            ],
            "title": "Equality Constrained Linear Optimal Control With Factor Graphs",
            "venue": "2021 IEEE International Conference on Robotics and Automation (ICRA). Xi\u2019an, China: IEEE, May 2021, pp. 9717\u20139723.",
            "year": 2021
        },
        {
            "authors": [
                "F. Dellaert",
                "M. Kaess"
            ],
            "title": "Factor Graphs for Robot Perception",
            "venue": "Foundations and Trends in Robotics,",
            "year": 2017
        },
        {
            "authors": [
                "F. Dellaert",
                "GTSAM. Contributors"
            ],
            "title": "Borglab/gtsam",
            "venue": "Georgia Tech Borg Lab, May 2022. [Online]. Available: https://github.com/ borglab/gtsam",
            "year": 2022
        }
    ],
    "sections": [
        {
            "text": "I. INTRODUCTION\nTrajectory optimization is necessary to execute safe, effective robot motions and can be solved either directly as a statespace optimization problem or with a decoupled approach in which a configuration-space path is first found then retimed [1, Ch. 11.2]. We focus on the decoupled approach to separate the trajectory optimization problem into a path planning problem and a retiming problem. In this approach, a path planner first generates a path which e.g. avoids obstacles and solves the robot kinematics. Then, a retiming algorithm is applied to the path to generate a trajectory which satisfies the robot\u2019s dynamics and other constraints. Although the resulting solution is only an approximation to the original trajectory optimization problem, it is often more tractable, faster, and reliable, especially when the path planner has good heuristics for kino-dynamic constraints or the task specification defines the path.\nThe time-optimal trajectory retiming problem (also known as time-optimal path parameterization (TOPP), time-optimal path tracking, and several other names), in which the objective is to minimize the time to traverse the path, represents the most common retiming objective. This problem has been studied extensively in the literature and traditionally has taken one of three approaches [2]: convex optimization, dynamic programming, and searching for bang-bang control switching points where the active constraints change.\nThis work was supported by NSF Grant No. 2008302. All authors are with the Institute for Robotics and Intelligent Machines (IRIM), Georgia Institute of Technology, Atlanta, GA 30332, USA {gchen,fd27,seth}@gatech.edu\nTwo key precursor techniques enabling efficient algorithms are shared by almost all approaches, dating back to at least [3]\u2013[7]. First, the equations of motions and constraints are reparameterized in terms of the scalar time parameterization function (see Sec. II-A for details). This enables Bellmanstyle forward-backward algorithms. Second, the fact that the time-optimal objective is monotonic implies that the solution must lie on the boundary of the feasible set (bang-bang). Hauser [8], Nagy & Vajk [2], and Pham et. al. [2] all utilize proofs along these lines to justify the use of sequential linear programming (SLP) or greedy speed maximization during the backward pass. This bang-bang approach is efficient but restricts the objective to minimum-time or similar objectives.\nHowever, the time-optimal retiming problem is not always the most desirable objective [9], particularly in applications where we seek to balance multiple objectives or where bang-bang control is unsuitable. For example, cable-driven parallel robots maintain stiffness primarily through internal\nar X\niv :2\n30 9.\n10 17\n6v 1\n[ cs\n.R O\n] 1\n8 Se\np 20\n23\ntension which diminishes the closer they are to torque limits. Thus balancing speed with torque margin is desirable to maintain stability and safety [10], [11]. This and several other applications in balancing robot safety, stability, and wear with speed of operation motivate the use of quadratic objectives, which can minimize the sum of multiple squared errors instead of or in addition to hard constraints with TOPP.\nSurprisingly alternate retiming objectives are rarely considered in the literature. Dynamic programming approaches [5], [7], [12] discretize not only in time but also in state space. Some approaches address other objectives, especially energy-minimization [13], [14], but apply only to specific objectives, e.g. integral of a time-independent running cost. Direct transcription approaches tend to be the most general [9], [15] but, even with second-order cone problem or sparse linear algebra solvers, do not fully exploit the structure of this scalar-function optimal control problem.\nIn this paper, we present a novel, linear-time algorithm for solving Quadratic Objective Path Parameterization (QOPP). Our algorithm matches the performance of TOPP-RA [16] on TOPP problems while also solving QOPP problems in linear time. Our contributions are as follows:\n1) We share a re-interpretation of the TOPP-RA [16] approach as factor graph variable elimination. 2) We extend the TOPP-RA approach to solve the trajectory retiming problem with quadratic objectives. 3) We describe how the quadratic case can be extended to arbitrary nonlinear objectives with iteration. 4) We write and benchmark a fast, C++ implementation. 5) We validate the utility of objectives other than mini-\nmum time with real-world robot experiments."
        },
        {
            "heading": "II. APPROACH",
            "text": "In this section, we start by providing a brief recap of the standard reparameterizations used in trajectory retiming. We then introduce factor graphs by explaining the TOPPRA (Reachability Analysis) algorithm using a factor graph interpretation. Finally, we use the factor graph approach to extend the TOPP-RA algorithm to the QOPP problem."
        },
        {
            "heading": "A. Reparameterization",
            "text": "We define the TOPP problem as follows. Given a path q(s) : [0, 1]\u2192 Rn, we seek to find a reparameterization, s(t) is a monotonically increasing function from [0, T ] \u2192 [0, 1], which minimizes the total time T while satisfying a set of general first and second order constraints:\ns\u2217(t) = arg min s(t)\nT (1a)\nsubject to\nA(s)q\u0308 + q\u0307TB(s)q\u0307 + f(s) \u2208 C (s), (1b) Av(s)q\u0307 + fv(s) \u2208 C v(s) (1c)\nwhere A,B,f denote coefficient matrix-, tensor-, and vector- valued functions for general second order constraints; Av,fv denote coefficient matrix- and vector- valued functions for general first-order constraints; and C ,C v denote\nconvex polytope-valued functions of admissible values for the corresponding constraints. For notational convenience, we will assume these to be closed polytopes (so we can use \u2264), but everything applies to open intervals as well. Arguments for q(s(t)), q\u0307(s(t)), q\u0308(s(t)), and s(t) in (1b) and (1c) were omitted for readability. Equations (1b) and (1c) apply to t \u2208 [0, T ] (omitted for readability). Although rigidbody equations of motion are most commonly notated with C(q, q\u0307)q\u0307 instead of q\u0307TB(q)q\u0307, the latter is also standard [1], [17] and valid for conservative systems.\n1) Re-writing Constraints in Terms of s(t): Differentiating q(s(t)) with respect to t yields\nq\u0307(s(t)) = dq\nds s\u0307 (2)\nq\u0308(s(t)) = d2q\nds2 s\u03072 +\ndq ds s\u0308. (3)\nSubstituting into (1b) and (1c) yields constraints of the form:\na(s)s\u0308+ b(s)s\u03072 + c(s) \u2208 C (s) (4) av(s)s\u0307+ cv(s) \u2208 C v(s) (5)\nwhere a, b, c,av, cv are vector functions of s. (5) can always be rewritten in the form of (4) since s\u0307 is a scalar, positive function. Thus (5) can be written s\u0307min \u2264 s\u0307 \u2264 s\u0307max and squared. Our TOPP problem is now:\ns\u2217(t) = arg min s(t)\nT (6a)\nsubject to a(s)s\u0308+ b(s)s\u03072 + c(s) \u2208 C (s) (6b)\n2) Discretization: As is common for TOPP convex optimization and dynamic programming approaches (but not all switching-search approaches), we discretize in s:\naks\u0308k + bks\u0307 2 k + ck \u2208 Ck (7)\nDefining: x := s\u03072, u := s\u0308, (8)\nwe can rewrite (6b) as\nakuk + bkxk + ck \u2208 Ck (9)\nand, remarkably, dxds = 2s\u0307 ds\u0307 ds = 2 ds\u0307 ds ds dt = 2s\u0308 = 2u. Then assuming a zero-order hold on u (piecewise constant between intervals), we introduce another constraint from the relationship between x and u:\nxi+1 = xk + 2uk\u2206s. (10)\nThe minimum-time objective can also be discretized:\nT = \u222b 1 0 1 s\u0307(t) ds = N\u22121\u2211 k=0 2\u2206s\u221a xk + \u221a xk+1 , (11)\nwhere the summation holds exactly for the piecewiseconstant assumption on u [18, Sec 6.1.1].\nFinally, the objective min \u2211\nT can be achieved by greedily selecting the maximum s\u0307k from the set of reachable values at each time step, as long as \u2206s is sufficiently small [16]. Notationally, we can express this \u201cgreedy\u201d selection optimization problem as:\nmaximize x0,...,xN , u0,...,uN\u22121 N\u2211 i=0 wkxk (12a)\nsubject to\nakuk + bkxk + ck \u2208 Ck, i = 0, . . . , N, (12b) xi+1 \u2212 xk \u2212 2uk\u2206s = 0 , i = 0, . . . , N \u2212 1, (12c)\nxk > 0 , i = 0, . . . , N. (12d)\nfor some very large w, which denotes that each xk should be taken greedily and irrespective of any other xk. Define uN := 0 for notational simplicity of (12b).\nIntuitively, the equivalence of the optimization problems despite a different objective function is due to the facts that (a) if a larger xk never sacrifices xk+1 to be smaller, then the greedy approach works, and (b) there exists some critical threshold \u2206\u2217s such that, when \u2206s \u2264 \u2206\u2217s , the former is true for all k. Specifically, the former is true when the dynamics coefficient 2\u2206s is smaller than ak/bk for all k. Though the details of the proof require additional machinery to address the fact that ak/bk is not defined for vectors, the intuition is the same and given in [16].\nAlthough we could remove uk from the optimization problem (12) by substituting uk = (xi+1\u2212xk)/2\u2206s from (12c), we opt not to because (1) it will make min-effort objectives more natural when we extend to quadratic objectives and (2) the factor graph elimination will do this automatically."
        },
        {
            "heading": "B. Solving the TOPP Problem with Factor Graphs",
            "text": "Although [16] solves the LP in O(N) time using a reachability analysis approach, we can instead use factor graph variable elimination to derive an equivalent algorithm. We hope to be clear enough that factor graph elimination is intuitive to readers, but we provide a brief introduction in the Appendix for those who feel more comfortable with one.\nThe Factor Graph for TOPP: The factor graph for this problem is given in Fig. 3. We will proceed eliminating one variable at a time in the order u0, x0, u1, x1, . . . , xN\u22121, xN .\nEliminating u0: Following the reachable set elimination ordering, we first eliminate u0 by solving the LP derived by collecting only the terms in (12) that contain u0:\nu\u22170(x0, x1) = maximizeu0 (nothing)\nsubject to a0u0 + b0x0 + c0 \u2208 C0, x1 \u2212 x0 \u2212 2u0\u2206s = 0\nIn this case, although we have no objective function, the solution is obvious because the dynamics fully constrain u0:\nu\u22170(x0, x1) = 1\n2\u2206s (x1 \u2212 x0). (15)\nThis optimal assignment is called a conditional (this would be p(u0|x0, x1) in PGM literature) and is denoted by arrows in Fig. 4. We then substitute u\u22170(x0, x1) into (12b) to create a new factor on the separator S(u0) = {x0, x1}:\na0 ((x1 \u2212 x0)/(2\u2206s)) + b0x0 + c0 \u2208 C0. (16)\nAfter eliminating u0, our factor graph looks like Fig. 4.\nEliminating x0: Next, eliminate x0 much the same way:\nx\u22170(x1) = maxx0 x0 (17a)\ns.t. a0 2\u2206s (x1 \u2212 x0) + b0x0 + c0 \u2208 C0, (17b)\nx0 > 0. (17c)\nFor the purposes of variable elimination, we don\u2019t need to symbolically solve this LP, but instead we just need 2 things:\n1) conditional: x\u22170(x1), and 2) new factor: the resulting objectives/constraints on x1\nafter we substitute x0 = x\u22170(x1). For 1, we do not need an analytical expression (yet) so we just store the conditional as the optimization problem (17). For 2, the new factor will consist of an objective component and a constraint component. The objective component is easy: we can ignore it because we will select x1 greedily. More formally, our new objective factor will be x\u22170(x1), but because we also have a pre-existing factor wx1 where w is a very large number, our new objective term is negligible in comparison (x\u22170(x1)\u226a wx1).\nThe constraint component of our new factor can be solved with 2 LPs the same way as in [16]. Since x1 is a scalar, the resulting constraint on x1 will take the form:\nx1,min \u2264 x1 \u2264 x1,max. (18)\nWe compute the smallest and largest possible values of x1 that satisfy (17b), (17c):\nx1,min = minimize x0,x1 x1 subject to (17b), (17c), (19)\nx1,max = maximize x0,x1 x1 subject to (17b), (17c). (20)\nThese are very easy to solve in just a few dozen lines of code since we need only optimize over 2, scalar variables.\nAfter eliminating u0, x0 we have Fig. 5. We repeat the elimination process on u1, x1, . . . , xN\u22121, xN until all variables are eliminated. The result is the Bayes Net in Fig. 6.\nBack-substitution: We solve the Bayes Net by backsubstitution. The final elimination step will produce a marginal on xN (p(xN ) in PGM literature) of the form:\nx\u2217N = maxxN xN\ns.t. xN,min \u2264 xN \u2264 xN,max, xN > 0\n(21)\nwhose solution is clearly x\u2217N = xN,max. Then, we can compute x\u2217N\u22121 = x \u2217 N\u22121(xN ) by substituting xN \u2190 x\u2217N into the conditional (14) and solving the now single-variable scalar LP (which is just iterating through the inequalities to find the lower bound) for xN\u22121. This process is repeated until all variables are evaluated, and the resulting sequence x\u22170, . . . , x \u2217 N , u \u2217 0, . . . , u \u2217 N\u22121 is the solution to (12).\nFinally, the optimal time parameterization s\u2217(t) can be obtained by integrating x\u2217 = s\u0307\u2217. We defer to [16] for the intracacies of parameterizing solution. As in [16], zeroinertia points are accurate in the limit \u2206s \u2192 0. The time optimal trajectory is q\u2217(t) = q(s\u2217(t))."
        },
        {
            "heading": "C. Solving the QOPP Problem with Factor Graphs",
            "text": "The variable elimination algorithm naturally extends to other objectives because it remains unchanged no matter the objectives or constraints; only the algebra of each elimination step changes. Let us then define our (discretized) general quadratic objective problem as:\narg min x0,...,xN , u0,...,uN\u22121\nN\u2211 i=0 x\u0303kQkx\u0303k + u\u0303kRku\u0303k + x\u0303kNku\u0303k (22a)\nsubject to (12b), (12c), (12d) (22b)\nwhere scalars x\u0303k := xk \u2212 xk,desired, u\u0303k := uk \u2212 uk,desired, and Qk, Rk, Nk are state, control, and cross cost weights.\nElimination of uk is identical to the TOPP case; see (13). Similarly, the inequality constraint portion of the new factor when eliminating xk is identical to the TOPP case; see (18)\u2013 (20). Then, the new objective portion of the new factor when eliminating xk is the only portion that changes (which requires analytically computing the conditional as well).\nLet us begin by computing the conditional x\u0303\u22170(x\u03031):\nx\u0303\u22170(x\u03031) = arg min x\u03030 x\u03030Q \u2032 0x\u03030 + x\u03031R \u2032 0x\u03031 + x\u03030N \u2032 0x\u03031 (23a)\ns.t. a0 2\u2206s (x1 \u2212 x0) + b0x0 + c0 \u2208 C0, (23b)\nx0 > 0. (23c)\nwhere Q\u20320, R \u2032 0, N \u2032 0 were derived after eliminating u\u03030 by substituting u\u0303\u22170 = 1 2\u2206s (x1 \u2212 x0):\nQ\u20320 := Q0 + 1\n4\u22062s R0 \u2212\n1\n2\u2206s N0 (24)\nR\u20320 := 1\n4\u22062s R0 (25)\nN \u20320 := \u2212 1\n2\u22062s R0 +\n1\n2\u2206s N0. (26)\nIn contrast to the TOPP case where we could use the bang-bang property to delay solving of the LP until backsubstitution, we must actually solve this QP symbolically as a function of x1. Fortunately, this is tractable for a 2- dimensional (2 scalar variables) QP.\nThe solution to (23) is well-known to be piecewise linear. As an intuition, without inequality constraints this is just the minimum of a scalar quadratic function:\nx\u0303\u22170,unconstr(x\u03031) = \u2212b/(2a) (27)\n= \u2212 N \u2032 0\n2Q\u20320 x\u03031. (28)\nAfter inclusion of inequality constraints, the solution will be unchanged when no constraints are violated, but be the convex feasible boundary when any are violated.\nWe then substitute the piecewise linear x\u0303\u22170(x\u03031) into (23a) to obtain a piecewise quadratic new objective on x\u03031. When eliminating x\u03031, the problem will have a similar form as (23) but with a piecewise quadratic in place of (23a). Nevertheless, x\u0303\u22171(x\u03032) will still result be piecewise linear solution as is a well-known result in parametric QP literature.\nWhile the computational complexity of variable elimination for TOPP is exactly identical to [16] (3 trivial LPs for\neach timestep), the worst-case computational complexity for quadratic objectives will be worse because the number of segments in the piecewise quadratic objectives when eliminating x\u0303k could be at most \u2211k\u22121 j=0 Ij + 1 where Ij denotes the number of inequality constraints on x\u0303j in the original problem. In practice, however, we found that the number of segments in each piecewise quadratic objective typically did not grow with problem size thus maintaining linear time complexity with respect to the number of timesteps."
        },
        {
            "heading": "III. EXPERIMENTAL RESULTS",
            "text": "To experimentally validate our algorithm, we implement a C++ version of our algorithm [19] to analyze runtime then apply it to a cable robot to demonstrate the efficacy of quadratic objectives over the time-optimal objective."
        },
        {
            "heading": "A. Runtime",
            "text": "To validate the runtime and complexity of our algorithm, we implement a C++ version of our algorithm and compare it to the state-of-the-art TOPP-RA algorithm [20] on a sample problem with varying problem size.\nAs shown in Figure 7, our implementation is lineartime and has similar speed to TOPP-RA. We test a simple problem: xk+1 = xk+(0.5)uk with constraint xk+uk \u2264 0.1. The results are identical to 7 decimal places. Although TOPP-RA appears to have a super-linear runtime, in most applications a few hundred timesteps is sufficient so submillisecond timing is expected from both algorithms.\nFigure 8 shows that the runtime, even with quadratic objectives, remains linear with problem size. Figure 9 further evidences this fact by showing that the number of inequalities carried forward from each time step remains roughly constant throughout the optimization. Objectives x2N + \u2211 x2k + u 2 k were added to the problem above to generate these results. As discussed in Section II-C, completely general quadratic objectives are supported."
        },
        {
            "heading": "B. Cable-Driven Parallel Robot Application",
            "text": "Operating at control limits for prolonged periods is often undesirable for reasons such as safety, wear and tear, noise,\nand energy consumption. In such cases, it is preferable to balance multiple objectives such as matching a desired speed while also minimizing control effort.\nThis is especially true for cable robots, which have inherently low stiffness maintained primarily through internal tension. Approaching control limits necessarily diminishes the possible amount of internal tension causing reduced stability and increased risk of cable slackening. In this section, we formulate the a quadratic objective retiming problem for a cable robot path tracking problem, then quantitatively and qualitatively show results running on a real robot.\n1) Formulating the Cable Robot Tracking Problem: Due to the nature of cable-driven parallel robots, it makes most sense to define the path tracking problem in the task space rather than the joint space. Just as serial manipulators can express task space constraints in the joint space via the Jacobian (but the other direction is more difficult), cable robots can express joint space constraints in the task space via the wrench matrix, W : defined by F = Wt implying q\u0307 = W T x\u0307, where F ,W , t, x\u0307 denote the force on the end-effector, wrench matrix, cable tensions, and task space velocity, respectively. Computing feasible polytopes C (s) := {F : \u2203t \u2208 [t\u2212, t+] s.t. F = W (s)t}, we define then our standard dynamics and constraints in the form (note: vector\nx is distinct from scalar x):\nA(s)x\u0308+ x\u0307TB(s)x\u0307+ f(s) \u2208 C (s) (29a) Av(s)x\u0307+ fv(s) \u2208 C v(s). (29b)\nWe then apply the process in Section II-A to convert to (7). For objectives, we seek to match a setpoint speed using objective q\u2032 \u2225\u2225x\u0307T x\u0307\u2212 v2d\u2225\u22252 and maximize motor torque margin using objective r \u2225F \u2212Wtm\u22252, where q\u2032, r are weighting factors, vd is the desired speed, and tm is the arithmetic mean of the minimum and maximum allowable tensions, similar to [10], [21]. These can be expressed as:\nq \u2225x\u2212 xd\u22252 + r \u2225Au+Bx+C \u2032\u2225 2 (30)\nwith q := q\u2032 \u2225x\u2032\u22254, xd := v2d/ \u2225x\u2032\u2225 2, x\u2032 denotes the derivative of x with respect to s, and A,B,C \u2032 are the same coefficients as in the equations of motion except subtracting off Wtm. These can, in turn, be combined to form a single quadratic objective in the form Qkx\u03032k + Rku\u0303 2 k + Nkx\u0303ku\u0303k, computed by software. Note we still keep (29) for safety."
        },
        {
            "heading": "C. Robot behavior with QOPP vs TOPP",
            "text": "We solve the cable robot path tracking problem for a 2m/s star-shaped trajectory with 1000 discretization points. Figs. 2 and 10 show the solution and execution result, respectively. Tracking error measured with OptiTrack Motion Capture."
        },
        {
            "heading": "IV. DISCUSSION",
            "text": "By extending the trajectory retiming problem to a wider domain, we potentially open opportunities for sharing techniques with the broader trajectory optimization community.\nOne such opportunity is to generalize to arbitrary nonlinear objectives by employing an SQP strategy in which a nonlinear optimization problem is repeatedly approximated as a QP problem over a step direction [15]. This linear-time algorithm is specific to the scalar structure of the problem, so specialized trajectory retiming solvers may outperform general solvers even for complicated objectives.\nAnother opportunity is to perform trajectory optimization with alternating path and retiming optimizations. Whereas time-optimal retiming would not apply due to differing objectives, introducing quadratic objectives brings us closer to sharing the same objectives, which would enable semidecoupled approaches. GTDynamics also uses GTSAM and uses a time-scaling variable. Experiments in variable ordering have suggested such an approach may be promising [22]."
        },
        {
            "heading": "V. CONCLUSIONS AND FUTURE WORKS",
            "text": "In this work, we proposed a linear time algorithm for solving trajectory retiming problems with quadratic objectives (QOPP). We discussed some applications of quadratic objectives, such as balancing objectives of fast speed and keeping distance from control limits for improving safety and robot wear. We described the algorithm by first reinterpreting TOPP-RA using factor graphs, then extending the factor graph algorithm to handle quadratic objectives. Finally, we experimentally validated our algorithm\u2019s runtime and performance improvement on a cable robot path tracking problem.\nAPPENDIX\nIn this section we provide a brief introduction to factor graph variable elimination for optimal control.\nFor readers new to Factor Graph Variable Elimination:\nThink of factor graph variable elimination as a graphical representation for the process of solving optimization problems \u201cone variable at a time\u201d. The optimal value for that variable is given as a function of the other variables still in the problem, and a new optimization problem is created by substituting the optimal value for that variable into the original problem. A key detail is that only the variables that share a factor with the eliminated variable are involved in the elimination process, thereby exploiting the sparsity of the problem automatically. This process is repeated until only one variable remains, at which point the solution is returned.\nMore formally, an optimization problem can be described with a factor graph by denoting each of the variables to be optimized as a \u201cvariable\u201d node and each of the optimization objective terms and constraints as a \u201cfactor\u201d node, where an edge connects each variable a factor depends on (see Fig. 3 as an example). Then to solve the optimization problem, the variable elimination algorithm \u201celiminates\u201d (solves) one variable, x, at a time, passing its constraints and objective terms as a new factor on the separator, S(x): the set of variables sharing a factor with the eliminated variable. More complete descriptions of factor graph elimination for solving optimal control problems can be found in [10], [23], [24].\nGTSAM [25] is a mature C++ software library that implements factor graph variable elimination, including with quadratic objectives and linear equality constraints. Architecturally, it allows easy extension to handle additional factor types, such as inequality constraints, which we do later in this paper. Clickable link back to II-B.\nFor readers familiar with factor graphs (especially GTSAM):\nConsider that a factor with \u201czero-covariance\u201d is a constraint. Then, for example, a graph containing only Gaussian factors is equivalent to solving an equality-constrained linear least squares problem. Please refer to [23] for additional details, which we extend in this paper to handle inequality constraints on scalar variables for certain problem structures."
        }
    ],
    "title": "Generalizing Trajectory Retiming to Quadratic Objective Functions",
    "year": 2023
}