{
    "abstractText": "Wepresent a newFPTAS for the Subset Sum Ratio problem,which, given a set of integers, asks for two disjoint subsets such that the ratio of their sums is as close to 1 as possible. Our schememakes use of exact and approximate algorithms for Partition, and clearly showcases the close relationship between the two algorithmic problems. Depending on the relationship between the size of the input set n and the error margin \u03b5, we improve upon the best currently known algorithm of Melissinos and Pagourtzis [COCOON 2018] of complexityO(n4/\u03b5). In particular, the exponent of n in our proposed scheme may decrease down to 2, depending on the Partition algorithm used.",
    "authors": [
        {
            "affiliations": [],
            "name": "Giannis Alonistiotis"
        },
        {
            "affiliations": [],
            "name": "Antonis Antonopoulos"
        },
        {
            "affiliations": [],
            "name": "Nikolaos Melissinos"
        },
        {
            "affiliations": [],
            "name": "Aris Pagourtzis"
        },
        {
            "affiliations": [],
            "name": "Stavros Petsalakis"
        },
        {
            "affiliations": [],
            "name": "\u00b7Manolis Vasilakis"
        }
    ],
    "id": "SP:efb709981ec6f7e0d477416aae36e21ff8c8b7c6",
    "references": [
        {
            "authors": [
                "A. Abboud",
                "K. Bringmann",
                "D. Hermelin",
                "D. Shabtay"
            ],
            "title": "Seth-based lower bounds for subset sum and bicriteria path",
            "venue": "ACM Trans. Algorithms 18(1), 6\u20131622",
            "year": 2022
        },
        {
            "authors": [
                "G. Alonistiotis",
                "A. Antonopoulos",
                "N. Melissinos",
                "A. Pagourtzis",
                "S. Petsalakis",
                "M. Vasilakis"
            ],
            "title": "Approximating subset sum ratio via subset sum computations",
            "venue": "Combinatorial Algorithms - 33rd International Workshop, IWOCA 2022. Lecture Notes in Computer Science, vol. 13270, pp. 73\u201385. Springer, Cham",
            "year": 2022
        },
        {
            "authors": [
                "A. Antonopoulos",
                "A. Pagourtzis",
                "S. Petsalakis",
                "M. Vasilakis"
            ],
            "title": "Faster algorithms for k-subset sum and variations",
            "venue": "J. Comb. Optim. 45(1), 24",
            "year": 2023
        },
        {
            "authors": [
                "P. Austrin",
                "P. Kaski",
                "M. Koivisto",
                "J. Nederlof"
            ],
            "title": "Dense subset summay be the hardest",
            "venue": "33rd Symposium on Theoretical Aspects of Computer Science, STACS 2016. LIPIcs, vol. 47, pp. 13\u201311314. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, Dagstuhl, Germany",
            "year": 2016
        },
        {
            "authors": [
                "P. Austrin",
                "P. Kaski",
                "M. Koivisto",
                "J. Nederlof"
            ],
            "title": "Subset sum in the absence of concentration",
            "venue": "32nd International Symposium on Theoretical Aspects of Computer Science, STACS 2015. LIPIcs, vol. 30, pp. 48\u201361. Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, Dagstuhl, Germany",
            "year": 2015
        },
        {
            "authors": [
                "C. Bazgan",
                "M. Santha",
                "Z. Tuza"
            ],
            "title": "Efficient approximation algorithms for the SUBSET-SUMSEQUALITY problem",
            "venue": "J. Comput. Syst. Sci. 64(2), 160\u2013170",
            "year": 2002
        },
        {
            "authors": [
                "R.E. Bellman"
            ],
            "title": "Dynamic Programming",
            "venue": "Princeton University Press, Princeton",
            "year": 1957
        },
        {
            "authors": [
                "K. Bringmann",
                "V. Nakos"
            ],
            "title": "A fine-grained perspective on approximating subset sum and partition",
            "venue": "Proceedings of the 2021 ACM-SIAM symposium on discrete algorithms, SODA 2021, pp. 1797\u20131815. SIAM, USA",
            "year": 2021
        },
        {
            "authors": [
                "K. Bringmann",
                "V. Nakos"
            ],
            "title": "Top-k-convolution and the quest for near-linear output-sensitive subset sum",
            "venue": "Proccedings of the 52nd Annual ACM SIGACT Symposium on Theory of Computing, STOC 2020, pp. 982\u2013995. ACM, New York, NY, USA",
            "year": 2020
        },
        {
            "authors": [
                "K. Bringmann"
            ],
            "title": "A near-linear pseudopolynomial time algorithm for subset sum",
            "venue": "Proceedings of the twenty-eighth annual ACM-SIAM symposium on discrete algorithms, SODA 2017, pp. 1073\u20131084. SIAM, USA",
            "year": 2017
        },
        {
            "authors": [
                "M. Cieliebak",
                "S.J. Eidenbenz",
                "A. Pagourtzis"
            ],
            "title": "Composing equipotent teams",
            "venue": "Fundamentals of computation theory, 14th international symposium, FCT 2003. Lecture Notes in Computer Science, vol. 2751, pp. 98\u2013108. Springer, Berlin, Heidelberg",
            "year": 2003
        },
        {
            "authors": [
                "M. Cieliebak",
                "S.J. Eidenbenz",
                "P. Penna"
            ],
            "title": "Noisy data make the partial digest problem NP-hard",
            "venue": "Algorithms in bioinformatics, third international workshop, WABI 2003. Lecture Notes in Computer Science, vol. 2812, pp. 111\u2013123. Springer, Berlin, Heidelberg",
            "year": 2003
        },
        {
            "authors": [
                "M. Cieliebak",
                "S.J. Eidenbenz"
            ],
            "title": "Measurement errors make the partial digest problem np-hard",
            "venue": "LATIN 2004: theoretical informatics, 6th Latin American symposium. Lecture Notes in Computer Science, vol. 2976, pp. 379\u2013390. Springer, Berlin, Heidelberg",
            "year": 2004
        },
        {
            "authors": [
                "M. Cieliebak",
                "S.J. Eidenbenz",
                "A. Pagourtzis",
                "K. Schlude"
            ],
            "title": "On the complexity of variations of equal sum subsets",
            "venue": "Nord. J. Comput. 14(3), 151\u2013172",
            "year": 2008
        },
        {
            "authors": [
                "M. Cygan",
                "M. Mucha",
                "K. Wegrzycki",
                "M. Wlodarczyk"
            ],
            "title": "On problems equivalent to (min, +)-convolution",
            "venue": "ACM Trans. Algorithms 15(1), 14\u201311425",
            "year": 2019
        },
        {
            "authors": [
                "M. Deng",
                "C. Jin",
                "X. Mao"
            ],
            "title": "Approximating knapsack and partition via dense subset sums",
            "venue": "Proceedings of the 2023 ACM-SIAM symposium on discrete algorithms, SODA 2023, pp. 2961\u20132979. SIAM, USA",
            "year": 2023
        },
        {
            "authors": [
                "P. Dutta",
                "M.S. Rajasree"
            ],
            "title": "Algebraic algorithms for variants of subset sum",
            "venue": "Algorithms and Discrete Applied Mathematics - 8th International Conference, CALDAM 2022. Lecture Notes in Computer Science, vol. 13179, pp. 237\u2013251. Springer, Cham",
            "year": 2022
        },
        {
            "authors": [
                "E. Horowitz",
                "S. Sahni"
            ],
            "title": "Computing partitions with applications to the knapsack problem",
            "venue": "J. ACM 21(2), 277\u2013292",
            "year": 1974
        },
        {
            "authors": [
                "R.M. Karp"
            ],
            "title": "Reducibility among combinatorial problems",
            "venue": "Proceedings of a symposium on the complexity of computer computations. The IBM Research Symposia Series, pp. 85\u2013103. Springer, Boston, MA",
            "year": 1972
        },
        {
            "authors": [
                "H. Kellerer",
                "R. Mansini",
                "U. Pferschy",
                "M.G. Speranza"
            ],
            "title": "An efficient fully polynomial approximation scheme for the subset-sum problem",
            "venue": "J. Comput. Syst. Sci. 66(2), 349\u2013370",
            "year": 2003
        },
        {
            "authors": [
                "M.A. Khan"
            ],
            "title": "Some problems on graphs and arrangements of convex bodies",
            "venue": "PRISM",
            "year": 2017
        },
        {
            "authors": [
                "K. Koiliaris",
                "C. Xu"
            ],
            "title": "Faster pseudopolynomial time algorithms for subset sum",
            "venue": "ACM Trans. Algorithms 15(3), 40\u201314020",
            "year": 2019
        },
        {
            "authors": [
                "R.J. Lipton",
                "E. Markakis",
                "E. Mossel",
                "A. Saberi"
            ],
            "title": "On approximately fair allocations of indivisible goods",
            "venue": "Proceedings of the 5th ACM conference on electronic commerce (EC-2004), pp. 125\u2013131. ACM, New York, NY, USA",
            "year": 2004
        },
        {
            "authors": [
                "N. Melissinos",
                "A. Pagourtzis"
            ],
            "title": "A faster FPTAS for the subset-sums ratio problem",
            "venue": "Computing and Combinatorics\u201424th International Conference, COCOON 2018. Lecture Notes in Computer Science, vol. 10976, pp. 602\u2013614. Springer, Cham",
            "year": 2018
        },
        {
            "authors": [
                "N. Melissinos",
                "A. Pagourtzis",
                "T. Triommatis"
            ],
            "title": "Approximation schemes for subset-sums ratio problems",
            "venue": "Theor. Comput. Sci. 931, 17\u201330",
            "year": 2022
        },
        {
            "authors": [
                "M. Mucha",
                "J. Nederlof",
                "J. Pawlewicz",
                "K. Wegrzycki"
            ],
            "title": "Equal-subset-sum faster than the meet-in-themiddle",
            "venue": "27th annual european symposium on algorithms, ESA 2019. LIPIcs, vol. 144, pp. 73\u201317316",
            "year": 2019
        },
        {
            "authors": [
                "M. Mucha",
                "K. Wegrzycki",
                "M. Wlodarczyk"
            ],
            "title": "A subquadratic approximation scheme for partition",
            "venue": "Proceedings of the thirtieth annual ACM-SIAM symposium on discrete algorithms, SODA 2019, pp. 70\u201388. SIAM, USA",
            "year": 2019
        },
        {
            "authors": [
                "D. Nanongkai"
            ],
            "title": "Simple FPTAS for the subset-sums ratio problem",
            "venue": "Inf. Process. Lett. 113(19\u201321), 750\u2013753",
            "year": 2013
        },
        {
            "authors": [
                "C.H. Papadimitriou"
            ],
            "title": "On the complexity of the parity argument and other inefficient proofs of existence",
            "venue": "J. Comput. Syst. Sci. 48(3), 498\u2013532",
            "year": 1994
        },
        {
            "authors": [
                "D. Pisinger"
            ],
            "title": "Linear time algorithms for knapsack problems with bounded weights",
            "venue": "J. Algorithms 33(1), 1\u201314",
            "year": 1999
        },
        {
            "authors": [
                "N. Voloch"
            ],
            "title": "Mssp for 2-d sets with unknown parameters and a cryptographic application",
            "venue": "Contemp. Eng. Sci. 10, 921\u2013931",
            "year": 2017
        },
        {
            "authors": [
                "G.J. Woeginger",
                "Z. Yu"
            ],
            "title": "On the equal-subset-sum problem",
            "venue": "Inf. Process. Lett. 42(6), 299\u2013302",
            "year": 1992
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "One of Karp\u2019s 21 NP-complete problems [20], Subset Sum has seen astounding progress over the last few years. Koiliaris and Xu [23], Bringmann [10] and Jin and Wu [19] have\nB Aris Pagourtzis pagour@cs.ntua.gr\nGiannis Alonistiotis ialonistiotis@corelab.ntua.gr\nAntonis Antonopoulos aanton@corelab.ntua.gr\nNikolaos Melissinos nikolaos.melissinos@fit.cvut.cz\nStavros Petsalakis spetsalakis@corelab.ntua.gr\nManolis Vasilakis emmanouil.vasilakis@dauphine.eu\n1 School of Electrical and Computer Engineering, National Technical University of Athens, 15780 Zografou, Greece\n2 Department of Theoretical Computer Science, Faculty of Information Technology, Czech Technical University in Prague, Prague, Czech Republic\n3 Archimedes Unit, Athena Research Center, 15125 Marousi, Greece\n4 Universit\u00e9 Paris-Dauphine, CNRS UMR7243, LAMSADE, PSL University, 75016 Paris, France\npresented pseudopolynomial algorithms resulting in substantial improvements over the longstanding standard approach of Bellman [7] and the improvement by Pisinger [31]. Moreover, the latter two algorithms [10, 19] match the SETH-based lower bounds proved in [1]. Additionally, recently there has been progress in the approximation scheme of Subset Sum, the first such improvement in over 20 years, with a new algorithm introduced by Bringmann and Nakos [8], as well as corresponding lower bounds obtained through the lens of fine-grained complexity.\nA thoroughly studied special case of Subset Sum is the Partition problem, which asks for a partition of the input set to two subsets such that the difference of their sums isminimum. Any algorithm solving the first applies to the latter, though recent progress [8, 16, 28] has shown that Partition may be solved more efficiently in the approximation setting. On the other hand, regarding exact solutions, no better algorithm has been developed, therefore Subset Sum algorithms remain the state of the art.\nThe Equal Subset Sum problem, which, given an input set, asks for two disjoint subsets of equal sum, is closely related to Subset Sum and Partition. It finds applications in multiple different fields, ranging from computational biology [12, 13] and computational social choice [24], to cryptography [32], to name a few. In addition, it is related to important theoretical concepts such as the complexity of search problems in the class TFNP [30].\nThe centerpiece of this paper is the Subset Sum Ratio problem, the optimization version of Equal Subset Sum, which asks, given an input set S \u2286 N, for two disjoint subsets S1, S2 \u2286 S, such that the following ratio is minimized\nmax {\u2211 si\u2208S1 si , \u2211 s j\u2208S2 s j } min {\u2211 si\u2208S1 si , \u2211 s j\u2208S2 s j } .\nThis problem is known to be NP-hard, and many FPTASes have been proposed over the years [6, 25, 29], all of which rely on some kind of scaling of the input elements. The current state of the art [25] achieves a running time of O(n4/\u03b5), leaving a significant gap in comparison with known approximation algorithms for the closely related Subset Sum and Partition problems, especially with respect to n. This leads to the natural question of whether we can improve this performance and achieve an FPTAS with a running time O(nc1/\u03b5c2), where either c1 < 4 or c1 + c2 < 5. We manage to answer both questions in the affirmative, by presenting a novel approximation schemewhich utilizes exact or approximate Partition algorithms and achieves running time1 O\u0303(n2.3/\u03b52.6) or O\u0303(n2/\u03b53) respectively. Our proposed algorithm significantly differs from previous approaches while it is the first to associate these closely related problems."
        },
        {
            "heading": "1.1 Related work",
            "text": "Equal Subset Sum as well as its optimization version called Subset Sum Ratio[6] are closely related to problems appearing in many scientific areas. Some examples include the Partial Digest problem, which comes from computational biology [12, 13], the allocation of individual goods [24], tournament construction [22], and a variation of Subset Sum, called Multiple Integrated Sets SSP, which finds applications in the field of cryptography [32]. Furthermore, it is related to important concepts in theoretical computer science; for example, a restricted version of Equal Subset Sum lies in a subclass of the complexity\n1 Standard O and O\u0303 notation is used to hide polynomial and polylogarithmic factors respectively.\nclass TFNP, namely in PPP [30], a class consisting of search problems that always have a solution due to some pigeonhole argument, and no polynomial time algorithm is known for this restricted version.\nEqual Subset Sum has been proven NP-hard by Woeginger and Yu [33] (see also the full version of [27] for an alternative proof) and several variations have been proven NPhard by Cieliebak et al. [11, 14]. A 1.324-approximation algorithm has been proposed for Subset Sum Ratio in [33] and several FPTASes appeared in [6, 25, 29], the fastest so far being the one in [25] of complexityO(n4/\u03b5), the complexity of which also applies to various meaningful special cases, as shown in [26].\nAs far as exact algorithms are concerned, recent progress has shown that Equal Subset Sum can be solved probabilistically in O (1.7088n) time [27], faster than a standard \u201cmeetin-the-middle\u201d approach yielding an O (3n/2) \u2264 O (1.7321n) time algorithm.\nThese problems are tightly connected to Subset Sum, which has seen impressive advances recently, due to Koiliaris and Xu [23] who gave a deterministic O\u0303(\u221ant) algorithm, where n is the number of input elements and t is the target, and Bringmann [10] who gave a O\u0303(n+t) randomized algorithm, which is essentially optimal under SETH [1]. See also [3] for an extension of these algorithms to a more general setting. Jin and Wu subsequently proposed a simpler randomized algorithm [19] achieving the same bounds as [10], which however seems to only solve the decision version of the problem. Recently, Bringmann and Nakos [9] have presented an O (|St (Z)|4/3poly(log t) ) algorithm, where St (Z) is the set of all subset sums of the input set Z that are smaller than t , based on top-k convolution. Partition shares the complexity of Subset Sum regarding exact solutions, where the\nmeet-in-the-middle approach [18] from the 70\u2019s remains the state of the art as far as algorithms dependent on n are concerned. On the other hand, one can approximate Partition more efficiently than Subset Sum unless the min-plus convolution conjecture [15] is false. In particular, Bringmann and Nakos [8] have presented the first improvement for the latter in over 20 years, since the scheme of [21] had remained the state of the art. Moreover, in their paper they have shown that developing a significantly better algorithm would contradict said conjecture. Furthermore, they develop an approximation scheme for Partition utilizing min-plus convolution computations, improving upon the recent work ofMucha et al. [28] and circumventing the lower bounds established for Subset Sum in their work. Very recently, Deng, Jin and Mao [16] presented an even faster approximation algorithm for Partition, further widening the gap between the complexities of both problems in the approximation setting."
        },
        {
            "heading": "1.2 Our contribution",
            "text": "We present a novel approximation scheme for the Subset Sum Ratio problem, which, dependingon the relationship betweenn and \u03b5, improves upon the best existing approximation scheme of [25]. Our algorithm significantly differs from previous approaches, which in most cases rely on some kind of scaling of the input elements, and insteadmakes use of either exact or approximation algorithms for Partition. In particular, we first partition the input elements into small and large, and then prove that we can either easily find an approximate solution involving only large elements or there are atmost log(n/\u03b52) of them. In the latter case, in order to approximate Subset Sum Ratio it suffices to solve instances of Partition on all the subsets of large elements, i.e., polynomially many instances, each of size at most log(n/\u03b52). By leveraging known Partition algorithms in the second case, we manage to improve upon previous FPTASes. In the case of exact computations, we show that by employing\nsuch a Partition algorithm of complexity O (2\u03b1n), our proposed scheme runs in time O\u0303(n \u00b7 (n/\u03b52)log(1+2\u03b1)), for some constant \u03b1 > 0. It is already known that such an algorithm exists for \u03b1 = 1/2 [18], and any further improvements will positively affect our FPTAS. On the other hand, using the approximation algorithm of Kellerer et al. [21] we achieve a running time of O\u0303(n2/\u03b53), while any improvement over it (e.g., [8, 16]) will only affect polylogarithmic factors of our scheme, as is further discussed in Sect. 5.\nWe start by presenting some necessary background in Sect. 2. Afterward, in Sect. 3 we introduce an FPTAS for a restricted version of the problem. Then, in Sect. 4, we explain how to make use of the algorithm presented in Sect. 3, in order to obtain an approximation scheme for the Subset Sum Ratio problem. The complexity of the final scheme is thoroughly analyzed in Sect. 5, followed by some possible directions for future research in Sect. 6. Priorwork In the current paperwe improve upon the results of the preliminary version [2], by using approximate and exact Partition algorithms instead of Subset Sum computations."
        },
        {
            "heading": "2 Preliminaries",
            "text": "Let, for x \u2208 N, [x] = {z \u2208 N | 1 \u2264 z \u2264 x} denote the set of integers in the interval [1, x]. Given a set S \u2286 N, denote its largest element by max(S) and the sum of its elements by (S) = \u2211s\u2208S s. If we are additionally given a value \u03b5 \u2208 (0, 1), define the following partition of its elements:\n\u2022 The set of its large elements as L(S, \u03b5) = {s \u2208 S | s \u2265 \u03b5 \u00b7 max(S)}. Note that max(S) \u2208 L(S, \u03b5), for any \u03b5 \u2208 (0, 1).\n\u2022 The set of its small elements as M(S, \u03b5) = {s \u2208 S | s < \u03b5 \u00b7 max(S)}. In the following, since the values of the associated parameters will be clear from the context, they will be omitted and we will refer to these sets simply as L and M .\nDefinition 1 (Partition) Given a set X , compute a subset X\u2217p \u2286 X , such that (X\u2217p) = max { (Z) | Z \u2286 X , (Z) \u2264 (X)/2}. Moreover, let X\u2217p = X\\X\u2217p . Definition 2 (Approximate Partition, from [28]) Given a set X and errormargin \u03b5, compute a subset X p \u2286 X such that (1\u2212\u03b5) \u00b7 (X\u2217p) \u2264 (X p) \u2264 (X\u2217p). Moreover, let X p = X \\X p ."
        },
        {
            "heading": "3 Scheme for a restricted version",
            "text": "In this section, we present an FPTAS for the constrained version of the Subset Sum Ratio problem where we are only interested in approximating solutions that involve the largest element of the input set. In other words, one of the subsets of the optimal solution contains max(A) = an (assuming that A = {a1, . . . , an} is the sorted input set); let ropt denote the subset sum ratio of such an optimal solution. Our FPTAS will return a solution of ratio r , such that 1 \u2264 r \u2264 (1 + \u03b5) \u00b7 ropt, for a given error margin \u03b5 \u2208 (0, 1); however, we allow that the sets of the returned solution do not necessarily satisfy the aforementioned constraint (i.e., an may not be involved in the approximate solution)."
        },
        {
            "heading": "3.1 Outline of the algorithm",
            "text": "We now present a rough outline of Algorithm 1:\n\u2022 At first, we search for approximate solutions involving exclusively large elements from L(A, \u03b5). \u2022 To this end, we produce the subset sums formed by these large elements. If their number exceeds n/\u03b52, then we can find an approximate solution. \u2022 Otherwise, there are at most n/\u03b52 subsets of large elements. In this case, we can find a solution by running an exact or an approximate Partition algorithm for each subset. \u2022 In the case that the optimal solution involves small elements, we show that it suffices to add elements of M(A, \u03b5) in a greedy way.\nAlgorithm 1 ConstrainedSSR(A, \u03b5, T ) Input : Set A = {a1, . . . , an}, error margin \u03b5 and table of partial sums T . Output : (1 + \u03b5)-apx of the optimal solution respecting the constraint. 1: Partition A to M = {ai \u2208 A | ai < \u03b5 \u00b7 an} and L = {ai \u2208 A | ai \u2265 \u03b5 \u00b7 an}. 2: Split interval [0, n \u00b7 an ] to n/\u03b52 bins of size \u03b52 \u00b7 an . 3: while filling the bins with the subset sums of L do 4: if two subset sums correspond to the same bin then 5: return an apx solution based on these. O(n/\u03b52) complexity. 6: end if 7: end while 8: 2|L| \u2264 n/\u03b52 \u21d0\u21d2 |L| \u2264 log(n/\u03b52). 9: for each subset of large elements containing an do O(n/\u03b52) subsets. 10: Solve corresponding Partition instance. Complexity in Section 5. 11: Add small elements. O(log n) complexity, see Section 3.3. 12: end for"
        },
        {
            "heading": "3.2 Solution involving exclusively large elements",
            "text": "We firstly search for a (1+\u03b5)-approximate solution with \u03b5 \u2208 (0, 1), without involving any of the elements that are smaller than \u03b5 \u00b7 an . Let M = {ai \u2208 A | ai < \u03b5 \u00b7 an} be the set of small elements and L = A\\M = {ai \u2208 A | ai \u2265 \u03b5 \u00b7 an} be the set of large elements.\nAfter partitioning the input set, we split the interval [0, n \u00b7an] into smaller intervals, called bins, of size l = \u03b52 \u00b7 an each, as depicted in Fig. 1.\nThus, there are a total of B = n/\u03b52 bins. Notice that each possible subset of the input set will belong to a respective bin constructed this way, depending on its sum. Additionally, if two sets correspond to the same bin, then the difference of their subset sums will be at most l.\nThe next step of our algorithm is to generate all the possible subset sums, occurring from the set of large elements L . The complexity of this procedure is O (2|L|), where |L| is the cardinality of set L . Notice however, that it is possible to bound the number of the produced subset sums by the number of bins B, since if two sums belong to the same bin they constitute a solution, as shown in Lemma 1, in which case the algorithm terminates in time O(n/\u03b52).\nLemma 1 If two subsets correspond to the same bin, we can find a (1 + \u03b5)-approximation solution.\nProof Suppose there exist two sets L1, L2 \u2286 L whose sums correspond to the same bin, with (L1) \u2264 (L2). Notice that there is no guarantee regarding the disjointness of said subsets, thus consider L \u20321 = L1 \\ L2 and L \u20322 = L2\\L1, for which it is obvious that (L \u20321) \u2264 (L \u20322). Additionally, assume that L \u20321 = \u2205. Then it holds that (L \u20322) \u2212 (L \u20321) = (L2) \u2212 (L1) \u2264 l. Therefore, the sets L \u20321 and L \u20322 constitute a (1 + \u03b5)-approximation solution, since\n(L \u20322) (L \u20321) \u2264 (L \u2032 1) + l (L \u20321) = 1 + l (L \u20321)\n\u2264 1 + \u03b5 2 \u00b7 an \u03b5 \u00b7 an = 1 + \u03b5\nwhere the last inequality is due to the fact that L \u20321 \u2286 L is composed of elements \u2265 \u03b5 \u00b7 an , thus (L \u20321) \u2265 \u03b5 \u00b7 an .\nIt remains to show that L \u20321 = \u2205. Assume that L \u20321 = \u2205. This implies that L1 \u2286 L2 and since we consider each subset of L only once and the input is a set and not a multiset, it holds that L1 \u2282 L2 \u21d2 L \u20322 = \u2205. Since L1 and L2 correspond to the same bin, it holds that (L2) \u2212 (L1) \u2264 l \u21d2 (L \u20322) \u2212 (L \u20321) \u2264 l \u21d2 (L \u20322) \u2264 l which is a contradiction, since L \u20322 is a non empty subset of L , which is comprised of elements greater than or equal to \u03b5 \u00b7 an , hence (L \u20322) \u2265 \u03b5 \u00b7 an > \u03b52 \u00b7 an = l, since \u03b5 < 1.\nConsider an \u03b5\u2032 such that (1+ \u03b5\u2032)/(1\u2212 \u03b5\u2032) \u2264 1+ \u03b5 for all \u03b5 \u2208 (0, 1) (the exact value of \u03b5\u2032 will be computed in Sect. 5).\nIf every produced subset sum of the previous step belongs to a distinct bin, then, we can infer that the number of subsets of large elements is bounded by n/\u03b52. Moreover, we can prove the following lemma.\nLemma 2 If the optimal ratio ropt involves sets S\u22171 , S\u22172 consisting of only large elements, with S\u22171 \u222a S\u22172 = S\u2217 \u2286 L and an \u2208 S\u2217, then (Sp)/ (Sp) \u2264 (1 + \u03b5) \u00b7 ropt, where Sp is a (1 \u2212 \u03b5\u2032)-apx solution to the Partition problem on input S\u2217. Proof Assume that (S\u22171 ) \u2264 (S\u22172 ). Note that sets S\u22171 , S\u22172 are also the optimal solution of the Partition problem on input S\u2217. By running a (1\u2212\u03b5\u2032) approximate Partition algorithm on input set S\u2217, we obtain the sets S1, S2 with (S1) \u2264 (S2), where S1 = Sp and S2 = Sp . Then,\n(S2) (S1) \u2264 (S\n\u2217 2 ) + \u03b5\u2032 \u00b7 (S\u22171 )\n(1 \u2212 \u03b5\u2032) (S\u22171 ) \u2264 (S \u2217 2 ) + \u03b5\u2032 \u00b7 (S\u22172 ) (1 \u2212 \u03b5\u2032) (S\u22171 ) = 1 + \u03b5 \u2032\n1 \u2212 \u03b5\u2032 \u00b7 (S\u22172 ) (S\u22171 )\n\u2264 (1 + \u03b5) \u00b7 ropt where we used the fact that (1\u2212\u03b5\u2032) \u00b7 (S\u22171 ) \u2264 (S1) as well as (S2) \u2264 (S\u22172 )+\u03b5\u2032 \u00b7 (S\u22171 ).\nTherefore, we have proved that when the optimal solution consists of sets comprised of only large elements, it is possible to find a (1+\u03b5)-approximation solution for the constrained Subset Sum Ratio problem by running a (1\u2212\u03b5\u2032)-approximation algorithm for Partition with input the union of said large elements. In order to do so, it suffices to consider as input all the 2|L|\u22121 subsets of L containing an and each time run a (1\u2212 \u03b5\u2032)-approximation Partition algorithm. The total cost of this procedure will be thoroughly analyzed in Sect. 5 and depends on the algorithm used.\nIt is important to note that by utilizing an (exact or approximation) algorithm for Partition, we establish a connection between the complexities of Partition and approximating Subset Sum Ratio in a way that any future improvement in the first carries over to the second.\n3.3 General (1+ \")-approximate solutions\nWhereas we previously considered optimal solutions involving exclusively large elements, here we will search for approximations for those optimal solutions that use all the elements of the input set, hence include small elements, and satisfy our constraint (i.e. an belongs to the optimal solution sets). We will prove that in order to approximate those optimal solutions, it suffices to consider only the (1\u2212 \u03b5\u2032)-apx solutions of the Partition problem corresponding to each subset of large elements and add small elements to them. In other words, instead of considering any two random disjoint subsets consisting of large elements2 and subsequently adding to these the small elements, we can consider only the (1\u2212\u03b5\u2032)-approximate solutions to the Partition problem computed in the previous step, ergo, atmost B = n/\u03b52 configurations regarding the large elements.Moreover, wewill prove that it suffices to add the small elements to our solution in a greedy way.\nSince the algorithm has not detected a solution so far, due to Lemma 1 every computed subset sum of set L belongs to a different bin. Thus, their total number is bounded by the number of bins B, i.e.\n2|L| \u2264 ( n\n\u03b52\n) \u21d0\u21d2 |L| \u2264 log ( n \u03b52 )\nWe proceed by additionally involving small elements into our solutions in order to reduce the difference between the sums of the sets, thus reducing their ratio.\nLemma 3 Assume that we are given the (1 \u2212 \u03b5\u2032)-apx solutions for the Partition problem on every subset of large elements containing an. Then, a (1+ \u03b5)-approximation solution for the constrained version of Subset Sum Ratio can be found, when the optimal solution involves small elements.\nProof Let S\u22171 , S\u22172 be disjoint subsets that form an optimal solution for the constrained version of Subset Sum Ratio, where:\n\u2022 (S\u22171 ) \u2264 (S\u22172 ) and an \u2208 S\u2217 = S\u22171 \u222a S\u22172 .\u2022 S\u22171 = L\u22171 \u222a M\u22171 and S\u22172 = L\u22172 \u222a M\u22172 , where L\u22171, L\u22172 \u2286 L and M\u22171 , M\u22172 \u2286 M .\u2022 M\u22171 \u222a M\u22172 = \u2205. Moreover, let L\u2217p and L\u2217p be the optimal solution of the Partition problem on input L\u2217 = L\u22171 \u222a L\u22172, while L p and L p be the sets returned by a (1 \u2212 \u03b5\u2032)-apx algorithm. Then, it holds that:\n2 Note that the number of these random pairs is 2 \u00b7 3|L|\u22121, since an is necessarily part of the solution.\n\u2022 (L\u2217p) \u2264 (L\u2217p) and (L\u2217p) \u2212 (L\u2217p) \u2264 | (L\u2217\\X) \u2212 (X)|,\u2200X \u2286 L\u2217. \u2022 (1 \u2212 \u03b5\u2032) \u00b7 (L\u2217p) \u2264 (L p) \u2264 (L\u2217p). \u2022 (L\u2217p) \u2264 (L p) \u2264 (L\u2217p) + \u03b5\u2032 \u00b7 (L\u2217p) \u2264 (1 + \u03b5\u2032) \u00b7 (L\u2217p). \u2022 an \u2264 (L\u2217p), since an \u2208 L\u2217.\nCase 1. Suppose that (L p) + (M) \u2265 (L p). In this case, there exists k such that Mk = {ai \u2208 M | i \u2208 [k]} \u2286 M and 0 \u2264 (L p \u222a Mk) \u2212 (L p) \u2264 \u03b5 \u00b7 an , since all elements of M have value less than \u03b5 \u00b7 an . Hence,\n1 \u2264 (L p \u222a Mk) (L p) \u2264 1 + \u03b5 \u00b7 an (L p) \u2264 1 + \u03b5 \u00b7 an an = 1 + \u03b5.\nCase 2. Alternatively, it holds that (L p) + (M) < (L p). Then, (L p)\n(L p \u222a M) = (L p) (L p) + (M)\n\u2264 (1 + \u03b5 \u2032) \u00b7 (L\u2217p)\n(1 \u2212 \u03b5\u2032) \u00b7 (L\u2217p) + (M)\n\u2264 1 + \u03b5 \u2032 1 \u2212 \u03b5\u2032 \u00b7 (L\u2217p)\n(L\u2217p) + (M)\n\u2264 (1 + \u03b5) \u00b7 (L \u2217 p)\n(L\u2217p) + (M) .\nIf (L\u2217p) + (M) \u2265 (L\u2217p), then it follows that (L p) (L p\u222aM) \u2264 1 + \u03b5. On the other hand, if (L\u2217p) + (M) < (L\u2217p), then it follows that (S\u22171 ) = (L\u2217p \u222a M) and (S\u22172 ) = (L\u2217p), therefore (L p)\n(L p\u222aM) \u2264 (1 + \u03b5) \u00b7 (S\u22172 ) (S\u22171 ) ."
        },
        {
            "heading": "3.4 Adding small elements efficiently",
            "text": "Here, we will describe a method to efficiently add small elements to our sets. In particular, we search for some k such that 0 \u2264 (L p \u222a Mk) \u2212 (L p) \u2264 \u03b5 \u00b7 an , where Mk = {ai \u2208 M | i \u2208 [k]}. Notice that if (M) \u2265 (L p) \u2212 (L p), there always exists such a set Mk , since by definition, each element of set M is smaller than \u03b5 \u00b7 an . In order to determine Mk , we make use of an array of partial sums T [k] = (Mk), where k \u2264 |M |. Since T is sorted, we can find k in O(log|L|) = O(log n) using binary search."
        },
        {
            "heading": "4 Final algorithm",
            "text": "The algorithm presented in the previous section constitutes an approximation scheme for Subset Sum Ratio when one of the solution subsets contains the maximum element of the input set. Thus, in order to solve the Subset Sum Ratio problem, it suffices to run the previous algorithm n times, where n depicts the cardinality of the input set A, while each time removing the max element of A.\nIn particular, suppose that the optimal solution involves disjoint sets S\u22171 and S\u22172 , where ak = max(S\u22171 \u222a S\u22172 ). There exists an iteration for which the algorithm considers as input\nthe set Ak = {a1, . . . , ak}. In this iteration, the element ak is the largest element and the algorithm searches for an approximation of the optimal solution for which ak is contained in one of the solution subsets. The optimal solution of the unconstrained version of Subset Sum Ratio has this property so the ratio of the approximate solution that the algorithm of the previous section returns is at most (1 + \u03b5) times the optimal.\nConsequently, n repetitions of the algorithm suffice to construct an FPTAS for Subset Sum Ratio. Notice that if at some repetition, the sets returned due to the algorithm of Sect. 3 have ratio at most 1+ \u03b5, then this ratio successfully approximates the optimal ratio ropt \u2265 1, since 1 + \u03b5 \u2264 (1 + \u03b5) \u00b7 ropt, therefore they constitute an approximate solution.\nAlgorithm 2 SSR(A, \u03b5) Input : Sorted set A = {a1, . . . , an} and error margin \u03b5. Output : (1 + \u03b5)-apx of the optimal solution for Subset Sum Ratio. 1: Create array T such that T [k] = \u2211ki=1 ai . O(n) time. 2: for i = n, . . . , 1 do 3: ConstrainedSSR({a1, . . . , ai } , \u03b5, T ) 4: end for"
        },
        {
            "heading": "5 Complexity",
            "text": "The total complexity of the final algorithm is determined by three distinct operations, over the n iterations of the algorithm:\n1. The cost to compute all the possible subset sums occurring from large elements. It suffices to consider the casewhere this is bounded by the number of bins B = n/\u03b52, due to Lemma 1. 2. The cost to compute an exact or (1\u2212 \u03b5\u2032)-apx Partition solution on each subset of large elements. The cost of this operation will be analyzed in the following subsection.\n3. The cost to include small elements to thePartition solutions. There are B such solutions, and each requires O(log n) time, and thus the total time required is O (\nn \u03b52\n\u00b7 log n ) ."
        },
        {
            "heading": "5.1 Complexity of partition computations",
            "text": "Using exact partition computations\nFirst, we will consider the case where we compute the optimal solution of the Partition problem. In order to do so, we will use the standard meet-in-the-middle algorithm [18] for Subset Sum, and in the following we analyze its complexity.\nLet subset L \u2032 \u2286 L such that |L \u2032| = k, and suppose we are given an exact Partition algorithm of complexity O(2\u03b1k \u00b7 k\u03b2), for some constants \u03b1, \u03b2. Notice that the number of subsets of L of cardinality k is (|L| k ) and that |L| \u2264 log(n/\u03b52). Then, it holds that\n|L|\u2211 k=0 (|L| k ) \u00b7 2\u03b1k \u00b7 k\u03b2 \u2264 |L|\u03b2 \u00b7 |L|\u2211 k=0 (|L| k ) \u00b7 2\u03b1k\n= |L|\u03b2 \u00b7 (1 + 2\u03b1)|L|\n= |L|\u03b2 \u00b7 2|L| log(1+2\u03b1) \u2264 log\u03b2(n/\u03b52) \u00b7 (n/\u03b52)log(1+2\u03b1)\nwhere we used the binomial theorem. By employing the meet in the middle algorithm [18], where \u03b1 = 1/2 and \u03b2 = 1, it follows that log(1+ 2\u03b1) = 1.271 . . . < 1.3. Consequently, the complexity to solve the Partition problem for all the subsets of large elements is\nO ( n1.3\n\u03b52.6 \u00b7 log(n/\u03b52)\n) = O\u0303 ( n1.3\n\u03b52.6\n)\nUsing approximate partition computations\nHere we will analyze the complexity in the case we run an approximate Partition algorithm in order to compute the (1 \u2212 \u03b5\u2032)-approximation solutions.\nFor subset L \u2032 \u2286 L , we run an approximate Partition algorithm with error margin \u03b5\u2032 such that\n1 + \u03b5\u2032 1 \u2212 \u03b5\u2032 \u2264 1 + \u03b5 \u21d0\u21d2 \u03b5 \u2032 \u2264 \u03b5 2 + \u03b5\nand by choosing the maximum such \u03b5\u2032, it holds that\n\u03b5\u2032 = \u03b5 2 + \u03b5 \u21d2 1 \u03b5\u2032 = 2 + \u03b5 \u03b5 = 2 \u03b5 + 1 \u21d2 1 \u03b5\u2032 = O\n( 1\n\u03b5\n)\nSince there are at most n/\u03b52 subsets of large elements, we will need to run said algorithm at most n/\u03b52 times on |L \u2032| \u2264 |L| elements and with error margin \u03b5\u2032.\nNote that any approximate Subset Sum algorithm could be used in order to approximate Partition, such as the one presented by Kellerer et al. [21] of complexity\nO ( min { n \u03b5 , n + 1 \u03b52 \u00b7 log(1/\u03b5) }) . In our case, with |L| = log(n/\u03b52) and error margin \u03b5\u2032, the total complexity is\nO ( n\n\u03b52 \u00b7 min { |L| \u03b5\u2032 , |L| + 1 (\u03b5\u2032)2 \u00b7 log(1/\u03b5\u2032) }) =\nO ( n\n\u03b52 \u00b7 min\n{ log(n/\u03b52)\n\u03b5 , log(n/\u03b52) + 1 \u03b52 \u00b7 log(1/\u03b5)\n}) =\nO\u0303 ( n\n\u03b53\n) .\nUsing the state of the art O\u0303(n+ (1/\u03b5)1.25) algorithm of Deng et al. [16] for approximating Partition, one could, in some cases, further improve the last term of the previous minimum. However, since the Partition instances that we are solving involve |L| = log(n/\u03b52) elements, any improvement resulting from said approximation algorithm would only affect polylogarithmic factors. Due to this, the algorithm of Kellerer et al. has a better performance compared to other Partition approximation algorithms, in case we choose to ignore those factors. On the other hand, if one takes them into account, it might be preferable to use the aforementioned algorithm of Deng et al. (always depending on the relation between n and \u03b5)."
        },
        {
            "heading": "5.2 Total complexity",
            "text": "The total complexity of the algorithm occurs from the n distinct iterations required and depends on the algorithm chosen to find the (exact or approximate) solution to the Partition problem, since all of the presented algorithms dominate the time of the rest of the operations. Thus, by choosing the fastest one (depending on the relationship between n and \u03b5), the final complexity is\nO\u0303 ( min { n2.3\n\u03b52.6 , n2 \u03b53\n})"
        },
        {
            "heading": "6 Conclusion and future work",
            "text": "The main contribution of this paper, apart from the introduction of a new FPTAS for the Subset Sum Ratio problem, is the establishment of a connection between Partition and approximating Subset Sum Ratio. In particular, our scheme employs Partition computations, and any improvement in the latter will have an effect to its complexity.\nAdditionally, we establish that the complexity of approximating Subset Sum Ratio, expressed in the form O\u0303(nc1/\u03b5c2), has c1 < 2.3 and c1 + c2 < 5, which is an improvement over all the previously presented FPTASes for the problem. Moreover, the exponent of n may go down to 2 if we employ approximation Partition algorithms, which is a significant improvement over the O(n4/\u03b5) algorithm of [25].\nIt is important to note however, that there is a distinct limit to the complexity that one may achieve for the Subset Sum Ratio problem using the techniques discussed in this paper, since although of polylogarithmic size, the number of Partition instances required to be solved is O(n2/\u03b52) in total. Consequently, an interesting natural question arising from our work, is whether one can further improve the complexity of the problem, possibly developing a O(nc1/\u03b5c2) algorithm, where c1 < 2 or even c1 + c2 < 4.\nAs another direction for future research, we consider the use of exact Subset Sum or Partition algorithms parameterized by a concentration parameter \u03b2, as described in [4, 5], where they solve the decision version of Subset Sum. See also [17] for a use of this parameter under a pseudopolynomial setting. It would be interesting to investigate whether analogous arguments could be used to solve the optimization version.\nAcknowledgements Work primarily conducted while Nikolaos Melissinos was affiliated with Universit\u00e9 Paris-Dauphine, PSL University, and Manolis Vasilakis was affiliated with the School of Electrical and Computer Engineering, National Technical University of Athens.\nAuthor Contributions All authors had an equal contribution in all parts of the paper. The name order is alphabetical.\nFunding Open access funding provided by HEAL-Link Greece. Aris Pagourtzis has been partially supported by project MIS 5154714 of the National Recovery and Resilience Plan Greece 2.0 funded by the European Union under the NextGenerationEU Program. Aris Pagourtzis and Stavros Petsalakis were supported in part by the PEVE 2020 basic research support program of the National Technical University of Athens. Nikolaos Melissinos is supported by the CTU Global postdoc fellowship program.\nDeclarations\nConflict of interest The authors have no competing interests to declare that are relevant to the content of this article.\nOpen Access This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article\u2019s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article\u2019s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licenses/by/4.0/."
        }
    ],
    "title": "Approximating subset sum ratio via partition computations",
    "year": 2024
}