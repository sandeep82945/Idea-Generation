{
    "abstractText": "IT services and resources on-demand through Internetwork are offered by Cloud Computing (CC), including the pay-for-you-go aspect. A lot is offered by the CC paradigm, such as Infrastructure related services, computing services, storage, and environments for deployment are also provided. The objective of this study is to survey one of the significant challenges in cloud computing, which is a multi-variant, multi-constraint issue termed Load unbalancing, resulting in the demising of the scalability, efficiency, and performance of the system. Equilibrium in the server workload distribution is still strived for by cloud service providers. The unbalancing issue is resolved by load balancing solutions in two ways: overloading and underloading. An extensive structural literature analysis of Load balancing and its constituent domains with the inclusion of various parameters, such as scalability, make-span, and throughput, are depicted in this research paper to enhance the QoS. A detailed and organized taxonomy of all the Load balancing algorithms based on nature system state, techniques, functionality, and types is also presented. The major focus of the survey is around the Static, dynamic, hybrid, and nature-inspired LoadBalancing algorithms. INDEX TERMS Virtual-Machine, Cloud Computing, Migration, Scheduling, ACO, PSO, Load-Balancing.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yogesh Lohumi"
        },
        {
            "affiliations": [],
            "name": "Durgaprasad Gangodkar"
        },
        {
            "affiliations": [],
            "name": "Prakash Srivastava"
        },
        {
            "affiliations": [],
            "name": "Mohammad Zubair Khan"
        },
        {
            "affiliations": [],
            "name": "Abdulrahman Alahmadia"
        }
    ],
    "id": "SP:5bdbb9f24784b4e4e46c2b5fd681d32e618db17b",
    "references": [
        {
            "authors": [
                "R. Buyya"
            ],
            "title": "Introduction to the IEEE transactions on cloud computing,",
            "venue": "IEEE Trans. Cloud Comput.,",
            "year": 2013
        },
        {
            "authors": [
                "L. Moser",
                "B. Thuraisingham",
                "J. Zhang"
            ],
            "title": "Services in the Cloud,",
            "venue": "IEEE Trans. Serv. Comput.,",
            "year": 2015
        },
        {
            "authors": [
                "R. Birke",
                "A. Podzimek",
                "L.Y. Chen",
                "E. Smirni"
            ],
            "title": "Virtualization in the private cloud: State of the practice,",
            "venue": "IEEE Transactions on Network and Service Management,",
            "year": 2016
        },
        {
            "authors": [
                "Y. Kotb",
                "I. Al Ridhawi",
                "M. Aloqaily",
                "T. Baker",
                "Y. Jararweh",
                "H. Tawfik"
            ],
            "title": "Cloud-based multi-agent cooperation for IoT devices using workflow-nets,",
            "venue": "journal of Grid Computing,",
            "year": 2019
        },
        {
            "authors": [
                "A. Thakur",
                "M.S. Goraya"
            ],
            "title": "RAFL: A hybrid metaheuristic based resource allocation framework for load balancing in cloud computing environment,",
            "venue": "Simulation Modelling Practice and Theory,",
            "year": 2022
        },
        {
            "authors": [
                "K. Mahajan",
                "A. Makroo",
                "D. Dahiya"
            ],
            "title": "Round robin with server affinity: A VM load balancing algorithm for cloud based infrastructure,",
            "venue": "Journal of information processing systems,",
            "year": 2013
        },
        {
            "authors": [
                "P. Sangwan",
                "M. Sharma",
                "A. Kumar"
            ],
            "title": "Improved round robin scheduling in cloud computing,",
            "venue": "Advances in Computational Sciences and Technology,",
            "year": 2017
        },
        {
            "authors": [
                "D.C. Devi",
                "V.R. Uthariaraj"
            ],
            "title": "Load balancing in cloud computing environment using improved WRR algorithm for nonpreemptive dependent tasks",
            "venue": "The scientific world journal",
            "year": 2016
        },
        {
            "authors": [
                "D.C. Devi",
                "V.R. Uthariaraj"
            ],
            "title": "Load balancing in cloud computing environment using improved weighted round robin algorithm for nonpreemptive dependent tasks,",
            "venue": "ScientificWorldJournal, vol. 2016,",
            "year": 2016
        },
        {
            "authors": [
                "E. Qin",
                "Y. Wang",
                "L. Yuan",
                "Y. Zhong"
            ],
            "title": "Research on nginx dynamic load balancing algorithm,",
            "venue": "12th International Conference on Measuring Technology and Mechatronics Automation (ICMTMA),",
            "year": 2020
        }
    ],
    "sections": [
        {
            "text": "VOLUME XX, 2017 1\npay-for-you-go aspect. A lot is offered by the CC paradigm, such as Infrastructure related services, computing services, storage, and environments for deployment are also provided. The objective of this study is to survey one of the significant challenges in cloud computing, which is a multi-variant, multi-constraint issue termed Load unbalancing, resulting in the demising of the scalability, efficiency, and performance of the system. Equilibrium in the server workload distribution is still strived for by cloud service providers. The unbalancing issue is resolved by load balancing solutions in two ways: overloading and underloading. An extensive structural literature analysis of Load balancing and its constituent domains with the inclusion of various parameters, such as scalability, make-span, and throughput, are depicted in this research paper to enhance the QoS. A detailed and organized taxonomy of all the Load balancing algorithms based on nature system state, techniques, functionality, and types is also presented. The major focus of the survey is around the Static, dynamic, hybrid, and nature-inspired LoadBalancing algorithms. INDEX TERMS Virtual-Machine, Cloud Computing, Migration, Scheduling, ACO, PSO, Load-Balancing. I. INTRODUCTION\nInnovation for cloud computing is critically facilitated by virtualization. Hardware and software approaches that allow physical systems to be partitioned among numerous virtual instances that function simultaneously and share the base physical or bare metal resources and equipment draw attention, as noted [3]. The broad scope of research into all key domains and enterprise applications is enabled by the fusion of Cloud computing and Virtualization technologies, as observed in various references [1][2][4]. Uniformity is ensured by the ecosystem brace offered by several cloud providers, pointing to the expansion of the business at an affordable price, and automation workflow is properly aligned with legitimate user needs. The allocation of adequate resources to cloud services is a difficult task that depends on the Quality of service (QoS) needs of cloudbased services. In this context, diversity, unpredictability, and resource dissipation lead to issues in resource allocation that are not easily handled by conventional provisioning of resources. The community of software developers has been motivated by the unexpected spike in demand for such systems from customers to design and execute scalable apps in the form of cloud services. The architecture made available by software providers significantly relies on the installed programmes. Due to the limits imposed on the public on-premises resource pools, several app development businesses have migrated the programs to third-party CSP settings. The greater degree of performance, uptime, and the necessary growth of the applications are required from the owners of data centers or\ncloud service providers. Balancing the load in public clouds spreads workload and resources in a fashion where jobs are assigned to all processing units, allowing for the most effective usage, including all computational resources. More specific Load Balancing (LB) in cloud computing broadly is needed, as indicated [6-7]. The need for LB in cloud computing arises from the versatile nature of the user requests, uncertain and non-probabilistic network flow to a cloud provider, absence of an efficient resource assigner for the user requests, blurry distribution of tasks across computing resources, including their dependability, and varying demands of the resources to the user requests are the critical points for the same [83].\nLB distributes the load throughout the system to several nodes. The primary purpose of the algorithms is to pick every job such that it contributes to minimizing the time of execution and resource utilization in cloud data centers. The urgent demands of cloud computing include a challenge and\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 1\nintroduce a vast domain for study and development, including all elements of computing resource virtualization. As CC is a market-oriented facility, effective resource scheduling allows legitimate users to focus on their various enterprises to maximize profitability and ROI.\nThe mechanism of balancing Load in the Cloud is generally a two-phase mechanism, one at the level of physical machines where the load balancer manages a load of physical machines and distributes the load among the associated VMs with every physical device (where task migration is done by two ways Inter Virtual Machine and Intra Virtual Machine task migration) and second at the level of virtual machines where the load balancer manages and balance the load across all the virtual machines through various LB algorithms [99]. The user requests are generated by request generators which are the user jobs that need multiple resources to complete the execution process. DCcontroller does the task management as depicted in Fig 1.\nThis paper is divided into four sections : Section II provides the literature review. Section III provides discussion and open research directions. Section IV concludes the paper with future scope.\nII. LITERATURE REVIEW\nThis section presents the literature review of this paper. Firstly, a review of the recent literature on LB where proposed algorithms by researchers are explained and analysed and the concept of LB is explained highlighting its taxonomies, metrics, and existing common algorithms.\nRajgopal et al. [77] proposed a centralized manager methodology suitable for multiple hosts with varying complex practices; this method leads to bottlenecks as immense coordination of operation is required. Ahmed et al. [82] also proposed a centralized load-balancing strategy for virtual machines, which aggravates the entire performance of the whole process. The fault Tolerance parameter is not considered, which may resist the robustness of the entire system.\nA. Taxanomy of LB Algorithms\nJoshi et al. [78] LB based on Round Robin, which researchers highly use, is easy to implement and performs better when the number of processors is less than the number of operations. Crash and overload of the system can occur when the server requires multiple inputs. Prakash et al. [79] introduced an Opportunistic load-balancing algorithm which easily handles incomplete requests in chronological sequence to the current host. The requests are structured steadily as it does not consider the ongoing execution of the host. Gopinath et al. [80] improvised Min-Min and Max-Min LB algorithms which are fast and less complex and improve average makespan of the system. The performance of the Max-Min algorithm is better than Min-Min as it is generally concluded that huge tasks are more in number than smaller tasks, but\nthese strategies can lead and suffer from starvation. Kaur et al. [81] introduced a dynamic and equally spread current execution algorithm which enhances the loading and response time of the data centers but may lead to an increase in cost. Table. 3 shows comparative analysis of various research proposals of various LB algorithms. Throttled and Joined Idle Queue LB techniques improve resource usage by decreasing mean execution time. These approaches are not considered appropriate in specific workload scenarios, as they are only applicable for homogenous systems, need to recognise deadlines, and are complex in nature. [82] [84-85].\nBased on the system's state, LB algorithms initially are of three types viz Static, Dynamic and Hybrid LB Algorithms as illustrated in Fig. 2. Static LB algorithms (SLB) algorithms distribute the receiving workload on the VM server using previous knowledge of the existing servers in the distributed network. These load-balancing techniques contain a pre-defined load schedule specifying the number of tasks distributed on other servers. Dynamic LB is a more adaptable load-balancing approach that can dynamically determine how much load needs to be released during runtime and which machine should be assigned the load.\nScheduling and Allocation techniques are crucial in managing the resources, performance monitoring, and positively influencing QoS delivery to legitimate users. Based on the nature and traits used, the load-balancing algorithms are classified as Allocation algorithms and Scheduling Algorithms as depicted in Fig. 3\nAllocation algorithms are further classified as task allocation algorithms, Resource allocation algorithms and VM allocation algorithms. At the same time, Scheduling\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 1\nalgorithms can be further grouped into three categories: Task scheduling, VM Scheduling and Resource Scheduling algorithms.\nBased on the Functionality and type, LB algorithms are classified into hardware Load Balancing (HLB) and Elastic Load Balancing (ELB). HLB algorithms works at infrastructure level. These algorithms primarily manage and distributes the load at physical layer i.e. CPU, memory and storage. HLB algorithms are categorized into five classes i.e. VM, Memory, CPU, Server and Task LB algorithms. ELB algorithms are associated with performance i.e. reliability, scalability, auto-scaling and security related features. Application LB algorithms works at application layer viz. https and http traffic. These algorithms also ensure the security of the clients application. Elastic loadbalancing algorithms are grouped into three more types, i.e. Classic, Network and Application LB Algorithms as illustrated in Fig. 4\nBased on the techniques employed in LB, The LB algorithms\nare grouped as Optimized-based and Heuristicbased LB\nalgorithms. Heuristic-based load-balancing algorithms are\nclassified as nature-inspired and classical load-balancing\nalgorithms. Heuristic are proved better when the solutions are\nneeded immediately, these algorithms helps to achieve a\ndecent solution, whereas optimization based algorithms are\nused to find the most optimal solution of a problem i.e. They\nhelp to reach the global [99].Different Nature-Inspired[18]\nload-balancing algorithms can be categorized in two ways:\nswarm based load load-balancing algorithms and\nevolutionary based LB algorithms Swarmbased LB\nalgorithms are further decomposed to ten types: particle\nswarm optimization (PSO) algorithms[55-58], ant colony\noptimization (ACO)[30-35] algorithms, artificial bee colony\nalgorithms, bees algorithms[75], cuckoo algorithms[101],\ndifferential Evolution algorithms, flower algorithms, and bat\nalgorithms. Similarly, Evolutionary based algorithms are\ngrouped as genetic algorithm [15], genetic programming,\nevolutionary programming, Neuro Evolution, learning\nclassifier system[29], gene expression programming,\ndifferential evolution, and firefly algorithms [5] as illustrated\nin Fig 5.\nB. Metrices for LB in Cloud Computing These are the parameters which determine the efficiency of algorithms also called performance of the algorithm. Table 4 shows parameters employed in existing research proposals. Various\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 1\nLB metrics (as demonstrated in Fig. 6) based on the literature review, are being identified by various researchers are explained below \u2022 Response Time (RT) - Mathematically, it can be stated\nas the delay between the arrival time and the time when the process initially obtains the CPU. Theoretically, it is the time needed to give response to the user's request. The minimum is the RT, the efficient is the LB algorithm [74]. \u2022 Throughput (TP) \u2013 It is an indicator of the number of\njobs and requests appropriately completed and handled in the Virtual machine in unit time interval. It refers to the volume of data transmitted across one node to another. Maximum is the throughput, more efficient is the LB algorithm.[22],[65]. \u2022 Scalability - Sudden variations in the number of user\nrequests and the computational load, should not affect the system's performance. The algorithm must be highly scalable for efficient LB [5],[63].\n\u2022 Resource Utilization - The proportion to which system resources such as storage, processing power, databases,\nnetworking, and intelligence are used. Resource usage determines energy consumption in data centres. The maximum utilization of resources optimizes the performance of LB [66],[71]. \u2022 Makespan (MS) - Maximum time needed to handle and execute all user requests and assign them to system\nusers. MS is a critical parameter in cloud architecture for scheduling processes [65],[68-70]. \u2022 Associated Overhead (AO) - The LB algorithm needs\nprocessing time, memory, and power. All these parameters, including inter-process communication and migration of tasks, probably add up for associated overhead. The minimum AO, more efficient is the LB [60],[72-73]. \u2022 SLA violations - Counts the set of SLA violation\nelements that have been reduced in terms of timeline limitation, prioritization, and. SLA\nC. Static LB Algorithm\nStatic LB techniques do not consider the system's condition or metrics, such as processing while distributing requests [6]. These algorithms distribute requests evenly across VMs or according to other principles not influenced by constraints [8], thus ideal for systems with hardly any change in load. These algorithms need a thorough understanding of server facilities to improve system throughput [9]. Kumar et al. [76] employed sub-optimal and optimal techniques in which resource descriptions of structured techniques are aggregated, and jobs are assigned to load balancers; if the load balancer does not make a precise judgement, suboptimal\ncomponents are selected. The drawbacks of these algorithms are that they do not have scope for live changes in user requests, have low throughput and fault tolerance. To overcome these drawbacks, dynamic LB algorithms are taken into account.\nD. Dynamic LB Algorithm The cloud provider deploys applications in a dynamic environment. For DLB algorithms, various research challenges must be considered, such as how often resource scheduling must be called, which node leads the LB, obtaining VM load information, and load migration across nodes. Many potential solutions to load unbalance have\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 1\nalready been presented by various researchers. A variety of services and resources are adaptable in live production environments therefore CSP cannot rely upon this circumstance. On existing information, while considering analytics in real time, the clients' criteria are provided for adaptability and flexibility [10-12]. The algorithms developed to accomplish dynamic LB, the ecosystem is\nhighly adaptive to variations in requests over time. It is challenging to imitate a production environment [13], even though it is possible . Zhao et al.[19] introduced a dynamic bin packing strategy and divide and conquer methodology\nGeneral overview of static and dynamic LB algorithms is\nillustrated in Table 1\nE. Nature Inspired Algorithms\nNature-inspired algorithms are meta-heuristic algorithms that are influenced by or mimic biological activities [18] already described by physical sciences. General overview of nature inspired LB algorithms is illustrated in Table 2\nAnt colony optimization (ACO) is a meta-heuristic technique for finding optimized solutions to multimodal optimization problems. It is appropriate for challenges with a broad and complicated outcome space. It is based on the food-gathering patterns of ant colonies [30]. Fig.7 depicts the process followed in ACO with the help of a flowchart. For LB in cloud computing, Verma et. al [32] proposed an enhanced LB approach to enhance the Quality of Service and optimized resource allocation. The entire process is done in two phases: Generation of Ants; Ants are created after frequently monitoring the system for overburdened or noload\nnodes and to locate the candidate node; as per the exploring guidelines, the ant is hunting for candidate nodes in its ecosystem that match the LB parameters. Precise placement of virtual machines [33-34] in cloud LB is a crucial phase. For efficient VM placement Xing et. al. [35] introduced a methodology named ETA-ACO in which Virtual-Machine Placement is done in descending order according to the clients requirements. This Technique mounts freshly generated solutions over already generated grouped solutions by distributing the elements of the optimum solutions.\nMuteeh et al.[31] introduced the multiple resource LB algorithm(MrLBA) for workflow scheduling based on Ant colony Optimisation(ACO) , which aims to complete the whole workflow execution by taking multiple metrics into account, primarily cost and makespan, also Quality of service (QoS), execution cost, execution time, and user timelines. This model consists of crucial components explaining various processes' interconnection. Initially, parsing of input workflow is done. Workflow jobs are organized based on the total count of offspring, execution duration, and size of data. The jobs are grouped based on the number of offspring, significant depth, processing time, and size of the file.\n2) PARTICLE SWARM OPTIMIZATION PSO is a stochastic optimization technique that mimics social demeanours such as bird herding or fish pedagogy. In a PSO system, a swarm of components (called particles) meander in state space [55]. Fig. 8 shows the Flowchart of PSO. Alsaidy et al.[43] proposed heuristic-based improved initialization of PSO for task scheduling in CC [96]. Longest job allocation to quickest processors and minimal competition time approaches are employed to initialize PSO. LJFT-based PSO and MCT-based PSO initialization methodologies are examined for the degree of imbalance, total energy consumption execution time and make span.\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nSaleh et al.[56] also presented improved particle swarm\noptimization for enriching resource usage and efficient task\nallocation in cloud environments, comprising batch\ncreation, resulting in minimizing makespan by 50%. The\nproposed Algorithm IPSO is more promising for a large\nnumber of tasks.\nAlguliyev et al.[57] presented task migration aware LB, where tasks are migrated from overwhelmed virtual machines to underloaded virtual machines, which results in equalized distribution of load among all virtual machines. This methodology leads to minimizing the task execution and task migration time. Kumar et al.[58] introduced a task processing framework, and the suggested method generates the saccadic group with simulated values .It enhances many relevant metrics, such as the user's request acceptance rate, completion time, throughput and cost under a sequence of evaluations on different data sources. Service level agreement violation parameters should be considered while developing the PSO - BOOST framework and have more completion time for dynamic load.\nThe Cloud RAN integrates the cloud into the access network topology and provides for increased network capability by virtualizing the base station and pooling cloud resources. The framework provides the BBU Pool. Michel et al. [75] provide a method for LB for a C-BBU RAN's pool. It is focused on the artificial bee colony meta-heuristic optimization (ABC algorithm) [26] as well as the Min-Min Algorithm (LBMM). These strategies are employed to increase network efficiency by ensuring the high reliability of centralized and pooled assets. Compared to RR and MINMIN techniques, it outperforms them both concerning efficiency and execution time. The flow-chart of the ABC algorithm is depicted in Fig. 9 3) ARTIFICIAL BEE COLONY ALGORITHM\nF. Hybrid LB Algorithm\nBoth static and dynamic load-balancing algorithms have been suggested and executed previously but have not been efficient and effective in LB, which enabled algorithmic hybridization. The qualities of hybrid approaches are inherited from static and dynamic load-balancing techniques, and efforts are made to overcome the drawbacks of both methods.\nDifferent meta-heuristic and heuristic strategies have been presented to handle the scheduling and load-balancing challenges in cloud computing. The scenario grows increasingly difficult due to the number of requests, virtual machines, and infrastructure expansions. Despite the failure of meta-heuristic approaches to produce relatively immediate optimal answers, the PSO algorithm has been found less efficient in achieving the local maxima. Hybrid systems integrate the attributes of several methodologies to get the best solution and have grown in popularity in recent years. Thakur et al. [5] proposed RAFL, a metaheuristic allocation of resources approach for cloud LB using hybrid optimisation algorithm PPSO-DA (Particle Swarm Optimization - Dragonfly algorithm), and to dynamically reduce the load mismatch between individual operational servers and actual anticipated resource capacity (Processing and Memory Unit ), this keeps active physical devices from being overloaded or underloaded and ensures that their capacity of resources is employed in a structured way. Scheduling is a fundamental concern. Kumar et al.[22] proposes a hybrid task scheduling system. GA and PSO are integrated to assign adequate resources to user requests. In contrast to GA and PSO techniques, the HGPSO reduces execution time while increasing availability and scalability. User requests are stored in a queue manager, and the manager's results are assigned to the hybridization of PSO and GA.\nVOLUME XX, 2017 1\nFused efficiently with other heuristic based\nalgorithms Minimize processing time\nArtificial Bee Colony based LB Algorithms [75][87] Minimizes the time of task migration and execution time. Reduces the resource usage, Less scalable PSO based LB algorithms [43],[56],[57] Reduces the response time and the number of task migration High complexity and low scalability Honeybee Foraging [88][89][90] Reduced response and makespan time, enhances the complexity of the\nsystem\nWhen the number of VM\u2019s increases or decreases throughput remains unchanged.\nLB algorithm based on osmosis [18][91]\nTasks can be reallocated easily, Supports homogeneous and heterogeneous setting mode in the virtual machines. The algorithm is not centralized and cannot possess parallel execution of tasks\nRagmani et al. [14,16] proposed a combined approach composed of two techniques: ant colony optimization and fuzzy logic for the improvement of LB in cloud environments. The proposed hybrid approach has taken LB and response into account. Pang et al. [15] proposed the estimation distribution algorithm(EDA) - genetic algorithm (GA), which has a fast convergence rate, and robust searching ability, which minimized the request completion time. Velliangiri et al. [17]. Suggested HESGA technique has merits of both genetic and electrical search algorithms. The GA gives the locally optimized outcome, while the Electrical search method delivers the best global optimum. Manikandan et al.[21] proposed a hybrid algorithm HWOAmBA based on bee optimisation for maximizing resource utilization and having a comparatively faster convergence rate , lesser execution time and makespan. Princess et al. [23] integrated harries hawks optimization and pigeon inspired optimization algorithms to balance the load optimally between the virtual machines and adequate resource utilization including tasks response time. The major limitations of VMs are booting time and consumption of unnecessary resources, to overcome the problem Manikandan et al.[24] introduced BWFSO which is the hybridisation of fuzzy C-means clustering, black widow optimisation and FSO for user requests scheduling, allocation of resources and to maximize resource utilization.Wesabi et al.[25] introduces novel hybrid metaheuristic algorithms for energy-efficient resource allocation (HMEERA) in the CC context. The suggested model primarily does the extraction of features based on enduser requests, followed by feature reduction by PCA and subsequently uses the combined characteristics to optimize the allocation of resources. This merging of GTOA and RSO algorithms helps to enhance resource allocation across VMs in cloud data centers. Kruekaew et al.[26] proposed MOABCQ algorithm is indeed a user job requests scheduling approach in cloud computing which is an integration of Artificial Bee colony and Q-learning approach, which is a Machine learning method that enables the ABC approach to work faster. The suggested solution seeks to improve scheduling and resource usage, maximize VM throughput, and provide balancing of workload across VMs based on metrics such as cost, makespan time and resource consumption, all constraints of ongoing concerns.\nAdequate resource utilization is obtained when an appropriate LB is accomplished in the cloud. Jena et al.[29] also integrated an improved Q-learning approach with Modified particle swarm algorithm, This integration mechanism is employed to modify the MPSO's frequency using the pbest and gbest based on the objective expected by the improved Q-learning.\nThe suggested approach equalizes the load by reallocating it to the suitable VMs based on their fitness values. When the comparison is made independently with modified particle swarm optimization and Q-learning, the suggested technique enhances throughput, makespan, and energy usage while balancing the load and significantly minimizes jobs average waiting time. However, LB and task scheduling are considered NP-hard optimization problems. To overcome this limitation, Neelima et al.[27] proposed a task schedulingbased LB algorithm: The adaptive Dragonfly algorithm (ADA), for improving metrics such as execution cost and time. The ADA is a hybridization of nature-inspired firefly and dragonfly algorithms. A multi-objective function is also included based on three parameters: no end-user requests(load), processing costs and the total time of completing all requests.Two distinct balancing approaches are utilized to increase the load on the resources. The first technique may be executed post-job allocation to resources, whereas the second method can be executed previously. The first situation produced poor outcomes due to excessive transmission within the CPU, high computation costs, and the necessity for extra time to accomplish the job. Consequently, the deadlines for certain activities may expire, and overall system efficiency will begin to deteriorate; for this, Moori et al.[28] presented LATOC, a smart blend of AHP-TOPSIS and optimized Particle Swarm Optimization showed significant improvements in average resource usage and total execution time. The difficulties associated with processing large amounts of data in edge computing settings because of the rise in connected devices and data production. It focuses on data skewness, or the situation where certain data blocks demand more power from the processor. By classifying data blocks according to their importance, the article suggests a data skew-aware method for assigning data blocks to edge servers or the cloud, lowering cloud processing expenses. Based on the research findings, this strategy can reduce processing\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\ncosts compared to existing techniques by up to 35%. CPU utilisation control in Big Data processing impacts energy usage. DVFS is used for processing, sample to estimate resource requirements, and partition data into uniform blocks. Our strategy works better than variety-oblivious approaches, according to the results, especially when there are short deadlines and we can make better use of DVFS. Future initiatives include investigating renewable energy sources for efficiency gains and optimising data processing by taking energy costs across data segments and locations into account [103]. In [104] introduced a significance-aware approach for enhancing QoR in budget-constrained big data processing. It efficiently allocates resources, outperforming existing methods in benchmarks. Advantages of SAIR include strong performance, low overhead, and simplicity, while ApproxHadoop excels with uniform data but falters with uneven distribution, incurring high overhead. Processing costs in cloud computing are heavily impacted by resource allocation, particularly in big data applications. Variations in VM performance may arise from a number of data. Datavariety-aware allocation of resources strategy that divides data into blocks and evaluates each block's importance to choose the right virtual machines (VMs) in order to minimise costs. For accumulative applications, we reduce costs by employing targeted sampling techniques [105]. Gapprox reduces the processing of data while preserving an acceptable level of result quality by using sampling clusters to increase accuracy. Groups of the provided data are separated, taking intra- and inter-cluster variation into account, and block and sample sizes are selected to guarantee confidence and error boundaries. According to data from experiments, where a 5% mistake is acceptable with 95% certainty, Gapprox beats the most recent methods, improving processing time by as much as 17\u00d7 when compared to ApproxHadoop and 8\u00d7 when compared to Sapprox [106]. Warehouse Scale Computers (WSC) are widely used to handle data from several sources for a variety of big data jobs. Understanding that the importance of the data varies, we give priority to and more resources are allocated to significant data segments, improving the time and cost-effectiveness of WSC. We provide a low-overhead technique for determining the\nrelevance of data portions, which results in a 24% time and 9% cost improvement in resource allocation. Furthermore, this ranking facilitates more effective use of renewable energies in WSCs and expedites the approximation of big data job outputs [107]. Due to cloud cost limits, edge computing configurations require effective big data processing, especially with the increase in connected devices and data volume. One major difficulty is data skewness, which occurs when specific data blocks require greater processing resources. Current techniques for allocating resources ignore this problem. By classifying data blocks according to their importance and assigning less important ones to edge servers, this article suggests a data skew-aware solution that can save cloud processing costs by up to 35% when compared to existing techniques [108]. Big Data's diverse data, which comes from a range of sources and is distributed unevenly, causes large differences in CPU resource usage. Previous study has neglected to address this issue. In order to mitigate this issue, our research utilises Dynamic Voltage and Frequency Scaling (DVFS) to minimise computation energy usage, taking into account two distinct deadline scenarios as limitations. Prior to using DVFS, we estimate the processing time and required frequencies. Our technique achieves up to 15% savings in energy usage using DV-DVFS, which is better compared to different situations, according to the outcomes of experiments with real-world data sets [109]. While big data processing is becoming more and more common in many industries, Quality of Result (QoR) is being challenged by cost concerns. SAIR provides a method of improving QoR for aggregative jobs by giving priority to important data segments while staying within budgetary constraints. The 95% CI with a 5% error margin and statistical techniques are used to determine the most and least significant data segments. With assessments across subdomains such as writings agreements, and logs showing QoR improvement while adhering to budget restrictions, SAIR optimises QoR under desired time frames and budgetary limits [110]\n6 Negi et al.[44] Reduce completion time and makespan time , Minimize Energy consumption. Not efficient for high storage tasks and\nEnergy efficiency mechanism is missing ,\nCloudSim\n7 Mapetu et al.[45] Less SLA violation, low running time and time complexity. Does not include a peak demands scenario and is complex to implement in\na real time environment.\nCloudSim\n8 Semmoud et al.[46] Reduce migration cost and response time , increase resource utilization. Does not work efficiently for dependent tasks. CloudSim 9 Kaurav and Yadav[47] Reduce requests competition time, Improved scheduling mechanism for Virtual-machines. Precencedence and chronology of tasks is not taken into account. CloudAnalyst\n10 Xavier and Annadurai. [38] Minimize overall makespan for heterogeneous VMs, restrict local\nconvergence, and probe global intelligence searching.\nNot compatible with independent tasks . CloudSim\n11 Devagnanam and Elango. [37]\nEnhance CPU and Memory Utilization rate. Doesn't consider multi-objective resource allocation.\nCloudsim, JAVA\n12 Kaur and Kaur [40] Reduce Cost and make span Non-compatible with non- uniform load distribution.\nCWS (cloud\nworkflow simulator) 13 Aliyu and Souley[41] Reduce cost and use physical memory .i.e a\nthreshold value is set for each VM. Not Robust, may behave abruptly in case of any failure. CloudSim\n14 Alamin et al.[48] Reduce response time , and less utilized resources are ignored. Increase in waiting time CloudAnalyst 15 Adhikari et al[49] Reduce response time and degree of imbalance Performs better only in homogeneous environment, low scalability CloudSim 16 Ziyath and kumar[50] Enhance resource usage, maximized LB Low fault tolerance and QoS CloudSim , CloudAnalyst 17 Vinothini and Balasubraman[51] Reduce migration time and enhance resource usage,\nmaximized LB\nReduced fault tolerance and scalability and increased energy consumption. CloudSim\n18 Attiya et al.[52] Performance and resource application increase\nLow fault tolerance and response time. CloudSim\n19 G and Wu [53] Increase reliability and scalability Low fault tolerance, QoS and Increase in waiting time\nCloudSim\n20\nMilan et al.[54]\nHigh fault tolerance, resource utilization and low overhead High Makespan and Response time\nCloudSim\nVOLUME XX, 2017 1\nIII. DISCUSSION\nThe survey majorly levitates around the Static, dynamic, hybrid, and nature-inspired Load -Balancing algorithms. Further, precise future research directions have also been included, which will help researchers find an optimal loadbalancing strategy that could overcome all issues and challenges in existing Load-Balancing algorithms and can be implemented in a real cloud environment. This study comprises research papers in resource scheduling and LB based on a collection of 100 research papers as given in Fig. 10 papers out of a vast array of 900 research papers published in prominent journals, symposiums and conferences.\nBased on the analysis, this literature is majorly based on two cloud simulation tools CloudSim and Cloud Analyst, Fig. 11 depicts the percentage distribution of various simulation tools employed.\nA. Research Directions\nBased on the analysis, enough unresolved research challenges need to be given more attention. The study\nrevealed possibilities for enhancements in the load-balancing techniques for further investigations, optimizing the Cloud computing services. These are mentioned below: \u2022 Primarily research is based on a simulation environment, plenty of algorithms have been designed to mimic the\ncloud environment, but it is very challenging to implement them in real-time; still, there are only a few algorithms applicable in a real-time environment. Opensource environments such as OpenStack and Cloud Foundry can be used to implement algorithms prone to real-time challenges [9798]. \u2022 Complications in the methodology might arise due to\nvarious factors, such as the rapid vertical scaling of servers to the cloud Data Centre, a priority job awaiting execution, changes in workflows, and system configurations. A robust mechanism is required to handle the aforementioned issues, improving scalability, performance, and throughput. \u2022 Scheduling aware LB algorithms such as Round Robin\nresults in uneven distribution of the load among the virtual machine servers as it works in cyclic fashion, and VM state are not saved. \u2022 Fusion of two or multiple algorithms increases the\ncomplexity of the system, as static LB algorithms can be integrated with Nature-inspired algorithms or other dynamic algorithms so that algorithms can be light and also overcome hybridisation challenges. \u2022 The applications of Cloud computing in the health sector\nis proved to be an asset for society, and an efficient task allocation algorithm focused on the health sector can be designed so that society can be benefited from it. \u2022 Task scheduling and load unbalancing problems are\nconsidered as NP-hard problems. Nature-inspired algorithms have managed to solve it to some extents still there are many open challenges, such as the design of the optimal fitness function, which could evaluate the candidate resources precisely so that scalability can be assured for tasks with dynamic resource requirements \u2022 QoS-based LB follows a geographical LB mechanism,\nwhich delivers an acceptable QoS even in the case of resource failure. Still, it leads to high monitoring overheads which require in-depth analysis of the scenario so that the above challenges can be addressed. \u2022 Most load-balancing methods consider the fault\ntolerance parameter lightly, which is crucial when proposing a robust technique in real-time cloud environment.\nIV. CONCLUSION AND FUTURE SCOPE\nAn essential feature in the CC domain, LB is employed to improve workload distribution and resource management,\nwith the aim of minimizing the total response time of the system. Concerns related to LB, such as resource scheduling, task migrations, and resource utilization, have been addressed by many methodologies and approaches. Different\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 7\nmethods in the binding domain of LB were explored in this research. In recent years, the challenges associated with LB have been examined by scholars, who have comprehensively evaluated the suggested methods. Although several ways have been presented, various challenges in the cloud environment remain unresolved, including VM migration and fault tolerance concerns. Considerable room is offered to research professionals to design advanced and effective loadbalancing methods for cloud environments through this literature survey. This study, encompassing a review of existing and proposed load-balancing strategies, will be helpful for researchers in identifying research challenges connected to LB, particularly in reducing response time and avoiding node breakdowns. In the dynamic landscape of cloud computing, OpenStack presents a platform where open questions remain: How can more robust fault tolerance mechanisms be developed for LB in the cloud within the context of OpenStack? What innovative approaches can be devised to enhance VM migration in a cloud environment, specifically when utilizing cloudfoundry and OpenStack?\nREFERENCES [1]. R. Buyya, \u201cIntroduction to the IEEE transactions on cloud computing,\u201d\nIEEE Trans. Cloud Comput., vol. 1, no. 1, pp. 3\u201321, 2013. [2]. L. Moser, B. Thuraisingham, and J. Zhang, \u201cServices in the Cloud,\u201d\nIEEE Trans. Serv. Comput., vol. 8, no. 2, pp. 172\u2013174, 2015. [3]. R. Birke, A. Podzimek, L. Y. Chen, and E. Smirni, \u201cVirtualization in the\nprivate cloud: State of the practice,\u201d IEEE Transactions on Network and Service Management, vol. 13, no. 3, pp. 608\u2013621, 2016. [4]. Y. Kotb, I. Al Ridhawi, M. Aloqaily, T. Baker, Y. Jararweh, and H. Tawfik, \u201cCloud-based multi-agent cooperation for IoT devices using\nworkflow-nets,\u201d journal of Grid Computing, vol. 17, no. 4, pp. 625\u2013\n650, 2019. [5]. A. Thakur and M. S. Goraya, \u201cRAFL: A hybrid metaheuristic based\nresource allocation framework for load balancing in cloud computing environment,\u201d Simulation Modelling Practice and Theory, vol. 116,\nno. 102485, p. 102485, 2022. [6]. K. Mahajan, A. Makroo, and D. Dahiya, \u201cRound robin with server\naffinity: A VM load balancing algorithm for cloud based infrastructure,\u201d Journal of information processing systems, vol. 9, no.\n3, pp. 379\u2013394, 2013. [7]. P. Sangwan, M. Sharma and A. Kumar \u201cImproved round robin\nscheduling in cloud computing,\u201d Advances in Computational Sciences\nand Technology, vol. 10, no. 4, pp. 639\u2013644, 2017. [8]. D. C. Devi and V. R. Uthariaraj, Load balancing in cloud computing\nenvironment using improved WRR algorithm for nonpreemptive\ndependent tasks. The scientific world journal. 2016. [9]. D. C. Devi and V. R. Uthariaraj, \u201cLoad balancing in cloud computing\nenvironment using improved weighted round robin algorithm for nonpreemptive dependent tasks,\u201d ScientificWorldJournal, vol. 2016, p.\n3896065, 2016 [10]. E. Qin, Y. Wang, L. Yuan, and Y. Zhong, \u201cResearch on nginx dynamic\nload balancing algorithm,\u201d in 2020 12th International Conference on Measuring Technology and Mechatronics Automation (ICMTMA),\n2020. [11]. V. Priya, C. Sathiya Kumar, and R. Kannan, \u201cResource scheduling algorithm with load balancing for cloud service provisioning,\u201d Applied Soft Computing, vol. 76, pp. 416\u2013424, 2019. [12]. M. Kumar and S. C. Sharma, \u201cDynamic load balancing algorithm for balancing the workload among virtual machine in cloud computing,\u201d Procedia computer science, vol. 115, pp. 322\u2013329, 2017.\n[13]. M. Adhikari and T. Amgoth, \u201cHeuristic-based load-balancing\nalgorithm for IaaS cloud,\u201d Future Generation Computer Systems, vol.\n81, pp. 156\u2013165, 2018. [14]. A. Ragmani, A. Elomri, N. Abghour, K. Moussaid, and M. Rida, \u201cAn\nimproved hybrid fuzzy-ant colony algorithm applied to load balancing in cloud computing environment,\u201d Procedia Computer Science, vol.\n151, pp. 519\u2013526, 2019. [15]. S. Pang, W. Li, H. He, Z. Shan, and X. Wang, \u201cAn EDA-GA hybrid\nalgorithm for multi-objective task scheduling in cloud computing,\u201d\nIEEE Access, vol. 7, pp. 146379\u2013146389, 2019. [16]. A. Ragmani, A. Elomri, N. Abghour, K. Moussaid, and M. Rida,\n\u201cFACO: a hybrid fuzzy ant colony optimization algorithm for virtual machine scheduling in high-performance cloud computing,\u201d Journal of Ambient Intelligence and Humanized Computing, vol. 11, no. 10, pp.\n3975\u20133987, 2020. [17]. S. Velliangiri, P. Karthikeyan, V. M. Arul Xavier, and D. Baswaraj,\n\u201cHybrid electro search with genetic algorithm for task scheduling in cloud computing,\u201d Ain Shams Engineering Journal, vol. 12, no. 1, pp.\n631\u2013639, 2021. [18]. M. Gamal, R. Rizk, H. Mahdi, and B. E. Elnaghi, \u201cOsmotic bioinspired\nload balancing algorithm in cloud computing,\u201d IEEE Access, vol. 7,\npp. 42735\u201342744, 2019. [19]. Y. Zhao, H. Liu, Y. Wang, Z. Zhang, and D. Zuo, \u201cReducing the upfront\ncost of private clouds with clairvoyant virtual machine placement,\u201d\nThe Journal of Supercomputing, vol. 75, no. 1, pp. 340\u2013 369, 2019. [20]. S. Xue, Y. Peng, X. Xu, J. Zhang, C. Shen, and F. Ruan, \u201cDSM: a\ndynamic scheduling method for concurrent workflows in cloud\nenvironment,\u201d Cluster Computing, vol. 22, no. S1, pp. 693\u2013706, 2019. [21]. N. Manikandan, N. Gobalakrishnan, and K. Pradeep, \u201cBee\noptimization based random double adaptive whale optimization model for task scheduling in cloud computing environment,\u201d Computer\nCommunications, vol. 187, pp. 35\u201344, 2022. [22]. S. Kumar and A. M. Venkatesan, \u201cTask scheduling in a cloud\ncomputing environment using HGPSO algorithm,\u201d Cluster Computing, vol. 22, no. 1, pp. 2179\u20132185, 2019.\n[23]. A. Poornima Princess and G. Radhamani, \u201cA hybrid meta-heuristic for\noptimal load balancing in cloud computing,\u201d Journal of Grid\nComputing, vol. 19, no. 2, pp. 1\u201322, 2021. [24]. N. Manikandan, P. Divya, and S. Janani, \u201cBWFSO: Hybrid\nBlackwidow and Fish swarm optimization Algorithm for resource allocation and task scheduling in cloud computing,\u201d Materials Today:\nProceedings, vol. 62, pp. 4903\u20134908, 2022. [25]. F. N. Al-Wesabi, M. Obayya, M. A. Hamza, J. S. Alzahrani, D. Gupta,\nand S. Kumar, \u201cEnergy aware resource optimization using unified metaheuristic optimization algorithm allocation for cloud computing environment,\u201d Sustainable Computing: Informatics and Systems, vol.\n35, no. 100686, p. 100686, 2022. [26]. A. Kruekaew and W. Kimpan, \u201cMulti-objective task scheduling\noptimization for load balancing in cloud computing environment using hybrid artificial bee colony algorithm with reinforcement learning,\u201d\nIEEE Access, vol. 10, pp. 17803\u201317818, 2022. [27]. P. Neelima and A. R. M. Reddy, \u201cAn efficient load balancing system\nusing adaptive dragonfly algorithm in cloud computing,\u201d Cluster\nComputing, vol. 23, no. 4, pp. 2891\u20132899, 2020. [28]. A. Moori, B. Barekatain, and M. Akbari, \u201cLATOC: an enhanced load\nbalancing algorithm based on hybrid AHP-TOPSIS and OPSO algorithms in cloud computing,\u201d The Journal of Supercomputing, vol. 78, no. 4, pp. 4882\u20134910, 2022. [29]. U. K. Jena, P. K. Das, and M. R. Kabat, Hybridization of metaheuristic\nalgorithms for load balancing in cloud computing environments. 2020. [30]. M. Dorigo, V. Maniezzo, and A. Colorni, \u201cAnt system: optimization by\na colony of cooperating agents,\u201d IEEE Transactions on Systems, Man,\nand Cybernetics, Part B (Cybernetics), vol. 26, no. 1, pp. 29\u201341, 1996. [31]. A. Muteeh, M. Sardaraz, and M. Tahir, \u201cMrLBA: multi-resource load\nbalancing algorithm for cloud computing using ant colony\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 7\noptimization,\u201d Cluster Computing, vol. 24, no. 4, pp. 3135\u20133145,\n2021. [32]. P. Verma, S. Shrivastava, and R. K. Pateriya, \u201cEnhancing load\nbalancing in cloud computing by ant colony optimization method,\u201d International Journal of Computer Engineering In Research Trends,\nno. 4, pp. 277\u2013284, 2017. [33]. X.-F. Liu, Z.-H. Zhan, J. D. Deng, Y. Li, T. Gu, and J. Zhang, \u201cAn\nenergy efficient ant colony system for virtual machine placement in cloud computing,\u201d IEEE Trans. Evol. Comput., vol. 22, no. 1, pp. 113\u2013\n128, 2018. [34]. H. Zhao, J. Wang, F. Liu, Q. Wang, W. Zhang, and Q. Zheng,\n\u201cPoweraware and performance-guaranteed virtual machine placement in the cloud,\u201d IEEE Transactions on Parallel and Distributed Systems,\nvol. 29, no. 6, pp. 1385\u20131400, 2018. [35]. H. Xing, J. Zhu, R. Qu, P. Dai, S. Luo, and M. A. Iqbal, \u201cAn ACO for\nenergy-efficient and traffic-aware virtual machine placement in cloud computing,\u201d Swarm and Evolutionary Computation, vol. 68, no.\n101012, p. 101012, 2022. [36]. O. Y. Abdulhammed, \u201cLoad balancing of IoT tasks in the cloud\ncomputing by using sparrow search algorithm The Journal of\nSupercomputing, vol. 78, no. 3, pp. 3266\u20133287, 2022. [37]. J. Devagnanam and N. M. Elango, \u201cDesign and development of\nexponential lion algorithm for optimal allocation of cluster resources in cloud,\u201d Cluster Computing, vol. 22, no. S1, pp. 1385\u20131400, 2019. [38]. A. Xavier and V. M. Annadurai, \u201cChaotic social spider algorithm for load balance aware task scheduling in cloud computing,\u201d Cluster\nComputing, vol. 22, no. 1, pp. 287\u2013297, 2019. [39]. A. Jangra and N. Mangla, \u201cAn efficient load balancing framework for\ndeploying resource schedulingin cloud based communication in healthcare,\u201d Measurement: Sensors, vol. 25, no. 100584, p. 100584,\n2023. [40]. A. Kaur and B. Kaur, \u201cLoad balancing optimization based on hybrid\nHeuristic-Metaheuristic techniques in cloud environment,\u201d Journal of King Saud University-Computer and Information Sciences, vol. 34,\nno. 3, pp. 813\u2013824, 2022. [41]. A. N. Aliyu and P. B. Souley, \u201cPerformance analysis of a hybrid\napproach to enhance load balancing in a heterogeneous cloud environment,\u201d International Journal of Advances in Scientific\nResearch and Engineering, vol. 5, no. 7, pp. 246\u2013257, 2019. [42]. D. A. Shafiq, N. Z. Jhanjhi, A. Abdullah, and M. A. Alzain, \u201cA load\nbalancing algorithm for the data centres to optimize cloud computing\napplications,\u201d IEEE Access, vol. 9, pp. 41731\u201341744, 2021. [43]. S. A. Alsaidy, A. D. Abbood, and M. A. Sahib, \u201cHeuristic initialization\nof PSO task scheduling algorithm in cloud computing,\u201d Journal of King Saud University-Computer and Information Sciences, vol. 34,\nno. 6, pp. 2370\u20132382, 2022. [44]. S. Negi, M. M. S. Rauthan, K. S. Vaisla, and N. Panwar, \u201cCMODLB:\nan efficient load balancing approach in cloud computing environment,\u201d The Journal of Supercomputing, vol. 77, no. 8, pp.\n8787\u20138839, 2021. [45]. J. P. B. Mapetu, L. Kong, and Z. Chen, \u201cA dynamic VM consolidation\napproach based on load balancing using Pearson correlation in cloud computing,\u201d The Journal of Supercomputing, vol. 77, no. 6, pp. 5840\u2013\n5881, 2021. [46]. A. Semmoud, M. Hakem, B. Benmammar, and J.-C. Charr, \u201cLoad\nbalancing in cloud computing environments based on adaptive starvation threshold,\u201d Concurrency and Computation, vol. 32, no. 11,\n2020. [47]. N. S. Kaurav and P. Yadav, \u201cA genetic algorithm based load balancing\napproach for resource optimization for cloud computing environment,\u201d INTERNATIONAL JOURNAL OF INFORMATION AND COMPUTING SCIENCE, vol. 6, no. 3, pp. 175\u2013184, Mar. 2019. [48]. M. A. Alamin, M. K. Elbashir, and A. A. Osman, \u201cA load balancing algorithm to enhance the response time in cloud computing,\u201d Red Sea University Journal of Basic and Applied Science, vol. 2, no. 2, pp. 473\u2013490, 2017.\n[49]. M. Adhikari, S. Nandy, and T. Amgoth, \u201cMeta heuristic-based task\ndeployment mechanism for load balancing in IaaS cloud,\u201d Journal of\nNetwork and Computer Applications, vol. 128, pp. 64\u201377, 2019. [50]. S. P. M. Ziyath and S. Senthilkumar, \u201cMHO: meta heuristic\noptimization applied task scheduling with load balancing technique for cloud infrastructure services,\u201d Journal of Ambient Intelligence and\nHumanized Computing, vol. 12, no. 6, pp. 6629\u20136638, 2021. [51]. A. Vinothini and P. Balasubramanie, \u201cMeta-heuristic firefly approach\nto multi-servers load balancing with independent and dependent server availability consideration,\u201d Journal of Ambient Intelligence and\nHumanized Computing, vol. 12, no. 5, pp. 5443\u20135455, 2021. [52]. I. Attiya, M. Abd Elaziz, and S. Xiong, \u201cJob scheduling in cloud\ncomputing using a modified harris hawks optimization and simulated annealing algorithm. Computational intelligence and neuroscience,\u201d Computational Intelligence and Neuroscience, 2020. [53]. G. Li and Z. Wu, \u201cAnt colony optimization task scheduling algorithm for SWIM\nbased on load balancing,\u201d Future Internet, vol. 11, no. 4, p. 90, 2019. [54]. S. T. Milan, L. Rajabion, H. Ranjbar, and N. J. Navimipour, \u201cNature\ninspired meta-heuristic algorithms for solving the load-balancing problem in cloud environments,\u201d Computer & Operations Research,\nvol. 110, pp. 159\u2013187, 2019. [55]. J. Kennedy and R. Eberhart, \u201cParticle swarm optimization,\u201d in\nProceedings of ICNN\u201995 - International Conference on Neural\nNetworks, 2002, vol. 4, pp. 1942\u20131948 vol.4. [56]. H. Saleh, H. Nashaat, W. Saber, and H. M. Harb, \u201cIPSO task scheduling\nalgorithm for large scale data in cloud computing environment,\u201d IEEE\nAccess, vol. 7, pp. 5412\u20135420, 2019. [57]. R. M. Alguliyev, Y. N. Imamverdiyev, and F. J. Abdullayeva,\n\u201cPSObased load balancing method in cloud computing,\u201d Automatic\nControl and Computer Sciences, vol. 53, no. 1, pp. 45\u201355, 2019. [58]. M. Kumar and S. C. Sharma, \u201cPSO-based novel resource scheduling\ntechnique to improve QoS parameters in cloud computing,\u201d Neural\nComputing and Applications, vol. 32, no. 16, pp. 12103\u201312126, 2020. [59]. M. Kumar, K. Dubey, and S. C. Sharma, \u201cElastic and flexible deadline\nconstraint load Balancing algorithm for Cloud Computing,\u201d Procedia\nComputer Science, vol. 125, pp. 717\u2013724, 2018. [60]. V. Borovskiy, J. Wust, C. Schwarz, W. Koch, and A. Zeier, \u201cA linear\nprogramming approach for optimizing workload distribution in a\ncloud,\u201d Cloud Computing, pp. 127\u2013132, 2011. [61]. V. Polepally and K. Shahu Chatrapati, \u201cDragonfly optimization and\nconstraint measure-based load balancing in cloud computing,\u201d Cluster\nComput., vol. 22, no. S1, pp. 1099\u20131111, 2019. [62]. S. S. Rajput and V. S. Kushwah, \u201cDecember) A genetic based improved\nload balanced min-min task scheduling algorithm for load balancing in cloud computing,\u201d in 8th international conference on Computational Intelligence and Communication Networks (CICN), 2016, pp. 677\u2013\n668. [63]. L. Tang et al., \u201cOnline and offline based load balance algorithm in\ncloud computing,\u201d Knowledge-Based Systems, vol. 138, pp. 91\u2013104,\n2017. [64]. Z. Xiao, Z. Tong, K. Li, and K. Li, \u201cLearning non-cooperative game\nfor load balancing under self-interested distributed environment,\u201d\nApplied Soft Computing 52, vol. 52, pp. 376\u2013386, 2017. [65]. P. V. Krishna, \u201cHoney bee behavior inspired load balancing of tasks in\ncloud computing environments,\u201d Applied soft computing, vol. 13, no.\n5, pp. 2292\u20132303, 2013. [66]. F. Ramezani, J. Lu, and F. K. Hussain, \u201cTask-based system load\nbalancing in cloud computing using particle swarm optimization,\u201d International journal of parallel programming, vol. 42, no. 5, pp. 739\u2013\n754, 2014. [67]. M. Vanitha and P. Marikkannu, \u201cEffective resource utilization in cloud\nenvironment through a dynamic well-organized load balancing algorithm for virtual machines,\u201d Computers & Electrical Engineering, vol. 57, pp. 199\u2013208, 2017.\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 7\n[68]. K. Dasgupta, B. Mandal, P. Dutta, J. K. Mandal, and S. Dam, \u201cA\ngenetic algorithm (GA) based load balancing strategy for cloud\ncomputing,\u201d Procedia Technology, vol. 10, pp. 340\u2013347, 2013. [69]. K.-M. Cho, P.-W. Tsai, C.-W. Tsai, and C.-S. Yang, \u201cA hybrid\nmetaheuristic algorithm for VM scheduling with load balancing in cloud computing,\u201d Neural Computing and Applications, vol. 26, no. 6,\npp. 1297\u20131309, 2015. [70]. K. Li, G. Xu, G. Zhao, Y. Dong, and D. Wang, \u201cCloud task scheduling\nbased on load balancing ant colony optimization,\u201d in 2011 Sixth\nAnnual Chinagrid Conference, 2011. [71]. A. Singh, D. Juneja, and M. Malhotra, \u201cAutonomous agent based load\nbalancing algorithm in cloud computing,\u201d Procedia Computer Science,\nvol. 45, pp. 832\u2013841, 2015. [72]. S. K. Vasudevan, S. Anandaram, A. J. Menon, and A. Aravinth, \u201cA\nnovel improved honey bee based load balancing technique in cloud computing environment,\u201d Asian Journal of Information Technology,\nvol. 15, no. 9, pp. 1425\u20131430, 2016. [73]. M. Lavanya and V. Vaithiyanathan, \u201cLoad prediction algorithm for\ndynamic resource allocation,\u201d Indian J. Sci. Technol., vol. 8, no. 35,\n2015. [74]. R. Kapur, \u201cA workload balanced approach for resource scheduling in\ncloud computing,\u201d in 2015 Eighth International Conference on\nContemporary Computing (IC3), 2015, pp. 36\u201341. [75]. A. D. E. Michel, N. B. E. Noelle, and T. O. N. Y. E. Emmanuel,\n\u201cArtificial Bee Colonies Solution for Load Sharing in a Cloud RAN,\u201d\nEuropean Journal of Applied Sciences, vol. 10, no. 2, 2022. [76]. P. Kumar and R. Kumar, \u201cIssues and challenges of load balancing\ntechniques in cloud computing: A survey,\u201d ACM Computing Surveys\n(CSUR), vol. 51, no. 6, pp. 1\u201335, 2019. [77]. K. T. Rajgopal, K. R. A. Kumar, and N. Shenoy, \u201cLoad balancing in\ncloud computing: a survey on popular techniques and comparative analysis,\u201d Global Journal of Computer Science and Technology, 2018. [78]. S. Joshi and U. Kumari, \u201cLoad balancing in cloud computing: Challenges & issues,\u201d in 2016 2nd International Conference on\nContemporary Computing and Informatics (IC3I), 2016. [79]. X. Feng, J. Ma, S. Liu, Y. Miao, and X. Liu, \u201cAuto-scalable and\nfaulttolerant load balancing mechanism for cloud computing based on the proof-of-work election,\u201d Science China Information Sciences, vol.\n65, no. 1, 2022. [80]. P. P. G. Gopinath and S. K. Vasudevan, \u201cAn in-depth analysis and study\nof load balancing techniques in the cloud computing environment,\u201d\nProcedia Computer Science, vol. 50, pp. 427\u2013432, 2015. [81]. K. Kaur and R. Mahajan, \u201cEqually Spread Current Execution Load\nAlgorithm - A Novel Approach for Improving Data Centre\u2019s Performance in Cloud Computing\u201d, International Journal on Future Revolution in Computer Science and Communication Engineering,\nvol. 4, no. 8, pp. 08, Aug. 2018. [82]. M. O. Ahmad and R. Z. Khan, \u201c\u2018Load balancing tools and techniques\nin cloud computing: A systematic review,\u201d in Advances in Computer and Computational Sciences, Singapore: Springer, 2018, pp. 181\u2013195. [83]. A. J. Ghomi, A. M. Rahmani, and N. N. Qader, \u201cLoad-balancing\nalgorithms in cloud computing: A survey,\u201d Journal of Network and\nComputer Applications, vol. 88, pp. 50\u201371, 2017. [84]. T. Tamilvizhi and B. Parvathavarthini, \u201cA novel method for adaptive\nfault tolerance during load balancing in cloud computing,\u201d Cluster\nComputing, vol. 22, no. S5, pp. 10425\u201310438, 2019. [85]. A. S. Milani and N. J. Navimipour, \u201cLoad balancing mechanisms and\ntechniques in the cloud environments: Systematic literature review and future trends,\u201d Journal of Network and Computer Applications, vol.\n71, pp. 86\u201398, 2016. [86]. P. Xu, G. He, Z. Li, and Z. Zhang, \u201cAn efficient load balancing\nalgorithm for virtual machine allocation based on ant colony optimization,\u201d International Journal of Distributed Sensor Networks, vol. 14, no. 12, p. 155014771879379, 2018.\n[87]. M. Mesbahi and A. M. Rahmani, \u201cLoad balancing in cloud computing:\na state of the art survey,\u201d International Journal Modern Education and\nComputer Science, vol. 8, no. 3, p. 64, 2016. [88]. N. Thapliyal and P. Dimri, \u201cLoad balancing in cloud computing based\non honey bee foraging behavior and load balance min-min scheduling algorithm,\u201d International Journal of Electrical and Electronics\nResearch, vol. 10, no. 1, pp. 1\u20136, 2022. [89]. W. Hashem, H. Nashaat, and R. Rizk, \u201cHoney bee based load balancing\nin cloud computing,\u201d KSII Transactions on Internet and Information\nSystems (TIIS), vol. 11, no. 12, pp. 5694\u20135711, 2017. [90]. A. Mallikarjuna and P. Venkata Krishna, \u201cA Nature-Inspired approach\nfor Load Balancing of tasks in cloud computing using Equal Time Allocation,\u201d International Journal of Innovative Technology and Exploring Engineering (IJITEE), vol. 8, no. 2S2, pp. 2278\u20133075, 2018. [91]. A. Mallikarjuna and P. Venkata Krishna, \u201cOLB: A nature inspired\napproach for load balancing in cloud computing,\u201d Cybernetics and\nInformation Technologies, vol. 15, no. 4, pp. 138\u2013148, 2015. [92]. P. Nayak, J. Vania, and R. Robin, \u201cLoad Balancing using Modified Throttled Algorithm,\u201d vol. 3, pp. 3614\u20133616, 2015. [93]. S. R. Gundu and T. Anuradha, \u201cImproved hybrid algorithm approach\nbased load balancing technique in cloud computing,\u201d Global\njournal of computer science and technology, 2019. [94]. M. Kumar and S. C. Sharma, \u201cDynamic load balancing algorithm to\nminimize the makespan time and utilize the resources effectively in cloud environment,\u201d International Journal of Computers and\nApplications, vol. 42, no. 1, pp. 108\u2013117, 2020. [95]. G. Soni and M. Kalra, \u201cA novel approach for load balancing in cloud\ndata center,\u201d in 2014 IEEE International Advance Computing\nConference (IACC), 2014. [96]. A. Tomar et al., \u201cImproved task scheduling using effective Particle\nSwarm optimization in cloud computing environment,\u201d International Journal of Engineering and Advanced Technology,\nvol. 9, no. 2, pp. 1232\u20131237, 2019. [97]. M. J. Prakash and P. S. Rani, \u201cLoad Balancing Using Cloudsim\nSimulator in Cloud Computing,\u201d International Journal of Scientific\n& Technology, vol. 9, no. 01, 2020. [98]. A. Xu and C. Song, \u201cOptimization of innovation and entrepreneurship\neducation and training system in colleges and universities based on OpenStack cloud computing,\u201d Sci. Program., vol. 2022, pp. 1\u201312,\n2022. [99]. S. Afzal and G. Kavitha, \u201cLoad balancing in cloud computing-A\nhierarchical taxonomical classification,\u201d Journal of Cloud\nComputing, vol. 8, no. 1, pp. 1\u201324, 2019. [100]. S. H. H. Madni, M. S. A. Latiff, J. Ali, and S. M. Abdulhamid, \u201cMulti-\nobjective-oriented cuckoo search optimization-based resource scheduling algorithm for clouds,\u201d Arabian Journal for Science and\nEngineering, vol. 44, no. 4, pp. 3585\u20133602, 2019. [101]. A. Faridi, H. Sarwar, Ahtisham, S. Kumar, and K. Jamal, \u201cCloud\ncomputing approaches in health care,\u201d Mater. Today, vol. 51, pp.\n1217\u20131223, 2022. [102]. H. Ahmadvand, T. Dargahi, F. Foroutan, P. Okorie and F. Esposito,\n\"Big Data Processing at the Edge with Data Skew Aware Resource Allocation,\" 2021 IEEE Conference on Network Function Virtualization and Software Defined Networks (NFV-SDN),\nHeraklion, Greece, 2021, pp. 81-86 [103]. F. Hossein and M. Foroutan, \u201cDV-DVFS: merging data variety and\nDVFS technique to manage the energy consumption of big data\nprocessing,\u201d Journal of Big Data, vol. 8, pp. 1\u201316, 2021 [104]. M. Hossein, \u201cSAIR: significance-aware approach to improve QoR of\nbig data processing in case of budget constraint,\u201d The Journal of\nSupercomputing, vol. 75, pp. 5760\u20135781, 2019. [105]. F. Hossein, DV-ARPA: data variety aware resource provisioning for big data processing in accumulative applications. 2020. [106]. M. Hossein and F. Goudarzi, \u201cGapprox: using gallup approach for\napproximation in big data processing,\u201d Journal of Big Data, vol. 6, pp. 1\u201324, 2019.\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/\nVOLUME XX, 2017 7\n[107]. M. Hossein, \u201cUsing data variety for efficient progressive big data\nprocessing in warehouse-scale computers,\u201d IEEE Computer Architecture Letters, vol. 16, pp. 166\u2013169, 2016.\n[108]. H. Ahmadvand, T. Dargahi, F. Foroutan, P. Okorie and F. Esposito,\n\"Big Data Processing at the Edge with Data Skew Aware Resource Allocation,\" 2021 IEEE Conference on Network Function Virtualization and Software Defined Networks (NFV-SDN), Heraklion, Greece, 2021, pp. 81-86.\n[109]. H. Ahmadvand, F. Foroutan, and M. Fathy, \u201cDV-DVFS: merging data\nvariety and DVFS technique to manage the energy consumption of\nbig data processing,\u201d Journal of Big Data, vol. 8, no. 1, 2021. [110]. Ahmadvand, Hossein, and Maziar Goudarzi. \"SAIR:\nsignificanceaware approach to improve QoR of big data processing in case of\nYogesh Lohumi is M.Tech in Computer Science and Engineering at Graphic Era Deemed to be University, Dehradun . With a deep fascination budget constraint.\" The Journal of Supercomputing 75 (2019): 57605781. for cutting-edge technologies, Yogesh specializes in the fields of Cloud Computing, Artificial Intelligence, and\nComputational Astrophysics. Throughout his academic journey, Yogesh has exhibited a steadfast dedication to academic excellence and a fervent aspiration to contribute to the advancement of knowledge in his areas of expertise. Yogesh is determined to make noteworthy contributions to the realms of Cloud Computing and Artificial Intelligence. Yogesh is currently associated with Graphic Era Deemed to be University and is working as Assistant Professor at the Department of Computer Science and Engineering\nDr. Durgaprasad Gangodkar Dr. Gangodkar holds Ph. D. in Computer Sc. and Engg. from IIT-Roorkee, India, M. Tech. with Distinction from Visvesvaraya Technological University and B. E. with First class from Karnatak University. He is a recipient of IITR-Microsoft Research Grant for excellent research work and a Fellowship from AICTE during his Ph. D. He has been\nactively involved in research and has guided research scholars in the areas related to Cloud and High-Performance Computing, Machine Learning, Big Data Storage and Security and Computer vision. Dr. Gangodkar has contributed many novel techniques in varied fields of research with publications in reputed international conferences and high impact factor journals including IEEE Transactions, Springer, Elsevier, Taylor and Francis and so on. He has chaired sessions in International Conferences and has been PC member of international conferences in Korea, Spain, Italy, China, Austria, and India. He is a member of IEEEUSA, ACM-USA, Computer Society of India, and Life member of Indian Society for Technical Education. Dr. Gangodkar is currently associated with Graphic Era Deemed to be University and is working as Dean International affairs and Professor at the Department of Computer Science and Engineering and is involved in Developing academic and research collaborations with universities and institutions abroad.\nDr. Prakash Srivastava is an Associate Professor in the Department of Computer Science and Engineering at Graphic Era (Deemed to be University) Dehradun, India. Prior to this assignment he has served KIET Group of Institutions, Ghaziabad, Amity University, Noida & Invertis University, Bareilly also. He received his Ph.D. in Computer Science & Engineering in 2017 under\nTEQIP II from MMM University of Technology, Gorakhpur (previously affiliated to AKTU Lko) and M.E Degree in Computer Science & Engineering from NITTTR Chandigarh, India. He has published a large number of various research papers in reputed international journals and conferences of high repute. His areas of interests include Computer Networks, Mobile Ad Hoc Network, QoS, Cloud Computing and Data\nMohammad Zubair Khan received the Master of Technology degree in computer science and engineering from U. P. Technical University, Lucknow, India, and the Ph.D. degree in computer science and information technology from the Faculty of Engineering, M. J. P. Rohilkhand University, Bareilly, India. He was the Head and an Associate Professor\nwith the Department of Computer Science and Engineering, Invertis University, Bareilly. He has more than 18 years of teaching and research experience. He is currently a Professor with the Department of Computer Science, Taibah University Medina Saudi Arabia. He has published more than 90 journals and conference papers. His current research interests include data mining, big data, parallel and distributed computing, theory of computations, and computer networks. He has been a member of the Computer Society of India since 2004.\nAbdulrahman Alahmadi is an Assistant Professor in the Computer Science and Information Department at Taibah University, Saudi Arabia. He obtained his Ph.D. in Computer Science & Engineering at Southern Illinois University at Carbondale in 2019. During his studies, he was working in Cloud Computing and Big Data research lab for 5 years. His Ph.D. research was in Cloud\nComputing data centers scheduling for energy consumption reduction and resource utilization improvement. Since then, he has published various peerreviewed research papers in Edge and Fog Cloud Computing. His research interest is in Machine learning resource management in Cloud Computing, task scheduling in Fog Computing and IoT-supported edge offloading techniques.\nAhmed H. Alahmadi received the Ph.D. degree in computer science and engineering from La Trobe University. His Ph.D. research was in e-health business requirements engineering. Since then, he has published various peer-reviewed research articles. He worked as the Dean of the College of Computer Science and IT, AlBaha University. He is currently an Assistant\nProfessor with the Department of Computer Science and Information, Taibah University, Saudi Arabia. He is also the Dean of the Khaybar Community College, Taibah University. In addition to research, he is also skilled in accreditation and college recruiting. He has made significant contributions in various research areas, including e-health, software engineering, business process modelling, requirements engineering, and process mining. He also has a demonstrated history of working in the higher education industry. VOLUME XX, 2017\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License. For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/"
        }
    ],
    "title": "Load Balancing in cloud Environment: A State of-the-Art Review"
}