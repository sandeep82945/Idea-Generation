{
    "abstractText": "Fig. 1: Visually inspecting Draco\u2019s recommendations. Our interactive Visual Analytics solution allows users to explore the set of rules the visualization recommendation system Draco is built on. On the left side, four recommended visualizations are shown. Every recommendation has costs assigned, which relates to how many rules have been violated by this recommendation. On the right side we present our hypergraph-based visualization of the set of rules and constraints that are used by Draco. By selecting recommendations on the left (A, blue, and B, red), the rules violated by these visualizations are highlighted in the graph (red and blue dashed lines).",
    "authors": [
        {
            "affiliations": [],
            "name": "Johanna Schmidt"
        },
        {
            "affiliations": [],
            "name": "Silvia Miksch"
        }
    ],
    "id": "SP:ad3dcf1a986cde20ba5951ac0812d935f6fdd684",
    "references": [
        {
            "authors": [
                "F. Alborzi",
                "S. Chaudhuri",
                "R. Chirkova",
                "P. Deo",
                "C.G. Healey",
                "G. Pingale",
                "J.L. Reutter",
                "V. Selvakani"
            ],
            "title": "DataSlicer: Task-Based Data Selection for Visual Data Exploration",
            "venue": "CoRR, abs/1703.09218,",
            "year": 2017
        },
        {
            "authors": [
                "B. Alsallakh",
                "W. Aigner",
                "S. Miksch",
                "H. Hauser"
            ],
            "title": "Radial Sets: Interactive Visual Analysis of Large Overlapping Sets",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 19(12):2496\u20132505,",
            "year": 2013
        },
        {
            "authors": [
                "B. Alsallakh",
                "L. Micallef",
                "W. Aigner",
                "H. Hauser",
                "S. Miksch",
                "P. Rodgers"
            ],
            "title": "Visualizing Sets and Set-typed Data: State-of-the-Art and Future Challenges",
            "venue": "EuroVis - STARs. The Eurographics Association,",
            "year": 2014
        },
        {
            "authors": [
                "A. Barredo Arrieta",
                "N. D\u00edaz-Rodr\u00edguez",
                "J. Del Ser",
                "A. Bennetot",
                "S. Tabik",
                "A. Barbado",
                "S. Garcia",
                "S. Gil-Lopez",
                "D. Molina",
                "R. Benjamins",
                "R. Chatila",
                "F. Herrera"
            ],
            "title": "Explainable Artificial Intelligence (XAI): Concepts, taxonomies, opportunities and challenges toward responsible AI",
            "venue": "Information Fusion, 58:82\u2013115,",
            "year": 2020
        },
        {
            "authors": [
                "M. Burch",
                "F. Beck",
                "D. Weiskopf"
            ],
            "title": "Radial Edge Splatting for Visualizing Dynamic Directed Graphs",
            "venue": "Proceedings of the International Conference on Computer Graphics Theory and Applications and International Conference on Information Visualization Theory and Applications - IVAPP, VISIGRAPP \u201912, pp. 603\u2013612. INSTICC, Rome, Italy, Feb 24\u201326",
            "year": 2012
        },
        {
            "authors": [
                "M. Burch",
                "S. Diehl"
            ],
            "title": "TimeRadarTrees: Visualizing Dynamic Compound Digraphs",
            "venue": "Computer Graphics Forum, 27(3):823\u2013830,",
            "year": 2008
        },
        {
            "authors": [
                "M. Cameron",
                "M. Garc\u00eda de la Banda",
                "K. Marriott",
                "P. Moulder"
            ],
            "title": "ViMer: A Visual Debugger for Mercury",
            "venue": "In Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming,",
            "year": 2003
        },
        {
            "authors": [
                "S.M. Casner"
            ],
            "title": "Task-Analytic Approach to the Automated Design of Graphic Presentations",
            "venue": "ACM Transactions on Graphics, 10(2):111\u2014-151,",
            "year": 1991
        },
        {
            "authors": [
                "S. Chaturvedi",
                "C. Dunne",
                "Z. Ashktorab",
                "R. Zachariah",
                "B. Shneiderman"
            ],
            "title": "Group-in-a-Box Meta-Layouts for Topological Clusters and Attribute- Based Groups: Space-Efficient Visualizations of Network Communities and Their Ties",
            "venue": "Computer Graphics Forum, 33(8):52\u201368,",
            "year": 2014
        },
        {
            "authors": [
                "V. Dibia",
                "C. Demiralp"
            ],
            "title": "Data2Vis: Automatic Generation of Data Visualizations Using Sequence-to-Sequence Recurrent Neural Networks",
            "venue": "IEEE Computer Graphics and Applications, 39(5):33\u201346,",
            "year": 2019
        },
        {
            "authors": [
                "H. Ehsan",
                "M.A. Sharaf",
                "P.K. Chrysanthis"
            ],
            "title": "MuVE: Efficient Multi- Objective View Recommendation for Visual Data Exploration",
            "venue": "Proceedings of the 32nd International Conference on Data Engineering, ICDE \u201916, pp. 731\u2013742. Helsinki, Finland, May 16\u201320",
            "year": 2016
        },
        {
            "authors": [
                "O. Febbraro",
                "K. Reale",
                "F. Ricca"
            ],
            "title": "ASPIDE: Integrated Development Environment for Answer Set Programming",
            "venue": "Logic Programming and Nonmonotonic Reasoning, pp. 317\u2013330. Springer Berlin Heidelberg,",
            "year": 2011
        },
        {
            "authors": [
                "M. Gebser",
                "R. Kaminski",
                "B. Kaufmann",
                "T. Schaub"
            ],
            "title": "Answer Set Solving in Practice",
            "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan & Claypool Publishers,",
            "year": 2012
        },
        {
            "authors": [
                "D. Gotz",
                "Z. Wen"
            ],
            "title": "Behavior-Driven Visualization Recommendation",
            "venue": "Proceedings of the 14th International Conference on Intelligent User Interfaces, IUI \u201909, pp. 315\u2013\u2013324. ACM, Sanibel Island, FL, USA, Feb 8\u201411",
            "year": 2009
        },
        {
            "authors": [
                "N. Henry",
                "J.-D. Fekete",
                "M.J. McGuffin"
            ],
            "title": "NodeTrix: a Hybrid Visualization of Social Networks",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 13(6):1302\u20131309,",
            "year": 2007
        },
        {
            "authors": [
                "M. Hopfner",
                "D. Seipel",
                "J. von Gudenberg"
            ],
            "title": "Comprehending and visualizing software based on XML-representations and call graphs",
            "venue": "In Proceedings of the 11th International Workshop on Program Comprehension,",
            "year": 2003
        },
        {
            "authors": [
                "K.Z. Hu",
                "M.A. Bakker",
                "S. Li",
                "T. Kraska",
                "C.A. Hidalgo"
            ],
            "title": "VizML: A Machine Learning Approach to Visualization Recommendation",
            "venue": "Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems, CHI\u2019 2019, p. 128. ACM, Glasgow, Scotland, UK, May 4\u20139",
            "year": 2019
        },
        {
            "authors": [
                "S.R. Humayoun",
                "H. Ezaiza",
                "R. AlTarawneh",
                "A. Ebert"
            ],
            "title": "Social-Circles Exploration through Interactive Multi-Layered Chord Layout",
            "venue": "Proceedings of the International Working Conference on Advanced Visual Interfaces, AVI \u201916, pp. 314\u2014-315. ACM, Bari, Italy, June 7\u201310",
            "year": 2016
        },
        {
            "authors": [
                "P. Kaur",
                "M. Owonibi"
            ],
            "title": "A Review on Visualization Recommendation Strategies",
            "venue": "In Proceedings of the 12th International Joint Conference on Computer Vision, Imaging and Computer Graphics Theory and Applications - IVAPP, VISIGRAPP",
            "year": 2017
        },
        {
            "authors": [
                "P. Kubern\u00e1tov\u00e1",
                "M. Friedjungov\u00e1",
                "M. van Duijn"
            ],
            "title": "Constructing a Data Visualization Recommender System",
            "venue": "In Data Management Technologies and Applications, pp. 1\u201325. Springer International Publishing,",
            "year": 2019
        },
        {
            "authors": [
                "C. Lewis"
            ],
            "title": "Using the \"Thinking Aloud\" Method in Cognitive Interface Design",
            "venue": "Research report. IBM Thomas J. Watson Research Division,",
            "year": 1982
        },
        {
            "authors": [
                "A. Lhuillier",
                "C. Hurter",
                "A. Telea"
            ],
            "title": "State of the Art in Edge and Trail Bundling Techniques",
            "venue": "Computer Graphics Forum, 36(3):619\u2013645,",
            "year": 2017
        },
        {
            "authors": [
                "V. Lifschitz"
            ],
            "title": "Answer Set Programming",
            "venue": "Springer Publishing Company, Inc., 1st ed.,",
            "year": 2019
        },
        {
            "authors": [
                "Y. Luo",
                "X. Qin",
                "N. Tang",
                "G. Li"
            ],
            "title": "DeepEye: Towards Automatic Data Visualization",
            "venue": "Proceedings of the 34th International Conference on Data Engineering, ICDE \u201918, pp. 101\u2013112. Paris, France, Apr 16\u201320",
            "year": 2018
        },
        {
            "authors": [
                "J. Mackinlay",
                "P. Hanrahan",
                "C. Stolte"
            ],
            "title": "Show Me: Automatic Presentation for Visual Analysis",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 13(6):1137\u20131144,",
            "year": 2007
        },
        {
            "authors": [
                "S. Miksch",
                "W. Aigner"
            ],
            "title": "A matter of time: Applying a data\u2013users\u2013tasks design triangle to visual analytics of time-oriented data",
            "venue": "Computers & Graphics, 38:286\u2013290,",
            "year": 2014
        },
        {
            "authors": [
                "D. Moritz",
                "C. Wang",
                "G.L. Nelson",
                "H. Lin",
                "A.M. Smith",
                "B. Howe",
                "J. Heer"
            ],
            "title": "Formalizing Visualization Design Knowledge as Constraints: Actionable and Extensible Models in Draco",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 25(1):438\u2013448,",
            "year": 2019
        },
        {
            "authors": [
                "C. M\u00fcller",
                "B. Martin",
                "A. Lumsdaine"
            ],
            "title": "A comparison of vertex ordering algorithms for large graph visualization",
            "venue": "Proceedings of the 6th International Asia-Pacific Symposium on Visualization, PacificVis \u201907, pp. 141\u2013148. Sydney, Australia, Feb 5\u20137",
            "year": 2007
        },
        {
            "authors": [
                "T. Munzner"
            ],
            "title": "A Nested Model for Visualization Design and Validation",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 15(6):921\u2013 928,",
            "year": 2009
        },
        {
            "authors": [
                "F. Nielsen"
            ],
            "title": "Hierarchical clustering",
            "venue": "Introduction to HPC with MPI for Data Science, pp. 195\u2013211. Springer International Publishing,",
            "year": 2016
        },
        {
            "authors": [
                "C. Nobre",
                "M. Streit",
                "M. Meyer",
                "A. Lex"
            ],
            "title": "The State of the Art in Visualizing Multivariate Networks",
            "venue": "Computer Graphics Forum, 38:807\u2013 832,",
            "year": 2019
        },
        {
            "authors": [
                "B. Pointner"
            ],
            "title": "An Interactive Visualization Approach to Tackle Design Constraints in a Rule-Based Recommendation System",
            "venue": "Master\u2019s thesis, TU Wien, Vienna, Austria,",
            "year": 2022
        },
        {
            "authors": [
                "H.C. Purchase"
            ],
            "title": "Metrics for Graph Drawing Aesthetics",
            "venue": "Journal of Visual Languages & Computing, 13(5):501\u2013516,",
            "year": 2002
        },
        {
            "authors": [
                "B. Saket",
                "D. Moritz",
                "H. Lin",
                "V. Dibia",
                "\u00c7. Demiralp",
                "J. Heer"
            ],
            "title": "Beyond Heuristics: Learning Visualization Design",
            "venue": "CoRR, abs/1807.06641,",
            "year": 2018
        },
        {
            "authors": [
                "J.M. Santos",
                "P. Dias",
                "B.S. Santos"
            ],
            "title": "Implementation and Evaluation of an Enhanced H-tree Layout Pedigree Visualization",
            "venue": "Proceedings of the 16th International Conference on Information Visualisation, IV \u201912, pp. 24\u201329. Montpellier, France, July 11\u201313",
            "year": 2012
        },
        {
            "authors": [
                "A. Satyanarayan",
                "D. Moritz",
                "K. Wongsuphasawat",
                "J. Heer"
            ],
            "title": "Vega-Lite: A Grammar of Interactive Graphics",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 23(1):341\u2013350,",
            "year": 2017
        },
        {
            "authors": [
                "H.-J. Schulz"
            ],
            "title": "Treevis.net: A Tree Visualization Reference",
            "venue": "Computer Graphics and Applications,",
            "year": 2011
        },
        {
            "authors": [
                "H.-J. Schulz",
                "C. Hurter"
            ],
            "title": "Grooming the hairball - how to tidy up network visualizations? In Proceedings of the IEEE Information Visualization Conference, INFOVIS\u2019 13",
            "venue": "Atlanta, GA, USA, Oct 13\u201318",
            "year": 2013
        },
        {
            "authors": [
                "H.-J. Schulz",
                "H. Schumann"
            ],
            "title": "Visualizing Graphs - A Generalized View",
            "venue": "Proceedings of the 10th International Conference on Information Visualisation, IV\u2019 06, pp. 166\u2013173. London, UK, July 5\u20137",
            "year": 2006
        },
        {
            "authors": [
                "J. Seo",
                "B. Shneiderman"
            ],
            "title": "A Rank-by-Feature Framework for Interactive Exploration of Multidimensional Data",
            "venue": "Information Visualization, 4(2):96\u2013 113,",
            "year": 2005
        },
        {
            "authors": [
                "B. Shneiderman"
            ],
            "title": "The eyes have it: a task by data type taxonomy for information visualizations",
            "venue": "Proceedings of the IEEE Symposium on Visual Languages, VL \u201996, pp. 336\u2013343. Boulder, CO, USA, Sep 3\u20136",
            "year": 1996
        },
        {
            "authors": [
                "R. Sinha",
                "K. Swearingen"
            ],
            "title": "The Role of Transparency in Recommender Systems",
            "venue": "Proceedings of CHI \u201902 Extended Abstracts on Human Factors in Computing Systems, CHI EA \u201902, pp. 830\u2014-831. ACM, Minneapolis, MN, USA, Apr 20\u201325",
            "year": 2002
        },
        {
            "authors": [
                "J. Stasko",
                "E. Zhang"
            ],
            "title": "Focus+context display and navigation techniques for enhancing radial, space-filling hierarchy visualizations",
            "venue": "Proceedings of the IEEE Symposium on Information Visualization, INFOVIS \u201900, pp. 57\u201365. Salt Lake City, UT, USA, Oct 9\u201310",
            "year": 2000
        },
        {
            "authors": [
                "M. Vartak",
                "S. Huang",
                "T. Siddiqui",
                "S. Madden",
                "A. Parameswaran"
            ],
            "title": "Towards Visualization Recommendation Systems",
            "venue": "SIGMOD Record, 45(4):34\u2013\u201339,",
            "year": 2017
        },
        {
            "authors": [
                "C. Vehlow",
                "F. Beck",
                "P. Auw\u00e4rter",
                "D. Weiskopf"
            ],
            "title": "Visualizing the Evolution of Communities in Dynamic Graphs",
            "venue": "Computer Graphics Forum, 34(1):277\u2013288,",
            "year": 2015
        },
        {
            "authors": [
                "C. Vehlow",
                "F. Beck",
                "D. Weiskopf"
            ],
            "title": "Visualizing Group Structures in Graphs: A Survey",
            "venue": "Computer Graphics Forum, 36(6):201\u2013225,",
            "year": 2017
        },
        {
            "authors": [
                "F. Vi\u00e9gas",
                "M. Wattenberg",
                "D. Smilkov",
                "J. Wexler",
                "D. Gundrum"
            ],
            "title": "Generating charts from data in a data table, US Patent US201662401647P, 2017",
            "year": 2017
        },
        {
            "authors": [
                "E. Wall",
                "M. Agnihotri",
                "L. Matzen",
                "K. Divis",
                "M. Haass",
                "A. Endert",
                "J. Stasko"
            ],
            "title": "A Heuristic Approach to Value-Driven Evaluation of Visualizations",
            "venue": "IEEE Transactions on Visualization and Computer Graphics, 25(1):491\u2013500,",
            "year": 2019
        },
        {
            "authors": [
                "W. Wang",
                "H. Wang",
                "G. Dai",
                "H. Wang"
            ],
            "title": "Visualization of Large Hierarchical Data by Circle Packing",
            "venue": "Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI \u201906, pp. 517\u2014-520. ACM, Montr\u00e9al, Qu\u00e9bec, Canada, April 22\u201327",
            "year": 2006
        },
        {
            "authors": [
                "K. Wongsuphasawat",
                "Z. Qu",
                "D. Moritz",
                "R. Chang",
                "F. Ouk",
                "A. Anand",
                "J. Mackinlay",
                "B. Howe",
                "J. Heer"
            ],
            "title": "Voyager 2: Augmenting Visual Analysis with Partial View Specifications",
            "venue": "Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems, CHI \u201917, pp. 2648\u2014 -2659. ACM, Denver, CO, USA, May 6\u201311",
            "year": 2017
        },
        {
            "authors": [
                "L. Woodburn",
                "Y. Yang",
                "K. Marriott"
            ],
            "title": "Interactive Visualisation of Hierarchical Quantitative Data: An Evaluation",
            "venue": "Proceedings of the IEEE Visualization Conference, VIS \u201919, pp. 96\u2013100. Vancouver, BC, Canada, Oct 20\u201325",
            "year": 2019
        },
        {
            "authors": [
                "H. Zhou",
                "P. Xu",
                "H. Qu"
            ],
            "title": "Visualization of bipartite relations between graphs and sets",
            "venue": "Journal of Visualization, 18:159\u2013172,",
            "year": 2015
        },
        {
            "authors": [
                "M.X. Zhou",
                "S. Feiner"
            ],
            "title": "IMPROVISE: Automated Generation of Animated Graphics for Coordinated Multimedia Presentations",
            "venue": "Proceedings of the 2nd International Conference on Cooperative Multimodal Communication, CMC\u2019 98, pp. 43\u201363. Springer, Tilburg, The Netherlands, Jan 28\u201330",
            "year": 1998
        }
    ],
    "sections": [
        {
            "text": "Index Terms\u2014Visual Analytics, hypergraph visualization, rule-based recommendation systems"
        },
        {
            "heading": "1 INTRODUCTION",
            "text": "Creating effective charts and plots is becoming a crucial task with today\u2019s increasing number of data and its complexity. Visual encodings, such as visual channels, mark types, binning and aggregation operations, faceted view, and others, must be carefully selected and used to visualize given data effectively. This knowledge of how to properly use and apply these encodings can be learned from books, scientific papers, courses in schools, and similar. Researchers argue that visualization research should go beyond manually curated and applied visualization design guidelines [34]. Design guidelines are continually evolving. Consequently, visualization recommendation systems\n\u2022 Johanna Schmidt and Bernhard Pointner are with VRVis Zentrum f\u00fcr Virtual Reality und Visualisierung Forschungs-GmbH. E-mail: johanna.schmidt@vrvis.at.\n\u2022 Silvia Miksch is with the Centre for Visual Analytics Science and Technology (CVAST) at TU Wien. E-mail: silvia.miksch@tuwien.ac.at.\nManuscript received xx xxx. 201x; accepted xx xxx. 201x. Date of Publication xx xxx. 201x; date of current version xx xxx. 201x. For information on obtaining reprints of this article, please send e-mail to: reprints@ieee.org. Digital Object Identifier: xx.xxxx/TVCG.201x.xxxxxxx\nfor automated visualization design have enjoyed increasing interest. Visualization recommendation systems suggest proper visualizations (mostly charts/plots) for a given dataset, according to pre-defined rules. As one of the most prominent representatives, Moritz et al. [27] proposed Draco in 2018. The Draco editor is shown in Figure 2. Based on the Vega-Lite grammar [36], a high-level language for visualization, Draco defines a vast set of rules for recommending visualizations based on given data. Users can define datasets and constraints (e.g., the data domains they are interested in), and Draco will recommend fitting visualizations based on the rules that have been stored beforehand. In Figure 2, users provided contextual factors (such as column importance and task type). Draco uses predicates to condition the visualization of scatter plots with color to include a third attribute.\nThe motivation for a thesis [32] and this paper arose from a detailed analysis of Draco\u2019s application to real-world problems. We specifically concentrated on Draco since it is freely available (compared to Excels or Tableau\u2019s recommendation principles) and is one of the success stories in the visualization research community and, therefore, is well-known. As it can be seen in Figure 1 (left) and Figure 2, Draco informs the user about how much a recommended visualization violates the given constraints (i.e., costs indicated below every recommendation). Costs can be used as a hint of how well the visualization fits the data. Apart from\nar X\niv :2\n30 7.\n12 86\n6v 1\n[ cs\n.G R\nthe costs, the rules that led to a visualization being considered not optimal are not revealed to the user. As such, Draco currently lacks a deeper understanding of how and which rules influence the recommendation process, and which factors lead to a visualization being considered optimal (or not). This leads to the fact that recommended visualizations cannot be directly compared, and specific soft constraints\u2019 influence on these recommendations is unclear. From a visualization designer\u2019s perspective, it is impossible to get an overview of which rules are already included in the systems and their interconnections. Draco uses Answer Set Programming (ASP) to interpret its rules (see section 3 for a more detailed description). This means that when wanting to work with the set of rules and guidelines directly, visualization designers would have to make themselves familiar with logic programming in general and ASP in particular. The rules are only textually encoded and no advanced filter or reorganization mechanisms are available. Due to the lack of a visual interface, the current implementation of Draco requires the user to know how to formulate logical expressions syntactically correctly, which parameters are already encoded into the system, and how the expressions relate to each other. It is, therefore, a very time-consuming task to investigate the system\u2019s ingredients and purpose.\nWe believe that new Visual Analytics approaches toward understanding Draco\u2019s recommendation system\u2019s set of rules and recommendation process should be prioritized. It is helpful for Draco users and visualization designers to understand visualization recommendations better, and it will open up possibilities for the visual representation of rule-based systems in general. This also reflects the current discussions on explainable AI [4] and, similarly, on explainable recommendation systems [42]. Making Draco more accessible and understandable by researchers and visualization designers would create the basis for further developments. To address these gaps, we propose a Visual Analytics (VA) approach to understanding rule-based recommendations of the visualization recommendation system Draco. Our proposed approach aims to investigate the internal set of rules of Draco and find proper tooling and visualization to support developers, researchers, and designers in better understanding the system.\n\u2022 We propose adding meta-data to Draco\u2019s constraints and visualizing them to reveal the underlying interrelationships using a hypergraph structure inside the radial-arranged layout. This helps visualization experts gain the desired insights into the underlying set of rules (section 4).\n\u2022 We propose visually connecting the recommendation results with the constraints and highlighting respective violations. This enables experts to adjust the constraints and their weights accordingly to concrete preferences (section 4).\n\u2022 The effectiveness of our proposed VA concepts is shown by applying it to use cases (section 4) and by evaluating it quantitatively and qualitatively using performance analyses, heuristic-based evaluation methodology, and interviews (section 6)."
        },
        {
            "heading": "2 RELATED WORK",
            "text": "Visualization recommendation systems Several integrations and applications of data visualization recommendation systems have been proposed in the last years [20], with Draco [27] as one of the most prominent examples. Recommendation systems have also already been incorporated into publicly available and known data analysis tools,\nlike Tableau\u2019s Show Me feature [25] and Google\u2019s Explore tool [47]. Four types of recommendation systems can be distinguished [19]: Data characteristics-oriented, task-oriented, domain knowledge-oriented, and user preference-oriented. This categorization was extended by Vartak et al. [44] with the field of \u2018visual ease of understanding.\u2019 The majority of the most relevant visualization recommendation systems can be categorized as data characteristics oriented. Such systems recommend visualizations based on the characteristics of the data. In contrast, task-oriented approaches focus on the user\u2019s intent respectively goal. For instance, BOZ [8] analyses tasks encoded as logical facts and produces graphics with perceptional instructions to reach the goal. IMPROVISE [53] performs a natural language query on the user\u2019s intents to extract and automatically propose visual tasks. Other task-oriented systems are HARVEST [14] or the more recent DataSlicer [1].\nWe can further distinguish between approaches recommending what data to show (e.g., automatic feature ranking [40] or view suggestions [11]) in contrast to how to show data giving recommendations for charts and plots (e.g., Voyager 2 [50], DeepEye [24], VizML [17], Data2Vis [10], and, as already mentioned, Draco [27]). The underlying recommendation strategies differ by rule-based, machine learningbased, and hybrid approaches. Earlier recommendation strategies mainly encoded decisions on visualization guidelines and principles as a set of rules and constraints. The predominant part of systems still rely on hand-crafted rules. Recent approaches, like VizML [17] and Data2Vis [10], increasingly use machine learning to create recommendations. These systems learn the relationships between design guidelines and principles and weight their influence on respective visual encodings. Draco [27] employs a hybrid approach that combines hand-crafted visualization facts as well as hard and soft constraints with learned weights from a Support Vector Machine (RankSVM) model trained on labeled visualization pairs.\nOur focus for showing how Visual Analytics can be used to understand a recommendation system\u2019s knowledge base is on Draco [27].\nVisualization for logic programming Since we focus on Draco [27] in this work, we explore on existing visualization approaches for understanding logical rules. The visualizations in the context of logic programming are very diverse and address different goals and steps. These steps reach from interpreting the logic programs using a proper visualization of the program to the visualization of the solvers\u2019 results. We especially concentrate on visualizations showing the program respectively the query encoded as logical expressions.\nDependency graphs are often used to show the relations between the units of a logic program. These graphs can be visualized as free node-link layout graphs, where the node positions are only dependent on their linked neighbor nodes or in tree respectively flow structures showing the deductions of the predicates. An example of free layout representing the dependencies of the units of a logic program in Prologstyle has been proposed by Hopfner et al. [16]. Their approach suggests a directed graph representing predicates as circles. Glyphs are then connected by arrow links showing the directions of the deductions. Another way to visualize logic programs in Prolog is by mapping the program to top-down trees [7]. The development environment ASPIDE [12] for answer-set programming integrates a visual editor for creating and modifying logic programs. The editor resembles a UML diagram typically used to describe classes and their properties in programming languages.\nOur approach builds upon existing ideas and employs a network visualization-based approach to visualize the knowledge base.\nGraph-based visualizations of set relationships There are almost uncountable graph-based approaches and applications for showing relationships between a set of entities. To get an overview, Nobre et al. [31] categorizes them into node-link layouts, tabular layouts, and implicit tree layouts. Node-link layouts are the most common graphical representation for graphs and networks. Schulz and Schumann [39] further subdivided such layouts into free layouts, where the nodes\u2019 positions are not restricted, styled layouts, where the positions follow a predefined scheme, and fixed layouts, where the position is determined by nodes\u2019 attributes, such as latitude and longitude. Examples of free\nlayouts are force-directed layouts where a node\u2019s position depends only on the links to its neighbors. Styled layouts typically make use of predefined schemes, like grids or axis-parallel and radial arrangements [31]. Besides, on-node and on-edge encoding is often used to encode additional information into graph visualizations.\nThe hair-ball problem mentioned by Schulz and Hurter [38] is typical in node-link layouts. When the number of nodes and links between those nodes exceeds a critical sum, the visualization suffers from cluttering and overplotting. To address this problem, researchers developed various approaches to reduce the clutter by aggregating or filtering either the nodes, the edges, or both. For example, edge bundling [22] and edge splatting [5] are very commonly used techniques. A different approach would be the use of hyperedges. The edges of a completely connected subset of nodes of a graph are removed, a new hypernode is added, and this introduced node is newly connected with the original nodes of the subset [2].\nWe used the approach of hypergraphs [2] to solve the problem of having too much clutter in the visual representation of the rules and constraints.\nVisualizations for hierarchical data Hierarchical data, in general, can be visualized in many different ways. Schulz [37] suggests three design axis to describe such tree visualizations: dimensionality (2d, 3d, hybrid), edge representation (explicit, i.e., links, or implicit, e.g., placement), and node alignment (radial, axis-parallel, or free). Dimensionality referes to displaying the data in 2 or more dimensions. Edge representation can be done explicitly, e.g., tidy trees [35] also know as Dendograms. Typical examples [43] for implicit edge representations of hierarchical structures are icicle plots, sunburst charts, sundown charts, or treemaps. This list can be extended by circle packing approaches [49] which is a subcategory of treemaps, and hybrid approaches, like phylogenetic trees [30].\nMost relevant related to our approach are visualization showing hierarchical structures in graphs. Vehlow et al. [46] categorized the visualization of hierarchical graph structures the approaches visual node attributes (flat group structures), juxtaposed (side-by-side), superimposed (nested), and embedded (aggregated) visualizations. Visualizations employing a visual node attributes approach mostly follow the principle of displaying node-link diagrams with different layouts [33] or matrix-based solutions [28]. Juxtapositioned approaches display the group information next to the graph, either separate [52] or attached [6]. Superimposed approaches place all information in the same space [45]. Embedded solutions either include group information in node-link representations [9], or use hybrid solutions (e.g., based on matrix representations) for displaying group information [15].\nWe also deal with hierarchical structures in our data domain. In our approach we followed an embedded [46] visualization approach to include the hierarchical information in the graph representation."
        },
        {
            "heading": "3 TERMS AND DEFINITIONS",
            "text": "In the following we outline the terms and definitions which will be used in the further course of this manuscript. The term definitions partially span from Draco\u2019s definition of the knowledge base and our data extraction pipeline, which is explained in section 4.\n\u2022 Facts: Draco embeds Vega-Lite [36] as a formal language to describe its known visualizations. Vega-Lite defines visualizations as a set of mappings from data attributes to graphical elements in a visualization (e.g., x-axis, y-axis, size, color). Draco encodes Vega-Lite visualization building blocks as logical facts. Facts describe the properties of the input data and the specified visual encodings (e.g., x-axis mapping).\n\u2022 Constraints: To select proper visualizations (e.g., a bar chart with vertical bars), Draco uses design guidelines, realized as constraints over logical facts. The constraints restrict which facts can appear together and which combinations might be preferred. Hard constraints prune visual encodings which would result in non-expressive or ill-formed visualization specifications. Soft constraints may be violated by a recommendation and determine the final ranking of the recommendation.\n\u2022 Knowledge base: Draco currently holds an (extendable) list of about 230 hard and soft constraints. Facts and hard and soft constraints together are defined as Draco\u2019s knowledge base.\n\u2022 Features: We parsed Draco\u2019s knowledge base and extracted common elements shared by several constraints as features. We later use these features in our VA approach.\nFor recommending visualizations, Draco combines the facts and hard and soft constraints stored in the knowledge base with learned weights from a Support Vector Machine (RankSVM) model. The model was trained beforehand on labeled visualization pairs. During a recommendation process, Draco processes an input (consisting of a dataset definition, its partial specification, and a user task) to a query definition describing a data schema and query constraints. This query definition is combined with the predefined search space definition consisting of aggregate rules, wellformedness constraints, expressiveness constraints, and the preference model. Draco calls an ASP solver, in this case Clingo [13], to solve the resulting program and subsequently, to obtain ranked answer sets. These answer sets are eventually translated to Vega-Lite specifications. A provided web-based Application Programming Interface (API) of Draco facilitates easy access to the module and decouples Draco from a tool using the system."
        },
        {
            "heading": "4 VISUAL ANALYTICS FOR RULE-BASED SYSTEMS",
            "text": "Before creating a visualization, we had to parse the knowledge base (subsection 4.1). Afterward we define requirements for our VA application and explore different design options (subsection 4.2). We propose an interactive, web-based approach (subsection 4.3) and analyze its usage with respect to specific use cases (subsection 4.4)."
        },
        {
            "heading": "4.1 Knowledge Base Parsing and Feature Extraction",
            "text": "Draco\u2019s knowledge base is expressed in Answer Set Programming (ASP), a declarative constraint-based logic programming language [23]. To organize the knowledge base and make it more readable, Draco\u2019s logical expressions have several peculiarities that are not mandatory requested by ASP. Expressions sharing the same goal are grouped in sections. Rules called hard and soft constraints in Draco share the predicates hard and so f t in the head of the rule (see also Figure 3, top).\nThe first argument of each soft and hard predicate represents the identifier of the constraint (bin_height in Figure 3, top). Variables are ASP elements to describe unknown (at the time of definition) individuals. In Figure 3 (top), a variable B is used to define the current number of bins. Variables are shortened to a maximum of three letters in Draco. This notation was chosen to increase the readability of the constraints. In total, in the knowledge base, only single-line comments are used.\nAlthough these additional notations are well-considered, ambiguities arise for users who were not involved in the development phase. At first glance, it is unclear what predicates and variables are used in the knowledge base and in which context they are used. Even though the knowledge base developers did their best to find appropriate and expressive names for the predicates and variables, it is not always clear what these arguments are intended for. Their purpose can only be derived by looking at the different contexts where this argument is used. Comments describe the purpose and also the origin of constraints. However, these only constitute textual information. Overlaps of constraints can only be derived through pairwise comparing the constraints.\nHence, we derived that neither the data format of the logical expressions nor their representation is optimal for comprehending Draco\u2019s knowledge base and maintaining it. We decided to extract the essential information from the knowledge base for a better picture. For this, we used the ASP parser of Draco and produced an Abstract Syntax Tree (AST) of the knowledge base. The AST extraction provided by Draco\u2019s Clingo parser could not be used due to missing Python command-line support. We developed an ASP solver using a parser generator capable of returning an AST of the knowledge base.\nGringo [13] is used to parse Draco\u2019s knowledge base and ground over it. However, their suggested Extended Backus\u2013Naur form (EBNF) notation of the grammar follows no standard notation style, which is accepted by popular web-based parser generators. Consequently, since we did not find a suitable grammar notation of ASP integrating the syntax features of Gringo, we decided to adapt the grammar of the ASP-Core 2 standard to our needs. This approach is supported and justified, as many introduced syntax features of Gringo are not required to be able to parse the main part of the knowledge base (facts and constraints). The resulting EBNF-based grammar of ASP having the ASP-Core 2 input syntax standard can subsequently be easily used by a parser generator accepting the World Wide Web Consortium (W3C) standard. We used the Open Source code of an EBNF parser generator to generate an easy processable Abstract Syntax Tree (AST) out of Draco\u2019s knowledge base. In the generated AST, every node or leaf constitutes a reference to the corresponding terminal definition in the original grammar. We used the AST to extract information about the defined facts and constraints. An example of such an AST can be seen in Figure 3, where an AST generated from a soft constraint is shown.\nOur full data extraction pipeline is depicted in Figure 4. Generating an AST from the knowledge base enabled us to extract shared syntax elements from the facts and constraints. We refer to these shared\nelements as features. Features were extracted in our data extraction pipeline 1. In a parallel step called data extraction pipeline 2, we pulled the assigned weights for all hard and soft constraints from the knowledge base. We used Draco\u2019s own REGEX extraction approach to get this information. Constraints were already annotated in Draco, considerably simplifying this classification and extraction process. The constraints hierarchy could be computed by processing the constraints\u2019 identifiers resulting from the Draco\u2019s own REGEX extraction approach. As a result of both steps, we received shared features (pipeline 1) and constraints with assigned weights and their hierarchy (pipeline 2).\nIn the last step of our parsing and feature extraction pipeline, we united the results from both pipelines into one unique database. We connected constraints based on their shared features. Since features are organized in a hierarchical way, we eventually obtained a hierarchical data structure. We store the entire dataset in a unified database that contains all constraints, features, and the hierarchy of the constraints, using a file-based indexed database."
        },
        {
            "heading": "4.2 Visualization Design",
            "text": "The design triangle by Aigner and Miksch [26] describes the fundamental aspects influencing the design of VA solutions. It contains the three major key aspects of data, users, and tasks. Based on this definition, we define the following three key elements of our solution:\n\u2022 Data: The knowledge base of Draco comprises around 150 soft constraints and 70 hard constraints. We extracted shared features among the constraints applying our data extraction pipeline (subsection 4.1). The final dataset consists of constraints and shared features stored in one database.\n\u2022 Users: The target users for our VA approach are visualization experts and persons in the research community of automated visualization recommendation and design.\n\u2022 Tasks: We identify the following tasks:\n\u2013 T1: Analyze the distribution of constraint weights. This task relates to users being able to better understand the weight distribution within the knowledge base.\n\u2013 T2: Identify shared syntax features of multiple constraints. To get an overview of the existing rules, interrelations between the constraints should be made visible.\n\u2013 T3: Understand violations of recommendations. For a given recommendation, users should be able to see which constraints have been violated.\n\u2013 T4: Find recommendations that violate a specific constraint. For a given constraint, users will need to find out which recommendations violate this constraint.\n\u2013 T5: Identify recommendations sharing the same violations. Users want to compare multiple recommendations.\nThe connections between constraints (defined by shared features) can be interpreted as links between constraints. Therefore, as a first approach, we started to apply graph- and network-based visualization techniques. In this prototype, we rendered a network where every constraint represented a node, and every feature-based connection between these constraints (nodes) represented an edge. However, we quickly realized that this kind of edge-mapping results in a very dense graph due to the high number of shared features.\nFeature-based connections To reduce the number of connections within our graph structure, we introduce hyperedges [2]. Visualization designers use hyperedges to reduce the number of edges. For every hyperedge, a new node is created in the graph. In our case, every new node represents a feature. The new nodes are connected to all the constraints sharing this feature. Using hyperedges reduces the number of e edges for n nodes from O(n\u2217 (n\u22121)/2) edges to O(n) edges.\nWe, again, applied node-link visualization to the resulting hypergraph. An initial node-link representation of the hypergraph with a free node-link layout without ordering or attribute-based positioning of the nodes and edges can be seen in Figure 5. Obtaining meaningful structures or orders from the graph was difficult. Due to the flexible layout, each re-drawing cycle of this hypergraph led to repositioning the nodes and edges. It was hard to detect related nodes in this unstructured free node-link layout, and perform any attribute-based sorting of the nodes was infeasible.\nNode positioning To fix the positioning of the nodes, we add positioning restrictions rules to our visualization. These rules ensure that the nodes retain their position and the context for every re-drawing cycle of the graph. Nobre et al. [31] distinguished between styled layouts and fixed layouts. A fixed layout is not applicable, as the constraints do not have any attributes describing an x/y position in a certain space. Hence, a styled layout is required that adds a positioning pattern to the nodes, like arranging them in a line or along a circle. Although the linear arrangement resembles the natural 1D line-based arrangement of the constraints in their code base, many connections between the nodes would lead to a cluttered visualization. We select a radial layout, as it best illustrates a self-contained system where the order of the constraints is not decisive. Furthermore, in a radial positioning, the constraints enclose the nodes representing shared features, which best resembles the visual connection between constraints and feature nodes. The radial approach is additionally supported by other related approaches [3], where space-efficient representations are required. Our radial layout can be seen in Figure 1 (right) and in Figure 6 and Figure 7.\nConstraint weights The constraints are represented as nodes around a large circle. In the case of soft constraints, nodes are colored according to their weight (as seen in Figure 6 and Figure 7). We choose a diverging colormap between blue and red with white in the middle. The color blue identifies soft constraints with zero weight, and the red color constraints with the maximum weight related to the total range of the weights 0\u2212 50. Since hard constraints have no weight assigned, all hard constraint nodes share the same color. The nodes\u2019 weight labels are rotated according to the angle of the node in relation to the center of the circle (see Figure 6). The problem of poorly readable labels caused by their rotation is tackled by mirroring them between the angles of 90 and 270 degrees (supported by similar layouts [18]).\nConstraints hierarchy Constraints are organized in a hierarchy. There are two possibilities for placing the hierarchical groups next to a graph visualization [45]. We distinguish between an inside-out and outside-in strategy. In the inside-out layout, the root of the hierarchy is placed next to the nodes of the inner circle and the leaf nodes at the outermost circle, depending on the number of levels of the hierarchy. Such a layout is often called a sunburst layout [51]. The outside-in strategy reverses this direction. Leaf nodes of the hierarchy are placed next to the nodes representing the constraints. In Draco, the constraints\u2019 identifiers form a hierarchy with variable depths in the leaf levels. Due to this variability, an outside-in layout would introduce empty visual holes toward the center of the graph visualization. We, therefore, employ the inside-out strategy and attach the hierarchical root layers in the innermost circle (see Figure 7). The labels of the constraints are\nmoved outwards so that they are not hidden under the surrounding arcs. The arcs are colored according to the average weight of the respective enclosed constraints. These colored arcs simplify finding groups of constraints with very low or very high weights. They encode their underlying name as a textual label in the arcs\u2019 center to identify them. These labels are rotated according to the arcs and shortened when the labels exceed the arcs.\nHypergraph In our hypergraph, shared features are represented as new nodes connected to the constraints that share these features. Connecting a subset of constraints sharing the same features with simple links results in a fully connected sub-graph. We place the hypergraph inside the radial representation of constraints. Every feature node is visually labeled by the feature\u2019s content and connected to every constraint that shares this feature. A feature node\u2019s position in the hypergraph depends on its connections to the constraints. We compute a weighted centroid based on the connections to constraint nodes, to which the feature node position converges (Figure 8). Since at least three surrounding constraints always form a regular-shaped polygon, the centroid is invariably inside the outer circle. However, to ensure that feature nodes connecting only one or two nodes fit this positioning restriction, we introduce a maximum radius Rmax to which feature nodes can converge."
        },
        {
            "heading": "4.3 Visual Analytics Approach",
            "text": "We implement our interactive VA approach for exploring Draco\u2019s knowledge base based on the described design decisions. The final VA application, which can be seen in Figure 9, comprises four major parts:\n1. Recommendation query editor: The recommendation query editor enables users to define an input query to the recommendation engine of Draco. It contains a definition of the data source, its column fields and data types, and statements defining the exploration task regarding the dataset. The query editor allows limiting the number of visualizations to be recommended by Draco.\n2. Recommendation viewer: The recommendation viewer shows Draco\u2019s recommendations in a tabular view. Depending on the browser window width, multiple columns are shown. The visualizations are sorted row-wise according to their costs (low costs are better). A recommendation\u2019s details can be viewed in a tooltip by mouse selection.\n3. Constraints viewer: The constraints viewer shows Draco\u2019s knowledge base as a hypergraph representation. Multiple controls are available to manipulate the shown data and explore it, for example, switching between hard and soft contraints.\n4. Constraints inspector: The constraints inspector shows the raw data of the constraints in a scrollable list view. Two controls allow to switch between the soft and hard controls and to filter respectively search them using a free text search field.\nUsers start an analysis by first asking Draco for recommendations in the recommendation query editor (1). Users can specify a dataset and define which attributes should be visualized here. Afterward, the visualizations recommended by Draco are shown in the recommendation viewer (2). At the same time, Draco\u2019s knowledge base is visualized as a hypergraph in the constraints viewer (3). Users can now switch between interacting with the recommendations on the left or the hypergraph showing the constraints in the middle. When users are interested in learning more details about specific constraints, these details are shown on mouse click in the constraints inspector (4).\nThe application allows hiding each view independently. Containers are not only collapsable but also resizable. This resizable feature further improves the users\u2019 control over the views to optimize the used space regarding the user\u2019s task. Following Shneiderman\u2019s Visual InformationSeeking Mantra [41], users can use the following interactions to filter and explore the data:\nZoom, pan, and filter The hypergraph visualization (constraints viewer) can be freely zoomed and panned by mouse interaction. For zooming, the mouse wheel and/or mouse and keyboard interaction can be used. Panning is done by pressing the left mouse button and mouse movement. Users can revert back to the original visualization state by pressing a button. The hypergraph visualization (constraints viewer) incorporates a filter operation by clicking on constraint categories of interest. In addition, above the graph visualization, users can use dropdown boxes to choose between constraint types (hard or soft) and to select which feature representations should be used (e.g., variables vs. identifiers). We decided to not show hard and soft constraints together, since they define different concepts (i.e., hard constraints cannot be violated, and soft constraints have weights assigned).\nDetails on demand Since a user might be interested in the details of a set of constraints sharing a specific feature of interest, a tooltip (Constraints inspector) incorporating this information is shown at the bottom right when a feature is selected with mouse interaction (see Figure 10). The fixed position at the corner of the visualization reduces the amount of overlap, enabling the enlargement of the tooltip to show more information. The downside is that the visual distance between the clicked feature inside the graph and the tooltip is increased. However, we think that minimized overlaps and showing more information are more beneficial than directly drawing the tooltip next to the selected feature. The selected feature is highlighted.\nBrushing and linking We created links between the recommendation viewer and the constraints viewer. First, when hovering over a recommendation, the violated constraints are highlighted in the hypergraph. When selecting multiple recommendations, colors are assigned to the selected recommendations which are then reflected by colored stripes in the hypergraph. Whereas framing the recommendations by color works well in the recommendation viewer (colored borders), finding an appropriate highlighting method for the constraints viewer (nodes are tiny) is challenging. Further, one constraint can be violated by multiple recommended visualizations, and one recommendation can violate one constraint several times. We, therefore, propose using a textual label next to the node disclosing the number of violations of each constraint per recommended visualization. Each label shares the same color as its corresponding recommendation. The links to the connected features of the violated constraints are likewise highlighted to determine the affected features by the violations. The problem of overlapping colors is solved using different dash and gap patterns. Our proposed visualization can be seen in Figure 1. Second, users can hover over constraints in the hypergraph (constraints viewer) to see which recommendations violate these constraints."
        },
        {
            "heading": "4.4 Use-Case Scenarios",
            "text": "Our VA approach was designed with visualization designers as target users in mind (see also subsection 4.2). We defined five tasks that are relevant for this user group: T1 (analyzing the distribution of constraint weights) can be solved by analyzing the displayed weights (numbers and color) in our hypergraph visualization. T2 (identifying shared syntax features of multiple constraints) can be solved by highlighting feature node in the hypergraph. T3 (understanding violations of recommendations) can be solved by hovering over a recommended visualization in the recommendation viewer, which will highlight the respective constraints in the hypergraph. T4 (finding recommendations that violate a specific constraint) can be solved by hovering over constraints in the hypergraph, which will highlight all recommendations violating this constraint. T5 (identifying recommendations sharing the same violations) can be solved by selecting multiple recommendations in the recommendation viewer.\nAnalyzing the Knowledge Base The hypergraph (constraints viewer) itself provides an overview of the available rules in Draco. Analyzing the interrelationships between constraints is possible by hovering over feature in the hypergraph (Figure 11). The feature E (in the background) is shared by almost all constraints in the knowledge base. Other features are only connected to a view constraints. For example, the feature EN (hovered) is shared by constraints controlling variety of color (i.e., not having too many colors in a visualization) as well as constraints describing position entropy (i.e., overplotting issues). As such it is possible to find constraints encoding similar concepts.\nAnalyzing Recommendations This use case refers to starting with one or a set of recommendations and understanding which constraints have been affected. To compare multiple recommendations, we use different colors to highlight the recommendations and their constraints (T5). Such a use case is shown in Figure 12. Here the first (A) and the second (B) recommendations have been selected by the user. It can be seen that recommendations A and B violate the same constraints. A and B also have the same costs, so they are, in fact, quite similar. When hovering over a third recommendation (grey border), the new recommendation\u2019s violations are also highlighted. The third recommendation has higher costs (32 instead of 30) and is linked to a constraint (poritional < zero) that is not violated by A and B. This shows that the constraint that the x-axis (horespower should start with 0 adds to the costs of the third recommendation.)"
        },
        {
            "heading": "5 IMPLEMENTATION",
            "text": "We rely on a web-based technology stack. Angular is used as the underlying TypeScript-based framework to structure the code base in distinct self-contained parts. The ASP solver Clingo is integrated into the prototype as a compiled WebAssembly (WASM) module. This module is accessed by Draco\u2019s web-friendly TypeScript class to execute its knowledge base and, consequently, to generate the recommendations for a given input query. An EBNF parser library is integrated to parse Draco\u2019s knowledge base and create the desired AST. The extracted data is persisted in an Indexed Database (IndexedDb) - a widely supported database by modern browsers. For fast prototyping of the desired visualization, the used JavaScript library D3.js is a powerful toolset to manipulate Document Object Model (DOM) elements and to create complex Scalable Vector Graphics (SVG). Angular Material serves as a complementary component and styling library to quickly create common UI components, such as buttons, input fields, lists, and more. The source code and a demo of our VA approach is available at https: //github.com/vrvis/vis_draco_kb."
        },
        {
            "heading": "6 EVALUATION",
            "text": "Following the nested evaluation model of Munzner [29], the evaluation of the visualization\u2019s encoding and interaction design is required to assess the usefulness of the proposed approach. To test the visualization regarding its abilities, strengths, weaknesses, and value, we decided to combine four established evaluation methods to get broad feedback:\n\u2022 Observational task performance analysis\n\u2022 Thinking aloud [21]\n\u2022 Heuristic-based evaluation methodology (ICE-T) [48]\n\u2022 Qualitative interview These methods are relatively low-cost in their implementation expense and do not require additional equipment (e.g., eye-trackers). Additionally, only a small number of participants are required since studies show that five evaluators are enough to obtain more than 75 percent of the problems [48].\nThe applied evaluation process consists of five consecutive parts. Due to the complexity of the topic and the number of evaluation steps, 45 minutes were allotted for the entire process:\n1. Introduction: Collecting necessary meta-data of the test person and introducing the user to the topic and evaluation procedure. This first part contained an explanation of the general idea behind visualization recommendation systems, the different existing recommendation systems, the hybrid recommendation system Draco and its knowledge base, and a presentation of the main components of the proposed visualization. Participants had to agree to the evaluation\u2019s data recording, privacy, and anonymity terms.\n2. Free exploration: The test person could afterward freely explore the visualization and receives answers to upcoming questions. During this exploration, participants were encouraged to ask questions and to think out loud.\n3. Task performance analysis: The test person had to solve a set of 12 pre-defined tasks. Each task started with an introduction to the task, the targeted context, and its goals. As an aid, parts of the tool were hidden that were not required to solve the respective task. While solving a task, the task\u2019s description was always visible to the user. The tasks were completed when the test person entered an answer in a designated field and moved on by clicking a button. The tasks comprised the following topics:\n\u2022 Tasks 1-3: Working with costs (e.g., identifying soft constraints with exceptionally high costs or finding one hierarchy of constraints with very low average weight).\n\u2022 Tasks 4-6: Graph-based questions (e.g., identifying a variable that is part of most soft constraints or naming all constraints using the predicate \u2019aggregate\u2019).\n\u2022 Task 7-10: Understanding recommendations (e.g., identifying how often a given constraint is violated by a recommended visualization or naming at least one constraint by which two recommended visualizations differ).\n\u2022 Task 11-12: Understanding the effect of constraints on recommendations (e.g., identifying how many recommended visualizations are violated by a certain constraint).\n4. Heuristic evaluation: After completing the tasks, the test persons were asked to fill out the heuristic value-based survey (ICE-T) by Wall et al. [48].\n5. Qualitative interview: The test persons were asked to give answers to open-ended questions about the tool and the evaluation.\nThe evaluation was conducted via video communication tools. Audio and screen have been recorded. Since web browsers are independent of the operating system and the differences between the available browsers were insignificant, there was no special requirement about it. The test persons were asked to use an external 24-inch monitor with Full High Definition (FHD) resolution. A separate web-based evaluation tool has been created to guide the participants through the evaluation steps and to guarantee a uniform process. Every test person received an evaluation token which allows him/her to enter the evaluation. The token guaranteed that all results could be assigned to the test person while ensuring the person\u2019s anonymity.\nSince the chosen evaluation methods required only a small number of participants, we decided to pick six test users according to their former knowledge and experience in information visualization. An understanding of basic concepts of visualization/VA was a requirement in selecting appropriate test persons when considering the degree of specificity of the topic:\n\u2022 P1: 24 years old male master student of Visual Computing having four years of experience in data science and visualization, as well as participated in UX.\n\u2022 P2: 31 years old male who scientifically works in the field of visualization/VA with four years of professional experience. The test person stated that he was already familiar with Draco and its concepts but did not directly work with it.\n\u2022 P3: 39 years old female with a doctoral degree and eight years of experience in data science and visualization/VA.\n\u2022 P4: 25 years old male master student of Visual Computing having six years of experience in visualization/VA.\n\u2022 P5: 26 years old female master student of data science having three years of experience in visualization/VA.\n\u2022 P6: 32 years old male researcher in the field of biomedical image informatics with 11 years of experience in visualization/VA.\n.\nTask performance analysis Participants did not have problems solving tasks 1-3. Costs and their representation as colors were easy-tounderstand and easy to detect elements in the visualization. Similarly, all participants could easily and quickly solve tasks 4-6, which were about interpreting graph connections. For task 7, P2 and P6 were confused by the colored edges connected to the constraint and the number shown in the badge. All participants could solve tasks 8 and 9. For task 10, P1 likely misunderstood the question and declared a constraint on the answer. Tasks 11 and 12 caused the most problems for the participants. P3 and P6 first looked at the problem from the wrong perspective and needed hints to solve the task. P1 had issues understanding the task in the first place but then solved it correctly. P5 also misunderstood the task.\nHeuristic evaluation After completing the tasks, the heuristic value-driven survey (ICE-T) as defined by Wall et al. [48] was conducted. In this evaluation scheme, participants rate 21 statements according to whether they think they are true or false for the proposed\nvisualization. Statements are clustered into the four components of rating Insight, Time, Essence, and Confidence. Participants could rate the statements with a grade between 1 (strongly disagree) and 7 (strongly agree) or assign N/A if they did not know how to rate the statement. N/A was applied to statement 21 (\u2019If there were data issues like unexpected, duplicate, missing, or invalid data, the visualization would highlight those issues.\u2019) by all participants. Apart from statement 21, participants assigned N/A only in two other cases. The average ratings of the four evaluation components can be seen in Table 1. According to Wall et al. [48], an overall mean of 5 is the threshold of success. The results confirm that our proposed visualization helps users to provide a big picture of the data and an understanding of the data beyond individual data cases. P1 seemed to have problems receiving an overall essence of the data. P4, P5, and P6 worst-rated the confidence component since we received the most feedback from them regarding applied visual encodings, potential issues, and misleading representations.\nQualitative interview In the final questionnaire round, all test persons stated that they had a pleasing overall impression of the tool and its visualizations. They mentioned that it is easy to use, intuitive, and understandable. P4 pointed out that the visualization especially creates a good overview of which constraints, categories of constraints, and feature-based connections exist within the knowledge base of Draco. P6 noted that the domain and its data are, in general, very difficult to comprehend and thus, emphasized the importance of the introduction at the beginning of the evaluation \u2013 even for visualization experts. P4 and P5 stated that they had difficulties in using and understanding the filter functionality. They were confused by the checkboxes within the dropdown, and suggested showing all filter possibilities within one view without having to scroll them. P5 also did not expect to be able to select features by clicking on their labels. Sometimes she struggled to select nodes that are placed very close to each other. P4 and P6 suggested unifying the click behavior within the visualization. On the one hand, clicking on the categories leads to filtering the data, and on the other hand, clicking on the features leads to more detailed information. P5 heavily used the constraints inspector during the evaluation; she missed this list\u2019s advanced filter and sorting functionality. P2, P4, and P5 stated that the applied colormap from Blue to Red should be changed. The colors used for highlighting the recommended visualizations in the recommendation viewer are the same as applied for constraints\u2019 weights, and they found the diverging colormap misleading. P2 stated that it might convey that constraints having weights in the middle range are neutral.\nSummary Overall, the evaluation has shown that the proposed interactive visualization of the knowledge base viewer is suitable to answer questions regarding the visualization constraints and their shared features. The participants were able to identify the interrelations between the constraints and Draco\u2019s recommended visualizations based on highlighted violations. However, the evaluation has also shown that a detailed introduction to the topic is essential, even for participants being familiar with data visualizations. More details about the evaluation can be found in the supplemental material."
        },
        {
            "heading": "7 DISCUSSION AND FUTURE WORK",
            "text": "Our VA solution enables to both better understand Draco\u2019s knowledge base and its relation to recommended visualizations. We could justify the usefulness of our approach in qualitative and quantitative evaluations. However, both the data extraction approach and the proposed visualization approach still face some limitations:\n\u2022 Data Processing: The proposed grammar can only describe selected parts of Draco\u2019s knowledge base. For simplicity reasons, Draco\u2019s knowledge-based processing methodology is still used to extract the constraints\u2019 weights.\n\u2022 Understanding: The visualization still requires the user to have a minimal understanding of ASP and the knowledge base behind Draco. Users of the system must be familiar with how Draco encodes visualization facts and how it builds hard and soft constraints over these facts.\n\u2022 Incompleteness: The visualization only shows Draco\u2019s hard and soft constraints, not the whole knowledge base. The visualization does not depict the visualization facts, optimization statements, and user-dependent input queries.\n\u2022 Abstraction: Although the visualization gives an overview of the constraints based on their identifier, categories, and weights, it abstracts their content. As a consequence, the encoded logical expressions can not be inspected directly.\nThe generalizability of the visualization remains to be determined. According to the characteristics of the visualization, it can be used to visualize data structures that consist of a set of entities where the individual entities are part of hierarchical categories. Additionally, the proposed hypergraph within the radially arranged entities can represent the shared features of the entities.\nDuring our research, we identified several possibilities and suggestions for future work in the context of Draco\u2019s recommendation system. They concern the proposed constraint viewer in the form of the radial visualization, where it will be interesting to challenge this proposed approach to alternative representations like adjacency matrices, and better representations in node-link diagrams like edge bundling. Our ideas for future work include improving the scalability with ideas for radial sunburst visualization/interaction approaches as proposed by Stasko and Zhang [43]. More advanced interaction techniques could be imagined to include more detailed selection options, re-configurations (e.g., swap axis, rotations, re-arranging views), changes on the encoding, and advanced filter operations. Especially eliminating the misleading representations would help to make our prototype more comprehensible. Particularly the confusing highlighting of the violations should be targeted in the future. More research will be needed on how both soft and hard constraints could be visualized together in one view. Future directions might also include using Draco for testing and comparing new theories and empirical study results."
        },
        {
            "heading": "8 CONCLUSION",
            "text": "We presented a VA approach for exploring and understanding a rulebased recommendation system\u2019s knowledge base. We specifically focused on visualization recommendation systems, called Draco. Draco has been developed as an automated visualization recommendation system formalizing design knowledge as logical constraints in ASP. With an increasing set of constraints and incorporated design knowledge, even visualization experts lose overview in Draco and struggle to retrace the automated recommendation decisions made by the system. Our VA approach enables visualization experts to relate between Draco\u2019s recommendations and constraints stored in the knowledge base and support them in better understanding Draco. We implemented our own data extraction pipeline to extract shared features between constraints from the knowledge base. The resulting shared features and the constraints are then visualized using a hypergraph structure inside a radially-arranged hierarchical visualization. As proven in the evaluation, our approach enables visualization experts to interactively explore the design rules\u2019 violations.\nSUPPLEMENTAL MATERIAL\nFeatures and Grammar In one document in the supplemental material we added more details about the feature extraction process and outline the structure of the used ASP grammar. This adds to subsection 4.1 where we explained the data extraction process.\nDesign Choices We added a document to outline representations of our first prototypes. This adds to subsection 4.2 where we discussed design choices and decisions of our VA system.\nEvaluation We added more details and data on the conducted evaluation as described in section 6. The document contains a more detailed analysis of the results and more information about qualitative feedback."
        },
        {
            "heading": "ACKNOWLEDGMENTS",
            "text": "VRVis is funded by BMK, BMAW, Styria, SFG, Tyrol and Vienna Business Agency in the scope of COMET - Competence Centers for Excellent Technologies (879730) which is managed by FFG. Furthermore, this work was funded by the Austrian Science Foundation (FWF) under the grand P31419-N31."
        }
    ],
    "title": "Visual Analytics for Understanding Draco's Knowledge Base",
    "year": 2023
}