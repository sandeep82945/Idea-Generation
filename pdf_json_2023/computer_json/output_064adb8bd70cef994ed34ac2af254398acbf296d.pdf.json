{
    "abstractText": "12 In silico models of biological systems are usually very complex and rely on several parameters 13 describing physical and biological properties that require validation. As such, parameter space 14 exploration is an essential component of computational model development to fully characterize 15 and validate simulation results. Experimental data may also be used to constrain parameter space 16 (or enablemodel calibration) to enhance the biological relevance ofmodel parameters. Onewidely 17 used computational platform in the mathematical biology community is PhysiCell which provides 18 a standardized approach to agent-based models of biological phenomena at different time and 19 spatial scales. Nonetheless, one limitation of PhysiCell is that there has not been a generalized ap20 proach for parameter space exploration and calibration that can be run without high-performance 21 computing access. Taking this into account, we present PhysiCOOL, an open-source Python library 22 tailored to create standardized calibration and optimization routines of PhysiCellmodels. 23 Graphical abstract 24 Gon\u00e7alves et al. | bioR\u03c7 iv | February 13, 2023 | 1\u20139 . CC-BY 4.0 International license available under a (which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made The copyright holder for this preprint this version posted February 13, 2023. ; https://doi.org/10.1101/2022.11.17.516671 doi: bioRxiv preprint",
    "authors": [
        {
            "affiliations": [],
            "name": "In\u00eas G. Gon\u00e7alves"
        },
        {
            "affiliations": [],
            "name": "Sandhya Prabhakaran"
        },
        {
            "affiliations": [],
            "name": "Jos\u00e9 Manuel Garc\u00eda-Aznar"
        }
    ],
    "id": "SP:7264d0ac51e84d5db2bb54b7d9286d7bf9471086",
    "references": [
        {
            "authors": [
                "Alarie",
                "St\u00e9phane"
            ],
            "title": "Two decades of blackbox optimization applications",
            "venue": "en. In: EURO j",
            "year": 2021
        },
        {
            "authors": [
                "Banga",
                "Julio R"
            ],
            "title": "Optimization in computational systems biology",
            "venue": "BMC Systems Biology",
            "year": 2008
        },
        {
            "authors": [
                "Bergman",
                "Daniel"
            ],
            "title": "PhysiPKPD: A pharmacokinetics and pharmacodynamics module",
            "year": 2022
        },
        {
            "authors": [
                "Clermont",
                "Gilles",
                "Sven"
            ],
            "title": "The inverse problem in mathematical biology",
            "venue": "Zenker",
            "year": 2015
        },
        {
            "authors": [
                "Duggan",
                "Ben",
                "John Metzcar",
                "Paul Macklin"
            ],
            "title": "DAPT: A package enabling distributed auto",
            "year": 2021
        },
        {
            "authors": [
                "251 Ghaffarizadeh",
                "Ahmadreza"
            ],
            "title": "PhysiCell: An open source physics-based cell simulator",
            "year": 2018
        },
        {
            "authors": [
                "Gon\u00e7alves",
                "In\u00eas G",
                "Jose Manuel"
            ],
            "title": "Extracellular matrix density regulates",
            "venue": "Garcia-Aznar",
            "year": 2021
        },
        {
            "authors": [
                "Hasenauer",
                "Jan"
            ],
            "title": "Data-Driven Modelling of Biological Multi-Scale Processes",
            "year": 2015
        },
        {
            "authors": [
                "Heiland",
                "Randy"
            ],
            "title": "xml2jupyter: Mapping parameters between XML and Jupyter widgets",
            "year": 2019
        },
        {
            "authors": [
                "Kazerouni",
                "Anum S"
            ],
            "title": "Integrating Quantitative Assays with Biologically",
            "year": 2020
        },
        {
            "authors": [
                "267 Lei",
                "Bowen"
            ],
            "title": "Bayesian optimization with adaptive surrogate models for automated",
            "year": 2021
        },
        {
            "authors": [
                "Letort",
                "Gaelle"
            ],
            "title": "PhysiBoSS: a multi-scale agent-based modelling framework integrating",
            "year": 2018
        },
        {
            "authors": [
                "Lintusaari",
                "Jarno"
            ],
            "title": "ELFI: Engine for Likelihood-Free Inference",
            "venue": "Journal of Machine",
            "year": 2018
        },
        {
            "authors": [
                "Gon\u00e7alves"
            ],
            "title": "PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects",
            "year": 2023
        },
        {
            "authors": [
                "Merino-Casallo",
                "Francisco"
            ],
            "title": "Integration of in vitro and in silico models using Bayesian",
            "year": 2018
        },
        {
            "authors": [
                "Metzcar",
                "John"
            ],
            "title": "A Review of Cell-Based Computational Modeling in Cancer Biology",
            "year": 2019
        },
        {
            "authors": [
                "280 Movilla",
                "Nieves"
            ],
            "title": "A novel integrated experimental and computational approach",
            "year": 2023
        },
        {
            "authors": [
                "Ozik",
                "Jonathan"
            ],
            "title": "High-throughput cancer hypothesis testingwith an integratedPhysiCell",
            "year": 2018
        },
        {
            "authors": [
                "Gon\u00e7alves"
            ],
            "title": "PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects",
            "year": 2023
        }
    ],
    "sections": [
        {
            "text": "For correspondence: https: //github.com/IGGoncalves/ PhysiCOOL/issues (IGG) Data availability: PhysiCOOL is available as a Python library distributed through PyPi. The source code is available on GitHub. All the examples presented here can be run on Gitpod through interactive Jupyter Notebooks. Documentation is available on ReadTheDocs. Funding: This work was supported as part of the 2021 PhysiCell Hackathon (administrative supplement to Multiscale systems biology modeling to exploit tumor-stromal metabolic crosstalk in colorectal cancer, grant no 1U01CA232137). IGG was and JMGA were supported as part of projects that have received funding from the European Research Council (ERC) under the European Union\u2019s Horizon 2020 research and innovation programme (grant agreement no 101018587) and the project PRIMAGE (PRedictive In-silico Multiscale Analytics to support cancer personalized diaGnosis and prognosis, empowered by imaging biomarkers), a Horizon 2020|RIA project (Topic SC1-DTH-07-2018), grant agreement no: 826494. Competing interests: The author declare no competing interests.\nPhysiCOOL:1 A generalized framework for model2 Calibration and Optimization Of3 modeLing projects4 In\u00eas G. Gon\u00e7alves 1 , David A. Hormuth II 2, Sandhya Prabhakaran 3, Caleb M.5 Phillips 2, Jos\u00e9 Manuel Garc\u00eda-Aznar 16\n1Multiscale in Mechanical and Biological Engineering, University of Zaragoza; 2Oden7 Institute for Computational Engineering and Sciences, The University of Texas at Austin;8 3Integrated Mathematical Oncology department, H.Lee Moffitt Cancer Center and9 Research Institute10\n11\nAbstract12 In silico models of biological systems are usually very complex and rely on several parameters13 describing physical and biological properties that require validation. As such, parameter space14 exploration is an essential component of computational model development to fully characterize15 and validate simulation results. Experimental data may also be used to constrain parameter space16 (or enablemodel calibration) to enhance the biological relevance ofmodel parameters. Onewidely17 used computational platform in the mathematical biology community is PhysiCell which provides18 a standardized approach to agent-based models of biological phenomena at different time and19 spatial scales. Nonetheless, one limitation of PhysiCell is that there has not been a generalized ap-20 proach for parameter space exploration and calibration that can be run without high-performance21 computing access. Taking this into account, we present PhysiCOOL, an open-source Python library22 tailored to create standardized calibration and optimization routines of PhysiCellmodels.23 Graphical abstract24\nGon\u00e7alves et al. | bioR\ud835\udf12 iv | February 13, 2023 | 1\u20139\n25\nIntroduction26 Mathematical biology is a field of study that aims to represent biological systems through the lan-27 guage of mathematics as a set of mathematical rules which can be used to test hypotheses and28 make predictions (Clermont and Zenker, 2015). Several types of mathematical models can be em-29 ployed to simulate biological systems at varying complexity levels. Agent-based models are one of30 the most popular implementations to develop models that consider the cellular and sub-cellular31 scales. Currently, multiple computational frameworks are available to facilitate the creation of32 agent-based models based on previously built templates, making mathematical biology more ac-33 cessible to researchers from different backgrounds (Metzcar et al., 2019). Among these platforms,34 PhysiCell (Ghaffarizadeh et al., 2018) is an open-source hybrid framework that is able to simulate35 cells as discrete agents and model the reaction-diffusion dynamics of the substances present in36 the surroundingmicroenvironment through a continuous approach. Furthermore, recent add-ons37 have been developed to introduce new biological processes into the PhysiCell ecosystem (Letort et38 al., 2018; Bergman et al., 2022; Gon\u00e7alves and Garcia-Aznar, 2021).39 Despite the recent advances in the development of additional PhysiCell plugins, the new mod-40 ules are mostly centred around model extensions. Nevertheless, model exploration can be as41 important as model development to validate results and evaluate whether the model predictions42 about the underlying biological mechanisms are plausible (Hasenauer et al., 2015). Furthermore,43 experimental data could be used to provide biological and/or physical constraints onmodel param-44 eters to validate whether the model captures the range of expected biological behaviours (Kaze-45 rouni et al., 2020), and optimization routines could be employed to understand which model pa-46 rameters maximize the similarity between the model results and a target data set. Subsequently,47 model developers may consider these optimal solutions to identify which biological mechanisms48 captured by the computational model may explain the experimental data.49 We highlight that previous works have developed parameter exploration routines with Physi-50 Cell, namely DAPT and PhysiCell-EMEWS (Duggan, Metzcar, and Macklin, 2021; Ozik et al., 2018),51 but these were specifically designed for high-performance computing (HPC) and distributed sys-52 tems. Hence, currently, general PhysiCell users without access to such resources, or whose needs53 do not require them, must develop their own scripts to process simulation results and perform54 model exploration studies. As well as introducing a barrier to scientific progress depending on55 the researchers\u2019 programming knowledge level and computing resources, HPC workflows, in gen-56 eral, lack standardization that may enable widespread use in themathematical biology community57 (Banga, 2008). In addition, DAPT and PhysiCell-EMEWS focus on parameter exploration and not op-58 timization, and they require some level of expertise in both Python and PhysiCell.59 Taking into account that there is still a need in the PhysiCell community for a standardized tool60 that implements calibration and optimization routines, we present PhysiCOOL, a generalized frame-61 work for model calibration and optimization of modelling projects written in PhysiCell. PhysiCOOL62 aims to bemodel agnostic. In other words, models are treated as a black box that can be executed63 through Python, making this approach suitable for several kinds of biological problems. Moreover,64 our library includes a built-in multilevel optimization routine for parameter estimation that is con-65 strained by target output (experimental or otherwise). We also provide two practical examples of66 how PhysiCOOL can be used, showcasing PhysiCOOL\u2019s optimization routine at two distinct complex-67 ity levels. Furthermore, we show how PhysiCOOL black-box models can be used to couple PhysiCell68 with other publicly-available Python libraries for model optimization.69 Implementation70 PhysiCOOL is a Python library that requires Python version 3.8 or higher. This package was created71 to work specifically with PhysiCellmodels, and it fully supports PhysiCell v1.10.4 or lower (the most72\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 2 of 9\nrecent version at the time of publication). Furthermore, PhysiCOOL has been tested extensively and73 includes unit tests to assure that its modules are working as expected and that it can be used on74 different platforms.75 Configuration file parser76 As with many several computational modelling frameworks, PhysiCell models are initialized with77 values stored in a text-based configuration file, namely an Extensible Markup Language (XML) file78 (Ghaffarizadeh et al., 2018). Thus, in parameter sweeps and sensitivity analysis studies, it is neces-79 sary to open these files andmodify the parameter values to be studied every time a new simulation80 is run. This process can be done manually, either by editing the XML file directly or using GUI tools81 such as xml2jupyter (Heiland et al., 2019). However, it becomes unfeasible to repeat this action82 several times in large-scale studies. Henceforth, it is crucial to automate this process to run opti-83 mization and calibration workflows. Although it is possible to create Python scripts that will edit84 these files automatically with a standard module such as ElementTree (Xml.etree.ElementTree - the85 elementtree XML API n.d.), doing so requires users to identify the values to be updated with long86 strings that reflect the structure of the XML file, as shown in the code snippet below.87 from xml.etree import ElementTree\n# Read cell data file_path = \"config/PhysiCell_settings.xml\" tree = ElementTree.parse(file_path)\n# Define where to find the motility parameters stem = \"cell_definitions/cell_definition[@name='default']/phenotype/motility\" # Define the name and value of the parameter to be updated key = \"migration_bias\" value = 0.9 # Update the migration_bias value (no validation) tree.find(f\"{stem}/{key}\").text = str(value) tree.write(file_path)\nHere, we aimed to develop a Python class that enables users to read the data from these configu-88 ration files in a more efficient manner, making this process less prone to errors. We implemented89 a ConfigurationFileParser class that reads the data from the configuration file into custom Python90 objects that follow the expected structure and data requirements defined in the XML file. Vari-91 able types and numerical constraints are validated when new instances of these data classes are92 created and when their values are updated. To achieve this, we implemented our classes using93 Pydantic, (Colvin, n.d.) which improves data validation in Python. The task described in the code94 snippet presented previously can be implemented in a more user-friendly way with PhysiCOOL, as95 shown below:96 from physicool.config import ConfigFileParser\n# Read cell data into custom Python objects file_path = \"config/PhysiCell_settings.xml\" parser = ConfigFileParser(file_path) cell_data = parser.read_cell_data(name=\"default\")\n# Update the migration_bias value (values will be validated before writing) cell_data.motility.migration_bias = 0.9\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 3 of 9\nparser.write_cell_params(cell_data)\nBlack-box models97 In complex and large computational models, it may be challenging or even impossible to estimate98 themodel outputs analytically. Consequently, it is common to conduct calibration andoptimization99 studies by running several simulations and performing sensitivity analysis studies to identify how100 model outputs change in response to different input parameter values. This process is recognized101 as simulation-based optimization or black-box optimization (Alarie et al., 2021). PhysiCell models102 arewritten in C++ and have to be compiled to produce an executable file that can be run to produce103 simulation results. In order to test and characterize the response of these models, it is generally104 necessary to conduct three tasks:105\n1. Update the PhysiCell configuration file with input parameters values;106 2. Run the PhysiCellmodel;107 3. Read the model outputs and compute a desired output metric.108\nThese tasks can be performed manually. Nonetheless, it is not feasible or productive to do so in109 large computational studies, specifically when trying to characterize the model response to a large110 number of input parameter values that can be inside a wide range and require multiple simulation111 runs. Hence, PhysiCOOL allows users to create black-box models using the PhysiCellBlackBox class112 and automatically perform the aforementioned tasks through Python.113 These black-boxmodels aremodular in the sense that the users can selectwhat functions to use114 to update the configuration file (i) and to process the results (iii). For instance, users can decide to115 change the cells\u2019 motility parameters and evaluate the effect on the distance travelled by cells over116 time. Alternatively, the cell cycling rates could be varied to analyze the evolution of the number of117 cells. Furthermore, (i) and (iii) do not have to be defined in the black-box model. In fact, users can118 also create black-box models composed only of the PhysiCell executable and use our approach to119 run multiple simulation replicates.120 PhysiCOOL offers some built-in data quantification methods that can be used to extract and121 process data in step (iii). For example, functions are provided to obtain the final number of cells122 in a simulation, the final cell coordinates and the concentration of a given substance over the123 simulation domain. Furthermore, these methods can be employed by users to process simulation124 results and generate 2D and 3D plots of the cells and the microenvironment.125 Multilevel parameter sweeps126 Parameter optimization studies require the definition of a search space, which defines the range of127 the parameter values that will be studied. There aremultiple approaches to defining this space and128 how to explore it. For example, random search algorithms can be employed to randomly sample129 points within a defined bounded parameter space. Alternatively, a grid search, while a more com-130 putationally expensive option, systematically samples every point within a defined parameter grid131 space providing a more comprehensive overview of the model\u2019s response than that offered by a132 random search. Grid-based approaches have advantages for stochastic frameworks such as Physi-133 Cell, as gradient-based approaches may struggle to accurately calculate the gradient and change134 the parameter set to minimize the error between the model and the target data.135 PhysiCOOL implements a multilevel parameter sweep class (MultiLevelSweep) that is aimed at136 identifying the parameters that best fit a target data set through a grid search. In this example,137 the parameter sweep considers two PhysiCell parameters for which the user should provide initial138 values. At each level,MultiLevelSweep creates a search grid based on these two values, the number139 of points per direction and the percentage per direction. These values should be configured by140 the user and optimized for a given problem. Furthermore, the number of levels and grid spacing141 parameters are related to the precision and sensitivity of each model parameter. That is, for less142\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 4 of 9\nFigure 1. Model and optimization results for the logistic growth example. (a) Growth curves obtained fordifferent parameter sets (carrying capacity, \ud835\udc3e , and proliferation rate, \ud835\udc5f). (b) Optimization results after thecompletion of the first level of the multilevel optimization algorithm. The heatmap shows the difference, asgiven by the summed squared error, between the target data and the data produced by each cell\u2019s inputparameters. (c) Optimization results after 7 levels of the multilevel optimization algorithm. Results convergedto the parameters that originated the target data.\nsensitivity or less precisemodels, a single-level coarse grid searchmay suffice. However, for param-143 eters that require a high level of precision and significantly affect the model outcomes, multiple144 levels may be beneficial.145 The results for each simulation are compared to the target data and the error between both146 datasets is computed and stored. At the end of the level, the parameters that provided the min-147 imum error value are selected as the centre of the parameter exploration grid for the next level148 and the parameter bounds are updated accordingly.149 Examples150 Simple model of logistic growth151 The first example was implemented to calibrate two parameters of a simple model of logistic152 growth based on some target data that defines a generated growth curve. Therefore, it serves153 as an introduction to this PhysiCOOL feature, as users are able to fully understand the behaviour of154 this simplemodel. It must be remarked that this model was not implemented in PhysiCell. Wemod-155 elled the number of agents in a population, \ud835\udc41 , over a period of time \ud835\udc61 through a logistic function156 given by Eq 1:157\n\ud835\udc41(\ud835\udc61) = \ud835\udc3e\ud835\udc410 \ud835\udc410 + (\ud835\udc3e \u2212\ud835\udc410) exp (\u2212\ud835\udc5f\ud835\udc61) (1)\nwhere \ud835\udc3e represents the carrying capacity, i.e., the maximum population size, \ud835\udc410 represents the158 number of initial agents and \ud835\udc5f is the proliferation rate. In this study, we fixed the initial number159 of agents and evaluated how the carrying capacity and the proliferation rate regulated the growth160 curve of a population. An example of two growth curves obtained for different model parameters161 is shown in Fig 1(a).162\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 5 of 9\nWe generated some target data using this model (\ud835\udc3e = 1000, \ud835\udc5f = 0.1) and, subsequently, we used163 PhysiCOOL\u2019s multilevel sweep algorithm to evaluate if we could estimate these model parameters164 based on their resulting growth curve. To do so, we first created a search grid based on a set of165 user-defined values: an initial estimate for both parameters, the number of points to search in166 each direction of the search grid, the percentage to vary in each direction and the number of levels167 to search. These values can be found in Table 1.168\nFig 1(b) shows the error between the target and simulated datasets for every cell of the parame-169 ter space after one level of themultilevel search. At this point, a new point estimate was calculated170 based on the parameter values that minimized the error between the two datasets. Likewise, the171 parameter space was adjusted to the area of interest and the process was repeated in the new172 parameter grid. This process was repeated for each level of the search and the results are shown173 in Fig 1(c).174\nPhysiCell chemotaxis model175 The second example can be classified as a more complex problem since it was developed to cali-176 brate a chemotaxis model written in PhysiCell. In this modelling framework, the cells\u2019 chemotactic177 response, i.e., the ability to migrate along a substance gradient, is dictated by a bias value defined178 between 0 and 1 (Ghaffarizadeh et al., 2018). When cells have a migration bias of 0, they move in a179 random walk. Conversely, if the value is set to 1, cells follow the substance gradient in a determin-180 istic manner. Therefore, we developed a model to estimate the cells\u2019 speed and migration bias in181 response to an oxygen gradient based on their travelled distances.182 We implemented a 2D simulation with an oxygen source on one of the domain walls, as defined183 by the model\u2019s boundary conditions, and a group of cells placed on the opposite wall, as shown in184\nFig 2(a). We expected that the cells\u2019 final position would bemodulated by the cells\u2019 sensitivity to the185 oxygen chemotactic gradient. On the one hand, if a cell population had low sensitivity and, thus,186 moved randomly, they would likely remain close to their initial position as theywouldmove around187 without following any specific direction. On the other hand, cells that followed oxygen wouldmove188 towards the opposite wall, as seen in panel 2(b).189 We generated some target data by running a simulation with a migration bias of 0.9 and a190 speed value of 2.0 \ud835\udf07m/min and storing the final y coordinates of the cells. Subsequently, we ran191 our multilevel sweep pipeline to evaluate whether we could estimate the parameter values that192 originated this data with a set of initial points different from the target parameter values. The193 results for this study are shown in Fig 2(c).194\nConnecting to third-party libraries195 Given that PhysiCOOLmakes it possible for users to turn their PhysiCell models into black-box mod-196 els that receive some input parameters and return an output metric, it is straightforward to cou-197 ple them with third-party Python libraries that accept this kind of models. For example, psweep198 (Schmerler, 2022) is a Python library developed to run parameter studies and save the input pa-199 rameters values and the returned output metrics into a database. Users must define a set of pa-200 rameters and, for each of the defined values, psweep will (i) run a given user-defined function that201 takes these parameters as input and (ii) save the input and output values returned by this function202 into the database. Therefore, a PhysiCOOL black-box model could seamlessly be integrated into203 step (i).204\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 6 of 9\nFigure 2. Model and optimization results for the chemotaxis example. (a) Initial model configuration design.Cells (represented as grey circles) were placed close to a domain wall and an oxygen source (represented bythe blue arrows) was simulated on the opposite wall, creating a chemotactic gradient that cells could follow.This gradient is illustrated by the colour gradient shown in the figure. (b) Expected model results for cells withdifferent migration bias values. High migration bias populations were expected to migrate in a deterministicmanner and follow the oxygen gradient, crossing the domain and arriving at the opposite wall, as shown bytheir trajectories, shown as grey dashed lines. On the other hand, cells with low migration bias were expectedto move randomly and, thus, present low net displacement values. (c) Optimization results after 4 levels ofthe multilevel optimization algorithm. Results converged to the parameters that originated the target data.The colormap was updated for each level, describing the minimum and maximum error values at the currentlevel.\nIn addition, more sophisticated libraries could be considered to perform advanced optimiza-205 tion studies such as Approximate Bayesian Computation (ABC) and Bayesian Optimization for206 Likelihood-Free Inference (BOLFI) to sample parameter spaces ina more efficient manner (Lin-207 tusaari et al., 2018; Merino-Casallo et al., 2018; Lei et al., 2021; Movilla et al., 2023). Henceforth,208 although PhysiCOOL offers built-in optimization routines, it can be used in a modular way to take209 advantage of other libraries that may be more appropriate to a certain study or type of research,210 without the need to implement these optimization algorithms from scratch.211 Future directions212 At its current state of development, we believe that PhysiCOOLwill already improve PhysiCell\u2019s acces-213 sibility as it provides an intuitive interface to run studies in Python, which is more popular among214 biology researchers than C++, in which PhysiCell was originally written. Additionally, this standard-215 ized approach provides a straightforward workflow for integrating target data (defined from sim-216 ulations or biological observations) to constrain parameter space for agent-based models. In the217 future, new features can be added to PhysiCOOL, such as the ability to generate non-linear parame-218 ter spaces, stopping criteria based on iteration or tolerance for themultilevel sweep and employing219 alternative optimization algorithms. Although future iterations of this library may include different220 optimization approaches, its modular design assures that advanced users are still able to build221 pipelines that suit their needs.222 Acknowledgment223 The authors would like to acknowledge Paul Macklin, Elmar Bucher and the PhysiCell team for the224 support and advice offered during the design process of this application. This preprint was created225 using the LaPreprint template (https://github.com/roaldarbol/lapreprint) by Mikkel Roald-Arb\u00f8l .226\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 7 of 9\nAuthor contributions227 \u2022 Conceptualization: In\u00eas G. Gon\u00e7alves, David A. Hormuth II, Caleb M. Phillips, Sandhya Prab-228 hakaran229 \u2022 Software: In\u00eas G. Gon\u00e7alves, David A. Hormuth II, Caleb M. Phillips230 \u2022 Validation: In\u00eas G. Gon\u00e7alves, David A. Hormuth II, Sandhya Prabhakaran231 \u2022 Writing - original draft: In\u00eas G. Gon\u00e7alves232 \u2022 Writing - review & editing: In\u00eas G. Gon\u00e7alves, David A. Hormuth II, Sandhya Prabhakaran, Jos\u00e9233 Manuel Garc\u00eda-Aznar234 \u2022 Funding acquisition: Jos\u00e9 Manuel Garc\u00eda-Aznar235 References236 Alarie, St\u00e9phane et al. (2021). \u201cTwo decades of blackbox optimization applications\u201d. en. In: EURO j.237 comput. optim. 9.100011, p. 100011.238 Banga, Julio R (2008). \u201cOptimization in computational systems biology\u201d. In: BMC Systems Biology 2.1.239 DOI: 10.1186/1752-0509-2-47. URL: https://doi.org/10.1186%2F1752-0509-2-47.240 Bergman, Daniel et al. (2022). \u201cPhysiPKPD: A pharmacokinetics and pharmacodynamics module241 for PhysiCell\u201d. In: Gigabyte 2022, pp. 1\u201311. DOI: 10.46471/gigabyte.72. URL: https://doi.org/10.242 46471/gigabyte.72.243 Clermont, Gilles and Sven Zenker (2015). \u201cThe inverse problem in mathematical biology\u201d. In: Math-244 ematical Biosciences 260, pp. 11\u201315. DOI: 10.1016/j.mbs.2014.09.001. URL: https://doi.org/10.245 1016%2Fj.mbs.2014.09.001.246 Colvin, Samuel (n.d.). Samuelcolvin/pydantic: Data Parsing and validation using python type hints. URL:247 https://github.com/samuelcolvin/pydantic.248 Duggan, Ben, John Metzcar, and Paul Macklin (2021). \u201cDAPT: A package enabling distributed auto-249 mated parameter testing\u201d. In: Gigabyte 2021, pp. 1\u201310. DOI: 10.46471/gigabyte.22. URL: https:250 //doi.org/10.46471%2Fgigabyte.22.251 Ghaffarizadeh, Ahmadreza et al. (2018). \u201cPhysiCell: An open source physics-based cell simulator252 for 3-D multicellular systems\u201d. In: PLOS Computational Biology 14 (2). Ed. by Timoth\u00e9e Poisot,253 e1005991. ISSN: 1553-7358. DOI: 10.1371/journal.pcbi.1005991. URL: https://dx.plos.org/10.1371/254 journal.pcbi.1005991.255 Gon\u00e7alves, In\u00eas G and Jose Manuel Garcia-Aznar (2021). \u201cExtracellular matrix density regulates256 the formation of tumour spheroids through cell migration\u201d. In: PLoS computational biology 17.2,257 e1008764.258 Hasenauer, Jan et al. (2015). \u201cData-Driven Modelling of Biological Multi-Scale Processes\u201d. In: Journal259 of Coupled Systems and Multiscale Dynamics 3.2, pp. 101\u2013121. DOI: 10.1166/jcsmd.2015.1069. URL:260 https://doi.org/10.1166%2Fjcsmd.2015.1069.261 Heiland, Randy et al. (2019). \u201cxml2jupyter: Mapping parameters between XML and Jupyter widgets\u201d.262 In: Journal of Open Source Software 4 (39), p. 1408. ISSN: 2475-9066. DOI: 10.21105/joss.01408.263 Kazerouni, Anum S. et al. (2020). \u201cIntegrating Quantitative Assays with Biologically Based Mathe-264 matical Modeling for Predictive Oncology\u201d. In: iScience 23.12, p. 101807. ISSN: 2589-0042. DOI:265 https://doi.org/10.1016/j.isci.2020.101807. URL: https://www.sciencedirect.com/science/article/pii/266 S258900422031004X.267 Lei, Bowen et al. (2021). \u201cBayesian optimization with adaptive surrogate models for automated268 experimental design\u201d. In: Npj Computational Materials 7.1, p. 194.269 Letort, Gaelle et al. (2018). \u201cPhysiBoSS: a multi-scale agent-based modelling framework integrating270 physical dimension and cell signalling\u201d. In: Bioinformatics 35.7. Ed. by Jonathan Wren, pp. 1188\u2013271 1196. DOI: 10.1093/bioinformatics/bty766. URL: https://doi.org/10.1093%2Fbioinformatics%2Fbty766.272 Lintusaari, Jarno et al. (2018). \u201cELFI: Engine for Likelihood-Free Inference\u201d. In: Journal of Machine273 Learning Research 19.16, pp. 1\u20137. URL: http://jmlr.org/papers/v19/17-374.html.274\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 8 of 9\nMerino-Casallo, Francisco et al. (2018). \u201cIntegration of in vitro and in silico models using Bayesian275 optimization with an application to stochastic modeling of mesenchymal 3D cell migration\u201d. In:276 Frontiers in physiology 9, p. 1246.277 Metzcar, John et al. (2019). \u201cA Review of Cell-Based Computational Modeling in Cancer Biology\u201d. In:278 JCO Clinical Cancer Informatics 3, pp. 1\u201313. DOI: 10.1200/cci.18.00069. URL: https://doi.org/10.279 1200%2Fcci.18.00069.280 Movilla, Nieves et al. (2023). \u201cA novel integrated experimental and computational approach to un-281 ravel fibroblast motility in response to chemical gradients in 3D collagen matrices\u201d. In: Integra-282 tive Biology. DOI: 10.1093/intbio/zyad002. URL: https://doi.org/10.1093/intbio/zyad002.283 Ozik, Jonathan et al. (2018). \u201cHigh-throughput cancer hypothesis testingwith an integratedPhysiCell-284 EMEWS workflow\u201d. In: BMC Bioinformatics 19.S18. DOI: 10.1186/s12859-018-2510-x. URL: https:285 //doi.org/10.1186%2Fs12859-018-2510-x.286 Schmerler, Steve (2022). elcorto/psweep: 0.9.0. Version 0.9.0. DOI: 10.5281/zenodo.7076330. URL:287 https://doi.org/10.5281/zenodo.7076330.288 Xml.etree.ElementTree - the elementtree XML API (n.d.). URL: https://docs.python.org/3/library/xml.etree.289 elementtree.html.290\nGon\u00e7alves et al. 2023 | PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects bioR\ud835\udf12 iv | 9 of 9"
        }
    ],
    "title": "PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects",
    "year": 2023
}